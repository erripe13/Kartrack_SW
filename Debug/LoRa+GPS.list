
LoRa+GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000161ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  08016380  08016380  00017380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016c08  08016c08  0001831c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016c08  08016c08  00017c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016c10  08016c10  0001831c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c10  08016c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016c14  08016c14  00017c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08016c18  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  08016df4  000181dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  08016e94  0001827c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000b1cc  20000320  08016f34  00018320  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000b4ec  08016f34  000184ec  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001831c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003b6d3  00000000  00000000  0001834c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000922c  00000000  00000000  00053a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000030f0  00000000  00000000  0005cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000025a5  00000000  00000000  0005fd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000372bf  00000000  00000000  000622e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00046271  00000000  00000000  000995a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001289d5  00000000  00000000  000df815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002081ea  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e15c  00000000  00000000  00208230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  0021638c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000320 	.word	0x20000320
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016364 	.word	0x08016364

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000324 	.word	0x20000324
 800020c:	08016364 	.word	0x08016364

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001060:	b4b0      	push	{r4, r5, r7}
 8001062:	b08f      	sub	sp, #60	@ 0x3c
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001068:	f240 13b1 	movw	r3, #433	@ 0x1b1
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800106e:	2307      	movs	r3, #7
 8001070:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001074:	2307      	movs	r3, #7
 8001076:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 800107a:	2301      	movs	r3, #1
 800107c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8001080:	23ff      	movs	r3, #255	@ 0xff
 8001082:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8001086:	2364      	movs	r3, #100	@ 0x64
 8001088:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 800108c:	2308      	movs	r3, #8
 800108e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	461d      	mov	r5, r3
 8001094:	f107 040c 	add.w	r4, r7, #12
 8001098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	373c      	adds	r7, #60	@ 0x3c
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bcb0      	pop	{r4, r5, r7}
 80010b0:	4770      	bx	lr

080010b2 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80010bc:	2101      	movs	r1, #1
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f9ff 	bl	80014c2 <LoRa_read>
 80010c4:	4603      	mov	r3, r0
 80010c6:	73bb      	strb	r3, [r7, #14]
	data = read;
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d107      	bne.n	80010e2 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	f023 0307 	bic.w	r3, r3, #7
 80010d8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
 80010e0:	e03e      	b.n	8001160 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10c      	bne.n	8001102 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80010e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010ec:	f023 0307 	bic.w	r3, r3, #7
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	61da      	str	r2, [r3, #28]
 8001100:	e02e      	b.n	8001160 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d10c      	bne.n	8001122 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800110c:	f023 0307 	bic.w	r3, r3, #7
 8001110:	b25b      	sxtb	r3, r3
 8001112:	f043 0303 	orr.w	r3, r3, #3
 8001116:	b25b      	sxtb	r3, r3
 8001118:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2203      	movs	r2, #3
 800111e:	61da      	str	r2, [r3, #28]
 8001120:	e01e      	b.n	8001160 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b05      	cmp	r3, #5
 8001126:	d10c      	bne.n	8001142 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800112c:	f023 0307 	bic.w	r3, r3, #7
 8001130:	b25b      	sxtb	r3, r3
 8001132:	f043 0305 	orr.w	r3, r3, #5
 8001136:	b25b      	sxtb	r3, r3
 8001138:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2205      	movs	r2, #5
 800113e:	61da      	str	r2, [r3, #28]
 8001140:	e00e      	b.n	8001160 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	2b06      	cmp	r3, #6
 8001146:	d10b      	bne.n	8001160 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800114c:	f023 0307 	bic.w	r3, r3, #7
 8001150:	b25b      	sxtb	r3, r3
 8001152:	f043 0306 	orr.w	r3, r3, #6
 8001156:	b25b      	sxtb	r3, r3
 8001158:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2206      	movs	r2, #6
 800115e:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	461a      	mov	r2, r3
 8001164:	2101      	movs	r1, #1
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f9c5 	bl	80014f6 <LoRa_write>
	//HAL_Delay(10);
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	4613      	mov	r3, r2
 8001182:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	889b      	ldrh	r3, [r3, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	4619      	mov	r1, r3
 8001190:	f005 fc76 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6998      	ldr	r0, [r3, #24]
 8001198:	88fa      	ldrh	r2, [r7, #6]
 800119a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	f009 fb39 	bl	800a816 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011a4:	bf00      	nop
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00a f800 	bl	800b1b0 <HAL_SPI_GetState>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d1f7      	bne.n	80011a6 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6998      	ldr	r0, [r3, #24]
 80011ba:	8b3a      	ldrh	r2, [r7, #24]
 80011bc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	f009 fc9e 	bl	800ab02 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80011c6:	bf00      	nop
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f009 ffef 	bl	800b1b0 <HAL_SPI_GetState>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d1f7      	bne.n	80011c8 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	889b      	ldrh	r3, [r3, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	4619      	mov	r1, r3
 80011e4:	f005 fc4c 	bl	8006a80 <HAL_GPIO_WritePin>
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	4613      	mov	r3, r2
 80011fe:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	889b      	ldrh	r3, [r3, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	f005 fc38 	bl	8006a80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6998      	ldr	r0, [r3, #24]
 8001214:	88fa      	ldrh	r2, [r7, #6]
 8001216:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	f009 fafb 	bl	800a816 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001220:	bf00      	nop
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	4618      	mov	r0, r3
 8001228:	f009 ffc2 	bl	800b1b0 <HAL_SPI_GetState>
 800122c:	4603      	mov	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d1f7      	bne.n	8001222 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6998      	ldr	r0, [r3, #24]
 8001236:	8b3a      	ldrh	r2, [r7, #24]
 8001238:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	f009 faea 	bl	800a816 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001242:	bf00      	nop
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4618      	mov	r0, r3
 800124a:	f009 ffb1 	bl	800b1b0 <HAL_SPI_GetState>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d1f7      	bne.n	8001244 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	889b      	ldrh	r3, [r3, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	4619      	mov	r1, r3
 8001260:	f005 fc0e 	bl	8006a80 <HAL_GPIO_WritePin>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8001278:	2126      	movs	r1, #38	@ 0x26
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f921 	bl	80014c2 <LoRa_read>
 8001280:	4603      	mov	r3, r0
 8001282:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800128a:	7bbb      	ldrb	r3, [r7, #14]
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e003      	b.n	800129c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	f023 0308 	bic.w	r3, r3, #8
 800129a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	461a      	mov	r2, r3
 80012a0:	2126      	movs	r1, #38	@ 0x26
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f927 	bl	80014f6 <LoRa_write>
	HAL_Delay(10);
 80012a8:	200a      	movs	r0, #10
 80012aa:	f003 feb5 	bl	8005018 <HAL_Delay>
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b096      	sub	sp, #88	@ 0x58
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 80012c0:	4a17      	ldr	r2, [pc, #92]	@ (8001320 <LoRa_setAutoLDO+0x68>)
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	4611      	mov	r1, r2
 80012c8:	2250      	movs	r2, #80	@ 0x50
 80012ca:	4618      	mov	r0, r3
 80012cc:	f012 fc17 	bl	8013afe <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012d6:	461a      	mov	r2, r3
 80012d8:	2301      	movs	r3, #1
 80012da:	4093      	lsls	r3, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f941 	bl	8000564 <__aeabi_i2d>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	3358      	adds	r3, #88	@ 0x58
 80012ec:	443b      	add	r3, r7
 80012ee:	3b50      	subs	r3, #80	@ 0x50
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff faca 	bl	800088c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc4a 	bl	8000b98 <__aeabi_d2iz>
 8001304:	4603      	mov	r3, r0
 8001306:	2b10      	cmp	r3, #16
 8001308:	bfcc      	ite	gt
 800130a:	2301      	movgt	r3, #1
 800130c:	2300      	movle	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4619      	mov	r1, r3
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffaa 	bl	800126c <LoRa_setLowDaraRateOptimization>
}
 8001318:	bf00      	nop
 800131a:	3758      	adds	r7, #88	@ 0x58
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	08016380 	.word	0x08016380

08001324 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	04db      	lsls	r3, r3, #19
 8001332:	115b      	asrs	r3, r3, #5
 8001334:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	0c1b      	lsrs	r3, r3, #16
 800133a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800133c:	7afb      	ldrb	r3, [r7, #11]
 800133e:	461a      	mov	r2, r3
 8001340:	2106      	movs	r1, #6
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f8d7 	bl	80014f6 <LoRa_write>
	HAL_Delay(5);
 8001348:	2005      	movs	r0, #5
 800134a:	f003 fe65 	bl	8005018 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001354:	7afb      	ldrb	r3, [r7, #11]
 8001356:	461a      	mov	r2, r3
 8001358:	2107      	movs	r1, #7
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f8cb 	bl	80014f6 <LoRa_write>
	HAL_Delay(5);
 8001360:	2005      	movs	r0, #5
 8001362:	f003 fe59 	bl	8005018 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800136a:	7afb      	ldrb	r3, [r7, #11]
 800136c:	461a      	mov	r2, r3
 800136e:	2108      	movs	r1, #8
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f8c0 	bl	80014f6 <LoRa_write>
	HAL_Delay(5);
 8001376:	2005      	movs	r0, #5
 8001378:	f003 fe4e 	bl	8005018 <HAL_Delay>
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2b0c      	cmp	r3, #12
 8001392:	dd01      	ble.n	8001398 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001394:	230c      	movs	r3, #12
 8001396:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2b06      	cmp	r3, #6
 800139c:	dc01      	bgt.n	80013a2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800139e:	2307      	movs	r3, #7
 80013a0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80013a2:	211e      	movs	r1, #30
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f88c 	bl	80014c2 <LoRa_read>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80013ae:	200a      	movs	r0, #10
 80013b0:	f003 fe32 	bl	8005018 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	461a      	mov	r2, r3
 80013cc:	211e      	movs	r1, #30
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f891 	bl	80014f6 <LoRa_write>
	HAL_Delay(10);
 80013d4:	200a      	movs	r0, #10
 80013d6:	f003 fe1f 	bl	8005018 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff6c 	bl	80012b8 <LoRa_setAutoLDO>
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	461a      	mov	r2, r3
 80013f8:	2109      	movs	r1, #9
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f87b 	bl	80014f6 <LoRa_write>
	HAL_Delay(10);
 8001400:	200a      	movs	r0, #10
 8001402:	f003 fe09 	bl	8005018 <HAL_Delay>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	2b2c      	cmp	r3, #44	@ 0x2c
 8001424:	d801      	bhi.n	800142a <LoRa_setOCP+0x1a>
		current = 45;
 8001426:	232d      	movs	r3, #45	@ 0x2d
 8001428:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	2bf0      	cmp	r3, #240	@ 0xf0
 800142e:	d901      	bls.n	8001434 <LoRa_setOCP+0x24>
		current = 240;
 8001430:	23f0      	movs	r3, #240	@ 0xf0
 8001432:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	2b78      	cmp	r3, #120	@ 0x78
 8001438:	d809      	bhi.n	800144e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	3b2d      	subs	r3, #45	@ 0x2d
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <LoRa_setOCP+0x78>)
 8001440:	fb82 1203 	smull	r1, r2, r2, r3
 8001444:	1052      	asrs	r2, r2, #1
 8001446:	17db      	asrs	r3, r3, #31
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e00b      	b.n	8001466 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	2bf0      	cmp	r3, #240	@ 0xf0
 8001452:	d808      	bhi.n	8001466 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	331e      	adds	r3, #30
 8001458:	4a0b      	ldr	r2, [pc, #44]	@ (8001488 <LoRa_setOCP+0x78>)
 800145a:	fb82 1203 	smull	r1, r2, r2, r3
 800145e:	1092      	asrs	r2, r2, #2
 8001460:	17db      	asrs	r3, r3, #31
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	3320      	adds	r3, #32
 800146a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	461a      	mov	r2, r3
 8001470:	210b      	movs	r1, #11
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f83f 	bl	80014f6 <LoRa_write>
	HAL_Delay(10);
 8001478:	200a      	movs	r0, #10
 800147a:	f003 fdcd 	bl	8005018 <HAL_Delay>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	66666667 	.word	0x66666667

0800148c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001494:	211e      	movs	r1, #30
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f813 	bl	80014c2 <LoRa_read>
 800149c:	4603      	mov	r3, r0
 800149e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	f043 0307 	orr.w	r3, r3, #7
 80014a6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	461a      	mov	r2, r3
 80014ac:	211e      	movs	r1, #30
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f821 	bl	80014f6 <LoRa_write>
	HAL_Delay(10);
 80014b4:	200a      	movs	r0, #10
 80014b6:	f003 fdaf 	bl	8005018 <HAL_Delay>
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af02      	add	r7, sp, #8
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80014d8:	f107 030f 	add.w	r3, r7, #15
 80014dc:	f107 010e 	add.w	r1, r7, #14
 80014e0:	2201      	movs	r2, #1
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	2201      	movs	r2, #1
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fe44 	bl	8001174 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af02      	add	r7, sp, #8
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
 8001502:	4613      	mov	r3, r2
 8001504:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800150c:	b2db      	uxtb	r3, r3
 800150e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001510:	78bb      	ldrb	r3, [r7, #2]
 8001512:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001514:	f107 030f 	add.w	r3, r7, #15
 8001518:	f107 010e 	add.w	r1, r7, #14
 800151c:	2201      	movs	r2, #1
 800151e:	9200      	str	r2, [sp, #0]
 8001520:	2201      	movs	r2, #1
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fe64 	bl	80011f0 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	461a      	mov	r2, r3
 800153c:	460b      	mov	r3, r1
 800153e:	72fb      	strb	r3, [r7, #11]
 8001540:	4613      	mov	r3, r2
 8001542:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800154a:	b2db      	uxtb	r3, r3
 800154c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	889b      	ldrh	r3, [r3, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	4619      	mov	r1, r3
 800155a:	f005 fa91 	bl	8006a80 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6998      	ldr	r0, [r3, #24]
 8001562:	f107 0117 	add.w	r1, r7, #23
 8001566:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800156a:	2201      	movs	r2, #1
 800156c:	f009 f953 	bl	800a816 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001570:	bf00      	nop
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4618      	mov	r0, r3
 8001578:	f009 fe1a 	bl	800b1b0 <HAL_SPI_GetState>
 800157c:	4603      	mov	r3, r0
 800157e:	2b01      	cmp	r3, #1
 8001580:	d1f7      	bne.n	8001572 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6998      	ldr	r0, [r3, #24]
 8001586:	7abb      	ldrb	r3, [r7, #10]
 8001588:	b29a      	uxth	r2, r3
 800158a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f009 f941 	bl	800a816 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001594:	bf00      	nop
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	4618      	mov	r0, r3
 800159c:	f009 fe08 	bl	800b1b0 <HAL_SPI_GetState>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d1f7      	bne.n	8001596 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	889b      	ldrh	r3, [r3, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	4619      	mov	r1, r3
 80015b2:	f005 fa65 	bl	8006a80 <HAL_GPIO_WritePin>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]

	return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	4611      	mov	r1, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	460b      	mov	r3, r1
 80015e4:	71fb      	strb	r3, [r7, #7]
 80015e6:	4613      	mov	r3, r2
 80015e8:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80015f0:	2101      	movs	r1, #1
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff fd5d 	bl	80010b2 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80015f8:	210e      	movs	r1, #14
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7ff ff61 	bl	80014c2 <LoRa_read>
 8001600:	4603      	mov	r3, r0
 8001602:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001604:	7cfb      	ldrb	r3, [r7, #19]
 8001606:	461a      	mov	r2, r3
 8001608:	210d      	movs	r1, #13
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f7ff ff73 	bl	80014f6 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	461a      	mov	r2, r3
 8001614:	2122      	movs	r1, #34	@ 0x22
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff ff6d 	bl	80014f6 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	2100      	movs	r1, #0
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff ff84 	bl	8001530 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001628:	2103      	movs	r1, #3
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7ff fd41 	bl	80010b2 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001630:	2112      	movs	r1, #18
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7ff ff45 	bl	80014c2 <LoRa_read>
 8001638:	4603      	mov	r3, r0
 800163a:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800163c:	7cfb      	ldrb	r3, [r7, #19]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00a      	beq.n	800165c <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001646:	22ff      	movs	r2, #255	@ 0xff
 8001648:	2112      	movs	r1, #18
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff ff53 	bl	80014f6 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001650:	6979      	ldr	r1, [r7, #20]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff fd2d 	bl	80010b2 <LoRa_gotoMode>
			return 1;
 8001658:	2301      	movs	r3, #1
 800165a:	e00f      	b.n	800167c <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800165c:	88bb      	ldrh	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	80bb      	strh	r3, [r7, #4]
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001668:	6979      	ldr	r1, [r7, #20]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff fd21 	bl	80010b2 <LoRa_gotoMode>
				return 0;
 8001670:	2300      	movs	r3, #0
 8001672:	e003      	b.n	800167c <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f003 fccf 	bl	8005018 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800167a:	e7d9      	b.n	8001630 <LoRa_transmit+0x5c>
	}
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff96 	bl	80015be <LoRa_isvalid>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8096 	beq.w	80017c6 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800169a:	2100      	movs	r1, #0
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fd08 	bl	80010b2 <LoRa_gotoMode>
			HAL_Delay(10);
 80016a2:	200a      	movs	r0, #10
 80016a4:	f003 fcb8 	bl	8005018 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80016a8:	2101      	movs	r1, #1
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff09 	bl	80014c2 <LoRa_read>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f003 fcaf 	bl	8005018 <HAL_Delay>
			data = read | 0x80;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016c0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	461a      	mov	r2, r3
 80016c6:	2101      	movs	r1, #1
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff14 	bl	80014f6 <LoRa_write>
			HAL_Delay(100);
 80016ce:	2064      	movs	r0, #100	@ 0x64
 80016d0:	f003 fca2 	bl	8005018 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fe22 	bl	8001324 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fe7d 	bl	80013e8 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80016f4:	4619      	mov	r1, r3
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fe8a 	bl	8001410 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80016fc:	2223      	movs	r2, #35	@ 0x23
 80016fe:	210c      	movs	r1, #12
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fef8 	bl	80014f6 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fec0 	bl	800148c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fe35 	bl	8001384 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800171a:	22ff      	movs	r2, #255	@ 0xff
 800171c:	211f      	movs	r1, #31
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fee9 	bl	80014f6 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	b2da      	uxtb	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4413      	add	r3, r2
 800173e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	461a      	mov	r2, r3
 8001744:	211d      	movs	r1, #29
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fed5 	bl	80014f6 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff fdb3 	bl	80012b8 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001756:	0a1b      	lsrs	r3, r3, #8
 8001758:	b29b      	uxth	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	2120      	movs	r1, #32
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fec8 	bl	80014f6 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	2121      	movs	r1, #33	@ 0x21
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fec0 	bl	80014f6 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001776:	2140      	movs	r1, #64	@ 0x40
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fea2 	bl	80014c2 <LoRa_read>
 800177e:	4603      	mov	r3, r0
 8001780:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001788:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	461a      	mov	r2, r3
 800178e:	2140      	movs	r1, #64	@ 0x40
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff feb0 	bl	80014f6 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001796:	2101      	movs	r1, #1
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fc8a 	bl	80010b2 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80017a4:	200a      	movs	r0, #10
 80017a6:	f003 fc37 	bl	8005018 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80017aa:	2142      	movs	r1, #66	@ 0x42
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fe88 	bl	80014c2 <LoRa_read>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b12      	cmp	r3, #18
 80017ba:	d101      	bne.n	80017c0 <LoRa_init+0x13c>
				return LORA_OK;
 80017bc:	23c8      	movs	r3, #200	@ 0xc8
 80017be:	e004      	b.n	80017ca <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80017c0:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80017c4:	e001      	b.n	80017ca <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80017c6:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017da:	463b      	mov	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80017e6:	4b21      	ldr	r3, [pc, #132]	@ (800186c <MX_ADC3_Init+0x98>)
 80017e8:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <MX_ADC3_Init+0x9c>)
 80017ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	@ (800186c <MX_ADC3_Init+0x98>)
 80017ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017f2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	@ (800186c <MX_ADC3_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	@ (800186c <MX_ADC3_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001800:	4b1a      	ldr	r3, [pc, #104]	@ (800186c <MX_ADC3_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001806:	4b19      	ldr	r3, [pc, #100]	@ (800186c <MX_ADC3_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800180e:	4b17      	ldr	r3, [pc, #92]	@ (800186c <MX_ADC3_Init+0x98>)
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <MX_ADC3_Init+0x98>)
 8001816:	4a17      	ldr	r2, [pc, #92]	@ (8001874 <MX_ADC3_Init+0xa0>)
 8001818:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181a:	4b14      	ldr	r3, [pc, #80]	@ (800186c <MX_ADC3_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_ADC3_Init+0x98>)
 8001822:	2201      	movs	r2, #1
 8001824:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_ADC3_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800182e:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <MX_ADC3_Init+0x98>)
 8001830:	2201      	movs	r2, #1
 8001832:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001834:	480d      	ldr	r0, [pc, #52]	@ (800186c <MX_ADC3_Init+0x98>)
 8001836:	f003 fc13 	bl	8005060 <HAL_ADC_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001840:	f002 f890 	bl	8003964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001844:	2304      	movs	r3, #4
 8001846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001848:	2301      	movs	r3, #1
 800184a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	@ (800186c <MX_ADC3_Init+0x98>)
 8001856:	f003 fc47 	bl	80050e8 <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001860:	f002 f880 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000033c 	.word	0x2000033c
 8001870:	40012200 	.word	0x40012200
 8001874:	0f000001 	.word	0x0f000001

08001878 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a15      	ldr	r2, [pc, #84]	@ (80018ec <HAL_ADC_MspInit+0x74>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d123      	bne.n	80018e2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	4a14      	ldr	r2, [pc, #80]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 80018a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a0e      	ldr	r2, [pc, #56]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <HAL_ADC_MspInit+0x78>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF7     ------> ADC3_IN5
    PF6     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin;
 80018ca:	23c0      	movs	r3, #192	@ 0xc0
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ce:	2303      	movs	r3, #3
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <HAL_ADC_MspInit+0x7c>)
 80018de:	f004 ff0b 	bl	80066f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	@ 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40012200 	.word	0x40012200
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40021400 	.word	0x40021400

080018f8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <MX_CRC_Init+0x3c>)
 80018fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001938 <MX_CRC_Init+0x40>)
 8001900:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <MX_CRC_Init+0x3c>)
 8001904:	2200      	movs	r2, #0
 8001906:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001908:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <MX_CRC_Init+0x3c>)
 800190a:	2200      	movs	r2, #0
 800190c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <MX_CRC_Init+0x3c>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <MX_CRC_Init+0x3c>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <MX_CRC_Init+0x3c>)
 800191c:	2201      	movs	r2, #1
 800191e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	@ (8001934 <MX_CRC_Init+0x3c>)
 8001922:	f003 ff17 	bl	8005754 <HAL_CRC_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800192c:	f002 f81a 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000384 	.word	0x20000384
 8001938:	40023000 	.word	0x40023000

0800193c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <HAL_CRC_MspInit+0x38>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10b      	bne.n	8001966 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_CRC_MspInit+0x3c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <HAL_CRC_MspInit+0x3c>)
 8001954:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <HAL_CRC_MspInit+0x3c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40023000 	.word	0x40023000
 8001978:	40023800 	.word	0x40023800

0800197c <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001980:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <MX_DCMI_Init+0x60>)
 8001982:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <MX_DCMI_Init+0x64>)
 8001984:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <MX_DCMI_Init+0x60>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <MX_DCMI_Init+0x60>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001992:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <MX_DCMI_Init+0x60>)
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001998:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <MX_DCMI_Init+0x60>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800199e:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80019a4:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80019aa:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80019bc:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019be:	2200      	movs	r2, #0
 80019c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80019c8:	4804      	ldr	r0, [pc, #16]	@ (80019dc <MX_DCMI_Init+0x60>)
 80019ca:	f003 ffb5 	bl	8005938 <HAL_DCMI_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80019d4:	f001 ffc6 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200003a8 	.word	0x200003a8
 80019e0:	50050000 	.word	0x50050000

080019e4 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08e      	sub	sp, #56	@ 0x38
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a50      	ldr	r2, [pc, #320]	@ (8001b44 <HAL_DCMI_MspInit+0x160>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	f040 809a 	bne.w	8001b3c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001a08:	4b4f      	ldr	r3, [pc, #316]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6353      	str	r3, [r2, #52]	@ 0x34
 8001a14:	4b4c      	ldr	r3, [pc, #304]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	623b      	str	r3, [r7, #32]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a20:	4b49      	ldr	r3, [pc, #292]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a24:	4a48      	ldr	r2, [pc, #288]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2c:	4b46      	ldr	r3, [pc, #280]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a38:	4b43      	ldr	r3, [pc, #268]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	4a42      	ldr	r2, [pc, #264]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a44:	4b40      	ldr	r3, [pc, #256]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a50:	4b3d      	ldr	r3, [pc, #244]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	4a3c      	ldr	r2, [pc, #240]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a68:	4b37      	ldr	r3, [pc, #220]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6c:	4a36      	ldr	r2, [pc, #216]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a74:	4b34      	ldr	r3, [pc, #208]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	4b31      	ldr	r3, [pc, #196]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a84:	4a30      	ldr	r2, [pc, #192]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b48 <HAL_DCMI_MspInit+0x164>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001a98:	2360      	movs	r3, #96	@ 0x60
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001aa8:	230d      	movs	r3, #13
 8001aaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4826      	ldr	r0, [pc, #152]	@ (8001b4c <HAL_DCMI_MspInit+0x168>)
 8001ab4:	f004 fe20 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ac8:	230d      	movs	r3, #13
 8001aca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481f      	ldr	r0, [pc, #124]	@ (8001b50 <HAL_DCMI_MspInit+0x16c>)
 8001ad4:	f004 fe10 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001aea:	230d      	movs	r3, #13
 8001aec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	4817      	ldr	r0, [pc, #92]	@ (8001b54 <HAL_DCMI_MspInit+0x170>)
 8001af6:	f004 fdff 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001afa:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b0c:	230d      	movs	r3, #13
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b14:	4619      	mov	r1, r3
 8001b16:	4810      	ldr	r0, [pc, #64]	@ (8001b58 <HAL_DCMI_MspInit+0x174>)
 8001b18:	f004 fdee 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001b1c:	2350      	movs	r3, #80	@ 0x50
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b2c:	230d      	movs	r3, #13
 8001b2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	4809      	ldr	r0, [pc, #36]	@ (8001b5c <HAL_DCMI_MspInit+0x178>)
 8001b38:	f004 fdde 	bl	80066f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3738      	adds	r7, #56	@ 0x38
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	50050000 	.word	0x50050000
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40020c00 	.word	0x40020c00
 8001b54:	40021800 	.word	0x40021800
 8001b58:	40021c00 	.word	0x40021c00
 8001b5c:	40020000 	.word	0x40020000

08001b60 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001b64:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b66:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <MX_DMA2D_Init+0x60>)
 8001b68:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001b94:	4809      	ldr	r0, [pc, #36]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001b96:	f004 f875 	bl	8005c84 <HAL_DMA2D_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001ba0:	f001 fee0 	bl	8003964 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	4805      	ldr	r0, [pc, #20]	@ (8001bbc <MX_DMA2D_Init+0x5c>)
 8001ba8:	f004 f9c6 	bl	8005f38 <HAL_DMA2D_ConfigLayer>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001bb2:	f001 fed7 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200003f8 	.word	0x200003f8
 8001bc0:	4002b000 	.word	0x4002b000

08001bc4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <HAL_DMA2D_MspInit+0x44>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d113      	bne.n	8001bfe <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <HAL_DMA2D_MspInit+0x48>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a0c      	ldr	r2, [pc, #48]	@ (8001c0c <HAL_DMA2D_MspInit+0x48>)
 8001bdc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <HAL_DMA2D_MspInit+0x48>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	205a      	movs	r0, #90	@ 0x5a
 8001bf4:	f003 fd84 	bl	8005700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001bf8:	205a      	movs	r0, #90	@ 0x5a
 8001bfa:	f003 fd9d 	bl	8005738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	4002b000 	.word	0x4002b000
 8001c0c:	40023800 	.word	0x40023800

08001c10 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c16:	4a20      	ldr	r2, [pc, #128]	@ (8001c98 <MX_ETH_Init+0x88>)
 8001c18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c22:	2280      	movs	r2, #128	@ 0x80
 8001c24:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001c26:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c28:	22e1      	movs	r2, #225	@ 0xe1
 8001c2a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c40:	4a16      	ldr	r2, [pc, #88]	@ (8001c9c <MX_ETH_Init+0x8c>)
 8001c42:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001c44:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c46:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c4a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c4e:	4a14      	ldr	r2, [pc, #80]	@ (8001ca0 <MX_ETH_Init+0x90>)
 8001c50:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c54:	4a13      	ldr	r2, [pc, #76]	@ (8001ca4 <MX_ETH_Init+0x94>)
 8001c56:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001c58:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c5a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001c5e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001c60:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <MX_ETH_Init+0x84>)
 8001c62:	f004 f9fb 	bl	800605c <HAL_ETH_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001c6c:	f001 fe7a 	bl	8003964 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001c70:	2238      	movs	r2, #56	@ 0x38
 8001c72:	2100      	movs	r1, #0
 8001c74:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <MX_ETH_Init+0x98>)
 8001c76:	f011 fde9 	bl	801384c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <MX_ETH_Init+0x98>)
 8001c7c:	2221      	movs	r2, #33	@ 0x21
 8001c7e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <MX_ETH_Init+0x98>)
 8001c82:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001c86:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001c88:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <MX_ETH_Init+0x98>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000470 	.word	0x20000470
 8001c98:	40028000 	.word	0x40028000
 8001c9c:	20000520 	.word	0x20000520
 8001ca0:	2000027c 	.word	0x2000027c
 8001ca4:	200001dc 	.word	0x200001dc
 8001ca8:	20000438 	.word	0x20000438

08001cac <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	@ 0x38
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3f      	ldr	r2, [pc, #252]	@ (8001dc8 <HAL_ETH_MspInit+0x11c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d178      	bne.n	8001dc0 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001cce:	4b3f      	ldr	r3, [pc, #252]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001cd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b3c      	ldr	r3, [pc, #240]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	4b39      	ldr	r3, [pc, #228]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a38      	ldr	r2, [pc, #224]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001cec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b36      	ldr	r3, [pc, #216]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4b33      	ldr	r3, [pc, #204]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a32      	ldr	r2, [pc, #200]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d16:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b2a      	ldr	r3, [pc, #168]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4a26      	ldr	r2, [pc, #152]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a20      	ldr	r2, [pc, #128]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <HAL_ETH_MspInit+0x120>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001d5e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d70:	230b      	movs	r3, #11
 8001d72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4815      	ldr	r0, [pc, #84]	@ (8001dd0 <HAL_ETH_MspInit+0x124>)
 8001d7c:	f004 fcbc 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d80:	2332      	movs	r3, #50	@ 0x32
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d90:	230b      	movs	r3, #11
 8001d92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480e      	ldr	r0, [pc, #56]	@ (8001dd4 <HAL_ETH_MspInit+0x128>)
 8001d9c:	f004 fcac 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001da0:	2386      	movs	r3, #134	@ 0x86
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001db0:	230b      	movs	r3, #11
 8001db2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db8:	4619      	mov	r1, r3
 8001dba:	4807      	ldr	r0, [pc, #28]	@ (8001dd8 <HAL_ETH_MspInit+0x12c>)
 8001dbc:	f004 fc9c 	bl	80066f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3738      	adds	r7, #56	@ 0x38
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40028000 	.word	0x40028000
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40021800 	.word	0x40021800
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	615a      	str	r2, [r3, #20]
 8001df2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001df4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001df6:	4a20      	ldr	r2, [pc, #128]	@ (8001e78 <MX_FMC_Init+0x9c>)
 8001df8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e00:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e06:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e08:	2204      	movs	r2, #4
 8001e0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e0e:	2210      	movs	r2, #16
 8001e10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e12:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e14:	2240      	movs	r2, #64	@ 0x40
 8001e16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001e18:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e1a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e1e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e20:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001e26:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001e36:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001e40:	2307      	movs	r3, #7
 8001e42:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001e44:	2304      	movs	r3, #4
 8001e46:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001e48:	2307      	movs	r3, #7
 8001e4a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001e54:	2302      	movs	r3, #2
 8001e56:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	@ (8001e74 <MX_FMC_Init+0x98>)
 8001e5e:	f008 fb9e 	bl	800a59e <HAL_SDRAM_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001e68:	f001 fd7c 	bl	8003964 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001e6c:	bf00      	nop
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000528 	.word	0x20000528
 8001e78:	a0000140 	.word	0xa0000140

08001e7c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e90:	4b3a      	ldr	r3, [pc, #232]	@ (8001f7c <HAL_FMC_MspInit+0x100>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d16d      	bne.n	8001f74 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001e98:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <HAL_FMC_MspInit+0x100>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e9e:	4b38      	ldr	r3, [pc, #224]	@ (8001f80 <HAL_FMC_MspInit+0x104>)
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea2:	4a37      	ldr	r2, [pc, #220]	@ (8001f80 <HAL_FMC_MspInit+0x104>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001eaa:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <HAL_FMC_MspInit+0x104>)
 8001eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001eb6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001eba:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ec8:	230c      	movs	r3, #12
 8001eca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	482c      	ldr	r0, [pc, #176]	@ (8001f84 <HAL_FMC_MspInit+0x108>)
 8001ed2:	f004 fc11 	bl	80066f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001ed6:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001eda:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ee8:	230c      	movs	r3, #12
 8001eea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4825      	ldr	r0, [pc, #148]	@ (8001f88 <HAL_FMC_MspInit+0x10c>)
 8001ef2:	f004 fc01 	bl	80066f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001ef6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001efa:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f08:	230c      	movs	r3, #12
 8001f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481e      	ldr	r0, [pc, #120]	@ (8001f8c <HAL_FMC_MspInit+0x110>)
 8001f12:	f004 fbf1 	bl	80066f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001f16:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001f1a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f28:	230c      	movs	r3, #12
 8001f2a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4817      	ldr	r0, [pc, #92]	@ (8001f90 <HAL_FMC_MspInit+0x114>)
 8001f32:	f004 fbe1 	bl	80066f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001f36:	2328      	movs	r3, #40	@ 0x28
 8001f38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f46:	230c      	movs	r3, #12
 8001f48:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4811      	ldr	r0, [pc, #68]	@ (8001f94 <HAL_FMC_MspInit+0x118>)
 8001f50:	f004 fbd2 	bl	80066f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001f54:	2308      	movs	r3, #8
 8001f56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f64:	230c      	movs	r3, #12
 8001f66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	480a      	ldr	r0, [pc, #40]	@ (8001f98 <HAL_FMC_MspInit+0x11c>)
 8001f6e:	f004 fbc3 	bl	80066f8 <HAL_GPIO_Init>
 8001f72:	e000      	b.n	8001f76 <HAL_FMC_MspInit+0xfa>
    return;
 8001f74:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000055c 	.word	0x2000055c
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021400 	.word	0x40021400
 8001f94:	40021c00 	.word	0x40021c00
 8001f98:	40020800 	.word	0x40020800

08001f9c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001fa4:	f7ff ff6a 	bl	8001e7c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook(void) {
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void) {
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
	 demo application. If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a07      	ldr	r2, [pc, #28]	@ (8002010 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ff4:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4a06      	ldr	r2, [pc, #24]	@ (8002014 <vApplicationGetIdleTaskMemory+0x30>)
 8001ffa:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2280      	movs	r2, #128	@ 0x80
 8002000:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	2000272c 	.word	0x2000272c
 8002014:	200027d0 	.word	0x200027d0

08002018 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b098      	sub	sp, #96	@ 0x60
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of printf_mutex */
  osMutexStaticDef(printf_mutex, &printf_mutexControlBlock);
 800201e:	2300      	movs	r3, #0
 8002020:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002022:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <MX_FREERTOS_Init+0xc0>)
 8002024:	65fb      	str	r3, [r7, #92]	@ 0x5c
  printf_mutexHandle = osMutexCreate(osMutex(printf_mutex));
 8002026:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800202a:	4618      	mov	r0, r3
 800202c:	f00d f852 	bl	800f0d4 <osMutexCreate>
 8002030:	4603      	mov	r3, r0
 8002032:	4a2a      	ldr	r2, [pc, #168]	@ (80020dc <MX_FREERTOS_Init+0xc4>)
 8002034:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024, defaultTaskBuffer, &defaultTaskControlBlock);
 8002036:	4b2a      	ldr	r3, [pc, #168]	@ (80020e0 <MX_FREERTOS_Init+0xc8>)
 8002038:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800203c:	461d      	mov	r5, r3
 800203e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002042:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800204a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f00c ffdf 	bl	800f014 <osThreadCreate>
 8002056:	4603      	mov	r3, r0
 8002058:	4a22      	ldr	r2, [pc, #136]	@ (80020e4 <MX_FREERTOS_Init+0xcc>)
 800205a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LoRa_init */
  osThreadStaticDef(LoRa_init, LoRa_init_Task, osPriorityHigh, 0, 1024, LoRa_initBuffer, &LoRa_initControlBlock);
 800205c:	4b22      	ldr	r3, [pc, #136]	@ (80020e8 <MX_FREERTOS_Init+0xd0>)
 800205e:	f107 0420 	add.w	r4, r7, #32
 8002062:	461d      	mov	r5, r3
 8002064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002068:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800206c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoRa_initHandle = osThreadCreate(osThread(LoRa_init), NULL);
 8002070:	f107 0320 	add.w	r3, r7, #32
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f00c ffcc 	bl	800f014 <osThreadCreate>
 800207c:	4603      	mov	r3, r0
 800207e:	4a1b      	ldr	r2, [pc, #108]	@ (80020ec <MX_FREERTOS_Init+0xd4>)
 8002080:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	if (LoRa_initHandle == NULL) {
 8002082:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <MX_FREERTOS_Init+0xd4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d103      	bne.n	8002092 <MX_FREERTOS_Init+0x7a>
		printf("LoRa creation FAILED\r\n");
 800208a:	4819      	ldr	r0, [pc, #100]	@ (80020f0 <MX_FREERTOS_Init+0xd8>)
 800208c:	f011 fac8 	bl	8013620 <puts>
 8002090:	e002      	b.n	8002098 <MX_FREERTOS_Init+0x80>
	} else {
		printf("LoRa created OK\r\n");
 8002092:	4818      	ldr	r0, [pc, #96]	@ (80020f4 <MX_FREERTOS_Init+0xdc>)
 8002094:	f011 fac4 	bl	8013620 <puts>
	}

	osThreadDef(gpsTask, L76_Task, osPriorityHigh, 0, 2048);
 8002098:	4b17      	ldr	r3, [pc, #92]	@ (80020f8 <MX_FREERTOS_Init+0xe0>)
 800209a:	1d3c      	adds	r4, r7, #4
 800209c:	461d      	mov	r5, r3
 800209e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gpsTaskHandle = osThreadCreate(osThread(gpsTask), &huart6);
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	4913      	ldr	r1, [pc, #76]	@ (80020fc <MX_FREERTOS_Init+0xe4>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f00c ffb0 	bl	800f014 <osThreadCreate>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <MX_FREERTOS_Init+0xe8>)
 80020b8:	6013      	str	r3, [r2, #0]
	if (gpsTaskHandle == NULL) {
 80020ba:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <MX_FREERTOS_Init+0xe8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d103      	bne.n	80020ca <MX_FREERTOS_Init+0xb2>
		printf("gpsTask creation FAILED\r\n");
 80020c2:	4810      	ldr	r0, [pc, #64]	@ (8002104 <MX_FREERTOS_Init+0xec>)
 80020c4:	f011 faac 	bl	8013620 <puts>
		printf("gpsTask created OK\r\n");
	}

  /* USER CODE END RTOS_THREADS */

}
 80020c8:	e002      	b.n	80020d0 <MX_FREERTOS_Init+0xb8>
		printf("gpsTask created OK\r\n");
 80020ca:	480f      	ldr	r0, [pc, #60]	@ (8002108 <MX_FREERTOS_Init+0xf0>)
 80020cc:	f011 faa8 	bl	8013620 <puts>
}
 80020d0:	bf00      	nop
 80020d2:	3760      	adds	r7, #96	@ 0x60
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bdb0      	pop	{r4, r5, r7, pc}
 80020d8:	200026e4 	.word	0x200026e4
 80020dc:	200026e0 	.word	0x200026e0
 80020e0:	08016438 	.word	0x08016438
 80020e4:	20000590 	.word	0x20000590
 80020e8:	08016460 	.word	0x08016460
 80020ec:	20001638 	.word	0x20001638
 80020f0:	080163d0 	.word	0x080163d0
 80020f4:	080163e8 	.word	0x080163e8
 80020f8:	08016484 	.word	0x08016484
 80020fc:	200031b0 	.word	0x200031b0
 8002100:	2000058c 	.word	0x2000058c
 8002104:	080163fc 	.word	0x080163fc
 8002108:	08016418 	.word	0x08016418

0800210c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {

		osDelay(2000);
 8002114:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002118:	f00c ffc8 	bl	800f0ac <osDelay>
 800211c:	e7fa      	b.n	8002114 <StartDefaultTask+0x8>
	...

08002120 <LoRa_init_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LoRa_init_Task */
void LoRa_init_Task(void const * argument)
{
 8002120:	b5b0      	push	{r4, r5, r7, lr}
 8002122:	b092      	sub	sp, #72	@ 0x48
 8002124:	af00      	add	r7, sp, #0
 8002126:	6378      	str	r0, [r7, #52]	@ 0x34
  /* USER CODE BEGIN LoRa_init_Task */
	myLoRa = newLoRa(); //cree un objet LoRa
 8002128:	4c36      	ldr	r4, [pc, #216]	@ (8002204 <LoRa_init_Task+0xe4>)
 800212a:	463b      	mov	r3, r7
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe ff97 	bl	8001060 <newLoRa>
 8002132:	4625      	mov	r5, r4
 8002134:	463c      	mov	r4, r7
 8002136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002142:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myLoRa.CS_port = GPIOI;
 8002146:	4b2f      	ldr	r3, [pc, #188]	@ (8002204 <LoRa_init_Task+0xe4>)
 8002148:	4a2f      	ldr	r2, [pc, #188]	@ (8002208 <LoRa_init_Task+0xe8>)
 800214a:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = GPIO_PIN_0;
 800214c:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <LoRa_init_Task+0xe4>)
 800214e:	2201      	movs	r2, #1
 8002150:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = GPIOF;
 8002152:	4b2c      	ldr	r3, [pc, #176]	@ (8002204 <LoRa_init_Task+0xe4>)
 8002154:	4a2d      	ldr	r2, [pc, #180]	@ (800220c <LoRa_init_Task+0xec>)
 8002156:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = GPIO_PIN_8;
 8002158:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <LoRa_init_Task+0xe4>)
 800215a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800215e:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = GPIOI;
 8002160:	4b28      	ldr	r3, [pc, #160]	@ (8002204 <LoRa_init_Task+0xe4>)
 8002162:	4a29      	ldr	r2, [pc, #164]	@ (8002208 <LoRa_init_Task+0xe8>)
 8002164:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = GPIO_PIN_3;
 8002166:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <LoRa_init_Task+0xe4>)
 8002168:	2208      	movs	r2, #8
 800216a:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi2;
 800216c:	4b25      	ldr	r3, [pc, #148]	@ (8002204 <LoRa_init_Task+0xe4>)
 800216e:	4a28      	ldr	r2, [pc, #160]	@ (8002210 <LoRa_init_Task+0xf0>)
 8002170:	619a      	str	r2, [r3, #24]
	//	myLoRa.bandWidth = BW_250KHz;
	//	myLoRa.crcRate = CR_4_8;
	//	myLoRa.power = POWER_11db;
	//	myLoRa.overCurrentProtection = 130;
	//	myLoRa.preamble = 10;
	myLoRa.frequency = 433;
 8002172:	4b24      	ldr	r3, [pc, #144]	@ (8002204 <LoRa_init_Task+0xe4>)
 8002174:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8002178:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor = SF_7;
 800217a:	4b22      	ldr	r3, [pc, #136]	@ (8002204 <LoRa_init_Task+0xe4>)
 800217c:	2207      	movs	r2, #7
 800217e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	myLoRa.bandWidth = BW_125KHz;
 8002182:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <LoRa_init_Task+0xe4>)
 8002184:	2207      	movs	r2, #7
 8002186:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	myLoRa.crcRate = CR_4_5;
 800218a:	4b1e      	ldr	r3, [pc, #120]	@ (8002204 <LoRa_init_Task+0xe4>)
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	myLoRa.preamble = 8;
 8002192:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <LoRa_init_Task+0xe4>)
 8002194:	2208      	movs	r2, #8
 8002196:	851a      	strh	r2, [r3, #40]	@ 0x28
	myLoRa.power = POWER_11db;
 8002198:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <LoRa_init_Task+0xe4>)
 800219a:	22f6      	movs	r2, #246	@ 0xf6
 800219c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

	uint16_t status = LoRa_init(&myLoRa);
 80021a0:	4818      	ldr	r0, [pc, #96]	@ (8002204 <LoRa_init_Task+0xe4>)
 80021a2:	f7ff fa6f 	bl	8001684 <LoRa_init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	if (status != LORA_OK) {
 80021ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021b0:	2bc8      	cmp	r3, #200	@ 0xc8
 80021b2:	d006      	beq.n	80021c2 <LoRa_init_Task+0xa2>
		//debug uart error message
		printf("LoRa crashed with output : %d\n", status);
 80021b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80021b8:	4619      	mov	r1, r3
 80021ba:	4816      	ldr	r0, [pc, #88]	@ (8002214 <LoRa_init_Task+0xf4>)
 80021bc:	f011 f9c8 	bl	8013550 <iprintf>
 80021c0:	e002      	b.n	80021c8 <LoRa_init_Task+0xa8>
	} else {
		printf("LoRa OK ! Chip ID 0x12 detected.\n");
 80021c2:	4815      	ldr	r0, [pc, #84]	@ (8002218 <LoRa_init_Task+0xf8>)
 80021c4:	f011 fa2c 	bl	8013620 <puts>
	}
	char *send_data = "Hello Kart !";
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <LoRa_init_Task+0xfc>)
 80021ca:	643b      	str	r3, [r7, #64]	@ 0x40
	/* Infinite loop */
	for (;;) {
		uint8_t ok = LoRa_transmit(&myLoRa, (uint8_t*) send_data,
 80021cc:	2364      	movs	r3, #100	@ 0x64
 80021ce:	220d      	movs	r2, #13
 80021d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021d2:	480c      	ldr	r0, [pc, #48]	@ (8002204 <LoRa_init_Task+0xe4>)
 80021d4:	f7ff f9fe 	bl	80015d4 <LoRa_transmit>
 80021d8:	4603      	mov	r3, r0
 80021da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				sizeof("Hello Kart !"), 100);
		if (ok) {
 80021de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <LoRa_init_Task+0xd0>
			printf("LoRa sent : %s\n", send_data);
 80021e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021e8:	480d      	ldr	r0, [pc, #52]	@ (8002220 <LoRa_init_Task+0x100>)
 80021ea:	f011 f9b1 	bl	8013550 <iprintf>
 80021ee:	e002      	b.n	80021f6 <LoRa_init_Task+0xd6>
		} else {
			printf("LoRa timeout !\n");
 80021f0:	480c      	ldr	r0, [pc, #48]	@ (8002224 <LoRa_init_Task+0x104>)
 80021f2:	f011 fa15 	bl	8013620 <puts>
		}
		L76_PrintExample();
 80021f6:	f000 fad5 	bl	80027a4 <L76_PrintExample>
		osDelay(2000);
 80021fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80021fe:	f00c ff55 	bl	800f0ac <osDelay>
	for (;;) {
 8002202:	e7e3      	b.n	80021cc <LoRa_init_Task+0xac>
 8002204:	20000560 	.word	0x20000560
 8002208:	40022000 	.word	0x40022000
 800220c:	40021400 	.word	0x40021400
 8002210:	20002eac 	.word	0x20002eac
 8002214:	080164a0 	.word	0x080164a0
 8002218:	080164c0 	.word	0x080164c0
 800221c:	080164e4 	.word	0x080164e4
 8002220:	080164f4 	.word	0x080164f4
 8002224:	08016504 	.word	0x08016504

08002228 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b090      	sub	sp, #64	@ 0x40
 800222c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800223e:	4bb0      	ldr	r3, [pc, #704]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	4aaf      	ldr	r2, [pc, #700]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002244:	f043 0310 	orr.w	r3, r3, #16
 8002248:	6313      	str	r3, [r2, #48]	@ 0x30
 800224a:	4bad      	ldr	r3, [pc, #692]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002256:	4baa      	ldr	r3, [pc, #680]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4aa9      	ldr	r2, [pc, #676]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 800225c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4ba7      	ldr	r3, [pc, #668]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	4ba4      	ldr	r3, [pc, #656]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4aa3      	ldr	r2, [pc, #652]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4ba1      	ldr	r3, [pc, #644]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	623b      	str	r3, [r7, #32]
 8002284:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002286:	4b9e      	ldr	r3, [pc, #632]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	4a9d      	ldr	r2, [pc, #628]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	6313      	str	r3, [r2, #48]	@ 0x30
 8002292:	4b9b      	ldr	r3, [pc, #620]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229e:	4b98      	ldr	r3, [pc, #608]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a97      	ldr	r2, [pc, #604]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b95      	ldr	r3, [pc, #596]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	4b92      	ldr	r3, [pc, #584]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a91      	ldr	r2, [pc, #580]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b8f      	ldr	r3, [pc, #572]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022ce:	4b8c      	ldr	r3, [pc, #560]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	4a8b      	ldr	r2, [pc, #556]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022da:	4b89      	ldr	r3, [pc, #548]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80022e6:	4b86      	ldr	r3, [pc, #536]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	4a85      	ldr	r2, [pc, #532]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f2:	4b83      	ldr	r3, [pc, #524]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80022fe:	4b80      	ldr	r3, [pc, #512]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a7f      	ldr	r2, [pc, #508]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002304:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b7d      	ldr	r3, [pc, #500]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002316:	4b7a      	ldr	r3, [pc, #488]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	4a79      	ldr	r2, [pc, #484]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 800231c:	f043 0320 	orr.w	r3, r3, #32
 8002320:	6313      	str	r3, [r2, #48]	@ 0x30
 8002322:	4b77      	ldr	r3, [pc, #476]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800232e:	4b74      	ldr	r3, [pc, #464]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	4a73      	ldr	r2, [pc, #460]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 8002334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002338:	6313      	str	r3, [r2, #48]	@ 0x30
 800233a:	4b71      	ldr	r3, [pc, #452]	@ (8002500 <MX_GPIO_Init+0x2d8>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002346:	2201      	movs	r2, #1
 8002348:	2120      	movs	r1, #32
 800234a:	486e      	ldr	r0, [pc, #440]	@ (8002504 <MX_GPIO_Init+0x2dc>)
 800234c:	f004 fb98 	bl	8006a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARDUINO_D8_GPIO_Port, ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	2104      	movs	r1, #4
 8002354:	486c      	ldr	r0, [pc, #432]	@ (8002508 <MX_GPIO_Init+0x2e0>)
 8002356:	f004 fb93 	bl	8006a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	2108      	movs	r1, #8
 800235e:	486b      	ldr	r0, [pc, #428]	@ (800250c <MX_GPIO_Init+0x2e4>)
 8002360:	f004 fb8e 	bl	8006a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_DISP_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	f241 0101 	movw	r1, #4097	@ 0x1001
 800236a:	4867      	ldr	r0, [pc, #412]	@ (8002508 <MX_GPIO_Init+0x2e0>)
 800236c:	f004 fb88 	bl	8006a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002370:	2200      	movs	r2, #0
 8002372:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002376:	4866      	ldr	r0, [pc, #408]	@ (8002510 <MX_GPIO_Init+0x2e8>)
 8002378:	f004 fb82 	bl	8006a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	21c8      	movs	r1, #200	@ 0xc8
 8002380:	4864      	ldr	r0, [pc, #400]	@ (8002514 <MX_GPIO_Init+0x2ec>)
 8002382:	f004 fb7d 	bl	8006a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8002386:	2201      	movs	r2, #1
 8002388:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800238c:	4862      	ldr	r0, [pc, #392]	@ (8002518 <MX_GPIO_Init+0x2f0>)
 800238e:	f004 fb77 	bl	8006a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002392:	2308      	movs	r3, #8
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a2:	4619      	mov	r1, r3
 80023a4:	485d      	ldr	r0, [pc, #372]	@ (800251c <MX_GPIO_Init+0x2f4>)
 80023a6:	f004 f9a7 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80023aa:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023bc:	230a      	movs	r3, #10
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023c4:	4619      	mov	r1, r3
 80023c6:	4856      	ldr	r0, [pc, #344]	@ (8002520 <MX_GPIO_Init+0x2f8>)
 80023c8:	f004 f996 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80023cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023de:	4619      	mov	r1, r3
 80023e0:	4850      	ldr	r0, [pc, #320]	@ (8002524 <MX_GPIO_Init+0x2fc>)
 80023e2:	f004 f989 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80023e6:	2340      	movs	r3, #64	@ 0x40
 80023e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80023ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80023ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80023f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023f8:	4619      	mov	r1, r3
 80023fa:	4842      	ldr	r0, [pc, #264]	@ (8002504 <MX_GPIO_Init+0x2dc>)
 80023fc:	f004 f97c 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002400:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240e:	2303      	movs	r3, #3
 8002410:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002412:	230a      	movs	r3, #10
 8002414:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800241a:	4619      	mov	r1, r3
 800241c:	4842      	ldr	r0, [pc, #264]	@ (8002528 <MX_GPIO_Init+0x300>)
 800241e:	f004 f96b 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002422:	2320      	movs	r3, #32
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002426:	2301      	movs	r3, #1
 8002428:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002436:	4619      	mov	r1, r3
 8002438:	4832      	ldr	r0, [pc, #200]	@ (8002504 <MX_GPIO_Init+0x2dc>)
 800243a:	f004 f95d 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 800243e:	2308      	movs	r3, #8
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002442:	2300      	movs	r3, #0
 8002444:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800244e:	4619      	mov	r1, r3
 8002450:	482d      	ldr	r0, [pc, #180]	@ (8002508 <MX_GPIO_Init+0x2e0>)
 8002452:	f004 f951 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002456:	f241 0304 	movw	r3, #4100	@ 0x1004
 800245a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002468:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800246c:	4619      	mov	r1, r3
 800246e:	4826      	ldr	r0, [pc, #152]	@ (8002508 <MX_GPIO_Init+0x2e0>)
 8002470:	f004 f942 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002474:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247a:	2300      	movs	r3, #0
 800247c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002482:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002486:	4619      	mov	r1, r3
 8002488:	4828      	ldr	r0, [pc, #160]	@ (800252c <MX_GPIO_Init+0x304>)
 800248a:	f004 f935 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800248e:	2308      	movs	r3, #8
 8002490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002492:	2301      	movs	r3, #1
 8002494:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800249e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024a2:	4619      	mov	r1, r3
 80024a4:	4819      	ldr	r0, [pc, #100]	@ (800250c <MX_GPIO_Init+0x2e4>)
 80024a6:	f004 f927 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80024aa:	2310      	movs	r3, #16
 80024ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ae:	2300      	movs	r3, #0
 80024b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024ba:	4619      	mov	r1, r3
 80024bc:	4811      	ldr	r0, [pc, #68]	@ (8002504 <MX_GPIO_Init+0x2dc>)
 80024be:	f004 f91b 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80024c2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80024c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024d4:	4619      	mov	r1, r3
 80024d6:	480e      	ldr	r0, [pc, #56]	@ (8002510 <MX_GPIO_Init+0x2e8>)
 80024d8:	f004 f90e 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80024dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80024ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024f2:	4619      	mov	r1, r3
 80024f4:	4806      	ldr	r0, [pc, #24]	@ (8002510 <MX_GPIO_Init+0x2e8>)
 80024f6:	f004 f8ff 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 80024fa:	2301      	movs	r3, #1
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024fe:	e017      	b.n	8002530 <MX_GPIO_Init+0x308>
 8002500:	40023800 	.word	0x40023800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40022000 	.word	0x40022000
 800250c:	40022800 	.word	0x40022800
 8002510:	40021c00 	.word	0x40021c00
 8002514:	40021800 	.word	0x40021800
 8002518:	40021400 	.word	0x40021400
 800251c:	40021000 	.word	0x40021000
 8002520:	40020400 	.word	0x40020400
 8002524:	40022400 	.word	0x40022400
 8002528:	40020000 	.word	0x40020000
 800252c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002530:	2301      	movs	r3, #1
 8002532:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 800253c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002540:	4619      	mov	r1, r3
 8002542:	4843      	ldr	r0, [pc, #268]	@ (8002650 <MX_GPIO_Init+0x428>)
 8002544:	f004 f8d8 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002548:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800254c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800254e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002552:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800255c:	4619      	mov	r1, r3
 800255e:	483c      	ldr	r0, [pc, #240]	@ (8002650 <MX_GPIO_Init+0x428>)
 8002560:	f004 f8ca 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002564:	2310      	movs	r3, #16
 8002566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002574:	230a      	movs	r3, #10
 8002576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002578:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	4835      	ldr	r0, [pc, #212]	@ (8002654 <MX_GPIO_Init+0x42c>)
 8002580:	f004 f8ba 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002584:	23c8      	movs	r3, #200	@ 0xc8
 8002586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002588:	2301      	movs	r3, #1
 800258a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002594:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002598:	4619      	mov	r1, r3
 800259a:	482f      	ldr	r0, [pc, #188]	@ (8002658 <MX_GPIO_Init+0x430>)
 800259c:	f004 f8ac 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN3_Pin;
 80025a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a6:	2300      	movs	r3, #0
 80025a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025b2:	4619      	mov	r1, r3
 80025b4:	4829      	ldr	r0, [pc, #164]	@ (800265c <MX_GPIO_Init+0x434>)
 80025b6:	f004 f89f 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RESET_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin;
 80025ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c0:	2301      	movs	r3, #1
 80025c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80025c8:	2301      	movs	r3, #1
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LORA_RESET_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025d0:	4619      	mov	r1, r3
 80025d2:	4822      	ldr	r0, [pc, #136]	@ (800265c <MX_GPIO_Init+0x434>)
 80025d4:	f004 f890 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80025d8:	2305      	movs	r3, #5
 80025da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025e8:	230a      	movs	r3, #10
 80025ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025f0:	4619      	mov	r1, r3
 80025f2:	481b      	ldr	r0, [pc, #108]	@ (8002660 <MX_GPIO_Init+0x438>)
 80025f4:	f004 f880 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80025f8:	2304      	movs	r3, #4
 80025fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025fc:	2300      	movs	r3, #0
 80025fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002604:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002608:	4619      	mov	r1, r3
 800260a:	4813      	ldr	r0, [pc, #76]	@ (8002658 <MX_GPIO_Init+0x430>)
 800260c:	f004 f874 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8002610:	2301      	movs	r3, #1
 8002612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002614:	2300      	movs	r3, #0
 8002616:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 800261c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002620:	4619      	mov	r1, r3
 8002622:	4810      	ldr	r0, [pc, #64]	@ (8002664 <MX_GPIO_Init+0x43c>)
 8002624:	f004 f868 	bl	80066f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002628:	2328      	movs	r3, #40	@ 0x28
 800262a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002638:	230a      	movs	r3, #10
 800263a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002640:	4619      	mov	r1, r3
 8002642:	4808      	ldr	r0, [pc, #32]	@ (8002664 <MX_GPIO_Init+0x43c>)
 8002644:	f004 f858 	bl	80066f8 <HAL_GPIO_Init>

}
 8002648:	bf00      	nop
 800264a:	3740      	adds	r7, #64	@ 0x40
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40022000 	.word	0x40022000
 8002654:	40021c00 	.word	0x40021c00
 8002658:	40021800 	.word	0x40021800
 800265c:	40021400 	.word	0x40021400
 8002660:	40020800 	.word	0x40020800
 8002664:	40020000 	.word	0x40020000

08002668 <L76_Init>:
static void L76_ParseDate(const char *datestr, uint8_t *day, uint8_t *month,
		uint16_t *year);

/* ========= Public API Functions ========= */

void L76_Init(UART_HandleTypeDef *huart) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	/* Save the UART handle for use in ISR and other functions */
	l76_huart = huart;
 8002670:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <L76_Init+0x68>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6013      	str	r3, [r2, #0]

	/* Configure the standby pin: ensure the GPS is powered on (STDBY pin high) */
	HAL_GPIO_WritePin(L76_STDBY_GPIO_Port, L76_STDBY_Pin, GPIO_PIN_SET);
 8002676:	2201      	movs	r2, #1
 8002678:	2140      	movs	r1, #64	@ 0x40
 800267a:	4816      	ldr	r0, [pc, #88]	@ (80026d4 <L76_Init+0x6c>)
 800267c:	f004 fa00 	bl	8006a80 <HAL_GPIO_WritePin>
	/* Small delay to ensure the pin state is registered (if needed) */
	HAL_Delay(10);
 8002680:	200a      	movs	r0, #10
 8002682:	f002 fcc9 	bl	8005018 <HAL_Delay>

	/* Create a binary semaphore for line synchronization */
	l76_sem = xSemaphoreCreateBinary();
 8002686:	2203      	movs	r2, #3
 8002688:	2100      	movs	r1, #0
 800268a:	2001      	movs	r0, #1
 800268c:	f00c ffbd 	bl	800f60a <xQueueGenericCreate>
 8002690:	4603      	mov	r3, r0
 8002692:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <L76_Init+0x70>)
 8002694:	6013      	str	r3, [r2, #0]
		// Semaphore creation failed (should not happen under normal conditions)
		// In production, you might handle this with an error indicator.
	}

	/* Initialize the GPS data structure to all zeros */
	memset(&l76_data, 0, sizeof(L76_GPS_Data_t));
 8002696:	2230      	movs	r2, #48	@ 0x30
 8002698:	2100      	movs	r1, #0
 800269a:	4810      	ldr	r0, [pc, #64]	@ (80026dc <L76_Init+0x74>)
 800269c:	f011 f8d6 	bl	801384c <memset>
	l76_data.fix_quality = 0;
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <L76_Init+0x74>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	751a      	strb	r2, [r3, #20]
	l76_readyBuf = -1;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <L76_Init+0x78>)
 80026a8:	22ff      	movs	r2, #255	@ 0xff
 80026aa:	701a      	strb	r2, [r3, #0]
	l76_rxIndex = 0;
 80026ac:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <L76_Init+0x7c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	801a      	strh	r2, [r3, #0]
	l76_currentBuf = 0;
 80026b2:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <L76_Init+0x80>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]

	/* Start UART reception in interrupt mode for one byte at a time */
	//HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
	HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <L76_Init+0x68>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2201      	movs	r2, #1
 80026be:	490b      	ldr	r1, [pc, #44]	@ (80026ec <L76_Init+0x84>)
 80026c0:	4618      	mov	r0, r3
 80026c2:	f00a f95a 	bl	800c97a <HAL_UART_Receive_IT>

}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200029d0 	.word	0x200029d0
 80026d4:	40021800 	.word	0x40021800
 80026d8:	200029d4 	.word	0x200029d4
 80026dc:	20002ae0 	.word	0x20002ae0
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20002ad8 	.word	0x20002ad8
 80026e8:	20002ada 	.word	0x20002ada
 80026ec:	20002adb 	.word	0x20002adb

080026f0 <L76_Task>:

void L76_Task(void const *argument) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	/* Initialize the GPS module (UART, pins, etc.) */
	UART_HandleTypeDef *uart = (UART_HandleTypeDef*) argument;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	60bb      	str	r3, [r7, #8]
	L76_Init(uart);
 80026fc:	68b8      	ldr	r0, [r7, #8]
 80026fe:	f7ff ffb3 	bl	8002668 <L76_Init>

	const char *uart_name = "not uart6 !";
 8002702:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <L76_Task+0x64>)
 8002704:	60fb      	str	r3, [r7, #12]

	if (uart == &huart6)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4a13      	ldr	r2, [pc, #76]	@ (8002758 <L76_Task+0x68>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <L76_Task+0x22>
		uart_name = "uart6";
 800270e:	4b13      	ldr	r3, [pc, #76]	@ (800275c <L76_Task+0x6c>)
 8002710:	60fb      	str	r3, [r7, #12]

	printf("L76_Task launched with UART: %s\r\n", uart_name);
 8002712:	68f9      	ldr	r1, [r7, #12]
 8002714:	4812      	ldr	r0, [pc, #72]	@ (8002760 <L76_Task+0x70>)
 8002716:	f010 ff1b 	bl	8013550 <iprintf>
	// Alternatively, one can call L76_Init before creating the task and ignore this parameter.

	/* Continuously wait for and process NMEA sentences */
	for (;;) {
		/* Wait indefinitely for a NMEA sentence to be received (signaled by ISR) */
		if (xSemaphoreTake(l76_sem, portMAX_DELAY) == pdTRUE) {
 800271a:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <L76_Task+0x74>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f04f 31ff 	mov.w	r1, #4294967295
 8002722:	4618      	mov	r0, r3
 8002724:	f00d fb4e 	bl	800fdc4 <xQueueSemaphoreTake>
 8002728:	4603      	mov	r3, r0
 800272a:	2b01      	cmp	r3, #1
 800272c:	d1f5      	bne.n	800271a <L76_Task+0x2a>
			// A full NMEA sentence has been captured and is ready in one of the buffers.
			if (l76_readyBuf >= 0) {
 800272e:	4b0e      	ldr	r3, [pc, #56]	@ (8002768 <L76_Task+0x78>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b25b      	sxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	dbf0      	blt.n	800271a <L76_Task+0x2a>
				/* Process the NMEA sentence in the ready buffer */
				L76_ProcessNMEA(l76_rxBuffer[l76_readyBuf]);
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <L76_Task+0x78>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	b25b      	sxtb	r3, r3
 800273e:	01db      	lsls	r3, r3, #7
 8002740:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <L76_Task+0x7c>)
 8002742:	4413      	add	r3, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fa1b 	bl	8002b80 <L76_ProcessNMEA>
				/* Mark buffer as processed (readyBuf will be set by ISR for next line) */
				l76_readyBuf = -1;
 800274a:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <L76_Task+0x78>)
 800274c:	22ff      	movs	r2, #255	@ 0xff
 800274e:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(l76_sem, portMAX_DELAY) == pdTRUE) {
 8002750:	e7e3      	b.n	800271a <L76_Task+0x2a>
 8002752:	bf00      	nop
 8002754:	08016514 	.word	0x08016514
 8002758:	200031b0 	.word	0x200031b0
 800275c:	08016520 	.word	0x08016520
 8002760:	08016528 	.word	0x08016528
 8002764:	200029d4 	.word	0x200029d4
 8002768:	20000000 	.word	0x20000000
 800276c:	200029d8 	.word	0x200029d8

08002770 <L76_GetData>:
		}
		// Loop back to wait for the next sentence
	}
}

void L76_GetData(L76_GPS_Data_t *data) {
 8002770:	b5b0      	push	{r4, r5, r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	/* Copy the latest GPS data in a critical section to ensure consistency */
	taskENTER_CRITICAL();
 8002778:	f00e ffb8 	bl	80116ec <vPortEnterCritical>
	*data = l76_data;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a08      	ldr	r2, [pc, #32]	@ (80027a0 <L76_GetData+0x30>)
 8002780:	461c      	mov	r4, r3
 8002782:	4615      	mov	r5, r2
 8002784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800278a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002790:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	taskEXIT_CRITICAL();
 8002794:	f00e ffe0 	bl	8011758 <vPortExitCritical>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bdb0      	pop	{r4, r5, r7, pc}
 80027a0:	20002ae0 	.word	0x20002ae0

080027a4 <L76_PrintExample>:
		l76_currentBuf = 0;
		HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
	}
}

void L76_PrintExample(void) {
 80027a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a8:	ed2d 8b02 	vpush	{d8}
 80027ac:	b0eb      	sub	sp, #428	@ 0x1ac
 80027ae:	af16      	add	r7, sp, #88	@ 0x58
	L76_GPS_Data_t data;
	L76_GetData(&data);
 80027b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ffdb 	bl	8002770 <L76_GetData>

	char buf[256];

	if (data.fix_quality == 0) {
 80027ba:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80af 	bne.w	8002922 <L76_PrintExample+0x17e>
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
				"UTC %02d:%02d:%05.2f, date %02d/%02d/%04d\r\n"
				"[GSV] Satellites in view: %d, Max SNR: %ddB\r\n",
				data.satellites, data.hours, data.minutes, data.seconds,
 80027c4:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 80027c8:	4698      	mov	r8, r3
				data.satellites, data.hours, data.minutes, data.seconds,
 80027ca:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 80027ce:	461c      	mov	r4, r3
				data.satellites, data.hours, data.minutes, data.seconds,
 80027d0:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 80027d4:	461d      	mov	r5, r3
				data.satellites, data.hours, data.minutes, data.seconds,
 80027d6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd fed4 	bl	8000588 <__aeabi_f2d>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
				data.day, data.month, data.year, gsv_sat_count, gsv_max_snr);
 80027e4:	f897 1148 	ldrb.w	r1, [r7, #328]	@ 0x148
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 80027e8:	460e      	mov	r6, r1
				data.day, data.month, data.year, gsv_sat_count, gsv_max_snr);
 80027ea:	f897 1149 	ldrb.w	r1, [r7, #329]	@ 0x149
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 80027ee:	61b9      	str	r1, [r7, #24]
				data.day, data.month, data.year, gsv_sat_count, gsv_max_snr);
 80027f0:	f8b7 114a 	ldrh.w	r1, [r7, #330]	@ 0x14a
		snprintf(buf, sizeof(buf), "[GPS] No fix: %d satellites used, "
 80027f4:	6179      	str	r1, [r7, #20]
 80027f6:	497f      	ldr	r1, [pc, #508]	@ (80029f4 <L76_PrintExample+0x250>)
 80027f8:	7809      	ldrb	r1, [r1, #0]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	497e      	ldr	r1, [pc, #504]	@ (80029f8 <L76_PrintExample+0x254>)
 80027fe:	7809      	ldrb	r1, [r1, #0]
 8002800:	f107 0020 	add.w	r0, r7, #32
 8002804:	9108      	str	r1, [sp, #32]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	9107      	str	r1, [sp, #28]
 800280a:	6979      	ldr	r1, [r7, #20]
 800280c:	9106      	str	r1, [sp, #24]
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	9105      	str	r1, [sp, #20]
 8002812:	9604      	str	r6, [sp, #16]
 8002814:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002818:	9501      	str	r5, [sp, #4]
 800281a:	9400      	str	r4, [sp, #0]
 800281c:	4643      	mov	r3, r8
 800281e:	4a77      	ldr	r2, [pc, #476]	@ (80029fc <L76_PrintExample+0x258>)
 8002820:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002824:	f010 ff04 	bl	8013630 <sniprintf>

		if (gsv_sat_count == 0 && data.hours == 0 && data.minutes == 0) {
 8002828:	4b72      	ldr	r3, [pc, #456]	@ (80029f4 <L76_PrintExample+0x250>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d12c      	bne.n	800288a <L76_PrintExample+0xe6>
 8002830:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 8002834:	2b00      	cmp	r3, #0
 8002836:	d128      	bne.n	800288a <L76_PrintExample+0xe6>
 8002838:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 800283c:	2b00      	cmp	r3, #0
 800283e:	d124      	bne.n	800288a <L76_PrintExample+0xe6>
			strcat(buf, "[GPS] Cold start likely (no GNSS signal)\r\n");
 8002840:	f107 0320 	add.w	r3, r7, #32
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd fd33 	bl	80002b0 <strlen>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	f107 0320 	add.w	r3, r7, #32
 8002852:	4413      	add	r3, r2
 8002854:	4a6a      	ldr	r2, [pc, #424]	@ (8002a00 <L76_PrintExample+0x25c>)
 8002856:	4614      	mov	r4, r2
 8002858:	469c      	mov	ip, r3
 800285a:	f104 0e20 	add.w	lr, r4, #32
 800285e:	4665      	mov	r5, ip
 8002860:	4626      	mov	r6, r4
 8002862:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002864:	6028      	str	r0, [r5, #0]
 8002866:	6069      	str	r1, [r5, #4]
 8002868:	60aa      	str	r2, [r5, #8]
 800286a:	60eb      	str	r3, [r5, #12]
 800286c:	3410      	adds	r4, #16
 800286e:	f10c 0c10 	add.w	ip, ip, #16
 8002872:	4574      	cmp	r4, lr
 8002874:	d1f3      	bne.n	800285e <L76_PrintExample+0xba>
 8002876:	4662      	mov	r2, ip
 8002878:	4623      	mov	r3, r4
 800287a:	cb03      	ldmia	r3!, {r0, r1}
 800287c:	6010      	str	r0, [r2, #0]
 800287e:	6051      	str	r1, [r2, #4]
 8002880:	8819      	ldrh	r1, [r3, #0]
 8002882:	789b      	ldrb	r3, [r3, #2]
 8002884:	8111      	strh	r1, [r2, #8]
 8002886:	7293      	strb	r3, [r2, #10]
 8002888:	e0a5      	b.n	80029d6 <L76_PrintExample+0x232>
		} else if (gsv_sat_count < 4) {
 800288a:	4b5a      	ldr	r3, [pc, #360]	@ (80029f4 <L76_PrintExample+0x250>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d824      	bhi.n	80028dc <L76_PrintExample+0x138>
			strcat(buf, "[GPS] Acquiring satellites (weak signal)\r\n");
 8002892:	f107 0320 	add.w	r3, r7, #32
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fd0a 	bl	80002b0 <strlen>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	f107 0320 	add.w	r3, r7, #32
 80028a4:	4413      	add	r3, r2
 80028a6:	4a57      	ldr	r2, [pc, #348]	@ (8002a04 <L76_PrintExample+0x260>)
 80028a8:	4614      	mov	r4, r2
 80028aa:	469c      	mov	ip, r3
 80028ac:	f104 0e20 	add.w	lr, r4, #32
 80028b0:	4665      	mov	r5, ip
 80028b2:	4626      	mov	r6, r4
 80028b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80028b6:	6028      	str	r0, [r5, #0]
 80028b8:	6069      	str	r1, [r5, #4]
 80028ba:	60aa      	str	r2, [r5, #8]
 80028bc:	60eb      	str	r3, [r5, #12]
 80028be:	3410      	adds	r4, #16
 80028c0:	f10c 0c10 	add.w	ip, ip, #16
 80028c4:	4574      	cmp	r4, lr
 80028c6:	d1f3      	bne.n	80028b0 <L76_PrintExample+0x10c>
 80028c8:	4662      	mov	r2, ip
 80028ca:	4623      	mov	r3, r4
 80028cc:	cb03      	ldmia	r3!, {r0, r1}
 80028ce:	6010      	str	r0, [r2, #0]
 80028d0:	6051      	str	r1, [r2, #4]
 80028d2:	8819      	ldrh	r1, [r3, #0]
 80028d4:	789b      	ldrb	r3, [r3, #2]
 80028d6:	8111      	strh	r1, [r2, #8]
 80028d8:	7293      	strb	r3, [r2, #10]
 80028da:	e07c      	b.n	80029d6 <L76_PrintExample+0x232>
		} else {
			strcat(buf, "[GPS] Satellites visible but not locked\r\n");
 80028dc:	f107 0320 	add.w	r3, r7, #32
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fce5 	bl	80002b0 <strlen>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	f107 0320 	add.w	r3, r7, #32
 80028ee:	4413      	add	r3, r2
 80028f0:	4a45      	ldr	r2, [pc, #276]	@ (8002a08 <L76_PrintExample+0x264>)
 80028f2:	4614      	mov	r4, r2
 80028f4:	469c      	mov	ip, r3
 80028f6:	f104 0e20 	add.w	lr, r4, #32
 80028fa:	4665      	mov	r5, ip
 80028fc:	4626      	mov	r6, r4
 80028fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002900:	6028      	str	r0, [r5, #0]
 8002902:	6069      	str	r1, [r5, #4]
 8002904:	60aa      	str	r2, [r5, #8]
 8002906:	60eb      	str	r3, [r5, #12]
 8002908:	3410      	adds	r4, #16
 800290a:	f10c 0c10 	add.w	ip, ip, #16
 800290e:	4574      	cmp	r4, lr
 8002910:	d1f3      	bne.n	80028fa <L76_PrintExample+0x156>
 8002912:	4662      	mov	r2, ip
 8002914:	4623      	mov	r3, r4
 8002916:	cb03      	ldmia	r3!, {r0, r1}
 8002918:	6010      	str	r0, [r2, #0]
 800291a:	6051      	str	r1, [r2, #4]
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	8113      	strh	r3, [r2, #8]
 8002920:	e059      	b.n	80029d6 <L76_PrintExample+0x232>
		}
	} else {
		snprintf(buf, sizeof(buf),
 8002922:	e9d7 ab48 	ldrd	sl, fp, [r7, #288]	@ 0x120
 8002926:	ed97 8b4a 	vldr	d8, [r7, #296]	@ 0x128
				"[GPS] FIX OK: Lat=%.5f, Lon=%.5f, Alt=%.1fm\r\n"
						"UTC=%02d:%02d:%05.2f, Date=%02d/%02d/%04d\r\n"
						"Speed=%.1f kt, Course=%.1f°, Satellites used=%d\r\n"
						"[GSV] Satellites in view: %d, Max SNR: %ddB\r\n",
				data.latitude, data.longitude, data.altitude, data.hours,
 800292a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
		snprintf(buf, sizeof(buf),
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fe2a 	bl	8000588 <__aeabi_f2d>
 8002934:	e9c7 0106 	strd	r0, r1, [r7, #24]
				data.latitude, data.longitude, data.altitude, data.hours,
 8002938:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
		snprintf(buf, sizeof(buf),
 800293c:	461e      	mov	r6, r3
				data.minutes, data.seconds, data.day, data.month, data.year,
 800293e:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
		snprintf(buf, sizeof(buf),
 8002942:	617b      	str	r3, [r7, #20]
				data.minutes, data.seconds, data.day, data.month, data.year,
 8002944:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
		snprintf(buf, sizeof(buf),
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fe1d 	bl	8000588 <__aeabi_f2d>
 800294e:	e9c7 0102 	strd	r0, r1, [r7, #8]
				data.minutes, data.seconds, data.day, data.month, data.year,
 8002952:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
		snprintf(buf, sizeof(buf),
 8002956:	613b      	str	r3, [r7, #16]
				data.minutes, data.seconds, data.day, data.month, data.year,
 8002958:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
		snprintf(buf, sizeof(buf),
 800295c:	607b      	str	r3, [r7, #4]
				data.minutes, data.seconds, data.day, data.month, data.year,
 800295e:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
		snprintf(buf, sizeof(buf),
 8002962:	603b      	str	r3, [r7, #0]
				data.speed, data.course, data.satellites, gsv_sat_count,
 8002964:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
		snprintf(buf, sizeof(buf),
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fe0d 	bl	8000588 <__aeabi_f2d>
 800296e:	4680      	mov	r8, r0
 8002970:	4689      	mov	r9, r1
				data.speed, data.course, data.satellites, gsv_sat_count,
 8002972:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
		snprintf(buf, sizeof(buf),
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fe06 	bl	8000588 <__aeabi_f2d>
 800297c:	4604      	mov	r4, r0
 800297e:	460d      	mov	r5, r1
				data.speed, data.course, data.satellites, gsv_sat_count,
 8002980:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
		snprintf(buf, sizeof(buf),
 8002984:	4619      	mov	r1, r3
 8002986:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <L76_PrintExample+0x250>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	4b1a      	ldr	r3, [pc, #104]	@ (80029f8 <L76_PrintExample+0x254>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	f107 0020 	add.w	r0, r7, #32
 8002994:	9314      	str	r3, [sp, #80]	@ 0x50
 8002996:	9213      	str	r2, [sp, #76]	@ 0x4c
 8002998:	9112      	str	r1, [sp, #72]	@ 0x48
 800299a:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 800299e:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	920a      	str	r2, [sp, #40]	@ 0x28
 80029ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80029b2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	9307      	str	r3, [sp, #28]
 80029ba:	9606      	str	r6, [sp, #24]
 80029bc:	ed97 7b06 	vldr	d7, [r7, #24]
 80029c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80029c4:	ed8d 8b02 	vstr	d8, [sp, #8]
 80029c8:	e9cd ab00 	strd	sl, fp, [sp]
 80029cc:	4a0f      	ldr	r2, [pc, #60]	@ (8002a0c <L76_PrintExample+0x268>)
 80029ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029d2:	f010 fe2d 	bl	8013630 <sniprintf>
				gsv_max_snr);
	}

	printf("%s", buf);
 80029d6:	f107 0320 	add.w	r3, r7, #32
 80029da:	4619      	mov	r1, r3
 80029dc:	480c      	ldr	r0, [pc, #48]	@ (8002a10 <L76_PrintExample+0x26c>)
 80029de:	f010 fdb7 	bl	8013550 <iprintf>
}
 80029e2:	bf00      	nop
 80029e4:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 80029e8:	46bd      	mov	sp, r7
 80029ea:	ecbd 8b02 	vpop	{d8}
 80029ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f2:	bf00      	nop
 80029f4:	20002b10 	.word	0x20002b10
 80029f8:	20002b11 	.word	0x20002b11
 80029fc:	0801654c 	.word	0x0801654c
 8002a00:	080165c8 	.word	0x080165c8
 8002a04:	080165f4 	.word	0x080165f4
 8002a08:	08016620 	.word	0x08016620
 8002a0c:	0801664c 	.word	0x0801664c
 8002a10:	08016704 	.word	0x08016704

08002a14 <HAL_UART_RxCpltCallback>:

/**
 * @brief UART RX Complete Callback (called from HAL IRQ handler when a byte is received).
 * @note This ISR appends incoming characters to a buffer and signals when a full line is received.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
	if (huart == l76_huart) {
 8002a20:	4b4f      	ldr	r3, [pc, #316]	@ (8002b60 <HAL_UART_RxCpltCallback+0x14c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	f040 8095 	bne.w	8002b56 <HAL_UART_RxCpltCallback+0x142>
		char c = (char) l76_rxChar;
 8002a2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002b64 <HAL_UART_RxCpltCallback+0x150>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	73fb      	strb	r3, [r7, #15]
		//HAL_UART_Transmit(&huart1, (uint8_t*) &c, 1, 1);
		//printf("callback triggered");
		if (c == '$') {
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2b24      	cmp	r3, #36	@ 0x24
 8002a36:	d11a      	bne.n	8002a6e <HAL_UART_RxCpltCallback+0x5a>
			/* Start of a new NMEA sentence */
			l76_rxIndex = 0;
 8002a38:	4b4b      	ldr	r3, [pc, #300]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	801a      	strh	r2, [r3, #0]
			l76_currentBuf ^= 1;  // switch to the other buffer for new sentence
 8002a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b6c <HAL_UART_RxCpltCallback+0x158>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	f083 0301 	eor.w	r3, r3, #1
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b48      	ldr	r3, [pc, #288]	@ (8002b6c <HAL_UART_RxCpltCallback+0x158>)
 8002a4a:	701a      	strb	r2, [r3, #0]
			l76_rxBuffer[l76_currentBuf][l76_rxIndex++] = c;
 8002a4c:	4b47      	ldr	r3, [pc, #284]	@ (8002b6c <HAL_UART_RxCpltCallback+0x158>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	4b45      	ldr	r3, [pc, #276]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	b291      	uxth	r1, r2
 8002a5a:	4a43      	ldr	r2, [pc, #268]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002a5c:	8011      	strh	r1, [r2, #0]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4a43      	ldr	r2, [pc, #268]	@ (8002b70 <HAL_UART_RxCpltCallback+0x15c>)
 8002a62:	01c3      	lsls	r3, r0, #7
 8002a64:	4413      	add	r3, r2
 8002a66:	440b      	add	r3, r1
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e06c      	b.n	8002b48 <HAL_UART_RxCpltCallback+0x134>
		} else if (c == '\n') {
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b0a      	cmp	r3, #10
 8002a72:	d14e      	bne.n	8002b12 <HAL_UART_RxCpltCallback+0xfe>
			/* End of NMEA sentence (LF detected). Terminate the string. */
			if (l76_rxIndex < L76_NMEA_MAX_LEN) {
 8002a74:	4b3c      	ldr	r3, [pc, #240]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a7a:	d80c      	bhi.n	8002a96 <HAL_UART_RxCpltCallback+0x82>
				l76_rxBuffer[l76_currentBuf][l76_rxIndex] = '\0'; // null-terminate line
 8002a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b6c <HAL_UART_RxCpltCallback+0x158>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	4b39      	ldr	r3, [pc, #228]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	4619      	mov	r1, r3
 8002a88:	4a39      	ldr	r2, [pc, #228]	@ (8002b70 <HAL_UART_RxCpltCallback+0x15c>)
 8002a8a:	01c3      	lsls	r3, r0, #7
 8002a8c:	4413      	add	r3, r2
 8002a8e:	440b      	add	r3, r1
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e007      	b.n	8002aa6 <HAL_UART_RxCpltCallback+0x92>
			} else {
				l76_rxBuffer[l76_currentBuf][L76_NMEA_MAX_LEN - 1] = '\0';
 8002a96:	4b35      	ldr	r3, [pc, #212]	@ (8002b6c <HAL_UART_RxCpltCallback+0x158>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	4a35      	ldr	r2, [pc, #212]	@ (8002b70 <HAL_UART_RxCpltCallback+0x15c>)
 8002a9c:	01db      	lsls	r3, r3, #7
 8002a9e:	4413      	add	r3, r2
 8002aa0:	337f      	adds	r3, #127	@ 0x7f
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
			}
			// Remove any trailing CR if present (overwrite with null terminator)
			if (l76_rxIndex > 0
 8002aa6:	4b30      	ldr	r3, [pc, #192]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d018      	beq.n	8002ae0 <HAL_UART_RxCpltCallback+0xcc>
					&& l76_rxBuffer[l76_currentBuf][l76_rxIndex - 1] == '\r') {
 8002aae:	4b2f      	ldr	r3, [pc, #188]	@ (8002b6c <HAL_UART_RxCpltCallback+0x158>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	492d      	ldr	r1, [pc, #180]	@ (8002b70 <HAL_UART_RxCpltCallback+0x15c>)
 8002abc:	01d2      	lsls	r2, r2, #7
 8002abe:	440a      	add	r2, r1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b0d      	cmp	r3, #13
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_UART_RxCpltCallback+0xcc>
				l76_rxBuffer[l76_currentBuf][l76_rxIndex - 1] = '\0';
 8002ac8:	4b28      	ldr	r3, [pc, #160]	@ (8002b6c <HAL_UART_RxCpltCallback+0x158>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b26      	ldr	r3, [pc, #152]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	4926      	ldr	r1, [pc, #152]	@ (8002b70 <HAL_UART_RxCpltCallback+0x15c>)
 8002ad6:	01d2      	lsls	r2, r2, #7
 8002ad8:	440a      	add	r2, r1
 8002ada:	4413      	add	r3, r2
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
			}
			/* The buffer l76_currentBuf now holds a complete sentence.
			 Signal the task that a line is ready in the OTHER buffer (the one just filled). */
			l76_readyBuf = l76_currentBuf;
 8002ae0:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_UART_RxCpltCallback+0x158>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b25a      	sxtb	r2, r3
 8002ae6:	4b23      	ldr	r3, [pc, #140]	@ (8002b74 <HAL_UART_RxCpltCallback+0x160>)
 8002ae8:	701a      	strb	r2, [r3, #0]
			// Actually, we've toggled at '$', so at this point l76_currentBuf is the buffer just filled.
			// We will toggle it next time a new '$' comes.
			// So here l76_readyBuf is set to currentBuf, which is the filled buffer.

			/* Give semaphore to unblock the task waiting for a new line */
			xSemaphoreGiveFromISR(l76_sem, &xHigherPriorityTaskWoken);
 8002aea:	4b23      	ldr	r3, [pc, #140]	@ (8002b78 <HAL_UART_RxCpltCallback+0x164>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f107 0208 	add.w	r2, r7, #8
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f00c ffe4 	bl	800fac2 <xQueueGiveFromISR>
			/* Optionally, yield to the GPS task immediately if it has higher priority */
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d023      	beq.n	8002b48 <HAL_UART_RxCpltCallback+0x134>
 8002b00:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <HAL_UART_RxCpltCallback+0x168>)
 8002b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	e01a      	b.n	8002b48 <HAL_UART_RxCpltCallback+0x134>
		} else if (c == '\r') {
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	2b0d      	cmp	r3, #13
 8002b16:	d017      	beq.n	8002b48 <HAL_UART_RxCpltCallback+0x134>
			/* Carriage return: skip it (will handle on '\n') */
			// Do nothing, just ignore the CR
		} else {
			/* Regular character, add to current buffer if space */
			if (l76_rxIndex < (L76_NMEA_MAX_LEN - 1)) {
 8002b18:	4b13      	ldr	r3, [pc, #76]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	2b7e      	cmp	r3, #126	@ 0x7e
 8002b1e:	d810      	bhi.n	8002b42 <HAL_UART_RxCpltCallback+0x12e>
				l76_rxBuffer[l76_currentBuf][l76_rxIndex++] = c;
 8002b20:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <HAL_UART_RxCpltCallback+0x158>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	b291      	uxth	r1, r2
 8002b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002b30:	8011      	strh	r1, [r2, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4a0e      	ldr	r2, [pc, #56]	@ (8002b70 <HAL_UART_RxCpltCallback+0x15c>)
 8002b36:	01c3      	lsls	r3, r0, #7
 8002b38:	4413      	add	r3, r2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e002      	b.n	8002b48 <HAL_UART_RxCpltCallback+0x134>
			} else {
				/* Buffer overflow - sentence too long, reset index to avoid overflow.
				 (In practice, NMEA sentences should not exceed buffer length.) */
				l76_rxIndex = 0;
 8002b42:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <HAL_UART_RxCpltCallback+0x154>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	801a      	strh	r2, [r3, #0]
			}
		}
		/* Re-arm the UART receive interrupt for the next character */
		HAL_UART_Receive_IT(l76_huart, &l76_rxChar, 1);
 8002b48:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_UART_RxCpltCallback+0x14c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4905      	ldr	r1, [pc, #20]	@ (8002b64 <HAL_UART_RxCpltCallback+0x150>)
 8002b50:	4618      	mov	r0, r3
 8002b52:	f009 ff12 	bl	800c97a <HAL_UART_Receive_IT>
	}
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200029d0 	.word	0x200029d0
 8002b64:	20002adb 	.word	0x20002adb
 8002b68:	20002ad8 	.word	0x20002ad8
 8002b6c:	20002ada 	.word	0x20002ada
 8002b70:	200029d8 	.word	0x200029d8
 8002b74:	20000000 	.word	0x20000000
 8002b78:	200029d4 	.word	0x200029d4
 8002b7c:	e000ed04 	.word	0xe000ed04

08002b80 <L76_ProcessNMEA>:

/**
 * @brief Determine the type of NMEA sentence and parse accordingly.
 * @param nmea Pointer to the NMEA sentence string (null-terminated, starting with '$').
 */
static void L76_ProcessNMEA(char *nmea) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	if (nmea == NULL || nmea[0] != '$') {
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d07a      	beq.n	8002c84 <L76_ProcessNMEA+0x104>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b24      	cmp	r3, #36	@ 0x24
 8002b94:	d176      	bne.n	8002c84 <L76_ProcessNMEA+0x104>
		return; // invalid sentence
	}

	// Remove any checksum if present by cutting off at '*'
	char *checksum_start = strchr(nmea, '*');
 8002b96:	212a      	movs	r1, #42	@ 0x2a
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f010 fe5f 	bl	801385c <strchr>
 8002b9e:	60f8      	str	r0, [r7, #12]
	if (checksum_start) {
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <L76_ProcessNMEA+0x2c>
		*checksum_start = '\0'; // terminate string at '*' (discard checksum part)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
	}

	// Identify sentence type by the 3-letter identifier after '$xx' (talker ID)
	if (strncmp(nmea + 3, "GGA", 3) == 0) {
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3303      	adds	r3, #3
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	4936      	ldr	r1, [pc, #216]	@ (8002c8c <L76_ProcessNMEA+0x10c>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f010 fe5e 	bl	8013876 <strncmp>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d104      	bne.n	8002bca <L76_ProcessNMEA+0x4a>
		L76_ParseGGA(nmea, &l76_data);
 8002bc0:	4933      	ldr	r1, [pc, #204]	@ (8002c90 <L76_ProcessNMEA+0x110>)
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f874 	bl	8002cb0 <L76_ParseGGA>
 8002bc8:	e05d      	b.n	8002c86 <L76_ProcessNMEA+0x106>
	} else if (strncmp(nmea + 3, "RMC", 3) == 0) {
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3303      	adds	r3, #3
 8002bce:	2203      	movs	r2, #3
 8002bd0:	4930      	ldr	r1, [pc, #192]	@ (8002c94 <L76_ProcessNMEA+0x114>)
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f010 fe4f 	bl	8013876 <strncmp>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d104      	bne.n	8002be8 <L76_ProcessNMEA+0x68>
		L76_ParseRMC(nmea, &l76_data);
 8002bde:	492c      	ldr	r1, [pc, #176]	@ (8002c90 <L76_ProcessNMEA+0x110>)
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f925 	bl	8002e30 <L76_ParseRMC>
 8002be6:	e04e      	b.n	8002c86 <L76_ProcessNMEA+0x106>
	} else if (strncmp(nmea, "$GPGSV", 6) == 0
 8002be8:	2206      	movs	r2, #6
 8002bea:	492b      	ldr	r1, [pc, #172]	@ (8002c98 <L76_ProcessNMEA+0x118>)
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f010 fe42 	bl	8013876 <strncmp>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <L76_ProcessNMEA+0x88>
			|| strncmp(nmea, "$GLGSV", 6) == 0) {
 8002bf8:	2206      	movs	r2, #6
 8002bfa:	4928      	ldr	r1, [pc, #160]	@ (8002c9c <L76_ProcessNMEA+0x11c>)
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f010 fe3a 	bl	8013876 <strncmp>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d13e      	bne.n	8002c86 <L76_ProcessNMEA+0x106>
		// Display raw GSV line
		printf("[RAW GSV] %s\r\n", nmea);
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4825      	ldr	r0, [pc, #148]	@ (8002ca0 <L76_ProcessNMEA+0x120>)
 8002c0c:	f010 fca0 	bl	8013550 <iprintf>

		// Basic parsing to count satellites and max SNR
		char *token;
		uint8_t field = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	74fb      	strb	r3, [r7, #19]
		uint8_t sat_seen = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	74bb      	strb	r3, [r7, #18]
		uint8_t max_snr = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	747b      	strb	r3, [r7, #17]

		token = strtok(nmea, ",");
 8002c1c:	4921      	ldr	r1, [pc, #132]	@ (8002ca4 <L76_ProcessNMEA+0x124>)
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f010 fe3c 	bl	801389c <strtok>
 8002c24:	6178      	str	r0, [r7, #20]
		while (token != NULL) {
 8002c26:	e023      	b.n	8002c70 <L76_ProcessNMEA+0xf0>
			field++;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	74fb      	strb	r3, [r7, #19]
			if (field == 4) {
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d104      	bne.n	8002c3e <L76_ProcessNMEA+0xbe>
				sat_seen = (uint8_t) atoi(token);  // total satellites in view
 8002c34:	6978      	ldr	r0, [r7, #20]
 8002c36:	f00f f878 	bl	8011d2a <atoi>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	74bb      	strb	r3, [r7, #18]
			}
			if (field >= 8 && ((field - 8) % 4 == 0)) {
 8002c3e:	7cfb      	ldrb	r3, [r7, #19]
 8002c40:	2b07      	cmp	r3, #7
 8002c42:	d910      	bls.n	8002c66 <L76_ProcessNMEA+0xe6>
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	3b08      	subs	r3, #8
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <L76_ProcessNMEA+0xe6>
				uint8_t snr = (uint8_t) atoi(token);
 8002c50:	6978      	ldr	r0, [r7, #20]
 8002c52:	f00f f86a 	bl	8011d2a <atoi>
 8002c56:	4603      	mov	r3, r0
 8002c58:	72fb      	strb	r3, [r7, #11]
				if (snr > max_snr)
 8002c5a:	7afa      	ldrb	r2, [r7, #11]
 8002c5c:	7c7b      	ldrb	r3, [r7, #17]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d901      	bls.n	8002c66 <L76_ProcessNMEA+0xe6>
					max_snr = snr;
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	747b      	strb	r3, [r7, #17]
			}
			token = strtok(NULL, ",");
 8002c66:	490f      	ldr	r1, [pc, #60]	@ (8002ca4 <L76_ProcessNMEA+0x124>)
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f010 fe17 	bl	801389c <strtok>
 8002c6e:	6178      	str	r0, [r7, #20]
		while (token != NULL) {
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1d8      	bne.n	8002c28 <L76_ProcessNMEA+0xa8>
		}

		// Update global GSV debug values
		gsv_sat_count = sat_seen;
 8002c76:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca8 <L76_ProcessNMEA+0x128>)
 8002c78:	7cbb      	ldrb	r3, [r7, #18]
 8002c7a:	7013      	strb	r3, [r2, #0]
		gsv_max_snr = max_snr;
 8002c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002cac <L76_ProcessNMEA+0x12c>)
 8002c7e:	7c7b      	ldrb	r3, [r7, #17]
 8002c80:	7013      	strb	r3, [r2, #0]
 8002c82:	e000      	b.n	8002c86 <L76_ProcessNMEA+0x106>
		return; // invalid sentence
 8002c84:	bf00      	nop
	}
}
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	08016708 	.word	0x08016708
 8002c90:	20002ae0 	.word	0x20002ae0
 8002c94:	0801670c 	.word	0x0801670c
 8002c98:	08016710 	.word	0x08016710
 8002c9c:	08016718 	.word	0x08016718
 8002ca0:	08016720 	.word	0x08016720
 8002ca4:	08016730 	.word	0x08016730
 8002ca8:	20002b10 	.word	0x20002b10
 8002cac:	20002b11 	.word	0x20002b11

08002cb0 <L76_ParseGGA>:
/**
 * @brief Parse a $GPGGA or $GNGGA NMEA sentence and update GPS data.
 * @param nmea The NMEA sentence string (null-terminated, without the checksum part).
 * @param data Pointer to GPS data structure to update.
 */
static void L76_ParseGGA(char *nmea, L76_GPS_Data_t *data) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
	// Example GGA: $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,
	char *token;
	token = strtok(nmea, ",");       // token0: "$GPGGA" (with talker)
 8002cba:	495b      	ldr	r1, [pc, #364]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f010 fded 	bl	801389c <strtok>
 8002cc2:	61f8      	str	r0, [r7, #28]
	token = strtok(NULL, ",");       // token1: UTC time (hhmmss.sss)
 8002cc4:	4958      	ldr	r1, [pc, #352]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f010 fde8 	bl	801389c <strtok>
 8002ccc:	61f8      	str	r0, [r7, #28]
	if (token != NULL) {
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <L76_ParseGGA+0x3a>
		L76_ParseTime(token, &data->hours, &data->minutes, &data->seconds);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f103 0120 	add.w	r1, r3, #32
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	3324      	adds	r3, #36	@ 0x24
 8002ce4:	69f8      	ldr	r0, [r7, #28]
 8002ce6:	f000 f9cd 	bl	8003084 <L76_ParseTime>
	}
	token = strtok(NULL, ",");       // token2: latitude (ddmm.mmmm)
 8002cea:	494f      	ldr	r1, [pc, #316]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002cec:	2000      	movs	r0, #0
 8002cee:	f010 fdd5 	bl	801389c <strtok>
 8002cf2:	61f8      	str	r0, [r7, #28]
	const char *lat_str = token;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	61bb      	str	r3, [r7, #24]
	token = strtok(NULL, ",");       // token3: N/S
 8002cf8:	494b      	ldr	r1, [pc, #300]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f010 fdce 	bl	801389c <strtok>
 8002d00:	61f8      	str	r0, [r7, #28]
	char lat_dir = (token != NULL ? token[0] : 0);
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <L76_ParseGGA+0x5e>
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	e000      	b.n	8002d10 <L76_ParseGGA+0x60>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]
	token = strtok(NULL, ",");       // token4: longitude (dddmm.mmmm)
 8002d12:	4945      	ldr	r1, [pc, #276]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002d14:	2000      	movs	r0, #0
 8002d16:	f010 fdc1 	bl	801389c <strtok>
 8002d1a:	61f8      	str	r0, [r7, #28]
	const char *lon_str = token;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	613b      	str	r3, [r7, #16]
	token = strtok(NULL, ",");       // token5: E/W
 8002d20:	4941      	ldr	r1, [pc, #260]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002d22:	2000      	movs	r0, #0
 8002d24:	f010 fdba 	bl	801389c <strtok>
 8002d28:	61f8      	str	r0, [r7, #28]
	char lon_dir = (token != NULL ? token[0] : 0);
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <L76_ParseGGA+0x86>
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	e000      	b.n	8002d38 <L76_ParseGGA+0x88>
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
	token = strtok(NULL, ","); // token6: Fix quality (0 = invalid, 1 = GPS fix, 2 = DGPS fix, ...)
 8002d3a:	493b      	ldr	r1, [pc, #236]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f010 fdad 	bl	801389c <strtok>
 8002d42:	61f8      	str	r0, [r7, #28]
	data->fix_quality = (token != NULL ? (uint8_t) atoi(token) : 0);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <L76_ParseGGA+0xa6>
 8002d4a:	69f8      	ldr	r0, [r7, #28]
 8002d4c:	f00e ffed 	bl	8011d2a <atoi>
 8002d50:	4603      	mov	r3, r0
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	e000      	b.n	8002d58 <L76_ParseGGA+0xa8>
 8002d56:	2200      	movs	r2, #0
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	751a      	strb	r2, [r3, #20]
	token = strtok(NULL, ",");       // token7: Number of satellites
 8002d5c:	4932      	ldr	r1, [pc, #200]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f010 fd9c 	bl	801389c <strtok>
 8002d64:	61f8      	str	r0, [r7, #28]
	data->satellites = (token != NULL ? (uint8_t) atoi(token) : 0);
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <L76_ParseGGA+0xc8>
 8002d6c:	69f8      	ldr	r0, [r7, #28]
 8002d6e:	f00e ffdc 	bl	8011d2a <atoi>
 8002d72:	4603      	mov	r3, r0
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	e000      	b.n	8002d7a <L76_ParseGGA+0xca>
 8002d78:	2200      	movs	r2, #0
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	755a      	strb	r2, [r3, #21]
	token = strtok(NULL, ",");       // token8: HDOP
 8002d7e:	492a      	ldr	r1, [pc, #168]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002d80:	2000      	movs	r0, #0
 8002d82:	f010 fd8b 	bl	801389c <strtok>
 8002d86:	61f8      	str	r0, [r7, #28]
	// We can parse HDOP if needed: float hdop = token ? strtof(token, NULL) : 0.0f;
	token = strtok(NULL, ",");       // token9: Altitude
 8002d88:	4927      	ldr	r1, [pc, #156]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f010 fd86 	bl	801389c <strtok>
 8002d90:	61f8      	str	r0, [r7, #28]
	data->altitude = (token != NULL ? strtof(token, NULL) : 0.0f);
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d006      	beq.n	8002da6 <L76_ParseGGA+0xf6>
 8002d98:	2100      	movs	r1, #0
 8002d9a:	69f8      	ldr	r0, [r7, #28]
 8002d9c:	f00f fdd8 	bl	8012950 <strtof>
 8002da0:	eef0 7a40 	vmov.f32	s15, s0
 8002da4:	e001      	b.n	8002daa <L76_ParseGGA+0xfa>
 8002da6:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8002e2c <L76_ParseGGA+0x17c>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	edc3 7a04 	vstr	s15, [r3, #16]
	// token10: Altitude unit (usually "M")
	token = strtok(NULL, ",");
 8002db0:	491d      	ldr	r1, [pc, #116]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002db2:	2000      	movs	r0, #0
 8002db4:	f010 fd72 	bl	801389c <strtok>
 8002db8:	61f8      	str	r0, [r7, #28]
	// token11: Geoidal separation (not used)
	token = strtok(NULL, ",");
 8002dba:	491b      	ldr	r1, [pc, #108]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f010 fd6d 	bl	801389c <strtok>
 8002dc2:	61f8      	str	r0, [r7, #28]
	// token12: Geoidal separation unit (usually "M")
	token = strtok(NULL, ",");
 8002dc4:	4918      	ldr	r1, [pc, #96]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f010 fd68 	bl	801389c <strtok>
 8002dcc:	61f8      	str	r0, [r7, #28]
	// token13: DGPS age (if any, not used)
	token = strtok(NULL, ",");
 8002dce:	4916      	ldr	r1, [pc, #88]	@ (8002e28 <L76_ParseGGA+0x178>)
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f010 fd63 	bl	801389c <strtok>
 8002dd6:	61f8      	str	r0, [r7, #28]
	// token14: DGPS reference station ID (if any, not used)
	// (Note: strtok already stopped at '*' if there was a checksum, since we cut it in ProcessNMEA)

	// Convert latitude and longitude to decimal degrees
	if (lat_str && lat_dir) {
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00e      	beq.n	8002dfc <L76_ParseGGA+0x14c>
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00b      	beq.n	8002dfc <L76_ParseGGA+0x14c>
		data->latitude = L76_ConvertNMEADegrees(lat_str, lat_dir);
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	4619      	mov	r1, r3
 8002de8:	69b8      	ldr	r0, [r7, #24]
 8002dea:	f000 f8ed 	bl	8002fc8 <L76_ConvertNMEADegrees>
 8002dee:	eeb0 7a40 	vmov.f32	s14, s0
 8002df2:	eef0 7a60 	vmov.f32	s15, s1
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	ed83 7b00 	vstr	d7, [r3]
	}
	if (lon_str && lon_dir) {
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00e      	beq.n	8002e20 <L76_ParseGGA+0x170>
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00b      	beq.n	8002e20 <L76_ParseGGA+0x170>
		data->longitude = L76_ConvertNMEADegrees(lon_str, lon_dir);
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6938      	ldr	r0, [r7, #16]
 8002e0e:	f000 f8db 	bl	8002fc8 <L76_ConvertNMEADegrees>
 8002e12:	eeb0 7a40 	vmov.f32	s14, s0
 8002e16:	eef0 7a60 	vmov.f32	s15, s1
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	ed83 7b02 	vstr	d7, [r3, #8]
	}
	// No return value; data is updated in the provided structure
}
 8002e20:	bf00      	nop
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	08016730 	.word	0x08016730
 8002e2c:	00000000 	.word	0x00000000

08002e30 <L76_ParseRMC>:
/**
 * @brief Parse a $GPRMC or $GNRMC NMEA sentence and update GPS data.
 * @param nmea The NMEA sentence string (null-terminated, without the checksum).
 * @param data Pointer to GPS data structure to update.
 */
static void L76_ParseRMC(char *nmea, L76_GPS_Data_t *data) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
	// Example RMC: $GPRMC,123519,A,4807.038,N,01131.000,E,022.4,084.4,230394,,,A
	char *token;
	token = strtok(nmea, ",");      // token0: "$GPRMC"
 8002e3a:	4961      	ldr	r1, [pc, #388]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f010 fd2d 	bl	801389c <strtok>
 8002e42:	61f8      	str	r0, [r7, #28]
	token = strtok(NULL, ",");      // token1: UTC time
 8002e44:	495e      	ldr	r1, [pc, #376]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002e46:	2000      	movs	r0, #0
 8002e48:	f010 fd28 	bl	801389c <strtok>
 8002e4c:	61f8      	str	r0, [r7, #28]
	if (token != NULL) {
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <L76_ParseRMC+0x3a>
		L76_ParseTime(token, &data->hours, &data->minutes, &data->seconds);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f103 0120 	add.w	r1, r3, #32
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	3324      	adds	r3, #36	@ 0x24
 8002e64:	69f8      	ldr	r0, [r7, #28]
 8002e66:	f000 f90d 	bl	8003084 <L76_ParseTime>
	}
	token = strtok(NULL, ",");      // token2: Status (A=active, V=void)
 8002e6a:	4955      	ldr	r1, [pc, #340]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f010 fd15 	bl	801389c <strtok>
 8002e72:	61f8      	str	r0, [r7, #28]
	char status = (token != NULL ? token[0] : 'V');
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <L76_ParseRMC+0x50>
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	e000      	b.n	8002e82 <L76_ParseRMC+0x52>
 8002e80:	2356      	movs	r3, #86	@ 0x56
 8002e82:	76fb      	strb	r3, [r7, #27]
	token = strtok(NULL, ",");      // token3: Latitude
 8002e84:	494e      	ldr	r1, [pc, #312]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002e86:	2000      	movs	r0, #0
 8002e88:	f010 fd08 	bl	801389c <strtok>
 8002e8c:	61f8      	str	r0, [r7, #28]
	const char *lat_str = token;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	617b      	str	r3, [r7, #20]
	token = strtok(NULL, ",");      // token4: N/S
 8002e92:	494b      	ldr	r1, [pc, #300]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002e94:	2000      	movs	r0, #0
 8002e96:	f010 fd01 	bl	801389c <strtok>
 8002e9a:	61f8      	str	r0, [r7, #28]
	char lat_dir = (token != NULL ? token[0] : 0);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <L76_ParseRMC+0x78>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	e000      	b.n	8002eaa <L76_ParseRMC+0x7a>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	74fb      	strb	r3, [r7, #19]
	token = strtok(NULL, ",");      // token5: Longitude
 8002eac:	4944      	ldr	r1, [pc, #272]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f010 fcf4 	bl	801389c <strtok>
 8002eb4:	61f8      	str	r0, [r7, #28]
	const char *lon_str = token;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	60fb      	str	r3, [r7, #12]
	token = strtok(NULL, ",");      // token6: E/W
 8002eba:	4941      	ldr	r1, [pc, #260]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f010 fced 	bl	801389c <strtok>
 8002ec2:	61f8      	str	r0, [r7, #28]
	char lon_dir = (token != NULL ? token[0] : 0);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <L76_ParseRMC+0xa0>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	e000      	b.n	8002ed2 <L76_ParseRMC+0xa2>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	72fb      	strb	r3, [r7, #11]
	token = strtok(NULL, ",");      // token7: Speed in knots
 8002ed4:	493a      	ldr	r1, [pc, #232]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f010 fce0 	bl	801389c <strtok>
 8002edc:	61f8      	str	r0, [r7, #28]
	data->speed = (token != NULL ? strtof(token, NULL) : 0.0f);
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <L76_ParseRMC+0xc2>
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	69f8      	ldr	r0, [r7, #28]
 8002ee8:	f00f fd32 	bl	8012950 <strtof>
 8002eec:	eef0 7a40 	vmov.f32	s15, s0
 8002ef0:	e001      	b.n	8002ef6 <L76_ParseRMC+0xc6>
 8002ef2:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8002fc4 <L76_ParseRMC+0x194>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	edc3 7a06 	vstr	s15, [r3, #24]
	token = strtok(NULL, ",");      // token8: Course (track angle in degrees)
 8002efc:	4930      	ldr	r1, [pc, #192]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002efe:	2000      	movs	r0, #0
 8002f00:	f010 fccc 	bl	801389c <strtok>
 8002f04:	61f8      	str	r0, [r7, #28]
	data->course = (token != NULL ? strtof(token, NULL) : 0.0f);
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <L76_ParseRMC+0xea>
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	69f8      	ldr	r0, [r7, #28]
 8002f10:	f00f fd1e 	bl	8012950 <strtof>
 8002f14:	eef0 7a40 	vmov.f32	s15, s0
 8002f18:	e001      	b.n	8002f1e <L76_ParseRMC+0xee>
 8002f1a:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8002fc4 <L76_ParseRMC+0x194>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	edc3 7a07 	vstr	s15, [r3, #28]
	token = strtok(NULL, ",");      // token9: Date (ddmmyy)
 8002f24:	4926      	ldr	r1, [pc, #152]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002f26:	2000      	movs	r0, #0
 8002f28:	f010 fcb8 	bl	801389c <strtok>
 8002f2c:	61f8      	str	r0, [r7, #28]
	if (token != NULL) {
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <L76_ParseRMC+0x11a>
		L76_ParseDate(token, &data->day, &data->month, &data->year);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	332a      	adds	r3, #42	@ 0x2a
 8002f44:	69f8      	ldr	r0, [r7, #28]
 8002f46:	f000 f929 	bl	800319c <L76_ParseDate>
	}
	// token10: Magnetic variation (optional, may be empty)
	token = strtok(NULL, ",");
 8002f4a:	491d      	ldr	r1, [pc, #116]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f010 fca5 	bl	801389c <strtok>
 8002f52:	61f8      	str	r0, [r7, #28]
	// token11: Mag var direction (E/W, optional)
	token = strtok(NULL, ",");
 8002f54:	491a      	ldr	r1, [pc, #104]	@ (8002fc0 <L76_ParseRMC+0x190>)
 8002f56:	2000      	movs	r0, #0
 8002f58:	f010 fca0 	bl	801389c <strtok>
 8002f5c:	61f8      	str	r0, [r7, #28]

	// Update latitude/longitude if available
	if (lat_str && lat_dir) {
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <L76_ParseRMC+0x152>
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <L76_ParseRMC+0x152>
		data->latitude = L76_ConvertNMEADegrees(lat_str, lat_dir);
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f000 f82a 	bl	8002fc8 <L76_ConvertNMEADegrees>
 8002f74:	eeb0 7a40 	vmov.f32	s14, s0
 8002f78:	eef0 7a60 	vmov.f32	s15, s1
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	ed83 7b00 	vstr	d7, [r3]
	}
	if (lon_str && lon_dir) {
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <L76_ParseRMC+0x176>
 8002f88:	7afb      	ldrb	r3, [r7, #11]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <L76_ParseRMC+0x176>
		data->longitude = L76_ConvertNMEADegrees(lon_str, lon_dir);
 8002f8e:	7afb      	ldrb	r3, [r7, #11]
 8002f90:	4619      	mov	r1, r3
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f818 	bl	8002fc8 <L76_ConvertNMEADegrees>
 8002f98:	eeb0 7a40 	vmov.f32	s14, s0
 8002f9c:	eef0 7a60 	vmov.f32	s15, s1
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	ed83 7b02 	vstr	d7, [r3, #8]
	}
	// Update fix status based on Status field
	if (status == 'V') {
 8002fa6:	7efb      	ldrb	r3, [r7, #27]
 8002fa8:	2b56      	cmp	r3, #86	@ 0x56
 8002faa:	d105      	bne.n	8002fb8 <L76_ParseRMC+0x188>
		// 'V' = navigation receiver warning (no valid fix)
		data->fix_quality = 0;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	751a      	strb	r2, [r3, #20]
		data->satellites = 0;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	755a      	strb	r2, [r3, #21]
	}
}
 8002fb8:	bf00      	nop
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	08016730 	.word	0x08016730
 8002fc4:	00000000 	.word	0x00000000

08002fc8 <L76_ConvertNMEADegrees>:
 * @brief Convert an NMEA coordinate string (degrees and minutes) into decimal degrees.
 * @param raw The coordinate string in NMEA format (ddmm.mmmm or dddmm.mmmm).
 * @param dir The direction character ('N','S','E','W').
 * @return The coordinate in decimal degrees, with sign indicating hemisphere.
 */
static double L76_ConvertNMEADegrees(const char *raw, char dir) {
 8002fc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fcc:	b08a      	sub	sp, #40	@ 0x28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	70fb      	strb	r3, [r7, #3]
	// NMEA format: latitude: ddmm.mmmm, longitude: dddmm.mmmm
	// Convert to decimal degrees.
	double val = atof(raw);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f00e fea4 	bl	8011d24 <atof>
 8002fdc:	ed87 0b06 	vstr	d0, [r7, #24]
	int degrees = (int) (val / 100);         // extract whole degrees
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	4b25      	ldr	r3, [pc, #148]	@ (800307c <L76_ConvertNMEADegrees+0xb4>)
 8002fe6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fea:	f7fd fc4f 	bl	800088c <__aeabi_ddiv>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f7fd fdcf 	bl	8000b98 <__aeabi_d2iz>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	617b      	str	r3, [r7, #20]
	double minutes = val - (degrees * 100); // extract minutes (including fractional part)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2264      	movs	r2, #100	@ 0x64
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd faac 	bl	8000564 <__aeabi_i2d>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003014:	f7fd f958 	bl	80002c8 <__aeabi_dsub>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double dec_deg = (double) degrees + minutes / 60.0;
 8003020:	6978      	ldr	r0, [r7, #20]
 8003022:	f7fd fa9f 	bl	8000564 <__aeabi_i2d>
 8003026:	4680      	mov	r8, r0
 8003028:	4689      	mov	r9, r1
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <L76_ConvertNMEADegrees+0xb8>)
 8003030:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003034:	f7fd fc2a 	bl	800088c <__aeabi_ddiv>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4640      	mov	r0, r8
 800303e:	4649      	mov	r1, r9
 8003040:	f7fd f944 	bl	80002cc <__adddf3>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (dir == 'S' || dir == 'W') {
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	2b53      	cmp	r3, #83	@ 0x53
 8003050:	d002      	beq.n	8003058 <L76_ConvertNMEADegrees+0x90>
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	2b57      	cmp	r3, #87	@ 0x57
 8003056:	d105      	bne.n	8003064 <L76_ConvertNMEADegrees+0x9c>
		dec_deg = -dec_deg;
 8003058:	6a3c      	ldr	r4, [r7, #32]
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003060:	e9c7 4508 	strd	r4, r5, [r7, #32]
	}
	return dec_deg;
 8003064:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003068:	ec43 2b17 	vmov	d7, r2, r3
}
 800306c:	eeb0 0a47 	vmov.f32	s0, s14
 8003070:	eef0 0a67 	vmov.f32	s1, s15
 8003074:	3728      	adds	r7, #40	@ 0x28
 8003076:	46bd      	mov	sp, r7
 8003078:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800307c:	40590000 	.word	0x40590000
 8003080:	404e0000 	.word	0x404e0000

08003084 <L76_ParseTime>:
 * @param hour [out] Parsed hour.
 * @param min  [out] Parsed minute.
 * @param sec  [out] Parsed seconds (including fractional part).
 */
static void L76_ParseTime(const char *timestr, uint8_t *hour, uint8_t *min,
		float *sec) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	@ 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
	if (strlen(timestr) < 6) {
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7fd f90c 	bl	80002b0 <strlen>
 8003098:	4603      	mov	r3, r0
 800309a:	2b05      	cmp	r3, #5
 800309c:	d80b      	bhi.n	80030b6 <L76_ParseTime+0x32>
		// Invalid time string
		*hour = *min = 0;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	701a      	strb	r2, [r3, #0]
		*sec = 0.0f;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	e06f      	b.n	8003196 <L76_ParseTime+0x112>
		return;
	}
	// Parse hour, minute, second
	char buf[3] = { 0 };
 80030b6:	f107 0310 	add.w	r3, r7, #16
 80030ba:	2100      	movs	r1, #0
 80030bc:	460a      	mov	r2, r1
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	460a      	mov	r2, r1
 80030c2:	709a      	strb	r2, [r3, #2]
	buf[0] = timestr[0];
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	743b      	strb	r3, [r7, #16]
	buf[1] = timestr[1]; // HH
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3301      	adds	r3, #1
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	747b      	strb	r3, [r7, #17]
	*hour = (uint8_t) atoi(buf);
 80030d2:	f107 0310 	add.w	r3, r7, #16
 80030d6:	4618      	mov	r0, r3
 80030d8:	f00e fe27 	bl	8011d2a <atoi>
 80030dc:	4603      	mov	r3, r0
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	701a      	strb	r2, [r3, #0]
	buf[0] = timestr[2];
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3302      	adds	r3, #2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	743b      	strb	r3, [r7, #16]
	buf[1] = timestr[3]; // MM
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	3303      	adds	r3, #3
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	747b      	strb	r3, [r7, #17]
	*min = (uint8_t) atoi(buf);
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00e fe16 	bl	8011d2a <atoi>
 80030fe:	4603      	mov	r3, r0
 8003100:	b2da      	uxtb	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	701a      	strb	r2, [r3, #0]
	buf[0] = timestr[4];
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3304      	adds	r3, #4
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	743b      	strb	r3, [r7, #16]
	buf[1] = timestr[5]; // SS
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3305      	adds	r3, #5
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	747b      	strb	r3, [r7, #17]
	uint8_t sec_int = (uint8_t) atoi(buf);
 8003116:	f107 0310 	add.w	r3, r7, #16
 800311a:	4618      	mov	r0, r3
 800311c:	f00e fe05 	bl	8011d2a <atoi>
 8003120:	4603      	mov	r3, r0
 8003122:	77fb      	strb	r3, [r7, #31]
	float sec_frac = 0.0f;
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
	if (timestr[6] == '.') {
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3306      	adds	r3, #6
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b2e      	cmp	r3, #46	@ 0x2e
 8003132:	d124      	bne.n	800317e <L76_ParseTime+0xfa>
		// Fractional part present
		const char *frac_str = timestr + 7;  // part after the decimal point
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3307      	adds	r3, #7
 8003138:	61bb      	str	r3, [r7, #24]
		if (*frac_str) {
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01d      	beq.n	800317e <L76_ParseTime+0xfa>
			int frac_int = atoi(frac_str);
 8003142:	69b8      	ldr	r0, [r7, #24]
 8003144:	f00e fdf1 	bl	8011d2a <atoi>
 8003148:	6178      	str	r0, [r7, #20]
			int frac_len = strlen(frac_str);
 800314a:	69b8      	ldr	r0, [r7, #24]
 800314c:	f7fd f8b0 	bl	80002b0 <strlen>
 8003150:	4603      	mov	r3, r0
 8003152:	623b      	str	r3, [r7, #32]
			sec_frac = (float) frac_int;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800315e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			// Divide by 10^frac_len to get the fractional seconds
			while (frac_len-- > 0) {
 8003162:	e007      	b.n	8003174 <L76_ParseTime+0xf0>
				sec_frac /= 10.0f;
 8003164:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003168:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800316c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003170:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			while (frac_len-- > 0) {
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	1e5a      	subs	r2, r3, #1
 8003178:	623a      	str	r2, [r7, #32]
 800317a:	2b00      	cmp	r3, #0
 800317c:	dcf2      	bgt.n	8003164 <L76_ParseTime+0xe0>
			}
		}
	}
	*sec = sec_int + sec_frac;
 800317e:	7ffb      	ldrb	r3, [r7, #31]
 8003180:	ee07 3a90 	vmov	s15, r3
 8003184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003188:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800318c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	edc3 7a00 	vstr	s15, [r3]
}
 8003196:	3728      	adds	r7, #40	@ 0x28
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <L76_ParseDate>:
 * @param day   [out] Parsed day.
 * @param month [out] Parsed month.
 * @param year  [out] Parsed year (full year, e.g., 1994 or 2025).
 */
static void L76_ParseDate(const char *datestr, uint8_t *day, uint8_t *month,
		uint16_t *year) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
	if (strlen(datestr) != 6) {
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f7fd f880 	bl	80002b0 <strlen>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d00a      	beq.n	80031cc <L76_ParseDate+0x30>
		*day = *month = 0;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	701a      	strb	r2, [r3, #0]
		*year = 0;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	801a      	strh	r2, [r3, #0]
 80031ca:	e048      	b.n	800325e <L76_ParseDate+0xc2>
		return;
	}
	char buf[3] = { 0 };
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	2100      	movs	r1, #0
 80031d2:	460a      	mov	r2, r1
 80031d4:	801a      	strh	r2, [r3, #0]
 80031d6:	460a      	mov	r2, r1
 80031d8:	709a      	strb	r2, [r3, #2]
	buf[0] = datestr[0];
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	753b      	strb	r3, [r7, #20]
	buf[1] = datestr[1];
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3301      	adds	r3, #1
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	757b      	strb	r3, [r7, #21]
	*day = (uint8_t) atoi(buf);
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	4618      	mov	r0, r3
 80031ee:	f00e fd9c 	bl	8011d2a <atoi>
 80031f2:	4603      	mov	r3, r0
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	701a      	strb	r2, [r3, #0]
	buf[0] = datestr[2];
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3302      	adds	r3, #2
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	753b      	strb	r3, [r7, #20]
	buf[1] = datestr[3];
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3303      	adds	r3, #3
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	757b      	strb	r3, [r7, #21]
	*month = (uint8_t) atoi(buf);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4618      	mov	r0, r3
 8003210:	f00e fd8b 	bl	8011d2a <atoi>
 8003214:	4603      	mov	r3, r0
 8003216:	b2da      	uxtb	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	701a      	strb	r2, [r3, #0]
	buf[0] = datestr[4];
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3304      	adds	r3, #4
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	753b      	strb	r3, [r7, #20]
	buf[1] = datestr[5];
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3305      	adds	r3, #5
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	757b      	strb	r3, [r7, #21]
	uint8_t yy = (uint8_t) atoi(buf);
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4618      	mov	r0, r3
 8003232:	f00e fd7a 	bl	8011d2a <atoi>
 8003236:	4603      	mov	r3, r0
 8003238:	75fb      	strb	r3, [r7, #23]
	// NMEA year is two digits (00-99). Assume 2000-2099 for 00-99 up to 89, and 1900s for 90-99.
	if (yy < 90) {
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b59      	cmp	r3, #89	@ 0x59
 800323e:	d807      	bhi.n	8003250 <L76_ParseDate+0xb4>
		*year = 2000 + yy;
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	b29b      	uxth	r3, r3
 8003244:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003248:	b29a      	uxth	r2, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	e006      	b.n	800325e <L76_ParseDate+0xc2>
	} else {
		*year = 1900 + yy;
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8003258:	b29a      	uxth	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	801a      	strh	r2, [r3, #0]
	}
}
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003268:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <MX_I2C1_Init+0x74>)
 800326a:	4a1c      	ldr	r2, [pc, #112]	@ (80032dc <MX_I2C1_Init+0x78>)
 800326c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800326e:	4b1a      	ldr	r3, [pc, #104]	@ (80032d8 <MX_I2C1_Init+0x74>)
 8003270:	4a1b      	ldr	r2, [pc, #108]	@ (80032e0 <MX_I2C1_Init+0x7c>)
 8003272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003274:	4b18      	ldr	r3, [pc, #96]	@ (80032d8 <MX_I2C1_Init+0x74>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800327a:	4b17      	ldr	r3, [pc, #92]	@ (80032d8 <MX_I2C1_Init+0x74>)
 800327c:	2201      	movs	r2, #1
 800327e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003280:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <MX_I2C1_Init+0x74>)
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003286:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <MX_I2C1_Init+0x74>)
 8003288:	2200      	movs	r2, #0
 800328a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800328c:	4b12      	ldr	r3, [pc, #72]	@ (80032d8 <MX_I2C1_Init+0x74>)
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003292:	4b11      	ldr	r3, [pc, #68]	@ (80032d8 <MX_I2C1_Init+0x74>)
 8003294:	2200      	movs	r2, #0
 8003296:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003298:	4b0f      	ldr	r3, [pc, #60]	@ (80032d8 <MX_I2C1_Init+0x74>)
 800329a:	2200      	movs	r2, #0
 800329c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800329e:	480e      	ldr	r0, [pc, #56]	@ (80032d8 <MX_I2C1_Init+0x74>)
 80032a0:	f003 fc08 	bl	8006ab4 <HAL_I2C_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80032aa:	f000 fb5b 	bl	8003964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032ae:	2100      	movs	r1, #0
 80032b0:	4809      	ldr	r0, [pc, #36]	@ (80032d8 <MX_I2C1_Init+0x74>)
 80032b2:	f003 fc9b 	bl	8006bec <HAL_I2CEx_ConfigAnalogFilter>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80032bc:	f000 fb52 	bl	8003964 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80032c0:	2100      	movs	r1, #0
 80032c2:	4805      	ldr	r0, [pc, #20]	@ (80032d8 <MX_I2C1_Init+0x74>)
 80032c4:	f003 fcdd 	bl	8006c82 <HAL_I2CEx_ConfigDigitalFilter>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80032ce:	f000 fb49 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20002b14 	.word	0x20002b14
 80032dc:	40005400 	.word	0x40005400
 80032e0:	00c0eaff 	.word	0x00c0eaff

080032e4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003358 <MX_I2C3_Init+0x74>)
 80032ea:	4a1c      	ldr	r2, [pc, #112]	@ (800335c <MX_I2C3_Init+0x78>)
 80032ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003358 <MX_I2C3_Init+0x74>)
 80032f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003360 <MX_I2C3_Init+0x7c>)
 80032f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80032f4:	4b18      	ldr	r3, [pc, #96]	@ (8003358 <MX_I2C3_Init+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032fa:	4b17      	ldr	r3, [pc, #92]	@ (8003358 <MX_I2C3_Init+0x74>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003300:	4b15      	ldr	r3, [pc, #84]	@ (8003358 <MX_I2C3_Init+0x74>)
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003306:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <MX_I2C3_Init+0x74>)
 8003308:	2200      	movs	r2, #0
 800330a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800330c:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <MX_I2C3_Init+0x74>)
 800330e:	2200      	movs	r2, #0
 8003310:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003312:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <MX_I2C3_Init+0x74>)
 8003314:	2200      	movs	r2, #0
 8003316:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003318:	4b0f      	ldr	r3, [pc, #60]	@ (8003358 <MX_I2C3_Init+0x74>)
 800331a:	2200      	movs	r2, #0
 800331c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800331e:	480e      	ldr	r0, [pc, #56]	@ (8003358 <MX_I2C3_Init+0x74>)
 8003320:	f003 fbc8 	bl	8006ab4 <HAL_I2C_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800332a:	f000 fb1b 	bl	8003964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800332e:	2100      	movs	r1, #0
 8003330:	4809      	ldr	r0, [pc, #36]	@ (8003358 <MX_I2C3_Init+0x74>)
 8003332:	f003 fc5b 	bl	8006bec <HAL_I2CEx_ConfigAnalogFilter>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800333c:	f000 fb12 	bl	8003964 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003340:	2100      	movs	r1, #0
 8003342:	4805      	ldr	r0, [pc, #20]	@ (8003358 <MX_I2C3_Init+0x74>)
 8003344:	f003 fc9d 	bl	8006c82 <HAL_I2CEx_ConfigDigitalFilter>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800334e:	f000 fb09 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20002b68 	.word	0x20002b68
 800335c:	40005c00 	.word	0x40005c00
 8003360:	00c0eaff 	.word	0x00c0eaff

08003364 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b0ac      	sub	sp, #176	@ 0xb0
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800337c:	f107 0318 	add.w	r3, r7, #24
 8003380:	2284      	movs	r2, #132	@ 0x84
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f010 fa61 	bl	801384c <memset>
  if(i2cHandle->Instance==I2C1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a44      	ldr	r2, [pc, #272]	@ (80034a0 <HAL_I2C_MspInit+0x13c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d13d      	bne.n	8003410 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003394:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003398:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800339a:	2300      	movs	r3, #0
 800339c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800339e:	f107 0318 	add.w	r3, r7, #24
 80033a2:	4618      	mov	r0, r3
 80033a4:	f004 fdaa 	bl	8007efc <HAL_RCCEx_PeriphCLKConfig>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80033ae:	f000 fad9 	bl	8003964 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b2:	4b3c      	ldr	r3, [pc, #240]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	4a3b      	ldr	r2, [pc, #236]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033be:	4b39      	ldr	r3, [pc, #228]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80033ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033d2:	2312      	movs	r3, #18
 80033d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033d8:	2301      	movs	r3, #1
 80033da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033e4:	2304      	movs	r3, #4
 80033e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80033ee:	4619      	mov	r1, r3
 80033f0:	482d      	ldr	r0, [pc, #180]	@ (80034a8 <HAL_I2C_MspInit+0x144>)
 80033f2:	f003 f981 	bl	80066f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033f6:	4b2b      	ldr	r3, [pc, #172]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	4a2a      	ldr	r2, [pc, #168]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 80033fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003400:	6413      	str	r3, [r2, #64]	@ 0x40
 8003402:	4b28      	ldr	r3, [pc, #160]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800340e:	e042      	b.n	8003496 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a25      	ldr	r2, [pc, #148]	@ (80034ac <HAL_I2C_MspInit+0x148>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d13d      	bne.n	8003496 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800341a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800341e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003426:	f107 0318 	add.w	r3, r7, #24
 800342a:	4618      	mov	r0, r3
 800342c:	f004 fd66 	bl	8007efc <HAL_RCCEx_PeriphCLKConfig>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003436:	f000 fa95 	bl	8003964 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800343a:	4b1a      	ldr	r3, [pc, #104]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	4a19      	ldr	r2, [pc, #100]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 8003440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003444:	6313      	str	r3, [r2, #48]	@ 0x30
 8003446:	4b17      	ldr	r3, [pc, #92]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003452:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800345a:	2312      	movs	r3, #18
 800345c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003460:	2301      	movs	r3, #1
 8003462:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003466:	2303      	movs	r3, #3
 8003468:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800346c:	2304      	movs	r3, #4
 800346e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003472:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003476:	4619      	mov	r1, r3
 8003478:	480d      	ldr	r0, [pc, #52]	@ (80034b0 <HAL_I2C_MspInit+0x14c>)
 800347a:	f003 f93d 	bl	80066f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800347e:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	4a08      	ldr	r2, [pc, #32]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 8003484:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003488:	6413      	str	r3, [r2, #64]	@ 0x40
 800348a:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_I2C_MspInit+0x140>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
}
 8003496:	bf00      	nop
 8003498:	37b0      	adds	r7, #176	@ 0xb0
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40005400 	.word	0x40005400
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40020400 	.word	0x40020400
 80034ac:	40005c00 	.word	0x40005c00
 80034b0:	40021c00 	.word	0x40021c00

080034b4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	@ 0x38
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	2234      	movs	r2, #52	@ 0x34
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f010 f9c3 	bl	801384c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80034c6:	4b3a      	ldr	r3, [pc, #232]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 80034c8:	4a3a      	ldr	r2, [pc, #232]	@ (80035b4 <MX_LTDC_Init+0x100>)
 80034ca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80034cc:	4b38      	ldr	r3, [pc, #224]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80034d2:	4b37      	ldr	r3, [pc, #220]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80034d8:	4b35      	ldr	r3, [pc, #212]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 80034da:	2200      	movs	r2, #0
 80034dc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80034de:	4b34      	ldr	r3, [pc, #208]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80034e4:	4b32      	ldr	r3, [pc, #200]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 80034e6:	2228      	movs	r2, #40	@ 0x28
 80034e8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80034ea:	4b31      	ldr	r3, [pc, #196]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 80034ec:	2209      	movs	r2, #9
 80034ee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80034f0:	4b2f      	ldr	r3, [pc, #188]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 80034f2:	2235      	movs	r2, #53	@ 0x35
 80034f4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80034f6:	4b2e      	ldr	r3, [pc, #184]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 80034f8:	220b      	movs	r2, #11
 80034fa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80034fc:	4b2c      	ldr	r3, [pc, #176]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 80034fe:	f240 2215 	movw	r2, #533	@ 0x215
 8003502:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8003504:	4b2a      	ldr	r3, [pc, #168]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 8003506:	f240 121b 	movw	r2, #283	@ 0x11b
 800350a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 800350c:	4b28      	ldr	r3, [pc, #160]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 800350e:	f240 2235 	movw	r2, #565	@ 0x235
 8003512:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8003514:	4b26      	ldr	r3, [pc, #152]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 8003516:	f240 121d 	movw	r2, #285	@ 0x11d
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800351c:	4b24      	ldr	r3, [pc, #144]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003524:	4b22      	ldr	r3, [pc, #136]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800352c:	4b20      	ldr	r3, [pc, #128]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003534:	481e      	ldr	r0, [pc, #120]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 8003536:	f003 fbf0 	bl	8006d1a <HAL_LTDC_Init>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003540:	f000 fa10 	bl	8003964 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8003548:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800354c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8003552:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003556:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003558:	2302      	movs	r3, #2
 800355a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800355c:	23ff      	movs	r3, #255	@ 0xff
 800355e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003564:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003568:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800356a:	2307      	movs	r3, #7
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800356e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8003574:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 800357a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800357e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003592:	1d3b      	adds	r3, r7, #4
 8003594:	2200      	movs	r2, #0
 8003596:	4619      	mov	r1, r3
 8003598:	4805      	ldr	r0, [pc, #20]	@ (80035b0 <MX_LTDC_Init+0xfc>)
 800359a:	f003 fd1d 	bl	8006fd8 <HAL_LTDC_ConfigLayer>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80035a4:	f000 f9de 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80035a8:	bf00      	nop
 80035aa:	3738      	adds	r7, #56	@ 0x38
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20002bbc 	.word	0x20002bbc
 80035b4:	40016800 	.word	0x40016800

080035b8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08e      	sub	sp, #56	@ 0x38
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a55      	ldr	r2, [pc, #340]	@ (800372c <HAL_LTDC_MspInit+0x174>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	f040 80a3 	bne.w	8003722 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80035dc:	4b54      	ldr	r3, [pc, #336]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 80035de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e0:	4a53      	ldr	r2, [pc, #332]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 80035e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80035e8:	4b51      	ldr	r3, [pc, #324]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 80035ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035f4:	4b4e      	ldr	r3, [pc, #312]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 80035fa:	f043 0310 	orr.w	r3, r3, #16
 80035fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003600:	4b4b      	ldr	r3, [pc, #300]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800360c:	4b48      	ldr	r3, [pc, #288]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	4a47      	ldr	r2, [pc, #284]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 8003612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003616:	6313      	str	r3, [r2, #48]	@ 0x30
 8003618:	4b45      	ldr	r3, [pc, #276]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003624:	4b42      	ldr	r3, [pc, #264]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	4a41      	ldr	r2, [pc, #260]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 800362a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800362e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003630:	4b3f      	ldr	r3, [pc, #252]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 8003632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800363c:	4b3c      	ldr	r3, [pc, #240]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	4a3b      	ldr	r2, [pc, #236]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 8003642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003646:	6313      	str	r3, [r2, #48]	@ 0x30
 8003648:	4b39      	ldr	r3, [pc, #228]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 800364a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003654:	4b36      	ldr	r3, [pc, #216]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	4a35      	ldr	r2, [pc, #212]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 800365a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800365e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003660:	4b33      	ldr	r3, [pc, #204]	@ (8003730 <HAL_LTDC_MspInit+0x178>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800366c:	2310      	movs	r3, #16
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800367c:	230e      	movs	r3, #14
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003684:	4619      	mov	r1, r3
 8003686:	482b      	ldr	r0, [pc, #172]	@ (8003734 <HAL_LTDC_MspInit+0x17c>)
 8003688:	f003 f836 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800368c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	2302      	movs	r3, #2
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	2300      	movs	r3, #0
 800369c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800369e:	230e      	movs	r3, #14
 80036a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80036a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036a6:	4619      	mov	r1, r3
 80036a8:	4823      	ldr	r0, [pc, #140]	@ (8003738 <HAL_LTDC_MspInit+0x180>)
 80036aa:	f003 f825 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80036ae:	23f7      	movs	r3, #247	@ 0xf7
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b2:	2302      	movs	r3, #2
 80036b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ba:	2300      	movs	r3, #0
 80036bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80036be:	230e      	movs	r3, #14
 80036c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80036c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036c6:	4619      	mov	r1, r3
 80036c8:	481c      	ldr	r0, [pc, #112]	@ (800373c <HAL_LTDC_MspInit+0x184>)
 80036ca:	f003 f815 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80036ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	2300      	movs	r3, #0
 80036de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80036e0:	2309      	movs	r3, #9
 80036e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80036e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036e8:	4619      	mov	r1, r3
 80036ea:	4815      	ldr	r0, [pc, #84]	@ (8003740 <HAL_LTDC_MspInit+0x188>)
 80036ec:	f003 f804 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80036f0:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f6:	2302      	movs	r3, #2
 80036f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fe:	2300      	movs	r3, #0
 8003700:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003702:	230e      	movs	r3, #14
 8003704:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800370a:	4619      	mov	r1, r3
 800370c:	480d      	ldr	r0, [pc, #52]	@ (8003744 <HAL_LTDC_MspInit+0x18c>)
 800370e:	f002 fff3 	bl	80066f8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	2105      	movs	r1, #5
 8003716:	2058      	movs	r0, #88	@ 0x58
 8003718:	f001 fff2 	bl	8005700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800371c:	2058      	movs	r0, #88	@ 0x58
 800371e:	f002 f80b 	bl	8005738 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003722:	bf00      	nop
 8003724:	3738      	adds	r7, #56	@ 0x38
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40016800 	.word	0x40016800
 8003730:	40023800 	.word	0x40023800
 8003734:	40021000 	.word	0x40021000
 8003738:	40022400 	.word	0x40022400
 800373c:	40022800 	.word	0x40022800
 8003740:	40021800 	.word	0x40021800
 8003744:	40022000 	.word	0x40022000

08003748 <__io_putchar>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int __io_putchar(int ch)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003750:	1d39      	adds	r1, r7, #4
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
 8003756:	2201      	movs	r2, #1
 8003758:	4803      	ldr	r0, [pc, #12]	@ (8003768 <__io_putchar+0x20>)
 800375a:	f009 f885 	bl	800c868 <HAL_UART_Transmit>
    return ch;
 800375e:	687b      	ldr	r3, [r7, #4]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20003128 	.word	0x20003128

0800376c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003770:	f001 fc25 	bl	8004fbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003774:	f000 f840 	bl	80037f8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003778:	f000 f8b0 	bl	80038dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800377c:	f7fe fd54 	bl	8002228 <MX_GPIO_Init>
  MX_ADC3_Init();
 8003780:	f7fe f828 	bl	80017d4 <MX_ADC3_Init>
  MX_CRC_Init();
 8003784:	f7fe f8b8 	bl	80018f8 <MX_CRC_Init>
  MX_DCMI_Init();
 8003788:	f7fe f8f8 	bl	800197c <MX_DCMI_Init>
  MX_DMA2D_Init();
 800378c:	f7fe f9e8 	bl	8001b60 <MX_DMA2D_Init>
  MX_ETH_Init();
 8003790:	f7fe fa3e 	bl	8001c10 <MX_ETH_Init>
  MX_FMC_Init();
 8003794:	f7fe fb22 	bl	8001ddc <MX_FMC_Init>
  MX_I2C1_Init();
 8003798:	f7ff fd64 	bl	8003264 <MX_I2C1_Init>
  MX_I2C3_Init();
 800379c:	f7ff fda2 	bl	80032e4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80037a0:	f7ff fe88 	bl	80034b4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80037a4:	f000 f8e4 	bl	8003970 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80037a8:	f000 f99e 	bl	8003ae8 <MX_RTC_Init>
  MX_SAI2_Init();
 80037ac:	f000 fa6e 	bl	8003c8c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80037b0:	f000 fb7e 	bl	8003eb0 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80037b4:	f000 fc00 	bl	8003fb8 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80037b8:	f000 fc92 	bl	80040e0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80037bc:	f000 feee 	bl	800459c <MX_TIM1_Init>
  MX_TIM2_Init();
 80037c0:	f000 ff98 	bl	80046f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80037c4:	f001 f80c 	bl	80047e0 <MX_TIM3_Init>
  MX_TIM5_Init();
 80037c8:	f001 f882 	bl	80048d0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80037cc:	f001 f8ce 	bl	800496c <MX_TIM8_Init>
  MX_TIM12_Init();
 80037d0:	f001 f920 	bl	8004a14 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80037d4:	f001 fa9a 	bl	8004d0c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80037d8:	f001 fac8 	bl	8004d6c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80037dc:	f00b f922 	bl	800ea24 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart6, &rx, 1);
//  const char *msg = "STM32 OK\r\n";
//  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  printf("stm32 started.\r\n");
 80037e0:	4804      	ldr	r0, [pc, #16]	@ (80037f4 <main+0x88>)
 80037e2:	f00f ff1d 	bl	8013620 <puts>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80037e6:	f7fe fc17 	bl	8002018 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80037ea:	f00b fbf0 	bl	800efce <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80037ee:	bf00      	nop
 80037f0:	e7fd      	b.n	80037ee <main+0x82>
 80037f2:	bf00      	nop
 80037f4:	08016734 	.word	0x08016734

080037f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b094      	sub	sp, #80	@ 0x50
 80037fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037fe:	f107 0320 	add.w	r3, r7, #32
 8003802:	2230      	movs	r2, #48	@ 0x30
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f010 f820 	bl	801384c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800381c:	f003 fd90 	bl	8007340 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003820:	4b2c      	ldr	r3, [pc, #176]	@ (80038d4 <SystemClock_Config+0xdc>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	4a2b      	ldr	r2, [pc, #172]	@ (80038d4 <SystemClock_Config+0xdc>)
 8003826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800382a:	6413      	str	r3, [r2, #64]	@ 0x40
 800382c:	4b29      	ldr	r3, [pc, #164]	@ (80038d4 <SystemClock_Config+0xdc>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003838:	4b27      	ldr	r3, [pc, #156]	@ (80038d8 <SystemClock_Config+0xe0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a26      	ldr	r2, [pc, #152]	@ (80038d8 <SystemClock_Config+0xe0>)
 800383e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b24      	ldr	r3, [pc, #144]	@ (80038d8 <SystemClock_Config+0xe0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800384c:	607b      	str	r3, [r7, #4]
 800384e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003850:	2309      	movs	r3, #9
 8003852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003854:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800385a:	2301      	movs	r3, #1
 800385c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800385e:	2302      	movs	r3, #2
 8003860:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003862:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003868:	2319      	movs	r3, #25
 800386a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800386c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003870:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003872:	2302      	movs	r3, #2
 8003874:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003876:	2309      	movs	r3, #9
 8003878:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800387a:	f107 0320 	add.w	r3, r7, #32
 800387e:	4618      	mov	r0, r3
 8003880:	f003 fe80 	bl	8007584 <HAL_RCC_OscConfig>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800388a:	f000 f86b 	bl	8003964 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800388e:	f003 fd67 	bl	8007360 <HAL_PWREx_EnableOverDrive>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003898:	f000 f864 	bl	8003964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800389c:	230f      	movs	r3, #15
 800389e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038a0:	2302      	movs	r3, #2
 80038a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80038ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	2106      	movs	r1, #6
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 f906 	bl	8007acc <HAL_RCC_ClockConfig>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80038c6:	f000 f84d 	bl	8003964 <Error_Handler>
  }
}
 80038ca:	bf00      	nop
 80038cc:	3750      	adds	r7, #80	@ 0x50
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40007000 	.word	0x40007000

080038dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b0a2      	sub	sp, #136	@ 0x88
 80038e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	2284      	movs	r2, #132	@ 0x84
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f00f ffaf 	bl	801384c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80038ee:	4b13      	ldr	r3, [pc, #76]	@ (800393c <PeriphCommonClock_Config+0x60>)
 80038f0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80038f2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80038f6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80038f8:	2305      	movs	r3, #5
 80038fa:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80038fc:	2302      	movs	r3, #2
 80038fe:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003900:	2303      	movs	r3, #3
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003904:	2301      	movs	r3, #1
 8003906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003908:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800390c:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800390e:	2300      	movs	r3, #0
 8003910:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8003912:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003916:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800391a:	2300      	movs	r3, #0
 800391c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003920:	1d3b      	adds	r3, r7, #4
 8003922:	4618      	mov	r0, r3
 8003924:	f004 faea 	bl	8007efc <HAL_RCCEx_PeriphCLKConfig>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800392e:	f000 f819 	bl	8003964 <Error_Handler>
  }
}
 8003932:	bf00      	nop
 8003934:	3788      	adds	r7, #136	@ 0x88
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	00b00008 	.word	0x00b00008

08003940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a04      	ldr	r2, [pc, #16]	@ (8003960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003952:	f001 fb41 	bl	8004fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40001000 	.word	0x40001000

08003964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003968:	b672      	cpsid	i
}
 800396a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <Error_Handler+0x8>

08003970 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8003974:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <MX_QUADSPI_Init+0x50>)
 8003976:	4a13      	ldr	r2, [pc, #76]	@ (80039c4 <MX_QUADSPI_Init+0x54>)
 8003978:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800397a:	4b11      	ldr	r3, [pc, #68]	@ (80039c0 <MX_QUADSPI_Init+0x50>)
 800397c:	2201      	movs	r2, #1
 800397e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8003980:	4b0f      	ldr	r3, [pc, #60]	@ (80039c0 <MX_QUADSPI_Init+0x50>)
 8003982:	2204      	movs	r2, #4
 8003984:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003986:	4b0e      	ldr	r3, [pc, #56]	@ (80039c0 <MX_QUADSPI_Init+0x50>)
 8003988:	2210      	movs	r2, #16
 800398a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800398c:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <MX_QUADSPI_Init+0x50>)
 800398e:	2218      	movs	r2, #24
 8003990:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8003992:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <MX_QUADSPI_Init+0x50>)
 8003994:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8003998:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800399a:	4b09      	ldr	r3, [pc, #36]	@ (80039c0 <MX_QUADSPI_Init+0x50>)
 800399c:	2200      	movs	r2, #0
 800399e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80039a0:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <MX_QUADSPI_Init+0x50>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80039a6:	4b06      	ldr	r3, [pc, #24]	@ (80039c0 <MX_QUADSPI_Init+0x50>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80039ac:	4804      	ldr	r0, [pc, #16]	@ (80039c0 <MX_QUADSPI_Init+0x50>)
 80039ae:	f003 fd27 	bl	8007400 <HAL_QSPI_Init>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80039b8:	f7ff ffd4 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20002c64 	.word	0x20002c64
 80039c4:	a0001000 	.word	0xa0001000

080039c8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08c      	sub	sp, #48	@ 0x30
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	f107 031c 	add.w	r3, r7, #28
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ad4 <HAL_QSPI_MspInit+0x10c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d170      	bne.n	8003acc <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80039ea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	4a3a      	ldr	r2, [pc, #232]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 80039f0:	f043 0302 	orr.w	r3, r3, #2
 80039f4:	6393      	str	r3, [r2, #56]	@ 0x38
 80039f6:	4b38      	ldr	r3, [pc, #224]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 80039f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a02:	4b35      	ldr	r3, [pc, #212]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	4a34      	ldr	r2, [pc, #208]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 8003a08:	f043 0310 	orr.w	r3, r3, #16
 8003a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a0e:	4b32      	ldr	r3, [pc, #200]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 8003a20:	f043 0302 	orr.w	r3, r3, #2
 8003a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a26:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a32:	4b29      	ldr	r3, [pc, #164]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	4a28      	ldr	r2, [pc, #160]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 8003a38:	f043 0308 	orr.w	r3, r3, #8
 8003a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a3e:	4b26      	ldr	r3, [pc, #152]	@ (8003ad8 <HAL_QSPI_MspInit+0x110>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a56:	2303      	movs	r3, #3
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a5a:	2309      	movs	r3, #9
 8003a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003a5e:	f107 031c 	add.w	r3, r7, #28
 8003a62:	4619      	mov	r1, r3
 8003a64:	481d      	ldr	r0, [pc, #116]	@ (8003adc <HAL_QSPI_MspInit+0x114>)
 8003a66:	f002 fe47 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003a6a:	2340      	movs	r3, #64	@ 0x40
 8003a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a76:	2303      	movs	r3, #3
 8003a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003a7a:	230a      	movs	r3, #10
 8003a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003a7e:	f107 031c 	add.w	r3, r7, #28
 8003a82:	4619      	mov	r1, r3
 8003a84:	4816      	ldr	r0, [pc, #88]	@ (8003ae0 <HAL_QSPI_MspInit+0x118>)
 8003a86:	f002 fe37 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a96:	2303      	movs	r3, #3
 8003a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a9a:	2309      	movs	r3, #9
 8003a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9e:	f107 031c 	add.w	r3, r7, #28
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	480e      	ldr	r0, [pc, #56]	@ (8003ae0 <HAL_QSPI_MspInit+0x118>)
 8003aa6:	f002 fe27 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003aaa:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003abc:	2309      	movs	r3, #9
 8003abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ac0:	f107 031c 	add.w	r3, r7, #28
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4807      	ldr	r0, [pc, #28]	@ (8003ae4 <HAL_QSPI_MspInit+0x11c>)
 8003ac8:	f002 fe16 	bl	80066f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8003acc:	bf00      	nop
 8003ace:	3730      	adds	r7, #48	@ 0x30
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	a0001000 	.word	0xa0001000
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40020400 	.word	0x40020400
 8003ae4:	40020c00 	.word	0x40020c00

08003ae8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b090      	sub	sp, #64	@ 0x40
 8003aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003aee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	60da      	str	r2, [r3, #12]
 8003afc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003afe:	2300      	movs	r3, #0
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003b02:	463b      	mov	r3, r7
 8003b04:	2228      	movs	r2, #40	@ 0x28
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f00f fe9f 	bl	801384c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003b0e:	4b46      	ldr	r3, [pc, #280]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003b10:	4a46      	ldr	r2, [pc, #280]	@ (8003c2c <MX_RTC_Init+0x144>)
 8003b12:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003b14:	4b44      	ldr	r3, [pc, #272]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003b1a:	4b43      	ldr	r3, [pc, #268]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003b1c:	227f      	movs	r2, #127	@ 0x7f
 8003b1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003b20:	4b41      	ldr	r3, [pc, #260]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003b22:	22ff      	movs	r2, #255	@ 0xff
 8003b24:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003b26:	4b40      	ldr	r3, [pc, #256]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003b32:	4b3d      	ldr	r3, [pc, #244]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003b38:	483b      	ldr	r0, [pc, #236]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003b3a:	f004 ff0f 	bl	800895c <HAL_RTC_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003b44:	f7ff ff0e 	bl	8003964 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003b62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b66:	2201      	movs	r2, #1
 8003b68:	4619      	mov	r1, r3
 8003b6a:	482f      	ldr	r0, [pc, #188]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003b6c:	f004 ff78 	bl	8008a60 <HAL_RTC_SetTime>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003b76:	f7ff fef5 	bl	8003964 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003b92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b96:	2201      	movs	r2, #1
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4823      	ldr	r0, [pc, #140]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003b9c:	f004 fffa 	bl	8008b94 <HAL_RTC_SetDate>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003ba6:	f7ff fedd 	bl	8003964 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003bda:	463b      	mov	r3, r7
 8003bdc:	2201      	movs	r2, #1
 8003bde:	4619      	mov	r1, r3
 8003be0:	4811      	ldr	r0, [pc, #68]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003be2:	f005 f85b 	bl	8008c9c <HAL_RTC_SetAlarm>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003bec:	f7ff feba 	bl	8003964 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8003bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003bf6:	463b      	mov	r3, r7
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	480a      	ldr	r0, [pc, #40]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003bfe:	f005 f84d 	bl	8008c9c <HAL_RTC_SetAlarm>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8003c08:	f7ff feac 	bl	8003964 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4805      	ldr	r0, [pc, #20]	@ (8003c28 <MX_RTC_Init+0x140>)
 8003c12:	f005 fa0d 	bl	8009030 <HAL_RTCEx_SetTimeStamp>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8003c1c:	f7ff fea2 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003c20:	bf00      	nop
 8003c22:	3740      	adds	r7, #64	@ 0x40
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20002cb0 	.word	0x20002cb0
 8003c2c:	40002800 	.word	0x40002800

08003c30 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b0a4      	sub	sp, #144	@ 0x90
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c38:	f107 030c 	add.w	r3, r7, #12
 8003c3c:	2284      	movs	r2, #132	@ 0x84
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f00f fe03 	bl	801384c <memset>
  if(rtcHandle->Instance==RTC)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003c84 <HAL_RTC_MspInit+0x54>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d114      	bne.n	8003c7a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c50:	2320      	movs	r3, #32
 8003c52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003c54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c5a:	f107 030c 	add.w	r3, r7, #12
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f004 f94c 	bl	8007efc <HAL_RCCEx_PeriphCLKConfig>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003c6a:	f7ff fe7b 	bl	8003964 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c6e:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <HAL_RTC_MspInit+0x58>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c72:	4a05      	ldr	r2, [pc, #20]	@ (8003c88 <HAL_RTC_MspInit+0x58>)
 8003c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c78:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	3790      	adds	r7, #144	@ 0x90
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40002800 	.word	0x40002800
 8003c88:	40023800 	.word	0x40023800

08003c8c <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8003c90:	4b4d      	ldr	r3, [pc, #308]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003c92:	4a4e      	ldr	r2, [pc, #312]	@ (8003dcc <MX_SAI2_Init+0x140>)
 8003c94:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003c96:	4b4c      	ldr	r3, [pc, #304]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8003c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8003ca2:	4b49      	ldr	r3, [pc, #292]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003ca4:	2240      	movs	r2, #64	@ 0x40
 8003ca6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003ca8:	4b47      	ldr	r3, [pc, #284]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003cae:	4b46      	ldr	r3, [pc, #280]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8003cb4:	4b44      	ldr	r3, [pc, #272]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003cba:	4b43      	ldr	r3, [pc, #268]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003cc0:	4b41      	ldr	r3, [pc, #260]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003cc6:	4b40      	ldr	r3, [pc, #256]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8003ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cce:	4a40      	ldr	r2, [pc, #256]	@ (8003dd0 <MX_SAI2_Init+0x144>)
 8003cd0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003cde:	4b3a      	ldr	r3, [pc, #232]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003ce4:	4b38      	ldr	r3, [pc, #224]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8003cea:	4b37      	ldr	r3, [pc, #220]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cec:	2208      	movs	r2, #8
 8003cee:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8003cf0:	4b35      	ldr	r3, [pc, #212]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003cf6:	4b34      	ldr	r3, [pc, #208]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003cfc:	4b32      	ldr	r3, [pc, #200]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003d02:	4b31      	ldr	r3, [pc, #196]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8003d08:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8003d14:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8003d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8003d20:	4829      	ldr	r0, [pc, #164]	@ (8003dc8 <MX_SAI2_Init+0x13c>)
 8003d22:	f005 f9ed 	bl	8009100 <HAL_SAI_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8003d2c:	f7ff fe1a 	bl	8003964 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8003d30:	4b28      	ldr	r3, [pc, #160]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d32:	4a29      	ldr	r2, [pc, #164]	@ (8003dd8 <MX_SAI2_Init+0x14c>)
 8003d34:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003d36:	4b27      	ldr	r3, [pc, #156]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8003d3c:	4b25      	ldr	r3, [pc, #148]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d3e:	2203      	movs	r2, #3
 8003d40:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8003d42:	4b24      	ldr	r3, [pc, #144]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d44:	2240      	movs	r2, #64	@ 0x40
 8003d46:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003d48:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003d4e:	4b21      	ldr	r3, [pc, #132]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8003d54:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003d60:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003d66:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8003d6c:	4b19      	ldr	r3, [pc, #100]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003d72:	4b18      	ldr	r3, [pc, #96]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003d78:	4b16      	ldr	r3, [pc, #88]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8003d7e:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d80:	2208      	movs	r2, #8
 8003d82:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8003d84:	4b13      	ldr	r3, [pc, #76]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003d8a:	4b12      	ldr	r3, [pc, #72]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003d90:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003d96:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8003d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003da2:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8003da8:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8003dae:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8003db4:	4807      	ldr	r0, [pc, #28]	@ (8003dd4 <MX_SAI2_Init+0x148>)
 8003db6:	f005 f9a3 	bl	8009100 <HAL_SAI_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8003dc0:	f7ff fdd0 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20002cd0 	.word	0x20002cd0
 8003dcc:	40015c04 	.word	0x40015c04
 8003dd0:	0002ee00 	.word	0x0002ee00
 8003dd4:	20002d54 	.word	0x20002d54
 8003dd8:	40015c24 	.word	0x40015c24

08003ddc <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	@ 0x28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e98 <HAL_SAI_MspInit+0xbc>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d124      	bne.n	8003e38 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8003dee:	4b2b      	ldr	r3, [pc, #172]	@ (8003e9c <HAL_SAI_MspInit+0xc0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10b      	bne.n	8003e0e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003df6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea0 <HAL_SAI_MspInit+0xc4>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	4a29      	ldr	r2, [pc, #164]	@ (8003ea0 <HAL_SAI_MspInit+0xc4>)
 8003dfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e02:	4b27      	ldr	r3, [pc, #156]	@ (8003ea0 <HAL_SAI_MspInit+0xc4>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003e0e:	4b23      	ldr	r3, [pc, #140]	@ (8003e9c <HAL_SAI_MspInit+0xc0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3301      	adds	r3, #1
 8003e14:	4a21      	ldr	r2, [pc, #132]	@ (8003e9c <HAL_SAI_MspInit+0xc0>)
 8003e16:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003e18:	23f0      	movs	r3, #240	@ 0xf0
 8003e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e24:	2300      	movs	r3, #0
 8003e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003e28:	230a      	movs	r3, #10
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	4619      	mov	r1, r3
 8003e32:	481c      	ldr	r0, [pc, #112]	@ (8003ea4 <HAL_SAI_MspInit+0xc8>)
 8003e34:	f002 fc60 	bl	80066f8 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea8 <HAL_SAI_MspInit+0xcc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d125      	bne.n	8003e8e <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8003e42:	4b16      	ldr	r3, [pc, #88]	@ (8003e9c <HAL_SAI_MspInit+0xc0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003e4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <HAL_SAI_MspInit+0xc4>)
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	4a14      	ldr	r2, [pc, #80]	@ (8003ea0 <HAL_SAI_MspInit+0xc4>)
 8003e50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e56:	4b12      	ldr	r3, [pc, #72]	@ (8003ea0 <HAL_SAI_MspInit+0xc4>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003e62:	4b0e      	ldr	r3, [pc, #56]	@ (8003e9c <HAL_SAI_MspInit+0xc0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	4a0c      	ldr	r2, [pc, #48]	@ (8003e9c <HAL_SAI_MspInit+0xc0>)
 8003e6a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e72:	2302      	movs	r3, #2
 8003e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003e7e:	230a      	movs	r3, #10
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	4619      	mov	r1, r3
 8003e88:	4808      	ldr	r0, [pc, #32]	@ (8003eac <HAL_SAI_MspInit+0xd0>)
 8003e8a:	f002 fc35 	bl	80066f8 <HAL_GPIO_Init>

    }
}
 8003e8e:	bf00      	nop
 8003e90:	3728      	adds	r7, #40	@ 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40015c04 	.word	0x40015c04
 8003e9c:	20002dd8 	.word	0x20002dd8
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40022000 	.word	0x40022000
 8003ea8:	40015c24 	.word	0x40015c24
 8003eac:	40021800 	.word	0x40021800

08003eb0 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003eec <MX_SDMMC1_SD_Init+0x3c>)
 8003eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef0 <MX_SDMMC1_SD_Init+0x40>)
 8003eb8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003eba:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <MX_SDMMC1_SD_Init+0x3c>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <MX_SDMMC1_SD_Init+0x3c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003ec6:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <MX_SDMMC1_SD_Init+0x3c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003ecc:	4b07      	ldr	r3, [pc, #28]	@ (8003eec <MX_SDMMC1_SD_Init+0x3c>)
 8003ece:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ed2:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003ed4:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <MX_SDMMC1_SD_Init+0x3c>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8003eda:	4b04      	ldr	r3, [pc, #16]	@ (8003eec <MX_SDMMC1_SD_Init+0x3c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20002ddc 	.word	0x20002ddc
 8003ef0:	40012c00 	.word	0x40012c00

08003ef4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	@ 0x28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a25      	ldr	r2, [pc, #148]	@ (8003fa8 <HAL_SD_MspInit+0xb4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d144      	bne.n	8003fa0 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003f16:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <HAL_SD_MspInit+0xb8>)
 8003f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1a:	4a24      	ldr	r2, [pc, #144]	@ (8003fac <HAL_SD_MspInit+0xb8>)
 8003f1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f22:	4b22      	ldr	r3, [pc, #136]	@ (8003fac <HAL_SD_MspInit+0xb8>)
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8003fac <HAL_SD_MspInit+0xb8>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	4a1e      	ldr	r2, [pc, #120]	@ (8003fac <HAL_SD_MspInit+0xb8>)
 8003f34:	f043 0304 	orr.w	r3, r3, #4
 8003f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fac <HAL_SD_MspInit+0xb8>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f46:	4b19      	ldr	r3, [pc, #100]	@ (8003fac <HAL_SD_MspInit+0xb8>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	4a18      	ldr	r2, [pc, #96]	@ (8003fac <HAL_SD_MspInit+0xb8>)
 8003f4c:	f043 0308 	orr.w	r3, r3, #8
 8003f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f52:	4b16      	ldr	r3, [pc, #88]	@ (8003fac <HAL_SD_MspInit+0xb8>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003f5e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003f62:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f64:	2302      	movs	r3, #2
 8003f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003f70:	230c      	movs	r3, #12
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	4619      	mov	r1, r3
 8003f7a:	480d      	ldr	r0, [pc, #52]	@ (8003fb0 <HAL_SD_MspInit+0xbc>)
 8003f7c:	f002 fbbc 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003f80:	2304      	movs	r3, #4
 8003f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	2302      	movs	r3, #2
 8003f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003f90:	230c      	movs	r3, #12
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4806      	ldr	r0, [pc, #24]	@ (8003fb4 <HAL_SD_MspInit+0xc0>)
 8003f9c:	f002 fbac 	bl	80066f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	3728      	adds	r7, #40	@ 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40020800 	.word	0x40020800
 8003fb4:	40020c00 	.word	0x40020c00

08003fb8 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8003fbc:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8003fbe:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003fc2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8003fc4:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8003fca:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8003fd0:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8003fee:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8003ff4:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8003ffa:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8004000:	4804      	ldr	r0, [pc, #16]	@ (8004014 <MX_SPDIFRX_Init+0x5c>)
 8004002:	f006 fb01 	bl	800a608 <HAL_SPDIFRX_Init>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800400c:	f7ff fcaa 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20002e60 	.word	0x20002e60

08004018 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b0aa      	sub	sp, #168	@ 0xa8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004020:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
 800402e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004030:	f107 0310 	add.w	r3, r7, #16
 8004034:	2284      	movs	r2, #132	@ 0x84
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f00f fc07 	bl	801384c <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8004046:	d143      	bne.n	80040d0 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004048:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800404c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800404e:	2364      	movs	r3, #100	@ 0x64
 8004050:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8004052:	2302      	movs	r3, #2
 8004054:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004056:	2302      	movs	r3, #2
 8004058:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800405a:	2302      	movs	r3, #2
 800405c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800405e:	2301      	movs	r3, #1
 8004060:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004062:	f107 0310 	add.w	r3, r7, #16
 8004066:	4618      	mov	r0, r3
 8004068:	f003 ff48 	bl	8007efc <HAL_RCCEx_PeriphCLKConfig>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8004072:	f7ff fc77 	bl	8003964 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8004076:	4b18      	ldr	r3, [pc, #96]	@ (80040d8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	4a17      	ldr	r2, [pc, #92]	@ (80040d8 <HAL_SPDIFRX_MspInit+0xc0>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004080:	6413      	str	r3, [r2, #64]	@ 0x40
 8004082:	4b15      	ldr	r3, [pc, #84]	@ (80040d8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800408e:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	4a11      	ldr	r2, [pc, #68]	@ (80040d8 <HAL_SPDIFRX_MspInit+0xc0>)
 8004094:	f043 0308 	orr.w	r3, r3, #8
 8004098:	6313      	str	r3, [r2, #48]	@ 0x30
 800409a:	4b0f      	ldr	r3, [pc, #60]	@ (80040d8 <HAL_SPDIFRX_MspInit+0xc0>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80040a6:	2380      	movs	r3, #128	@ 0x80
 80040a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	2302      	movs	r3, #2
 80040ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b8:	2300      	movs	r3, #0
 80040ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80040be:	2308      	movs	r3, #8
 80040c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80040c4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80040c8:	4619      	mov	r1, r3
 80040ca:	4804      	ldr	r0, [pc, #16]	@ (80040dc <HAL_SPDIFRX_MspInit+0xc4>)
 80040cc:	f002 fb14 	bl	80066f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 80040d0:	bf00      	nop
 80040d2:	37a8      	adds	r7, #168	@ 0xa8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40020c00 	.word	0x40020c00

080040e0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80040e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004154 <MX_SPI2_Init+0x74>)
 80040e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004158 <MX_SPI2_Init+0x78>)
 80040e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80040ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004154 <MX_SPI2_Init+0x74>)
 80040ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80040f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040f2:	4b18      	ldr	r3, [pc, #96]	@ (8004154 <MX_SPI2_Init+0x74>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040f8:	4b16      	ldr	r3, [pc, #88]	@ (8004154 <MX_SPI2_Init+0x74>)
 80040fa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80040fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004100:	4b14      	ldr	r3, [pc, #80]	@ (8004154 <MX_SPI2_Init+0x74>)
 8004102:	2200      	movs	r2, #0
 8004104:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004106:	4b13      	ldr	r3, [pc, #76]	@ (8004154 <MX_SPI2_Init+0x74>)
 8004108:	2200      	movs	r2, #0
 800410a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800410c:	4b11      	ldr	r3, [pc, #68]	@ (8004154 <MX_SPI2_Init+0x74>)
 800410e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004112:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004114:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <MX_SPI2_Init+0x74>)
 8004116:	2218      	movs	r2, #24
 8004118:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800411a:	4b0e      	ldr	r3, [pc, #56]	@ (8004154 <MX_SPI2_Init+0x74>)
 800411c:	2200      	movs	r2, #0
 800411e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004120:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <MX_SPI2_Init+0x74>)
 8004122:	2200      	movs	r2, #0
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004126:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <MX_SPI2_Init+0x74>)
 8004128:	2200      	movs	r2, #0
 800412a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800412c:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <MX_SPI2_Init+0x74>)
 800412e:	2207      	movs	r2, #7
 8004130:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004132:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <MX_SPI2_Init+0x74>)
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004138:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <MX_SPI2_Init+0x74>)
 800413a:	2200      	movs	r2, #0
 800413c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800413e:	4805      	ldr	r0, [pc, #20]	@ (8004154 <MX_SPI2_Init+0x74>)
 8004140:	f006 fabe 	bl	800a6c0 <HAL_SPI_Init>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800414a:	f7ff fc0b 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20002eac 	.word	0x20002eac
 8004158:	40003800 	.word	0x40003800

0800415c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	@ 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a25      	ldr	r2, [pc, #148]	@ (8004210 <HAL_SPI_MspInit+0xb4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d144      	bne.n	8004208 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800417e:	4b25      	ldr	r3, [pc, #148]	@ (8004214 <HAL_SPI_MspInit+0xb8>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004182:	4a24      	ldr	r2, [pc, #144]	@ (8004214 <HAL_SPI_MspInit+0xb8>)
 8004184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004188:	6413      	str	r3, [r2, #64]	@ 0x40
 800418a:	4b22      	ldr	r3, [pc, #136]	@ (8004214 <HAL_SPI_MspInit+0xb8>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004196:	4b1f      	ldr	r3, [pc, #124]	@ (8004214 <HAL_SPI_MspInit+0xb8>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	4a1e      	ldr	r2, [pc, #120]	@ (8004214 <HAL_SPI_MspInit+0xb8>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004214 <HAL_SPI_MspInit+0xb8>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ae:	4b19      	ldr	r3, [pc, #100]	@ (8004214 <HAL_SPI_MspInit+0xb8>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	4a18      	ldr	r2, [pc, #96]	@ (8004214 <HAL_SPI_MspInit+0xb8>)
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ba:	4b16      	ldr	r3, [pc, #88]	@ (8004214 <HAL_SPI_MspInit+0xb8>)
 80041bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LORA_SCK_Pin;
 80041c6:	2302      	movs	r3, #2
 80041c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ca:	2302      	movs	r3, #2
 80041cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d2:	2303      	movs	r3, #3
 80041d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041d6:	2305      	movs	r3, #5
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LORA_SCK_GPIO_Port, &GPIO_InitStruct);
 80041da:	f107 0314 	add.w	r3, r7, #20
 80041de:	4619      	mov	r1, r3
 80041e0:	480d      	ldr	r0, [pc, #52]	@ (8004218 <HAL_SPI_MspInit+0xbc>)
 80041e2:	f002 fa89 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_MISO_Pin|LORA_MOSI_Pin;
 80041e6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80041ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ec:	2302      	movs	r3, #2
 80041ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f4:	2303      	movs	r3, #3
 80041f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041f8:	2305      	movs	r3, #5
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041fc:	f107 0314 	add.w	r3, r7, #20
 8004200:	4619      	mov	r1, r3
 8004202:	4806      	ldr	r0, [pc, #24]	@ (800421c <HAL_SPI_MspInit+0xc0>)
 8004204:	f002 fa78 	bl	80066f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004208:	bf00      	nop
 800420a:	3728      	adds	r7, #40	@ 0x28
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40003800 	.word	0x40003800
 8004214:	40023800 	.word	0x40023800
 8004218:	40022000 	.word	0x40022000
 800421c:	40020400 	.word	0x40020400

08004220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004226:	4b11      	ldr	r3, [pc, #68]	@ (800426c <HAL_MspInit+0x4c>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	4a10      	ldr	r2, [pc, #64]	@ (800426c <HAL_MspInit+0x4c>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004230:	6413      	str	r3, [r2, #64]	@ 0x40
 8004232:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <HAL_MspInit+0x4c>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800423e:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <HAL_MspInit+0x4c>)
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	4a0a      	ldr	r2, [pc, #40]	@ (800426c <HAL_MspInit+0x4c>)
 8004244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004248:	6453      	str	r3, [r2, #68]	@ 0x44
 800424a:	4b08      	ldr	r3, [pc, #32]	@ (800426c <HAL_MspInit+0x4c>)
 800424c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004256:	2200      	movs	r2, #0
 8004258:	210f      	movs	r1, #15
 800425a:	f06f 0001 	mvn.w	r0, #1
 800425e:	f001 fa4f 	bl	8005700 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800

08004270 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08e      	sub	sp, #56	@ 0x38
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004280:	4b33      	ldr	r3, [pc, #204]	@ (8004350 <HAL_InitTick+0xe0>)
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	4a32      	ldr	r2, [pc, #200]	@ (8004350 <HAL_InitTick+0xe0>)
 8004286:	f043 0310 	orr.w	r3, r3, #16
 800428a:	6413      	str	r3, [r2, #64]	@ 0x40
 800428c:	4b30      	ldr	r3, [pc, #192]	@ (8004350 <HAL_InitTick+0xe0>)
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004298:	f107 0210 	add.w	r2, r7, #16
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 fdf8 	bl	8007e98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d103      	bne.n	80042ba <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80042b2:	f003 fdc9 	bl	8007e48 <HAL_RCC_GetPCLK1Freq>
 80042b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80042b8:	e004      	b.n	80042c4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80042ba:	f003 fdc5 	bl	8007e48 <HAL_RCC_GetPCLK1Freq>
 80042be:	4603      	mov	r3, r0
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c6:	4a23      	ldr	r2, [pc, #140]	@ (8004354 <HAL_InitTick+0xe4>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	0c9b      	lsrs	r3, r3, #18
 80042ce:	3b01      	subs	r3, #1
 80042d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80042d2:	4b21      	ldr	r3, [pc, #132]	@ (8004358 <HAL_InitTick+0xe8>)
 80042d4:	4a21      	ldr	r2, [pc, #132]	@ (800435c <HAL_InitTick+0xec>)
 80042d6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80042d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004358 <HAL_InitTick+0xe8>)
 80042da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80042de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80042e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004358 <HAL_InitTick+0xe8>)
 80042e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80042e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004358 <HAL_InitTick+0xe8>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <HAL_InitTick+0xe8>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042f2:	4b19      	ldr	r3, [pc, #100]	@ (8004358 <HAL_InitTick+0xe8>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80042f8:	4817      	ldr	r0, [pc, #92]	@ (8004358 <HAL_InitTick+0xe8>)
 80042fa:	f007 f96b 	bl	800b5d4 <HAL_TIM_Base_Init>
 80042fe:	4603      	mov	r3, r0
 8004300:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004304:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004308:	2b00      	cmp	r3, #0
 800430a:	d11b      	bne.n	8004344 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800430c:	4812      	ldr	r0, [pc, #72]	@ (8004358 <HAL_InitTick+0xe8>)
 800430e:	f007 f9b9 	bl	800b684 <HAL_TIM_Base_Start_IT>
 8004312:	4603      	mov	r3, r0
 8004314:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004318:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800431c:	2b00      	cmp	r3, #0
 800431e:	d111      	bne.n	8004344 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004320:	2036      	movs	r0, #54	@ 0x36
 8004322:	f001 fa09 	bl	8005738 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b0f      	cmp	r3, #15
 800432a:	d808      	bhi.n	800433e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800432c:	2200      	movs	r2, #0
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	2036      	movs	r0, #54	@ 0x36
 8004332:	f001 f9e5 	bl	8005700 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004336:	4a0a      	ldr	r2, [pc, #40]	@ (8004360 <HAL_InitTick+0xf0>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	e002      	b.n	8004344 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004344:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004348:	4618      	mov	r0, r3
 800434a:	3738      	adds	r7, #56	@ 0x38
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40023800 	.word	0x40023800
 8004354:	431bde83 	.word	0x431bde83
 8004358:	20002f10 	.word	0x20002f10
 800435c:	40001000 	.word	0x40001000
 8004360:	20000008 	.word	0x20000008

08004364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <NMI_Handler+0x4>

0800436c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004370:	bf00      	nop
 8004372:	e7fd      	b.n	8004370 <HardFault_Handler+0x4>

08004374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004378:	bf00      	nop
 800437a:	e7fd      	b.n	8004378 <MemManage_Handler+0x4>

0800437c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <BusFault_Handler+0x4>

08004384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <UsageFault_Handler+0x4>

0800438c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80043a0:	4802      	ldr	r0, [pc, #8]	@ (80043ac <TIM6_DAC_IRQHandler+0x10>)
 80043a2:	f007 fa3e 	bl	800b822 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20002f10 	.word	0x20002f10

080043b0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80043b4:	4802      	ldr	r0, [pc, #8]	@ (80043c0 <USART6_IRQHandler+0x10>)
 80043b6:	f008 fb25 	bl	800ca04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	200031b0 	.word	0x200031b0

080043c4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80043c8:	4802      	ldr	r0, [pc, #8]	@ (80043d4 <LTDC_IRQHandler+0x10>)
 80043ca:	f002 fd43 	bl	8006e54 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20002bbc 	.word	0x20002bbc

080043d8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80043dc:	4802      	ldr	r0, [pc, #8]	@ (80043e8 <DMA2D_IRQHandler+0x10>)
 80043de:	f001 fc9b 	bl	8005d18 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200003f8 	.word	0x200003f8

080043ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return 1;
 80043f0:	2301      	movs	r3, #1
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <_kill>:

int _kill(int pid, int sig)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004406:	f00f fb4d 	bl	8013aa4 <__errno>
 800440a:	4603      	mov	r3, r0
 800440c:	2216      	movs	r2, #22
 800440e:	601a      	str	r2, [r3, #0]
  return -1;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <_exit>:

void _exit (int status)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004424:	f04f 31ff 	mov.w	r1, #4294967295
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff ffe7 	bl	80043fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800442e:	bf00      	nop
 8004430:	e7fd      	b.n	800442e <_exit+0x12>

08004432 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	e00a      	b.n	800445a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004444:	f3af 8000 	nop.w
 8004448:	4601      	mov	r1, r0
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	60ba      	str	r2, [r7, #8]
 8004450:	b2ca      	uxtb	r2, r1
 8004452:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	3301      	adds	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	429a      	cmp	r2, r3
 8004460:	dbf0      	blt.n	8004444 <_read+0x12>
  }

  return len;
 8004462:	687b      	ldr	r3, [r7, #4]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e009      	b.n	8004492 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	60ba      	str	r2, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff f95e 	bl	8003748 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	3301      	adds	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	429a      	cmp	r2, r3
 8004498:	dbf1      	blt.n	800447e <_write+0x12>
  }
  return len;
 800449a:	687b      	ldr	r3, [r7, #4]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <_close>:

int _close(int file)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044cc:	605a      	str	r2, [r3, #4]
  return 0;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <_isatty>:

int _isatty(int file)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044e4:	2301      	movs	r3, #1
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004514:	4a14      	ldr	r2, [pc, #80]	@ (8004568 <_sbrk+0x5c>)
 8004516:	4b15      	ldr	r3, [pc, #84]	@ (800456c <_sbrk+0x60>)
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004520:	4b13      	ldr	r3, [pc, #76]	@ (8004570 <_sbrk+0x64>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d102      	bne.n	800452e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004528:	4b11      	ldr	r3, [pc, #68]	@ (8004570 <_sbrk+0x64>)
 800452a:	4a12      	ldr	r2, [pc, #72]	@ (8004574 <_sbrk+0x68>)
 800452c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800452e:	4b10      	ldr	r3, [pc, #64]	@ (8004570 <_sbrk+0x64>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4413      	add	r3, r2
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	429a      	cmp	r2, r3
 800453a:	d207      	bcs.n	800454c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800453c:	f00f fab2 	bl	8013aa4 <__errno>
 8004540:	4603      	mov	r3, r0
 8004542:	220c      	movs	r2, #12
 8004544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	e009      	b.n	8004560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800454c:	4b08      	ldr	r3, [pc, #32]	@ (8004570 <_sbrk+0x64>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004552:	4b07      	ldr	r3, [pc, #28]	@ (8004570 <_sbrk+0x64>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	4a05      	ldr	r2, [pc, #20]	@ (8004570 <_sbrk+0x64>)
 800455c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800455e:	68fb      	ldr	r3, [r7, #12]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20050000 	.word	0x20050000
 800456c:	00000400 	.word	0x00000400
 8004570:	20002f5c 	.word	0x20002f5c
 8004574:	2000b4f0 	.word	0x2000b4f0

08004578 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800457c:	4b06      	ldr	r3, [pc, #24]	@ (8004598 <SystemInit+0x20>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004582:	4a05      	ldr	r2, [pc, #20]	@ (8004598 <SystemInit+0x20>)
 8004584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b09a      	sub	sp, #104	@ 0x68
 80045a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045a2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	611a      	str	r2, [r3, #16]
 80045cc:	615a      	str	r2, [r3, #20]
 80045ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	222c      	movs	r2, #44	@ 0x2c
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f00f f938 	bl	801384c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80045dc:	4b43      	ldr	r3, [pc, #268]	@ (80046ec <MX_TIM1_Init+0x150>)
 80045de:	4a44      	ldr	r2, [pc, #272]	@ (80046f0 <MX_TIM1_Init+0x154>)
 80045e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80045e2:	4b42      	ldr	r3, [pc, #264]	@ (80046ec <MX_TIM1_Init+0x150>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045e8:	4b40      	ldr	r3, [pc, #256]	@ (80046ec <MX_TIM1_Init+0x150>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80045ee:	4b3f      	ldr	r3, [pc, #252]	@ (80046ec <MX_TIM1_Init+0x150>)
 80045f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045f6:	4b3d      	ldr	r3, [pc, #244]	@ (80046ec <MX_TIM1_Init+0x150>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80045fc:	4b3b      	ldr	r3, [pc, #236]	@ (80046ec <MX_TIM1_Init+0x150>)
 80045fe:	2200      	movs	r2, #0
 8004600:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004602:	4b3a      	ldr	r3, [pc, #232]	@ (80046ec <MX_TIM1_Init+0x150>)
 8004604:	2200      	movs	r2, #0
 8004606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004608:	4838      	ldr	r0, [pc, #224]	@ (80046ec <MX_TIM1_Init+0x150>)
 800460a:	f006 ffe3 	bl	800b5d4 <HAL_TIM_Base_Init>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004614:	f7ff f9a6 	bl	8003964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800461c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800461e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004622:	4619      	mov	r1, r3
 8004624:	4831      	ldr	r0, [pc, #196]	@ (80046ec <MX_TIM1_Init+0x150>)
 8004626:	f007 fb17 	bl	800bc58 <HAL_TIM_ConfigClockSource>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004630:	f7ff f998 	bl	8003964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004634:	482d      	ldr	r0, [pc, #180]	@ (80046ec <MX_TIM1_Init+0x150>)
 8004636:	f007 f89d 	bl	800b774 <HAL_TIM_PWM_Init>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004640:	f7ff f990 	bl	8003964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004644:	2300      	movs	r3, #0
 8004646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004648:	2300      	movs	r3, #0
 800464a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800464c:	2300      	movs	r3, #0
 800464e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004650:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004654:	4619      	mov	r1, r3
 8004656:	4825      	ldr	r0, [pc, #148]	@ (80046ec <MX_TIM1_Init+0x150>)
 8004658:	f007 ff8e 	bl	800c578 <HAL_TIMEx_MasterConfigSynchronization>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004662:	f7ff f97f 	bl	8003964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004666:	2360      	movs	r3, #96	@ 0x60
 8004668:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800466e:	2300      	movs	r3, #0
 8004670:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004672:	2300      	movs	r3, #0
 8004674:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004676:	2300      	movs	r3, #0
 8004678:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800467e:	2300      	movs	r3, #0
 8004680:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004682:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004686:	2200      	movs	r2, #0
 8004688:	4619      	mov	r1, r3
 800468a:	4818      	ldr	r0, [pc, #96]	@ (80046ec <MX_TIM1_Init+0x150>)
 800468c:	f007 f9d0 	bl	800ba30 <HAL_TIM_PWM_ConfigChannel>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8004696:	f7ff f965 	bl	8003964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800469a:	2300      	movs	r3, #0
 800469c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80046ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80046bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80046ca:	1d3b      	adds	r3, r7, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4807      	ldr	r0, [pc, #28]	@ (80046ec <MX_TIM1_Init+0x150>)
 80046d0:	f007 ffe0 	bl	800c694 <HAL_TIMEx_ConfigBreakDeadTime>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80046da:	f7ff f943 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80046de:	4803      	ldr	r0, [pc, #12]	@ (80046ec <MX_TIM1_Init+0x150>)
 80046e0:	f000 fa6c 	bl	8004bbc <HAL_TIM_MspPostInit>

}
 80046e4:	bf00      	nop
 80046e6:	3768      	adds	r7, #104	@ 0x68
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20002f60 	.word	0x20002f60
 80046f0:	40010000 	.word	0x40010000

080046f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08e      	sub	sp, #56	@ 0x38
 80046f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	609a      	str	r2, [r3, #8]
 8004706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004708:	f107 031c 	add.w	r3, r7, #28
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004714:	463b      	mov	r3, r7
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	609a      	str	r2, [r3, #8]
 800471e:	60da      	str	r2, [r3, #12]
 8004720:	611a      	str	r2, [r3, #16]
 8004722:	615a      	str	r2, [r3, #20]
 8004724:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004726:	4b2d      	ldr	r3, [pc, #180]	@ (80047dc <MX_TIM2_Init+0xe8>)
 8004728:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800472c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800472e:	4b2b      	ldr	r3, [pc, #172]	@ (80047dc <MX_TIM2_Init+0xe8>)
 8004730:	2200      	movs	r2, #0
 8004732:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004734:	4b29      	ldr	r3, [pc, #164]	@ (80047dc <MX_TIM2_Init+0xe8>)
 8004736:	2200      	movs	r2, #0
 8004738:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800473a:	4b28      	ldr	r3, [pc, #160]	@ (80047dc <MX_TIM2_Init+0xe8>)
 800473c:	f04f 32ff 	mov.w	r2, #4294967295
 8004740:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004742:	4b26      	ldr	r3, [pc, #152]	@ (80047dc <MX_TIM2_Init+0xe8>)
 8004744:	2200      	movs	r2, #0
 8004746:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004748:	4b24      	ldr	r3, [pc, #144]	@ (80047dc <MX_TIM2_Init+0xe8>)
 800474a:	2200      	movs	r2, #0
 800474c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800474e:	4823      	ldr	r0, [pc, #140]	@ (80047dc <MX_TIM2_Init+0xe8>)
 8004750:	f006 ff40 	bl	800b5d4 <HAL_TIM_Base_Init>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800475a:	f7ff f903 	bl	8003964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800475e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004762:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004764:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004768:	4619      	mov	r1, r3
 800476a:	481c      	ldr	r0, [pc, #112]	@ (80047dc <MX_TIM2_Init+0xe8>)
 800476c:	f007 fa74 	bl	800bc58 <HAL_TIM_ConfigClockSource>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004776:	f7ff f8f5 	bl	8003964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800477a:	4818      	ldr	r0, [pc, #96]	@ (80047dc <MX_TIM2_Init+0xe8>)
 800477c:	f006 fffa 	bl	800b774 <HAL_TIM_PWM_Init>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004786:	f7ff f8ed 	bl	8003964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800478e:	2300      	movs	r3, #0
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004792:	f107 031c 	add.w	r3, r7, #28
 8004796:	4619      	mov	r1, r3
 8004798:	4810      	ldr	r0, [pc, #64]	@ (80047dc <MX_TIM2_Init+0xe8>)
 800479a:	f007 feed 	bl	800c578 <HAL_TIMEx_MasterConfigSynchronization>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80047a4:	f7ff f8de 	bl	8003964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047a8:	2360      	movs	r3, #96	@ 0x60
 80047aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047b8:	463b      	mov	r3, r7
 80047ba:	2200      	movs	r2, #0
 80047bc:	4619      	mov	r1, r3
 80047be:	4807      	ldr	r0, [pc, #28]	@ (80047dc <MX_TIM2_Init+0xe8>)
 80047c0:	f007 f936 	bl	800ba30 <HAL_TIM_PWM_ConfigChannel>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80047ca:	f7ff f8cb 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80047ce:	4803      	ldr	r0, [pc, #12]	@ (80047dc <MX_TIM2_Init+0xe8>)
 80047d0:	f000 f9f4 	bl	8004bbc <HAL_TIM_MspPostInit>

}
 80047d4:	bf00      	nop
 80047d6:	3738      	adds	r7, #56	@ 0x38
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20002fac 	.word	0x20002fac

080047e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08e      	sub	sp, #56	@ 0x38
 80047e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	605a      	str	r2, [r3, #4]
 80047f0:	609a      	str	r2, [r3, #8]
 80047f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047f4:	f107 031c 	add.w	r3, r7, #28
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004800:	463b      	mov	r3, r7
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	60da      	str	r2, [r3, #12]
 800480c:	611a      	str	r2, [r3, #16]
 800480e:	615a      	str	r2, [r3, #20]
 8004810:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004812:	4b2d      	ldr	r3, [pc, #180]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 8004814:	4a2d      	ldr	r2, [pc, #180]	@ (80048cc <MX_TIM3_Init+0xec>)
 8004816:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004818:	4b2b      	ldr	r3, [pc, #172]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 800481a:	2200      	movs	r2, #0
 800481c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800481e:	4b2a      	ldr	r3, [pc, #168]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 8004820:	2200      	movs	r2, #0
 8004822:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004824:	4b28      	ldr	r3, [pc, #160]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 8004826:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800482a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800482c:	4b26      	ldr	r3, [pc, #152]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004832:	4b25      	ldr	r3, [pc, #148]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 8004834:	2200      	movs	r2, #0
 8004836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004838:	4823      	ldr	r0, [pc, #140]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 800483a:	f006 fecb 	bl	800b5d4 <HAL_TIM_Base_Init>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004844:	f7ff f88e 	bl	8003964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800484c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800484e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004852:	4619      	mov	r1, r3
 8004854:	481c      	ldr	r0, [pc, #112]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 8004856:	f007 f9ff 	bl	800bc58 <HAL_TIM_ConfigClockSource>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004860:	f7ff f880 	bl	8003964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004864:	4818      	ldr	r0, [pc, #96]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 8004866:	f006 ff85 	bl	800b774 <HAL_TIM_PWM_Init>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004870:	f7ff f878 	bl	8003964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004878:	2300      	movs	r3, #0
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800487c:	f107 031c 	add.w	r3, r7, #28
 8004880:	4619      	mov	r1, r3
 8004882:	4811      	ldr	r0, [pc, #68]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 8004884:	f007 fe78 	bl	800c578 <HAL_TIMEx_MasterConfigSynchronization>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800488e:	f7ff f869 	bl	8003964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004892:	2360      	movs	r3, #96	@ 0x60
 8004894:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800489e:	2300      	movs	r3, #0
 80048a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048a2:	463b      	mov	r3, r7
 80048a4:	2200      	movs	r2, #0
 80048a6:	4619      	mov	r1, r3
 80048a8:	4807      	ldr	r0, [pc, #28]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 80048aa:	f007 f8c1 	bl	800ba30 <HAL_TIM_PWM_ConfigChannel>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80048b4:	f7ff f856 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80048b8:	4803      	ldr	r0, [pc, #12]	@ (80048c8 <MX_TIM3_Init+0xe8>)
 80048ba:	f000 f97f 	bl	8004bbc <HAL_TIM_MspPostInit>

}
 80048be:	bf00      	nop
 80048c0:	3738      	adds	r7, #56	@ 0x38
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20002ff8 	.word	0x20002ff8
 80048cc:	40000400 	.word	0x40000400

080048d0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048d6:	f107 0310 	add.w	r3, r7, #16
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	605a      	str	r2, [r3, #4]
 80048e0:	609a      	str	r2, [r3, #8]
 80048e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80048ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004964 <MX_TIM5_Init+0x94>)
 80048f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004968 <MX_TIM5_Init+0x98>)
 80048f2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80048f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004964 <MX_TIM5_Init+0x94>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004964 <MX_TIM5_Init+0x94>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004900:	4b18      	ldr	r3, [pc, #96]	@ (8004964 <MX_TIM5_Init+0x94>)
 8004902:	f04f 32ff 	mov.w	r2, #4294967295
 8004906:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004908:	4b16      	ldr	r3, [pc, #88]	@ (8004964 <MX_TIM5_Init+0x94>)
 800490a:	2200      	movs	r2, #0
 800490c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800490e:	4b15      	ldr	r3, [pc, #84]	@ (8004964 <MX_TIM5_Init+0x94>)
 8004910:	2200      	movs	r2, #0
 8004912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004914:	4813      	ldr	r0, [pc, #76]	@ (8004964 <MX_TIM5_Init+0x94>)
 8004916:	f006 fe5d 	bl	800b5d4 <HAL_TIM_Base_Init>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004920:	f7ff f820 	bl	8003964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004928:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800492a:	f107 0310 	add.w	r3, r7, #16
 800492e:	4619      	mov	r1, r3
 8004930:	480c      	ldr	r0, [pc, #48]	@ (8004964 <MX_TIM5_Init+0x94>)
 8004932:	f007 f991 	bl	800bc58 <HAL_TIM_ConfigClockSource>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800493c:	f7ff f812 	bl	8003964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004940:	2300      	movs	r3, #0
 8004942:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004948:	1d3b      	adds	r3, r7, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4805      	ldr	r0, [pc, #20]	@ (8004964 <MX_TIM5_Init+0x94>)
 800494e:	f007 fe13 	bl	800c578 <HAL_TIMEx_MasterConfigSynchronization>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004958:	f7ff f804 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800495c:	bf00      	nop
 800495e:	3720      	adds	r7, #32
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20003044 	.word	0x20003044
 8004968:	40000c00 	.word	0x40000c00

0800496c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004972:	f107 0310 	add.w	r3, r7, #16
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	605a      	str	r2, [r3, #4]
 800497c:	609a      	str	r2, [r3, #8]
 800497e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
 8004988:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800498a:	4b20      	ldr	r3, [pc, #128]	@ (8004a0c <MX_TIM8_Init+0xa0>)
 800498c:	4a20      	ldr	r2, [pc, #128]	@ (8004a10 <MX_TIM8_Init+0xa4>)
 800498e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004990:	4b1e      	ldr	r3, [pc, #120]	@ (8004a0c <MX_TIM8_Init+0xa0>)
 8004992:	2200      	movs	r2, #0
 8004994:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004996:	4b1d      	ldr	r3, [pc, #116]	@ (8004a0c <MX_TIM8_Init+0xa0>)
 8004998:	2200      	movs	r2, #0
 800499a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800499c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a0c <MX_TIM8_Init+0xa0>)
 800499e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049a4:	4b19      	ldr	r3, [pc, #100]	@ (8004a0c <MX_TIM8_Init+0xa0>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80049aa:	4b18      	ldr	r3, [pc, #96]	@ (8004a0c <MX_TIM8_Init+0xa0>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049b0:	4b16      	ldr	r3, [pc, #88]	@ (8004a0c <MX_TIM8_Init+0xa0>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80049b6:	4815      	ldr	r0, [pc, #84]	@ (8004a0c <MX_TIM8_Init+0xa0>)
 80049b8:	f006 fe0c 	bl	800b5d4 <HAL_TIM_Base_Init>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80049c2:	f7fe ffcf 	bl	8003964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80049cc:	f107 0310 	add.w	r3, r7, #16
 80049d0:	4619      	mov	r1, r3
 80049d2:	480e      	ldr	r0, [pc, #56]	@ (8004a0c <MX_TIM8_Init+0xa0>)
 80049d4:	f007 f940 	bl	800bc58 <HAL_TIM_ConfigClockSource>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80049de:	f7fe ffc1 	bl	8003964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80049ee:	1d3b      	adds	r3, r7, #4
 80049f0:	4619      	mov	r1, r3
 80049f2:	4806      	ldr	r0, [pc, #24]	@ (8004a0c <MX_TIM8_Init+0xa0>)
 80049f4:	f007 fdc0 	bl	800c578 <HAL_TIMEx_MasterConfigSynchronization>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80049fe:	f7fe ffb1 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004a02:	bf00      	nop
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20003090 	.word	0x20003090
 8004a10:	40010400 	.word	0x40010400

08004a14 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a1a:	1d3b      	adds	r3, r7, #4
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	611a      	str	r2, [r3, #16]
 8004a28:	615a      	str	r2, [r3, #20]
 8004a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004a98 <MX_TIM12_Init+0x84>)
 8004a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004a9c <MX_TIM12_Init+0x88>)
 8004a30:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8004a32:	4b19      	ldr	r3, [pc, #100]	@ (8004a98 <MX_TIM12_Init+0x84>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a38:	4b17      	ldr	r3, [pc, #92]	@ (8004a98 <MX_TIM12_Init+0x84>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8004a3e:	4b16      	ldr	r3, [pc, #88]	@ (8004a98 <MX_TIM12_Init+0x84>)
 8004a40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a44:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a46:	4b14      	ldr	r3, [pc, #80]	@ (8004a98 <MX_TIM12_Init+0x84>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a4c:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <MX_TIM12_Init+0x84>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004a52:	4811      	ldr	r0, [pc, #68]	@ (8004a98 <MX_TIM12_Init+0x84>)
 8004a54:	f006 fe8e 	bl	800b774 <HAL_TIM_PWM_Init>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8004a5e:	f7fe ff81 	bl	8003964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a62:	2360      	movs	r3, #96	@ 0x60
 8004a64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	2200      	movs	r2, #0
 8004a76:	4619      	mov	r1, r3
 8004a78:	4807      	ldr	r0, [pc, #28]	@ (8004a98 <MX_TIM12_Init+0x84>)
 8004a7a:	f006 ffd9 	bl	800ba30 <HAL_TIM_PWM_ConfigChannel>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8004a84:	f7fe ff6e 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004a88:	4803      	ldr	r0, [pc, #12]	@ (8004a98 <MX_TIM12_Init+0x84>)
 8004a8a:	f000 f897 	bl	8004bbc <HAL_TIM_MspPostInit>

}
 8004a8e:	bf00      	nop
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	200030dc 	.word	0x200030dc
 8004a9c:	40001800 	.word	0x40001800

08004aa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b089      	sub	sp, #36	@ 0x24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2e      	ldr	r2, [pc, #184]	@ (8004b68 <HAL_TIM_Base_MspInit+0xc8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d10c      	bne.n	8004acc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004abe:	4b2b      	ldr	r3, [pc, #172]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004aca:	e046      	b.n	8004b5a <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad4:	d10c      	bne.n	8004af0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ad6:	4b25      	ldr	r3, [pc, #148]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	4a24      	ldr	r2, [pc, #144]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ae2:	4b22      	ldr	r3, [pc, #136]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	69bb      	ldr	r3, [r7, #24]
}
 8004aee:	e034      	b.n	8004b5a <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1e      	ldr	r2, [pc, #120]	@ (8004b70 <HAL_TIM_Base_MspInit+0xd0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d10c      	bne.n	8004b14 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004afa:	4b1c      	ldr	r3, [pc, #112]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	4a1b      	ldr	r2, [pc, #108]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004b00:	f043 0302 	orr.w	r3, r3, #2
 8004b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b06:	4b19      	ldr	r3, [pc, #100]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	697b      	ldr	r3, [r7, #20]
}
 8004b12:	e022      	b.n	8004b5a <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a16      	ldr	r2, [pc, #88]	@ (8004b74 <HAL_TIM_Base_MspInit+0xd4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d10c      	bne.n	8004b38 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004b1e:	4b13      	ldr	r3, [pc, #76]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	4a12      	ldr	r2, [pc, #72]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004b24:	f043 0308 	orr.w	r3, r3, #8
 8004b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b2a:	4b10      	ldr	r3, [pc, #64]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	693b      	ldr	r3, [r7, #16]
}
 8004b36:	e010      	b.n	8004b5a <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8004b78 <HAL_TIM_Base_MspInit+0xd8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d10b      	bne.n	8004b5a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004b42:	4b0a      	ldr	r3, [pc, #40]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b46:	4a09      	ldr	r2, [pc, #36]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b4e:	4b07      	ldr	r3, [pc, #28]	@ (8004b6c <HAL_TIM_Base_MspInit+0xcc>)
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
}
 8004b5a:	bf00      	nop
 8004b5c:	3724      	adds	r7, #36	@ 0x24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000c00 	.word	0x40000c00
 8004b78:	40010400 	.word	0x40010400

08004b7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb4 <HAL_TIM_PWM_MspInit+0x38>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d10b      	bne.n	8004ba6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	4a09      	ldr	r2, [pc, #36]	@ (8004bb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b9a:	4b07      	ldr	r3, [pc, #28]	@ (8004bb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40001800 	.word	0x40001800
 8004bb8:	40023800 	.word	0x40023800

08004bbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08c      	sub	sp, #48	@ 0x30
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc4:	f107 031c 	add.w	r3, r7, #28
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	609a      	str	r2, [r3, #8]
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a45      	ldr	r2, [pc, #276]	@ (8004cf0 <HAL_TIM_MspPostInit+0x134>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d11d      	bne.n	8004c1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bde:	4b45      	ldr	r3, [pc, #276]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	4a44      	ldr	r2, [pc, #272]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bea:	4b42      	ldr	r3, [pc, #264]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	61bb      	str	r3, [r7, #24]
 8004bf4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004bf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c04:	2300      	movs	r3, #0
 8004c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004c0c:	f107 031c 	add.w	r3, r7, #28
 8004c10:	4619      	mov	r1, r3
 8004c12:	4839      	ldr	r0, [pc, #228]	@ (8004cf8 <HAL_TIM_MspPostInit+0x13c>)
 8004c14:	f001 fd70 	bl	80066f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004c18:	e065      	b.n	8004ce6 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM2)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c22:	d11d      	bne.n	8004c60 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c24:	4b33      	ldr	r3, [pc, #204]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c28:	4a32      	ldr	r2, [pc, #200]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c30:	4b30      	ldr	r3, [pc, #192]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004c3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c42:	2302      	movs	r3, #2
 8004c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004c52:	f107 031c 	add.w	r3, r7, #28
 8004c56:	4619      	mov	r1, r3
 8004c58:	4827      	ldr	r0, [pc, #156]	@ (8004cf8 <HAL_TIM_MspPostInit+0x13c>)
 8004c5a:	f001 fd4d 	bl	80066f8 <HAL_GPIO_Init>
}
 8004c5e:	e042      	b.n	8004ce6 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM3)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a25      	ldr	r2, [pc, #148]	@ (8004cfc <HAL_TIM_MspPostInit+0x140>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d11c      	bne.n	8004ca4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c6a:	4b22      	ldr	r3, [pc, #136]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6e:	4a21      	ldr	r2, [pc, #132]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004c70:	f043 0302 	orr.w	r3, r3, #2
 8004c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c76:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004c82:	2310      	movs	r3, #16
 8004c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c86:	2302      	movs	r3, #2
 8004c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c92:	2302      	movs	r3, #2
 8004c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004c96:	f107 031c 	add.w	r3, r7, #28
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4818      	ldr	r0, [pc, #96]	@ (8004d00 <HAL_TIM_MspPostInit+0x144>)
 8004c9e:	f001 fd2b 	bl	80066f8 <HAL_GPIO_Init>
}
 8004ca2:	e020      	b.n	8004ce6 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM12)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a16      	ldr	r2, [pc, #88]	@ (8004d04 <HAL_TIM_MspPostInit+0x148>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d11b      	bne.n	8004ce6 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004cae:	4b11      	ldr	r3, [pc, #68]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb2:	4a10      	ldr	r2, [pc, #64]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cba:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf4 <HAL_TIM_MspPostInit+0x138>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004cc6:	2340      	movs	r3, #64	@ 0x40
 8004cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004cd6:	2309      	movs	r3, #9
 8004cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004cda:	f107 031c 	add.w	r3, r7, #28
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4809      	ldr	r0, [pc, #36]	@ (8004d08 <HAL_TIM_MspPostInit+0x14c>)
 8004ce2:	f001 fd09 	bl	80066f8 <HAL_GPIO_Init>
}
 8004ce6:	bf00      	nop
 8004ce8:	3730      	adds	r7, #48	@ 0x30
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40020000 	.word	0x40020000
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40020400 	.word	0x40020400
 8004d04:	40001800 	.word	0x40001800
 8004d08:	40021c00 	.word	0x40021c00

08004d0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d10:	4b14      	ldr	r3, [pc, #80]	@ (8004d64 <MX_USART1_UART_Init+0x58>)
 8004d12:	4a15      	ldr	r2, [pc, #84]	@ (8004d68 <MX_USART1_UART_Init+0x5c>)
 8004d14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d16:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <MX_USART1_UART_Init+0x58>)
 8004d18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004d1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d1e:	4b11      	ldr	r3, [pc, #68]	@ (8004d64 <MX_USART1_UART_Init+0x58>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d24:	4b0f      	ldr	r3, [pc, #60]	@ (8004d64 <MX_USART1_UART_Init+0x58>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d64 <MX_USART1_UART_Init+0x58>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d30:	4b0c      	ldr	r3, [pc, #48]	@ (8004d64 <MX_USART1_UART_Init+0x58>)
 8004d32:	220c      	movs	r2, #12
 8004d34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d36:	4b0b      	ldr	r3, [pc, #44]	@ (8004d64 <MX_USART1_UART_Init+0x58>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d3c:	4b09      	ldr	r3, [pc, #36]	@ (8004d64 <MX_USART1_UART_Init+0x58>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d42:	4b08      	ldr	r3, [pc, #32]	@ (8004d64 <MX_USART1_UART_Init+0x58>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d48:	4b06      	ldr	r3, [pc, #24]	@ (8004d64 <MX_USART1_UART_Init+0x58>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d4e:	4805      	ldr	r0, [pc, #20]	@ (8004d64 <MX_USART1_UART_Init+0x58>)
 8004d50:	f007 fd3c 	bl	800c7cc <HAL_UART_Init>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004d5a:	f7fe fe03 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20003128 	.word	0x20003128
 8004d68:	40011000 	.word	0x40011000

08004d6c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004d70:	4b14      	ldr	r3, [pc, #80]	@ (8004dc4 <MX_USART6_UART_Init+0x58>)
 8004d72:	4a15      	ldr	r2, [pc, #84]	@ (8004dc8 <MX_USART6_UART_Init+0x5c>)
 8004d74:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004d76:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <MX_USART6_UART_Init+0x58>)
 8004d78:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004d7c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004d7e:	4b11      	ldr	r3, [pc, #68]	@ (8004dc4 <MX_USART6_UART_Init+0x58>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004d84:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <MX_USART6_UART_Init+0x58>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc4 <MX_USART6_UART_Init+0x58>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004d90:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <MX_USART6_UART_Init+0x58>)
 8004d92:	220c      	movs	r2, #12
 8004d94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d96:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <MX_USART6_UART_Init+0x58>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d9c:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <MX_USART6_UART_Init+0x58>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004da2:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <MX_USART6_UART_Init+0x58>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004da8:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <MX_USART6_UART_Init+0x58>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004dae:	4805      	ldr	r0, [pc, #20]	@ (8004dc4 <MX_USART6_UART_Init+0x58>)
 8004db0:	f007 fd0c 	bl	800c7cc <HAL_UART_Init>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004dba:	f7fe fdd3 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004dbe:	bf00      	nop
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	200031b0 	.word	0x200031b0
 8004dc8:	40011400 	.word	0x40011400

08004dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b0ae      	sub	sp, #184	@ 0xb8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	605a      	str	r2, [r3, #4]
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004de4:	f107 0320 	add.w	r3, r7, #32
 8004de8:	2284      	movs	r2, #132	@ 0x84
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f00e fd2d 	bl	801384c <memset>
  if(uartHandle->Instance==USART1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a57      	ldr	r2, [pc, #348]	@ (8004f54 <HAL_UART_MspInit+0x188>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d15d      	bne.n	8004eb8 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004dfc:	2340      	movs	r3, #64	@ 0x40
 8004dfe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004e00:	2300      	movs	r3, #0
 8004e02:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e04:	f107 0320 	add.w	r3, r7, #32
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f003 f877 	bl	8007efc <HAL_RCCEx_PeriphCLKConfig>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004e14:	f7fe fda6 	bl	8003964 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e18:	4b4f      	ldr	r3, [pc, #316]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1c:	4a4e      	ldr	r2, [pc, #312]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004e1e:	f043 0310 	orr.w	r3, r3, #16
 8004e22:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e24:	4b4c      	ldr	r3, [pc, #304]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e30:	4b49      	ldr	r3, [pc, #292]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e34:	4a48      	ldr	r2, [pc, #288]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004e36:	f043 0302 	orr.w	r3, r3, #2
 8004e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e3c:	4b46      	ldr	r3, [pc, #280]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e48:	4b43      	ldr	r3, [pc, #268]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	4a42      	ldr	r2, [pc, #264]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e54:	4b40      	ldr	r3, [pc, #256]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004e60:	2380      	movs	r3, #128	@ 0x80
 8004e62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e66:	2302      	movs	r3, #2
 8004e68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e78:	2307      	movs	r3, #7
 8004e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004e7e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004e82:	4619      	mov	r1, r3
 8004e84:	4835      	ldr	r0, [pc, #212]	@ (8004f5c <HAL_UART_MspInit+0x190>)
 8004e86:	f001 fc37 	bl	80066f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004e8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e92:	2302      	movs	r3, #2
 8004e94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ea4:	2307      	movs	r3, #7
 8004ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004eaa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004eae:	4619      	mov	r1, r3
 8004eb0:	482b      	ldr	r0, [pc, #172]	@ (8004f60 <HAL_UART_MspInit+0x194>)
 8004eb2:	f001 fc21 	bl	80066f8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004eb6:	e048      	b.n	8004f4a <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART6)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a29      	ldr	r2, [pc, #164]	@ (8004f64 <HAL_UART_MspInit+0x198>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d143      	bne.n	8004f4a <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004ec2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ec6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ecc:	f107 0320 	add.w	r3, r7, #32
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f003 f813 	bl	8007efc <HAL_RCCEx_PeriphCLKConfig>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8004edc:	f7fe fd42 	bl	8003964 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004ee6:	f043 0320 	orr.w	r3, r3, #32
 8004eea:	6453      	str	r3, [r2, #68]	@ 0x44
 8004eec:	4b1a      	ldr	r3, [pc, #104]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ef8:	4b17      	ldr	r3, [pc, #92]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	4a16      	ldr	r2, [pc, #88]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004efe:	f043 0304 	orr.w	r3, r3, #4
 8004f02:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f04:	4b14      	ldr	r3, [pc, #80]	@ (8004f58 <HAL_UART_MspInit+0x18c>)
 8004f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004f10:	23c0      	movs	r3, #192	@ 0xc0
 8004f12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f16:	2302      	movs	r3, #2
 8004f18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f22:	2303      	movs	r3, #3
 8004f24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004f28:	2308      	movs	r3, #8
 8004f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f2e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004f32:	4619      	mov	r1, r3
 8004f34:	480c      	ldr	r0, [pc, #48]	@ (8004f68 <HAL_UART_MspInit+0x19c>)
 8004f36:	f001 fbdf 	bl	80066f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2105      	movs	r1, #5
 8004f3e:	2047      	movs	r0, #71	@ 0x47
 8004f40:	f000 fbde 	bl	8005700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004f44:	2047      	movs	r0, #71	@ 0x47
 8004f46:	f000 fbf7 	bl	8005738 <HAL_NVIC_EnableIRQ>
}
 8004f4a:	bf00      	nop
 8004f4c:	37b8      	adds	r7, #184	@ 0xb8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40011000 	.word	0x40011000
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40020400 	.word	0x40020400
 8004f60:	40020000 	.word	0x40020000
 8004f64:	40011400 	.word	0x40011400
 8004f68:	40020800 	.word	0x40020800

08004f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004fa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f70:	f7ff fb02 	bl	8004578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f74:	480c      	ldr	r0, [pc, #48]	@ (8004fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f76:	490d      	ldr	r1, [pc, #52]	@ (8004fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f78:	4a0d      	ldr	r2, [pc, #52]	@ (8004fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f7c:	e002      	b.n	8004f84 <LoopCopyDataInit>

08004f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f82:	3304      	adds	r3, #4

08004f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f88:	d3f9      	bcc.n	8004f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8004fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f90:	e001      	b.n	8004f96 <LoopFillZerobss>

08004f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f94:	3204      	adds	r2, #4

08004f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f98:	d3fb      	bcc.n	8004f92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004f9a:	f00e fd89 	bl	8013ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f9e:	f7fe fbe5 	bl	800376c <main>
  bx  lr    
 8004fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004fa4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004fb0:	08016c18 	.word	0x08016c18
  ldr r2, =_sbss
 8004fb4:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8004fb8:	2000b4ec 	.word	0x2000b4ec

08004fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fbc:	e7fe      	b.n	8004fbc <ADC_IRQHandler>

08004fbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fc2:	2003      	movs	r0, #3
 8004fc4:	f000 fb91 	bl	80056ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f7ff f951 	bl	8004270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fce:	f7ff f927 	bl	8004220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fdc:	4b06      	ldr	r3, [pc, #24]	@ (8004ff8 <HAL_IncTick+0x20>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4b06      	ldr	r3, [pc, #24]	@ (8004ffc <HAL_IncTick+0x24>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	4a04      	ldr	r2, [pc, #16]	@ (8004ffc <HAL_IncTick+0x24>)
 8004fea:	6013      	str	r3, [r2, #0]
}
 8004fec:	bf00      	nop
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	2000000c 	.word	0x2000000c
 8004ffc:	20003238 	.word	0x20003238

08005000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return uwTick;
 8005004:	4b03      	ldr	r3, [pc, #12]	@ (8005014 <HAL_GetTick+0x14>)
 8005006:	681b      	ldr	r3, [r3, #0]
}
 8005008:	4618      	mov	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20003238 	.word	0x20003238

08005018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005020:	f7ff ffee 	bl	8005000 <HAL_GetTick>
 8005024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d005      	beq.n	800503e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005032:	4b0a      	ldr	r3, [pc, #40]	@ (800505c <HAL_Delay+0x44>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800503e:	bf00      	nop
 8005040:	f7ff ffde 	bl	8005000 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	429a      	cmp	r2, r3
 800504e:	d8f7      	bhi.n	8005040 <HAL_Delay+0x28>
  {
  }
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	2000000c 	.word	0x2000000c

08005060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e031      	b.n	80050da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fc fbfa 	bl	8001878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b00      	cmp	r3, #0
 800509c:	d116      	bne.n	80050cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050a2:	4b10      	ldr	r3, [pc, #64]	@ (80050e4 <HAL_ADC_Init+0x84>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	f043 0202 	orr.w	r2, r3, #2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f974 	bl	800539c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	f043 0201 	orr.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80050ca:	e001      	b.n	80050d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	ffffeefd 	.word	0xffffeefd

080050e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_ADC_ConfigChannel+0x1c>
 8005100:	2302      	movs	r3, #2
 8005102:	e13a      	b.n	800537a <HAL_ADC_ConfigChannel+0x292>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b09      	cmp	r3, #9
 8005112:	d93a      	bls.n	800518a <HAL_ADC_ConfigChannel+0xa2>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800511c:	d035      	beq.n	800518a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68d9      	ldr	r1, [r3, #12]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	4613      	mov	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4413      	add	r3, r2
 8005132:	3b1e      	subs	r3, #30
 8005134:	2207      	movs	r2, #7
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43da      	mvns	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	400a      	ands	r2, r1
 8005142:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a8f      	ldr	r2, [pc, #572]	@ (8005388 <HAL_ADC_ConfigChannel+0x2a0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d10a      	bne.n	8005164 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68d9      	ldr	r1, [r3, #12]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	061a      	lsls	r2, r3, #24
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005162:	e039      	b.n	80051d8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68d9      	ldr	r1, [r3, #12]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	4618      	mov	r0, r3
 8005176:	4603      	mov	r3, r0
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4403      	add	r3, r0
 800517c:	3b1e      	subs	r3, #30
 800517e:	409a      	lsls	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005188:	e026      	b.n	80051d8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6919      	ldr	r1, [r3, #16]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	2207      	movs	r2, #7
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43da      	mvns	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	400a      	ands	r2, r1
 80051b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6919      	ldr	r1, [r3, #16]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	4618      	mov	r0, r3
 80051c4:	4603      	mov	r3, r0
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	4403      	add	r3, r0
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	409a      	lsls	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b06      	cmp	r3, #6
 80051de:	d824      	bhi.n	800522a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	3b05      	subs	r3, #5
 80051f2:	221f      	movs	r2, #31
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43da      	mvns	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	400a      	ands	r2, r1
 8005200:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	4618      	mov	r0, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	3b05      	subs	r3, #5
 800521c:	fa00 f203 	lsl.w	r2, r0, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	635a      	str	r2, [r3, #52]	@ 0x34
 8005228:	e04c      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b0c      	cmp	r3, #12
 8005230:	d824      	bhi.n	800527c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	3b23      	subs	r3, #35	@ 0x23
 8005244:	221f      	movs	r2, #31
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43da      	mvns	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	400a      	ands	r2, r1
 8005252:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	4618      	mov	r0, r3
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	3b23      	subs	r3, #35	@ 0x23
 800526e:	fa00 f203 	lsl.w	r2, r0, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	631a      	str	r2, [r3, #48]	@ 0x30
 800527a:	e023      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	3b41      	subs	r3, #65	@ 0x41
 800528e:	221f      	movs	r2, #31
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	43da      	mvns	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	400a      	ands	r2, r1
 800529c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	4618      	mov	r0, r3
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	3b41      	subs	r3, #65	@ 0x41
 80052b8:	fa00 f203 	lsl.w	r2, r0, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a30      	ldr	r2, [pc, #192]	@ (800538c <HAL_ADC_ConfigChannel+0x2a4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d10a      	bne.n	80052e4 <HAL_ADC_ConfigChannel+0x1fc>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052d6:	d105      	bne.n	80052e4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80052d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005390 <HAL_ADC_ConfigChannel+0x2a8>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005390 <HAL_ADC_ConfigChannel+0x2a8>)
 80052de:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80052e2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a28      	ldr	r2, [pc, #160]	@ (800538c <HAL_ADC_ConfigChannel+0x2a4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d10f      	bne.n	800530e <HAL_ADC_ConfigChannel+0x226>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b12      	cmp	r3, #18
 80052f4:	d10b      	bne.n	800530e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80052f6:	4b26      	ldr	r3, [pc, #152]	@ (8005390 <HAL_ADC_ConfigChannel+0x2a8>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4a25      	ldr	r2, [pc, #148]	@ (8005390 <HAL_ADC_ConfigChannel+0x2a8>)
 80052fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005300:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005302:	4b23      	ldr	r3, [pc, #140]	@ (8005390 <HAL_ADC_ConfigChannel+0x2a8>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4a22      	ldr	r2, [pc, #136]	@ (8005390 <HAL_ADC_ConfigChannel+0x2a8>)
 8005308:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800530c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1e      	ldr	r2, [pc, #120]	@ (800538c <HAL_ADC_ConfigChannel+0x2a4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d12b      	bne.n	8005370 <HAL_ADC_ConfigChannel+0x288>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1a      	ldr	r2, [pc, #104]	@ (8005388 <HAL_ADC_ConfigChannel+0x2a0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d003      	beq.n	800532a <HAL_ADC_ConfigChannel+0x242>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b11      	cmp	r3, #17
 8005328:	d122      	bne.n	8005370 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800532a:	4b19      	ldr	r3, [pc, #100]	@ (8005390 <HAL_ADC_ConfigChannel+0x2a8>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	4a18      	ldr	r2, [pc, #96]	@ (8005390 <HAL_ADC_ConfigChannel+0x2a8>)
 8005330:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005334:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005336:	4b16      	ldr	r3, [pc, #88]	@ (8005390 <HAL_ADC_ConfigChannel+0x2a8>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4a15      	ldr	r2, [pc, #84]	@ (8005390 <HAL_ADC_ConfigChannel+0x2a8>)
 800533c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005340:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a10      	ldr	r2, [pc, #64]	@ (8005388 <HAL_ADC_ConfigChannel+0x2a0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d111      	bne.n	8005370 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800534c:	4b11      	ldr	r3, [pc, #68]	@ (8005394 <HAL_ADC_ConfigChannel+0x2ac>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a11      	ldr	r2, [pc, #68]	@ (8005398 <HAL_ADC_ConfigChannel+0x2b0>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	0c9a      	lsrs	r2, r3, #18
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005362:	e002      	b.n	800536a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3b01      	subs	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f9      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	10000012 	.word	0x10000012
 800538c:	40012000 	.word	0x40012000
 8005390:	40012300 	.word	0x40012300
 8005394:	20000004 	.word	0x20000004
 8005398:	431bde83 	.word	0x431bde83

0800539c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80053a4:	4b78      	ldr	r3, [pc, #480]	@ (8005588 <ADC_Init+0x1ec>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4a77      	ldr	r2, [pc, #476]	@ (8005588 <ADC_Init+0x1ec>)
 80053aa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80053ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80053b0:	4b75      	ldr	r3, [pc, #468]	@ (8005588 <ADC_Init+0x1ec>)
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	4973      	ldr	r1, [pc, #460]	@ (8005588 <ADC_Init+0x1ec>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6859      	ldr	r1, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	021a      	lsls	r2, r3, #8
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80053f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6859      	ldr	r1, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6899      	ldr	r1, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542a:	4a58      	ldr	r2, [pc, #352]	@ (800558c <ADC_Init+0x1f0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d022      	beq.n	8005476 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800543e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6899      	ldr	r1, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6899      	ldr	r1, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	609a      	str	r2, [r3, #8]
 8005474:	e00f      	b.n	8005496 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005494:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0202 	bic.w	r2, r2, #2
 80054a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6899      	ldr	r1, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	005a      	lsls	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01b      	beq.n	80054fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80054e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6859      	ldr	r1, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ee:	3b01      	subs	r3, #1
 80054f0:	035a      	lsls	r2, r3, #13
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	e007      	b.n	800550c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800550a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800551a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	3b01      	subs	r3, #1
 8005528:	051a      	lsls	r2, r3, #20
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6899      	ldr	r1, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800554e:	025a      	lsls	r2, r3, #9
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6899      	ldr	r1, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	029a      	lsls	r2, r3, #10
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	609a      	str	r2, [r3, #8]
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40012300 	.word	0x40012300
 800558c:	0f000001 	.word	0x0f000001

08005590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055a0:	4b0b      	ldr	r3, [pc, #44]	@ (80055d0 <__NVIC_SetPriorityGrouping+0x40>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055ac:	4013      	ands	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80055b8:	4b06      	ldr	r3, [pc, #24]	@ (80055d4 <__NVIC_SetPriorityGrouping+0x44>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055be:	4a04      	ldr	r2, [pc, #16]	@ (80055d0 <__NVIC_SetPriorityGrouping+0x40>)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	60d3      	str	r3, [r2, #12]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	e000ed00 	.word	0xe000ed00
 80055d4:	05fa0000 	.word	0x05fa0000

080055d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055dc:	4b04      	ldr	r3, [pc, #16]	@ (80055f0 <__NVIC_GetPriorityGrouping+0x18>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	0a1b      	lsrs	r3, r3, #8
 80055e2:	f003 0307 	and.w	r3, r3, #7
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	e000ed00 	.word	0xe000ed00

080055f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4603      	mov	r3, r0
 80055fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005602:	2b00      	cmp	r3, #0
 8005604:	db0b      	blt.n	800561e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005606:	79fb      	ldrb	r3, [r7, #7]
 8005608:	f003 021f 	and.w	r2, r3, #31
 800560c:	4907      	ldr	r1, [pc, #28]	@ (800562c <__NVIC_EnableIRQ+0x38>)
 800560e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	2001      	movs	r0, #1
 8005616:	fa00 f202 	lsl.w	r2, r0, r2
 800561a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	e000e100 	.word	0xe000e100

08005630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	6039      	str	r1, [r7, #0]
 800563a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800563c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005640:	2b00      	cmp	r3, #0
 8005642:	db0a      	blt.n	800565a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	b2da      	uxtb	r2, r3
 8005648:	490c      	ldr	r1, [pc, #48]	@ (800567c <__NVIC_SetPriority+0x4c>)
 800564a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564e:	0112      	lsls	r2, r2, #4
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	440b      	add	r3, r1
 8005654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005658:	e00a      	b.n	8005670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	b2da      	uxtb	r2, r3
 800565e:	4908      	ldr	r1, [pc, #32]	@ (8005680 <__NVIC_SetPriority+0x50>)
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	3b04      	subs	r3, #4
 8005668:	0112      	lsls	r2, r2, #4
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	440b      	add	r3, r1
 800566e:	761a      	strb	r2, [r3, #24]
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	e000e100 	.word	0xe000e100
 8005680:	e000ed00 	.word	0xe000ed00

08005684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005684:	b480      	push	{r7}
 8005686:	b089      	sub	sp, #36	@ 0x24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f1c3 0307 	rsb	r3, r3, #7
 800569e:	2b04      	cmp	r3, #4
 80056a0:	bf28      	it	cs
 80056a2:	2304      	movcs	r3, #4
 80056a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3304      	adds	r3, #4
 80056aa:	2b06      	cmp	r3, #6
 80056ac:	d902      	bls.n	80056b4 <NVIC_EncodePriority+0x30>
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	3b03      	subs	r3, #3
 80056b2:	e000      	b.n	80056b6 <NVIC_EncodePriority+0x32>
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056b8:	f04f 32ff 	mov.w	r2, #4294967295
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	43da      	mvns	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	401a      	ands	r2, r3
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056cc:	f04f 31ff 	mov.w	r1, #4294967295
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	fa01 f303 	lsl.w	r3, r1, r3
 80056d6:	43d9      	mvns	r1, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056dc:	4313      	orrs	r3, r2
         );
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3724      	adds	r7, #36	@ 0x24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ff4c 	bl	8005590 <__NVIC_SetPriorityGrouping>
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005712:	f7ff ff61 	bl	80055d8 <__NVIC_GetPriorityGrouping>
 8005716:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	6978      	ldr	r0, [r7, #20]
 800571e:	f7ff ffb1 	bl	8005684 <NVIC_EncodePriority>
 8005722:	4602      	mov	r2, r0
 8005724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005728:	4611      	mov	r1, r2
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff ff80 	bl	8005630 <__NVIC_SetPriority>
}
 8005730:	bf00      	nop
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff ff54 	bl	80055f4 <__NVIC_EnableIRQ>
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e054      	b.n	8005810 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7f5b      	ldrb	r3, [r3, #29]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d105      	bne.n	800577c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc f8e0 	bl	800193c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	791b      	ldrb	r3, [r3, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10c      	bne.n	80057a4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a22      	ldr	r2, [pc, #136]	@ (8005818 <HAL_CRC_Init+0xc4>)
 8005790:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0218 	bic.w	r2, r2, #24
 80057a0:	609a      	str	r2, [r3, #8]
 80057a2:	e00c      	b.n	80057be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6899      	ldr	r1, [r3, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	461a      	mov	r2, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f834 	bl	800581c <HAL_CRCEx_Polynomial_Set>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e028      	b.n	8005810 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	795b      	ldrb	r3, [r3, #5]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f04f 32ff 	mov.w	r2, #4294967295
 80057ce:	611a      	str	r2, [r3, #16]
 80057d0:	e004      	b.n	80057dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6912      	ldr	r2, [r2, #16]
 80057da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	04c11db7 	.word	0x04c11db7

0800581c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800582c:	231f      	movs	r3, #31
 800582e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d102      	bne.n	8005840 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
 800583e:	e063      	b.n	8005908 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005840:	bf00      	nop
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1e5a      	subs	r2, r3, #1
 8005846:	613a      	str	r2, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d009      	beq.n	8005860 <HAL_CRCEx_Polynomial_Set+0x44>
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	fa22 f303 	lsr.w	r3, r2, r3
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0f0      	beq.n	8005842 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b18      	cmp	r3, #24
 8005864:	d846      	bhi.n	80058f4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005866:	a201      	add	r2, pc, #4	@ (adr r2, 800586c <HAL_CRCEx_Polynomial_Set+0x50>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	080058fb 	.word	0x080058fb
 8005870:	080058f5 	.word	0x080058f5
 8005874:	080058f5 	.word	0x080058f5
 8005878:	080058f5 	.word	0x080058f5
 800587c:	080058f5 	.word	0x080058f5
 8005880:	080058f5 	.word	0x080058f5
 8005884:	080058f5 	.word	0x080058f5
 8005888:	080058f5 	.word	0x080058f5
 800588c:	080058e9 	.word	0x080058e9
 8005890:	080058f5 	.word	0x080058f5
 8005894:	080058f5 	.word	0x080058f5
 8005898:	080058f5 	.word	0x080058f5
 800589c:	080058f5 	.word	0x080058f5
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	080058f5 	.word	0x080058f5
 80058ac:	080058dd 	.word	0x080058dd
 80058b0:	080058f5 	.word	0x080058f5
 80058b4:	080058f5 	.word	0x080058f5
 80058b8:	080058f5 	.word	0x080058f5
 80058bc:	080058f5 	.word	0x080058f5
 80058c0:	080058f5 	.word	0x080058f5
 80058c4:	080058f5 	.word	0x080058f5
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	080058d1 	.word	0x080058d1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b06      	cmp	r3, #6
 80058d4:	d913      	bls.n	80058fe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80058da:	e010      	b.n	80058fe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b07      	cmp	r3, #7
 80058e0:	d90f      	bls.n	8005902 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80058e6:	e00c      	b.n	8005902 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b0f      	cmp	r3, #15
 80058ec:	d90b      	bls.n	8005906 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80058f2:	e008      	b.n	8005906 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75fb      	strb	r3, [r7, #23]
        break;
 80058f8:	e006      	b.n	8005908 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80058fa:	bf00      	nop
 80058fc:	e004      	b.n	8005908 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80058fe:	bf00      	nop
 8005900:	e002      	b.n	8005908 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005902:	bf00      	nop
 8005904:	e000      	b.n	8005908 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005906:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10d      	bne.n	800592a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f023 0118 	bic.w	r1, r3, #24
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	430a      	orrs	r2, r1
 8005928:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
}
 800592c:	4618      	mov	r0, r3
 800592e:	371c      	adds	r7, #28
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e069      	b.n	8005a1e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fc f844 	bl	80019e4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6819      	ldr	r1, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4b2a      	ldr	r3, [pc, #168]	@ (8005a28 <HAL_DCMI_Init+0xf0>)
 800597e:	400b      	ands	r3, r1
 8005980:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6819      	ldr	r1, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005996:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80059a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80059ae:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80059ba:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80059c6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d112      	bne.n	80059fe <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	7f1b      	ldrb	r3, [r3, #28]
 80059dc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	7f5b      	ldrb	r3, [r3, #29]
 80059e2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80059e4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	7f9b      	ldrb	r3, [r3, #30]
 80059ea:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80059ec:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	7fdb      	ldrb	r3, [r3, #31]
 80059f4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80059fa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80059fc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 021e 	orr.w	r2, r2, #30
 8005a0c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	ffe0f007 	.word	0xffe0f007

08005a2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_DMA_Start_IT+0x26>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e048      	b.n	8005ae4 <HAL_DMA_Start_IT+0xb8>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d137      	bne.n	8005ad6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f8d4 	bl	8005c28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a84:	223f      	movs	r2, #63	@ 0x3f
 8005a86:	409a      	lsls	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0216 	orr.w	r2, r2, #22
 8005a9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695a      	ldr	r2, [r3, #20]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005aaa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0208 	orr.w	r2, r2, #8
 8005ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e005      	b.n	8005ae2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005afa:	f7ff fa81 	bl	8005000 <HAL_GetTick>
 8005afe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d008      	beq.n	8005b1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2280      	movs	r2, #128	@ 0x80
 8005b10:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e052      	b.n	8005bc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0216 	bic.w	r2, r2, #22
 8005b2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <HAL_DMA_Abort+0x62>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0208 	bic.w	r2, r2, #8
 8005b5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0201 	bic.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b6e:	e013      	b.n	8005b98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b70:	f7ff fa46 	bl	8005000 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b05      	cmp	r3, #5
 8005b7c:	d90c      	bls.n	8005b98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2203      	movs	r2, #3
 8005b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e015      	b.n	8005bc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e4      	bne.n	8005b70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005baa:	223f      	movs	r2, #63	@ 0x3f
 8005bac:	409a      	lsls	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d004      	beq.n	8005bea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2280      	movs	r2, #128	@ 0x80
 8005be4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e00c      	b.n	8005c04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2205      	movs	r2, #5
 8005bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0201 	bic.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005c44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b40      	cmp	r3, #64	@ 0x40
 8005c54:	d108      	bne.n	8005c68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c66:	e007      	b.n	8005c78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e039      	b.n	8005d0a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fb ff8a 	bl	8001bc4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd4:	f023 0107 	bic.w	r1, r3, #7
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cea:	4b0a      	ldr	r3, [pc, #40]	@ (8005d14 <HAL_DMA2D_Init+0x90>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68d1      	ldr	r1, [r2, #12]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	ffffc000 	.word	0xffffc000

08005d18 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d026      	beq.n	8005d88 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d021      	beq.n	8005d88 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d52:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d58:	f043 0201 	orr.w	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2201      	movs	r2, #1
 8005d66:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d026      	beq.n	8005de0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d021      	beq.n	8005de0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005daa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2220      	movs	r2, #32
 8005db2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db8:	f043 0202 	orr.w	r2, r3, #2
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d026      	beq.n	8005e38 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d021      	beq.n	8005e38 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e02:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2208      	movs	r2, #8
 8005e0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e10:	f043 0204 	orr.w	r2, r3, #4
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d013      	beq.n	8005e6a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e5a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2204      	movs	r2, #4
 8005e62:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f853 	bl	8005f10 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d024      	beq.n	8005ebe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01f      	beq.n	8005ebe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005e8c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2202      	movs	r2, #2
 8005e94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01f      	beq.n	8005f08 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01a      	beq.n	8005f08 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ee0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2210      	movs	r2, #16
 8005ee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f80e 	bl	8005f24 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005f08:	bf00      	nop
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_DMA2D_ConfigLayer+0x20>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e079      	b.n	800604c <HAL_DMA2D_ConfigLayer+0x114>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	3318      	adds	r3, #24
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	4413      	add	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	041b      	lsls	r3, r3, #16
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005f82:	4b35      	ldr	r3, [pc, #212]	@ (8006058 <HAL_DMA2D_ConfigLayer+0x120>)
 8005f84:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b0a      	cmp	r3, #10
 8005f8c:	d003      	beq.n	8005f96 <HAL_DMA2D_ConfigLayer+0x5e>
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b09      	cmp	r3, #9
 8005f94:	d107      	bne.n	8005fa6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e005      	b.n	8005fb2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	061b      	lsls	r3, r3, #24
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d120      	bne.n	8005ffa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	ea02 0103 	and.w	r1, r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b0a      	cmp	r3, #10
 8005fe0:	d003      	beq.n	8005fea <HAL_DMA2D_ConfigLayer+0xb2>
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b09      	cmp	r3, #9
 8005fe8:	d127      	bne.n	800603a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005ff6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ff8:	e01f      	b.n	800603a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	43db      	mvns	r3, r3
 8006004:	ea02 0103 	and.w	r1, r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	430a      	orrs	r2, r1
 8006010:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	6812      	ldr	r2, [r2, #0]
 800601a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b0a      	cmp	r3, #10
 8006022:	d003      	beq.n	800602c <HAL_DMA2D_ConfigLayer+0xf4>
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b09      	cmp	r3, #9
 800602a:	d106      	bne.n	800603a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006038:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	ff03000f 	.word	0xff03000f

0800605c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e086      	b.n	800617c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fb fe13 	bl	8001cac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006086:	4b3f      	ldr	r3, [pc, #252]	@ (8006184 <HAL_ETH_Init+0x128>)
 8006088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608a:	4a3e      	ldr	r2, [pc, #248]	@ (8006184 <HAL_ETH_Init+0x128>)
 800608c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006090:	6453      	str	r3, [r2, #68]	@ 0x44
 8006092:	4b3c      	ldr	r3, [pc, #240]	@ (8006184 <HAL_ETH_Init+0x128>)
 8006094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800609e:	4b3a      	ldr	r3, [pc, #232]	@ (8006188 <HAL_ETH_Init+0x12c>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	4a39      	ldr	r2, [pc, #228]	@ (8006188 <HAL_ETH_Init+0x12c>)
 80060a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80060a8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80060aa:	4b37      	ldr	r3, [pc, #220]	@ (8006188 <HAL_ETH_Init+0x12c>)
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	4935      	ldr	r1, [pc, #212]	@ (8006188 <HAL_ETH_Init+0x12c>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80060b8:	4b33      	ldr	r3, [pc, #204]	@ (8006188 <HAL_ETH_Init+0x12c>)
 80060ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6812      	ldr	r2, [r2, #0]
 80060ca:	f043 0301 	orr.w	r3, r3, #1
 80060ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80060d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060d4:	f7fe ff94 	bl	8005000 <HAL_GetTick>
 80060d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80060da:	e011      	b.n	8006100 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80060dc:	f7fe ff90 	bl	8005000 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80060ea:	d909      	bls.n	8006100 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2204      	movs	r2, #4
 80060f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	22e0      	movs	r2, #224	@ 0xe0
 80060f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e03d      	b.n	800617c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e4      	bne.n	80060dc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f97a 	bl	800640c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fa25 	bl	8006568 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fa7b 	bl	800661a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	461a      	mov	r2, r3
 800612a:	2100      	movs	r1, #0
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f9e3 	bl	80064f8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8006140:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b0f      	ldr	r3, [pc, #60]	@ (800618c <HAL_ETH_Init+0x130>)
 8006150:	430b      	orrs	r3, r1
 8006152:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8006166:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2210      	movs	r2, #16
 8006176:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40023800 	.word	0x40023800
 8006188:	40013800 	.word	0x40013800
 800618c:	00020060 	.word	0x00020060

08006190 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	4b53      	ldr	r3, [pc, #332]	@ (80062f4 <ETH_SetMACConfig+0x164>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	7b9b      	ldrb	r3, [r3, #14]
 80061ae:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	7c12      	ldrb	r2, [r2, #16]
 80061b4:	2a00      	cmp	r2, #0
 80061b6:	d102      	bne.n	80061be <ETH_SetMACConfig+0x2e>
 80061b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80061bc:	e000      	b.n	80061c0 <ETH_SetMACConfig+0x30>
 80061be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80061c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	7c52      	ldrb	r2, [r2, #17]
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	d102      	bne.n	80061d0 <ETH_SetMACConfig+0x40>
 80061ca:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80061ce:	e000      	b.n	80061d2 <ETH_SetMACConfig+0x42>
 80061d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80061d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80061d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	7fdb      	ldrb	r3, [r3, #31]
 80061de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80061e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80061e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	7f92      	ldrb	r2, [r2, #30]
 80061ec:	2a00      	cmp	r2, #0
 80061ee:	d102      	bne.n	80061f6 <ETH_SetMACConfig+0x66>
 80061f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80061f4:	e000      	b.n	80061f8 <ETH_SetMACConfig+0x68>
 80061f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80061f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	7f1b      	ldrb	r3, [r3, #28]
 80061fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8006200:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8006206:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	791b      	ldrb	r3, [r3, #4]
 800620c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800620e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006216:	2a00      	cmp	r2, #0
 8006218:	d102      	bne.n	8006220 <ETH_SetMACConfig+0x90>
 800621a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800621e:	e000      	b.n	8006222 <ETH_SetMACConfig+0x92>
 8006220:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006222:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	7bdb      	ldrb	r3, [r3, #15]
 8006228:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800622a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006230:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006238:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800623a:	4313      	orrs	r3, r2
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006252:	2001      	movs	r0, #1
 8006254:	f7fe fee0 	bl	8005018 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800626e:	4013      	ands	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006276:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800627e:	2a00      	cmp	r2, #0
 8006280:	d101      	bne.n	8006286 <ETH_SetMACConfig+0xf6>
 8006282:	2280      	movs	r2, #128	@ 0x80
 8006284:	e000      	b.n	8006288 <ETH_SetMACConfig+0xf8>
 8006286:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006288:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800628e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8006296:	2a01      	cmp	r2, #1
 8006298:	d101      	bne.n	800629e <ETH_SetMACConfig+0x10e>
 800629a:	2208      	movs	r2, #8
 800629c:	e000      	b.n	80062a0 <ETH_SetMACConfig+0x110>
 800629e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80062a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80062a8:	2a01      	cmp	r2, #1
 80062aa:	d101      	bne.n	80062b0 <ETH_SetMACConfig+0x120>
 80062ac:	2204      	movs	r2, #4
 80062ae:	e000      	b.n	80062b2 <ETH_SetMACConfig+0x122>
 80062b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80062b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80062ba:	2a01      	cmp	r2, #1
 80062bc:	d101      	bne.n	80062c2 <ETH_SetMACConfig+0x132>
 80062be:	2202      	movs	r2, #2
 80062c0:	e000      	b.n	80062c4 <ETH_SetMACConfig+0x134>
 80062c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80062c4:	4313      	orrs	r3, r2
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80062dc:	2001      	movs	r0, #1
 80062de:	f7fe fe9b 	bl	8005018 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	619a      	str	r2, [r3, #24]
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	fd20810f 	.word	0xfd20810f

080062f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4b3d      	ldr	r3, [pc, #244]	@ (8006408 <ETH_SetDMAConfig+0x110>)
 8006312:	4013      	ands	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	7b1b      	ldrb	r3, [r3, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <ETH_SetDMAConfig+0x2c>
 800631e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006322:	e000      	b.n	8006326 <ETH_SetDMAConfig+0x2e>
 8006324:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	7b5b      	ldrb	r3, [r3, #13]
 800632a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800632c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	7f52      	ldrb	r2, [r2, #29]
 8006332:	2a00      	cmp	r2, #0
 8006334:	d102      	bne.n	800633c <ETH_SetDMAConfig+0x44>
 8006336:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800633a:	e000      	b.n	800633e <ETH_SetDMAConfig+0x46>
 800633c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800633e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	7b9b      	ldrb	r3, [r3, #14]
 8006344:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006346:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800634c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	7f1b      	ldrb	r3, [r3, #28]
 8006352:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006354:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	7f9b      	ldrb	r3, [r3, #30]
 800635a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800635c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006362:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800636a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800636c:	4313      	orrs	r3, r2
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4313      	orrs	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800637c:	461a      	mov	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800638e:	2001      	movs	r0, #1
 8006390:	f7fe fe42 	bl	8005018 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800639c:	461a      	mov	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	791b      	ldrb	r3, [r3, #4]
 80063a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80063ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80063b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80063b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80063c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80063c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80063ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80063d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80063de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80063ec:	2001      	movs	r0, #1
 80063ee:	f7fe fe13 	bl	8005018 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063fa:	461a      	mov	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6013      	str	r3, [r2, #0]
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	f8de3f23 	.word	0xf8de3f23

0800640c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b0a6      	sub	sp, #152	@ 0x98
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006420:	2300      	movs	r3, #0
 8006422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006424:	2300      	movs	r3, #0
 8006426:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006430:	2300      	movs	r3, #0
 8006432:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006436:	2301      	movs	r3, #1
 8006438:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006442:	2300      	movs	r3, #0
 8006444:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006448:	2300      	movs	r3, #0
 800644a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800644e:	2300      	movs	r3, #0
 8006450:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006452:	2300      	movs	r3, #0
 8006454:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006458:	2300      	movs	r3, #0
 800645a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800645c:	2300      	movs	r3, #0
 800645e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006462:	2300      	movs	r3, #0
 8006464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006468:	2300      	movs	r3, #0
 800646a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800646e:	2300      	movs	r3, #0
 8006470:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006474:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006478:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800647a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800647e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006480:	2300      	movs	r3, #0
 8006482:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006486:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff fe7f 	bl	8006190 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006492:	2301      	movs	r3, #1
 8006494:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006496:	2301      	movs	r3, #1
 8006498:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800649a:	2301      	movs	r3, #1
 800649c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80064a0:	2301      	movs	r3, #1
 80064a2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80064ae:	2300      	movs	r3, #0
 80064b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80064b4:	2300      	movs	r3, #0
 80064b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80064be:	2301      	movs	r3, #1
 80064c0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80064c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80064c6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80064c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80064cc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80064ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80064d2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80064e2:	f107 0308 	add.w	r3, r7, #8
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff ff05 	bl	80062f8 <ETH_SetDMAConfig>
}
 80064ee:	bf00      	nop
 80064f0:	3798      	adds	r7, #152	@ 0x98
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3305      	adds	r3, #5
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	3204      	adds	r2, #4
 8006510:	7812      	ldrb	r2, [r2, #0]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	4b11      	ldr	r3, [pc, #68]	@ (8006560 <ETH_MACAddressConfig+0x68>)
 800651a:	4413      	add	r3, r2
 800651c:	461a      	mov	r2, r3
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3303      	adds	r3, #3
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	061a      	lsls	r2, r3, #24
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3302      	adds	r3, #2
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	041b      	lsls	r3, r3, #16
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3301      	adds	r3, #1
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	4313      	orrs	r3, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	7812      	ldrb	r2, [r2, #0]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <ETH_MACAddressConfig+0x6c>)
 800654a:	4413      	add	r3, r2
 800654c:	461a      	mov	r2, r3
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	6013      	str	r3, [r2, #0]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40028040 	.word	0x40028040
 8006564:	40028044 	.word	0x40028044

08006568 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006570:	2300      	movs	r3, #0
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e03e      	b.n	80065f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68d9      	ldr	r1, [r3, #12]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	440b      	add	r3, r1
 8006586:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2200      	movs	r2, #0
 8006592:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2200      	movs	r2, #0
 8006598:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2200      	movs	r2, #0
 800659e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	3206      	adds	r2, #6
 80065a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d80c      	bhi.n	80065d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68d9      	ldr	r1, [r3, #12]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	440b      	add	r3, r1
 80065d0:	461a      	mov	r2, r3
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	60da      	str	r2, [r3, #12]
 80065d6:	e004      	b.n	80065e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	461a      	mov	r2, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d9bd      	bls.n	8006576 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800660c:	611a      	str	r2, [r3, #16]
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	e048      	b.n	80066ba <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6919      	ldr	r1, [r3, #16]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4613      	mov	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	440b      	add	r3, r1
 8006638:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2200      	movs	r2, #0
 8006644:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2200      	movs	r2, #0
 800664a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2200      	movs	r2, #0
 8006650:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2200      	movs	r2, #0
 8006656:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2200      	movs	r2, #0
 800665c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006664:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	3212      	adds	r2, #18
 8006686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d80c      	bhi.n	80066aa <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6919      	ldr	r1, [r3, #16]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	440b      	add	r3, r1
 80066a2:	461a      	mov	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	60da      	str	r2, [r3, #12]
 80066a8:	e004      	b.n	80066b4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	461a      	mov	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d9b3      	bls.n	8006628 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691a      	ldr	r2, [r3, #16]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ea:	60da      	str	r2, [r3, #12]
}
 80066ec:	bf00      	nop
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b089      	sub	sp, #36	@ 0x24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006702:	2300      	movs	r3, #0
 8006704:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800670e:	2300      	movs	r3, #0
 8006710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006712:	2300      	movs	r3, #0
 8006714:	61fb      	str	r3, [r7, #28]
 8006716:	e175      	b.n	8006a04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006718:	2201      	movs	r2, #1
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4013      	ands	r3, r2
 800672a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	429a      	cmp	r2, r3
 8006732:	f040 8164 	bne.w	80069fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	2b01      	cmp	r3, #1
 8006740:	d005      	beq.n	800674e <HAL_GPIO_Init+0x56>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d130      	bne.n	80067b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	2203      	movs	r2, #3
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	43db      	mvns	r3, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	4013      	ands	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	4313      	orrs	r3, r2
 8006776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006784:	2201      	movs	r2, #1
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	43db      	mvns	r3, r3
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	4013      	ands	r3, r2
 8006792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	091b      	lsrs	r3, r3, #4
 800679a:	f003 0201 	and.w	r2, r3, #1
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d017      	beq.n	80067ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	2203      	movs	r2, #3
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	43db      	mvns	r3, r3
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	4013      	ands	r3, r2
 80067d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f003 0303 	and.w	r3, r3, #3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d123      	bne.n	8006840 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	08da      	lsrs	r2, r3, #3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3208      	adds	r2, #8
 8006800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	220f      	movs	r2, #15
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	43db      	mvns	r3, r3
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	4013      	ands	r3, r2
 800681a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	fa02 f303 	lsl.w	r3, r2, r3
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	4313      	orrs	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	08da      	lsrs	r2, r3, #3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3208      	adds	r2, #8
 800683a:	69b9      	ldr	r1, [r7, #24]
 800683c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	2203      	movs	r2, #3
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	43db      	mvns	r3, r3
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	4013      	ands	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f003 0203 	and.w	r2, r3, #3
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	4313      	orrs	r3, r2
 800686c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 80be 	beq.w	80069fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006882:	4b66      	ldr	r3, [pc, #408]	@ (8006a1c <HAL_GPIO_Init+0x324>)
 8006884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006886:	4a65      	ldr	r2, [pc, #404]	@ (8006a1c <HAL_GPIO_Init+0x324>)
 8006888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800688c:	6453      	str	r3, [r2, #68]	@ 0x44
 800688e:	4b63      	ldr	r3, [pc, #396]	@ (8006a1c <HAL_GPIO_Init+0x324>)
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800689a:	4a61      	ldr	r2, [pc, #388]	@ (8006a20 <HAL_GPIO_Init+0x328>)
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	089b      	lsrs	r3, r3, #2
 80068a0:	3302      	adds	r3, #2
 80068a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	220f      	movs	r2, #15
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	43db      	mvns	r3, r3
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	4013      	ands	r3, r2
 80068bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a58      	ldr	r2, [pc, #352]	@ (8006a24 <HAL_GPIO_Init+0x32c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d037      	beq.n	8006936 <HAL_GPIO_Init+0x23e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a57      	ldr	r2, [pc, #348]	@ (8006a28 <HAL_GPIO_Init+0x330>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d031      	beq.n	8006932 <HAL_GPIO_Init+0x23a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a56      	ldr	r2, [pc, #344]	@ (8006a2c <HAL_GPIO_Init+0x334>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d02b      	beq.n	800692e <HAL_GPIO_Init+0x236>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a55      	ldr	r2, [pc, #340]	@ (8006a30 <HAL_GPIO_Init+0x338>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d025      	beq.n	800692a <HAL_GPIO_Init+0x232>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a54      	ldr	r2, [pc, #336]	@ (8006a34 <HAL_GPIO_Init+0x33c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01f      	beq.n	8006926 <HAL_GPIO_Init+0x22e>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a53      	ldr	r2, [pc, #332]	@ (8006a38 <HAL_GPIO_Init+0x340>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d019      	beq.n	8006922 <HAL_GPIO_Init+0x22a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a52      	ldr	r2, [pc, #328]	@ (8006a3c <HAL_GPIO_Init+0x344>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <HAL_GPIO_Init+0x226>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a51      	ldr	r2, [pc, #324]	@ (8006a40 <HAL_GPIO_Init+0x348>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00d      	beq.n	800691a <HAL_GPIO_Init+0x222>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a50      	ldr	r2, [pc, #320]	@ (8006a44 <HAL_GPIO_Init+0x34c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d007      	beq.n	8006916 <HAL_GPIO_Init+0x21e>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a4f      	ldr	r2, [pc, #316]	@ (8006a48 <HAL_GPIO_Init+0x350>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d101      	bne.n	8006912 <HAL_GPIO_Init+0x21a>
 800690e:	2309      	movs	r3, #9
 8006910:	e012      	b.n	8006938 <HAL_GPIO_Init+0x240>
 8006912:	230a      	movs	r3, #10
 8006914:	e010      	b.n	8006938 <HAL_GPIO_Init+0x240>
 8006916:	2308      	movs	r3, #8
 8006918:	e00e      	b.n	8006938 <HAL_GPIO_Init+0x240>
 800691a:	2307      	movs	r3, #7
 800691c:	e00c      	b.n	8006938 <HAL_GPIO_Init+0x240>
 800691e:	2306      	movs	r3, #6
 8006920:	e00a      	b.n	8006938 <HAL_GPIO_Init+0x240>
 8006922:	2305      	movs	r3, #5
 8006924:	e008      	b.n	8006938 <HAL_GPIO_Init+0x240>
 8006926:	2304      	movs	r3, #4
 8006928:	e006      	b.n	8006938 <HAL_GPIO_Init+0x240>
 800692a:	2303      	movs	r3, #3
 800692c:	e004      	b.n	8006938 <HAL_GPIO_Init+0x240>
 800692e:	2302      	movs	r3, #2
 8006930:	e002      	b.n	8006938 <HAL_GPIO_Init+0x240>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <HAL_GPIO_Init+0x240>
 8006936:	2300      	movs	r3, #0
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	f002 0203 	and.w	r2, r2, #3
 800693e:	0092      	lsls	r2, r2, #2
 8006940:	4093      	lsls	r3, r2
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	4313      	orrs	r3, r2
 8006946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006948:	4935      	ldr	r1, [pc, #212]	@ (8006a20 <HAL_GPIO_Init+0x328>)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	089b      	lsrs	r3, r3, #2
 800694e:	3302      	adds	r3, #2
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006956:	4b3d      	ldr	r3, [pc, #244]	@ (8006a4c <HAL_GPIO_Init+0x354>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	43db      	mvns	r3, r3
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	4013      	ands	r3, r2
 8006964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800697a:	4a34      	ldr	r2, [pc, #208]	@ (8006a4c <HAL_GPIO_Init+0x354>)
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006980:	4b32      	ldr	r3, [pc, #200]	@ (8006a4c <HAL_GPIO_Init+0x354>)
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	43db      	mvns	r3, r3
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	4013      	ands	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80069a4:	4a29      	ldr	r2, [pc, #164]	@ (8006a4c <HAL_GPIO_Init+0x354>)
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80069aa:	4b28      	ldr	r3, [pc, #160]	@ (8006a4c <HAL_GPIO_Init+0x354>)
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	43db      	mvns	r3, r3
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	4013      	ands	r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80069ce:	4a1f      	ldr	r2, [pc, #124]	@ (8006a4c <HAL_GPIO_Init+0x354>)
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80069d4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a4c <HAL_GPIO_Init+0x354>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	43db      	mvns	r3, r3
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	4013      	ands	r3, r2
 80069e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80069f8:	4a14      	ldr	r2, [pc, #80]	@ (8006a4c <HAL_GPIO_Init+0x354>)
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	3301      	adds	r3, #1
 8006a02:	61fb      	str	r3, [r7, #28]
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	2b0f      	cmp	r3, #15
 8006a08:	f67f ae86 	bls.w	8006718 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	3724      	adds	r7, #36	@ 0x24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	40013800 	.word	0x40013800
 8006a24:	40020000 	.word	0x40020000
 8006a28:	40020400 	.word	0x40020400
 8006a2c:	40020800 	.word	0x40020800
 8006a30:	40020c00 	.word	0x40020c00
 8006a34:	40021000 	.word	0x40021000
 8006a38:	40021400 	.word	0x40021400
 8006a3c:	40021800 	.word	0x40021800
 8006a40:	40021c00 	.word	0x40021c00
 8006a44:	40022000 	.word	0x40022000
 8006a48:	40022400 	.word	0x40022400
 8006a4c:	40013c00 	.word	0x40013c00

08006a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	887b      	ldrh	r3, [r7, #2]
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	73fb      	strb	r3, [r7, #15]
 8006a6c:	e001      	b.n	8006a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	807b      	strh	r3, [r7, #2]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a90:	787b      	ldrb	r3, [r7, #1]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a96:	887a      	ldrh	r2, [r7, #2]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006a9c:	e003      	b.n	8006aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006a9e:	887b      	ldrh	r3, [r7, #2]
 8006aa0:	041a      	lsls	r2, r3, #16
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	619a      	str	r2, [r3, #24]
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
	...

08006ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e08b      	b.n	8006bde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d106      	bne.n	8006ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7fc fc42 	bl	8003364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2224      	movs	r2, #36	@ 0x24
 8006ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0201 	bic.w	r2, r2, #1
 8006af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d107      	bne.n	8006b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b2a:	609a      	str	r2, [r3, #8]
 8006b2c:	e006      	b.n	8006b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d108      	bne.n	8006b56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b52:	605a      	str	r2, [r3, #4]
 8006b54:	e007      	b.n	8006b66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6859      	ldr	r1, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	4b1d      	ldr	r3, [pc, #116]	@ (8006be8 <HAL_I2C_Init+0x134>)
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691a      	ldr	r2, [r3, #16]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69d9      	ldr	r1, [r3, #28]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1a      	ldr	r2, [r3, #32]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	02008000 	.word	0x02008000

08006bec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d138      	bne.n	8006c74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e032      	b.n	8006c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2224      	movs	r2, #36	@ 0x24
 8006c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6819      	ldr	r1, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e000      	b.n	8006c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
  }
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	d139      	bne.n	8006d0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e033      	b.n	8006d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2224      	movs	r2, #36	@ 0x24
 8006cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0201 	bic.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006cd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e000      	b.n	8006d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d0c:	2302      	movs	r3, #2
  }
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e08f      	b.n	8006e4c <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d106      	bne.n	8006d46 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7fc fc39 	bl	80035b8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006d5c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6999      	ldr	r1, [r3, #24]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d72:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	041b      	lsls	r3, r3, #16
 8006d88:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6999      	ldr	r1, [r3, #24]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	430a      	orrs	r2, r1
 8006d96:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	041b      	lsls	r3, r3, #16
 8006d9e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a19      	ldr	r1, [r3, #32]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	041b      	lsls	r3, r3, #16
 8006db4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc8:	041b      	lsls	r3, r3, #16
 8006dca:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006dea:	041b      	lsls	r3, r3, #16
 8006dec:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0206 	orr.w	r2, r2, #6
 8006e28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699a      	ldr	r2, [r3, #24]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e62:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e6a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d023      	beq.n	8006ebe <HAL_LTDC_IRQHandler+0x6a>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01e      	beq.n	8006ebe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0204 	bic.w	r2, r2, #4
 8006e8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2204      	movs	r2, #4
 8006e96:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e9e:	f043 0201 	orr.w	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2204      	movs	r2, #4
 8006eac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f86f 	bl	8006f9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d023      	beq.n	8006f10 <HAL_LTDC_IRQHandler+0xbc>
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d01e      	beq.n	8006f10 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0202 	bic.w	r2, r2, #2
 8006ee0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ef0:	f043 0202 	orr.w	r2, r3, #2
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2204      	movs	r2, #4
 8006efe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f846 	bl	8006f9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d01b      	beq.n	8006f52 <HAL_LTDC_IRQHandler+0xfe>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d016      	beq.n	8006f52 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0201 	bic.w	r2, r2, #1
 8006f32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f82f 	bl	8006fb0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01b      	beq.n	8006f94 <HAL_LTDC_IRQHandler+0x140>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 0308 	and.w	r3, r3, #8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d016      	beq.n	8006f94 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0208 	bic.w	r2, r2, #8
 8006f74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2208      	movs	r2, #8
 8006f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f818 	bl	8006fc4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006fd8:	b5b0      	push	{r4, r5, r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d101      	bne.n	8006ff2 <HAL_LTDC_ConfigLayer+0x1a>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e02c      	b.n	800704c <HAL_LTDC_ConfigLayer+0x74>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2134      	movs	r1, #52	@ 0x34
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	4413      	add	r3, r2
 800700e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4614      	mov	r4, r2
 8007016:	461d      	mov	r5, r3
 8007018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800701a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800701c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800701e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f811 	bl	8007054 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2201      	movs	r2, #1
 8007038:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bdb0      	pop	{r4, r5, r7, pc}

08007054 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007054:	b480      	push	{r7}
 8007056:	b089      	sub	sp, #36	@ 0x24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	0c1b      	lsrs	r3, r3, #16
 800706c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007070:	4413      	add	r3, r2
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	01db      	lsls	r3, r3, #7
 8007080:	4413      	add	r3, r2
 8007082:	3384      	adds	r3, #132	@ 0x84
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	4611      	mov	r1, r2
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	01d2      	lsls	r2, r2, #7
 8007090:	440a      	add	r2, r1
 8007092:	3284      	adds	r2, #132	@ 0x84
 8007094:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007098:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	0c1b      	lsrs	r3, r3, #16
 80070a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80070aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80070ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4619      	mov	r1, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	01db      	lsls	r3, r3, #7
 80070b8:	440b      	add	r3, r1
 80070ba:	3384      	adds	r3, #132	@ 0x84
 80070bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80070c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070d2:	4413      	add	r3, r2
 80070d4:	041b      	lsls	r3, r3, #16
 80070d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	01db      	lsls	r3, r3, #7
 80070e2:	4413      	add	r3, r2
 80070e4:	3384      	adds	r3, #132	@ 0x84
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	4611      	mov	r1, r2
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	01d2      	lsls	r2, r2, #7
 80070f2:	440a      	add	r2, r1
 80070f4:	3284      	adds	r2, #132	@ 0x84
 80070f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80070fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800710a:	4413      	add	r3, r2
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4619      	mov	r1, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	01db      	lsls	r3, r3, #7
 8007118:	440b      	add	r3, r1
 800711a:	3384      	adds	r3, #132	@ 0x84
 800711c:	4619      	mov	r1, r3
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	4313      	orrs	r3, r2
 8007122:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	01db      	lsls	r3, r3, #7
 800712e:	4413      	add	r3, r2
 8007130:	3384      	adds	r3, #132	@ 0x84
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	6812      	ldr	r2, [r2, #0]
 8007138:	4611      	mov	r1, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	01d2      	lsls	r2, r2, #7
 800713e:	440a      	add	r2, r1
 8007140:	3284      	adds	r2, #132	@ 0x84
 8007142:	f023 0307 	bic.w	r3, r3, #7
 8007146:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	01db      	lsls	r3, r3, #7
 8007152:	4413      	add	r3, r2
 8007154:	3384      	adds	r3, #132	@ 0x84
 8007156:	461a      	mov	r2, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007164:	021b      	lsls	r3, r3, #8
 8007166:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800716e:	041b      	lsls	r3, r3, #16
 8007170:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	061b      	lsls	r3, r3, #24
 8007178:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007180:	461a      	mov	r2, r3
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	431a      	orrs	r2, r3
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	431a      	orrs	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4619      	mov	r1, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	01db      	lsls	r3, r3, #7
 8007194:	440b      	add	r3, r1
 8007196:	3384      	adds	r3, #132	@ 0x84
 8007198:	4619      	mov	r1, r3
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	4313      	orrs	r3, r2
 800719e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	01db      	lsls	r3, r3, #7
 80071aa:	4413      	add	r3, r2
 80071ac:	3384      	adds	r3, #132	@ 0x84
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	6812      	ldr	r2, [r2, #0]
 80071b4:	4611      	mov	r1, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	01d2      	lsls	r2, r2, #7
 80071ba:	440a      	add	r2, r1
 80071bc:	3284      	adds	r2, #132	@ 0x84
 80071be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80071c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	01db      	lsls	r3, r3, #7
 80071ce:	4413      	add	r3, r2
 80071d0:	3384      	adds	r3, #132	@ 0x84
 80071d2:	461a      	mov	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	01db      	lsls	r3, r3, #7
 80071e4:	4413      	add	r3, r2
 80071e6:	3384      	adds	r3, #132	@ 0x84
 80071e8:	69da      	ldr	r2, [r3, #28]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4619      	mov	r1, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	01db      	lsls	r3, r3, #7
 80071f4:	440b      	add	r3, r1
 80071f6:	3384      	adds	r3, #132	@ 0x84
 80071f8:	4619      	mov	r1, r3
 80071fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007338 <LTDC_SetConfig+0x2e4>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	68f9      	ldr	r1, [r7, #12]
 800720a:	6809      	ldr	r1, [r1, #0]
 800720c:	4608      	mov	r0, r1
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	01c9      	lsls	r1, r1, #7
 8007212:	4401      	add	r1, r0
 8007214:	3184      	adds	r1, #132	@ 0x84
 8007216:	4313      	orrs	r3, r2
 8007218:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	01db      	lsls	r3, r3, #7
 8007224:	4413      	add	r3, r2
 8007226:	3384      	adds	r3, #132	@ 0x84
 8007228:	461a      	mov	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d102      	bne.n	800723e <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8007238:	2304      	movs	r3, #4
 800723a:	61fb      	str	r3, [r7, #28]
 800723c:	e01b      	b.n	8007276 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d102      	bne.n	800724c <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8007246:	2303      	movs	r3, #3
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	e014      	b.n	8007276 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b04      	cmp	r3, #4
 8007252:	d00b      	beq.n	800726c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007258:	2b02      	cmp	r3, #2
 800725a:	d007      	beq.n	800726c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007260:	2b03      	cmp	r3, #3
 8007262:	d003      	beq.n	800726c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007268:	2b07      	cmp	r3, #7
 800726a:	d102      	bne.n	8007272 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800726c:	2302      	movs	r3, #2
 800726e:	61fb      	str	r3, [r7, #28]
 8007270:	e001      	b.n	8007276 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8007272:	2301      	movs	r3, #1
 8007274:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	01db      	lsls	r3, r3, #7
 8007280:	4413      	add	r3, r2
 8007282:	3384      	adds	r3, #132	@ 0x84
 8007284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	4611      	mov	r1, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	01d2      	lsls	r2, r2, #7
 8007290:	440a      	add	r2, r1
 8007292:	3284      	adds	r2, #132	@ 0x84
 8007294:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007298:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	fb02 f303 	mul.w	r3, r2, r3
 80072a4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	6859      	ldr	r1, [r3, #4]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	1acb      	subs	r3, r1, r3
 80072b0:	69f9      	ldr	r1, [r7, #28]
 80072b2:	fb01 f303 	mul.w	r3, r1, r3
 80072b6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80072b8:	68f9      	ldr	r1, [r7, #12]
 80072ba:	6809      	ldr	r1, [r1, #0]
 80072bc:	4608      	mov	r0, r1
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	01c9      	lsls	r1, r1, #7
 80072c2:	4401      	add	r1, r0
 80072c4:	3184      	adds	r1, #132	@ 0x84
 80072c6:	4313      	orrs	r3, r2
 80072c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	01db      	lsls	r3, r3, #7
 80072d4:	4413      	add	r3, r2
 80072d6:	3384      	adds	r3, #132	@ 0x84
 80072d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4619      	mov	r1, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	01db      	lsls	r3, r3, #7
 80072e4:	440b      	add	r3, r1
 80072e6:	3384      	adds	r3, #132	@ 0x84
 80072e8:	4619      	mov	r1, r3
 80072ea:	4b14      	ldr	r3, [pc, #80]	@ (800733c <LTDC_SetConfig+0x2e8>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	01db      	lsls	r3, r3, #7
 80072fa:	4413      	add	r3, r2
 80072fc:	3384      	adds	r3, #132	@ 0x84
 80072fe:	461a      	mov	r2, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007304:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	01db      	lsls	r3, r3, #7
 8007310:	4413      	add	r3, r2
 8007312:	3384      	adds	r3, #132	@ 0x84
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	4611      	mov	r1, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	01d2      	lsls	r2, r2, #7
 8007320:	440a      	add	r2, r1
 8007322:	3284      	adds	r2, #132	@ 0x84
 8007324:	f043 0301 	orr.w	r3, r3, #1
 8007328:	6013      	str	r3, [r2, #0]
}
 800732a:	bf00      	nop
 800732c:	3724      	adds	r7, #36	@ 0x24
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	fffff8f8 	.word	0xfffff8f8
 800733c:	fffff800 	.word	0xfffff800

08007340 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007344:	4b05      	ldr	r3, [pc, #20]	@ (800735c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a04      	ldr	r2, [pc, #16]	@ (800735c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800734a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800734e:	6013      	str	r3, [r2, #0]
}
 8007350:	bf00      	nop
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40007000 	.word	0x40007000

08007360 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800736a:	4b23      	ldr	r3, [pc, #140]	@ (80073f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	4a22      	ldr	r2, [pc, #136]	@ (80073f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007374:	6413      	str	r3, [r2, #64]	@ 0x40
 8007376:	4b20      	ldr	r3, [pc, #128]	@ (80073f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800737a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007382:	4b1e      	ldr	r3, [pc, #120]	@ (80073fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1d      	ldr	r2, [pc, #116]	@ (80073fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800738c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800738e:	f7fd fe37 	bl	8005000 <HAL_GetTick>
 8007392:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007394:	e009      	b.n	80073aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007396:	f7fd fe33 	bl	8005000 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073a4:	d901      	bls.n	80073aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e022      	b.n	80073f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80073aa:	4b14      	ldr	r3, [pc, #80]	@ (80073fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b6:	d1ee      	bne.n	8007396 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80073b8:	4b10      	ldr	r3, [pc, #64]	@ (80073fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a0f      	ldr	r2, [pc, #60]	@ (80073fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80073be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073c4:	f7fd fe1c 	bl	8005000 <HAL_GetTick>
 80073c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073ca:	e009      	b.n	80073e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80073cc:	f7fd fe18 	bl	8005000 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073da:	d901      	bls.n	80073e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e007      	b.n	80073f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073e0:	4b06      	ldr	r3, [pc, #24]	@ (80073fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073ec:	d1ee      	bne.n	80073cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	40023800 	.word	0x40023800
 80073fc:	40007000 	.word	0x40007000

08007400 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af02      	add	r7, sp, #8
 8007406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007408:	f7fd fdfa 	bl	8005000 <HAL_GetTick>
 800740c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e067      	b.n	80074e8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10b      	bne.n	800743c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7fc facb 	bl	80039c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007432:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f85e 	bl	80074f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	3b01      	subs	r3, #1
 800744c:	021a      	lsls	r2, r3, #8
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	2120      	movs	r1, #32
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f856 	bl	8007514 <QSPI_WaitFlagStateUntilTimeout>
 8007468:	4603      	mov	r3, r0
 800746a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800746c:	7afb      	ldrb	r3, [r7, #11]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d135      	bne.n	80074de <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	4b1d      	ldr	r3, [pc, #116]	@ (80074f0 <HAL_QSPI_Init+0xf0>)
 800747a:	4013      	ands	r3, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6852      	ldr	r2, [r2, #4]
 8007480:	0611      	lsls	r1, r2, #24
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68d2      	ldr	r2, [r2, #12]
 8007486:	4311      	orrs	r1, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	69d2      	ldr	r2, [r2, #28]
 800748c:	4311      	orrs	r1, r2
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6a12      	ldr	r2, [r2, #32]
 8007492:	4311      	orrs	r1, r2
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6812      	ldr	r2, [r2, #0]
 8007498:	430b      	orrs	r3, r1
 800749a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	4b14      	ldr	r3, [pc, #80]	@ (80074f4 <HAL_QSPI_Init+0xf4>)
 80074a4:	4013      	ands	r3, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6912      	ldr	r2, [r2, #16]
 80074aa:	0411      	lsls	r1, r2, #16
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6952      	ldr	r2, [r2, #20]
 80074b0:	4311      	orrs	r1, r2
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6992      	ldr	r2, [r2, #24]
 80074b6:	4311      	orrs	r1, r2
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6812      	ldr	r2, [r2, #0]
 80074bc:	430b      	orrs	r3, r1
 80074be:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 0201 	orr.w	r2, r2, #1
 80074ce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80074e6:	7afb      	ldrb	r3, [r7, #11]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	00ffff2f 	.word	0x00ffff2f
 80074f4:	ffe0f8fe 	.word	0xffe0f8fe

080074f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007524:	e01a      	b.n	800755c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752c:	d016      	beq.n	800755c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800752e:	f7fd fd67 	bl	8005000 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	429a      	cmp	r2, r3
 800753c:	d302      	bcc.n	8007544 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10b      	bne.n	800755c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2204      	movs	r2, #4
 8007548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007550:	f043 0201 	orr.w	r2, r3, #1
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e00e      	b.n	800757a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	4013      	ands	r3, r2
 8007566:	2b00      	cmp	r3, #0
 8007568:	bf14      	ite	ne
 800756a:	2301      	movne	r3, #1
 800756c:	2300      	moveq	r3, #0
 800756e:	b2db      	uxtb	r3, r3
 8007570:	461a      	mov	r2, r3
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	429a      	cmp	r2, r3
 8007576:	d1d6      	bne.n	8007526 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800758c:	2300      	movs	r3, #0
 800758e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e291      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 8087 	beq.w	80076b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80075a8:	4b96      	ldr	r3, [pc, #600]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f003 030c 	and.w	r3, r3, #12
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d00c      	beq.n	80075ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075b4:	4b93      	ldr	r3, [pc, #588]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 030c 	and.w	r3, r3, #12
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d112      	bne.n	80075e6 <HAL_RCC_OscConfig+0x62>
 80075c0:	4b90      	ldr	r3, [pc, #576]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075cc:	d10b      	bne.n	80075e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d06c      	beq.n	80076b4 <HAL_RCC_OscConfig+0x130>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d168      	bne.n	80076b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e26b      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ee:	d106      	bne.n	80075fe <HAL_RCC_OscConfig+0x7a>
 80075f0:	4b84      	ldr	r3, [pc, #528]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a83      	ldr	r2, [pc, #524]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80075f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	e02e      	b.n	800765c <HAL_RCC_OscConfig+0xd8>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10c      	bne.n	8007620 <HAL_RCC_OscConfig+0x9c>
 8007606:	4b7f      	ldr	r3, [pc, #508]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a7e      	ldr	r2, [pc, #504]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800760c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	4b7c      	ldr	r3, [pc, #496]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a7b      	ldr	r2, [pc, #492]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	e01d      	b.n	800765c <HAL_RCC_OscConfig+0xd8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007628:	d10c      	bne.n	8007644 <HAL_RCC_OscConfig+0xc0>
 800762a:	4b76      	ldr	r3, [pc, #472]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a75      	ldr	r2, [pc, #468]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	4b73      	ldr	r3, [pc, #460]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a72      	ldr	r2, [pc, #456]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800763c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	e00b      	b.n	800765c <HAL_RCC_OscConfig+0xd8>
 8007644:	4b6f      	ldr	r3, [pc, #444]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a6e      	ldr	r2, [pc, #440]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800764a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	4b6c      	ldr	r3, [pc, #432]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a6b      	ldr	r2, [pc, #428]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800765a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d013      	beq.n	800768c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fd fccc 	bl	8005000 <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800766c:	f7fd fcc8 	bl	8005000 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b64      	cmp	r3, #100	@ 0x64
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e21f      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800767e:	4b61      	ldr	r3, [pc, #388]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0f0      	beq.n	800766c <HAL_RCC_OscConfig+0xe8>
 800768a:	e014      	b.n	80076b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800768c:	f7fd fcb8 	bl	8005000 <HAL_GetTick>
 8007690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007692:	e008      	b.n	80076a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007694:	f7fd fcb4 	bl	8005000 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b64      	cmp	r3, #100	@ 0x64
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e20b      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076a6:	4b57      	ldr	r3, [pc, #348]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f0      	bne.n	8007694 <HAL_RCC_OscConfig+0x110>
 80076b2:	e000      	b.n	80076b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d069      	beq.n	8007796 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80076c2:	4b50      	ldr	r3, [pc, #320]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 030c 	and.w	r3, r3, #12
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076ce:	4b4d      	ldr	r3, [pc, #308]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 030c 	and.w	r3, r3, #12
 80076d6:	2b08      	cmp	r3, #8
 80076d8:	d11c      	bne.n	8007714 <HAL_RCC_OscConfig+0x190>
 80076da:	4b4a      	ldr	r3, [pc, #296]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d116      	bne.n	8007714 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076e6:	4b47      	ldr	r3, [pc, #284]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_RCC_OscConfig+0x17a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d001      	beq.n	80076fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e1df      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076fe:	4b41      	ldr	r3, [pc, #260]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	493d      	ldr	r1, [pc, #244]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800770e:	4313      	orrs	r3, r2
 8007710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007712:	e040      	b.n	8007796 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d023      	beq.n	8007764 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800771c:	4b39      	ldr	r3, [pc, #228]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a38      	ldr	r2, [pc, #224]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007722:	f043 0301 	orr.w	r3, r3, #1
 8007726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007728:	f7fd fc6a 	bl	8005000 <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007730:	f7fd fc66 	bl	8005000 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e1bd      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007742:	4b30      	ldr	r3, [pc, #192]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0f0      	beq.n	8007730 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800774e:	4b2d      	ldr	r3, [pc, #180]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	4929      	ldr	r1, [pc, #164]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800775e:	4313      	orrs	r3, r2
 8007760:	600b      	str	r3, [r1, #0]
 8007762:	e018      	b.n	8007796 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007764:	4b27      	ldr	r3, [pc, #156]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a26      	ldr	r2, [pc, #152]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007770:	f7fd fc46 	bl	8005000 <HAL_GetTick>
 8007774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007778:	f7fd fc42 	bl	8005000 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e199      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800778a:	4b1e      	ldr	r3, [pc, #120]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1f0      	bne.n	8007778 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0308 	and.w	r3, r3, #8
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d038      	beq.n	8007814 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d019      	beq.n	80077de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077aa:	4b16      	ldr	r3, [pc, #88]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ae:	4a15      	ldr	r2, [pc, #84]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077b0:	f043 0301 	orr.w	r3, r3, #1
 80077b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077b6:	f7fd fc23 	bl	8005000 <HAL_GetTick>
 80077ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077bc:	e008      	b.n	80077d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077be:	f7fd fc1f 	bl	8005000 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d901      	bls.n	80077d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e176      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0f0      	beq.n	80077be <HAL_RCC_OscConfig+0x23a>
 80077dc:	e01a      	b.n	8007814 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077de:	4b09      	ldr	r3, [pc, #36]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077e2:	4a08      	ldr	r2, [pc, #32]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ea:	f7fd fc09 	bl	8005000 <HAL_GetTick>
 80077ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077f0:	e00a      	b.n	8007808 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077f2:	f7fd fc05 	bl	8005000 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d903      	bls.n	8007808 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e15c      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
 8007804:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007808:	4b91      	ldr	r3, [pc, #580]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 800780a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1ee      	bne.n	80077f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80a4 	beq.w	800796a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007822:	4b8b      	ldr	r3, [pc, #556]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10d      	bne.n	800784a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800782e:	4b88      	ldr	r3, [pc, #544]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007832:	4a87      	ldr	r2, [pc, #540]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007838:	6413      	str	r3, [r2, #64]	@ 0x40
 800783a:	4b85      	ldr	r3, [pc, #532]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 800783c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007842:	60bb      	str	r3, [r7, #8]
 8007844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007846:	2301      	movs	r3, #1
 8007848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800784a:	4b82      	ldr	r3, [pc, #520]	@ (8007a54 <HAL_RCC_OscConfig+0x4d0>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007852:	2b00      	cmp	r3, #0
 8007854:	d118      	bne.n	8007888 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007856:	4b7f      	ldr	r3, [pc, #508]	@ (8007a54 <HAL_RCC_OscConfig+0x4d0>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a54 <HAL_RCC_OscConfig+0x4d0>)
 800785c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007862:	f7fd fbcd 	bl	8005000 <HAL_GetTick>
 8007866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007868:	e008      	b.n	800787c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800786a:	f7fd fbc9 	bl	8005000 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b64      	cmp	r3, #100	@ 0x64
 8007876:	d901      	bls.n	800787c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e120      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800787c:	4b75      	ldr	r3, [pc, #468]	@ (8007a54 <HAL_RCC_OscConfig+0x4d0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0f0      	beq.n	800786a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d106      	bne.n	800789e <HAL_RCC_OscConfig+0x31a>
 8007890:	4b6f      	ldr	r3, [pc, #444]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007894:	4a6e      	ldr	r2, [pc, #440]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007896:	f043 0301 	orr.w	r3, r3, #1
 800789a:	6713      	str	r3, [r2, #112]	@ 0x70
 800789c:	e02d      	b.n	80078fa <HAL_RCC_OscConfig+0x376>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10c      	bne.n	80078c0 <HAL_RCC_OscConfig+0x33c>
 80078a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078aa:	4a69      	ldr	r2, [pc, #420]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078ac:	f023 0301 	bic.w	r3, r3, #1
 80078b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80078b2:	4b67      	ldr	r3, [pc, #412]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b6:	4a66      	ldr	r2, [pc, #408]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078b8:	f023 0304 	bic.w	r3, r3, #4
 80078bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80078be:	e01c      	b.n	80078fa <HAL_RCC_OscConfig+0x376>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	2b05      	cmp	r3, #5
 80078c6:	d10c      	bne.n	80078e2 <HAL_RCC_OscConfig+0x35e>
 80078c8:	4b61      	ldr	r3, [pc, #388]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078cc:	4a60      	ldr	r2, [pc, #384]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078ce:	f043 0304 	orr.w	r3, r3, #4
 80078d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80078d4:	4b5e      	ldr	r3, [pc, #376]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078d8:	4a5d      	ldr	r2, [pc, #372]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	6713      	str	r3, [r2, #112]	@ 0x70
 80078e0:	e00b      	b.n	80078fa <HAL_RCC_OscConfig+0x376>
 80078e2:	4b5b      	ldr	r3, [pc, #364]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e6:	4a5a      	ldr	r2, [pc, #360]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80078ee:	4b58      	ldr	r3, [pc, #352]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f2:	4a57      	ldr	r2, [pc, #348]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80078f4:	f023 0304 	bic.w	r3, r3, #4
 80078f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d015      	beq.n	800792e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007902:	f7fd fb7d 	bl	8005000 <HAL_GetTick>
 8007906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007908:	e00a      	b.n	8007920 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800790a:	f7fd fb79 	bl	8005000 <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007918:	4293      	cmp	r3, r2
 800791a:	d901      	bls.n	8007920 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e0ce      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007920:	4b4b      	ldr	r3, [pc, #300]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0ee      	beq.n	800790a <HAL_RCC_OscConfig+0x386>
 800792c:	e014      	b.n	8007958 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800792e:	f7fd fb67 	bl	8005000 <HAL_GetTick>
 8007932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007934:	e00a      	b.n	800794c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007936:	f7fd fb63 	bl	8005000 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007944:	4293      	cmp	r3, r2
 8007946:	d901      	bls.n	800794c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e0b8      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800794c:	4b40      	ldr	r3, [pc, #256]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 800794e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1ee      	bne.n	8007936 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d105      	bne.n	800796a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800795e:	4b3c      	ldr	r3, [pc, #240]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007962:	4a3b      	ldr	r2, [pc, #236]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007968:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80a4 	beq.w	8007abc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007974:	4b36      	ldr	r3, [pc, #216]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f003 030c 	and.w	r3, r3, #12
 800797c:	2b08      	cmp	r3, #8
 800797e:	d06b      	beq.n	8007a58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	2b02      	cmp	r3, #2
 8007986:	d149      	bne.n	8007a1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007988:	4b31      	ldr	r3, [pc, #196]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a30      	ldr	r2, [pc, #192]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 800798e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007994:	f7fd fb34 	bl	8005000 <HAL_GetTick>
 8007998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800799a:	e008      	b.n	80079ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800799c:	f7fd fb30 	bl	8005000 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d901      	bls.n	80079ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e087      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ae:	4b28      	ldr	r3, [pc, #160]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1f0      	bne.n	800799c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69da      	ldr	r2, [r3, #28]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c8:	019b      	lsls	r3, r3, #6
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	3b01      	subs	r3, #1
 80079d4:	041b      	lsls	r3, r3, #16
 80079d6:	431a      	orrs	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079dc:	061b      	lsls	r3, r3, #24
 80079de:	4313      	orrs	r3, r2
 80079e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80079e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079e8:	4b19      	ldr	r3, [pc, #100]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a18      	ldr	r2, [pc, #96]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 80079ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f4:	f7fd fb04 	bl	8005000 <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079fc:	f7fd fb00 	bl	8005000 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e057      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a0e:	4b10      	ldr	r3, [pc, #64]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0f0      	beq.n	80079fc <HAL_RCC_OscConfig+0x478>
 8007a1a:	e04f      	b.n	8007abc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a0b      	ldr	r2, [pc, #44]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a28:	f7fd faea 	bl	8005000 <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2e:	e008      	b.n	8007a42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a30:	f7fd fae6 	bl	8005000 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e03d      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a42:	4b03      	ldr	r3, [pc, #12]	@ (8007a50 <HAL_RCC_OscConfig+0x4cc>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1f0      	bne.n	8007a30 <HAL_RCC_OscConfig+0x4ac>
 8007a4e:	e035      	b.n	8007abc <HAL_RCC_OscConfig+0x538>
 8007a50:	40023800 	.word	0x40023800
 8007a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007a58:	4b1b      	ldr	r3, [pc, #108]	@ (8007ac8 <HAL_RCC_OscConfig+0x544>)
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d028      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d121      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d11a      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a88:	4013      	ands	r3, r2
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d111      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9e:	085b      	lsrs	r3, r3, #1
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d107      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d001      	beq.n	8007abc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e000      	b.n	8007abe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40023800 	.word	0x40023800

08007acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e0d0      	b.n	8007c86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8007c90 <HAL_RCC_ClockConfig+0x1c4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 030f 	and.w	r3, r3, #15
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d910      	bls.n	8007b14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007af2:	4b67      	ldr	r3, [pc, #412]	@ (8007c90 <HAL_RCC_ClockConfig+0x1c4>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f023 020f 	bic.w	r2, r3, #15
 8007afa:	4965      	ldr	r1, [pc, #404]	@ (8007c90 <HAL_RCC_ClockConfig+0x1c4>)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b02:	4b63      	ldr	r3, [pc, #396]	@ (8007c90 <HAL_RCC_ClockConfig+0x1c4>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d001      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e0b8      	b.n	8007c86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d020      	beq.n	8007b62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b2c:	4b59      	ldr	r3, [pc, #356]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	4a58      	ldr	r2, [pc, #352]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007b32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007b36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b44:	4b53      	ldr	r3, [pc, #332]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	4a52      	ldr	r2, [pc, #328]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007b4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007b4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b50:	4b50      	ldr	r3, [pc, #320]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	494d      	ldr	r1, [pc, #308]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d040      	beq.n	8007bf0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d107      	bne.n	8007b86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b76:	4b47      	ldr	r3, [pc, #284]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d115      	bne.n	8007bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e07f      	b.n	8007c86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d107      	bne.n	8007b9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b8e:	4b41      	ldr	r3, [pc, #260]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d109      	bne.n	8007bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e073      	b.n	8007c86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e06b      	b.n	8007c86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bae:	4b39      	ldr	r3, [pc, #228]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f023 0203 	bic.w	r2, r3, #3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	4936      	ldr	r1, [pc, #216]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc0:	f7fd fa1e 	bl	8005000 <HAL_GetTick>
 8007bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bc6:	e00a      	b.n	8007bde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bc8:	f7fd fa1a 	bl	8005000 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d901      	bls.n	8007bde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e053      	b.n	8007c86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bde:	4b2d      	ldr	r3, [pc, #180]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f003 020c 	and.w	r2, r3, #12
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d1eb      	bne.n	8007bc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bf0:	4b27      	ldr	r3, [pc, #156]	@ (8007c90 <HAL_RCC_ClockConfig+0x1c4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 030f 	and.w	r3, r3, #15
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d210      	bcs.n	8007c20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bfe:	4b24      	ldr	r3, [pc, #144]	@ (8007c90 <HAL_RCC_ClockConfig+0x1c4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f023 020f 	bic.w	r2, r3, #15
 8007c06:	4922      	ldr	r1, [pc, #136]	@ (8007c90 <HAL_RCC_ClockConfig+0x1c4>)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c0e:	4b20      	ldr	r3, [pc, #128]	@ (8007c90 <HAL_RCC_ClockConfig+0x1c4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d001      	beq.n	8007c20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e032      	b.n	8007c86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c2c:	4b19      	ldr	r3, [pc, #100]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	4916      	ldr	r1, [pc, #88]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0308 	and.w	r3, r3, #8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c4a:	4b12      	ldr	r3, [pc, #72]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	490e      	ldr	r1, [pc, #56]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c5e:	f000 f821 	bl	8007ca4 <HAL_RCC_GetSysClockFreq>
 8007c62:	4602      	mov	r2, r0
 8007c64:	4b0b      	ldr	r3, [pc, #44]	@ (8007c94 <HAL_RCC_ClockConfig+0x1c8>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	091b      	lsrs	r3, r3, #4
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	490a      	ldr	r1, [pc, #40]	@ (8007c98 <HAL_RCC_ClockConfig+0x1cc>)
 8007c70:	5ccb      	ldrb	r3, [r1, r3]
 8007c72:	fa22 f303 	lsr.w	r3, r2, r3
 8007c76:	4a09      	ldr	r2, [pc, #36]	@ (8007c9c <HAL_RCC_ClockConfig+0x1d0>)
 8007c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c7a:	4b09      	ldr	r3, [pc, #36]	@ (8007ca0 <HAL_RCC_ClockConfig+0x1d4>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fc faf6 	bl	8004270 <HAL_InitTick>

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	40023c00 	.word	0x40023c00
 8007c94:	40023800 	.word	0x40023800
 8007c98:	0801675c 	.word	0x0801675c
 8007c9c:	20000004 	.word	0x20000004
 8007ca0:	20000008 	.word	0x20000008

08007ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ca8:	b090      	sub	sp, #64	@ 0x40
 8007caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cbc:	4b59      	ldr	r3, [pc, #356]	@ (8007e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f003 030c 	and.w	r3, r3, #12
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d00d      	beq.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	f200 80a1 	bhi.w	8007e10 <HAL_RCC_GetSysClockFreq+0x16c>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d003      	beq.n	8007cde <HAL_RCC_GetSysClockFreq+0x3a>
 8007cd6:	e09b      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cd8:	4b53      	ldr	r3, [pc, #332]	@ (8007e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8007cda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007cdc:	e09b      	b.n	8007e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cde:	4b53      	ldr	r3, [pc, #332]	@ (8007e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8007ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ce2:	e098      	b.n	8007e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8007e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007cee:	4b4d      	ldr	r3, [pc, #308]	@ (8007e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d028      	beq.n	8007d4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8007e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	099b      	lsrs	r3, r3, #6
 8007d00:	2200      	movs	r2, #0
 8007d02:	623b      	str	r3, [r7, #32]
 8007d04:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4b47      	ldr	r3, [pc, #284]	@ (8007e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8007d10:	fb03 f201 	mul.w	r2, r3, r1
 8007d14:	2300      	movs	r3, #0
 8007d16:	fb00 f303 	mul.w	r3, r0, r3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	4a43      	ldr	r2, [pc, #268]	@ (8007e2c <HAL_RCC_GetSysClockFreq+0x188>)
 8007d1e:	fba0 1202 	umull	r1, r2, r0, r2
 8007d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d24:	460a      	mov	r2, r1
 8007d26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d2a:	4413      	add	r3, r2
 8007d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d30:	2200      	movs	r2, #0
 8007d32:	61bb      	str	r3, [r7, #24]
 8007d34:	61fa      	str	r2, [r7, #28]
 8007d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007d3e:	f7f8 ffc3 	bl	8000cc8 <__aeabi_uldivmod>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4613      	mov	r3, r2
 8007d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d4a:	e053      	b.n	8007df4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d4c:	4b35      	ldr	r3, [pc, #212]	@ (8007e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	099b      	lsrs	r3, r3, #6
 8007d52:	2200      	movs	r2, #0
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	617a      	str	r2, [r7, #20]
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007d5e:	f04f 0b00 	mov.w	fp, #0
 8007d62:	4652      	mov	r2, sl
 8007d64:	465b      	mov	r3, fp
 8007d66:	f04f 0000 	mov.w	r0, #0
 8007d6a:	f04f 0100 	mov.w	r1, #0
 8007d6e:	0159      	lsls	r1, r3, #5
 8007d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d74:	0150      	lsls	r0, r2, #5
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	ebb2 080a 	subs.w	r8, r2, sl
 8007d7e:	eb63 090b 	sbc.w	r9, r3, fp
 8007d82:	f04f 0200 	mov.w	r2, #0
 8007d86:	f04f 0300 	mov.w	r3, #0
 8007d8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d96:	ebb2 0408 	subs.w	r4, r2, r8
 8007d9a:	eb63 0509 	sbc.w	r5, r3, r9
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	f04f 0300 	mov.w	r3, #0
 8007da6:	00eb      	lsls	r3, r5, #3
 8007da8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dac:	00e2      	lsls	r2, r4, #3
 8007dae:	4614      	mov	r4, r2
 8007db0:	461d      	mov	r5, r3
 8007db2:	eb14 030a 	adds.w	r3, r4, sl
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	eb45 030b 	adc.w	r3, r5, fp
 8007dbc:	607b      	str	r3, [r7, #4]
 8007dbe:	f04f 0200 	mov.w	r2, #0
 8007dc2:	f04f 0300 	mov.w	r3, #0
 8007dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007dca:	4629      	mov	r1, r5
 8007dcc:	028b      	lsls	r3, r1, #10
 8007dce:	4621      	mov	r1, r4
 8007dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	028a      	lsls	r2, r1, #10
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dde:	2200      	movs	r2, #0
 8007de0:	60bb      	str	r3, [r7, #8]
 8007de2:	60fa      	str	r2, [r7, #12]
 8007de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007de8:	f7f8 ff6e 	bl	8000cc8 <__aeabi_uldivmod>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4613      	mov	r3, r2
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007df4:	4b0b      	ldr	r3, [pc, #44]	@ (8007e24 <HAL_RCC_GetSysClockFreq+0x180>)
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	0c1b      	lsrs	r3, r3, #16
 8007dfa:	f003 0303 	and.w	r3, r3, #3
 8007dfe:	3301      	adds	r3, #1
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007e04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e0e:	e002      	b.n	8007e16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e10:	4b05      	ldr	r3, [pc, #20]	@ (8007e28 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3740      	adds	r7, #64	@ 0x40
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e22:	bf00      	nop
 8007e24:	40023800 	.word	0x40023800
 8007e28:	00f42400 	.word	0x00f42400
 8007e2c:	017d7840 	.word	0x017d7840

08007e30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e34:	4b03      	ldr	r3, [pc, #12]	@ (8007e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e36:	681b      	ldr	r3, [r3, #0]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	20000004 	.word	0x20000004

08007e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e4c:	f7ff fff0 	bl	8007e30 <HAL_RCC_GetHCLKFreq>
 8007e50:	4602      	mov	r2, r0
 8007e52:	4b05      	ldr	r3, [pc, #20]	@ (8007e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	0a9b      	lsrs	r3, r3, #10
 8007e58:	f003 0307 	and.w	r3, r3, #7
 8007e5c:	4903      	ldr	r1, [pc, #12]	@ (8007e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e5e:	5ccb      	ldrb	r3, [r1, r3]
 8007e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	40023800 	.word	0x40023800
 8007e6c:	0801676c 	.word	0x0801676c

08007e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e74:	f7ff ffdc 	bl	8007e30 <HAL_RCC_GetHCLKFreq>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	4b05      	ldr	r3, [pc, #20]	@ (8007e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	0b5b      	lsrs	r3, r3, #13
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	4903      	ldr	r1, [pc, #12]	@ (8007e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e86:	5ccb      	ldrb	r3, [r1, r3]
 8007e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	40023800 	.word	0x40023800
 8007e94:	0801676c 	.word	0x0801676c

08007e98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	220f      	movs	r2, #15
 8007ea6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ea8:	4b12      	ldr	r3, [pc, #72]	@ (8007ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 0203 	and.w	r2, r3, #3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8007ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007ecc:	4b09      	ldr	r3, [pc, #36]	@ (8007ef4 <HAL_RCC_GetClockConfig+0x5c>)
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	08db      	lsrs	r3, r3, #3
 8007ed2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007eda:	4b07      	ldr	r3, [pc, #28]	@ (8007ef8 <HAL_RCC_GetClockConfig+0x60>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 020f 	and.w	r2, r3, #15
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	601a      	str	r2, [r3, #0]
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	40023c00 	.word	0x40023c00

08007efc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d012      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f24:	4b69      	ldr	r3, [pc, #420]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	4a68      	ldr	r2, [pc, #416]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007f2e:	6093      	str	r3, [r2, #8]
 8007f30:	4b66      	ldr	r3, [pc, #408]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f38:	4964      	ldr	r1, [pc, #400]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007f46:	2301      	movs	r3, #1
 8007f48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d017      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f56:	4b5d      	ldr	r3, [pc, #372]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f64:	4959      	ldr	r1, [pc, #356]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f74:	d101      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007f76:	2301      	movs	r3, #1
 8007f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007f82:	2301      	movs	r3, #1
 8007f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d017      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f92:	4b4e      	ldr	r3, [pc, #312]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa0:	494a      	ldr	r1, [pc, #296]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fb0:	d101      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 808b 	beq.w	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe4:	4a39      	ldr	r2, [pc, #228]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fea:	6413      	str	r3, [r2, #64]	@ 0x40
 8007fec:	4b37      	ldr	r3, [pc, #220]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ff4:	60bb      	str	r3, [r7, #8]
 8007ff6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ff8:	4b35      	ldr	r3, [pc, #212]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a34      	ldr	r2, [pc, #208]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008004:	f7fc fffc 	bl	8005000 <HAL_GetTick>
 8008008:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800800a:	e008      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800800c:	f7fc fff8 	bl	8005000 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	2b64      	cmp	r3, #100	@ 0x64
 8008018:	d901      	bls.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e357      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800801e:	4b2c      	ldr	r3, [pc, #176]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0f0      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800802a:	4b28      	ldr	r3, [pc, #160]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800802c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800802e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008032:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d035      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	429a      	cmp	r2, r3
 8008046:	d02e      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008048:	4b20      	ldr	r3, [pc, #128]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800804a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800804c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008050:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008052:	4b1e      	ldr	r3, [pc, #120]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008056:	4a1d      	ldr	r2, [pc, #116]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800805c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800805e:	4b1b      	ldr	r3, [pc, #108]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008062:	4a1a      	ldr	r2, [pc, #104]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008068:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800806a:	4a18      	ldr	r2, [pc, #96]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008070:	4b16      	ldr	r3, [pc, #88]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b01      	cmp	r3, #1
 800807a:	d114      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807c:	f7fc ffc0 	bl	8005000 <HAL_GetTick>
 8008080:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008082:	e00a      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008084:	f7fc ffbc 	bl	8005000 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008092:	4293      	cmp	r3, r2
 8008094:	d901      	bls.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e319      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800809a:	4b0c      	ldr	r3, [pc, #48]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800809c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0ee      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080b2:	d111      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80080b4:	4b05      	ldr	r3, [pc, #20]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80080c0:	4b04      	ldr	r3, [pc, #16]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80080c2:	400b      	ands	r3, r1
 80080c4:	4901      	ldr	r1, [pc, #4]	@ (80080cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	608b      	str	r3, [r1, #8]
 80080ca:	e00b      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80080cc:	40023800 	.word	0x40023800
 80080d0:	40007000 	.word	0x40007000
 80080d4:	0ffffcff 	.word	0x0ffffcff
 80080d8:	4baa      	ldr	r3, [pc, #680]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	4aa9      	ldr	r2, [pc, #676]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80080e2:	6093      	str	r3, [r2, #8]
 80080e4:	4ba7      	ldr	r3, [pc, #668]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080f0:	49a4      	ldr	r1, [pc, #656]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0310 	and.w	r3, r3, #16
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d010      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008102:	4ba0      	ldr	r3, [pc, #640]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008108:	4a9e      	ldr	r2, [pc, #632]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800810a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800810e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008112:	4b9c      	ldr	r3, [pc, #624]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008114:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811c:	4999      	ldr	r1, [pc, #612]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800811e:	4313      	orrs	r3, r2
 8008120:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008130:	4b94      	ldr	r3, [pc, #592]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008136:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800813e:	4991      	ldr	r1, [pc, #580]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008140:	4313      	orrs	r3, r2
 8008142:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008152:	4b8c      	ldr	r3, [pc, #560]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008158:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008160:	4988      	ldr	r1, [pc, #544]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008162:	4313      	orrs	r3, r2
 8008164:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008174:	4b83      	ldr	r3, [pc, #524]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008182:	4980      	ldr	r1, [pc, #512]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008196:	4b7b      	ldr	r3, [pc, #492]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081a4:	4977      	ldr	r1, [pc, #476]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081b8:	4b72      	ldr	r3, [pc, #456]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081be:	f023 0203 	bic.w	r2, r3, #3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c6:	496f      	ldr	r1, [pc, #444]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081da:	4b6a      	ldr	r3, [pc, #424]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e0:	f023 020c 	bic.w	r2, r3, #12
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081e8:	4966      	ldr	r1, [pc, #408]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081fc:	4b61      	ldr	r3, [pc, #388]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008202:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800820a:	495e      	ldr	r1, [pc, #376]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800820c:	4313      	orrs	r3, r2
 800820e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800821e:	4b59      	ldr	r3, [pc, #356]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008224:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800822c:	4955      	ldr	r1, [pc, #340]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800822e:	4313      	orrs	r3, r2
 8008230:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00a      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008240:	4b50      	ldr	r3, [pc, #320]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008246:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800824e:	494d      	ldr	r1, [pc, #308]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008250:	4313      	orrs	r3, r2
 8008252:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008262:	4b48      	ldr	r3, [pc, #288]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008268:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008270:	4944      	ldr	r1, [pc, #272]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008272:	4313      	orrs	r3, r2
 8008274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00a      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008284:	4b3f      	ldr	r3, [pc, #252]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800828a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008292:	493c      	ldr	r1, [pc, #240]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008294:	4313      	orrs	r3, r2
 8008296:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00a      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80082a6:	4b37      	ldr	r3, [pc, #220]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082b4:	4933      	ldr	r1, [pc, #204]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00a      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082c8:	4b2e      	ldr	r3, [pc, #184]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082d6:	492b      	ldr	r1, [pc, #172]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d011      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80082ea:	4b26      	ldr	r3, [pc, #152]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082f8:	4922      	ldr	r1, [pc, #136]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008308:	d101      	bne.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800830a:	2301      	movs	r3, #1
 800830c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800831a:	2301      	movs	r3, #1
 800831c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800832a:	4b16      	ldr	r3, [pc, #88]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800832c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008330:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008338:	4912      	ldr	r1, [pc, #72]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800833a:	4313      	orrs	r3, r2
 800833c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800834c:	4b0d      	ldr	r3, [pc, #52]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800834e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008352:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800835c:	4909      	ldr	r1, [pc, #36]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800835e:	4313      	orrs	r3, r2
 8008360:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d006      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 80d9 	beq.w	800852a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008378:	4b02      	ldr	r3, [pc, #8]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a01      	ldr	r2, [pc, #4]	@ (8008384 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800837e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008382:	e001      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008384:	40023800 	.word	0x40023800
 8008388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800838a:	f7fc fe39 	bl	8005000 <HAL_GetTick>
 800838e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008390:	e008      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008392:	f7fc fe35 	bl	8005000 <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	2b64      	cmp	r3, #100	@ 0x64
 800839e:	d901      	bls.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	e194      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083a4:	4b6c      	ldr	r3, [pc, #432]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1f0      	bne.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d021      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d11d      	bne.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083c4:	4b64      	ldr	r3, [pc, #400]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083ca:	0c1b      	lsrs	r3, r3, #16
 80083cc:	f003 0303 	and.w	r3, r3, #3
 80083d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083d2:	4b61      	ldr	r3, [pc, #388]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083d8:	0e1b      	lsrs	r3, r3, #24
 80083da:	f003 030f 	and.w	r3, r3, #15
 80083de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	019a      	lsls	r2, r3, #6
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	041b      	lsls	r3, r3, #16
 80083ea:	431a      	orrs	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	061b      	lsls	r3, r3, #24
 80083f0:	431a      	orrs	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	071b      	lsls	r3, r3, #28
 80083f8:	4957      	ldr	r1, [pc, #348]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d004      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008414:	d00a      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800841e:	2b00      	cmp	r3, #0
 8008420:	d02e      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008426:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800842a:	d129      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800842c:	4b4a      	ldr	r3, [pc, #296]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800842e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008432:	0c1b      	lsrs	r3, r3, #16
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800843a:	4b47      	ldr	r3, [pc, #284]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800843c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008440:	0f1b      	lsrs	r3, r3, #28
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	019a      	lsls	r2, r3, #6
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	041b      	lsls	r3, r3, #16
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	061b      	lsls	r3, r3, #24
 800845a:	431a      	orrs	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	071b      	lsls	r3, r3, #28
 8008460:	493d      	ldr	r1, [pc, #244]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008462:	4313      	orrs	r3, r2
 8008464:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008468:	4b3b      	ldr	r3, [pc, #236]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800846a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800846e:	f023 021f 	bic.w	r2, r3, #31
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008476:	3b01      	subs	r3, #1
 8008478:	4937      	ldr	r1, [pc, #220]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800847a:	4313      	orrs	r3, r2
 800847c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01d      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800848c:	4b32      	ldr	r3, [pc, #200]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800848e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008492:	0e1b      	lsrs	r3, r3, #24
 8008494:	f003 030f 	and.w	r3, r3, #15
 8008498:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800849a:	4b2f      	ldr	r3, [pc, #188]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800849c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084a0:	0f1b      	lsrs	r3, r3, #28
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	019a      	lsls	r2, r3, #6
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	041b      	lsls	r3, r3, #16
 80084b4:	431a      	orrs	r2, r3
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	061b      	lsls	r3, r3, #24
 80084ba:	431a      	orrs	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	071b      	lsls	r3, r3, #28
 80084c0:	4925      	ldr	r1, [pc, #148]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d011      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	019a      	lsls	r2, r3, #6
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	041b      	lsls	r3, r3, #16
 80084e0:	431a      	orrs	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	061b      	lsls	r3, r3, #24
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	071b      	lsls	r3, r3, #28
 80084f0:	4919      	ldr	r1, [pc, #100]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084f8:	4b17      	ldr	r3, [pc, #92]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a16      	ldr	r2, [pc, #88]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008504:	f7fc fd7c 	bl	8005000 <HAL_GetTick>
 8008508:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800850a:	e008      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800850c:	f7fc fd78 	bl	8005000 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b64      	cmp	r3, #100	@ 0x64
 8008518:	d901      	bls.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e0d7      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800851e:	4b0e      	ldr	r3, [pc, #56]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0f0      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	2b01      	cmp	r3, #1
 800852e:	f040 80cd 	bne.w	80086cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008532:	4b09      	ldr	r3, [pc, #36]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a08      	ldr	r2, [pc, #32]	@ (8008558 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800853c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800853e:	f7fc fd5f 	bl	8005000 <HAL_GetTick>
 8008542:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008544:	e00a      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008546:	f7fc fd5b 	bl	8005000 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	2b64      	cmp	r3, #100	@ 0x64
 8008552:	d903      	bls.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e0ba      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008558:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800855c:	4b5e      	ldr	r3, [pc, #376]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008568:	d0ed      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d009      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008586:	2b00      	cmp	r3, #0
 8008588:	d02e      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800858e:	2b00      	cmp	r3, #0
 8008590:	d12a      	bne.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008592:	4b51      	ldr	r3, [pc, #324]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008598:	0c1b      	lsrs	r3, r3, #16
 800859a:	f003 0303 	and.w	r3, r3, #3
 800859e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085a0:	4b4d      	ldr	r3, [pc, #308]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085a6:	0f1b      	lsrs	r3, r3, #28
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	019a      	lsls	r2, r3, #6
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	431a      	orrs	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	061b      	lsls	r3, r3, #24
 80085c0:	431a      	orrs	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	071b      	lsls	r3, r3, #28
 80085c6:	4944      	ldr	r1, [pc, #272]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80085ce:	4b42      	ldr	r3, [pc, #264]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085dc:	3b01      	subs	r3, #1
 80085de:	021b      	lsls	r3, r3, #8
 80085e0:	493d      	ldr	r1, [pc, #244]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d022      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085fc:	d11d      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085fe:	4b36      	ldr	r3, [pc, #216]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008604:	0e1b      	lsrs	r3, r3, #24
 8008606:	f003 030f 	and.w	r3, r3, #15
 800860a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800860c:	4b32      	ldr	r3, [pc, #200]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800860e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008612:	0f1b      	lsrs	r3, r3, #28
 8008614:	f003 0307 	and.w	r3, r3, #7
 8008618:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	019a      	lsls	r2, r3, #6
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	041b      	lsls	r3, r3, #16
 8008626:	431a      	orrs	r2, r3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	061b      	lsls	r3, r3, #24
 800862c:	431a      	orrs	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	071b      	lsls	r3, r3, #28
 8008632:	4929      	ldr	r1, [pc, #164]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008634:	4313      	orrs	r3, r2
 8008636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0308 	and.w	r3, r3, #8
 8008642:	2b00      	cmp	r3, #0
 8008644:	d028      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008646:	4b24      	ldr	r3, [pc, #144]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800864c:	0e1b      	lsrs	r3, r3, #24
 800864e:	f003 030f 	and.w	r3, r3, #15
 8008652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008654:	4b20      	ldr	r3, [pc, #128]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800865a:	0c1b      	lsrs	r3, r3, #16
 800865c:	f003 0303 	and.w	r3, r3, #3
 8008660:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	019a      	lsls	r2, r3, #6
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	041b      	lsls	r3, r3, #16
 800866c:	431a      	orrs	r2, r3
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	061b      	lsls	r3, r3, #24
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	071b      	lsls	r3, r3, #28
 800867a:	4917      	ldr	r1, [pc, #92]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800867c:	4313      	orrs	r3, r2
 800867e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008682:	4b15      	ldr	r3, [pc, #84]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008688:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008690:	4911      	ldr	r1, [pc, #68]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008692:	4313      	orrs	r3, r2
 8008694:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008698:	4b0f      	ldr	r3, [pc, #60]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a0e      	ldr	r2, [pc, #56]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800869e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086a4:	f7fc fcac 	bl	8005000 <HAL_GetTick>
 80086a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086aa:	e008      	b.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80086ac:	f7fc fca8 	bl	8005000 <HAL_GetTick>
 80086b0:	4602      	mov	r2, r0
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	2b64      	cmp	r3, #100	@ 0x64
 80086b8:	d901      	bls.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e007      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086be:	4b06      	ldr	r3, [pc, #24]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ca:	d1ef      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3720      	adds	r7, #32
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	40023800 	.word	0x40023800

080086dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086fa:	f040 808d 	bne.w	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80086fe:	4b93      	ldr	r3, [pc, #588]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008704:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800870c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008714:	d07c      	beq.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800871c:	d87b      	bhi.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d004      	beq.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800872a:	d039      	beq.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800872c:	e073      	b.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800872e:	4b87      	ldr	r3, [pc, #540]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d108      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800873a:	4b84      	ldr	r3, [pc, #528]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008742:	4a83      	ldr	r2, [pc, #524]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008744:	fbb2 f3f3 	udiv	r3, r2, r3
 8008748:	613b      	str	r3, [r7, #16]
 800874a:	e007      	b.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800874c:	4b7f      	ldr	r3, [pc, #508]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008754:	4a7f      	ldr	r2, [pc, #508]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008756:	fbb2 f3f3 	udiv	r3, r2, r3
 800875a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800875c:	4b7b      	ldr	r3, [pc, #492]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800875e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008762:	0e1b      	lsrs	r3, r3, #24
 8008764:	f003 030f 	and.w	r3, r3, #15
 8008768:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800876a:	4b78      	ldr	r3, [pc, #480]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800876c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008770:	099b      	lsrs	r3, r3, #6
 8008772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	fb03 f202 	mul.w	r2, r3, r2
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008782:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008784:	4b71      	ldr	r3, [pc, #452]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800878a:	0a1b      	lsrs	r3, r3, #8
 800878c:	f003 031f 	and.w	r3, r3, #31
 8008790:	3301      	adds	r3, #1
 8008792:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	fbb2 f3f3 	udiv	r3, r2, r3
 800879c:	617b      	str	r3, [r7, #20]
        break;
 800879e:	e03b      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80087a0:	4b6a      	ldr	r3, [pc, #424]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d108      	bne.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80087ac:	4b67      	ldr	r3, [pc, #412]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087b4:	4a66      	ldr	r2, [pc, #408]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80087b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ba:	613b      	str	r3, [r7, #16]
 80087bc:	e007      	b.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80087be:	4b63      	ldr	r3, [pc, #396]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087c6:	4a63      	ldr	r2, [pc, #396]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087cc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80087ce:	4b5f      	ldr	r3, [pc, #380]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087d4:	0e1b      	lsrs	r3, r3, #24
 80087d6:	f003 030f 	and.w	r3, r3, #15
 80087da:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80087dc:	4b5b      	ldr	r3, [pc, #364]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087e2:	099b      	lsrs	r3, r3, #6
 80087e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	fb03 f202 	mul.w	r2, r3, r2
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80087f6:	4b55      	ldr	r3, [pc, #340]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80087f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087fc:	f003 031f 	and.w	r3, r3, #31
 8008800:	3301      	adds	r3, #1
 8008802:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	fbb2 f3f3 	udiv	r3, r2, r3
 800880c:	617b      	str	r3, [r7, #20]
        break;
 800880e:	e003      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008810:	4b51      	ldr	r3, [pc, #324]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008812:	617b      	str	r3, [r7, #20]
        break;
 8008814:	e000      	b.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8008816:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800881e:	f040 808d 	bne.w	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008822:	4b4a      	ldr	r3, [pc, #296]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008828:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008830:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008838:	d07c      	beq.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008840:	d87b      	bhi.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800884e:	d039      	beq.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008850:	e073      	b.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008852:	4b3e      	ldr	r3, [pc, #248]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d108      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800885e:	4b3b      	ldr	r3, [pc, #236]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008866:	4a3a      	ldr	r2, [pc, #232]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008868:	fbb2 f3f3 	udiv	r3, r2, r3
 800886c:	613b      	str	r3, [r7, #16]
 800886e:	e007      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008870:	4b36      	ldr	r3, [pc, #216]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008878:	4a36      	ldr	r2, [pc, #216]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800887a:	fbb2 f3f3 	udiv	r3, r2, r3
 800887e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008880:	4b32      	ldr	r3, [pc, #200]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008886:	0e1b      	lsrs	r3, r3, #24
 8008888:	f003 030f 	and.w	r3, r3, #15
 800888c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800888e:	4b2f      	ldr	r3, [pc, #188]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008894:	099b      	lsrs	r3, r3, #6
 8008896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	fb03 f202 	mul.w	r2, r3, r2
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80088a8:	4b28      	ldr	r3, [pc, #160]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088ae:	0a1b      	lsrs	r3, r3, #8
 80088b0:	f003 031f 	and.w	r3, r3, #31
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c0:	617b      	str	r3, [r7, #20]
        break;
 80088c2:	e03b      	b.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80088c4:	4b21      	ldr	r3, [pc, #132]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d108      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80088d0:	4b1e      	ldr	r3, [pc, #120]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80088da:	fbb2 f3f3 	udiv	r3, r2, r3
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	e007      	b.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80088e2:	4b1a      	ldr	r3, [pc, #104]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80088f2:	4b16      	ldr	r3, [pc, #88]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088f8:	0e1b      	lsrs	r3, r3, #24
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008900:	4b12      	ldr	r3, [pc, #72]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008906:	099b      	lsrs	r3, r3, #6
 8008908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	fb03 f202 	mul.w	r2, r3, r2
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	fbb2 f3f3 	udiv	r3, r2, r3
 8008918:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800891a:	4b0c      	ldr	r3, [pc, #48]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800891c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008920:	f003 031f 	and.w	r3, r3, #31
 8008924:	3301      	adds	r3, #1
 8008926:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008930:	617b      	str	r3, [r7, #20]
        break;
 8008932:	e003      	b.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008934:	4b08      	ldr	r3, [pc, #32]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008936:	617b      	str	r3, [r7, #20]
        break;
 8008938:	e000      	b.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800893a:	bf00      	nop
      }
    }
  }

  return frequency;
 800893c:	697b      	ldr	r3, [r7, #20]
}
 800893e:	4618      	mov	r0, r3
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	40023800 	.word	0x40023800
 8008950:	00f42400 	.word	0x00f42400
 8008954:	017d7840 	.word	0x017d7840
 8008958:	00bb8000 	.word	0x00bb8000

0800895c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e071      	b.n	8008a52 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	7f5b      	ldrb	r3, [r3, #29]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d105      	bne.n	8008984 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fb f956 	bl	8003c30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	f003 0310 	and.w	r3, r3, #16
 8008994:	2b10      	cmp	r3, #16
 8008996:	d053      	beq.n	8008a40 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	22ca      	movs	r2, #202	@ 0xca
 800899e:	625a      	str	r2, [r3, #36]	@ 0x24
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2253      	movs	r2, #83	@ 0x53
 80089a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fac7 	bl	8008f3c <RTC_EnterInitMode>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d12a      	bne.n	8008a0e <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6899      	ldr	r1, [r3, #8]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	4b26      	ldr	r3, [pc, #152]	@ (8008a5c <HAL_RTC_Init+0x100>)
 80089c4:	400b      	ands	r3, r1
 80089c6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6899      	ldr	r1, [r3, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	431a      	orrs	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	68d2      	ldr	r2, [r2, #12]
 80089ee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6919      	ldr	r1, [r3, #16]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	041a      	lsls	r2, r3, #16
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fad0 	bl	8008faa <RTC_ExitInitMode>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d110      	bne.n	8008a36 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0208 	bic.w	r2, r2, #8
 8008a22:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	22ff      	movs	r2, #255	@ 0xff
 8008a3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a3e:	e001      	b.n	8008a44 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d102      	bne.n	8008a50 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	ff8fffbf 	.word	0xff8fffbf

08008a60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a60:	b590      	push	{r4, r7, lr}
 8008a62:	b087      	sub	sp, #28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	7f1b      	ldrb	r3, [r3, #28]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_RTC_SetTime+0x1c>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e085      	b.n	8008b88 <HAL_RTC_SetTime+0x128>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2202      	movs	r2, #2
 8008a86:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d126      	bne.n	8008adc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d102      	bne.n	8008aa2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 faa4 	bl	8008ff4 <RTC_ByteToBcd2>
 8008aac:	4603      	mov	r3, r0
 8008aae:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fa9d 	bl	8008ff4 <RTC_ByteToBcd2>
 8008aba:	4603      	mov	r3, r0
 8008abc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008abe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	789b      	ldrb	r3, [r3, #2]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 fa95 	bl	8008ff4 <RTC_ByteToBcd2>
 8008aca:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008acc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	78db      	ldrb	r3, [r3, #3]
 8008ad4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	e018      	b.n	8008b0e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d102      	bne.n	8008af0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2200      	movs	r2, #0
 8008aee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	785b      	ldrb	r3, [r3, #1]
 8008afa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008afc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008b02:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	78db      	ldrb	r3, [r3, #3]
 8008b08:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	22ca      	movs	r2, #202	@ 0xca
 8008b14:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2253      	movs	r2, #83	@ 0x53
 8008b1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 fa0c 	bl	8008f3c <RTC_EnterInitMode>
 8008b24:	4603      	mov	r3, r0
 8008b26:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008b28:	7cfb      	ldrb	r3, [r7, #19]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d11e      	bne.n	8008b6c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	6979      	ldr	r1, [r7, #20]
 8008b34:	4b16      	ldr	r3, [pc, #88]	@ (8008b90 <HAL_RTC_SetTime+0x130>)
 8008b36:	400b      	ands	r3, r1
 8008b38:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008b48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6899      	ldr	r1, [r3, #8]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 fa21 	bl	8008faa <RTC_ExitInitMode>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008b6c:	7cfb      	ldrb	r3, [r7, #19]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d102      	bne.n	8008b78 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	22ff      	movs	r2, #255	@ 0xff
 8008b7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	771a      	strb	r2, [r3, #28]

  return status;
 8008b86:	7cfb      	ldrb	r3, [r7, #19]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	371c      	adds	r7, #28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd90      	pop	{r4, r7, pc}
 8008b90:	007f7f7f 	.word	0x007f7f7f

08008b94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b94:	b590      	push	{r4, r7, lr}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	7f1b      	ldrb	r3, [r3, #28]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d101      	bne.n	8008bb0 <HAL_RTC_SetDate+0x1c>
 8008bac:	2302      	movs	r3, #2
 8008bae:	e06f      	b.n	8008c90 <HAL_RTC_SetDate+0xfc>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2202      	movs	r2, #2
 8008bba:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10e      	bne.n	8008be0 <HAL_RTC_SetDate+0x4c>
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	785b      	ldrb	r3, [r3, #1]
 8008bc6:	f003 0310 	and.w	r3, r3, #16
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d008      	beq.n	8008be0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	785b      	ldrb	r3, [r3, #1]
 8008bd2:	f023 0310 	bic.w	r3, r3, #16
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	330a      	adds	r3, #10
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d11c      	bne.n	8008c20 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	78db      	ldrb	r3, [r3, #3]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fa02 	bl	8008ff4 <RTC_ByteToBcd2>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 f9fb 	bl	8008ff4 <RTC_ByteToBcd2>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c02:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	789b      	ldrb	r3, [r3, #2]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 f9f3 	bl	8008ff4 <RTC_ByteToBcd2>
 8008c0e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c10:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	e00e      	b.n	8008c3e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	78db      	ldrb	r3, [r3, #3]
 8008c24:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c2c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008c32:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	22ca      	movs	r2, #202	@ 0xca
 8008c44:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2253      	movs	r2, #83	@ 0x53
 8008c4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 f974 	bl	8008f3c <RTC_EnterInitMode>
 8008c54:	4603      	mov	r3, r0
 8008c56:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c58:	7cfb      	ldrb	r3, [r7, #19]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10a      	bne.n	8008c74 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	6979      	ldr	r1, [r7, #20]
 8008c64:	4b0c      	ldr	r3, [pc, #48]	@ (8008c98 <HAL_RTC_SetDate+0x104>)
 8008c66:	400b      	ands	r3, r1
 8008c68:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 f99d 	bl	8008faa <RTC_ExitInitMode>
 8008c70:	4603      	mov	r3, r0
 8008c72:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c74:	7cfb      	ldrb	r3, [r7, #19]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	22ff      	movs	r2, #255	@ 0xff
 8008c86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	771a      	strb	r2, [r3, #28]

  return status;
 8008c8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	371c      	adds	r7, #28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd90      	pop	{r4, r7, pc}
 8008c98:	00ffff3f 	.word	0x00ffff3f

08008c9c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008c9c:	b590      	push	{r4, r7, lr}
 8008c9e:	b089      	sub	sp, #36	@ 0x24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	7f1b      	ldrb	r3, [r3, #28]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d101      	bne.n	8008cc0 <HAL_RTC_SetAlarm+0x24>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e113      	b.n	8008ee8 <HAL_RTC_SetAlarm+0x24c>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2202      	movs	r2, #2
 8008cca:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d137      	bne.n	8008d42 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 f982 	bl	8008ff4 <RTC_ByteToBcd2>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	785b      	ldrb	r3, [r3, #1]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 f97b 	bl	8008ff4 <RTC_ByteToBcd2>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008d02:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	789b      	ldrb	r3, [r3, #2]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 f973 	bl	8008ff4 <RTC_ByteToBcd2>
 8008d0e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008d10:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	78db      	ldrb	r3, [r3, #3]
 8008d18:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008d1a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 f965 	bl	8008ff4 <RTC_ByteToBcd2>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8008d2e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008d36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	61fb      	str	r3, [r7, #28]
 8008d40:	e023      	b.n	8008d8a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	2200      	movs	r2, #0
 8008d54:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	785b      	ldrb	r3, [r3, #1]
 8008d60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d62:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008d68:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	78db      	ldrb	r3, [r3, #3]
 8008d6e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008d70:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d78:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8008d7a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008d80:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008d86:	4313      	orrs	r3, r2
 8008d88:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008d92:	4313      	orrs	r3, r2
 8008d94:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	22ca      	movs	r2, #202	@ 0xca
 8008d9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2253      	movs	r2, #83	@ 0x53
 8008da4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dae:	d148      	bne.n	8008e42 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008dbe:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689a      	ldr	r2, [r3, #8]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008dce:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008de0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008de2:	f7fc f90d 	bl	8005000 <HAL_GetTick>
 8008de6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008de8:	e013      	b.n	8008e12 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008dea:	f7fc f909 	bl	8005000 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008df8:	d90b      	bls.n	8008e12 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	22ff      	movs	r2, #255	@ 0xff
 8008e00:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2203      	movs	r2, #3
 8008e06:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e06a      	b.n	8008ee8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0e4      	beq.n	8008dea <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	69fa      	ldr	r2, [r7, #28]
 8008e26:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689a      	ldr	r2, [r3, #8]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e3e:	609a      	str	r2, [r3, #8]
 8008e40:	e047      	b.n	8008ed2 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008e50:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	689a      	ldr	r2, [r3, #8]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e60:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008e72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e74:	f7fc f8c4 	bl	8005000 <HAL_GetTick>
 8008e78:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008e7a:	e013      	b.n	8008ea4 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e7c:	f7fc f8c0 	bl	8005000 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e8a:	d90b      	bls.n	8008ea4 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	22ff      	movs	r2, #255	@ 0xff
 8008e92:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2203      	movs	r2, #3
 8008e98:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e021      	b.n	8008ee8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0e4      	beq.n	8008e7c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69fa      	ldr	r2, [r7, #28]
 8008eb8:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ed0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	22ff      	movs	r2, #255	@ 0xff
 8008ed8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2201      	movs	r2, #1
 8008ede:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3724      	adds	r7, #36	@ 0x24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd90      	pop	{r4, r7, pc}

08008ef0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a0d      	ldr	r2, [pc, #52]	@ (8008f38 <HAL_RTC_WaitForSynchro+0x48>)
 8008f02:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f04:	f7fc f87c 	bl	8005000 <HAL_GetTick>
 8008f08:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f0a:	e009      	b.n	8008f20 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f0c:	f7fc f878 	bl	8005000 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f1a:	d901      	bls.n	8008f20 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e007      	b.n	8008f30 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0ee      	beq.n	8008f0c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	0001ff5f 	.word	0x0001ff5f

08008f3c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d122      	bne.n	8008fa0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008f68:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f6a:	f7fc f849 	bl	8005000 <HAL_GetTick>
 8008f6e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f70:	e00c      	b.n	8008f8c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f72:	f7fc f845 	bl	8005000 <HAL_GetTick>
 8008f76:	4602      	mov	r2, r0
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f80:	d904      	bls.n	8008f8c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2204      	movs	r2, #4
 8008f86:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d102      	bne.n	8008fa0 <RTC_EnterInitMode+0x64>
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d1e8      	bne.n	8008f72 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fc4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f003 0320 	and.w	r3, r3, #32
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff ff8b 	bl	8008ef0 <HAL_RTC_WaitForSynchro>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d004      	beq.n	8008fea <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2204      	movs	r2, #4
 8008fe4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009002:	e005      	b.n	8009010 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3301      	adds	r3, #1
 8009008:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	3b0a      	subs	r3, #10
 800900e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009010:	79fb      	ldrb	r3, [r7, #7]
 8009012:	2b09      	cmp	r3, #9
 8009014:	d8f6      	bhi.n	8009004 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	b2db      	uxtb	r3, r3
 800901a:	011b      	lsls	r3, r3, #4
 800901c:	b2da      	uxtb	r2, r3
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	4313      	orrs	r3, r2
 8009022:	b2db      	uxtb	r3, r3
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	7f1b      	ldrb	r3, [r3, #28]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d101      	bne.n	800904c <HAL_RTCEx_SetTimeStamp+0x1c>
 8009048:	2302      	movs	r3, #2
 800904a:	e050      	b.n	80090ee <HAL_RTCEx_SetTimeStamp+0xbe>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2201      	movs	r2, #1
 8009050:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2202      	movs	r2, #2
 8009056:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 0206 	bic.w	r2, r2, #6
 8009066:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	430a      	orrs	r2, r1
 8009076:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689a      	ldr	r2, [r3, #8]
 800907e:	4b1f      	ldr	r3, [pc, #124]	@ (80090fc <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009080:	4013      	ands	r3, r2
 8009082:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	4313      	orrs	r3, r2
 800908a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	22ca      	movs	r2, #202	@ 0xca
 8009092:	625a      	str	r2, [r3, #36]	@ 0x24
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2253      	movs	r2, #83	@ 0x53
 800909a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 80090b4:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 80090c6:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689a      	ldr	r2, [r3, #8]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090d6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	22ff      	movs	r2, #255	@ 0xff
 80090de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2201      	movs	r2, #1
 80090e4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	371c      	adds	r7, #28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	fffff7f7 	.word	0xfffff7f7

08009100 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e156      	b.n	80093cc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7fa fe52 	bl	8003ddc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f95b 	bl	80093fc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	2b02      	cmp	r3, #2
 800914c:	d00c      	beq.n	8009168 <HAL_SAI_Init+0x68>
 800914e:	2b02      	cmp	r3, #2
 8009150:	d80d      	bhi.n	800916e <HAL_SAI_Init+0x6e>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HAL_SAI_Init+0x5c>
 8009156:	2b01      	cmp	r3, #1
 8009158:	d003      	beq.n	8009162 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800915a:	e008      	b.n	800916e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	61fb      	str	r3, [r7, #28]
      break;
 8009160:	e006      	b.n	8009170 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009162:	2310      	movs	r3, #16
 8009164:	61fb      	str	r3, [r7, #28]
      break;
 8009166:	e003      	b.n	8009170 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009168:	2320      	movs	r3, #32
 800916a:	61fb      	str	r3, [r7, #28]
      break;
 800916c:	e000      	b.n	8009170 <HAL_SAI_Init+0x70>
      break;
 800916e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	2b03      	cmp	r3, #3
 8009176:	d81e      	bhi.n	80091b6 <HAL_SAI_Init+0xb6>
 8009178:	a201      	add	r2, pc, #4	@ (adr r2, 8009180 <HAL_SAI_Init+0x80>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	08009191 	.word	0x08009191
 8009184:	08009197 	.word	0x08009197
 8009188:	0800919f 	.word	0x0800919f
 800918c:	080091a7 	.word	0x080091a7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	617b      	str	r3, [r7, #20]
    }
    break;
 8009194:	e010      	b.n	80091b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800919a:	617b      	str	r3, [r7, #20]
    }
    break;
 800919c:	e00c      	b.n	80091b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800919e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80091a2:	617b      	str	r3, [r7, #20]
    }
    break;
 80091a4:	e008      	b.n	80091b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80091a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80091aa:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	f043 0301 	orr.w	r3, r3, #1
 80091b2:	61fb      	str	r3, [r7, #28]
    }
    break;
 80091b4:	e000      	b.n	80091b8 <HAL_SAI_Init+0xb8>
    default:
      break;
 80091b6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a85      	ldr	r2, [pc, #532]	@ (80093d4 <HAL_SAI_Init+0x2d4>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d004      	beq.n	80091cc <HAL_SAI_Init+0xcc>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a84      	ldr	r2, [pc, #528]	@ (80093d8 <HAL_SAI_Init+0x2d8>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d103      	bne.n	80091d4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80091cc:	4a83      	ldr	r2, [pc, #524]	@ (80093dc <HAL_SAI_Init+0x2dc>)
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	6013      	str	r3, [r2, #0]
 80091d2:	e002      	b.n	80091da <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80091d4:	4a82      	ldr	r2, [pc, #520]	@ (80093e0 <HAL_SAI_Init+0x2e0>)
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d04c      	beq.n	800927c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a7a      	ldr	r2, [pc, #488]	@ (80093d4 <HAL_SAI_Init+0x2d4>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d004      	beq.n	80091fa <HAL_SAI_Init+0xfa>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a78      	ldr	r2, [pc, #480]	@ (80093d8 <HAL_SAI_Init+0x2d8>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d104      	bne.n	8009204 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80091fa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80091fe:	f7ff fa6d 	bl	80086dc <HAL_RCCEx_GetPeriphCLKFreq>
 8009202:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a76      	ldr	r2, [pc, #472]	@ (80093e4 <HAL_SAI_Init+0x2e4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d004      	beq.n	8009218 <HAL_SAI_Init+0x118>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a75      	ldr	r2, [pc, #468]	@ (80093e8 <HAL_SAI_Init+0x2e8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d104      	bne.n	8009222 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009218:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800921c:	f7ff fa5e 	bl	80086dc <HAL_RCCEx_GetPeriphCLKFreq>
 8009220:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	4613      	mov	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	461a      	mov	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	025b      	lsls	r3, r3, #9
 8009234:	fbb2 f3f3 	udiv	r3, r2, r3
 8009238:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4a6b      	ldr	r2, [pc, #428]	@ (80093ec <HAL_SAI_Init+0x2ec>)
 800923e:	fba2 2303 	umull	r2, r3, r2, r3
 8009242:	08da      	lsrs	r2, r3, #3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009248:	68f9      	ldr	r1, [r7, #12]
 800924a:	4b68      	ldr	r3, [pc, #416]	@ (80093ec <HAL_SAI_Init+0x2ec>)
 800924c:	fba3 2301 	umull	r2, r3, r3, r1
 8009250:	08da      	lsrs	r2, r3, #3
 8009252:	4613      	mov	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	1aca      	subs	r2, r1, r3
 800925c:	2a08      	cmp	r2, #8
 800925e:	d904      	bls.n	800926a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800926e:	2b04      	cmp	r3, #4
 8009270:	d104      	bne.n	800927c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	085a      	lsrs	r2, r3, #1
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <HAL_SAI_Init+0x18c>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	2b02      	cmp	r3, #2
 800928a:	d109      	bne.n	80092a0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009290:	2b01      	cmp	r3, #1
 8009292:	d101      	bne.n	8009298 <HAL_SAI_Init+0x198>
 8009294:	2300      	movs	r3, #0
 8009296:	e001      	b.n	800929c <HAL_SAI_Init+0x19c>
 8009298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800929c:	61bb      	str	r3, [r7, #24]
 800929e:	e008      	b.n	80092b2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d102      	bne.n	80092ae <HAL_SAI_Init+0x1ae>
 80092a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092ac:	e000      	b.n	80092b0 <HAL_SAI_Init+0x1b0>
 80092ae:	2300      	movs	r3, #0
 80092b0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6819      	ldr	r1, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	4b4c      	ldr	r3, [pc, #304]	@ (80093f0 <HAL_SAI_Init+0x2f0>)
 80092be:	400b      	ands	r3, r1
 80092c0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6819      	ldr	r1, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092d6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092dc:	431a      	orrs	r2, r3
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80092ea:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092f6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	051b      	lsls	r3, r3, #20
 80092fe:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6859      	ldr	r1, [r3, #4]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	4b38      	ldr	r3, [pc, #224]	@ (80093f4 <HAL_SAI_Init+0x2f4>)
 8009314:	400b      	ands	r3, r1
 8009316:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6859      	ldr	r1, [r3, #4]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699a      	ldr	r2, [r3, #24]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009326:	431a      	orrs	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6899      	ldr	r1, [r3, #8]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	4b2d      	ldr	r3, [pc, #180]	@ (80093f8 <HAL_SAI_Init+0x2f8>)
 8009342:	400b      	ands	r3, r1
 8009344:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6899      	ldr	r1, [r3, #8]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009350:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009356:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800935c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8009362:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009368:	3b01      	subs	r3, #1
 800936a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800936c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68d9      	ldr	r1, [r3, #12]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009384:	400b      	ands	r3, r1
 8009386:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68d9      	ldr	r1, [r3, #12]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009396:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800939c:	041b      	lsls	r3, r3, #16
 800939e:	431a      	orrs	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093a4:	3b01      	subs	r3, #1
 80093a6:	021b      	lsls	r3, r3, #8
 80093a8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3720      	adds	r7, #32
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	40015804 	.word	0x40015804
 80093d8:	40015824 	.word	0x40015824
 80093dc:	40015800 	.word	0x40015800
 80093e0:	40015c00 	.word	0x40015c00
 80093e4:	40015c04 	.word	0x40015c04
 80093e8:	40015c24 	.word	0x40015c24
 80093ec:	cccccccd 	.word	0xcccccccd
 80093f0:	ff05c010 	.word	0xff05c010
 80093f4:	ffff1ff0 	.word	0xffff1ff0
 80093f8:	fff88000 	.word	0xfff88000

080093fc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009404:	4b17      	ldr	r3, [pc, #92]	@ (8009464 <SAI_Disable+0x68>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a17      	ldr	r2, [pc, #92]	@ (8009468 <SAI_Disable+0x6c>)
 800940a:	fba2 2303 	umull	r2, r3, r2, r3
 800940e:	0b1b      	lsrs	r3, r3, #12
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009426:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	1e5a      	subs	r2, r3, #1
 800942c:	60fa      	str	r2, [r7, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10a      	bne.n	8009448 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009438:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	72fb      	strb	r3, [r7, #11]
      break;
 8009446:	e006      	b.n	8009456 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1e8      	bne.n	8009428 <SAI_Disable+0x2c>

  return status;
 8009456:	7afb      	ldrb	r3, [r7, #11]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	20000004 	.word	0x20000004
 8009468:	95cbec1b 	.word	0x95cbec1b

0800946c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e022      	b.n	80094c4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d105      	bne.n	8009496 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7fa fd2f 	bl	8003ef4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2203      	movs	r2, #3
 800949a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f814 	bl	80094cc <HAL_SD_InitCard>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e00a      	b.n	80094c4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80094cc:	b5b0      	push	{r4, r5, r7, lr}
 80094ce:	b08e      	sub	sp, #56	@ 0x38
 80094d0:	af04      	add	r7, sp, #16
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80094d8:	2300      	movs	r3, #0
 80094da:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80094dc:	2300      	movs	r3, #0
 80094de:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80094e0:	2300      	movs	r3, #0
 80094e2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80094e4:	2300      	movs	r3, #0
 80094e6:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80094e8:	2376      	movs	r3, #118	@ 0x76
 80094ea:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681d      	ldr	r5, [r3, #0]
 80094f0:	466c      	mov	r4, sp
 80094f2:	f107 0318 	add.w	r3, r7, #24
 80094f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094fe:	f107 030c 	add.w	r3, r7, #12
 8009502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009504:	4628      	mov	r0, r5
 8009506:	f004 fd27 	bl	800df58 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009518:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4618      	mov	r0, r3
 8009520:	f004 fd53 	bl	800dfca <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	685a      	ldr	r2, [r3, #4]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009532:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009534:	2002      	movs	r0, #2
 8009536:	f7fb fd6f 	bl	8005018 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fe10 	bl	800a160 <SD_PowerON>
 8009540:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00b      	beq.n	8009560 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e02e      	b.n	80095be <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fd2f 	bl	8009fc4 <SD_InitCard>
 8009566:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00b      	beq.n	8009586 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	431a      	orrs	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e01b      	b.n	80095be <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800958e:	4618      	mov	r0, r3
 8009590:	f004 fdae 	bl	800e0f0 <SDMMC_CmdBlockLength>
 8009594:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00f      	beq.n	80095bc <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a09      	ldr	r2, [pc, #36]	@ (80095c8 <HAL_SD_InitCard+0xfc>)
 80095a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e000      	b.n	80095be <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3728      	adds	r7, #40	@ 0x28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bdb0      	pop	{r4, r5, r7, pc}
 80095c6:	bf00      	nop
 80095c8:	004005ff 	.word	0x004005ff

080095cc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08c      	sub	sp, #48	@ 0x30
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d107      	bne.n	80095f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e0c3      	b.n	800977c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	f040 80bc 	bne.w	800977a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	441a      	add	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009612:	429a      	cmp	r2, r3
 8009614:	d907      	bls.n	8009626 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e0aa      	b.n	800977c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2203      	movs	r2, #3
 800962a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2200      	movs	r2, #0
 8009634:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009644:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964a:	4a4e      	ldr	r2, [pc, #312]	@ (8009784 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800964c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009652:	4a4d      	ldr	r2, [pc, #308]	@ (8009788 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009654:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800965a:	2200      	movs	r2, #0
 800965c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009662:	2200      	movs	r2, #0
 8009664:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009676:	689a      	ldr	r2, [r3, #8]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	430a      	orrs	r2, r1
 8009680:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3380      	adds	r3, #128	@ 0x80
 800968c:	4619      	mov	r1, r3
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	025b      	lsls	r3, r3, #9
 8009694:	089b      	lsrs	r3, r3, #2
 8009696:	f7fc f9c9 	bl	8005a2c <HAL_DMA_Start_IT>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d017      	beq.n	80096d0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80096ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a35      	ldr	r2, [pc, #212]	@ (800978c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80096b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e055      	b.n	800977c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f042 0208 	orr.w	r2, r2, #8
 80096de:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d002      	beq.n	80096ee <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	025b      	lsls	r3, r3, #9
 80096ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096ee:	f04f 33ff 	mov.w	r3, #4294967295
 80096f2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	025b      	lsls	r3, r3, #9
 80096f8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80096fa:	2390      	movs	r3, #144	@ 0x90
 80096fc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80096fe:	2302      	movs	r3, #2
 8009700:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009702:	2300      	movs	r3, #0
 8009704:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009706:	2301      	movs	r3, #1
 8009708:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f107 0210 	add.w	r2, r7, #16
 8009712:	4611      	mov	r1, r2
 8009714:	4618      	mov	r0, r3
 8009716:	f004 fcbf 	bl	800e098 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d90a      	bls.n	8009736 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2282      	movs	r2, #130	@ 0x82
 8009724:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800972c:	4618      	mov	r0, r3
 800972e:	f004 fd23 	bl	800e178 <SDMMC_CmdReadMultiBlock>
 8009732:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009734:	e009      	b.n	800974a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2281      	movs	r2, #129	@ 0x81
 800973a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009742:	4618      	mov	r0, r3
 8009744:	f004 fcf6 	bl	800e134 <SDMMC_CmdReadSingleBlock>
 8009748:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800974a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d012      	beq.n	8009776 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a0d      	ldr	r2, [pc, #52]	@ (800978c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009756:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800975c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975e:	431a      	orrs	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e002      	b.n	800977c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	e000      	b.n	800977c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800977a:	2302      	movs	r3, #2
  }
}
 800977c:	4618      	mov	r0, r3
 800977e:	3730      	adds	r7, #48	@ 0x30
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	08009eaf 	.word	0x08009eaf
 8009788:	08009f21 	.word	0x08009f21
 800978c:	004005ff 	.word	0x004005ff

08009790 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b08c      	sub	sp, #48	@ 0x30
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
 800979c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d107      	bne.n	80097b8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e0c6      	b.n	8009946 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	f040 80bf 	bne.w	8009944 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	441a      	add	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d907      	bls.n	80097ea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097de:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e0ad      	b.n	8009946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2203      	movs	r2, #3
 80097ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2200      	movs	r2, #0
 80097f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 021a 	orr.w	r2, r2, #26
 8009808:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800980e:	4a50      	ldr	r2, [pc, #320]	@ (8009950 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009810:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009816:	4a4f      	ldr	r2, [pc, #316]	@ (8009954 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009818:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800981e:	2200      	movs	r2, #0
 8009820:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009826:	2b01      	cmp	r3, #1
 8009828:	d002      	beq.n	8009830 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800982a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982c:	025b      	lsls	r3, r3, #9
 800982e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b01      	cmp	r3, #1
 8009834:	d90a      	bls.n	800984c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	22a0      	movs	r2, #160	@ 0xa0
 800983a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009842:	4618      	mov	r0, r3
 8009844:	f004 fcdc 	bl	800e200 <SDMMC_CmdWriteMultiBlock>
 8009848:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800984a:	e009      	b.n	8009860 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2290      	movs	r2, #144	@ 0x90
 8009850:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009858:	4618      	mov	r0, r3
 800985a:	f004 fcaf 	bl	800e1bc <SDMMC_CmdWriteSingleBlock>
 800985e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009862:	2b00      	cmp	r3, #0
 8009864:	d012      	beq.n	800988c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a3b      	ldr	r2, [pc, #236]	@ (8009958 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800986c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009874:	431a      	orrs	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e05c      	b.n	8009946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0208 	orr.w	r2, r2, #8
 800989a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a0:	2240      	movs	r2, #64	@ 0x40
 80098a2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80098c4:	68b9      	ldr	r1, [r7, #8]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3380      	adds	r3, #128	@ 0x80
 80098cc:	461a      	mov	r2, r3
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	025b      	lsls	r3, r3, #9
 80098d2:	089b      	lsrs	r3, r3, #2
 80098d4:	f7fc f8aa 	bl	8005a2c <HAL_DMA_Start_IT>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d01a      	beq.n	8009914 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f022 021a 	bic.w	r2, r2, #26
 80098ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a19      	ldr	r2, [pc, #100]	@ (8009958 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80098f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e018      	b.n	8009946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009914:	f04f 33ff 	mov.w	r3, #4294967295
 8009918:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	025b      	lsls	r3, r3, #9
 800991e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009920:	2390      	movs	r3, #144	@ 0x90
 8009922:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009924:	2300      	movs	r3, #0
 8009926:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009928:	2300      	movs	r3, #0
 800992a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800992c:	2301      	movs	r3, #1
 800992e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f107 0210 	add.w	r2, r7, #16
 8009938:	4611      	mov	r1, r2
 800993a:	4618      	mov	r0, r3
 800993c:	f004 fbac 	bl	800e098 <SDMMC_ConfigData>

      return HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	e000      	b.n	8009946 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009944:	2302      	movs	r3, #2
  }
}
 8009946:	4618      	mov	r0, r3
 8009948:	3730      	adds	r7, #48	@ 0x30
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	08009e85 	.word	0x08009e85
 8009954:	08009f21 	.word	0x08009f21
 8009958:	004005ff 	.word	0x004005ff

0800995c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800997e:	0f9b      	lsrs	r3, r3, #30
 8009980:	b2da      	uxtb	r2, r3
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800998a:	0e9b      	lsrs	r3, r3, #26
 800998c:	b2db      	uxtb	r3, r3
 800998e:	f003 030f 	and.w	r3, r3, #15
 8009992:	b2da      	uxtb	r2, r3
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800999c:	0e1b      	lsrs	r3, r3, #24
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	f003 0303 	and.w	r3, r3, #3
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099ae:	0c1b      	lsrs	r3, r3, #16
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099ba:	0a1b      	lsrs	r3, r3, #8
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099d0:	0d1b      	lsrs	r3, r3, #20
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099dc:	0c1b      	lsrs	r3, r3, #16
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	f003 030f 	and.w	r3, r3, #15
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099ee:	0bdb      	lsrs	r3, r3, #15
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a00:	0b9b      	lsrs	r3, r3, #14
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a12:	0b5b      	lsrs	r3, r3, #13
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a24:	0b1b      	lsrs	r3, r3, #12
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2200      	movs	r2, #0
 8009a36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d163      	bne.n	8009b08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a44:	009a      	lsls	r2, r3, #2
 8009a46:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009a50:	0f92      	lsrs	r2, r2, #30
 8009a52:	431a      	orrs	r2, r3
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a5c:	0edb      	lsrs	r3, r3, #27
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	f003 0307 	and.w	r3, r3, #7
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a6e:	0e1b      	lsrs	r3, r3, #24
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a80:	0d5b      	lsrs	r3, r3, #21
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f003 0307 	and.w	r3, r3, #7
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a92:	0c9b      	lsrs	r3, r3, #18
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	b2da      	uxtb	r2, r3
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009aa4:	0bdb      	lsrs	r3, r3, #15
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	f003 0307 	and.w	r3, r3, #7
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	7e1b      	ldrb	r3, [r3, #24]
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	f003 0307 	and.w	r3, r3, #7
 8009ac6:	3302      	adds	r3, #2
 8009ac8:	2201      	movs	r2, #1
 8009aca:	fa02 f303 	lsl.w	r3, r2, r3
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009ad2:	fb03 f202 	mul.w	r2, r3, r2
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	7a1b      	ldrb	r3, [r3, #8]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	f003 030f 	and.w	r3, r3, #15
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	409a      	lsls	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009af4:	0a52      	lsrs	r2, r2, #9
 8009af6:	fb03 f202 	mul.w	r2, r3, r2
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b04:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b06:	e031      	b.n	8009b6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d11d      	bne.n	8009b4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b14:	041b      	lsls	r3, r3, #16
 8009b16:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b1e:	0c1b      	lsrs	r3, r3, #16
 8009b20:	431a      	orrs	r2, r3
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	029a      	lsls	r2, r3, #10
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b40:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b4a:	e00f      	b.n	8009b6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a58      	ldr	r2, [pc, #352]	@ (8009cb4 <HAL_SD_GetCardCSD+0x344>)
 8009b52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e09d      	b.n	8009ca8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b70:	0b9b      	lsrs	r3, r3, #14
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b82:	09db      	lsrs	r3, r3, #7
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ba4:	0fdb      	lsrs	r3, r3, #31
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bb0:	0f5b      	lsrs	r3, r3, #29
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0303 	and.w	r3, r3, #3
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bc2:	0e9b      	lsrs	r3, r3, #26
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bd4:	0d9b      	lsrs	r3, r3, #22
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	f003 030f 	and.w	r3, r3, #15
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009be6:	0d5b      	lsrs	r3, r3, #21
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c02:	0c1b      	lsrs	r3, r3, #16
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c16:	0bdb      	lsrs	r3, r3, #15
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c2a:	0b9b      	lsrs	r3, r3, #14
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c3e:	0b5b      	lsrs	r3, r3, #13
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c52:	0b1b      	lsrs	r3, r3, #12
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c66:	0a9b      	lsrs	r3, r3, #10
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c8e:	085b      	lsrs	r3, r3, #1
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	004005ff 	.word	0x004005ff

08009cb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009d10:	b5b0      	push	{r4, r5, r7, lr}
 8009d12:	b08e      	sub	sp, #56	@ 0x38
 8009d14:	af04      	add	r7, sp, #16
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2203      	movs	r2, #3
 8009d24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d02e      	beq.n	8009d8e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d36:	d106      	bne.n	8009d46 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d44:	e029      	b.n	8009d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d4c:	d10a      	bne.n	8009d64 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fabc 	bl	800a2cc <SD_WideBus_Enable>
 8009d54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d62:	e01a      	b.n	8009d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 faf9 	bl	800a362 <SD_WideBus_Disable>
 8009d70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	431a      	orrs	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d7e:	e00c      	b.n	8009d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d84:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d8c:	e005      	b.n	8009d9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d92:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00b      	beq.n	8009dba <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a26      	ldr	r2, [pc, #152]	@ (8009e40 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009da8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009db8:	e01f      	b.n	8009dfa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681d      	ldr	r5, [r3, #0]
 8009de0:	466c      	mov	r4, sp
 8009de2:	f107 0314 	add.w	r3, r7, #20
 8009de6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009dea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009dee:	f107 0308 	add.w	r3, r7, #8
 8009df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009df4:	4628      	mov	r0, r5
 8009df6:	f004 f8af 	bl	800df58 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009e02:	4618      	mov	r0, r3
 8009e04:	f004 f974 	bl	800e0f0 <SDMMC_CmdBlockLength>
 8009e08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00c      	beq.n	8009e2a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a0a      	ldr	r2, [pc, #40]	@ (8009e40 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009e16:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8009e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3728      	adds	r7, #40	@ 0x28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	004005ff 	.word	0x004005ff

08009e44 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009e50:	f107 030c 	add.w	r3, r7, #12
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa10 	bl	800a27c <SD_SendStatus>
 8009e5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d005      	beq.n	8009e70 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	431a      	orrs	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	0a5b      	lsrs	r3, r3, #9
 8009e74:	f003 030f 	and.w	r3, r3, #15
 8009e78:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009e7a:	693b      	ldr	r3, [r7, #16]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3718      	adds	r7, #24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e90:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec0:	2b82      	cmp	r3, #130	@ 0x82
 8009ec2:	d111      	bne.n	8009ee8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f004 f9bb 	bl	800e244 <SDMMC_CmdStopTransfer>
 8009ece:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d008      	beq.n	8009ee8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	431a      	orrs	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f7ff fd3a 	bl	800995c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f022 0208 	bic.w	r2, r2, #8
 8009ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009f00:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f004 fe11 	bl	800eb38 <HAL_SD_RxCpltCallback>
#endif
}
 8009f16:	bf00      	nop
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f2c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7fb fe6e 	bl	8005c10 <HAL_DMA_GetError>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d03e      	beq.n	8009fb8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f40:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f48:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d002      	beq.n	8009f56 <SD_DMAError+0x36>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d12d      	bne.n	8009fb2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a19      	ldr	r2, [pc, #100]	@ (8009fc0 <SD_DMAError+0xa0>)
 8009f5c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009f6c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f72:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009f7a:	6978      	ldr	r0, [r7, #20]
 8009f7c:	f7ff ff62 	bl	8009e44 <HAL_SD_GetCardState>
 8009f80:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b06      	cmp	r3, #6
 8009f86:	d002      	beq.n	8009f8e <SD_DMAError+0x6e>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	d10a      	bne.n	8009fa4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f004 f956 	bl	800e244 <SDMMC_CmdStopTransfer>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009fb2:	6978      	ldr	r0, [r7, #20]
 8009fb4:	f7ff fcd2 	bl	800995c <HAL_SD_ErrorCallback>
#endif
  }
}
 8009fb8:	bf00      	nop
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	004005ff 	.word	0x004005ff

08009fc4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fc4:	b5b0      	push	{r4, r5, r7, lr}
 8009fc6:	b094      	sub	sp, #80	@ 0x50
 8009fc8:	af04      	add	r7, sp, #16
 8009fca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f004 f806 	bl	800dfe6 <SDMMC_GetPowerState>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fe0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009fe4:	e0b8      	b.n	800a158 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d02f      	beq.n	800a04e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f004 fa31 	bl	800e45a <SDMMC_CmdSendCID>
 8009ff8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <SD_InitCard+0x40>
    {
      return errorstate;
 800a000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a002:	e0a9      	b.n	800a158 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2100      	movs	r1, #0
 800a00a:	4618      	mov	r0, r3
 800a00c:	f004 f831 	bl	800e072 <SDMMC_GetResponse>
 800a010:	4602      	mov	r2, r0
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2104      	movs	r1, #4
 800a01c:	4618      	mov	r0, r3
 800a01e:	f004 f828 	bl	800e072 <SDMMC_GetResponse>
 800a022:	4602      	mov	r2, r0
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2108      	movs	r1, #8
 800a02e:	4618      	mov	r0, r3
 800a030:	f004 f81f 	bl	800e072 <SDMMC_GetResponse>
 800a034:	4602      	mov	r2, r0
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	210c      	movs	r1, #12
 800a040:	4618      	mov	r0, r3
 800a042:	f004 f816 	bl	800e072 <SDMMC_GetResponse>
 800a046:	4602      	mov	r2, r0
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a052:	2b03      	cmp	r3, #3
 800a054:	d00d      	beq.n	800a072 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f107 020e 	add.w	r2, r7, #14
 800a05e:	4611      	mov	r1, r2
 800a060:	4618      	mov	r0, r3
 800a062:	f004 fa37 	bl	800e4d4 <SDMMC_CmdSetRelAdd>
 800a066:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <SD_InitCard+0xae>
    {
      return errorstate;
 800a06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a070:	e072      	b.n	800a158 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a076:	2b03      	cmp	r3, #3
 800a078:	d036      	beq.n	800a0e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a07a:	89fb      	ldrh	r3, [r7, #14]
 800a07c:	461a      	mov	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a08a:	041b      	lsls	r3, r3, #16
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f004 fa01 	bl	800e496 <SDMMC_CmdSendCSD>
 800a094:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a09c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a09e:	e05b      	b.n	800a158 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f003 ffe3 	bl	800e072 <SDMMC_GetResponse>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2104      	movs	r1, #4
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f003 ffda 	bl	800e072 <SDMMC_GetResponse>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2108      	movs	r1, #8
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f003 ffd1 	bl	800e072 <SDMMC_GetResponse>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	210c      	movs	r1, #12
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f003 ffc8 	bl	800e072 <SDMMC_GetResponse>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2104      	movs	r1, #4
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f003 ffbf 	bl	800e072 <SDMMC_GetResponse>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	0d1a      	lsrs	r2, r3, #20
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a0fc:	f107 0310 	add.w	r3, r7, #16
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff fc34 	bl	8009970 <HAL_SD_GetCardCSD>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a10e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a112:	e021      	b.n	800a158 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6819      	ldr	r1, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a11c:	041b      	lsls	r3, r3, #16
 800a11e:	2200      	movs	r2, #0
 800a120:	461c      	mov	r4, r3
 800a122:	4615      	mov	r5, r2
 800a124:	4622      	mov	r2, r4
 800a126:	462b      	mov	r3, r5
 800a128:	4608      	mov	r0, r1
 800a12a:	f004 f8ad 	bl	800e288 <SDMMC_CmdSelDesel>
 800a12e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <SD_InitCard+0x176>
  {
    return errorstate;
 800a136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a138:	e00e      	b.n	800a158 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681d      	ldr	r5, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	466c      	mov	r4, sp
 800a142:	f103 0210 	add.w	r2, r3, #16
 800a146:	ca07      	ldmia	r2, {r0, r1, r2}
 800a148:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a14c:	3304      	adds	r3, #4
 800a14e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a150:	4628      	mov	r0, r5
 800a152:	f003 ff01 	bl	800df58 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3740      	adds	r7, #64	@ 0x40
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bdb0      	pop	{r4, r5, r7, pc}

0800a160 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a168:	2300      	movs	r3, #0
 800a16a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a16c:	2300      	movs	r3, #0
 800a16e:	617b      	str	r3, [r7, #20]
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4618      	mov	r0, r3
 800a17a:	f004 f8a8 	bl	800e2ce <SDMMC_CmdGoIdleState>
 800a17e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	e072      	b.n	800a270 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4618      	mov	r0, r3
 800a190:	f004 f8bb 	bl	800e30a <SDMMC_CmdOperCond>
 800a194:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00d      	beq.n	800a1b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f004 f891 	bl	800e2ce <SDMMC_CmdGoIdleState>
 800a1ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d004      	beq.n	800a1be <SD_PowerON+0x5e>
    {
      return errorstate;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	e05b      	b.n	800a270 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d137      	bne.n	800a236 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f004 f8bb 	bl	800e348 <SDMMC_CmdAppCommand>
 800a1d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d02d      	beq.n	800a236 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a1de:	e047      	b.n	800a270 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f004 f8ae 	bl	800e348 <SDMMC_CmdAppCommand>
 800a1ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <SD_PowerON+0x98>
    {
      return errorstate;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	e03b      	b.n	800a270 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	491e      	ldr	r1, [pc, #120]	@ (800a278 <SD_PowerON+0x118>)
 800a1fe:	4618      	mov	r0, r3
 800a200:	f004 f8c4 	bl	800e38c <SDMMC_CmdAppOperCommand>
 800a204:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a20c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a210:	e02e      	b.n	800a270 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2100      	movs	r1, #0
 800a218:	4618      	mov	r0, r3
 800a21a:	f003 ff2a 	bl	800e072 <SDMMC_GetResponse>
 800a21e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	0fdb      	lsrs	r3, r3, #31
 800a224:	2b01      	cmp	r3, #1
 800a226:	d101      	bne.n	800a22c <SD_PowerON+0xcc>
 800a228:	2301      	movs	r3, #1
 800a22a:	e000      	b.n	800a22e <SD_PowerON+0xce>
 800a22c:	2300      	movs	r3, #0
 800a22e:	613b      	str	r3, [r7, #16]

    count++;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	3301      	adds	r3, #1
 800a234:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d802      	bhi.n	800a246 <SD_PowerON+0xe6>
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0cc      	beq.n	800a1e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d902      	bls.n	800a256 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a250:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a254:	e00c      	b.n	800a270 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d003      	beq.n	800a268 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	645a      	str	r2, [r3, #68]	@ 0x44
 800a266:	e002      	b.n	800a26e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	c1100000 	.word	0xc1100000

0800a27c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d102      	bne.n	800a292 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a28c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a290:	e018      	b.n	800a2c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a29a:	041b      	lsls	r3, r3, #16
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f004 f939 	bl	800e516 <SDMMC_CmdSendStatus>
 800a2a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	e009      	b.n	800a2c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f003 fedb 	bl	800e072 <SDMMC_GetResponse>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f003 fec5 	bl	800e072 <SDMMC_GetResponse>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2f2:	d102      	bne.n	800a2fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a2f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a2f8:	e02f      	b.n	800a35a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a2fa:	f107 030c 	add.w	r3, r7, #12
 800a2fe:	4619      	mov	r1, r3
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f879 	bl	800a3f8 <SD_FindSCR>
 800a306:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	e023      	b.n	800a35a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d01c      	beq.n	800a356 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a324:	041b      	lsls	r3, r3, #16
 800a326:	4619      	mov	r1, r3
 800a328:	4610      	mov	r0, r2
 800a32a:	f004 f80d 	bl	800e348 <SDMMC_CmdAppCommand>
 800a32e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	e00f      	b.n	800a35a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2102      	movs	r1, #2
 800a340:	4618      	mov	r0, r3
 800a342:	f004 f847 	bl	800e3d4 <SDMMC_CmdBusWidth>
 800a346:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	e003      	b.n	800a35a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a352:	2300      	movs	r3, #0
 800a354:	e001      	b.n	800a35a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a356:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b086      	sub	sp, #24
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a36a:	2300      	movs	r3, #0
 800a36c:	60fb      	str	r3, [r7, #12]
 800a36e:	2300      	movs	r3, #0
 800a370:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2100      	movs	r1, #0
 800a378:	4618      	mov	r0, r3
 800a37a:	f003 fe7a 	bl	800e072 <SDMMC_GetResponse>
 800a37e:	4603      	mov	r3, r0
 800a380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a384:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a388:	d102      	bne.n	800a390 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a38a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a38e:	e02f      	b.n	800a3f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a390:	f107 030c 	add.w	r3, r7, #12
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f82e 	bl	800a3f8 <SD_FindSCR>
 800a39c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	e023      	b.n	800a3f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d01c      	beq.n	800a3ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3ba:	041b      	lsls	r3, r3, #16
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	f003 ffc2 	bl	800e348 <SDMMC_CmdAppCommand>
 800a3c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	e00f      	b.n	800a3f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f003 fffc 	bl	800e3d4 <SDMMC_CmdBusWidth>
 800a3dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	e003      	b.n	800a3f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e001      	b.n	800a3f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a3ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a3f8:	b590      	push	{r4, r7, lr}
 800a3fa:	b08f      	sub	sp, #60	@ 0x3c
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a402:	f7fa fdfd 	bl	8005000 <HAL_GetTick>
 800a406:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a40c:	2300      	movs	r3, #0
 800a40e:	60bb      	str	r3, [r7, #8]
 800a410:	2300      	movs	r3, #0
 800a412:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2108      	movs	r1, #8
 800a41e:	4618      	mov	r0, r3
 800a420:	f003 fe66 	bl	800e0f0 <SDMMC_CmdBlockLength>
 800a424:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42e:	e0b2      	b.n	800a596 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a438:	041b      	lsls	r3, r3, #16
 800a43a:	4619      	mov	r1, r3
 800a43c:	4610      	mov	r0, r2
 800a43e:	f003 ff83 	bl	800e348 <SDMMC_CmdAppCommand>
 800a442:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44c:	e0a3      	b.n	800a596 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a44e:	f04f 33ff 	mov.w	r3, #4294967295
 800a452:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a454:	2308      	movs	r3, #8
 800a456:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a458:	2330      	movs	r3, #48	@ 0x30
 800a45a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a45c:	2302      	movs	r3, #2
 800a45e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a460:	2300      	movs	r3, #0
 800a462:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a464:	2301      	movs	r3, #1
 800a466:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f107 0210 	add.w	r2, r7, #16
 800a470:	4611      	mov	r1, r2
 800a472:	4618      	mov	r0, r3
 800a474:	f003 fe10 	bl	800e098 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f003 ffcb 	bl	800e418 <SDMMC_CmdSendSCR>
 800a482:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a486:	2b00      	cmp	r3, #0
 800a488:	d02a      	beq.n	800a4e0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48c:	e083      	b.n	800a596 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00f      	beq.n	800a4bc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6819      	ldr	r1, [r3, #0]
 800a4a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	f107 0208 	add.w	r2, r7, #8
 800a4a8:	18d4      	adds	r4, r2, r3
 800a4aa:	4608      	mov	r0, r1
 800a4ac:	f003 fd80 	bl	800dfb0 <SDMMC_ReadFIFO>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	6023      	str	r3, [r4, #0]
      index++;
 800a4b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ba:	e006      	b.n	800a4ca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d012      	beq.n	800a4f0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a4ca:	f7fa fd99 	bl	8005000 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d8:	d102      	bne.n	800a4e0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a4da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4de:	e05a      	b.n	800a596 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4e6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d0cf      	beq.n	800a48e <SD_FindSCR+0x96>
 800a4ee:	e000      	b.n	800a4f2 <SD_FindSCR+0xfa>
      break;
 800a4f0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f8:	f003 0308 	and.w	r3, r3, #8
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d005      	beq.n	800a50c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2208      	movs	r2, #8
 800a506:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a508:	2308      	movs	r3, #8
 800a50a:	e044      	b.n	800a596 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a512:	f003 0302 	and.w	r3, r3, #2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d005      	beq.n	800a526 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2202      	movs	r2, #2
 800a520:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a522:	2302      	movs	r3, #2
 800a524:	e037      	b.n	800a596 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a52c:	f003 0320 	and.w	r3, r3, #32
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2220      	movs	r2, #32
 800a53a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a53c:	2320      	movs	r3, #32
 800a53e:	e02a      	b.n	800a596 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a548:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	061a      	lsls	r2, r3, #24
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	021b      	lsls	r3, r3, #8
 800a552:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a556:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a560:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	0e1b      	lsrs	r3, r3, #24
 800a566:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56a:	601a      	str	r2, [r3, #0]
    scr++;
 800a56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56e:	3304      	adds	r3, #4
 800a570:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	061a      	lsls	r2, r3, #24
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	021b      	lsls	r3, r3, #8
 800a57a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a57e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	0a1b      	lsrs	r3, r3, #8
 800a584:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a588:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	0e1b      	lsrs	r3, r3, #24
 800a58e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a592:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	373c      	adds	r7, #60	@ 0x3c
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd90      	pop	{r4, r7, pc}

0800a59e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e025      	b.n	800a5fe <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d106      	bne.n	800a5cc <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7f7 fce8 	bl	8001f9c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	4619      	mov	r1, r3
 800a5de:	4610      	mov	r0, r2
 800a5e0:	f003 fbf4 	bl	800ddcc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	f003 fc48 	bl	800de84 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e04c      	b.n	800a6b4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d106      	bne.n	800a634 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7f9 fcf2 	bl	8004018 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2202      	movs	r2, #2
 800a638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f022 0203 	bic.w	r2, r2, #3
 800a64a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4b19      	ldr	r3, [pc, #100]	@ (800a6bc <HAL_SPDIFRX_Init+0xb4>)
 800a658:	4013      	ands	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a664:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a66a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a670:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a676:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a67c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a682:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a688:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800a68e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800a694:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	4313      	orrs	r3, r2
 800a69a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	fff88407 	.word	0xfff88407

0800a6c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e09d      	b.n	800a80e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d108      	bne.n	800a6ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6e2:	d009      	beq.n	800a6f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	61da      	str	r2, [r3, #28]
 800a6ea:	e005      	b.n	800a6f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d106      	bne.n	800a718 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7f9 fd22 	bl	800415c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2202      	movs	r2, #2
 800a71c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a72e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a738:	d902      	bls.n	800a740 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a73a:	2300      	movs	r3, #0
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	e002      	b.n	800a746 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a744:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a74e:	d007      	beq.n	800a760 <HAL_SPI_Init+0xa0>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a758:	d002      	beq.n	800a760 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a770:	431a      	orrs	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	431a      	orrs	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a78e:	431a      	orrs	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a798:	431a      	orrs	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7a2:	ea42 0103 	orr.w	r1, r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	430a      	orrs	r2, r1
 800a7b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	0c1b      	lsrs	r3, r3, #16
 800a7bc:	f003 0204 	and.w	r2, r3, #4
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c4:	f003 0310 	and.w	r3, r3, #16
 800a7c8:	431a      	orrs	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ce:	f003 0308 	and.w	r3, r3, #8
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a7dc:	ea42 0103 	orr.w	r1, r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	430a      	orrs	r2, r1
 800a7ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	69da      	ldr	r2, [r3, #28]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a7fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b088      	sub	sp, #32
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	60b9      	str	r1, [r7, #8]
 800a820:	603b      	str	r3, [r7, #0]
 800a822:	4613      	mov	r3, r2
 800a824:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a826:	f7fa fbeb 	bl	8005000 <HAL_GetTick>
 800a82a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a82c:	88fb      	ldrh	r3, [r7, #6]
 800a82e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d001      	beq.n	800a840 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a83c:	2302      	movs	r3, #2
 800a83e:	e15c      	b.n	800aafa <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d002      	beq.n	800a84c <HAL_SPI_Transmit+0x36>
 800a846:	88fb      	ldrh	r3, [r7, #6]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e154      	b.n	800aafa <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a856:	2b01      	cmp	r3, #1
 800a858:	d101      	bne.n	800a85e <HAL_SPI_Transmit+0x48>
 800a85a:	2302      	movs	r3, #2
 800a85c:	e14d      	b.n	800aafa <HAL_SPI_Transmit+0x2e4>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2203      	movs	r2, #3
 800a86a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	88fa      	ldrh	r2, [r7, #6]
 800a87e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	88fa      	ldrh	r2, [r7, #6]
 800a884:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8b0:	d10f      	bne.n	800a8d2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a8d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8dc:	2b40      	cmp	r3, #64	@ 0x40
 800a8de:	d007      	beq.n	800a8f0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a8f8:	d952      	bls.n	800a9a0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <HAL_SPI_Transmit+0xf2>
 800a902:	8b7b      	ldrh	r3, [r7, #26]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d145      	bne.n	800a994 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a90c:	881a      	ldrh	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a918:	1c9a      	adds	r2, r3, #2
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a922:	b29b      	uxth	r3, r3
 800a924:	3b01      	subs	r3, #1
 800a926:	b29a      	uxth	r2, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a92c:	e032      	b.n	800a994 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	f003 0302 	and.w	r3, r3, #2
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d112      	bne.n	800a962 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a940:	881a      	ldrh	r2, [r3, #0]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a94c:	1c9a      	adds	r2, r3, #2
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a956:	b29b      	uxth	r3, r3
 800a958:	3b01      	subs	r3, #1
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a960:	e018      	b.n	800a994 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a962:	f7fa fb4d 	bl	8005000 <HAL_GetTick>
 800a966:	4602      	mov	r2, r0
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d803      	bhi.n	800a97a <HAL_SPI_Transmit+0x164>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a978:	d102      	bne.n	800a980 <HAL_SPI_Transmit+0x16a>
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d109      	bne.n	800a994 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a990:	2303      	movs	r3, #3
 800a992:	e0b2      	b.n	800aafa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a998:	b29b      	uxth	r3, r3
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1c7      	bne.n	800a92e <HAL_SPI_Transmit+0x118>
 800a99e:	e083      	b.n	800aaa8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d002      	beq.n	800a9ae <HAL_SPI_Transmit+0x198>
 800a9a8:	8b7b      	ldrh	r3, [r7, #26]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d177      	bne.n	800aa9e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d912      	bls.n	800a9de <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9bc:	881a      	ldrh	r2, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9c8:	1c9a      	adds	r2, r3, #2
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	3b02      	subs	r3, #2
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a9dc:	e05f      	b.n	800aa9e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	330c      	adds	r3, #12
 800a9e8:	7812      	ldrb	r2, [r2, #0]
 800a9ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f0:	1c5a      	adds	r2, r3, #1
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800aa04:	e04b      	b.n	800aa9e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d12b      	bne.n	800aa6c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d912      	bls.n	800aa44 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa22:	881a      	ldrh	r2, [r3, #0]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa2e:	1c9a      	adds	r2, r3, #2
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	3b02      	subs	r3, #2
 800aa3c:	b29a      	uxth	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800aa42:	e02c      	b.n	800aa9e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	7812      	ldrb	r2, [r2, #0]
 800aa50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	3b01      	subs	r3, #1
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800aa6a:	e018      	b.n	800aa9e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa6c:	f7fa fac8 	bl	8005000 <HAL_GetTick>
 800aa70:	4602      	mov	r2, r0
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	1ad3      	subs	r3, r2, r3
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d803      	bhi.n	800aa84 <HAL_SPI_Transmit+0x26e>
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa82:	d102      	bne.n	800aa8a <HAL_SPI_Transmit+0x274>
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d109      	bne.n	800aa9e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e02d      	b.n	800aafa <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1ae      	bne.n	800aa06 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aaa8:	69fa      	ldr	r2, [r7, #28]
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 fd27 	bl	800b500 <SPI_EndRxTxTransaction>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d002      	beq.n	800aabe <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2220      	movs	r2, #32
 800aabc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10a      	bne.n	800aadc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aac6:	2300      	movs	r3, #0
 800aac8:	617b      	str	r3, [r7, #20]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	617b      	str	r3, [r7, #20]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	617b      	str	r3, [r7, #20]
 800aada:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e000      	b.n	800aafa <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
  }
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3720      	adds	r7, #32
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b088      	sub	sp, #32
 800ab06:	af02      	add	r7, sp, #8
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	603b      	str	r3, [r7, #0]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d001      	beq.n	800ab22 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800ab1e:	2302      	movs	r3, #2
 800ab20:	e123      	b.n	800ad6a <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <HAL_SPI_Receive+0x2c>
 800ab28:	88fb      	ldrh	r3, [r7, #6]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e11b      	b.n	800ad6a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab3a:	d112      	bne.n	800ab62 <HAL_SPI_Receive+0x60>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10e      	bne.n	800ab62 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2204      	movs	r2, #4
 800ab48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ab4c:	88fa      	ldrh	r2, [r7, #6]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	4613      	mov	r3, r2
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	68b9      	ldr	r1, [r7, #8]
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f000 f90a 	bl	800ad72 <HAL_SPI_TransmitReceive>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	e103      	b.n	800ad6a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab62:	f7fa fa4d 	bl	8005000 <HAL_GetTick>
 800ab66:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d101      	bne.n	800ab76 <HAL_SPI_Receive+0x74>
 800ab72:	2302      	movs	r3, #2
 800ab74:	e0f9      	b.n	800ad6a <HAL_SPI_Receive+0x268>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2204      	movs	r2, #4
 800ab82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	88fa      	ldrh	r2, [r7, #6]
 800ab96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	88fa      	ldrh	r2, [r7, #6]
 800ab9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2200      	movs	r2, #0
 800abac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2200      	movs	r2, #0
 800abb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2200      	movs	r2, #0
 800abbe:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800abc8:	d908      	bls.n	800abdc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	685a      	ldr	r2, [r3, #4]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800abd8:	605a      	str	r2, [r3, #4]
 800abda:	e007      	b.n	800abec <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800abea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abf4:	d10f      	bne.n	800ac16 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ac14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac20:	2b40      	cmp	r3, #64	@ 0x40
 800ac22:	d007      	beq.n	800ac34 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ac3c:	d875      	bhi.n	800ad2a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ac3e:	e037      	b.n	800acb0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d117      	bne.n	800ac7e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f103 020c 	add.w	r2, r3, #12
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5a:	7812      	ldrb	r2, [r2, #0]
 800ac5c:	b2d2      	uxtb	r2, r2
 800ac5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac64:	1c5a      	adds	r2, r3, #1
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	3b01      	subs	r3, #1
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800ac7c:	e018      	b.n	800acb0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac7e:	f7fa f9bf 	bl	8005000 <HAL_GetTick>
 800ac82:	4602      	mov	r2, r0
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d803      	bhi.n	800ac96 <HAL_SPI_Receive+0x194>
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac94:	d102      	bne.n	800ac9c <HAL_SPI_Receive+0x19a>
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d109      	bne.n	800acb0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e05c      	b.n	800ad6a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1c1      	bne.n	800ac40 <HAL_SPI_Receive+0x13e>
 800acbc:	e03b      	b.n	800ad36 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	f003 0301 	and.w	r3, r3, #1
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d115      	bne.n	800acf8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68da      	ldr	r2, [r3, #12]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd6:	b292      	uxth	r2, r2
 800acd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acde:	1c9a      	adds	r2, r3, #2
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800acea:	b29b      	uxth	r3, r3
 800acec:	3b01      	subs	r3, #1
 800acee:	b29a      	uxth	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800acf6:	e018      	b.n	800ad2a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acf8:	f7fa f982 	bl	8005000 <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d803      	bhi.n	800ad10 <HAL_SPI_Receive+0x20e>
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0e:	d102      	bne.n	800ad16 <HAL_SPI_Receive+0x214>
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d109      	bne.n	800ad2a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e01f      	b.n	800ad6a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1c3      	bne.n	800acbe <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f000 fb64 	bl	800b408 <SPI_EndRxTransaction>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2220      	movs	r2, #32
 800ad4a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e000      	b.n	800ad6a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800ad68:	2300      	movs	r3, #0
  }
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b08a      	sub	sp, #40	@ 0x28
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	60b9      	str	r1, [r7, #8]
 800ad7c:	607a      	str	r2, [r7, #4]
 800ad7e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ad80:	2301      	movs	r3, #1
 800ad82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad84:	f7fa f93c 	bl	8005000 <HAL_GetTick>
 800ad88:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ad90:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ad98:	887b      	ldrh	r3, [r7, #2]
 800ad9a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800ad9c:	887b      	ldrh	r3, [r7, #2]
 800ad9e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ada0:	7ffb      	ldrb	r3, [r7, #31]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d00c      	beq.n	800adc0 <HAL_SPI_TransmitReceive+0x4e>
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800adac:	d106      	bne.n	800adbc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d102      	bne.n	800adbc <HAL_SPI_TransmitReceive+0x4a>
 800adb6:	7ffb      	ldrb	r3, [r7, #31]
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d001      	beq.n	800adc0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800adbc:	2302      	movs	r3, #2
 800adbe:	e1f3      	b.n	800b1a8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d005      	beq.n	800add2 <HAL_SPI_TransmitReceive+0x60>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <HAL_SPI_TransmitReceive+0x60>
 800adcc:	887b      	ldrh	r3, [r7, #2]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e1e8      	b.n	800b1a8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800addc:	2b01      	cmp	r3, #1
 800adde:	d101      	bne.n	800ade4 <HAL_SPI_TransmitReceive+0x72>
 800ade0:	2302      	movs	r3, #2
 800ade2:	e1e1      	b.n	800b1a8 <HAL_SPI_TransmitReceive+0x436>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d003      	beq.n	800ae00 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2205      	movs	r2, #5
 800adfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	887a      	ldrh	r2, [r7, #2]
 800ae10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	887a      	ldrh	r2, [r7, #2]
 800ae18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	887a      	ldrh	r2, [r7, #2]
 800ae26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	887a      	ldrh	r2, [r7, #2]
 800ae2c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ae42:	d802      	bhi.n	800ae4a <HAL_SPI_TransmitReceive+0xd8>
 800ae44:	8abb      	ldrh	r3, [r7, #20]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d908      	bls.n	800ae5c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ae58:	605a      	str	r2, [r3, #4]
 800ae5a:	e007      	b.n	800ae6c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ae6a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae76:	2b40      	cmp	r3, #64	@ 0x40
 800ae78:	d007      	beq.n	800ae8a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ae92:	f240 8083 	bls.w	800af9c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <HAL_SPI_TransmitReceive+0x132>
 800ae9e:	8afb      	ldrh	r3, [r7, #22]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d16f      	bne.n	800af84 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea8:	881a      	ldrh	r2, [r3, #0]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeb4:	1c9a      	adds	r2, r3, #2
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	3b01      	subs	r3, #1
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aec8:	e05c      	b.n	800af84 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f003 0302 	and.w	r3, r3, #2
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d11b      	bne.n	800af10 <HAL_SPI_TransmitReceive+0x19e>
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aedc:	b29b      	uxth	r3, r3
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d016      	beq.n	800af10 <HAL_SPI_TransmitReceive+0x19e>
 800aee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d113      	bne.n	800af10 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeec:	881a      	ldrh	r2, [r3, #0]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef8:	1c9a      	adds	r2, r3, #2
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af02:	b29b      	uxth	r3, r3
 800af04:	3b01      	subs	r3, #1
 800af06:	b29a      	uxth	r2, r3
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d11c      	bne.n	800af58 <HAL_SPI_TransmitReceive+0x1e6>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800af24:	b29b      	uxth	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d016      	beq.n	800af58 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68da      	ldr	r2, [r3, #12]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af34:	b292      	uxth	r2, r2
 800af36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af3c:	1c9a      	adds	r2, r3, #2
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800af48:	b29b      	uxth	r3, r3
 800af4a:	3b01      	subs	r3, #1
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800af54:	2301      	movs	r3, #1
 800af56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800af58:	f7fa f852 	bl	8005000 <HAL_GetTick>
 800af5c:	4602      	mov	r2, r0
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af64:	429a      	cmp	r2, r3
 800af66:	d80d      	bhi.n	800af84 <HAL_SPI_TransmitReceive+0x212>
 800af68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6e:	d009      	beq.n	800af84 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e111      	b.n	800b1a8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af88:	b29b      	uxth	r3, r3
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d19d      	bne.n	800aeca <HAL_SPI_TransmitReceive+0x158>
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800af94:	b29b      	uxth	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d197      	bne.n	800aeca <HAL_SPI_TransmitReceive+0x158>
 800af9a:	e0e5      	b.n	800b168 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d003      	beq.n	800afac <HAL_SPI_TransmitReceive+0x23a>
 800afa4:	8afb      	ldrh	r3, [r7, #22]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	f040 80d1 	bne.w	800b14e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d912      	bls.n	800afdc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afba:	881a      	ldrh	r2, [r3, #0]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afc6:	1c9a      	adds	r2, r3, #2
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	3b02      	subs	r3, #2
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800afda:	e0b8      	b.n	800b14e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	330c      	adds	r3, #12
 800afe6:	7812      	ldrb	r2, [r2, #0]
 800afe8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aff8:	b29b      	uxth	r3, r3
 800affa:	3b01      	subs	r3, #1
 800affc:	b29a      	uxth	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b002:	e0a4      	b.n	800b14e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d134      	bne.n	800b07c <HAL_SPI_TransmitReceive+0x30a>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b016:	b29b      	uxth	r3, r3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d02f      	beq.n	800b07c <HAL_SPI_TransmitReceive+0x30a>
 800b01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d12c      	bne.n	800b07c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b026:	b29b      	uxth	r3, r3
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d912      	bls.n	800b052 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b030:	881a      	ldrh	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03c:	1c9a      	adds	r2, r3, #2
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b046:	b29b      	uxth	r3, r3
 800b048:	3b02      	subs	r3, #2
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b050:	e012      	b.n	800b078 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	330c      	adds	r3, #12
 800b05c:	7812      	ldrb	r2, [r2, #0]
 800b05e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b064:	1c5a      	adds	r2, r3, #1
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b06e:	b29b      	uxth	r3, r3
 800b070:	3b01      	subs	r3, #1
 800b072:	b29a      	uxth	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b078:	2300      	movs	r3, #0
 800b07a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	2b01      	cmp	r3, #1
 800b088:	d148      	bne.n	800b11c <HAL_SPI_TransmitReceive+0x3aa>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b090:	b29b      	uxth	r3, r3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d042      	beq.n	800b11c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d923      	bls.n	800b0ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68da      	ldr	r2, [r3, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ac:	b292      	uxth	r2, r2
 800b0ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0b4:	1c9a      	adds	r2, r3, #2
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	3b02      	subs	r3, #2
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d81f      	bhi.n	800b118 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	685a      	ldr	r2, [r3, #4]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b0e6:	605a      	str	r2, [r3, #4]
 800b0e8:	e016      	b.n	800b118 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f103 020c 	add.w	r2, r3, #12
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0f6:	7812      	ldrb	r2, [r2, #0]
 800b0f8:	b2d2      	uxtb	r2, r2
 800b0fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b100:	1c5a      	adds	r2, r3, #1
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	3b01      	subs	r3, #1
 800b110:	b29a      	uxth	r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b118:	2301      	movs	r3, #1
 800b11a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b11c:	f7f9 ff70 	bl	8005000 <HAL_GetTick>
 800b120:	4602      	mov	r2, r0
 800b122:	6a3b      	ldr	r3, [r7, #32]
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b128:	429a      	cmp	r2, r3
 800b12a:	d803      	bhi.n	800b134 <HAL_SPI_TransmitReceive+0x3c2>
 800b12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b132:	d102      	bne.n	800b13a <HAL_SPI_TransmitReceive+0x3c8>
 800b134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b136:	2b00      	cmp	r3, #0
 800b138:	d109      	bne.n	800b14e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2201      	movs	r2, #1
 800b13e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800b14a:	2303      	movs	r3, #3
 800b14c:	e02c      	b.n	800b1a8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b152:	b29b      	uxth	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	f47f af55 	bne.w	800b004 <HAL_SPI_TransmitReceive+0x292>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800b160:	b29b      	uxth	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	f47f af4e 	bne.w	800b004 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b168:	6a3a      	ldr	r2, [r7, #32]
 800b16a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f000 f9c7 	bl	800b500 <SPI_EndRxTxTransaction>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d008      	beq.n	800b18a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2220      	movs	r2, #32
 800b17c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	e00e      	b.n	800b1a8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d001      	beq.n	800b1a6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e000      	b.n	800b1a8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800b1a6:	2300      	movs	r3, #0
  }
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3728      	adds	r7, #40	@ 0x28
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b1be:	b2db      	uxtb	r3, r3
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b1dc:	f7f9 ff10 	bl	8005000 <HAL_GetTick>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e4:	1a9b      	subs	r3, r3, r2
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b1ec:	f7f9 ff08 	bl	8005000 <HAL_GetTick>
 800b1f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b1f2:	4b39      	ldr	r3, [pc, #228]	@ (800b2d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	015b      	lsls	r3, r3, #5
 800b1f8:	0d1b      	lsrs	r3, r3, #20
 800b1fa:	69fa      	ldr	r2, [r7, #28]
 800b1fc:	fb02 f303 	mul.w	r3, r2, r3
 800b200:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b202:	e055      	b.n	800b2b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20a:	d051      	beq.n	800b2b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b20c:	f7f9 fef8 	bl	8005000 <HAL_GetTick>
 800b210:	4602      	mov	r2, r0
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	69fa      	ldr	r2, [r7, #28]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d902      	bls.n	800b222 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d13d      	bne.n	800b29e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b230:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b23a:	d111      	bne.n	800b260 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b244:	d004      	beq.n	800b250 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b24e:	d107      	bne.n	800b260 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b25e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b268:	d10f      	bne.n	800b28a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b278:	601a      	str	r2, [r3, #0]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b288:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2201      	movs	r2, #1
 800b28e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b29a:	2303      	movs	r3, #3
 800b29c:	e018      	b.n	800b2d0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d102      	bne.n	800b2aa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	61fb      	str	r3, [r7, #28]
 800b2a8:	e002      	b.n	800b2b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	689a      	ldr	r2, [r3, #8]
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	bf0c      	ite	eq
 800b2c0:	2301      	moveq	r3, #1
 800b2c2:	2300      	movne	r3, #0
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	79fb      	ldrb	r3, [r7, #7]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d19a      	bne.n	800b204 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3720      	adds	r7, #32
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20000004 	.word	0x20000004

0800b2dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b08a      	sub	sp, #40	@ 0x28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
 800b2e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b2ee:	f7f9 fe87 	bl	8005000 <HAL_GetTick>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f6:	1a9b      	subs	r3, r3, r2
 800b2f8:	683a      	ldr	r2, [r7, #0]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b2fe:	f7f9 fe7f 	bl	8005000 <HAL_GetTick>
 800b302:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	330c      	adds	r3, #12
 800b30a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b30c:	4b3d      	ldr	r3, [pc, #244]	@ (800b404 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	4613      	mov	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	00da      	lsls	r2, r3, #3
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	0d1b      	lsrs	r3, r3, #20
 800b31c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b31e:	fb02 f303 	mul.w	r3, r2, r3
 800b322:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b324:	e061      	b.n	800b3ea <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b32c:	d107      	bne.n	800b33e <SPI_WaitFifoStateUntilTimeout+0x62>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d104      	bne.n	800b33e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b344:	d051      	beq.n	800b3ea <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b346:	f7f9 fe5b 	bl	8005000 <HAL_GetTick>
 800b34a:	4602      	mov	r2, r0
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b352:	429a      	cmp	r2, r3
 800b354:	d902      	bls.n	800b35c <SPI_WaitFifoStateUntilTimeout+0x80>
 800b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d13d      	bne.n	800b3d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b36a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b374:	d111      	bne.n	800b39a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b37e:	d004      	beq.n	800b38a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b388:	d107      	bne.n	800b39a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b398:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3a2:	d10f      	bne.n	800b3c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b3c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	e011      	b.n	800b3fc <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d102      	bne.n	800b3e4 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3e2:	e002      	b.n	800b3ea <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	689a      	ldr	r2, [r3, #8]
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d195      	bne.n	800b326 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3728      	adds	r7, #40	@ 0x28
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	20000004 	.word	0x20000004

0800b408 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af02      	add	r7, sp, #8
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b41c:	d111      	bne.n	800b442 <SPI_EndRxTransaction+0x3a>
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b426:	d004      	beq.n	800b432 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b430:	d107      	bne.n	800b442 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b440:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b44a:	d112      	bne.n	800b472 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2200      	movs	r2, #0
 800b454:	2180      	movs	r1, #128	@ 0x80
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f7ff feb8 	bl	800b1cc <SPI_WaitFlagStateUntilTimeout>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d021      	beq.n	800b4a6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b466:	f043 0220 	orr.w	r2, r3, #32
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b46e:	2303      	movs	r3, #3
 800b470:	e03d      	b.n	800b4ee <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b472:	4b21      	ldr	r3, [pc, #132]	@ (800b4f8 <SPI_EndRxTransaction+0xf0>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a21      	ldr	r2, [pc, #132]	@ (800b4fc <SPI_EndRxTransaction+0xf4>)
 800b478:	fba2 2303 	umull	r2, r3, r2, r3
 800b47c:	0d5b      	lsrs	r3, r3, #21
 800b47e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b482:	fb02 f303 	mul.w	r3, r2, r3
 800b486:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	3b01      	subs	r3, #1
 800b492:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b49e:	2b80      	cmp	r3, #128	@ 0x80
 800b4a0:	d0f2      	beq.n	800b488 <SPI_EndRxTransaction+0x80>
 800b4a2:	e000      	b.n	800b4a6 <SPI_EndRxTransaction+0x9e>
        break;
 800b4a4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b4ae:	d11d      	bne.n	800b4ec <SPI_EndRxTransaction+0xe4>
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b4b8:	d004      	beq.n	800b4c4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4c2:	d113      	bne.n	800b4ec <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f7ff ff03 	bl	800b2dc <SPI_WaitFifoStateUntilTimeout>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d007      	beq.n	800b4ec <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4e0:	f043 0220 	orr.w	r2, r3, #32
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	e000      	b.n	800b4ee <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000004 	.word	0x20000004
 800b4fc:	165e9f81 	.word	0x165e9f81

0800b500 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af02      	add	r7, sp, #8
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2200      	movs	r2, #0
 800b514:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f7ff fedf 	bl	800b2dc <SPI_WaitFifoStateUntilTimeout>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d007      	beq.n	800b534 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b528:	f043 0220 	orr.w	r2, r3, #32
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b530:	2303      	movs	r3, #3
 800b532:	e046      	b.n	800b5c2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b534:	4b25      	ldr	r3, [pc, #148]	@ (800b5cc <SPI_EndRxTxTransaction+0xcc>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a25      	ldr	r2, [pc, #148]	@ (800b5d0 <SPI_EndRxTxTransaction+0xd0>)
 800b53a:	fba2 2303 	umull	r2, r3, r2, r3
 800b53e:	0d5b      	lsrs	r3, r3, #21
 800b540:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b544:	fb02 f303 	mul.w	r3, r2, r3
 800b548:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b552:	d112      	bne.n	800b57a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2200      	movs	r2, #0
 800b55c:	2180      	movs	r1, #128	@ 0x80
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f7ff fe34 	bl	800b1cc <SPI_WaitFlagStateUntilTimeout>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d016      	beq.n	800b598 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b56e:	f043 0220 	orr.w	r2, r3, #32
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	e023      	b.n	800b5c2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00a      	beq.n	800b596 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	3b01      	subs	r3, #1
 800b584:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b590:	2b80      	cmp	r3, #128	@ 0x80
 800b592:	d0f2      	beq.n	800b57a <SPI_EndRxTxTransaction+0x7a>
 800b594:	e000      	b.n	800b598 <SPI_EndRxTxTransaction+0x98>
        break;
 800b596:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f7ff fe99 	bl	800b2dc <SPI_WaitFifoStateUntilTimeout>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d007      	beq.n	800b5c0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5b4:	f043 0220 	orr.w	r2, r3, #32
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e000      	b.n	800b5c2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3718      	adds	r7, #24
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20000004 	.word	0x20000004
 800b5d0:	165e9f81 	.word	0x165e9f81

0800b5d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e049      	b.n	800b67a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d106      	bne.n	800b600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7f9 fa50 	bl	8004aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2202      	movs	r2, #2
 800b604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3304      	adds	r3, #4
 800b610:	4619      	mov	r1, r3
 800b612:	4610      	mov	r0, r2
 800b614:	f000 fc12 	bl	800be3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b692:	b2db      	uxtb	r3, r3
 800b694:	2b01      	cmp	r3, #1
 800b696:	d001      	beq.n	800b69c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	e054      	b.n	800b746 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68da      	ldr	r2, [r3, #12]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f042 0201 	orr.w	r2, r2, #1
 800b6b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a26      	ldr	r2, [pc, #152]	@ (800b754 <HAL_TIM_Base_Start_IT+0xd0>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d022      	beq.n	800b704 <HAL_TIM_Base_Start_IT+0x80>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6c6:	d01d      	beq.n	800b704 <HAL_TIM_Base_Start_IT+0x80>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a22      	ldr	r2, [pc, #136]	@ (800b758 <HAL_TIM_Base_Start_IT+0xd4>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d018      	beq.n	800b704 <HAL_TIM_Base_Start_IT+0x80>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a21      	ldr	r2, [pc, #132]	@ (800b75c <HAL_TIM_Base_Start_IT+0xd8>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d013      	beq.n	800b704 <HAL_TIM_Base_Start_IT+0x80>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a1f      	ldr	r2, [pc, #124]	@ (800b760 <HAL_TIM_Base_Start_IT+0xdc>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d00e      	beq.n	800b704 <HAL_TIM_Base_Start_IT+0x80>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a1e      	ldr	r2, [pc, #120]	@ (800b764 <HAL_TIM_Base_Start_IT+0xe0>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d009      	beq.n	800b704 <HAL_TIM_Base_Start_IT+0x80>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a1c      	ldr	r2, [pc, #112]	@ (800b768 <HAL_TIM_Base_Start_IT+0xe4>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d004      	beq.n	800b704 <HAL_TIM_Base_Start_IT+0x80>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a1b      	ldr	r2, [pc, #108]	@ (800b76c <HAL_TIM_Base_Start_IT+0xe8>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d115      	bne.n	800b730 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689a      	ldr	r2, [r3, #8]
 800b70a:	4b19      	ldr	r3, [pc, #100]	@ (800b770 <HAL_TIM_Base_Start_IT+0xec>)
 800b70c:	4013      	ands	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2b06      	cmp	r3, #6
 800b714:	d015      	beq.n	800b742 <HAL_TIM_Base_Start_IT+0xbe>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b71c:	d011      	beq.n	800b742 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f042 0201 	orr.w	r2, r2, #1
 800b72c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b72e:	e008      	b.n	800b742 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f042 0201 	orr.w	r2, r2, #1
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	e000      	b.n	800b744 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b742:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3714      	adds	r7, #20
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	40010000 	.word	0x40010000
 800b758:	40000400 	.word	0x40000400
 800b75c:	40000800 	.word	0x40000800
 800b760:	40000c00 	.word	0x40000c00
 800b764:	40010400 	.word	0x40010400
 800b768:	40014000 	.word	0x40014000
 800b76c:	40001800 	.word	0x40001800
 800b770:	00010007 	.word	0x00010007

0800b774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d101      	bne.n	800b786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	e049      	b.n	800b81a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d106      	bne.n	800b7a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7f9 f9ee 	bl	8004b7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f000 fb42 	bl	800be3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	d020      	beq.n	800b886 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f003 0302 	and.w	r3, r3, #2
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d01b      	beq.n	800b886 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f06f 0202 	mvn.w	r2, #2
 800b856:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	f003 0303 	and.w	r3, r3, #3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 fac7 	bl	800be00 <HAL_TIM_IC_CaptureCallback>
 800b872:	e005      	b.n	800b880 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fab9 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 faca 	bl	800be14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f003 0304 	and.w	r3, r3, #4
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d020      	beq.n	800b8d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f003 0304 	and.w	r3, r3, #4
 800b896:	2b00      	cmp	r3, #0
 800b898:	d01b      	beq.n	800b8d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f06f 0204 	mvn.w	r2, #4
 800b8a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d003      	beq.n	800b8c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 faa1 	bl	800be00 <HAL_TIM_IC_CaptureCallback>
 800b8be:	e005      	b.n	800b8cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fa93 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 faa4 	bl	800be14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	f003 0308 	and.w	r3, r3, #8
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d020      	beq.n	800b91e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f003 0308 	and.w	r3, r3, #8
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d01b      	beq.n	800b91e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f06f 0208 	mvn.w	r2, #8
 800b8ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2204      	movs	r2, #4
 800b8f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	f003 0303 	and.w	r3, r3, #3
 800b900:	2b00      	cmp	r3, #0
 800b902:	d003      	beq.n	800b90c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fa7b 	bl	800be00 <HAL_TIM_IC_CaptureCallback>
 800b90a:	e005      	b.n	800b918 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fa6d 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fa7e 	bl	800be14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	f003 0310 	and.w	r3, r3, #16
 800b924:	2b00      	cmp	r3, #0
 800b926:	d020      	beq.n	800b96a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f003 0310 	and.w	r3, r3, #16
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d01b      	beq.n	800b96a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f06f 0210 	mvn.w	r2, #16
 800b93a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2208      	movs	r2, #8
 800b940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	69db      	ldr	r3, [r3, #28]
 800b948:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fa55 	bl	800be00 <HAL_TIM_IC_CaptureCallback>
 800b956:	e005      	b.n	800b964 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fa47 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fa58 	bl	800be14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00c      	beq.n	800b98e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f003 0301 	and.w	r3, r3, #1
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d007      	beq.n	800b98e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f06f 0201 	mvn.w	r2, #1
 800b986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7f7 ffd9 	bl	8003940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b994:	2b00      	cmp	r3, #0
 800b996:	d104      	bne.n	800b9a2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00c      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d007      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fef4 	bl	800c7a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00c      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d007      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 feec 	bl	800c7b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00c      	beq.n	800ba04 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d007      	beq.n	800ba04 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b9fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fa12 	bl	800be28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	f003 0320 	and.w	r3, r3, #32
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00c      	beq.n	800ba28 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f003 0320 	and.w	r3, r3, #32
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d007      	beq.n	800ba28 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f06f 0220 	mvn.w	r2, #32
 800ba20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 feb4 	bl	800c790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba28:	bf00      	nop
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d101      	bne.n	800ba4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	e0ff      	b.n	800bc4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b14      	cmp	r3, #20
 800ba5a:	f200 80f0 	bhi.w	800bc3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ba5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba64:	0800bab9 	.word	0x0800bab9
 800ba68:	0800bc3f 	.word	0x0800bc3f
 800ba6c:	0800bc3f 	.word	0x0800bc3f
 800ba70:	0800bc3f 	.word	0x0800bc3f
 800ba74:	0800baf9 	.word	0x0800baf9
 800ba78:	0800bc3f 	.word	0x0800bc3f
 800ba7c:	0800bc3f 	.word	0x0800bc3f
 800ba80:	0800bc3f 	.word	0x0800bc3f
 800ba84:	0800bb3b 	.word	0x0800bb3b
 800ba88:	0800bc3f 	.word	0x0800bc3f
 800ba8c:	0800bc3f 	.word	0x0800bc3f
 800ba90:	0800bc3f 	.word	0x0800bc3f
 800ba94:	0800bb7b 	.word	0x0800bb7b
 800ba98:	0800bc3f 	.word	0x0800bc3f
 800ba9c:	0800bc3f 	.word	0x0800bc3f
 800baa0:	0800bc3f 	.word	0x0800bc3f
 800baa4:	0800bbbd 	.word	0x0800bbbd
 800baa8:	0800bc3f 	.word	0x0800bc3f
 800baac:	0800bc3f 	.word	0x0800bc3f
 800bab0:	0800bc3f 	.word	0x0800bc3f
 800bab4:	0800bbfd 	.word	0x0800bbfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68b9      	ldr	r1, [r7, #8]
 800babe:	4618      	mov	r0, r3
 800bac0:	f000 fa62 	bl	800bf88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	699a      	ldr	r2, [r3, #24]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f042 0208 	orr.w	r2, r2, #8
 800bad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	699a      	ldr	r2, [r3, #24]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f022 0204 	bic.w	r2, r2, #4
 800bae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6999      	ldr	r1, [r3, #24]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	691a      	ldr	r2, [r3, #16]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	430a      	orrs	r2, r1
 800baf4:	619a      	str	r2, [r3, #24]
      break;
 800baf6:	e0a5      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	68b9      	ldr	r1, [r7, #8]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 fab4 	bl	800c06c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	699a      	ldr	r2, [r3, #24]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	699a      	ldr	r2, [r3, #24]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	6999      	ldr	r1, [r3, #24]
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	021a      	lsls	r2, r3, #8
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	430a      	orrs	r2, r1
 800bb36:	619a      	str	r2, [r3, #24]
      break;
 800bb38:	e084      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68b9      	ldr	r1, [r7, #8]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f000 fb0b 	bl	800c15c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	69da      	ldr	r2, [r3, #28]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f042 0208 	orr.w	r2, r2, #8
 800bb54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	69da      	ldr	r2, [r3, #28]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f022 0204 	bic.w	r2, r2, #4
 800bb64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	69d9      	ldr	r1, [r3, #28]
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	691a      	ldr	r2, [r3, #16]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	430a      	orrs	r2, r1
 800bb76:	61da      	str	r2, [r3, #28]
      break;
 800bb78:	e064      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68b9      	ldr	r1, [r7, #8]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f000 fb61 	bl	800c248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	69da      	ldr	r2, [r3, #28]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	69da      	ldr	r2, [r3, #28]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	69d9      	ldr	r1, [r3, #28]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	021a      	lsls	r2, r3, #8
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	430a      	orrs	r2, r1
 800bbb8:	61da      	str	r2, [r3, #28]
      break;
 800bbba:	e043      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68b9      	ldr	r1, [r7, #8]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 fb98 	bl	800c2f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f042 0208 	orr.w	r2, r2, #8
 800bbd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f022 0204 	bic.w	r2, r2, #4
 800bbe6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	691a      	ldr	r2, [r3, #16]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	430a      	orrs	r2, r1
 800bbf8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bbfa:	e023      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68b9      	ldr	r1, [r7, #8]
 800bc02:	4618      	mov	r0, r3
 800bc04:	f000 fbca 	bl	800c39c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	021a      	lsls	r2, r3, #8
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	430a      	orrs	r2, r1
 800bc3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bc3c:	e002      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	75fb      	strb	r3, [r7, #23]
      break;
 800bc42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop

0800bc58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d101      	bne.n	800bc74 <HAL_TIM_ConfigClockSource+0x1c>
 800bc70:	2302      	movs	r3, #2
 800bc72:	e0b4      	b.n	800bdde <HAL_TIM_ConfigClockSource+0x186>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2202      	movs	r2, #2
 800bc80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	4b56      	ldr	r3, [pc, #344]	@ (800bde8 <HAL_TIM_ConfigClockSource+0x190>)
 800bc90:	4013      	ands	r3, r2
 800bc92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcac:	d03e      	beq.n	800bd2c <HAL_TIM_ConfigClockSource+0xd4>
 800bcae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcb2:	f200 8087 	bhi.w	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcba:	f000 8086 	beq.w	800bdca <HAL_TIM_ConfigClockSource+0x172>
 800bcbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcc2:	d87f      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcc4:	2b70      	cmp	r3, #112	@ 0x70
 800bcc6:	d01a      	beq.n	800bcfe <HAL_TIM_ConfigClockSource+0xa6>
 800bcc8:	2b70      	cmp	r3, #112	@ 0x70
 800bcca:	d87b      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bccc:	2b60      	cmp	r3, #96	@ 0x60
 800bcce:	d050      	beq.n	800bd72 <HAL_TIM_ConfigClockSource+0x11a>
 800bcd0:	2b60      	cmp	r3, #96	@ 0x60
 800bcd2:	d877      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcd4:	2b50      	cmp	r3, #80	@ 0x50
 800bcd6:	d03c      	beq.n	800bd52 <HAL_TIM_ConfigClockSource+0xfa>
 800bcd8:	2b50      	cmp	r3, #80	@ 0x50
 800bcda:	d873      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcdc:	2b40      	cmp	r3, #64	@ 0x40
 800bcde:	d058      	beq.n	800bd92 <HAL_TIM_ConfigClockSource+0x13a>
 800bce0:	2b40      	cmp	r3, #64	@ 0x40
 800bce2:	d86f      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bce4:	2b30      	cmp	r3, #48	@ 0x30
 800bce6:	d064      	beq.n	800bdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800bce8:	2b30      	cmp	r3, #48	@ 0x30
 800bcea:	d86b      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcec:	2b20      	cmp	r3, #32
 800bcee:	d060      	beq.n	800bdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800bcf0:	2b20      	cmp	r3, #32
 800bcf2:	d867      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d05c      	beq.n	800bdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800bcf8:	2b10      	cmp	r3, #16
 800bcfa:	d05a      	beq.n	800bdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800bcfc:	e062      	b.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd0e:	f000 fc13 	bl	800c538 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bd20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	609a      	str	r2, [r3, #8]
      break;
 800bd2a:	e04f      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd3c:	f000 fbfc 	bl	800c538 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	689a      	ldr	r2, [r3, #8]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bd4e:	609a      	str	r2, [r3, #8]
      break;
 800bd50:	e03c      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f000 fb70 	bl	800c444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2150      	movs	r1, #80	@ 0x50
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 fbc9 	bl	800c502 <TIM_ITRx_SetConfig>
      break;
 800bd70:	e02c      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd7e:	461a      	mov	r2, r3
 800bd80:	f000 fb8f 	bl	800c4a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2160      	movs	r1, #96	@ 0x60
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 fbb9 	bl	800c502 <TIM_ITRx_SetConfig>
      break;
 800bd90:	e01c      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f000 fb50 	bl	800c444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2140      	movs	r1, #64	@ 0x40
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f000 fba9 	bl	800c502 <TIM_ITRx_SetConfig>
      break;
 800bdb0:	e00c      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	f000 fba0 	bl	800c502 <TIM_ITRx_SetConfig>
      break;
 800bdc2:	e003      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc8:	e000      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bdca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	fffeff88 	.word	0xfffeff88

0800bdec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be00:	b480      	push	{r7}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be1c:	bf00      	nop
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be30:	bf00      	nop
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a43      	ldr	r2, [pc, #268]	@ (800bf5c <TIM_Base_SetConfig+0x120>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d013      	beq.n	800be7c <TIM_Base_SetConfig+0x40>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be5a:	d00f      	beq.n	800be7c <TIM_Base_SetConfig+0x40>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a40      	ldr	r2, [pc, #256]	@ (800bf60 <TIM_Base_SetConfig+0x124>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d00b      	beq.n	800be7c <TIM_Base_SetConfig+0x40>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a3f      	ldr	r2, [pc, #252]	@ (800bf64 <TIM_Base_SetConfig+0x128>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d007      	beq.n	800be7c <TIM_Base_SetConfig+0x40>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a3e      	ldr	r2, [pc, #248]	@ (800bf68 <TIM_Base_SetConfig+0x12c>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d003      	beq.n	800be7c <TIM_Base_SetConfig+0x40>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a3d      	ldr	r2, [pc, #244]	@ (800bf6c <TIM_Base_SetConfig+0x130>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d108      	bne.n	800be8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a32      	ldr	r2, [pc, #200]	@ (800bf5c <TIM_Base_SetConfig+0x120>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d02b      	beq.n	800beee <TIM_Base_SetConfig+0xb2>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be9c:	d027      	beq.n	800beee <TIM_Base_SetConfig+0xb2>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a2f      	ldr	r2, [pc, #188]	@ (800bf60 <TIM_Base_SetConfig+0x124>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d023      	beq.n	800beee <TIM_Base_SetConfig+0xb2>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a2e      	ldr	r2, [pc, #184]	@ (800bf64 <TIM_Base_SetConfig+0x128>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d01f      	beq.n	800beee <TIM_Base_SetConfig+0xb2>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a2d      	ldr	r2, [pc, #180]	@ (800bf68 <TIM_Base_SetConfig+0x12c>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d01b      	beq.n	800beee <TIM_Base_SetConfig+0xb2>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a2c      	ldr	r2, [pc, #176]	@ (800bf6c <TIM_Base_SetConfig+0x130>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d017      	beq.n	800beee <TIM_Base_SetConfig+0xb2>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a2b      	ldr	r2, [pc, #172]	@ (800bf70 <TIM_Base_SetConfig+0x134>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d013      	beq.n	800beee <TIM_Base_SetConfig+0xb2>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a2a      	ldr	r2, [pc, #168]	@ (800bf74 <TIM_Base_SetConfig+0x138>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d00f      	beq.n	800beee <TIM_Base_SetConfig+0xb2>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a29      	ldr	r2, [pc, #164]	@ (800bf78 <TIM_Base_SetConfig+0x13c>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d00b      	beq.n	800beee <TIM_Base_SetConfig+0xb2>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4a28      	ldr	r2, [pc, #160]	@ (800bf7c <TIM_Base_SetConfig+0x140>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d007      	beq.n	800beee <TIM_Base_SetConfig+0xb2>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a27      	ldr	r2, [pc, #156]	@ (800bf80 <TIM_Base_SetConfig+0x144>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d003      	beq.n	800beee <TIM_Base_SetConfig+0xb2>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a26      	ldr	r2, [pc, #152]	@ (800bf84 <TIM_Base_SetConfig+0x148>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d108      	bne.n	800bf00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	4313      	orrs	r3, r2
 800befe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	695b      	ldr	r3, [r3, #20]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	689a      	ldr	r2, [r3, #8]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a0e      	ldr	r2, [pc, #56]	@ (800bf5c <TIM_Base_SetConfig+0x120>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d003      	beq.n	800bf2e <TIM_Base_SetConfig+0xf2>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a10      	ldr	r2, [pc, #64]	@ (800bf6c <TIM_Base_SetConfig+0x130>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d103      	bne.n	800bf36 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	691a      	ldr	r2, [r3, #16]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f043 0204 	orr.w	r2, r3, #4
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2201      	movs	r2, #1
 800bf46:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	601a      	str	r2, [r3, #0]
}
 800bf4e:	bf00      	nop
 800bf50:	3714      	adds	r7, #20
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	40010000 	.word	0x40010000
 800bf60:	40000400 	.word	0x40000400
 800bf64:	40000800 	.word	0x40000800
 800bf68:	40000c00 	.word	0x40000c00
 800bf6c:	40010400 	.word	0x40010400
 800bf70:	40014000 	.word	0x40014000
 800bf74:	40014400 	.word	0x40014400
 800bf78:	40014800 	.word	0x40014800
 800bf7c:	40001800 	.word	0x40001800
 800bf80:	40001c00 	.word	0x40001c00
 800bf84:	40002000 	.word	0x40002000

0800bf88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b087      	sub	sp, #28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a1b      	ldr	r3, [r3, #32]
 800bf9c:	f023 0201 	bic.w	r2, r3, #1
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	4b2b      	ldr	r3, [pc, #172]	@ (800c060 <TIM_OC1_SetConfig+0xd8>)
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f023 0303 	bic.w	r3, r3, #3
 800bfbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	f023 0302 	bic.w	r3, r3, #2
 800bfd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a21      	ldr	r2, [pc, #132]	@ (800c064 <TIM_OC1_SetConfig+0xdc>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d003      	beq.n	800bfec <TIM_OC1_SetConfig+0x64>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a20      	ldr	r2, [pc, #128]	@ (800c068 <TIM_OC1_SetConfig+0xe0>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d10c      	bne.n	800c006 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	f023 0308 	bic.w	r3, r3, #8
 800bff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	f023 0304 	bic.w	r3, r3, #4
 800c004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	4a16      	ldr	r2, [pc, #88]	@ (800c064 <TIM_OC1_SetConfig+0xdc>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d003      	beq.n	800c016 <TIM_OC1_SetConfig+0x8e>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a15      	ldr	r2, [pc, #84]	@ (800c068 <TIM_OC1_SetConfig+0xe0>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d111      	bne.n	800c03a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c01c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	695b      	ldr	r3, [r3, #20]
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	693a      	ldr	r2, [r7, #16]
 800c036:	4313      	orrs	r3, r2
 800c038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	693a      	ldr	r2, [r7, #16]
 800c03e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	685a      	ldr	r2, [r3, #4]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	697a      	ldr	r2, [r7, #20]
 800c052:	621a      	str	r2, [r3, #32]
}
 800c054:	bf00      	nop
 800c056:	371c      	adds	r7, #28
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	fffeff8f 	.word	0xfffeff8f
 800c064:	40010000 	.word	0x40010000
 800c068:	40010400 	.word	0x40010400

0800c06c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b087      	sub	sp, #28
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6a1b      	ldr	r3, [r3, #32]
 800c080:	f023 0210 	bic.w	r2, r3, #16
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	699b      	ldr	r3, [r3, #24]
 800c092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	4b2e      	ldr	r3, [pc, #184]	@ (800c150 <TIM_OC2_SetConfig+0xe4>)
 800c098:	4013      	ands	r3, r2
 800c09a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	021b      	lsls	r3, r3, #8
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	f023 0320 	bic.w	r3, r3, #32
 800c0b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	011b      	lsls	r3, r3, #4
 800c0be:	697a      	ldr	r2, [r7, #20]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a23      	ldr	r2, [pc, #140]	@ (800c154 <TIM_OC2_SetConfig+0xe8>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d003      	beq.n	800c0d4 <TIM_OC2_SetConfig+0x68>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a22      	ldr	r2, [pc, #136]	@ (800c158 <TIM_OC2_SetConfig+0xec>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d10d      	bne.n	800c0f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	011b      	lsls	r3, r3, #4
 800c0e2:	697a      	ldr	r2, [r7, #20]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a18      	ldr	r2, [pc, #96]	@ (800c154 <TIM_OC2_SetConfig+0xe8>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d003      	beq.n	800c100 <TIM_OC2_SetConfig+0x94>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a17      	ldr	r2, [pc, #92]	@ (800c158 <TIM_OC2_SetConfig+0xec>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d113      	bne.n	800c128 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c10e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	693a      	ldr	r2, [r7, #16]
 800c118:	4313      	orrs	r3, r2
 800c11a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	4313      	orrs	r3, r2
 800c126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	685a      	ldr	r2, [r3, #4]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	697a      	ldr	r2, [r7, #20]
 800c140:	621a      	str	r2, [r3, #32]
}
 800c142:	bf00      	nop
 800c144:	371c      	adds	r7, #28
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	feff8fff 	.word	0xfeff8fff
 800c154:	40010000 	.word	0x40010000
 800c158:	40010400 	.word	0x40010400

0800c15c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6a1b      	ldr	r3, [r3, #32]
 800c170:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	69db      	ldr	r3, [r3, #28]
 800c182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	4b2d      	ldr	r3, [pc, #180]	@ (800c23c <TIM_OC3_SetConfig+0xe0>)
 800c188:	4013      	ands	r3, r2
 800c18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f023 0303 	bic.w	r3, r3, #3
 800c192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c1a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	021b      	lsls	r3, r3, #8
 800c1ac:	697a      	ldr	r2, [r7, #20]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a22      	ldr	r2, [pc, #136]	@ (800c240 <TIM_OC3_SetConfig+0xe4>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d003      	beq.n	800c1c2 <TIM_OC3_SetConfig+0x66>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a21      	ldr	r2, [pc, #132]	@ (800c244 <TIM_OC3_SetConfig+0xe8>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d10d      	bne.n	800c1de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c1c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	021b      	lsls	r3, r3, #8
 800c1d0:	697a      	ldr	r2, [r7, #20]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c1dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a17      	ldr	r2, [pc, #92]	@ (800c240 <TIM_OC3_SetConfig+0xe4>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d003      	beq.n	800c1ee <TIM_OC3_SetConfig+0x92>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a16      	ldr	r2, [pc, #88]	@ (800c244 <TIM_OC3_SetConfig+0xe8>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d113      	bne.n	800c216 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c1fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	695b      	ldr	r3, [r3, #20]
 800c202:	011b      	lsls	r3, r3, #4
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	4313      	orrs	r3, r2
 800c208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	011b      	lsls	r3, r3, #4
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	4313      	orrs	r3, r2
 800c214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	693a      	ldr	r2, [r7, #16]
 800c21a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	68fa      	ldr	r2, [r7, #12]
 800c220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	685a      	ldr	r2, [r3, #4]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	697a      	ldr	r2, [r7, #20]
 800c22e:	621a      	str	r2, [r3, #32]
}
 800c230:	bf00      	nop
 800c232:	371c      	adds	r7, #28
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	fffeff8f 	.word	0xfffeff8f
 800c240:	40010000 	.word	0x40010000
 800c244:	40010400 	.word	0x40010400

0800c248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c248:	b480      	push	{r7}
 800c24a:	b087      	sub	sp, #28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a1b      	ldr	r3, [r3, #32]
 800c25c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	69db      	ldr	r3, [r3, #28]
 800c26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	4b1e      	ldr	r3, [pc, #120]	@ (800c2ec <TIM_OC4_SetConfig+0xa4>)
 800c274:	4013      	ands	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c27e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	021b      	lsls	r3, r3, #8
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	4313      	orrs	r3, r2
 800c28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	031b      	lsls	r3, r3, #12
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a13      	ldr	r2, [pc, #76]	@ (800c2f0 <TIM_OC4_SetConfig+0xa8>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d003      	beq.n	800c2b0 <TIM_OC4_SetConfig+0x68>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a12      	ldr	r2, [pc, #72]	@ (800c2f4 <TIM_OC4_SetConfig+0xac>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d109      	bne.n	800c2c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	695b      	ldr	r3, [r3, #20]
 800c2bc:	019b      	lsls	r3, r3, #6
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	685a      	ldr	r2, [r3, #4]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	693a      	ldr	r2, [r7, #16]
 800c2dc:	621a      	str	r2, [r3, #32]
}
 800c2de:	bf00      	nop
 800c2e0:	371c      	adds	r7, #28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	feff8fff 	.word	0xfeff8fff
 800c2f0:	40010000 	.word	0x40010000
 800c2f4:	40010400 	.word	0x40010400

0800c2f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b087      	sub	sp, #28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a1b      	ldr	r3, [r3, #32]
 800c306:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a1b      	ldr	r3, [r3, #32]
 800c30c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	4b1b      	ldr	r3, [pc, #108]	@ (800c390 <TIM_OC5_SetConfig+0x98>)
 800c324:	4013      	ands	r3, r2
 800c326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	4313      	orrs	r3, r2
 800c330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c338:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	041b      	lsls	r3, r3, #16
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	4313      	orrs	r3, r2
 800c344:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a12      	ldr	r2, [pc, #72]	@ (800c394 <TIM_OC5_SetConfig+0x9c>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d003      	beq.n	800c356 <TIM_OC5_SetConfig+0x5e>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a11      	ldr	r2, [pc, #68]	@ (800c398 <TIM_OC5_SetConfig+0xa0>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d109      	bne.n	800c36a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c35c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	021b      	lsls	r3, r3, #8
 800c364:	697a      	ldr	r2, [r7, #20]
 800c366:	4313      	orrs	r3, r2
 800c368:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	685a      	ldr	r2, [r3, #4]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	693a      	ldr	r2, [r7, #16]
 800c382:	621a      	str	r2, [r3, #32]
}
 800c384:	bf00      	nop
 800c386:	371c      	adds	r7, #28
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr
 800c390:	fffeff8f 	.word	0xfffeff8f
 800c394:	40010000 	.word	0x40010000
 800c398:	40010400 	.word	0x40010400

0800c39c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b087      	sub	sp, #28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a1b      	ldr	r3, [r3, #32]
 800c3b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	4b1c      	ldr	r3, [pc, #112]	@ (800c438 <TIM_OC6_SetConfig+0x9c>)
 800c3c8:	4013      	ands	r3, r2
 800c3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	021b      	lsls	r3, r3, #8
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c3de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	051b      	lsls	r3, r3, #20
 800c3e6:	693a      	ldr	r2, [r7, #16]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a13      	ldr	r2, [pc, #76]	@ (800c43c <TIM_OC6_SetConfig+0xa0>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d003      	beq.n	800c3fc <TIM_OC6_SetConfig+0x60>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a12      	ldr	r2, [pc, #72]	@ (800c440 <TIM_OC6_SetConfig+0xa4>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d109      	bne.n	800c410 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c402:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	029b      	lsls	r3, r3, #10
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	697a      	ldr	r2, [r7, #20]
 800c414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	621a      	str	r2, [r3, #32]
}
 800c42a:	bf00      	nop
 800c42c:	371c      	adds	r7, #28
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	feff8fff 	.word	0xfeff8fff
 800c43c:	40010000 	.word	0x40010000
 800c440:	40010400 	.word	0x40010400

0800c444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c444:	b480      	push	{r7}
 800c446:	b087      	sub	sp, #28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6a1b      	ldr	r3, [r3, #32]
 800c454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	f023 0201 	bic.w	r2, r3, #1
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c46e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	011b      	lsls	r3, r3, #4
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	4313      	orrs	r3, r2
 800c478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f023 030a 	bic.w	r3, r3, #10
 800c480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	4313      	orrs	r3, r2
 800c488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	621a      	str	r2, [r3, #32]
}
 800c496:	bf00      	nop
 800c498:	371c      	adds	r7, #28
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b087      	sub	sp, #28
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	60f8      	str	r0, [r7, #12]
 800c4aa:	60b9      	str	r1, [r7, #8]
 800c4ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6a1b      	ldr	r3, [r3, #32]
 800c4b8:	f023 0210 	bic.w	r2, r3, #16
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	699b      	ldr	r3, [r3, #24]
 800c4c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c4cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	031b      	lsls	r3, r3, #12
 800c4d2:	693a      	ldr	r2, [r7, #16]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c4de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	011b      	lsls	r3, r3, #4
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	621a      	str	r2, [r3, #32]
}
 800c4f6:	bf00      	nop
 800c4f8:	371c      	adds	r7, #28
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c502:	b480      	push	{r7}
 800c504:	b085      	sub	sp, #20
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	4313      	orrs	r3, r2
 800c520:	f043 0307 	orr.w	r3, r3, #7
 800c524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	609a      	str	r2, [r3, #8]
}
 800c52c:	bf00      	nop
 800c52e:	3714      	adds	r7, #20
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c538:	b480      	push	{r7}
 800c53a:	b087      	sub	sp, #28
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
 800c544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	021a      	lsls	r2, r3, #8
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	431a      	orrs	r2, r3
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	4313      	orrs	r3, r2
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	4313      	orrs	r3, r2
 800c564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	697a      	ldr	r2, [r7, #20]
 800c56a:	609a      	str	r2, [r3, #8]
}
 800c56c:	bf00      	nop
 800c56e:	371c      	adds	r7, #28
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d101      	bne.n	800c590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c58c:	2302      	movs	r3, #2
 800c58e:	e06d      	b.n	800c66c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2202      	movs	r2, #2
 800c59c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a30      	ldr	r2, [pc, #192]	@ (800c678 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d004      	beq.n	800c5c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a2f      	ldr	r2, [pc, #188]	@ (800c67c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d108      	bne.n	800c5d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c5ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68fa      	ldr	r2, [r7, #12]
 800c5ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a20      	ldr	r2, [pc, #128]	@ (800c678 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d022      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c602:	d01d      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a1d      	ldr	r2, [pc, #116]	@ (800c680 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d018      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a1c      	ldr	r2, [pc, #112]	@ (800c684 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d013      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a1a      	ldr	r2, [pc, #104]	@ (800c688 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d00e      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a15      	ldr	r2, [pc, #84]	@ (800c67c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d009      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a16      	ldr	r2, [pc, #88]	@ (800c68c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d004      	beq.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a15      	ldr	r2, [pc, #84]	@ (800c690 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d10c      	bne.n	800c65a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c646:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	4313      	orrs	r3, r2
 800c650:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2201      	movs	r2, #1
 800c65e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	40010000 	.word	0x40010000
 800c67c:	40010400 	.word	0x40010400
 800c680:	40000400 	.word	0x40000400
 800c684:	40000800 	.word	0x40000800
 800c688:	40000c00 	.word	0x40000c00
 800c68c:	40014000 	.word	0x40014000
 800c690:	40001800 	.word	0x40001800

0800c694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d101      	bne.n	800c6b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	e065      	b.n	800c77c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	695b      	ldr	r3, [r3, #20]
 800c708:	4313      	orrs	r3, r2
 800c70a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c716:	4313      	orrs	r3, r2
 800c718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	699b      	ldr	r3, [r3, #24]
 800c724:	041b      	lsls	r3, r3, #16
 800c726:	4313      	orrs	r3, r2
 800c728:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a16      	ldr	r2, [pc, #88]	@ (800c788 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d004      	beq.n	800c73e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a14      	ldr	r2, [pc, #80]	@ (800c78c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d115      	bne.n	800c76a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c748:	051b      	lsls	r3, r3, #20
 800c74a:	4313      	orrs	r3, r2
 800c74c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	69db      	ldr	r3, [r3, #28]
 800c758:	4313      	orrs	r3, r2
 800c75a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	4313      	orrs	r3, r2
 800c768:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3714      	adds	r7, #20
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr
 800c788:	40010000 	.word	0x40010000
 800c78c:	40010400 	.word	0x40010400

0800c790 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d101      	bne.n	800c7de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e040      	b.n	800c860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d106      	bne.n	800c7f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7f8 faec 	bl	8004dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2224      	movs	r2, #36	@ 0x24
 800c7f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f022 0201 	bic.w	r2, r2, #1
 800c808:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d002      	beq.n	800c818 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fe66 	bl	800d4e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fbff 	bl	800d01c <UART_SetConfig>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b01      	cmp	r3, #1
 800c822:	d101      	bne.n	800c828 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	e01b      	b.n	800c860 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	689a      	ldr	r2, [r3, #8]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f042 0201 	orr.w	r2, r2, #1
 800c856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fee5 	bl	800d628 <UART_CheckIdleState>
 800c85e:	4603      	mov	r3, r0
}
 800c860:	4618      	mov	r0, r3
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08a      	sub	sp, #40	@ 0x28
 800c86c:	af02      	add	r7, sp, #8
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	603b      	str	r3, [r7, #0]
 800c874:	4613      	mov	r3, r2
 800c876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c87c:	2b20      	cmp	r3, #32
 800c87e:	d177      	bne.n	800c970 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d002      	beq.n	800c88c <HAL_UART_Transmit+0x24>
 800c886:	88fb      	ldrh	r3, [r7, #6]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d101      	bne.n	800c890 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c88c:	2301      	movs	r3, #1
 800c88e:	e070      	b.n	800c972 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2200      	movs	r2, #0
 800c894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2221      	movs	r2, #33	@ 0x21
 800c89c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c89e:	f7f8 fbaf 	bl	8005000 <HAL_GetTick>
 800c8a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	88fa      	ldrh	r2, [r7, #6]
 800c8a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	88fa      	ldrh	r2, [r7, #6]
 800c8b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8bc:	d108      	bne.n	800c8d0 <HAL_UART_Transmit+0x68>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d104      	bne.n	800c8d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	61bb      	str	r3, [r7, #24]
 800c8ce:	e003      	b.n	800c8d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c8d8:	e02f      	b.n	800c93a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	2180      	movs	r1, #128	@ 0x80
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f000 fef6 	bl	800d6d6 <UART_WaitOnFlagUntilTimeout>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d004      	beq.n	800c8fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2220      	movs	r2, #32
 800c8f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800c8f6:	2303      	movs	r3, #3
 800c8f8:	e03b      	b.n	800c972 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10b      	bne.n	800c918 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	461a      	mov	r2, r3
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c90e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	3302      	adds	r3, #2
 800c914:	61bb      	str	r3, [r7, #24]
 800c916:	e007      	b.n	800c928 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	781a      	ldrb	r2, [r3, #0]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	3301      	adds	r3, #1
 800c926:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c92e:	b29b      	uxth	r3, r3
 800c930:	3b01      	subs	r3, #1
 800c932:	b29a      	uxth	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c940:	b29b      	uxth	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1c9      	bne.n	800c8da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2200      	movs	r2, #0
 800c94e:	2140      	movs	r1, #64	@ 0x40
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f000 fec0 	bl	800d6d6 <UART_WaitOnFlagUntilTimeout>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d004      	beq.n	800c966 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2220      	movs	r2, #32
 800c960:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e005      	b.n	800c972 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2220      	movs	r2, #32
 800c96a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800c96c:	2300      	movs	r3, #0
 800c96e:	e000      	b.n	800c972 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800c970:	2302      	movs	r3, #2
  }
}
 800c972:	4618      	mov	r0, r3
 800c974:	3720      	adds	r7, #32
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b08a      	sub	sp, #40	@ 0x28
 800c97e:	af00      	add	r7, sp, #0
 800c980:	60f8      	str	r0, [r7, #12]
 800c982:	60b9      	str	r1, [r7, #8]
 800c984:	4613      	mov	r3, r2
 800c986:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c98e:	2b20      	cmp	r3, #32
 800c990:	d132      	bne.n	800c9f8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d002      	beq.n	800c99e <HAL_UART_Receive_IT+0x24>
 800c998:	88fb      	ldrh	r3, [r7, #6]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d101      	bne.n	800c9a2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e02b      	b.n	800c9fa <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d018      	beq.n	800c9e8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	e853 3f00 	ldrex	r3, [r3]
 800c9c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c9ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d4:	623b      	str	r3, [r7, #32]
 800c9d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d8:	69f9      	ldr	r1, [r7, #28]
 800c9da:	6a3a      	ldr	r2, [r7, #32]
 800c9dc:	e841 2300 	strex	r3, r2, [r1]
 800c9e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1e6      	bne.n	800c9b6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c9e8:	88fb      	ldrh	r3, [r7, #6]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	68b9      	ldr	r1, [r7, #8]
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f000 fede 	bl	800d7b0 <UART_Start_Receive_IT>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	e000      	b.n	800c9fa <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800c9f8:	2302      	movs	r3, #2
  }
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3728      	adds	r7, #40	@ 0x28
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
	...

0800ca04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b0ba      	sub	sp, #232	@ 0xe8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ca2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ca32:	4013      	ands	r3, r2
 800ca34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ca38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d115      	bne.n	800ca6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ca40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca44:	f003 0320 	and.w	r3, r3, #32
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00f      	beq.n	800ca6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ca4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca50:	f003 0320 	and.w	r3, r3, #32
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d009      	beq.n	800ca6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f000 82b1 	beq.w	800cfc4 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	4798      	blx	r3
      }
      return;
 800ca6a:	e2ab      	b.n	800cfc4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ca6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 8117 	beq.w	800cca4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ca76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca7a:	f003 0301 	and.w	r3, r3, #1
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d106      	bne.n	800ca90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ca82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ca86:	4b85      	ldr	r3, [pc, #532]	@ (800cc9c <HAL_UART_IRQHandler+0x298>)
 800ca88:	4013      	ands	r3, r2
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f000 810a 	beq.w	800cca4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d011      	beq.n	800cac0 <HAL_UART_IRQHandler+0xbc>
 800ca9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800caa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00b      	beq.n	800cac0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	2201      	movs	r2, #1
 800caae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cab6:	f043 0201 	orr.w	r2, r3, #1
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cac4:	f003 0302 	and.w	r3, r3, #2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d011      	beq.n	800caf0 <HAL_UART_IRQHandler+0xec>
 800cacc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cad0:	f003 0301 	and.w	r3, r3, #1
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00b      	beq.n	800caf0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2202      	movs	r2, #2
 800cade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cae6:	f043 0204 	orr.w	r2, r3, #4
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caf4:	f003 0304 	and.w	r3, r3, #4
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d011      	beq.n	800cb20 <HAL_UART_IRQHandler+0x11c>
 800cafc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb00:	f003 0301 	and.w	r3, r3, #1
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00b      	beq.n	800cb20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2204      	movs	r2, #4
 800cb0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb16:	f043 0202 	orr.w	r2, r3, #2
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb24:	f003 0308 	and.w	r3, r3, #8
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d017      	beq.n	800cb5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cb2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb30:	f003 0320 	and.w	r3, r3, #32
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d105      	bne.n	800cb44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cb38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00b      	beq.n	800cb5c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2208      	movs	r2, #8
 800cb4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb52:	f043 0208 	orr.w	r2, r3, #8
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d012      	beq.n	800cb8e <HAL_UART_IRQHandler+0x18a>
 800cb68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00c      	beq.n	800cb8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cb7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb84:	f043 0220 	orr.w	r2, r3, #32
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f000 8217 	beq.w	800cfc8 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cb9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb9e:	f003 0320 	and.w	r3, r3, #32
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00d      	beq.n	800cbc2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbaa:	f003 0320 	and.w	r3, r3, #32
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d007      	beq.n	800cbc2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbd6:	2b40      	cmp	r3, #64	@ 0x40
 800cbd8:	d005      	beq.n	800cbe6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cbda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cbde:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d04f      	beq.n	800cc86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 fea8 	bl	800d93c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbf6:	2b40      	cmp	r3, #64	@ 0x40
 800cbf8:	d141      	bne.n	800cc7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	3308      	adds	r3, #8
 800cc00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cc08:	e853 3f00 	ldrex	r3, [r3]
 800cc0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cc10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cc14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3308      	adds	r3, #8
 800cc22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cc26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cc2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cc32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cc36:	e841 2300 	strex	r3, r2, [r1]
 800cc3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cc3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d1d9      	bne.n	800cbfa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d013      	beq.n	800cc76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc52:	4a13      	ldr	r2, [pc, #76]	@ (800cca0 <HAL_UART_IRQHandler+0x29c>)
 800cc54:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7f8 ffb6 	bl	8005bcc <HAL_DMA_Abort_IT>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d017      	beq.n	800cc96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800cc70:	4610      	mov	r0, r2
 800cc72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc74:	e00f      	b.n	800cc96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 f9ba 	bl	800cff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc7c:	e00b      	b.n	800cc96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 f9b6 	bl	800cff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc84:	e007      	b.n	800cc96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 f9b2 	bl	800cff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800cc94:	e198      	b.n	800cfc8 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc96:	bf00      	nop
    return;
 800cc98:	e196      	b.n	800cfc8 <HAL_UART_IRQHandler+0x5c4>
 800cc9a:	bf00      	nop
 800cc9c:	04000120 	.word	0x04000120
 800cca0:	0800da05 	.word	0x0800da05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	f040 8166 	bne.w	800cf7a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ccae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccb2:	f003 0310 	and.w	r3, r3, #16
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f000 815f 	beq.w	800cf7a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ccbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccc0:	f003 0310 	and.w	r3, r3, #16
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f000 8158 	beq.w	800cf7a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2210      	movs	r2, #16
 800ccd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccdc:	2b40      	cmp	r3, #64	@ 0x40
 800ccde:	f040 80d0 	bne.w	800ce82 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ccee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f000 80ab 	beq.w	800ce4e <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ccfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cd02:	429a      	cmp	r2, r3
 800cd04:	f080 80a3 	bcs.w	800ce4e <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cd0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd16:	69db      	ldr	r3, [r3, #28]
 800cd18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd1c:	f000 8086 	beq.w	800ce2c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cd2c:	e853 3f00 	ldrex	r3, [r3]
 800cd30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cd34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cd38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	461a      	mov	r2, r3
 800cd46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cd4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cd4e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cd56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cd5a:	e841 2300 	strex	r3, r2, [r1]
 800cd5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cd62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1da      	bne.n	800cd20 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	3308      	adds	r3, #8
 800cd70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd74:	e853 3f00 	ldrex	r3, [r3]
 800cd78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cd7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd7c:	f023 0301 	bic.w	r3, r3, #1
 800cd80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	3308      	adds	r3, #8
 800cd8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cd8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cd92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cd96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cd9a:	e841 2300 	strex	r3, r2, [r1]
 800cd9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cda0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1e1      	bne.n	800cd6a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3308      	adds	r3, #8
 800cdac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cdb0:	e853 3f00 	ldrex	r3, [r3]
 800cdb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cdb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cdb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	3308      	adds	r3, #8
 800cdc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cdca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cdcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cdd0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cdd2:	e841 2300 	strex	r3, r2, [r1]
 800cdd6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cdd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1e3      	bne.n	800cda6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2220      	movs	r2, #32
 800cde2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdf4:	e853 3f00 	ldrex	r3, [r3]
 800cdf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cdfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdfc:	f023 0310 	bic.w	r3, r3, #16
 800ce00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	461a      	mov	r2, r3
 800ce0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ce14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce16:	e841 2300 	strex	r3, r2, [r1]
 800ce1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ce1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1e4      	bne.n	800cdec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7f8 fe60 	bl	8005aec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2202      	movs	r2, #2
 800ce30:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	4619      	mov	r1, r3
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 f8dc 	bl	800d004 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ce4c:	e0be      	b.n	800cfcc <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ce54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	f040 80b7 	bne.w	800cfcc <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce62:	69db      	ldr	r3, [r3, #28]
 800ce64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce68:	f040 80b0 	bne.w	800cfcc <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ce78:	4619      	mov	r1, r3
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 f8c2 	bl	800d004 <HAL_UARTEx_RxEventCallback>
      return;
 800ce80:	e0a4      	b.n	800cfcc <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 8096 	beq.w	800cfd0 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800cea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f000 8091 	beq.w	800cfd0 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb6:	e853 3f00 	ldrex	r3, [r3]
 800ceba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cebe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cec2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	461a      	mov	r2, r3
 800cecc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ced0:	647b      	str	r3, [r7, #68]	@ 0x44
 800ced2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ced6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ced8:	e841 2300 	strex	r3, r2, [r1]
 800cedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d1e4      	bne.n	800ceae <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	3308      	adds	r3, #8
 800ceea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceee:	e853 3f00 	ldrex	r3, [r3]
 800cef2:	623b      	str	r3, [r7, #32]
   return(result);
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	f023 0301 	bic.w	r3, r3, #1
 800cefa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	3308      	adds	r3, #8
 800cf04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cf08:	633a      	str	r2, [r7, #48]	@ 0x30
 800cf0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf10:	e841 2300 	strex	r3, r2, [r1]
 800cf14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1e3      	bne.n	800cee4 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2220      	movs	r2, #32
 800cf20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	e853 3f00 	ldrex	r3, [r3]
 800cf3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f023 0310 	bic.w	r3, r3, #16
 800cf44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cf52:	61fb      	str	r3, [r7, #28]
 800cf54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf56:	69b9      	ldr	r1, [r7, #24]
 800cf58:	69fa      	ldr	r2, [r7, #28]
 800cf5a:	e841 2300 	strex	r3, r2, [r1]
 800cf5e:	617b      	str	r3, [r7, #20]
   return(result);
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1e4      	bne.n	800cf30 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2202      	movs	r2, #2
 800cf6a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cf6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 f846 	bl	800d004 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf78:	e02a      	b.n	800cfd0 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cf7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00e      	beq.n	800cfa4 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cf86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d008      	beq.n	800cfa4 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d01c      	beq.n	800cfd4 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	4798      	blx	r3
    }
    return;
 800cfa2:	e017      	b.n	800cfd4 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cfa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d012      	beq.n	800cfd6 <HAL_UART_IRQHandler+0x5d2>
 800cfb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00c      	beq.n	800cfd6 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fd33 	bl	800da28 <UART_EndTransmit_IT>
    return;
 800cfc2:	e008      	b.n	800cfd6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800cfc4:	bf00      	nop
 800cfc6:	e006      	b.n	800cfd6 <HAL_UART_IRQHandler+0x5d2>
    return;
 800cfc8:	bf00      	nop
 800cfca:	e004      	b.n	800cfd6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800cfcc:	bf00      	nop
 800cfce:	e002      	b.n	800cfd6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800cfd0:	bf00      	nop
 800cfd2:	e000      	b.n	800cfd6 <HAL_UART_IRQHandler+0x5d2>
    return;
 800cfd4:	bf00      	nop
  }

}
 800cfd6:	37e8      	adds	r7, #232	@ 0xe8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	460b      	mov	r3, r1
 800d00e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d010:	bf00      	nop
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b088      	sub	sp, #32
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d024:	2300      	movs	r3, #0
 800d026:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	689a      	ldr	r2, [r3, #8]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	431a      	orrs	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	695b      	ldr	r3, [r3, #20]
 800d036:	431a      	orrs	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	4313      	orrs	r3, r2
 800d03e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	4ba6      	ldr	r3, [pc, #664]	@ (800d2e0 <UART_SetConfig+0x2c4>)
 800d048:	4013      	ands	r3, r2
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	6812      	ldr	r2, [r2, #0]
 800d04e:	6979      	ldr	r1, [r7, #20]
 800d050:	430b      	orrs	r3, r1
 800d052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	68da      	ldr	r2, [r3, #12]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	430a      	orrs	r2, r1
 800d068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6a1b      	ldr	r3, [r3, #32]
 800d074:	697a      	ldr	r2, [r7, #20]
 800d076:	4313      	orrs	r3, r2
 800d078:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	697a      	ldr	r2, [r7, #20]
 800d08a:	430a      	orrs	r2, r1
 800d08c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a94      	ldr	r2, [pc, #592]	@ (800d2e4 <UART_SetConfig+0x2c8>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d120      	bne.n	800d0da <UART_SetConfig+0xbe>
 800d098:	4b93      	ldr	r3, [pc, #588]	@ (800d2e8 <UART_SetConfig+0x2cc>)
 800d09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d09e:	f003 0303 	and.w	r3, r3, #3
 800d0a2:	2b03      	cmp	r3, #3
 800d0a4:	d816      	bhi.n	800d0d4 <UART_SetConfig+0xb8>
 800d0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0ac <UART_SetConfig+0x90>)
 800d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ac:	0800d0bd 	.word	0x0800d0bd
 800d0b0:	0800d0c9 	.word	0x0800d0c9
 800d0b4:	0800d0c3 	.word	0x0800d0c3
 800d0b8:	0800d0cf 	.word	0x0800d0cf
 800d0bc:	2301      	movs	r3, #1
 800d0be:	77fb      	strb	r3, [r7, #31]
 800d0c0:	e150      	b.n	800d364 <UART_SetConfig+0x348>
 800d0c2:	2302      	movs	r3, #2
 800d0c4:	77fb      	strb	r3, [r7, #31]
 800d0c6:	e14d      	b.n	800d364 <UART_SetConfig+0x348>
 800d0c8:	2304      	movs	r3, #4
 800d0ca:	77fb      	strb	r3, [r7, #31]
 800d0cc:	e14a      	b.n	800d364 <UART_SetConfig+0x348>
 800d0ce:	2308      	movs	r3, #8
 800d0d0:	77fb      	strb	r3, [r7, #31]
 800d0d2:	e147      	b.n	800d364 <UART_SetConfig+0x348>
 800d0d4:	2310      	movs	r3, #16
 800d0d6:	77fb      	strb	r3, [r7, #31]
 800d0d8:	e144      	b.n	800d364 <UART_SetConfig+0x348>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a83      	ldr	r2, [pc, #524]	@ (800d2ec <UART_SetConfig+0x2d0>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d132      	bne.n	800d14a <UART_SetConfig+0x12e>
 800d0e4:	4b80      	ldr	r3, [pc, #512]	@ (800d2e8 <UART_SetConfig+0x2cc>)
 800d0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0ea:	f003 030c 	and.w	r3, r3, #12
 800d0ee:	2b0c      	cmp	r3, #12
 800d0f0:	d828      	bhi.n	800d144 <UART_SetConfig+0x128>
 800d0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d0f8 <UART_SetConfig+0xdc>)
 800d0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f8:	0800d12d 	.word	0x0800d12d
 800d0fc:	0800d145 	.word	0x0800d145
 800d100:	0800d145 	.word	0x0800d145
 800d104:	0800d145 	.word	0x0800d145
 800d108:	0800d139 	.word	0x0800d139
 800d10c:	0800d145 	.word	0x0800d145
 800d110:	0800d145 	.word	0x0800d145
 800d114:	0800d145 	.word	0x0800d145
 800d118:	0800d133 	.word	0x0800d133
 800d11c:	0800d145 	.word	0x0800d145
 800d120:	0800d145 	.word	0x0800d145
 800d124:	0800d145 	.word	0x0800d145
 800d128:	0800d13f 	.word	0x0800d13f
 800d12c:	2300      	movs	r3, #0
 800d12e:	77fb      	strb	r3, [r7, #31]
 800d130:	e118      	b.n	800d364 <UART_SetConfig+0x348>
 800d132:	2302      	movs	r3, #2
 800d134:	77fb      	strb	r3, [r7, #31]
 800d136:	e115      	b.n	800d364 <UART_SetConfig+0x348>
 800d138:	2304      	movs	r3, #4
 800d13a:	77fb      	strb	r3, [r7, #31]
 800d13c:	e112      	b.n	800d364 <UART_SetConfig+0x348>
 800d13e:	2308      	movs	r3, #8
 800d140:	77fb      	strb	r3, [r7, #31]
 800d142:	e10f      	b.n	800d364 <UART_SetConfig+0x348>
 800d144:	2310      	movs	r3, #16
 800d146:	77fb      	strb	r3, [r7, #31]
 800d148:	e10c      	b.n	800d364 <UART_SetConfig+0x348>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a68      	ldr	r2, [pc, #416]	@ (800d2f0 <UART_SetConfig+0x2d4>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d120      	bne.n	800d196 <UART_SetConfig+0x17a>
 800d154:	4b64      	ldr	r3, [pc, #400]	@ (800d2e8 <UART_SetConfig+0x2cc>)
 800d156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d15a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d15e:	2b30      	cmp	r3, #48	@ 0x30
 800d160:	d013      	beq.n	800d18a <UART_SetConfig+0x16e>
 800d162:	2b30      	cmp	r3, #48	@ 0x30
 800d164:	d814      	bhi.n	800d190 <UART_SetConfig+0x174>
 800d166:	2b20      	cmp	r3, #32
 800d168:	d009      	beq.n	800d17e <UART_SetConfig+0x162>
 800d16a:	2b20      	cmp	r3, #32
 800d16c:	d810      	bhi.n	800d190 <UART_SetConfig+0x174>
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d002      	beq.n	800d178 <UART_SetConfig+0x15c>
 800d172:	2b10      	cmp	r3, #16
 800d174:	d006      	beq.n	800d184 <UART_SetConfig+0x168>
 800d176:	e00b      	b.n	800d190 <UART_SetConfig+0x174>
 800d178:	2300      	movs	r3, #0
 800d17a:	77fb      	strb	r3, [r7, #31]
 800d17c:	e0f2      	b.n	800d364 <UART_SetConfig+0x348>
 800d17e:	2302      	movs	r3, #2
 800d180:	77fb      	strb	r3, [r7, #31]
 800d182:	e0ef      	b.n	800d364 <UART_SetConfig+0x348>
 800d184:	2304      	movs	r3, #4
 800d186:	77fb      	strb	r3, [r7, #31]
 800d188:	e0ec      	b.n	800d364 <UART_SetConfig+0x348>
 800d18a:	2308      	movs	r3, #8
 800d18c:	77fb      	strb	r3, [r7, #31]
 800d18e:	e0e9      	b.n	800d364 <UART_SetConfig+0x348>
 800d190:	2310      	movs	r3, #16
 800d192:	77fb      	strb	r3, [r7, #31]
 800d194:	e0e6      	b.n	800d364 <UART_SetConfig+0x348>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a56      	ldr	r2, [pc, #344]	@ (800d2f4 <UART_SetConfig+0x2d8>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d120      	bne.n	800d1e2 <UART_SetConfig+0x1c6>
 800d1a0:	4b51      	ldr	r3, [pc, #324]	@ (800d2e8 <UART_SetConfig+0x2cc>)
 800d1a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d1aa:	2bc0      	cmp	r3, #192	@ 0xc0
 800d1ac:	d013      	beq.n	800d1d6 <UART_SetConfig+0x1ba>
 800d1ae:	2bc0      	cmp	r3, #192	@ 0xc0
 800d1b0:	d814      	bhi.n	800d1dc <UART_SetConfig+0x1c0>
 800d1b2:	2b80      	cmp	r3, #128	@ 0x80
 800d1b4:	d009      	beq.n	800d1ca <UART_SetConfig+0x1ae>
 800d1b6:	2b80      	cmp	r3, #128	@ 0x80
 800d1b8:	d810      	bhi.n	800d1dc <UART_SetConfig+0x1c0>
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d002      	beq.n	800d1c4 <UART_SetConfig+0x1a8>
 800d1be:	2b40      	cmp	r3, #64	@ 0x40
 800d1c0:	d006      	beq.n	800d1d0 <UART_SetConfig+0x1b4>
 800d1c2:	e00b      	b.n	800d1dc <UART_SetConfig+0x1c0>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	77fb      	strb	r3, [r7, #31]
 800d1c8:	e0cc      	b.n	800d364 <UART_SetConfig+0x348>
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	77fb      	strb	r3, [r7, #31]
 800d1ce:	e0c9      	b.n	800d364 <UART_SetConfig+0x348>
 800d1d0:	2304      	movs	r3, #4
 800d1d2:	77fb      	strb	r3, [r7, #31]
 800d1d4:	e0c6      	b.n	800d364 <UART_SetConfig+0x348>
 800d1d6:	2308      	movs	r3, #8
 800d1d8:	77fb      	strb	r3, [r7, #31]
 800d1da:	e0c3      	b.n	800d364 <UART_SetConfig+0x348>
 800d1dc:	2310      	movs	r3, #16
 800d1de:	77fb      	strb	r3, [r7, #31]
 800d1e0:	e0c0      	b.n	800d364 <UART_SetConfig+0x348>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a44      	ldr	r2, [pc, #272]	@ (800d2f8 <UART_SetConfig+0x2dc>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d125      	bne.n	800d238 <UART_SetConfig+0x21c>
 800d1ec:	4b3e      	ldr	r3, [pc, #248]	@ (800d2e8 <UART_SetConfig+0x2cc>)
 800d1ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d1f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d1fa:	d017      	beq.n	800d22c <UART_SetConfig+0x210>
 800d1fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d200:	d817      	bhi.n	800d232 <UART_SetConfig+0x216>
 800d202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d206:	d00b      	beq.n	800d220 <UART_SetConfig+0x204>
 800d208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d20c:	d811      	bhi.n	800d232 <UART_SetConfig+0x216>
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d003      	beq.n	800d21a <UART_SetConfig+0x1fe>
 800d212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d216:	d006      	beq.n	800d226 <UART_SetConfig+0x20a>
 800d218:	e00b      	b.n	800d232 <UART_SetConfig+0x216>
 800d21a:	2300      	movs	r3, #0
 800d21c:	77fb      	strb	r3, [r7, #31]
 800d21e:	e0a1      	b.n	800d364 <UART_SetConfig+0x348>
 800d220:	2302      	movs	r3, #2
 800d222:	77fb      	strb	r3, [r7, #31]
 800d224:	e09e      	b.n	800d364 <UART_SetConfig+0x348>
 800d226:	2304      	movs	r3, #4
 800d228:	77fb      	strb	r3, [r7, #31]
 800d22a:	e09b      	b.n	800d364 <UART_SetConfig+0x348>
 800d22c:	2308      	movs	r3, #8
 800d22e:	77fb      	strb	r3, [r7, #31]
 800d230:	e098      	b.n	800d364 <UART_SetConfig+0x348>
 800d232:	2310      	movs	r3, #16
 800d234:	77fb      	strb	r3, [r7, #31]
 800d236:	e095      	b.n	800d364 <UART_SetConfig+0x348>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a2f      	ldr	r2, [pc, #188]	@ (800d2fc <UART_SetConfig+0x2e0>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d125      	bne.n	800d28e <UART_SetConfig+0x272>
 800d242:	4b29      	ldr	r3, [pc, #164]	@ (800d2e8 <UART_SetConfig+0x2cc>)
 800d244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d248:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d24c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d250:	d017      	beq.n	800d282 <UART_SetConfig+0x266>
 800d252:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d256:	d817      	bhi.n	800d288 <UART_SetConfig+0x26c>
 800d258:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d25c:	d00b      	beq.n	800d276 <UART_SetConfig+0x25a>
 800d25e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d262:	d811      	bhi.n	800d288 <UART_SetConfig+0x26c>
 800d264:	2b00      	cmp	r3, #0
 800d266:	d003      	beq.n	800d270 <UART_SetConfig+0x254>
 800d268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d26c:	d006      	beq.n	800d27c <UART_SetConfig+0x260>
 800d26e:	e00b      	b.n	800d288 <UART_SetConfig+0x26c>
 800d270:	2301      	movs	r3, #1
 800d272:	77fb      	strb	r3, [r7, #31]
 800d274:	e076      	b.n	800d364 <UART_SetConfig+0x348>
 800d276:	2302      	movs	r3, #2
 800d278:	77fb      	strb	r3, [r7, #31]
 800d27a:	e073      	b.n	800d364 <UART_SetConfig+0x348>
 800d27c:	2304      	movs	r3, #4
 800d27e:	77fb      	strb	r3, [r7, #31]
 800d280:	e070      	b.n	800d364 <UART_SetConfig+0x348>
 800d282:	2308      	movs	r3, #8
 800d284:	77fb      	strb	r3, [r7, #31]
 800d286:	e06d      	b.n	800d364 <UART_SetConfig+0x348>
 800d288:	2310      	movs	r3, #16
 800d28a:	77fb      	strb	r3, [r7, #31]
 800d28c:	e06a      	b.n	800d364 <UART_SetConfig+0x348>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a1b      	ldr	r2, [pc, #108]	@ (800d300 <UART_SetConfig+0x2e4>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d138      	bne.n	800d30a <UART_SetConfig+0x2ee>
 800d298:	4b13      	ldr	r3, [pc, #76]	@ (800d2e8 <UART_SetConfig+0x2cc>)
 800d29a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d29e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800d2a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d2a6:	d017      	beq.n	800d2d8 <UART_SetConfig+0x2bc>
 800d2a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d2ac:	d82a      	bhi.n	800d304 <UART_SetConfig+0x2e8>
 800d2ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2b2:	d00b      	beq.n	800d2cc <UART_SetConfig+0x2b0>
 800d2b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2b8:	d824      	bhi.n	800d304 <UART_SetConfig+0x2e8>
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d003      	beq.n	800d2c6 <UART_SetConfig+0x2aa>
 800d2be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2c2:	d006      	beq.n	800d2d2 <UART_SetConfig+0x2b6>
 800d2c4:	e01e      	b.n	800d304 <UART_SetConfig+0x2e8>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	77fb      	strb	r3, [r7, #31]
 800d2ca:	e04b      	b.n	800d364 <UART_SetConfig+0x348>
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	77fb      	strb	r3, [r7, #31]
 800d2d0:	e048      	b.n	800d364 <UART_SetConfig+0x348>
 800d2d2:	2304      	movs	r3, #4
 800d2d4:	77fb      	strb	r3, [r7, #31]
 800d2d6:	e045      	b.n	800d364 <UART_SetConfig+0x348>
 800d2d8:	2308      	movs	r3, #8
 800d2da:	77fb      	strb	r3, [r7, #31]
 800d2dc:	e042      	b.n	800d364 <UART_SetConfig+0x348>
 800d2de:	bf00      	nop
 800d2e0:	efff69f3 	.word	0xefff69f3
 800d2e4:	40011000 	.word	0x40011000
 800d2e8:	40023800 	.word	0x40023800
 800d2ec:	40004400 	.word	0x40004400
 800d2f0:	40004800 	.word	0x40004800
 800d2f4:	40004c00 	.word	0x40004c00
 800d2f8:	40005000 	.word	0x40005000
 800d2fc:	40011400 	.word	0x40011400
 800d300:	40007800 	.word	0x40007800
 800d304:	2310      	movs	r3, #16
 800d306:	77fb      	strb	r3, [r7, #31]
 800d308:	e02c      	b.n	800d364 <UART_SetConfig+0x348>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a72      	ldr	r2, [pc, #456]	@ (800d4d8 <UART_SetConfig+0x4bc>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d125      	bne.n	800d360 <UART_SetConfig+0x344>
 800d314:	4b71      	ldr	r3, [pc, #452]	@ (800d4dc <UART_SetConfig+0x4c0>)
 800d316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d31a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800d31e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d322:	d017      	beq.n	800d354 <UART_SetConfig+0x338>
 800d324:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d328:	d817      	bhi.n	800d35a <UART_SetConfig+0x33e>
 800d32a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d32e:	d00b      	beq.n	800d348 <UART_SetConfig+0x32c>
 800d330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d334:	d811      	bhi.n	800d35a <UART_SetConfig+0x33e>
 800d336:	2b00      	cmp	r3, #0
 800d338:	d003      	beq.n	800d342 <UART_SetConfig+0x326>
 800d33a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d33e:	d006      	beq.n	800d34e <UART_SetConfig+0x332>
 800d340:	e00b      	b.n	800d35a <UART_SetConfig+0x33e>
 800d342:	2300      	movs	r3, #0
 800d344:	77fb      	strb	r3, [r7, #31]
 800d346:	e00d      	b.n	800d364 <UART_SetConfig+0x348>
 800d348:	2302      	movs	r3, #2
 800d34a:	77fb      	strb	r3, [r7, #31]
 800d34c:	e00a      	b.n	800d364 <UART_SetConfig+0x348>
 800d34e:	2304      	movs	r3, #4
 800d350:	77fb      	strb	r3, [r7, #31]
 800d352:	e007      	b.n	800d364 <UART_SetConfig+0x348>
 800d354:	2308      	movs	r3, #8
 800d356:	77fb      	strb	r3, [r7, #31]
 800d358:	e004      	b.n	800d364 <UART_SetConfig+0x348>
 800d35a:	2310      	movs	r3, #16
 800d35c:	77fb      	strb	r3, [r7, #31]
 800d35e:	e001      	b.n	800d364 <UART_SetConfig+0x348>
 800d360:	2310      	movs	r3, #16
 800d362:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	69db      	ldr	r3, [r3, #28]
 800d368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d36c:	d15b      	bne.n	800d426 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d36e:	7ffb      	ldrb	r3, [r7, #31]
 800d370:	2b08      	cmp	r3, #8
 800d372:	d828      	bhi.n	800d3c6 <UART_SetConfig+0x3aa>
 800d374:	a201      	add	r2, pc, #4	@ (adr r2, 800d37c <UART_SetConfig+0x360>)
 800d376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37a:	bf00      	nop
 800d37c:	0800d3a1 	.word	0x0800d3a1
 800d380:	0800d3a9 	.word	0x0800d3a9
 800d384:	0800d3b1 	.word	0x0800d3b1
 800d388:	0800d3c7 	.word	0x0800d3c7
 800d38c:	0800d3b7 	.word	0x0800d3b7
 800d390:	0800d3c7 	.word	0x0800d3c7
 800d394:	0800d3c7 	.word	0x0800d3c7
 800d398:	0800d3c7 	.word	0x0800d3c7
 800d39c:	0800d3bf 	.word	0x0800d3bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3a0:	f7fa fd52 	bl	8007e48 <HAL_RCC_GetPCLK1Freq>
 800d3a4:	61b8      	str	r0, [r7, #24]
        break;
 800d3a6:	e013      	b.n	800d3d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3a8:	f7fa fd62 	bl	8007e70 <HAL_RCC_GetPCLK2Freq>
 800d3ac:	61b8      	str	r0, [r7, #24]
        break;
 800d3ae:	e00f      	b.n	800d3d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d3b0:	4b4b      	ldr	r3, [pc, #300]	@ (800d4e0 <UART_SetConfig+0x4c4>)
 800d3b2:	61bb      	str	r3, [r7, #24]
        break;
 800d3b4:	e00c      	b.n	800d3d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d3b6:	f7fa fc75 	bl	8007ca4 <HAL_RCC_GetSysClockFreq>
 800d3ba:	61b8      	str	r0, [r7, #24]
        break;
 800d3bc:	e008      	b.n	800d3d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3c2:	61bb      	str	r3, [r7, #24]
        break;
 800d3c4:	e004      	b.n	800d3d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	77bb      	strb	r3, [r7, #30]
        break;
 800d3ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d074      	beq.n	800d4c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	005a      	lsls	r2, r3, #1
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	085b      	lsrs	r3, r3, #1
 800d3e0:	441a      	add	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	2b0f      	cmp	r3, #15
 800d3f0:	d916      	bls.n	800d420 <UART_SetConfig+0x404>
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3f8:	d212      	bcs.n	800d420 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	f023 030f 	bic.w	r3, r3, #15
 800d402:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	085b      	lsrs	r3, r3, #1
 800d408:	b29b      	uxth	r3, r3
 800d40a:	f003 0307 	and.w	r3, r3, #7
 800d40e:	b29a      	uxth	r2, r3
 800d410:	89fb      	ldrh	r3, [r7, #14]
 800d412:	4313      	orrs	r3, r2
 800d414:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	89fa      	ldrh	r2, [r7, #14]
 800d41c:	60da      	str	r2, [r3, #12]
 800d41e:	e04f      	b.n	800d4c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	77bb      	strb	r3, [r7, #30]
 800d424:	e04c      	b.n	800d4c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d426:	7ffb      	ldrb	r3, [r7, #31]
 800d428:	2b08      	cmp	r3, #8
 800d42a:	d828      	bhi.n	800d47e <UART_SetConfig+0x462>
 800d42c:	a201      	add	r2, pc, #4	@ (adr r2, 800d434 <UART_SetConfig+0x418>)
 800d42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d432:	bf00      	nop
 800d434:	0800d459 	.word	0x0800d459
 800d438:	0800d461 	.word	0x0800d461
 800d43c:	0800d469 	.word	0x0800d469
 800d440:	0800d47f 	.word	0x0800d47f
 800d444:	0800d46f 	.word	0x0800d46f
 800d448:	0800d47f 	.word	0x0800d47f
 800d44c:	0800d47f 	.word	0x0800d47f
 800d450:	0800d47f 	.word	0x0800d47f
 800d454:	0800d477 	.word	0x0800d477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d458:	f7fa fcf6 	bl	8007e48 <HAL_RCC_GetPCLK1Freq>
 800d45c:	61b8      	str	r0, [r7, #24]
        break;
 800d45e:	e013      	b.n	800d488 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d460:	f7fa fd06 	bl	8007e70 <HAL_RCC_GetPCLK2Freq>
 800d464:	61b8      	str	r0, [r7, #24]
        break;
 800d466:	e00f      	b.n	800d488 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d468:	4b1d      	ldr	r3, [pc, #116]	@ (800d4e0 <UART_SetConfig+0x4c4>)
 800d46a:	61bb      	str	r3, [r7, #24]
        break;
 800d46c:	e00c      	b.n	800d488 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d46e:	f7fa fc19 	bl	8007ca4 <HAL_RCC_GetSysClockFreq>
 800d472:	61b8      	str	r0, [r7, #24]
        break;
 800d474:	e008      	b.n	800d488 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d47a:	61bb      	str	r3, [r7, #24]
        break;
 800d47c:	e004      	b.n	800d488 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d47e:	2300      	movs	r3, #0
 800d480:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	77bb      	strb	r3, [r7, #30]
        break;
 800d486:	bf00      	nop
    }

    if (pclk != 0U)
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d018      	beq.n	800d4c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	085a      	lsrs	r2, r3, #1
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	441a      	add	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	2b0f      	cmp	r3, #15
 800d4a6:	d909      	bls.n	800d4bc <UART_SetConfig+0x4a0>
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4ae:	d205      	bcs.n	800d4bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	60da      	str	r2, [r3, #12]
 800d4ba:	e001      	b.n	800d4c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d4cc:	7fbb      	ldrb	r3, [r7, #30]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3720      	adds	r7, #32
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	40007c00 	.word	0x40007c00
 800d4dc:	40023800 	.word	0x40023800
 800d4e0:	00f42400 	.word	0x00f42400

0800d4e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4f0:	f003 0308 	and.w	r3, r3, #8
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00a      	beq.n	800d50e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	430a      	orrs	r2, r1
 800d50c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00a      	beq.n	800d530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	430a      	orrs	r2, r1
 800d52e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d534:	f003 0302 	and.w	r3, r3, #2
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00a      	beq.n	800d552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	430a      	orrs	r2, r1
 800d550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d556:	f003 0304 	and.w	r3, r3, #4
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00a      	beq.n	800d574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	430a      	orrs	r2, r1
 800d572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d578:	f003 0310 	and.w	r3, r3, #16
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00a      	beq.n	800d596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	430a      	orrs	r2, r1
 800d594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d59a:	f003 0320 	and.w	r3, r3, #32
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00a      	beq.n	800d5b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	430a      	orrs	r2, r1
 800d5b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d01a      	beq.n	800d5fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	430a      	orrs	r2, r1
 800d5d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5e2:	d10a      	bne.n	800d5fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	430a      	orrs	r2, r1
 800d5f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d602:	2b00      	cmp	r3, #0
 800d604:	d00a      	beq.n	800d61c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	430a      	orrs	r2, r1
 800d61a:	605a      	str	r2, [r3, #4]
  }
}
 800d61c:	bf00      	nop
 800d61e:	370c      	adds	r7, #12
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08c      	sub	sp, #48	@ 0x30
 800d62c:	af02      	add	r7, sp, #8
 800d62e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d638:	f7f7 fce2 	bl	8005000 <HAL_GetTick>
 800d63c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f003 0308 	and.w	r3, r3, #8
 800d648:	2b08      	cmp	r3, #8
 800d64a:	d12e      	bne.n	800d6aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d64c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d654:	2200      	movs	r2, #0
 800d656:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f83b 	bl	800d6d6 <UART_WaitOnFlagUntilTimeout>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d021      	beq.n	800d6aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	e853 3f00 	ldrex	r3, [r3]
 800d672:	60fb      	str	r3, [r7, #12]
   return(result);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d67a:	623b      	str	r3, [r7, #32]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	461a      	mov	r2, r3
 800d682:	6a3b      	ldr	r3, [r7, #32]
 800d684:	61fb      	str	r3, [r7, #28]
 800d686:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d688:	69b9      	ldr	r1, [r7, #24]
 800d68a:	69fa      	ldr	r2, [r7, #28]
 800d68c:	e841 2300 	strex	r3, r2, [r1]
 800d690:	617b      	str	r3, [r7, #20]
   return(result);
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1e6      	bne.n	800d666 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2220      	movs	r2, #32
 800d69c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	e011      	b.n	800d6ce <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2220      	movs	r2, #32
 800d6ae:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2220      	movs	r2, #32
 800d6b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3728      	adds	r7, #40	@ 0x28
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b084      	sub	sp, #16
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	60f8      	str	r0, [r7, #12]
 800d6de:	60b9      	str	r1, [r7, #8]
 800d6e0:	603b      	str	r3, [r7, #0]
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6e6:	e04f      	b.n	800d788 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ee:	d04b      	beq.n	800d788 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6f0:	f7f7 fc86 	bl	8005000 <HAL_GetTick>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	69ba      	ldr	r2, [r7, #24]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d302      	bcc.n	800d706 <UART_WaitOnFlagUntilTimeout+0x30>
 800d700:	69bb      	ldr	r3, [r7, #24]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d101      	bne.n	800d70a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d706:	2303      	movs	r3, #3
 800d708:	e04e      	b.n	800d7a8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f003 0304 	and.w	r3, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	d037      	beq.n	800d788 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	2b80      	cmp	r3, #128	@ 0x80
 800d71c:	d034      	beq.n	800d788 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	2b40      	cmp	r3, #64	@ 0x40
 800d722:	d031      	beq.n	800d788 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	69db      	ldr	r3, [r3, #28]
 800d72a:	f003 0308 	and.w	r3, r3, #8
 800d72e:	2b08      	cmp	r3, #8
 800d730:	d110      	bne.n	800d754 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2208      	movs	r2, #8
 800d738:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f000 f8fe 	bl	800d93c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2208      	movs	r2, #8
 800d744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d750:	2301      	movs	r3, #1
 800d752:	e029      	b.n	800d7a8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	69db      	ldr	r3, [r3, #28]
 800d75a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d75e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d762:	d111      	bne.n	800d788 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d76c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	f000 f8e4 	bl	800d93c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2220      	movs	r2, #32
 800d778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2200      	movs	r2, #0
 800d780:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d784:	2303      	movs	r3, #3
 800d786:	e00f      	b.n	800d7a8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	69da      	ldr	r2, [r3, #28]
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	4013      	ands	r3, r2
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	429a      	cmp	r2, r3
 800d796:	bf0c      	ite	eq
 800d798:	2301      	moveq	r3, #1
 800d79a:	2300      	movne	r3, #0
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	461a      	mov	r2, r3
 800d7a0:	79fb      	ldrb	r3, [r7, #7]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d0a0      	beq.n	800d6e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b097      	sub	sp, #92	@ 0x5c
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	68ba      	ldr	r2, [r7, #8]
 800d7c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	88fa      	ldrh	r2, [r7, #6]
 800d7c8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	88fa      	ldrh	r2, [r7, #6]
 800d7d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7e2:	d10e      	bne.n	800d802 <UART_Start_Receive_IT+0x52>
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	691b      	ldr	r3, [r3, #16]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d105      	bne.n	800d7f8 <UART_Start_Receive_IT+0x48>
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d7f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d7f6:	e02d      	b.n	800d854 <UART_Start_Receive_IT+0xa4>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	22ff      	movs	r2, #255	@ 0xff
 800d7fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d800:	e028      	b.n	800d854 <UART_Start_Receive_IT+0xa4>
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10d      	bne.n	800d826 <UART_Start_Receive_IT+0x76>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	691b      	ldr	r3, [r3, #16]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d104      	bne.n	800d81c <UART_Start_Receive_IT+0x6c>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	22ff      	movs	r2, #255	@ 0xff
 800d816:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d81a:	e01b      	b.n	800d854 <UART_Start_Receive_IT+0xa4>
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	227f      	movs	r2, #127	@ 0x7f
 800d820:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d824:	e016      	b.n	800d854 <UART_Start_Receive_IT+0xa4>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d82e:	d10d      	bne.n	800d84c <UART_Start_Receive_IT+0x9c>
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d104      	bne.n	800d842 <UART_Start_Receive_IT+0x92>
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	227f      	movs	r2, #127	@ 0x7f
 800d83c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d840:	e008      	b.n	800d854 <UART_Start_Receive_IT+0xa4>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	223f      	movs	r2, #63	@ 0x3f
 800d846:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800d84a:	e003      	b.n	800d854 <UART_Start_Receive_IT+0xa4>
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2200      	movs	r2, #0
 800d850:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2222      	movs	r2, #34	@ 0x22
 800d860:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	3308      	adds	r3, #8
 800d86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d86c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d86e:	e853 3f00 	ldrex	r3, [r3]
 800d872:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d876:	f043 0301 	orr.w	r3, r3, #1
 800d87a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	3308      	adds	r3, #8
 800d882:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d884:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d886:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d888:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d88a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d88c:	e841 2300 	strex	r3, r2, [r1]
 800d890:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d894:	2b00      	cmp	r3, #0
 800d896:	d1e5      	bne.n	800d864 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8a0:	d107      	bne.n	800d8b2 <UART_Start_Receive_IT+0x102>
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d103      	bne.n	800d8b2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	4a21      	ldr	r2, [pc, #132]	@ (800d934 <UART_Start_Receive_IT+0x184>)
 800d8ae:	669a      	str	r2, [r3, #104]	@ 0x68
 800d8b0:	e002      	b.n	800d8b8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	4a20      	ldr	r2, [pc, #128]	@ (800d938 <UART_Start_Receive_IT+0x188>)
 800d8b6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	691b      	ldr	r3, [r3, #16]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d019      	beq.n	800d8f4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c8:	e853 3f00 	ldrex	r3, [r3]
 800d8cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d8d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8e0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d8e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8e6:	e841 2300 	strex	r3, r2, [r1]
 800d8ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1e6      	bne.n	800d8c0 <UART_Start_Receive_IT+0x110>
 800d8f2:	e018      	b.n	800d926 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	e853 3f00 	ldrex	r3, [r3]
 800d900:	613b      	str	r3, [r7, #16]
   return(result);
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	f043 0320 	orr.w	r3, r3, #32
 800d908:	653b      	str	r3, [r7, #80]	@ 0x50
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	461a      	mov	r2, r3
 800d910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d912:	623b      	str	r3, [r7, #32]
 800d914:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d916:	69f9      	ldr	r1, [r7, #28]
 800d918:	6a3a      	ldr	r2, [r7, #32]
 800d91a:	e841 2300 	strex	r3, r2, [r1]
 800d91e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1e6      	bne.n	800d8f4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800d926:	2300      	movs	r3, #0
}
 800d928:	4618      	mov	r0, r3
 800d92a:	375c      	adds	r7, #92	@ 0x5c
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr
 800d934:	0800dc25 	.word	0x0800dc25
 800d938:	0800da7d 	.word	0x0800da7d

0800d93c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b095      	sub	sp, #84	@ 0x54
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94c:	e853 3f00 	ldrex	r3, [r3]
 800d950:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d958:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	461a      	mov	r2, r3
 800d960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d962:	643b      	str	r3, [r7, #64]	@ 0x40
 800d964:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d966:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d968:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d96a:	e841 2300 	strex	r3, r2, [r1]
 800d96e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1e6      	bne.n	800d944 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3308      	adds	r3, #8
 800d97c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	e853 3f00 	ldrex	r3, [r3]
 800d984:	61fb      	str	r3, [r7, #28]
   return(result);
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	f023 0301 	bic.w	r3, r3, #1
 800d98c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	3308      	adds	r3, #8
 800d994:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d996:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d998:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d99c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d99e:	e841 2300 	strex	r3, r2, [r1]
 800d9a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1e5      	bne.n	800d976 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d118      	bne.n	800d9e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	e853 3f00 	ldrex	r3, [r3]
 800d9be:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	f023 0310 	bic.w	r3, r3, #16
 800d9c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d9d0:	61bb      	str	r3, [r7, #24]
 800d9d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d4:	6979      	ldr	r1, [r7, #20]
 800d9d6:	69ba      	ldr	r2, [r7, #24]
 800d9d8:	e841 2300 	strex	r3, r2, [r1]
 800d9dc:	613b      	str	r3, [r7, #16]
   return(result);
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d1e6      	bne.n	800d9b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2220      	movs	r2, #32
 800d9e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d9f8:	bf00      	nop
 800d9fa:	3754      	adds	r7, #84	@ 0x54
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2200      	movs	r2, #0
 800da16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da1a:	68f8      	ldr	r0, [r7, #12]
 800da1c:	f7ff fae8 	bl	800cff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da20:	bf00      	nop
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b088      	sub	sp, #32
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	e853 3f00 	ldrex	r3, [r3]
 800da3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da44:	61fb      	str	r3, [r7, #28]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	461a      	mov	r2, r3
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	61bb      	str	r3, [r7, #24]
 800da50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da52:	6979      	ldr	r1, [r7, #20]
 800da54:	69ba      	ldr	r2, [r7, #24]
 800da56:	e841 2300 	strex	r3, r2, [r1]
 800da5a:	613b      	str	r3, [r7, #16]
   return(result);
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d1e6      	bne.n	800da30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2220      	movs	r2, #32
 800da66:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7ff fab4 	bl	800cfdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da74:	bf00      	nop
 800da76:	3720      	adds	r7, #32
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b09c      	sub	sp, #112	@ 0x70
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800da8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da94:	2b22      	cmp	r3, #34	@ 0x22
 800da96:	f040 80b9 	bne.w	800dc0c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daa0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800daa4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800daa8:	b2d9      	uxtb	r1, r3
 800daaa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dab4:	400a      	ands	r2, r1
 800dab6:	b2d2      	uxtb	r2, r2
 800dab8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dabe:	1c5a      	adds	r2, r3, #1
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800daca:	b29b      	uxth	r3, r3
 800dacc:	3b01      	subs	r3, #1
 800dace:	b29a      	uxth	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800dadc:	b29b      	uxth	r3, r3
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f040 809c 	bne.w	800dc1c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800daec:	e853 3f00 	ldrex	r3, [r3]
 800daf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800daf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800daf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	461a      	mov	r2, r3
 800db00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db02:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800db08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db0a:	e841 2300 	strex	r3, r2, [r1]
 800db0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800db10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db12:	2b00      	cmp	r3, #0
 800db14:	d1e6      	bne.n	800dae4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	3308      	adds	r3, #8
 800db1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db20:	e853 3f00 	ldrex	r3, [r3]
 800db24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800db26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db28:	f023 0301 	bic.w	r3, r3, #1
 800db2c:	667b      	str	r3, [r7, #100]	@ 0x64
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	3308      	adds	r3, #8
 800db34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800db36:	647a      	str	r2, [r7, #68]	@ 0x44
 800db38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800db3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db3e:	e841 2300 	strex	r3, r2, [r1]
 800db42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800db44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1e5      	bne.n	800db16 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2220      	movs	r2, #32
 800db4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d018      	beq.n	800db9e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db74:	e853 3f00 	ldrex	r3, [r3]
 800db78:	623b      	str	r3, [r7, #32]
   return(result);
 800db7a:	6a3b      	ldr	r3, [r7, #32]
 800db7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db80:	663b      	str	r3, [r7, #96]	@ 0x60
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	461a      	mov	r2, r3
 800db88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800db8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db92:	e841 2300 	strex	r3, r2, [r1]
 800db96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d1e6      	bne.n	800db6c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d12e      	bne.n	800dc04 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	e853 3f00 	ldrex	r3, [r3]
 800dbb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f023 0310 	bic.w	r3, r3, #16
 800dbc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dbca:	61fb      	str	r3, [r7, #28]
 800dbcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbce:	69b9      	ldr	r1, [r7, #24]
 800dbd0:	69fa      	ldr	r2, [r7, #28]
 800dbd2:	e841 2300 	strex	r3, r2, [r1]
 800dbd6:	617b      	str	r3, [r7, #20]
   return(result);
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d1e6      	bne.n	800dbac <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	69db      	ldr	r3, [r3, #28]
 800dbe4:	f003 0310 	and.w	r3, r3, #16
 800dbe8:	2b10      	cmp	r3, #16
 800dbea:	d103      	bne.n	800dbf4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2210      	movs	r2, #16
 800dbf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f7ff fa01 	bl	800d004 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc02:	e00b      	b.n	800dc1c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7f4 ff05 	bl	8002a14 <HAL_UART_RxCpltCallback>
}
 800dc0a:	e007      	b.n	800dc1c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	699a      	ldr	r2, [r3, #24]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f042 0208 	orr.w	r2, r2, #8
 800dc1a:	619a      	str	r2, [r3, #24]
}
 800dc1c:	bf00      	nop
 800dc1e:	3770      	adds	r7, #112	@ 0x70
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b09c      	sub	sp, #112	@ 0x70
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dc32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc3c:	2b22      	cmp	r3, #34	@ 0x22
 800dc3e:	f040 80b9 	bne.w	800ddb4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc50:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800dc52:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800dc56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800dc5a:	4013      	ands	r3, r2
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc60:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc66:	1c9a      	adds	r2, r3, #2
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	3b01      	subs	r3, #1
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f040 809c 	bne.w	800ddc4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc94:	e853 3f00 	ldrex	r3, [r3]
 800dc98:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800dc9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dca0:	667b      	str	r3, [r7, #100]	@ 0x64
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	461a      	mov	r2, r3
 800dca8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcaa:	657b      	str	r3, [r7, #84]	@ 0x54
 800dcac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dcb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dcb2:	e841 2300 	strex	r3, r2, [r1]
 800dcb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dcb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1e6      	bne.n	800dc8c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	3308      	adds	r3, #8
 800dcc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcc8:	e853 3f00 	ldrex	r3, [r3]
 800dccc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd0:	f023 0301 	bic.w	r3, r3, #1
 800dcd4:	663b      	str	r3, [r7, #96]	@ 0x60
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	3308      	adds	r3, #8
 800dcdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dcde:	643a      	str	r2, [r7, #64]	@ 0x40
 800dce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dce4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dce6:	e841 2300 	strex	r3, r2, [r1]
 800dcea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1e5      	bne.n	800dcbe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2220      	movs	r2, #32
 800dcf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d018      	beq.n	800dd46 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd1a:	6a3b      	ldr	r3, [r7, #32]
 800dd1c:	e853 3f00 	ldrex	r3, [r3]
 800dd20:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dd28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	461a      	mov	r2, r3
 800dd30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd34:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd3a:	e841 2300 	strex	r3, r2, [r1]
 800dd3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1e6      	bne.n	800dd14 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d12e      	bne.n	800ddac <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	e853 3f00 	ldrex	r3, [r3]
 800dd60:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	f023 0310 	bic.w	r3, r3, #16
 800dd68:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	461a      	mov	r2, r3
 800dd70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd72:	61bb      	str	r3, [r7, #24]
 800dd74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd76:	6979      	ldr	r1, [r7, #20]
 800dd78:	69ba      	ldr	r2, [r7, #24]
 800dd7a:	e841 2300 	strex	r3, r2, [r1]
 800dd7e:	613b      	str	r3, [r7, #16]
   return(result);
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1e6      	bne.n	800dd54 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	69db      	ldr	r3, [r3, #28]
 800dd8c:	f003 0310 	and.w	r3, r3, #16
 800dd90:	2b10      	cmp	r3, #16
 800dd92:	d103      	bne.n	800dd9c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2210      	movs	r2, #16
 800dd9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800dda2:	4619      	mov	r1, r3
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7ff f92d 	bl	800d004 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ddaa:	e00b      	b.n	800ddc4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7f4 fe31 	bl	8002a14 <HAL_UART_RxCpltCallback>
}
 800ddb2:	e007      	b.n	800ddc4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	699a      	ldr	r2, [r3, #24]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f042 0208 	orr.w	r2, r2, #8
 800ddc2:	619a      	str	r2, [r3, #24]
}
 800ddc4:	bf00      	nop
 800ddc6:	3770      	adds	r7, #112	@ 0x70
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d121      	bne.n	800de22 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	4b27      	ldr	r3, [pc, #156]	@ (800de80 <FMC_SDRAM_Init+0xb4>)
 800dde4:	4013      	ands	r3, r2
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	6851      	ldr	r1, [r2, #4]
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	6892      	ldr	r2, [r2, #8]
 800ddee:	4311      	orrs	r1, r2
 800ddf0:	683a      	ldr	r2, [r7, #0]
 800ddf2:	68d2      	ldr	r2, [r2, #12]
 800ddf4:	4311      	orrs	r1, r2
 800ddf6:	683a      	ldr	r2, [r7, #0]
 800ddf8:	6912      	ldr	r2, [r2, #16]
 800ddfa:	4311      	orrs	r1, r2
 800ddfc:	683a      	ldr	r2, [r7, #0]
 800ddfe:	6952      	ldr	r2, [r2, #20]
 800de00:	4311      	orrs	r1, r2
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	6992      	ldr	r2, [r2, #24]
 800de06:	4311      	orrs	r1, r2
 800de08:	683a      	ldr	r2, [r7, #0]
 800de0a:	69d2      	ldr	r2, [r2, #28]
 800de0c:	4311      	orrs	r1, r2
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	6a12      	ldr	r2, [r2, #32]
 800de12:	4311      	orrs	r1, r2
 800de14:	683a      	ldr	r2, [r7, #0]
 800de16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800de18:	430a      	orrs	r2, r1
 800de1a:	431a      	orrs	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	601a      	str	r2, [r3, #0]
 800de20:	e026      	b.n	800de70 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	69d9      	ldr	r1, [r3, #28]
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	6a1b      	ldr	r3, [r3, #32]
 800de32:	4319      	orrs	r1, r3
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de38:	430b      	orrs	r3, r1
 800de3a:	431a      	orrs	r2, r3
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	685a      	ldr	r2, [r3, #4]
 800de44:	4b0e      	ldr	r3, [pc, #56]	@ (800de80 <FMC_SDRAM_Init+0xb4>)
 800de46:	4013      	ands	r3, r2
 800de48:	683a      	ldr	r2, [r7, #0]
 800de4a:	6851      	ldr	r1, [r2, #4]
 800de4c:	683a      	ldr	r2, [r7, #0]
 800de4e:	6892      	ldr	r2, [r2, #8]
 800de50:	4311      	orrs	r1, r2
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	68d2      	ldr	r2, [r2, #12]
 800de56:	4311      	orrs	r1, r2
 800de58:	683a      	ldr	r2, [r7, #0]
 800de5a:	6912      	ldr	r2, [r2, #16]
 800de5c:	4311      	orrs	r1, r2
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	6952      	ldr	r2, [r2, #20]
 800de62:	4311      	orrs	r1, r2
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	6992      	ldr	r2, [r2, #24]
 800de68:	430a      	orrs	r2, r1
 800de6a:	431a      	orrs	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	370c      	adds	r7, #12
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	ffff8000 	.word	0xffff8000

0800de84 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800de84:	b480      	push	{r7}
 800de86:	b085      	sub	sp, #20
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d128      	bne.n	800dee8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	1e59      	subs	r1, r3, #1
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	3b01      	subs	r3, #1
 800deaa:	011b      	lsls	r3, r3, #4
 800deac:	4319      	orrs	r1, r3
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	3b01      	subs	r3, #1
 800deb4:	021b      	lsls	r3, r3, #8
 800deb6:	4319      	orrs	r1, r3
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	3b01      	subs	r3, #1
 800debe:	031b      	lsls	r3, r3, #12
 800dec0:	4319      	orrs	r1, r3
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	3b01      	subs	r3, #1
 800dec8:	041b      	lsls	r3, r3, #16
 800deca:	4319      	orrs	r1, r3
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	695b      	ldr	r3, [r3, #20]
 800ded0:	3b01      	subs	r3, #1
 800ded2:	051b      	lsls	r3, r3, #20
 800ded4:	4319      	orrs	r1, r3
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	699b      	ldr	r3, [r3, #24]
 800deda:	3b01      	subs	r3, #1
 800dedc:	061b      	lsls	r3, r3, #24
 800dede:	430b      	orrs	r3, r1
 800dee0:	431a      	orrs	r2, r3
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	609a      	str	r2, [r3, #8]
 800dee6:	e02d      	b.n	800df44 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	689a      	ldr	r2, [r3, #8]
 800deec:	4b19      	ldr	r3, [pc, #100]	@ (800df54 <FMC_SDRAM_Timing_Init+0xd0>)
 800deee:	4013      	ands	r3, r2
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	68d2      	ldr	r2, [r2, #12]
 800def4:	3a01      	subs	r2, #1
 800def6:	0311      	lsls	r1, r2, #12
 800def8:	68ba      	ldr	r2, [r7, #8]
 800defa:	6952      	ldr	r2, [r2, #20]
 800defc:	3a01      	subs	r2, #1
 800defe:	0512      	lsls	r2, r2, #20
 800df00:	430a      	orrs	r2, r1
 800df02:	431a      	orrs	r2, r3
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	1e59      	subs	r1, r3, #1
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	3b01      	subs	r3, #1
 800df1c:	011b      	lsls	r3, r3, #4
 800df1e:	4319      	orrs	r1, r3
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	3b01      	subs	r3, #1
 800df26:	021b      	lsls	r3, r3, #8
 800df28:	4319      	orrs	r1, r3
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	691b      	ldr	r3, [r3, #16]
 800df2e:	3b01      	subs	r3, #1
 800df30:	041b      	lsls	r3, r3, #16
 800df32:	4319      	orrs	r1, r3
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	699b      	ldr	r3, [r3, #24]
 800df38:	3b01      	subs	r3, #1
 800df3a:	061b      	lsls	r3, r3, #24
 800df3c:	430b      	orrs	r3, r1
 800df3e:	431a      	orrs	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3714      	adds	r7, #20
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	ff0f0fff 	.word	0xff0f0fff

0800df58 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800df58:	b084      	sub	sp, #16
 800df5a:	b480      	push	{r7}
 800df5c:	b085      	sub	sp, #20
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	f107 001c 	add.w	r0, r7, #28
 800df66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800df6e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800df70:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800df72:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800df74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800df76:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800df78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800df7a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800df7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800df7e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800df80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800df82:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800df84:	68fa      	ldr	r2, [r7, #12]
 800df86:	4313      	orrs	r3, r2
 800df88:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	685a      	ldr	r2, [r3, #4]
 800df8e:	4b07      	ldr	r3, [pc, #28]	@ (800dfac <SDMMC_Init+0x54>)
 800df90:	4013      	ands	r3, r2
 800df92:	68fa      	ldr	r2, [r7, #12]
 800df94:	431a      	orrs	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3714      	adds	r7, #20
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	b004      	add	sp, #16
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	ffff8100 	.word	0xffff8100

0800dfb0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b083      	sub	sp, #12
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	370c      	adds	r7, #12
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr

0800dfca <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800dfca:	b480      	push	{r7}
 800dfcc:	b083      	sub	sp, #12
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2203      	movs	r2, #3
 800dfd6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	370c      	adds	r7, #12
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr

0800dfe6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800dfe6:	b480      	push	{r7}
 800dfe8:	b083      	sub	sp, #12
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f003 0303 	and.w	r3, r3, #3
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	370c      	adds	r7, #12
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
	...

0800e004 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e00e:	2300      	movs	r3, #0
 800e010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e022:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e028:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e02e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	4313      	orrs	r3, r2
 800e034:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	68da      	ldr	r2, [r3, #12]
 800e03a:	4b06      	ldr	r3, [pc, #24]	@ (800e054 <SDMMC_SendCommand+0x50>)
 800e03c:	4013      	ands	r3, r2
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	431a      	orrs	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e046:	2300      	movs	r3, #0
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3714      	adds	r7, #20
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	fffff000 	.word	0xfffff000

0800e058 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	691b      	ldr	r3, [r3, #16]
 800e064:	b2db      	uxtb	r3, r3
}
 800e066:	4618      	mov	r0, r3
 800e068:	370c      	adds	r7, #12
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr

0800e072 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e072:	b480      	push	{r7}
 800e074:	b085      	sub	sp, #20
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	3314      	adds	r3, #20
 800e080:	461a      	mov	r2, r3
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	4413      	add	r3, r2
 800e086:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
}  
 800e08c:	4618      	mov	r0, r3
 800e08e:	3714      	adds	r7, #20
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	685a      	ldr	r2, [r3, #4]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e0be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e0c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e0ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e0cc:	68fa      	ldr	r2, [r7, #12]
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	431a      	orrs	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e0e2:	2300      	movs	r3, #0

}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b088      	sub	sp, #32
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e0fe:	2310      	movs	r3, #16
 800e100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e102:	2340      	movs	r3, #64	@ 0x40
 800e104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e106:	2300      	movs	r3, #0
 800e108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e10a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e10e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e110:	f107 0308 	add.w	r3, r7, #8
 800e114:	4619      	mov	r1, r3
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7ff ff74 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e11c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e120:	2110      	movs	r1, #16
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 fa1a 	bl	800e55c <SDMMC_GetCmdResp1>
 800e128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e12a:	69fb      	ldr	r3, [r7, #28]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3720      	adds	r7, #32
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b088      	sub	sp, #32
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e142:	2311      	movs	r3, #17
 800e144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e146:	2340      	movs	r3, #64	@ 0x40
 800e148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e14a:	2300      	movs	r3, #0
 800e14c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e14e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e152:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e154:	f107 0308 	add.w	r3, r7, #8
 800e158:	4619      	mov	r1, r3
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7ff ff52 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e160:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e164:	2111      	movs	r1, #17
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 f9f8 	bl	800e55c <SDMMC_GetCmdResp1>
 800e16c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e16e:	69fb      	ldr	r3, [r7, #28]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3720      	adds	r7, #32
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e186:	2312      	movs	r3, #18
 800e188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e18a:	2340      	movs	r3, #64	@ 0x40
 800e18c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e18e:	2300      	movs	r3, #0
 800e190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e196:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e198:	f107 0308 	add.w	r3, r7, #8
 800e19c:	4619      	mov	r1, r3
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f7ff ff30 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e1a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1a8:	2112      	movs	r1, #18
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 f9d6 	bl	800e55c <SDMMC_GetCmdResp1>
 800e1b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1b2:	69fb      	ldr	r3, [r7, #28]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3720      	adds	r7, #32
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b088      	sub	sp, #32
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e1ca:	2318      	movs	r3, #24
 800e1cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1ce:	2340      	movs	r3, #64	@ 0x40
 800e1d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e1da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1dc:	f107 0308 	add.w	r3, r7, #8
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7ff ff0e 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e1e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1ec:	2118      	movs	r1, #24
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 f9b4 	bl	800e55c <SDMMC_GetCmdResp1>
 800e1f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1f6:	69fb      	ldr	r3, [r7, #28]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3720      	adds	r7, #32
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b088      	sub	sp, #32
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e20e:	2319      	movs	r3, #25
 800e210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e212:	2340      	movs	r3, #64	@ 0x40
 800e214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e216:	2300      	movs	r3, #0
 800e218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e21a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e21e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e220:	f107 0308 	add.w	r3, r7, #8
 800e224:	4619      	mov	r1, r3
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7ff feec 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e22c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e230:	2119      	movs	r1, #25
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 f992 	bl	800e55c <SDMMC_GetCmdResp1>
 800e238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e23a:	69fb      	ldr	r3, [r7, #28]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3720      	adds	r7, #32
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b088      	sub	sp, #32
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e24c:	2300      	movs	r3, #0
 800e24e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e250:	230c      	movs	r3, #12
 800e252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e254:	2340      	movs	r3, #64	@ 0x40
 800e256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e258:	2300      	movs	r3, #0
 800e25a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e25c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e260:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e262:	f107 0308 	add.w	r3, r7, #8
 800e266:	4619      	mov	r1, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7ff fecb 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e26e:	4a05      	ldr	r2, [pc, #20]	@ (800e284 <SDMMC_CmdStopTransfer+0x40>)
 800e270:	210c      	movs	r1, #12
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 f972 	bl	800e55c <SDMMC_GetCmdResp1>
 800e278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e27a:	69fb      	ldr	r3, [r7, #28]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3720      	adds	r7, #32
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	05f5e100 	.word	0x05f5e100

0800e288 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b08a      	sub	sp, #40	@ 0x28
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e298:	2307      	movs	r3, #7
 800e29a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e29c:	2340      	movs	r3, #64	@ 0x40
 800e29e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2a8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2aa:	f107 0310 	add.w	r3, r7, #16
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	f7ff fea7 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e2b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2ba:	2107      	movs	r1, #7
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f000 f94d 	bl	800e55c <SDMMC_GetCmdResp1>
 800e2c2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800e2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3728      	adds	r7, #40	@ 0x28
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b088      	sub	sp, #32
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2ec:	f107 0308 	add.w	r3, r7, #8
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f7ff fe86 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 fb67 	bl	800e9cc <SDMMC_GetCmdError>
 800e2fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e300:	69fb      	ldr	r3, [r7, #28]
}
 800e302:	4618      	mov	r0, r3
 800e304:	3720      	adds	r7, #32
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b088      	sub	sp, #32
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e312:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e316:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e318:	2308      	movs	r3, #8
 800e31a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e31c:	2340      	movs	r3, #64	@ 0x40
 800e31e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e320:	2300      	movs	r3, #0
 800e322:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e328:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e32a:	f107 0308 	add.w	r3, r7, #8
 800e32e:	4619      	mov	r1, r3
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7ff fe67 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fafa 	bl	800e930 <SDMMC_GetCmdResp7>
 800e33c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e33e:	69fb      	ldr	r3, [r7, #28]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3720      	adds	r7, #32
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b088      	sub	sp, #32
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e356:	2337      	movs	r3, #55	@ 0x37
 800e358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e35a:	2340      	movs	r3, #64	@ 0x40
 800e35c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e35e:	2300      	movs	r3, #0
 800e360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e366:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e368:	f107 0308 	add.w	r3, r7, #8
 800e36c:	4619      	mov	r1, r3
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7ff fe48 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e374:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e378:	2137      	movs	r1, #55	@ 0x37
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f8ee 	bl	800e55c <SDMMC_GetCmdResp1>
 800e380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e382:	69fb      	ldr	r3, [r7, #28]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3720      	adds	r7, #32
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b088      	sub	sp, #32
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e396:	683a      	ldr	r2, [r7, #0]
 800e398:	4b0d      	ldr	r3, [pc, #52]	@ (800e3d0 <SDMMC_CmdAppOperCommand+0x44>)
 800e39a:	4313      	orrs	r3, r2
 800e39c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e39e:	2329      	movs	r3, #41	@ 0x29
 800e3a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3a2:	2340      	movs	r3, #64	@ 0x40
 800e3a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3b0:	f107 0308 	add.w	r3, r7, #8
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f7ff fe24 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 fa03 	bl	800e7c8 <SDMMC_GetCmdResp3>
 800e3c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3c4:	69fb      	ldr	r3, [r7, #28]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3720      	adds	r7, #32
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	80100000 	.word	0x80100000

0800e3d4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b088      	sub	sp, #32
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e3e2:	2306      	movs	r3, #6
 800e3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3e6:	2340      	movs	r3, #64	@ 0x40
 800e3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3f4:	f107 0308 	add.w	r3, r7, #8
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f7ff fe02 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e400:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e404:	2106      	movs	r1, #6
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f8a8 	bl	800e55c <SDMMC_GetCmdResp1>
 800e40c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e40e:	69fb      	ldr	r3, [r7, #28]
}
 800e410:	4618      	mov	r0, r3
 800e412:	3720      	adds	r7, #32
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b088      	sub	sp, #32
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e420:	2300      	movs	r3, #0
 800e422:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e424:	2333      	movs	r3, #51	@ 0x33
 800e426:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e428:	2340      	movs	r3, #64	@ 0x40
 800e42a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e42c:	2300      	movs	r3, #0
 800e42e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e434:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e436:	f107 0308 	add.w	r3, r7, #8
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7ff fde1 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e442:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e446:	2133      	movs	r1, #51	@ 0x33
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 f887 	bl	800e55c <SDMMC_GetCmdResp1>
 800e44e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e450:	69fb      	ldr	r3, [r7, #28]
}
 800e452:	4618      	mov	r0, r3
 800e454:	3720      	adds	r7, #32
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}

0800e45a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e45a:	b580      	push	{r7, lr}
 800e45c:	b088      	sub	sp, #32
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e462:	2300      	movs	r3, #0
 800e464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e466:	2302      	movs	r3, #2
 800e468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e46a:	23c0      	movs	r3, #192	@ 0xc0
 800e46c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e46e:	2300      	movs	r3, #0
 800e470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e476:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e478:	f107 0308 	add.w	r3, r7, #8
 800e47c:	4619      	mov	r1, r3
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7ff fdc0 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f000 f957 	bl	800e738 <SDMMC_GetCmdResp2>
 800e48a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e48c:	69fb      	ldr	r3, [r7, #28]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3720      	adds	r7, #32
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}

0800e496 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e496:	b580      	push	{r7, lr}
 800e498:	b088      	sub	sp, #32
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
 800e49e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e4a4:	2309      	movs	r3, #9
 800e4a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e4a8:	23c0      	movs	r3, #192	@ 0xc0
 800e4aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4b6:	f107 0308 	add.w	r3, r7, #8
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f7ff fda1 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 f938 	bl	800e738 <SDMMC_GetCmdResp2>
 800e4c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4ca:	69fb      	ldr	r3, [r7, #28]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3720      	adds	r7, #32
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b088      	sub	sp, #32
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4e6:	2340      	movs	r3, #64	@ 0x40
 800e4e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4f4:	f107 0308 	add.w	r3, r7, #8
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7ff fd82 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e500:	683a      	ldr	r2, [r7, #0]
 800e502:	2103      	movs	r1, #3
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 f99d 	bl	800e844 <SDMMC_GetCmdResp6>
 800e50a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e50c:	69fb      	ldr	r3, [r7, #28]
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3720      	adds	r7, #32
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b088      	sub	sp, #32
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
 800e51e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e524:	230d      	movs	r3, #13
 800e526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e528:	2340      	movs	r3, #64	@ 0x40
 800e52a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e52c:	2300      	movs	r3, #0
 800e52e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e534:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e536:	f107 0308 	add.w	r3, r7, #8
 800e53a:	4619      	mov	r1, r3
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f7ff fd61 	bl	800e004 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e542:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e546:	210d      	movs	r1, #13
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 f807 	bl	800e55c <SDMMC_GetCmdResp1>
 800e54e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e550:	69fb      	ldr	r3, [r7, #28]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3720      	adds	r7, #32
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
	...

0800e55c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b088      	sub	sp, #32
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	460b      	mov	r3, r1
 800e566:	607a      	str	r2, [r7, #4]
 800e568:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e56a:	4b70      	ldr	r3, [pc, #448]	@ (800e72c <SDMMC_GetCmdResp1+0x1d0>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4a70      	ldr	r2, [pc, #448]	@ (800e730 <SDMMC_GetCmdResp1+0x1d4>)
 800e570:	fba2 2303 	umull	r2, r3, r2, r3
 800e574:	0a5a      	lsrs	r2, r3, #9
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	fb02 f303 	mul.w	r3, r2, r3
 800e57c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e57e:	69fb      	ldr	r3, [r7, #28]
 800e580:	1e5a      	subs	r2, r3, #1
 800e582:	61fa      	str	r2, [r7, #28]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d102      	bne.n	800e58e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e588:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e58c:	e0c9      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e592:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d0ef      	beq.n	800e57e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d1ea      	bne.n	800e57e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5ac:	f003 0304 	and.w	r3, r3, #4
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d004      	beq.n	800e5be <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2204      	movs	r2, #4
 800e5b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5ba:	2304      	movs	r3, #4
 800e5bc:	e0b1      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5c2:	f003 0301 	and.w	r3, r3, #1
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d004      	beq.n	800e5d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e0a6      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	22c5      	movs	r2, #197	@ 0xc5
 800e5d8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e5da:	68f8      	ldr	r0, [r7, #12]
 800e5dc:	f7ff fd3c 	bl	800e058 <SDMMC_GetCommandResponse>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	7afb      	ldrb	r3, [r7, #11]
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d001      	beq.n	800e5ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e099      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f7ff fd3e 	bl	800e072 <SDMMC_GetResponse>
 800e5f6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e5f8:	697a      	ldr	r2, [r7, #20]
 800e5fa:	4b4e      	ldr	r3, [pc, #312]	@ (800e734 <SDMMC_GetCmdResp1+0x1d8>)
 800e5fc:	4013      	ands	r3, r2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d101      	bne.n	800e606 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e602:	2300      	movs	r3, #0
 800e604:	e08d      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	da02      	bge.n	800e612 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e60c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e610:	e087      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d001      	beq.n	800e620 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e61c:	2340      	movs	r3, #64	@ 0x40
 800e61e:	e080      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e62a:	2380      	movs	r3, #128	@ 0x80
 800e62c:	e079      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e634:	2b00      	cmp	r3, #0
 800e636:	d002      	beq.n	800e63e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e63c:	e071      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e644:	2b00      	cmp	r3, #0
 800e646:	d002      	beq.n	800e64e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e648:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e64c:	e069      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e654:	2b00      	cmp	r3, #0
 800e656:	d002      	beq.n	800e65e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e658:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e65c:	e061      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e664:	2b00      	cmp	r3, #0
 800e666:	d002      	beq.n	800e66e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e668:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e66c:	e059      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e674:	2b00      	cmp	r3, #0
 800e676:	d002      	beq.n	800e67e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e67c:	e051      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e684:	2b00      	cmp	r3, #0
 800e686:	d002      	beq.n	800e68e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e688:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e68c:	e049      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e694:	2b00      	cmp	r3, #0
 800e696:	d002      	beq.n	800e69e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e698:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e69c:	e041      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d002      	beq.n	800e6ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e6a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e6ac:	e039      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d002      	beq.n	800e6be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e6b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e6bc:	e031      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d002      	beq.n	800e6ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e6c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800e6cc:	e029      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d002      	beq.n	800e6de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e6d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e6dc:	e021      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d002      	beq.n	800e6ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e6e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e6ec:	e019      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d002      	beq.n	800e6fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e6f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e6fc:	e011      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e704:	2b00      	cmp	r3, #0
 800e706:	d002      	beq.n	800e70e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e708:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e70c:	e009      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	f003 0308 	and.w	r3, r3, #8
 800e714:	2b00      	cmp	r3, #0
 800e716:	d002      	beq.n	800e71e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e718:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800e71c:	e001      	b.n	800e722 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e71e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e722:	4618      	mov	r0, r3
 800e724:	3720      	adds	r7, #32
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	20000004 	.word	0x20000004
 800e730:	10624dd3 	.word	0x10624dd3
 800e734:	fdffe008 	.word	0xfdffe008

0800e738 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e740:	4b1f      	ldr	r3, [pc, #124]	@ (800e7c0 <SDMMC_GetCmdResp2+0x88>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a1f      	ldr	r2, [pc, #124]	@ (800e7c4 <SDMMC_GetCmdResp2+0x8c>)
 800e746:	fba2 2303 	umull	r2, r3, r2, r3
 800e74a:	0a5b      	lsrs	r3, r3, #9
 800e74c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e750:	fb02 f303 	mul.w	r3, r2, r3
 800e754:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	1e5a      	subs	r2, r3, #1
 800e75a:	60fa      	str	r2, [r7, #12]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d102      	bne.n	800e766 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e760:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e764:	e026      	b.n	800e7b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e76a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e772:	2b00      	cmp	r3, #0
 800e774:	d0ef      	beq.n	800e756 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d1ea      	bne.n	800e756 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e784:	f003 0304 	and.w	r3, r3, #4
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d004      	beq.n	800e796 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2204      	movs	r2, #4
 800e790:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e792:	2304      	movs	r3, #4
 800e794:	e00e      	b.n	800e7b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e79a:	f003 0301 	and.w	r3, r3, #1
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d004      	beq.n	800e7ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e003      	b.n	800e7b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	22c5      	movs	r2, #197	@ 0xc5
 800e7b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3714      	adds	r7, #20
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	20000004 	.word	0x20000004
 800e7c4:	10624dd3 	.word	0x10624dd3

0800e7c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b085      	sub	sp, #20
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7d0:	4b1a      	ldr	r3, [pc, #104]	@ (800e83c <SDMMC_GetCmdResp3+0x74>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4a1a      	ldr	r2, [pc, #104]	@ (800e840 <SDMMC_GetCmdResp3+0x78>)
 800e7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800e7da:	0a5b      	lsrs	r3, r3, #9
 800e7dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7e0:	fb02 f303 	mul.w	r3, r2, r3
 800e7e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	1e5a      	subs	r2, r3, #1
 800e7ea:	60fa      	str	r2, [r7, #12]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d102      	bne.n	800e7f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e7f4:	e01b      	b.n	800e82e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e802:	2b00      	cmp	r3, #0
 800e804:	d0ef      	beq.n	800e7e6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d1ea      	bne.n	800e7e6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e814:	f003 0304 	and.w	r3, r3, #4
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d004      	beq.n	800e826 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2204      	movs	r2, #4
 800e820:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e822:	2304      	movs	r3, #4
 800e824:	e003      	b.n	800e82e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	22c5      	movs	r2, #197	@ 0xc5
 800e82a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e82c:	2300      	movs	r3, #0
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	20000004 	.word	0x20000004
 800e840:	10624dd3 	.word	0x10624dd3

0800e844 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b088      	sub	sp, #32
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	460b      	mov	r3, r1
 800e84e:	607a      	str	r2, [r7, #4]
 800e850:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e852:	4b35      	ldr	r3, [pc, #212]	@ (800e928 <SDMMC_GetCmdResp6+0xe4>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a35      	ldr	r2, [pc, #212]	@ (800e92c <SDMMC_GetCmdResp6+0xe8>)
 800e858:	fba2 2303 	umull	r2, r3, r2, r3
 800e85c:	0a5b      	lsrs	r3, r3, #9
 800e85e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e862:	fb02 f303 	mul.w	r3, r2, r3
 800e866:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	1e5a      	subs	r2, r3, #1
 800e86c:	61fa      	str	r2, [r7, #28]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d102      	bne.n	800e878 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e872:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e876:	e052      	b.n	800e91e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e87c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e884:	2b00      	cmp	r3, #0
 800e886:	d0ef      	beq.n	800e868 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1ea      	bne.n	800e868 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e896:	f003 0304 	and.w	r3, r3, #4
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d004      	beq.n	800e8a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2204      	movs	r2, #4
 800e8a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8a4:	2304      	movs	r3, #4
 800e8a6:	e03a      	b.n	800e91e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8ac:	f003 0301 	and.w	r3, r3, #1
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d004      	beq.n	800e8be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e02f      	b.n	800e91e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e8be:	68f8      	ldr	r0, [r7, #12]
 800e8c0:	f7ff fbca 	bl	800e058 <SDMMC_GetCommandResponse>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	7afb      	ldrb	r3, [r7, #11]
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d001      	beq.n	800e8d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	e025      	b.n	800e91e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	22c5      	movs	r2, #197	@ 0xc5
 800e8d6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e8d8:	2100      	movs	r1, #0
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f7ff fbc9 	bl	800e072 <SDMMC_GetResponse>
 800e8e0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d106      	bne.n	800e8fa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	0c1b      	lsrs	r3, r3, #16
 800e8f0:	b29a      	uxth	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	e011      	b.n	800e91e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e900:	2b00      	cmp	r3, #0
 800e902:	d002      	beq.n	800e90a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e908:	e009      	b.n	800e91e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e910:	2b00      	cmp	r3, #0
 800e912:	d002      	beq.n	800e91a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e918:	e001      	b.n	800e91e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e91a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3720      	adds	r7, #32
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	20000004 	.word	0x20000004
 800e92c:	10624dd3 	.word	0x10624dd3

0800e930 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e930:	b480      	push	{r7}
 800e932:	b085      	sub	sp, #20
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e938:	4b22      	ldr	r3, [pc, #136]	@ (800e9c4 <SDMMC_GetCmdResp7+0x94>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4a22      	ldr	r2, [pc, #136]	@ (800e9c8 <SDMMC_GetCmdResp7+0x98>)
 800e93e:	fba2 2303 	umull	r2, r3, r2, r3
 800e942:	0a5b      	lsrs	r3, r3, #9
 800e944:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e948:	fb02 f303 	mul.w	r3, r2, r3
 800e94c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	1e5a      	subs	r2, r3, #1
 800e952:	60fa      	str	r2, [r7, #12]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d102      	bne.n	800e95e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e958:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e95c:	e02c      	b.n	800e9b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e962:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d0ef      	beq.n	800e94e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1ea      	bne.n	800e94e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e97c:	f003 0304 	and.w	r3, r3, #4
 800e980:	2b00      	cmp	r3, #0
 800e982:	d004      	beq.n	800e98e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2204      	movs	r2, #4
 800e988:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e98a:	2304      	movs	r3, #4
 800e98c:	e014      	b.n	800e9b8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e992:	f003 0301 	and.w	r3, r3, #1
 800e996:	2b00      	cmp	r3, #0
 800e998:	d004      	beq.n	800e9a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2201      	movs	r2, #1
 800e99e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	e009      	b.n	800e9b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d002      	beq.n	800e9b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2240      	movs	r2, #64	@ 0x40
 800e9b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e9b6:	2300      	movs	r3, #0
  
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3714      	adds	r7, #20
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c2:	4770      	bx	lr
 800e9c4:	20000004 	.word	0x20000004
 800e9c8:	10624dd3 	.word	0x10624dd3

0800e9cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e9d4:	4b11      	ldr	r3, [pc, #68]	@ (800ea1c <SDMMC_GetCmdError+0x50>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a11      	ldr	r2, [pc, #68]	@ (800ea20 <SDMMC_GetCmdError+0x54>)
 800e9da:	fba2 2303 	umull	r2, r3, r2, r3
 800e9de:	0a5b      	lsrs	r3, r3, #9
 800e9e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e9e4:	fb02 f303 	mul.w	r3, r2, r3
 800e9e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	1e5a      	subs	r2, r3, #1
 800e9ee:	60fa      	str	r2, [r7, #12]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e9f8:	e009      	b.n	800ea0e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0f1      	beq.n	800e9ea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	22c5      	movs	r2, #197	@ 0xc5
 800ea0a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ea0c:	2300      	movs	r3, #0
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	20000004 	.word	0x20000004
 800ea20:	10624dd3 	.word	0x10624dd3

0800ea24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ea28:	4904      	ldr	r1, [pc, #16]	@ (800ea3c <MX_FATFS_Init+0x18>)
 800ea2a:	4805      	ldr	r0, [pc, #20]	@ (800ea40 <MX_FATFS_Init+0x1c>)
 800ea2c:	f000 fa96 	bl	800ef5c <FATFS_LinkDriver>
 800ea30:	4603      	mov	r3, r0
 800ea32:	461a      	mov	r2, r3
 800ea34:	4b03      	ldr	r3, [pc, #12]	@ (800ea44 <MX_FATFS_Init+0x20>)
 800ea36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ea38:	bf00      	nop
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	20003240 	.word	0x20003240
 800ea40:	08016774 	.word	0x08016774
 800ea44:	2000323c 	.word	0x2000323c

0800ea48 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ea52:	f000 f87b 	bl	800eb4c <BSP_SD_IsDetected>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d001      	beq.n	800ea60 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	e012      	b.n	800ea86 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ea60:	480b      	ldr	r0, [pc, #44]	@ (800ea90 <BSP_SD_Init+0x48>)
 800ea62:	f7fa fd03 	bl	800946c <HAL_SD_Init>
 800ea66:	4603      	mov	r3, r0
 800ea68:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ea6a:	79fb      	ldrb	r3, [r7, #7]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d109      	bne.n	800ea84 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ea70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ea74:	4806      	ldr	r0, [pc, #24]	@ (800ea90 <BSP_SD_Init+0x48>)
 800ea76:	f7fb f94b 	bl	8009d10 <HAL_SD_ConfigWideBusOperation>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d001      	beq.n	800ea84 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ea80:	2301      	movs	r3, #1
 800ea82:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ea84:	79fb      	ldrb	r3, [r7, #7]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3708      	adds	r7, #8
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	20002ddc 	.word	0x20002ddc

0800ea94 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b086      	sub	sp, #24
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	68ba      	ldr	r2, [r7, #8]
 800eaa8:	68f9      	ldr	r1, [r7, #12]
 800eaaa:	4806      	ldr	r0, [pc, #24]	@ (800eac4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800eaac:	f7fa fd8e 	bl	80095cc <HAL_SD_ReadBlocks_DMA>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d001      	beq.n	800eaba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800eab6:	2301      	movs	r3, #1
 800eab8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3718      	adds	r7, #24
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	20002ddc 	.word	0x20002ddc

0800eac8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b086      	sub	sp, #24
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ead4:	2300      	movs	r3, #0
 800ead6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	68f9      	ldr	r1, [r7, #12]
 800eade:	4806      	ldr	r0, [pc, #24]	@ (800eaf8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800eae0:	f7fa fe56 	bl	8009790 <HAL_SD_WriteBlocks_DMA>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d001      	beq.n	800eaee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800eaea:	2301      	movs	r3, #1
 800eaec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eaee:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3718      	adds	r7, #24
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	20002ddc 	.word	0x20002ddc

0800eafc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800eb00:	4805      	ldr	r0, [pc, #20]	@ (800eb18 <BSP_SD_GetCardState+0x1c>)
 800eb02:	f7fb f99f 	bl	8009e44 <HAL_SD_GetCardState>
 800eb06:	4603      	mov	r3, r0
 800eb08:	2b04      	cmp	r3, #4
 800eb0a:	bf14      	ite	ne
 800eb0c:	2301      	movne	r3, #1
 800eb0e:	2300      	moveq	r3, #0
 800eb10:	b2db      	uxtb	r3, r3
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	20002ddc 	.word	0x20002ddc

0800eb1c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800eb24:	6879      	ldr	r1, [r7, #4]
 800eb26:	4803      	ldr	r0, [pc, #12]	@ (800eb34 <BSP_SD_GetCardInfo+0x18>)
 800eb28:	f7fb f8c6 	bl	8009cb8 <HAL_SD_GetCardInfo>
}
 800eb2c:	bf00      	nop
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	20002ddc 	.word	0x20002ddc

0800eb38 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800eb40:	f000 f9b2 	bl	800eea8 <BSP_SD_ReadCpltCallback>
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800eb52:	2301      	movs	r3, #1
 800eb54:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800eb56:	f000 f80b 	bl	800eb70 <BSP_PlatformIsDetected>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d101      	bne.n	800eb64 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800eb60:	2300      	movs	r3, #0
 800eb62:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800eb64:	79fb      	ldrb	r3, [r7, #7]
 800eb66:	b2db      	uxtb	r3, r3
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800eb76:	2301      	movs	r3, #1
 800eb78:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800eb7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800eb7e:	4806      	ldr	r0, [pc, #24]	@ (800eb98 <BSP_PlatformIsDetected+0x28>)
 800eb80:	f7f7 ff66 	bl	8006a50 <HAL_GPIO_ReadPin>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d001      	beq.n	800eb8e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	40020800 	.word	0x40020800

0800eb9c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800eba4:	f000 fa26 	bl	800eff4 <osKernelSysTick>
 800eba8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ebaa:	e006      	b.n	800ebba <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ebac:	f7ff ffa6 	bl	800eafc <BSP_SD_GetCardState>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d101      	bne.n	800ebba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	e009      	b.n	800ebce <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ebba:	f000 fa1b 	bl	800eff4 <osKernelSysTick>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	1ad3      	subs	r3, r2, r3
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d8f0      	bhi.n	800ebac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ebca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
	...

0800ebd8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	4603      	mov	r3, r0
 800ebe0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ebe2:	4b0b      	ldr	r3, [pc, #44]	@ (800ec10 <SD_CheckStatus+0x38>)
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ebe8:	f7ff ff88 	bl	800eafc <BSP_SD_GetCardState>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d107      	bne.n	800ec02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ebf2:	4b07      	ldr	r3, [pc, #28]	@ (800ec10 <SD_CheckStatus+0x38>)
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	b2db      	uxtb	r3, r3
 800ebf8:	f023 0301 	bic.w	r3, r3, #1
 800ebfc:	b2da      	uxtb	r2, r3
 800ebfe:	4b04      	ldr	r3, [pc, #16]	@ (800ec10 <SD_CheckStatus+0x38>)
 800ec00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ec02:	4b03      	ldr	r3, [pc, #12]	@ (800ec10 <SD_CheckStatus+0x38>)
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	b2db      	uxtb	r3, r3
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	2000000d 	.word	0x2000000d

0800ec14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ec14:	b590      	push	{r4, r7, lr}
 800ec16:	b087      	sub	sp, #28
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ec1e:	4b20      	ldr	r3, [pc, #128]	@ (800eca0 <SD_initialize+0x8c>)
 800ec20:	2201      	movs	r2, #1
 800ec22:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ec24:	f000 f9da 	bl	800efdc <osKernelRunning>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d030      	beq.n	800ec90 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ec2e:	f7ff ff0b 	bl	800ea48 <BSP_SD_Init>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d107      	bne.n	800ec48 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ec38:	79fb      	ldrb	r3, [r7, #7]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7ff ffcc 	bl	800ebd8 <SD_CheckStatus>
 800ec40:	4603      	mov	r3, r0
 800ec42:	461a      	mov	r2, r3
 800ec44:	4b16      	ldr	r3, [pc, #88]	@ (800eca0 <SD_initialize+0x8c>)
 800ec46:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ec48:	4b15      	ldr	r3, [pc, #84]	@ (800eca0 <SD_initialize+0x8c>)
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d01e      	beq.n	800ec90 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ec52:	4b14      	ldr	r3, [pc, #80]	@ (800eca4 <SD_initialize+0x90>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10e      	bne.n	800ec78 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ec5a:	4b13      	ldr	r3, [pc, #76]	@ (800eca8 <SD_initialize+0x94>)
 800ec5c:	f107 0408 	add.w	r4, r7, #8
 800ec60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ec66:	f107 0308 	add.w	r3, r7, #8
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f000 fa49 	bl	800f104 <osMessageCreate>
 800ec72:	4603      	mov	r3, r0
 800ec74:	4a0b      	ldr	r2, [pc, #44]	@ (800eca4 <SD_initialize+0x90>)
 800ec76:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ec78:	4b0a      	ldr	r3, [pc, #40]	@ (800eca4 <SD_initialize+0x90>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d107      	bne.n	800ec90 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ec80:	4b07      	ldr	r3, [pc, #28]	@ (800eca0 <SD_initialize+0x8c>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	f043 0301 	orr.w	r3, r3, #1
 800ec8a:	b2da      	uxtb	r2, r3
 800ec8c:	4b04      	ldr	r3, [pc, #16]	@ (800eca0 <SD_initialize+0x8c>)
 800ec8e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ec90:	4b03      	ldr	r3, [pc, #12]	@ (800eca0 <SD_initialize+0x8c>)
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	b2db      	uxtb	r3, r3
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	371c      	adds	r7, #28
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd90      	pop	{r4, r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	2000000d 	.word	0x2000000d
 800eca4:	20003244 	.word	0x20003244
 800eca8:	08016744 	.word	0x08016744

0800ecac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ecb6:	79fb      	ldrb	r3, [r7, #7]
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7ff ff8d 	bl	800ebd8 <SD_CheckStatus>
 800ecbe:	4603      	mov	r3, r0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b08a      	sub	sp, #40	@ 0x28
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60b9      	str	r1, [r7, #8]
 800ecd0:	607a      	str	r2, [r7, #4]
 800ecd2:	603b      	str	r3, [r7, #0]
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ecde:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ece2:	f7ff ff5b 	bl	800eb9c <SD_CheckStatusWithTimeout>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	da02      	bge.n	800ecf2 <SD_read+0x2a>
  {
    return res;
 800ecec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecf0:	e032      	b.n	800ed58 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ecf2:	683a      	ldr	r2, [r7, #0]
 800ecf4:	6879      	ldr	r1, [r7, #4]
 800ecf6:	68b8      	ldr	r0, [r7, #8]
 800ecf8:	f7ff fecc 	bl	800ea94 <BSP_SD_ReadBlocks_DMA>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800ed02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d124      	bne.n	800ed54 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ed0a:	4b15      	ldr	r3, [pc, #84]	@ (800ed60 <SD_read+0x98>)
 800ed0c:	6819      	ldr	r1, [r3, #0]
 800ed0e:	f107 0314 	add.w	r3, r7, #20
 800ed12:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ed16:	4618      	mov	r0, r3
 800ed18:	f000 fa5c 	bl	800f1d4 <osMessageGet>

    if (event.status == osEventMessage)
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	2b10      	cmp	r3, #16
 800ed20:	d118      	bne.n	800ed54 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d115      	bne.n	800ed54 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800ed28:	f000 f964 	bl	800eff4 <osKernelSysTick>
 800ed2c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ed2e:	e008      	b.n	800ed42 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ed30:	f7ff fee4 	bl	800eafc <BSP_SD_GetCardState>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d103      	bne.n	800ed42 <SD_read+0x7a>
              {
                res = RES_OK;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ed40:	e008      	b.n	800ed54 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ed42:	f000 f957 	bl	800eff4 <osKernelSysTick>
 800ed46:	4602      	mov	r2, r0
 800ed48:	6a3b      	ldr	r3, [r7, #32]
 800ed4a:	1ad3      	subs	r3, r2, r3
 800ed4c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d9ed      	bls.n	800ed30 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ed54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3728      	adds	r7, #40	@ 0x28
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	20003244 	.word	0x20003244

0800ed64 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b08a      	sub	sp, #40	@ 0x28
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60b9      	str	r1, [r7, #8]
 800ed6c:	607a      	str	r2, [r7, #4]
 800ed6e:	603b      	str	r3, [r7, #0]
 800ed70:	4603      	mov	r3, r0
 800ed72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ed74:	2301      	movs	r3, #1
 800ed76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ed7a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ed7e:	f7ff ff0d 	bl	800eb9c <SD_CheckStatusWithTimeout>
 800ed82:	4603      	mov	r3, r0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	da02      	bge.n	800ed8e <SD_write+0x2a>
  {
    return res;
 800ed88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed8c:	e02e      	b.n	800edec <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ed8e:	683a      	ldr	r2, [r7, #0]
 800ed90:	6879      	ldr	r1, [r7, #4]
 800ed92:	68b8      	ldr	r0, [r7, #8]
 800ed94:	f7ff fe98 	bl	800eac8 <BSP_SD_WriteBlocks_DMA>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d124      	bne.n	800ede8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ed9e:	4b15      	ldr	r3, [pc, #84]	@ (800edf4 <SD_write+0x90>)
 800eda0:	6819      	ldr	r1, [r3, #0]
 800eda2:	f107 0314 	add.w	r3, r7, #20
 800eda6:	f247 5230 	movw	r2, #30000	@ 0x7530
 800edaa:	4618      	mov	r0, r3
 800edac:	f000 fa12 	bl	800f1d4 <osMessageGet>

    if (event.status == osEventMessage)
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	2b10      	cmp	r3, #16
 800edb4:	d118      	bne.n	800ede8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	2b02      	cmp	r3, #2
 800edba:	d115      	bne.n	800ede8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800edbc:	f000 f91a 	bl	800eff4 <osKernelSysTick>
 800edc0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800edc2:	e008      	b.n	800edd6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800edc4:	f7ff fe9a 	bl	800eafc <BSP_SD_GetCardState>
 800edc8:	4603      	mov	r3, r0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d103      	bne.n	800edd6 <SD_write+0x72>
          {
            res = RES_OK;
 800edce:	2300      	movs	r3, #0
 800edd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800edd4:	e008      	b.n	800ede8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800edd6:	f000 f90d 	bl	800eff4 <osKernelSysTick>
 800edda:	4602      	mov	r2, r0
 800eddc:	6a3b      	ldr	r3, [r7, #32]
 800edde:	1ad3      	subs	r3, r2, r3
 800ede0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d9ed      	bls.n	800edc4 <SD_write+0x60>
    }

  }
#endif

  return res;
 800ede8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800edec:	4618      	mov	r0, r3
 800edee:	3728      	adds	r7, #40	@ 0x28
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	20003244 	.word	0x20003244

0800edf8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b08c      	sub	sp, #48	@ 0x30
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	4603      	mov	r3, r0
 800ee00:	603a      	str	r2, [r7, #0]
 800ee02:	71fb      	strb	r3, [r7, #7]
 800ee04:	460b      	mov	r3, r1
 800ee06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ee0e:	4b25      	ldr	r3, [pc, #148]	@ (800eea4 <SD_ioctl+0xac>)
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	f003 0301 	and.w	r3, r3, #1
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d001      	beq.n	800ee20 <SD_ioctl+0x28>
 800ee1c:	2303      	movs	r3, #3
 800ee1e:	e03c      	b.n	800ee9a <SD_ioctl+0xa2>

  switch (cmd)
 800ee20:	79bb      	ldrb	r3, [r7, #6]
 800ee22:	2b03      	cmp	r3, #3
 800ee24:	d834      	bhi.n	800ee90 <SD_ioctl+0x98>
 800ee26:	a201      	add	r2, pc, #4	@ (adr r2, 800ee2c <SD_ioctl+0x34>)
 800ee28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee2c:	0800ee3d 	.word	0x0800ee3d
 800ee30:	0800ee45 	.word	0x0800ee45
 800ee34:	0800ee5d 	.word	0x0800ee5d
 800ee38:	0800ee77 	.word	0x0800ee77
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ee42:	e028      	b.n	800ee96 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ee44:	f107 030c 	add.w	r3, r7, #12
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7ff fe67 	bl	800eb1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ee4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ee54:	2300      	movs	r3, #0
 800ee56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ee5a:	e01c      	b.n	800ee96 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ee5c:	f107 030c 	add.w	r3, r7, #12
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7ff fe5b 	bl	800eb1c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ee66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee68:	b29a      	uxth	r2, r3
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ee74:	e00f      	b.n	800ee96 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ee76:	f107 030c 	add.w	r3, r7, #12
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7ff fe4e 	bl	800eb1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ee80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee82:	0a5a      	lsrs	r2, r3, #9
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ee8e:	e002      	b.n	800ee96 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ee90:	2304      	movs	r3, #4
 800ee92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ee96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3730      	adds	r7, #48	@ 0x30
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	2000000d 	.word	0x2000000d

0800eea8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800eeac:	4b04      	ldr	r3, [pc, #16]	@ (800eec0 <BSP_SD_ReadCpltCallback+0x18>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	2101      	movs	r1, #1
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f000 f94d 	bl	800f154 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800eeba:	bf00      	nop
 800eebc:	bd80      	pop	{r7, pc}
 800eebe:	bf00      	nop
 800eec0:	20003244 	.word	0x20003244

0800eec4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b087      	sub	sp, #28
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	4613      	mov	r3, r2
 800eed0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eed2:	2301      	movs	r3, #1
 800eed4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eed6:	2300      	movs	r3, #0
 800eed8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800eeda:	4b1f      	ldr	r3, [pc, #124]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800eedc:	7a5b      	ldrb	r3, [r3, #9]
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d131      	bne.n	800ef48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eee4:	4b1c      	ldr	r3, [pc, #112]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800eee6:	7a5b      	ldrb	r3, [r3, #9]
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	461a      	mov	r2, r3
 800eeec:	4b1a      	ldr	r3, [pc, #104]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800eeee:	2100      	movs	r1, #0
 800eef0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800eef2:	4b19      	ldr	r3, [pc, #100]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800eef4:	7a5b      	ldrb	r3, [r3, #9]
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	4a17      	ldr	r2, [pc, #92]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	4413      	add	r3, r2
 800eefe:	68fa      	ldr	r2, [r7, #12]
 800ef00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ef02:	4b15      	ldr	r3, [pc, #84]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800ef04:	7a5b      	ldrb	r3, [r3, #9]
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	461a      	mov	r2, r3
 800ef0a:	4b13      	ldr	r3, [pc, #76]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800ef0c:	4413      	add	r3, r2
 800ef0e:	79fa      	ldrb	r2, [r7, #7]
 800ef10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ef12:	4b11      	ldr	r3, [pc, #68]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800ef14:	7a5b      	ldrb	r3, [r3, #9]
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	1c5a      	adds	r2, r3, #1
 800ef1a:	b2d1      	uxtb	r1, r2
 800ef1c:	4a0e      	ldr	r2, [pc, #56]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800ef1e:	7251      	strb	r1, [r2, #9]
 800ef20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ef22:	7dbb      	ldrb	r3, [r7, #22]
 800ef24:	3330      	adds	r3, #48	@ 0x30
 800ef26:	b2da      	uxtb	r2, r3
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	223a      	movs	r2, #58	@ 0x3a
 800ef32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	3302      	adds	r3, #2
 800ef38:	222f      	movs	r2, #47	@ 0x2f
 800ef3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	3303      	adds	r3, #3
 800ef40:	2200      	movs	r2, #0
 800ef42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ef44:	2300      	movs	r3, #0
 800ef46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ef48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	371c      	adds	r7, #28
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr
 800ef56:	bf00      	nop
 800ef58:	20003248 	.word	0x20003248

0800ef5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ef66:	2200      	movs	r2, #0
 800ef68:	6839      	ldr	r1, [r7, #0]
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f7ff ffaa 	bl	800eec4 <FATFS_LinkDriverEx>
 800ef70:	4603      	mov	r3, r0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3708      	adds	r7, #8
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ef7a:	b480      	push	{r7}
 800ef7c:	b085      	sub	sp, #20
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	4603      	mov	r3, r0
 800ef82:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ef84:	2300      	movs	r3, #0
 800ef86:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ef88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef8c:	2b84      	cmp	r3, #132	@ 0x84
 800ef8e:	d005      	beq.n	800ef9c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ef90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	3303      	adds	r3, #3
 800ef9a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3714      	adds	r7, #20
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr

0800efaa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800efaa:	b480      	push	{r7}
 800efac:	b083      	sub	sp, #12
 800efae:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efb0:	f3ef 8305 	mrs	r3, IPSR
 800efb4:	607b      	str	r3, [r7, #4]
  return(result);
 800efb6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800efb8:	2b00      	cmp	r3, #0
 800efba:	bf14      	ite	ne
 800efbc:	2301      	movne	r3, #1
 800efbe:	2300      	moveq	r3, #0
 800efc0:	b2db      	uxtb	r3, r3
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	370c      	adds	r7, #12
 800efc6:	46bd      	mov	sp, r7
 800efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efcc:	4770      	bx	lr

0800efce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800efd2:	f001 fbb9 	bl	8010748 <vTaskStartScheduler>
  
  return osOK;
 800efd6:	2300      	movs	r3, #0
}
 800efd8:	4618      	mov	r0, r3
 800efda:	bd80      	pop	{r7, pc}

0800efdc <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800efe0:	f002 f82e 	bl	8011040 <xTaskGetSchedulerState>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b01      	cmp	r3, #1
 800efe8:	d101      	bne.n	800efee <osKernelRunning+0x12>
    return 0;
 800efea:	2300      	movs	r3, #0
 800efec:	e000      	b.n	800eff0 <osKernelRunning+0x14>
  else
    return 1;
 800efee:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800eff8:	f7ff ffd7 	bl	800efaa <inHandlerMode>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d003      	beq.n	800f00a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f002:	f001 fccd 	bl	80109a0 <xTaskGetTickCountFromISR>
 800f006:	4603      	mov	r3, r0
 800f008:	e002      	b.n	800f010 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f00a:	f001 fcb9 	bl	8010980 <xTaskGetTickCount>
 800f00e:	4603      	mov	r3, r0
  }
}
 800f010:	4618      	mov	r0, r3
 800f012:	bd80      	pop	{r7, pc}

0800f014 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f016:	b089      	sub	sp, #36	@ 0x24
 800f018:	af04      	add	r7, sp, #16
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	695b      	ldr	r3, [r3, #20]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d020      	beq.n	800f068 <osThreadCreate+0x54>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	699b      	ldr	r3, [r3, #24]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d01c      	beq.n	800f068 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	685c      	ldr	r4, [r3, #4]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	691e      	ldr	r6, [r3, #16]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f040:	4618      	mov	r0, r3
 800f042:	f7ff ff9a 	bl	800ef7a <makeFreeRtosPriority>
 800f046:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	695b      	ldr	r3, [r3, #20]
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f050:	9202      	str	r2, [sp, #8]
 800f052:	9301      	str	r3, [sp, #4]
 800f054:	9100      	str	r1, [sp, #0]
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	4632      	mov	r2, r6
 800f05a:	4629      	mov	r1, r5
 800f05c:	4620      	mov	r0, r4
 800f05e:	f001 f979 	bl	8010354 <xTaskCreateStatic>
 800f062:	4603      	mov	r3, r0
 800f064:	60fb      	str	r3, [r7, #12]
 800f066:	e01c      	b.n	800f0a2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	685c      	ldr	r4, [r3, #4]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f074:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7ff ff7c 	bl	800ef7a <makeFreeRtosPriority>
 800f082:	4602      	mov	r2, r0
 800f084:	f107 030c 	add.w	r3, r7, #12
 800f088:	9301      	str	r3, [sp, #4]
 800f08a:	9200      	str	r2, [sp, #0]
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	4632      	mov	r2, r6
 800f090:	4629      	mov	r1, r5
 800f092:	4620      	mov	r0, r4
 800f094:	f001 f9c4 	bl	8010420 <xTaskCreate>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d001      	beq.n	800f0a2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	e000      	b.n	800f0a4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3714      	adds	r7, #20
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d001      	beq.n	800f0c2 <osDelay+0x16>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	e000      	b.n	800f0c4 <osDelay+0x18>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f001 fb07 	bl	80106d8 <vTaskDelay>
  
  return osOK;
 800f0ca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d007      	beq.n	800f0f4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	2001      	movs	r0, #1
 800f0ec:	f000 fb21 	bl	800f732 <xQueueCreateMutexStatic>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	e003      	b.n	800f0fc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f0f4:	2001      	movs	r0, #1
 800f0f6:	f000 fb04 	bl	800f702 <xQueueCreateMutex>
 800f0fa:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800f104:	b590      	push	{r4, r7, lr}
 800f106:	b085      	sub	sp, #20
 800f108:	af02      	add	r7, sp, #8
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d011      	beq.n	800f13a <osMessageCreate+0x36>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	68db      	ldr	r3, [r3, #12]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00d      	beq.n	800f13a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6818      	ldr	r0, [r3, #0]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6859      	ldr	r1, [r3, #4]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	689a      	ldr	r2, [r3, #8]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	2400      	movs	r4, #0
 800f130:	9400      	str	r4, [sp, #0]
 800f132:	f000 f9e3 	bl	800f4fc <xQueueGenericCreateStatic>
 800f136:	4603      	mov	r3, r0
 800f138:	e008      	b.n	800f14c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6818      	ldr	r0, [r3, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	2200      	movs	r2, #0
 800f144:	4619      	mov	r1, r3
 800f146:	f000 fa60 	bl	800f60a <xQueueGenericCreate>
 800f14a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	370c      	adds	r7, #12
 800f150:	46bd      	mov	sp, r7
 800f152:	bd90      	pop	{r4, r7, pc}

0800f154 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b086      	sub	sp, #24
 800f158:	af00      	add	r7, sp, #0
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800f160:	2300      	movs	r3, #0
 800f162:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d101      	bne.n	800f172 <osMessagePut+0x1e>
    ticks = 1;
 800f16e:	2301      	movs	r3, #1
 800f170:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800f172:	f7ff ff1a 	bl	800efaa <inHandlerMode>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d018      	beq.n	800f1ae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800f17c:	f107 0210 	add.w	r2, r7, #16
 800f180:	f107 0108 	add.w	r1, r7, #8
 800f184:	2300      	movs	r3, #0
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f000 fbf8 	bl	800f97c <xQueueGenericSendFromISR>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b01      	cmp	r3, #1
 800f190:	d001      	beq.n	800f196 <osMessagePut+0x42>
      return osErrorOS;
 800f192:	23ff      	movs	r3, #255	@ 0xff
 800f194:	e018      	b.n	800f1c8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d014      	beq.n	800f1c6 <osMessagePut+0x72>
 800f19c:	4b0c      	ldr	r3, [pc, #48]	@ (800f1d0 <osMessagePut+0x7c>)
 800f19e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1a2:	601a      	str	r2, [r3, #0]
 800f1a4:	f3bf 8f4f 	dsb	sy
 800f1a8:	f3bf 8f6f 	isb	sy
 800f1ac:	e00b      	b.n	800f1c6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800f1ae:	f107 0108 	add.w	r1, r7, #8
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	697a      	ldr	r2, [r7, #20]
 800f1b6:	68f8      	ldr	r0, [r7, #12]
 800f1b8:	f000 fad6 	bl	800f768 <xQueueGenericSend>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d001      	beq.n	800f1c6 <osMessagePut+0x72>
      return osErrorOS;
 800f1c2:	23ff      	movs	r3, #255	@ 0xff
 800f1c4:	e000      	b.n	800f1c8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800f1c6:	2300      	movs	r3, #0
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3718      	adds	r7, #24
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	e000ed04 	.word	0xe000ed04

0800f1d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800f1d4:	b590      	push	{r4, r7, lr}
 800f1d6:	b08b      	sub	sp, #44	@ 0x2c
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	60f8      	str	r0, [r7, #12]
 800f1dc:	60b9      	str	r1, [r7, #8]
 800f1de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d10a      	bne.n	800f204 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800f1ee:	2380      	movs	r3, #128	@ 0x80
 800f1f0:	617b      	str	r3, [r7, #20]
    return event;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	461c      	mov	r4, r3
 800f1f6:	f107 0314 	add.w	r3, r7, #20
 800f1fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f1fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f202:	e054      	b.n	800f2ae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800f204:	2300      	movs	r3, #0
 800f206:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800f208:	2300      	movs	r3, #0
 800f20a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f212:	d103      	bne.n	800f21c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800f214:	f04f 33ff 	mov.w	r3, #4294967295
 800f218:	627b      	str	r3, [r7, #36]	@ 0x24
 800f21a:	e009      	b.n	800f230 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d006      	beq.n	800f230 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800f226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d101      	bne.n	800f230 <osMessageGet+0x5c>
      ticks = 1;
 800f22c:	2301      	movs	r3, #1
 800f22e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800f230:	f7ff febb 	bl	800efaa <inHandlerMode>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d01c      	beq.n	800f274 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800f23a:	f107 0220 	add.w	r2, r7, #32
 800f23e:	f107 0314 	add.w	r3, r7, #20
 800f242:	3304      	adds	r3, #4
 800f244:	4619      	mov	r1, r3
 800f246:	68b8      	ldr	r0, [r7, #8]
 800f248:	f000 fed4 	bl	800fff4 <xQueueReceiveFromISR>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d102      	bne.n	800f258 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800f252:	2310      	movs	r3, #16
 800f254:	617b      	str	r3, [r7, #20]
 800f256:	e001      	b.n	800f25c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800f258:	2300      	movs	r3, #0
 800f25a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f25c:	6a3b      	ldr	r3, [r7, #32]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d01d      	beq.n	800f29e <osMessageGet+0xca>
 800f262:	4b15      	ldr	r3, [pc, #84]	@ (800f2b8 <osMessageGet+0xe4>)
 800f264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f268:	601a      	str	r2, [r3, #0]
 800f26a:	f3bf 8f4f 	dsb	sy
 800f26e:	f3bf 8f6f 	isb	sy
 800f272:	e014      	b.n	800f29e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800f274:	f107 0314 	add.w	r3, r7, #20
 800f278:	3304      	adds	r3, #4
 800f27a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f27c:	4619      	mov	r1, r3
 800f27e:	68b8      	ldr	r0, [r7, #8]
 800f280:	f000 fcb8 	bl	800fbf4 <xQueueReceive>
 800f284:	4603      	mov	r3, r0
 800f286:	2b01      	cmp	r3, #1
 800f288:	d102      	bne.n	800f290 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800f28a:	2310      	movs	r3, #16
 800f28c:	617b      	str	r3, [r7, #20]
 800f28e:	e006      	b.n	800f29e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800f290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f292:	2b00      	cmp	r3, #0
 800f294:	d101      	bne.n	800f29a <osMessageGet+0xc6>
 800f296:	2300      	movs	r3, #0
 800f298:	e000      	b.n	800f29c <osMessageGet+0xc8>
 800f29a:	2340      	movs	r3, #64	@ 0x40
 800f29c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	461c      	mov	r4, r3
 800f2a2:	f107 0314 	add.w	r3, r7, #20
 800f2a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f2aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	372c      	adds	r7, #44	@ 0x2c
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd90      	pop	{r4, r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	e000ed04 	.word	0xe000ed04

0800f2bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f103 0208 	add.w	r2, r3, #8
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f103 0208 	add.w	r2, r3, #8
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f103 0208 	add.w	r2, r3, #8
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f30a:	bf00      	nop
 800f30c:	370c      	adds	r7, #12
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr

0800f316 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f316:	b480      	push	{r7}
 800f318:	b085      	sub	sp, #20
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	6078      	str	r0, [r7, #4]
 800f31e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	685b      	ldr	r3, [r3, #4]
 800f324:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	689a      	ldr	r2, [r3, #8]
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	683a      	ldr	r2, [r7, #0]
 800f33a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	1c5a      	adds	r2, r3, #1
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	601a      	str	r2, [r3, #0]
}
 800f352:	bf00      	nop
 800f354:	3714      	adds	r7, #20
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr

0800f35e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f35e:	b480      	push	{r7}
 800f360:	b085      	sub	sp, #20
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
 800f366:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f374:	d103      	bne.n	800f37e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	691b      	ldr	r3, [r3, #16]
 800f37a:	60fb      	str	r3, [r7, #12]
 800f37c:	e00c      	b.n	800f398 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	3308      	adds	r3, #8
 800f382:	60fb      	str	r3, [r7, #12]
 800f384:	e002      	b.n	800f38c <vListInsert+0x2e>
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	60fb      	str	r3, [r7, #12]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	68ba      	ldr	r2, [r7, #8]
 800f394:	429a      	cmp	r2, r3
 800f396:	d2f6      	bcs.n	800f386 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	685a      	ldr	r2, [r3, #4]
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	683a      	ldr	r2, [r7, #0]
 800f3a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	683a      	ldr	r2, [r7, #0]
 800f3b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	1c5a      	adds	r2, r3, #1
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	601a      	str	r2, [r3, #0]
}
 800f3c4:	bf00      	nop
 800f3c6:	3714      	adds	r7, #20
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b085      	sub	sp, #20
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	691b      	ldr	r3, [r3, #16]
 800f3dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	685b      	ldr	r3, [r3, #4]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	6892      	ldr	r2, [r2, #8]
 800f3e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	6852      	ldr	r2, [r2, #4]
 800f3f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d103      	bne.n	800f404 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	689a      	ldr	r2, [r3, #8]
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	1e5a      	subs	r2, r3, #1
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3714      	adds	r7, #20
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d10d      	bne.n	800f454 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f43c:	b672      	cpsid	i
 800f43e:	f383 8811 	msr	BASEPRI, r3
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	f3bf 8f4f 	dsb	sy
 800f44a:	b662      	cpsie	i
 800f44c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f44e:	bf00      	nop
 800f450:	bf00      	nop
 800f452:	e7fd      	b.n	800f450 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f454:	f002 f94a 	bl	80116ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f460:	68f9      	ldr	r1, [r7, #12]
 800f462:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f464:	fb01 f303 	mul.w	r3, r1, r3
 800f468:	441a      	add	r2, r3
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2200      	movs	r2, #0
 800f472:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f484:	3b01      	subs	r3, #1
 800f486:	68f9      	ldr	r1, [r7, #12]
 800f488:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f48a:	fb01 f303 	mul.w	r3, r1, r3
 800f48e:	441a      	add	r2, r3
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	22ff      	movs	r2, #255	@ 0xff
 800f498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	22ff      	movs	r2, #255	@ 0xff
 800f4a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d114      	bne.n	800f4d4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	691b      	ldr	r3, [r3, #16]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d01a      	beq.n	800f4e8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	3310      	adds	r3, #16
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f001 fbf2 	bl	8010ca0 <xTaskRemoveFromEventList>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d012      	beq.n	800f4e8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f4f8 <xQueueGenericReset+0xd4>)
 800f4c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4c8:	601a      	str	r2, [r3, #0]
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	f3bf 8f6f 	isb	sy
 800f4d2:	e009      	b.n	800f4e8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	3310      	adds	r3, #16
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7ff feef 	bl	800f2bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	3324      	adds	r3, #36	@ 0x24
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7ff feea 	bl	800f2bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f4e8:	f002 f936 	bl	8011758 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f4ec:	2301      	movs	r3, #1
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3710      	adds	r7, #16
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	e000ed04 	.word	0xe000ed04

0800f4fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b08e      	sub	sp, #56	@ 0x38
 800f500:	af02      	add	r7, sp, #8
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d10d      	bne.n	800f52c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800f510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f514:	b672      	cpsid	i
 800f516:	f383 8811 	msr	BASEPRI, r3
 800f51a:	f3bf 8f6f 	isb	sy
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	b662      	cpsie	i
 800f524:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f526:	bf00      	nop
 800f528:	bf00      	nop
 800f52a:	e7fd      	b.n	800f528 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d10d      	bne.n	800f54e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800f532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f536:	b672      	cpsid	i
 800f538:	f383 8811 	msr	BASEPRI, r3
 800f53c:	f3bf 8f6f 	isb	sy
 800f540:	f3bf 8f4f 	dsb	sy
 800f544:	b662      	cpsie	i
 800f546:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f548:	bf00      	nop
 800f54a:	bf00      	nop
 800f54c:	e7fd      	b.n	800f54a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d002      	beq.n	800f55a <xQueueGenericCreateStatic+0x5e>
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d001      	beq.n	800f55e <xQueueGenericCreateStatic+0x62>
 800f55a:	2301      	movs	r3, #1
 800f55c:	e000      	b.n	800f560 <xQueueGenericCreateStatic+0x64>
 800f55e:	2300      	movs	r3, #0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d10d      	bne.n	800f580 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800f564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f568:	b672      	cpsid	i
 800f56a:	f383 8811 	msr	BASEPRI, r3
 800f56e:	f3bf 8f6f 	isb	sy
 800f572:	f3bf 8f4f 	dsb	sy
 800f576:	b662      	cpsie	i
 800f578:	623b      	str	r3, [r7, #32]
}
 800f57a:	bf00      	nop
 800f57c:	bf00      	nop
 800f57e:	e7fd      	b.n	800f57c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d102      	bne.n	800f58c <xQueueGenericCreateStatic+0x90>
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d101      	bne.n	800f590 <xQueueGenericCreateStatic+0x94>
 800f58c:	2301      	movs	r3, #1
 800f58e:	e000      	b.n	800f592 <xQueueGenericCreateStatic+0x96>
 800f590:	2300      	movs	r3, #0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d10d      	bne.n	800f5b2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800f596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f59a:	b672      	cpsid	i
 800f59c:	f383 8811 	msr	BASEPRI, r3
 800f5a0:	f3bf 8f6f 	isb	sy
 800f5a4:	f3bf 8f4f 	dsb	sy
 800f5a8:	b662      	cpsie	i
 800f5aa:	61fb      	str	r3, [r7, #28]
}
 800f5ac:	bf00      	nop
 800f5ae:	bf00      	nop
 800f5b0:	e7fd      	b.n	800f5ae <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f5b2:	2348      	movs	r3, #72	@ 0x48
 800f5b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	2b48      	cmp	r3, #72	@ 0x48
 800f5ba:	d00d      	beq.n	800f5d8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800f5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5c0:	b672      	cpsid	i
 800f5c2:	f383 8811 	msr	BASEPRI, r3
 800f5c6:	f3bf 8f6f 	isb	sy
 800f5ca:	f3bf 8f4f 	dsb	sy
 800f5ce:	b662      	cpsie	i
 800f5d0:	61bb      	str	r3, [r7, #24]
}
 800f5d2:	bf00      	nop
 800f5d4:	bf00      	nop
 800f5d6:	e7fd      	b.n	800f5d4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f5d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d00d      	beq.n	800f600 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f5ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f2:	9300      	str	r3, [sp, #0]
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	68b9      	ldr	r1, [r7, #8]
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f000 f848 	bl	800f690 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f602:	4618      	mov	r0, r3
 800f604:	3730      	adds	r7, #48	@ 0x30
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b08a      	sub	sp, #40	@ 0x28
 800f60e:	af02      	add	r7, sp, #8
 800f610:	60f8      	str	r0, [r7, #12]
 800f612:	60b9      	str	r1, [r7, #8]
 800f614:	4613      	mov	r3, r2
 800f616:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d10d      	bne.n	800f63a <xQueueGenericCreate+0x30>
	__asm volatile
 800f61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f622:	b672      	cpsid	i
 800f624:	f383 8811 	msr	BASEPRI, r3
 800f628:	f3bf 8f6f 	isb	sy
 800f62c:	f3bf 8f4f 	dsb	sy
 800f630:	b662      	cpsie	i
 800f632:	613b      	str	r3, [r7, #16]
}
 800f634:	bf00      	nop
 800f636:	bf00      	nop
 800f638:	e7fd      	b.n	800f636 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d102      	bne.n	800f646 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f640:	2300      	movs	r3, #0
 800f642:	61fb      	str	r3, [r7, #28]
 800f644:	e004      	b.n	800f650 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	68ba      	ldr	r2, [r7, #8]
 800f64a:	fb02 f303 	mul.w	r3, r2, r3
 800f64e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	3348      	adds	r3, #72	@ 0x48
 800f654:	4618      	mov	r0, r3
 800f656:	f002 f977 	bl	8011948 <pvPortMalloc>
 800f65a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d011      	beq.n	800f686 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	3348      	adds	r3, #72	@ 0x48
 800f66a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f674:	79fa      	ldrb	r2, [r7, #7]
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	9300      	str	r3, [sp, #0]
 800f67a:	4613      	mov	r3, r2
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	68b9      	ldr	r1, [r7, #8]
 800f680:	68f8      	ldr	r0, [r7, #12]
 800f682:	f000 f805 	bl	800f690 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f686:	69bb      	ldr	r3, [r7, #24]
	}
 800f688:	4618      	mov	r0, r3
 800f68a:	3720      	adds	r7, #32
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
 800f69c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d103      	bne.n	800f6ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	69ba      	ldr	r2, [r7, #24]
 800f6a8:	601a      	str	r2, [r3, #0]
 800f6aa:	e002      	b.n	800f6b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f6ac:	69bb      	ldr	r3, [r7, #24]
 800f6ae:	687a      	ldr	r2, [r7, #4]
 800f6b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	68fa      	ldr	r2, [r7, #12]
 800f6b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	68ba      	ldr	r2, [r7, #8]
 800f6bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f6be:	2101      	movs	r1, #1
 800f6c0:	69b8      	ldr	r0, [r7, #24]
 800f6c2:	f7ff feaf 	bl	800f424 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f6c6:	bf00      	nop
 800f6c8:	3710      	adds	r7, #16
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f6ce:	b580      	push	{r7, lr}
 800f6d0:	b082      	sub	sp, #8
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d00e      	beq.n	800f6fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	2100      	movs	r1, #0
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 f837 	bl	800f768 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f6fa:	bf00      	nop
 800f6fc:	3708      	adds	r7, #8
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}

0800f702 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f702:	b580      	push	{r7, lr}
 800f704:	b086      	sub	sp, #24
 800f706:	af00      	add	r7, sp, #0
 800f708:	4603      	mov	r3, r0
 800f70a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f70c:	2301      	movs	r3, #1
 800f70e:	617b      	str	r3, [r7, #20]
 800f710:	2300      	movs	r3, #0
 800f712:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f714:	79fb      	ldrb	r3, [r7, #7]
 800f716:	461a      	mov	r2, r3
 800f718:	6939      	ldr	r1, [r7, #16]
 800f71a:	6978      	ldr	r0, [r7, #20]
 800f71c:	f7ff ff75 	bl	800f60a <xQueueGenericCreate>
 800f720:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f722:	68f8      	ldr	r0, [r7, #12]
 800f724:	f7ff ffd3 	bl	800f6ce <prvInitialiseMutex>

		return xNewQueue;
 800f728:	68fb      	ldr	r3, [r7, #12]
	}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3718      	adds	r7, #24
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}

0800f732 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f732:	b580      	push	{r7, lr}
 800f734:	b088      	sub	sp, #32
 800f736:	af02      	add	r7, sp, #8
 800f738:	4603      	mov	r3, r0
 800f73a:	6039      	str	r1, [r7, #0]
 800f73c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f73e:	2301      	movs	r3, #1
 800f740:	617b      	str	r3, [r7, #20]
 800f742:	2300      	movs	r3, #0
 800f744:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f746:	79fb      	ldrb	r3, [r7, #7]
 800f748:	9300      	str	r3, [sp, #0]
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	2200      	movs	r2, #0
 800f74e:	6939      	ldr	r1, [r7, #16]
 800f750:	6978      	ldr	r0, [r7, #20]
 800f752:	f7ff fed3 	bl	800f4fc <xQueueGenericCreateStatic>
 800f756:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f7ff ffb8 	bl	800f6ce <prvInitialiseMutex>

		return xNewQueue;
 800f75e:	68fb      	ldr	r3, [r7, #12]
	}
 800f760:	4618      	mov	r0, r3
 800f762:	3718      	adds	r7, #24
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b08e      	sub	sp, #56	@ 0x38
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
 800f774:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f776:	2300      	movs	r3, #0
 800f778:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f780:	2b00      	cmp	r3, #0
 800f782:	d10d      	bne.n	800f7a0 <xQueueGenericSend+0x38>
	__asm volatile
 800f784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f788:	b672      	cpsid	i
 800f78a:	f383 8811 	msr	BASEPRI, r3
 800f78e:	f3bf 8f6f 	isb	sy
 800f792:	f3bf 8f4f 	dsb	sy
 800f796:	b662      	cpsie	i
 800f798:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f79a:	bf00      	nop
 800f79c:	bf00      	nop
 800f79e:	e7fd      	b.n	800f79c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d103      	bne.n	800f7ae <xQueueGenericSend+0x46>
 800f7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d101      	bne.n	800f7b2 <xQueueGenericSend+0x4a>
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	e000      	b.n	800f7b4 <xQueueGenericSend+0x4c>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d10d      	bne.n	800f7d4 <xQueueGenericSend+0x6c>
	__asm volatile
 800f7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7bc:	b672      	cpsid	i
 800f7be:	f383 8811 	msr	BASEPRI, r3
 800f7c2:	f3bf 8f6f 	isb	sy
 800f7c6:	f3bf 8f4f 	dsb	sy
 800f7ca:	b662      	cpsie	i
 800f7cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f7ce:	bf00      	nop
 800f7d0:	bf00      	nop
 800f7d2:	e7fd      	b.n	800f7d0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	d103      	bne.n	800f7e2 <xQueueGenericSend+0x7a>
 800f7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d101      	bne.n	800f7e6 <xQueueGenericSend+0x7e>
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e000      	b.n	800f7e8 <xQueueGenericSend+0x80>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d10d      	bne.n	800f808 <xQueueGenericSend+0xa0>
	__asm volatile
 800f7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7f0:	b672      	cpsid	i
 800f7f2:	f383 8811 	msr	BASEPRI, r3
 800f7f6:	f3bf 8f6f 	isb	sy
 800f7fa:	f3bf 8f4f 	dsb	sy
 800f7fe:	b662      	cpsie	i
 800f800:	623b      	str	r3, [r7, #32]
}
 800f802:	bf00      	nop
 800f804:	bf00      	nop
 800f806:	e7fd      	b.n	800f804 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f808:	f001 fc1a 	bl	8011040 <xTaskGetSchedulerState>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d102      	bne.n	800f818 <xQueueGenericSend+0xb0>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d101      	bne.n	800f81c <xQueueGenericSend+0xb4>
 800f818:	2301      	movs	r3, #1
 800f81a:	e000      	b.n	800f81e <xQueueGenericSend+0xb6>
 800f81c:	2300      	movs	r3, #0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d10d      	bne.n	800f83e <xQueueGenericSend+0xd6>
	__asm volatile
 800f822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f826:	b672      	cpsid	i
 800f828:	f383 8811 	msr	BASEPRI, r3
 800f82c:	f3bf 8f6f 	isb	sy
 800f830:	f3bf 8f4f 	dsb	sy
 800f834:	b662      	cpsie	i
 800f836:	61fb      	str	r3, [r7, #28]
}
 800f838:	bf00      	nop
 800f83a:	bf00      	nop
 800f83c:	e7fd      	b.n	800f83a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f83e:	f001 ff55 	bl	80116ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d302      	bcc.n	800f854 <xQueueGenericSend+0xec>
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	2b02      	cmp	r3, #2
 800f852:	d129      	bne.n	800f8a8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f854:	683a      	ldr	r2, [r7, #0]
 800f856:	68b9      	ldr	r1, [r7, #8]
 800f858:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f85a:	f000 fc6b 	bl	8010134 <prvCopyDataToQueue>
 800f85e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f864:	2b00      	cmp	r3, #0
 800f866:	d010      	beq.n	800f88a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f86a:	3324      	adds	r3, #36	@ 0x24
 800f86c:	4618      	mov	r0, r3
 800f86e:	f001 fa17 	bl	8010ca0 <xTaskRemoveFromEventList>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d013      	beq.n	800f8a0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f878:	4b3f      	ldr	r3, [pc, #252]	@ (800f978 <xQueueGenericSend+0x210>)
 800f87a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f87e:	601a      	str	r2, [r3, #0]
 800f880:	f3bf 8f4f 	dsb	sy
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	e00a      	b.n	800f8a0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d007      	beq.n	800f8a0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f890:	4b39      	ldr	r3, [pc, #228]	@ (800f978 <xQueueGenericSend+0x210>)
 800f892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f896:	601a      	str	r2, [r3, #0]
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f8a0:	f001 ff5a 	bl	8011758 <vPortExitCritical>
				return pdPASS;
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	e063      	b.n	800f970 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d103      	bne.n	800f8b6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f8ae:	f001 ff53 	bl	8011758 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	e05c      	b.n	800f970 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d106      	bne.n	800f8ca <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f8bc:	f107 0314 	add.w	r3, r7, #20
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f001 fa53 	bl	8010d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f8ca:	f001 ff45 	bl	8011758 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f8ce:	f000 ffa9 	bl	8010824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f8d2:	f001 ff0b 	bl	80116ec <vPortEnterCritical>
 800f8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f8dc:	b25b      	sxtb	r3, r3
 800f8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8e2:	d103      	bne.n	800f8ec <xQueueGenericSend+0x184>
 800f8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f8f2:	b25b      	sxtb	r3, r3
 800f8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f8:	d103      	bne.n	800f902 <xQueueGenericSend+0x19a>
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f902:	f001 ff29 	bl	8011758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f906:	1d3a      	adds	r2, r7, #4
 800f908:	f107 0314 	add.w	r3, r7, #20
 800f90c:	4611      	mov	r1, r2
 800f90e:	4618      	mov	r0, r3
 800f910:	f001 fa42 	bl	8010d98 <xTaskCheckForTimeOut>
 800f914:	4603      	mov	r3, r0
 800f916:	2b00      	cmp	r3, #0
 800f918:	d124      	bne.n	800f964 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f91a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f91c:	f000 fd02 	bl	8010324 <prvIsQueueFull>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d018      	beq.n	800f958 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f928:	3310      	adds	r3, #16
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	4611      	mov	r1, r2
 800f92e:	4618      	mov	r0, r3
 800f930:	f001 f98e 	bl	8010c50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f934:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f936:	f000 fc8d 	bl	8010254 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f93a:	f000 ff81 	bl	8010840 <xTaskResumeAll>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b00      	cmp	r3, #0
 800f942:	f47f af7c 	bne.w	800f83e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800f946:	4b0c      	ldr	r3, [pc, #48]	@ (800f978 <xQueueGenericSend+0x210>)
 800f948:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	f3bf 8f4f 	dsb	sy
 800f952:	f3bf 8f6f 	isb	sy
 800f956:	e772      	b.n	800f83e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f958:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f95a:	f000 fc7b 	bl	8010254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f95e:	f000 ff6f 	bl	8010840 <xTaskResumeAll>
 800f962:	e76c      	b.n	800f83e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f966:	f000 fc75 	bl	8010254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f96a:	f000 ff69 	bl	8010840 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f96e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f970:	4618      	mov	r0, r3
 800f972:	3738      	adds	r7, #56	@ 0x38
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}
 800f978:	e000ed04 	.word	0xe000ed04

0800f97c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b08e      	sub	sp, #56	@ 0x38
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
 800f988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f990:	2b00      	cmp	r3, #0
 800f992:	d10d      	bne.n	800f9b0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800f994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f998:	b672      	cpsid	i
 800f99a:	f383 8811 	msr	BASEPRI, r3
 800f99e:	f3bf 8f6f 	isb	sy
 800f9a2:	f3bf 8f4f 	dsb	sy
 800f9a6:	b662      	cpsie	i
 800f9a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f9aa:	bf00      	nop
 800f9ac:	bf00      	nop
 800f9ae:	e7fd      	b.n	800f9ac <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d103      	bne.n	800f9be <xQueueGenericSendFromISR+0x42>
 800f9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d101      	bne.n	800f9c2 <xQueueGenericSendFromISR+0x46>
 800f9be:	2301      	movs	r3, #1
 800f9c0:	e000      	b.n	800f9c4 <xQueueGenericSendFromISR+0x48>
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d10d      	bne.n	800f9e4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800f9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9cc:	b672      	cpsid	i
 800f9ce:	f383 8811 	msr	BASEPRI, r3
 800f9d2:	f3bf 8f6f 	isb	sy
 800f9d6:	f3bf 8f4f 	dsb	sy
 800f9da:	b662      	cpsie	i
 800f9dc:	623b      	str	r3, [r7, #32]
}
 800f9de:	bf00      	nop
 800f9e0:	bf00      	nop
 800f9e2:	e7fd      	b.n	800f9e0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	2b02      	cmp	r3, #2
 800f9e8:	d103      	bne.n	800f9f2 <xQueueGenericSendFromISR+0x76>
 800f9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9ee:	2b01      	cmp	r3, #1
 800f9f0:	d101      	bne.n	800f9f6 <xQueueGenericSendFromISR+0x7a>
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	e000      	b.n	800f9f8 <xQueueGenericSendFromISR+0x7c>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d10d      	bne.n	800fa18 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800f9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa00:	b672      	cpsid	i
 800fa02:	f383 8811 	msr	BASEPRI, r3
 800fa06:	f3bf 8f6f 	isb	sy
 800fa0a:	f3bf 8f4f 	dsb	sy
 800fa0e:	b662      	cpsie	i
 800fa10:	61fb      	str	r3, [r7, #28]
}
 800fa12:	bf00      	nop
 800fa14:	bf00      	nop
 800fa16:	e7fd      	b.n	800fa14 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa18:	f001 ff50 	bl	80118bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fa1c:	f3ef 8211 	mrs	r2, BASEPRI
 800fa20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa24:	b672      	cpsid	i
 800fa26:	f383 8811 	msr	BASEPRI, r3
 800fa2a:	f3bf 8f6f 	isb	sy
 800fa2e:	f3bf 8f4f 	dsb	sy
 800fa32:	b662      	cpsie	i
 800fa34:	61ba      	str	r2, [r7, #24]
 800fa36:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fa38:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d302      	bcc.n	800fa4e <xQueueGenericSendFromISR+0xd2>
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	2b02      	cmp	r3, #2
 800fa4c:	d12c      	bne.n	800faa8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fa54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fa58:	683a      	ldr	r2, [r7, #0]
 800fa5a:	68b9      	ldr	r1, [r7, #8]
 800fa5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa5e:	f000 fb69 	bl	8010134 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fa62:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800fa66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa6a:	d112      	bne.n	800fa92 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d016      	beq.n	800faa2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa76:	3324      	adds	r3, #36	@ 0x24
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f001 f911 	bl	8010ca0 <xTaskRemoveFromEventList>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00e      	beq.n	800faa2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d00b      	beq.n	800faa2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	601a      	str	r2, [r3, #0]
 800fa90:	e007      	b.n	800faa2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fa92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fa96:	3301      	adds	r3, #1
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	b25a      	sxtb	r2, r3
 800fa9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800faa2:	2301      	movs	r3, #1
 800faa4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800faa6:	e001      	b.n	800faac <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800faa8:	2300      	movs	r3, #0
 800faaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800faac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fab6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3738      	adds	r7, #56	@ 0x38
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b08e      	sub	sp, #56	@ 0x38
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
 800faca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d10d      	bne.n	800faf2 <xQueueGiveFromISR+0x30>
	__asm volatile
 800fad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fada:	b672      	cpsid	i
 800fadc:	f383 8811 	msr	BASEPRI, r3
 800fae0:	f3bf 8f6f 	isb	sy
 800fae4:	f3bf 8f4f 	dsb	sy
 800fae8:	b662      	cpsie	i
 800faea:	623b      	str	r3, [r7, #32]
}
 800faec:	bf00      	nop
 800faee:	bf00      	nop
 800faf0:	e7fd      	b.n	800faee <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800faf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d00d      	beq.n	800fb16 <xQueueGiveFromISR+0x54>
	__asm volatile
 800fafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fafe:	b672      	cpsid	i
 800fb00:	f383 8811 	msr	BASEPRI, r3
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	b662      	cpsie	i
 800fb0e:	61fb      	str	r3, [r7, #28]
}
 800fb10:	bf00      	nop
 800fb12:	bf00      	nop
 800fb14:	e7fd      	b.n	800fb12 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d103      	bne.n	800fb26 <xQueueGiveFromISR+0x64>
 800fb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb20:	689b      	ldr	r3, [r3, #8]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d101      	bne.n	800fb2a <xQueueGiveFromISR+0x68>
 800fb26:	2301      	movs	r3, #1
 800fb28:	e000      	b.n	800fb2c <xQueueGiveFromISR+0x6a>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d10d      	bne.n	800fb4c <xQueueGiveFromISR+0x8a>
	__asm volatile
 800fb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb34:	b672      	cpsid	i
 800fb36:	f383 8811 	msr	BASEPRI, r3
 800fb3a:	f3bf 8f6f 	isb	sy
 800fb3e:	f3bf 8f4f 	dsb	sy
 800fb42:	b662      	cpsie	i
 800fb44:	61bb      	str	r3, [r7, #24]
}
 800fb46:	bf00      	nop
 800fb48:	bf00      	nop
 800fb4a:	e7fd      	b.n	800fb48 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb4c:	f001 feb6 	bl	80118bc <vPortValidateInterruptPriority>
	__asm volatile
 800fb50:	f3ef 8211 	mrs	r2, BASEPRI
 800fb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb58:	b672      	cpsid	i
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	b662      	cpsie	i
 800fb68:	617a      	str	r2, [r7, #20]
 800fb6a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fb6c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb74:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d22b      	bcs.n	800fbd8 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb8c:	1c5a      	adds	r2, r3, #1
 800fb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb90:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fb92:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb9a:	d112      	bne.n	800fbc2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d016      	beq.n	800fbd2 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba6:	3324      	adds	r3, #36	@ 0x24
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f001 f879 	bl	8010ca0 <xTaskRemoveFromEventList>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d00e      	beq.n	800fbd2 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d00b      	beq.n	800fbd2 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	601a      	str	r2, [r3, #0]
 800fbc0:	e007      	b.n	800fbd2 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fbc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	b25a      	sxtb	r2, r3
 800fbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800fbd6:	e001      	b.n	800fbdc <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	637b      	str	r3, [r7, #52]	@ 0x34
 800fbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbde:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f383 8811 	msr	BASEPRI, r3
}
 800fbe6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fbe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3738      	adds	r7, #56	@ 0x38
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
	...

0800fbf4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b08c      	sub	sp, #48	@ 0x30
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc00:	2300      	movs	r3, #0
 800fc02:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d10d      	bne.n	800fc2a <xQueueReceive+0x36>
	__asm volatile
 800fc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc12:	b672      	cpsid	i
 800fc14:	f383 8811 	msr	BASEPRI, r3
 800fc18:	f3bf 8f6f 	isb	sy
 800fc1c:	f3bf 8f4f 	dsb	sy
 800fc20:	b662      	cpsie	i
 800fc22:	623b      	str	r3, [r7, #32]
}
 800fc24:	bf00      	nop
 800fc26:	bf00      	nop
 800fc28:	e7fd      	b.n	800fc26 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d103      	bne.n	800fc38 <xQueueReceive+0x44>
 800fc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d101      	bne.n	800fc3c <xQueueReceive+0x48>
 800fc38:	2301      	movs	r3, #1
 800fc3a:	e000      	b.n	800fc3e <xQueueReceive+0x4a>
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d10d      	bne.n	800fc5e <xQueueReceive+0x6a>
	__asm volatile
 800fc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc46:	b672      	cpsid	i
 800fc48:	f383 8811 	msr	BASEPRI, r3
 800fc4c:	f3bf 8f6f 	isb	sy
 800fc50:	f3bf 8f4f 	dsb	sy
 800fc54:	b662      	cpsie	i
 800fc56:	61fb      	str	r3, [r7, #28]
}
 800fc58:	bf00      	nop
 800fc5a:	bf00      	nop
 800fc5c:	e7fd      	b.n	800fc5a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc5e:	f001 f9ef 	bl	8011040 <xTaskGetSchedulerState>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d102      	bne.n	800fc6e <xQueueReceive+0x7a>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d101      	bne.n	800fc72 <xQueueReceive+0x7e>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	e000      	b.n	800fc74 <xQueueReceive+0x80>
 800fc72:	2300      	movs	r3, #0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d10d      	bne.n	800fc94 <xQueueReceive+0xa0>
	__asm volatile
 800fc78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc7c:	b672      	cpsid	i
 800fc7e:	f383 8811 	msr	BASEPRI, r3
 800fc82:	f3bf 8f6f 	isb	sy
 800fc86:	f3bf 8f4f 	dsb	sy
 800fc8a:	b662      	cpsie	i
 800fc8c:	61bb      	str	r3, [r7, #24]
}
 800fc8e:	bf00      	nop
 800fc90:	bf00      	nop
 800fc92:	e7fd      	b.n	800fc90 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fc94:	f001 fd2a 	bl	80116ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc9c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d01f      	beq.n	800fce4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fca4:	68b9      	ldr	r1, [r7, #8]
 800fca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fca8:	f000 faae 	bl	8010208 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcae:	1e5a      	subs	r2, r3, #1
 800fcb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcb2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcb6:	691b      	ldr	r3, [r3, #16]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00f      	beq.n	800fcdc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcbe:	3310      	adds	r3, #16
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f000 ffed 	bl	8010ca0 <xTaskRemoveFromEventList>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d007      	beq.n	800fcdc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fccc:	4b3c      	ldr	r3, [pc, #240]	@ (800fdc0 <xQueueReceive+0x1cc>)
 800fcce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fcd2:	601a      	str	r2, [r3, #0]
 800fcd4:	f3bf 8f4f 	dsb	sy
 800fcd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fcdc:	f001 fd3c 	bl	8011758 <vPortExitCritical>
				return pdPASS;
 800fce0:	2301      	movs	r3, #1
 800fce2:	e069      	b.n	800fdb8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d103      	bne.n	800fcf2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fcea:	f001 fd35 	bl	8011758 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e062      	b.n	800fdb8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fcf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d106      	bne.n	800fd06 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fcf8:	f107 0310 	add.w	r3, r7, #16
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f001 f835 	bl	8010d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd02:	2301      	movs	r3, #1
 800fd04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd06:	f001 fd27 	bl	8011758 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd0a:	f000 fd8b 	bl	8010824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd0e:	f001 fced 	bl	80116ec <vPortEnterCritical>
 800fd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fd18:	b25b      	sxtb	r3, r3
 800fd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd1e:	d103      	bne.n	800fd28 <xQueueReceive+0x134>
 800fd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd22:	2200      	movs	r2, #0
 800fd24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fd2e:	b25b      	sxtb	r3, r3
 800fd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd34:	d103      	bne.n	800fd3e <xQueueReceive+0x14a>
 800fd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd38:	2200      	movs	r2, #0
 800fd3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fd3e:	f001 fd0b 	bl	8011758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd42:	1d3a      	adds	r2, r7, #4
 800fd44:	f107 0310 	add.w	r3, r7, #16
 800fd48:	4611      	mov	r1, r2
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f001 f824 	bl	8010d98 <xTaskCheckForTimeOut>
 800fd50:	4603      	mov	r3, r0
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d123      	bne.n	800fd9e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd58:	f000 face 	bl	80102f8 <prvIsQueueEmpty>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d017      	beq.n	800fd92 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd64:	3324      	adds	r3, #36	@ 0x24
 800fd66:	687a      	ldr	r2, [r7, #4]
 800fd68:	4611      	mov	r1, r2
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f000 ff70 	bl	8010c50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fd70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd72:	f000 fa6f 	bl	8010254 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fd76:	f000 fd63 	bl	8010840 <xTaskResumeAll>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d189      	bne.n	800fc94 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800fd80:	4b0f      	ldr	r3, [pc, #60]	@ (800fdc0 <xQueueReceive+0x1cc>)
 800fd82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd86:	601a      	str	r2, [r3, #0]
 800fd88:	f3bf 8f4f 	dsb	sy
 800fd8c:	f3bf 8f6f 	isb	sy
 800fd90:	e780      	b.n	800fc94 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fd92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd94:	f000 fa5e 	bl	8010254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd98:	f000 fd52 	bl	8010840 <xTaskResumeAll>
 800fd9c:	e77a      	b.n	800fc94 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fd9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fda0:	f000 fa58 	bl	8010254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fda4:	f000 fd4c 	bl	8010840 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fda8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdaa:	f000 faa5 	bl	80102f8 <prvIsQueueEmpty>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	f43f af6f 	beq.w	800fc94 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fdb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3730      	adds	r7, #48	@ 0x30
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	e000ed04 	.word	0xe000ed04

0800fdc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b08e      	sub	sp, #56	@ 0x38
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d10d      	bne.n	800fdfc <xQueueSemaphoreTake+0x38>
	__asm volatile
 800fde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde4:	b672      	cpsid	i
 800fde6:	f383 8811 	msr	BASEPRI, r3
 800fdea:	f3bf 8f6f 	isb	sy
 800fdee:	f3bf 8f4f 	dsb	sy
 800fdf2:	b662      	cpsie	i
 800fdf4:	623b      	str	r3, [r7, #32]
}
 800fdf6:	bf00      	nop
 800fdf8:	bf00      	nop
 800fdfa:	e7fd      	b.n	800fdf8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d00d      	beq.n	800fe20 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800fe04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe08:	b672      	cpsid	i
 800fe0a:	f383 8811 	msr	BASEPRI, r3
 800fe0e:	f3bf 8f6f 	isb	sy
 800fe12:	f3bf 8f4f 	dsb	sy
 800fe16:	b662      	cpsie	i
 800fe18:	61fb      	str	r3, [r7, #28]
}
 800fe1a:	bf00      	nop
 800fe1c:	bf00      	nop
 800fe1e:	e7fd      	b.n	800fe1c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe20:	f001 f90e 	bl	8011040 <xTaskGetSchedulerState>
 800fe24:	4603      	mov	r3, r0
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d102      	bne.n	800fe30 <xQueueSemaphoreTake+0x6c>
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d101      	bne.n	800fe34 <xQueueSemaphoreTake+0x70>
 800fe30:	2301      	movs	r3, #1
 800fe32:	e000      	b.n	800fe36 <xQueueSemaphoreTake+0x72>
 800fe34:	2300      	movs	r3, #0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d10d      	bne.n	800fe56 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800fe3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe3e:	b672      	cpsid	i
 800fe40:	f383 8811 	msr	BASEPRI, r3
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	b662      	cpsie	i
 800fe4e:	61bb      	str	r3, [r7, #24]
}
 800fe50:	bf00      	nop
 800fe52:	bf00      	nop
 800fe54:	e7fd      	b.n	800fe52 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe56:	f001 fc49 	bl	80116ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fe5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe5e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fe60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d024      	beq.n	800feb0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fe66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe68:	1e5a      	subs	r2, r3, #1
 800fe6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe6c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d104      	bne.n	800fe80 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fe76:	f001 faad 	bl	80113d4 <pvTaskIncrementMutexHeldCount>
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe7e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe82:	691b      	ldr	r3, [r3, #16]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00f      	beq.n	800fea8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe8a:	3310      	adds	r3, #16
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f000 ff07 	bl	8010ca0 <xTaskRemoveFromEventList>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d007      	beq.n	800fea8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fe98:	4b55      	ldr	r3, [pc, #340]	@ (800fff0 <xQueueSemaphoreTake+0x22c>)
 800fe9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe9e:	601a      	str	r2, [r3, #0]
 800fea0:	f3bf 8f4f 	dsb	sy
 800fea4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fea8:	f001 fc56 	bl	8011758 <vPortExitCritical>
				return pdPASS;
 800feac:	2301      	movs	r3, #1
 800feae:	e09a      	b.n	800ffe6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d114      	bne.n	800fee0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800feb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d00d      	beq.n	800fed8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800febc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fec0:	b672      	cpsid	i
 800fec2:	f383 8811 	msr	BASEPRI, r3
 800fec6:	f3bf 8f6f 	isb	sy
 800feca:	f3bf 8f4f 	dsb	sy
 800fece:	b662      	cpsie	i
 800fed0:	617b      	str	r3, [r7, #20]
}
 800fed2:	bf00      	nop
 800fed4:	bf00      	nop
 800fed6:	e7fd      	b.n	800fed4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fed8:	f001 fc3e 	bl	8011758 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fedc:	2300      	movs	r3, #0
 800fede:	e082      	b.n	800ffe6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d106      	bne.n	800fef4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fee6:	f107 030c 	add.w	r3, r7, #12
 800feea:	4618      	mov	r0, r3
 800feec:	f000 ff3e 	bl	8010d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fef0:	2301      	movs	r3, #1
 800fef2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fef4:	f001 fc30 	bl	8011758 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fef8:	f000 fc94 	bl	8010824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fefc:	f001 fbf6 	bl	80116ec <vPortEnterCritical>
 800ff00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff06:	b25b      	sxtb	r3, r3
 800ff08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff0c:	d103      	bne.n	800ff16 <xQueueSemaphoreTake+0x152>
 800ff0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff10:	2200      	movs	r2, #0
 800ff12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ff16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ff1c:	b25b      	sxtb	r3, r3
 800ff1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff22:	d103      	bne.n	800ff2c <xQueueSemaphoreTake+0x168>
 800ff24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff26:	2200      	movs	r2, #0
 800ff28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ff2c:	f001 fc14 	bl	8011758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff30:	463a      	mov	r2, r7
 800ff32:	f107 030c 	add.w	r3, r7, #12
 800ff36:	4611      	mov	r1, r2
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f000 ff2d 	bl	8010d98 <xTaskCheckForTimeOut>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d132      	bne.n	800ffaa <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ff44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ff46:	f000 f9d7 	bl	80102f8 <prvIsQueueEmpty>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d026      	beq.n	800ff9e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d109      	bne.n	800ff6c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ff58:	f001 fbc8 	bl	80116ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ff5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff5e:	689b      	ldr	r3, [r3, #8]
 800ff60:	4618      	mov	r0, r3
 800ff62:	f001 f88b 	bl	801107c <xTaskPriorityInherit>
 800ff66:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ff68:	f001 fbf6 	bl	8011758 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ff6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff6e:	3324      	adds	r3, #36	@ 0x24
 800ff70:	683a      	ldr	r2, [r7, #0]
 800ff72:	4611      	mov	r1, r2
 800ff74:	4618      	mov	r0, r3
 800ff76:	f000 fe6b 	bl	8010c50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ff7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ff7c:	f000 f96a 	bl	8010254 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ff80:	f000 fc5e 	bl	8010840 <xTaskResumeAll>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f47f af65 	bne.w	800fe56 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ff8c:	4b18      	ldr	r3, [pc, #96]	@ (800fff0 <xQueueSemaphoreTake+0x22c>)
 800ff8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff92:	601a      	str	r2, [r3, #0]
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	f3bf 8f6f 	isb	sy
 800ff9c:	e75b      	b.n	800fe56 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ff9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffa0:	f000 f958 	bl	8010254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ffa4:	f000 fc4c 	bl	8010840 <xTaskResumeAll>
 800ffa8:	e755      	b.n	800fe56 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ffaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffac:	f000 f952 	bl	8010254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ffb0:	f000 fc46 	bl	8010840 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffb6:	f000 f99f 	bl	80102f8 <prvIsQueueEmpty>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	f43f af4a 	beq.w	800fe56 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d00d      	beq.n	800ffe4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ffc8:	f001 fb90 	bl	80116ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ffcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffce:	f000 f899 	bl	8010104 <prvGetDisinheritPriorityAfterTimeout>
 800ffd2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ffd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd6:	689b      	ldr	r3, [r3, #8]
 800ffd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f001 f95a 	bl	8011294 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ffe0:	f001 fbba 	bl	8011758 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ffe4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3738      	adds	r7, #56	@ 0x38
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	e000ed04 	.word	0xe000ed04

0800fff4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b08e      	sub	sp, #56	@ 0x38
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010006:	2b00      	cmp	r3, #0
 8010008:	d10d      	bne.n	8010026 <xQueueReceiveFromISR+0x32>
	__asm volatile
 801000a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801000e:	b672      	cpsid	i
 8010010:	f383 8811 	msr	BASEPRI, r3
 8010014:	f3bf 8f6f 	isb	sy
 8010018:	f3bf 8f4f 	dsb	sy
 801001c:	b662      	cpsie	i
 801001e:	623b      	str	r3, [r7, #32]
}
 8010020:	bf00      	nop
 8010022:	bf00      	nop
 8010024:	e7fd      	b.n	8010022 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d103      	bne.n	8010034 <xQueueReceiveFromISR+0x40>
 801002c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801002e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010030:	2b00      	cmp	r3, #0
 8010032:	d101      	bne.n	8010038 <xQueueReceiveFromISR+0x44>
 8010034:	2301      	movs	r3, #1
 8010036:	e000      	b.n	801003a <xQueueReceiveFromISR+0x46>
 8010038:	2300      	movs	r3, #0
 801003a:	2b00      	cmp	r3, #0
 801003c:	d10d      	bne.n	801005a <xQueueReceiveFromISR+0x66>
	__asm volatile
 801003e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010042:	b672      	cpsid	i
 8010044:	f383 8811 	msr	BASEPRI, r3
 8010048:	f3bf 8f6f 	isb	sy
 801004c:	f3bf 8f4f 	dsb	sy
 8010050:	b662      	cpsie	i
 8010052:	61fb      	str	r3, [r7, #28]
}
 8010054:	bf00      	nop
 8010056:	bf00      	nop
 8010058:	e7fd      	b.n	8010056 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801005a:	f001 fc2f 	bl	80118bc <vPortValidateInterruptPriority>
	__asm volatile
 801005e:	f3ef 8211 	mrs	r2, BASEPRI
 8010062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010066:	b672      	cpsid	i
 8010068:	f383 8811 	msr	BASEPRI, r3
 801006c:	f3bf 8f6f 	isb	sy
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	b662      	cpsie	i
 8010076:	61ba      	str	r2, [r7, #24]
 8010078:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801007a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801007c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801007e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010082:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010086:	2b00      	cmp	r3, #0
 8010088:	d02f      	beq.n	80100ea <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801008a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801008c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010094:	68b9      	ldr	r1, [r7, #8]
 8010096:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010098:	f000 f8b6 	bl	8010208 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801009c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801009e:	1e5a      	subs	r2, r3, #1
 80100a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80100a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80100a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ac:	d112      	bne.n	80100d4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100b0:	691b      	ldr	r3, [r3, #16]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d016      	beq.n	80100e4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100b8:	3310      	adds	r3, #16
 80100ba:	4618      	mov	r0, r3
 80100bc:	f000 fdf0 	bl	8010ca0 <xTaskRemoveFromEventList>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d00e      	beq.n	80100e4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00b      	beq.n	80100e4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2201      	movs	r2, #1
 80100d0:	601a      	str	r2, [r3, #0]
 80100d2:	e007      	b.n	80100e4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80100d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100d8:	3301      	adds	r3, #1
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	b25a      	sxtb	r2, r3
 80100de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80100e4:	2301      	movs	r3, #1
 80100e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80100e8:	e001      	b.n	80100ee <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80100ea:	2300      	movs	r3, #0
 80100ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80100ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	f383 8811 	msr	BASEPRI, r3
}
 80100f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80100fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3738      	adds	r7, #56	@ 0x38
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010104:	b480      	push	{r7}
 8010106:	b085      	sub	sp, #20
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010110:	2b00      	cmp	r3, #0
 8010112:	d006      	beq.n	8010122 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f1c3 0307 	rsb	r3, r3, #7
 801011e:	60fb      	str	r3, [r7, #12]
 8010120:	e001      	b.n	8010126 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010122:	2300      	movs	r3, #0
 8010124:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010126:	68fb      	ldr	r3, [r7, #12]
	}
 8010128:	4618      	mov	r0, r3
 801012a:	3714      	adds	r7, #20
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b086      	sub	sp, #24
 8010138:	af00      	add	r7, sp, #0
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010140:	2300      	movs	r3, #0
 8010142:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010148:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801014e:	2b00      	cmp	r3, #0
 8010150:	d10d      	bne.n	801016e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d14d      	bne.n	80101f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	4618      	mov	r0, r3
 8010160:	f001 f80c 	bl	801117c <xTaskPriorityDisinherit>
 8010164:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2200      	movs	r2, #0
 801016a:	609a      	str	r2, [r3, #8]
 801016c:	e043      	b.n	80101f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d119      	bne.n	80101a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6858      	ldr	r0, [r3, #4]
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801017c:	461a      	mov	r2, r3
 801017e:	68b9      	ldr	r1, [r7, #8]
 8010180:	f003 fcbd 	bl	8013afe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	685a      	ldr	r2, [r3, #4]
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801018c:	441a      	add	r2, r3
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	685a      	ldr	r2, [r3, #4]
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	689b      	ldr	r3, [r3, #8]
 801019a:	429a      	cmp	r2, r3
 801019c:	d32b      	bcc.n	80101f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	605a      	str	r2, [r3, #4]
 80101a6:	e026      	b.n	80101f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	68d8      	ldr	r0, [r3, #12]
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101b0:	461a      	mov	r2, r3
 80101b2:	68b9      	ldr	r1, [r7, #8]
 80101b4:	f003 fca3 	bl	8013afe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	68da      	ldr	r2, [r3, #12]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101c0:	425b      	negs	r3, r3
 80101c2:	441a      	add	r2, r3
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	68da      	ldr	r2, [r3, #12]
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d207      	bcs.n	80101e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	689a      	ldr	r2, [r3, #8]
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101dc:	425b      	negs	r3, r3
 80101de:	441a      	add	r2, r3
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2b02      	cmp	r3, #2
 80101e8:	d105      	bne.n	80101f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d002      	beq.n	80101f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	3b01      	subs	r3, #1
 80101f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	1c5a      	adds	r2, r3, #1
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80101fe:	697b      	ldr	r3, [r7, #20]
}
 8010200:	4618      	mov	r0, r3
 8010202:	3718      	adds	r7, #24
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010216:	2b00      	cmp	r3, #0
 8010218:	d018      	beq.n	801024c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	68da      	ldr	r2, [r3, #12]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010222:	441a      	add	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	68da      	ldr	r2, [r3, #12]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	689b      	ldr	r3, [r3, #8]
 8010230:	429a      	cmp	r2, r3
 8010232:	d303      	bcc.n	801023c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	68d9      	ldr	r1, [r3, #12]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010244:	461a      	mov	r2, r3
 8010246:	6838      	ldr	r0, [r7, #0]
 8010248:	f003 fc59 	bl	8013afe <memcpy>
	}
}
 801024c:	bf00      	nop
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801025c:	f001 fa46 	bl	80116ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010266:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010268:	e011      	b.n	801028e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801026e:	2b00      	cmp	r3, #0
 8010270:	d012      	beq.n	8010298 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	3324      	adds	r3, #36	@ 0x24
 8010276:	4618      	mov	r0, r3
 8010278:	f000 fd12 	bl	8010ca0 <xTaskRemoveFromEventList>
 801027c:	4603      	mov	r3, r0
 801027e:	2b00      	cmp	r3, #0
 8010280:	d001      	beq.n	8010286 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010282:	f000 fdf1 	bl	8010e68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010286:	7bfb      	ldrb	r3, [r7, #15]
 8010288:	3b01      	subs	r3, #1
 801028a:	b2db      	uxtb	r3, r3
 801028c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801028e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010292:	2b00      	cmp	r3, #0
 8010294:	dce9      	bgt.n	801026a <prvUnlockQueue+0x16>
 8010296:	e000      	b.n	801029a <prvUnlockQueue+0x46>
					break;
 8010298:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	22ff      	movs	r2, #255	@ 0xff
 801029e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80102a2:	f001 fa59 	bl	8011758 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80102a6:	f001 fa21 	bl	80116ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80102b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80102b2:	e011      	b.n	80102d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	691b      	ldr	r3, [r3, #16]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d012      	beq.n	80102e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	3310      	adds	r3, #16
 80102c0:	4618      	mov	r0, r3
 80102c2:	f000 fced 	bl	8010ca0 <xTaskRemoveFromEventList>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d001      	beq.n	80102d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80102cc:	f000 fdcc 	bl	8010e68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80102d0:	7bbb      	ldrb	r3, [r7, #14]
 80102d2:	3b01      	subs	r3, #1
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80102d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	dce9      	bgt.n	80102b4 <prvUnlockQueue+0x60>
 80102e0:	e000      	b.n	80102e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80102e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	22ff      	movs	r2, #255	@ 0xff
 80102e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80102ec:	f001 fa34 	bl	8011758 <vPortExitCritical>
}
 80102f0:	bf00      	nop
 80102f2:	3710      	adds	r7, #16
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010300:	f001 f9f4 	bl	80116ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010308:	2b00      	cmp	r3, #0
 801030a:	d102      	bne.n	8010312 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801030c:	2301      	movs	r3, #1
 801030e:	60fb      	str	r3, [r7, #12]
 8010310:	e001      	b.n	8010316 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010312:	2300      	movs	r3, #0
 8010314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010316:	f001 fa1f 	bl	8011758 <vPortExitCritical>

	return xReturn;
 801031a:	68fb      	ldr	r3, [r7, #12]
}
 801031c:	4618      	mov	r0, r3
 801031e:	3710      	adds	r7, #16
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801032c:	f001 f9de 	bl	80116ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010338:	429a      	cmp	r2, r3
 801033a:	d102      	bne.n	8010342 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801033c:	2301      	movs	r3, #1
 801033e:	60fb      	str	r3, [r7, #12]
 8010340:	e001      	b.n	8010346 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010342:	2300      	movs	r3, #0
 8010344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010346:	f001 fa07 	bl	8011758 <vPortExitCritical>

	return xReturn;
 801034a:	68fb      	ldr	r3, [r7, #12]
}
 801034c:	4618      	mov	r0, r3
 801034e:	3710      	adds	r7, #16
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010354:	b580      	push	{r7, lr}
 8010356:	b08e      	sub	sp, #56	@ 0x38
 8010358:	af04      	add	r7, sp, #16
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	607a      	str	r2, [r7, #4]
 8010360:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010364:	2b00      	cmp	r3, #0
 8010366:	d10d      	bne.n	8010384 <xTaskCreateStatic+0x30>
	__asm volatile
 8010368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801036c:	b672      	cpsid	i
 801036e:	f383 8811 	msr	BASEPRI, r3
 8010372:	f3bf 8f6f 	isb	sy
 8010376:	f3bf 8f4f 	dsb	sy
 801037a:	b662      	cpsie	i
 801037c:	623b      	str	r3, [r7, #32]
}
 801037e:	bf00      	nop
 8010380:	bf00      	nop
 8010382:	e7fd      	b.n	8010380 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010386:	2b00      	cmp	r3, #0
 8010388:	d10d      	bne.n	80103a6 <xTaskCreateStatic+0x52>
	__asm volatile
 801038a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801038e:	b672      	cpsid	i
 8010390:	f383 8811 	msr	BASEPRI, r3
 8010394:	f3bf 8f6f 	isb	sy
 8010398:	f3bf 8f4f 	dsb	sy
 801039c:	b662      	cpsie	i
 801039e:	61fb      	str	r3, [r7, #28]
}
 80103a0:	bf00      	nop
 80103a2:	bf00      	nop
 80103a4:	e7fd      	b.n	80103a2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80103a6:	23a4      	movs	r3, #164	@ 0xa4
 80103a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	2ba4      	cmp	r3, #164	@ 0xa4
 80103ae:	d00d      	beq.n	80103cc <xTaskCreateStatic+0x78>
	__asm volatile
 80103b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103b4:	b672      	cpsid	i
 80103b6:	f383 8811 	msr	BASEPRI, r3
 80103ba:	f3bf 8f6f 	isb	sy
 80103be:	f3bf 8f4f 	dsb	sy
 80103c2:	b662      	cpsie	i
 80103c4:	61bb      	str	r3, [r7, #24]
}
 80103c6:	bf00      	nop
 80103c8:	bf00      	nop
 80103ca:	e7fd      	b.n	80103c8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80103cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80103ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d01e      	beq.n	8010412 <xTaskCreateStatic+0xbe>
 80103d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d01b      	beq.n	8010412 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80103da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80103de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80103e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e6:	2202      	movs	r2, #2
 80103e8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80103ec:	2300      	movs	r3, #0
 80103ee:	9303      	str	r3, [sp, #12]
 80103f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103f2:	9302      	str	r3, [sp, #8]
 80103f4:	f107 0314 	add.w	r3, r7, #20
 80103f8:	9301      	str	r3, [sp, #4]
 80103fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103fc:	9300      	str	r3, [sp, #0]
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	68b9      	ldr	r1, [r7, #8]
 8010404:	68f8      	ldr	r0, [r7, #12]
 8010406:	f000 f851 	bl	80104ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801040a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801040c:	f000 f8fa 	bl	8010604 <prvAddNewTaskToReadyList>
 8010410:	e001      	b.n	8010416 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8010412:	2300      	movs	r3, #0
 8010414:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010416:	697b      	ldr	r3, [r7, #20]
	}
 8010418:	4618      	mov	r0, r3
 801041a:	3728      	adds	r7, #40	@ 0x28
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010420:	b580      	push	{r7, lr}
 8010422:	b08c      	sub	sp, #48	@ 0x30
 8010424:	af04      	add	r7, sp, #16
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	603b      	str	r3, [r7, #0]
 801042c:	4613      	mov	r3, r2
 801042e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010430:	88fb      	ldrh	r3, [r7, #6]
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	4618      	mov	r0, r3
 8010436:	f001 fa87 	bl	8011948 <pvPortMalloc>
 801043a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d00e      	beq.n	8010460 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010442:	20a4      	movs	r0, #164	@ 0xa4
 8010444:	f001 fa80 	bl	8011948 <pvPortMalloc>
 8010448:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d003      	beq.n	8010458 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	697a      	ldr	r2, [r7, #20]
 8010454:	631a      	str	r2, [r3, #48]	@ 0x30
 8010456:	e005      	b.n	8010464 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010458:	6978      	ldr	r0, [r7, #20]
 801045a:	f001 fb47 	bl	8011aec <vPortFree>
 801045e:	e001      	b.n	8010464 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010460:	2300      	movs	r3, #0
 8010462:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d017      	beq.n	801049a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801046a:	69fb      	ldr	r3, [r7, #28]
 801046c:	2200      	movs	r2, #0
 801046e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010472:	88fa      	ldrh	r2, [r7, #6]
 8010474:	2300      	movs	r3, #0
 8010476:	9303      	str	r3, [sp, #12]
 8010478:	69fb      	ldr	r3, [r7, #28]
 801047a:	9302      	str	r3, [sp, #8]
 801047c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801047e:	9301      	str	r3, [sp, #4]
 8010480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010482:	9300      	str	r3, [sp, #0]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	68b9      	ldr	r1, [r7, #8]
 8010488:	68f8      	ldr	r0, [r7, #12]
 801048a:	f000 f80f 	bl	80104ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801048e:	69f8      	ldr	r0, [r7, #28]
 8010490:	f000 f8b8 	bl	8010604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010494:	2301      	movs	r3, #1
 8010496:	61bb      	str	r3, [r7, #24]
 8010498:	e002      	b.n	80104a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801049a:	f04f 33ff 	mov.w	r3, #4294967295
 801049e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80104a0:	69bb      	ldr	r3, [r7, #24]
	}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3720      	adds	r7, #32
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
	...

080104ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b088      	sub	sp, #32
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	607a      	str	r2, [r7, #4]
 80104b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80104ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	461a      	mov	r2, r3
 80104c4:	21a5      	movs	r1, #165	@ 0xa5
 80104c6:	f003 f9c1 	bl	801384c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80104ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80104ce:	6879      	ldr	r1, [r7, #4]
 80104d0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80104d4:	440b      	add	r3, r1
 80104d6:	009b      	lsls	r3, r3, #2
 80104d8:	4413      	add	r3, r2
 80104da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80104dc:	69bb      	ldr	r3, [r7, #24]
 80104de:	f023 0307 	bic.w	r3, r3, #7
 80104e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80104e4:	69bb      	ldr	r3, [r7, #24]
 80104e6:	f003 0307 	and.w	r3, r3, #7
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d00d      	beq.n	801050a <prvInitialiseNewTask+0x5e>
	__asm volatile
 80104ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104f2:	b672      	cpsid	i
 80104f4:	f383 8811 	msr	BASEPRI, r3
 80104f8:	f3bf 8f6f 	isb	sy
 80104fc:	f3bf 8f4f 	dsb	sy
 8010500:	b662      	cpsie	i
 8010502:	617b      	str	r3, [r7, #20]
}
 8010504:	bf00      	nop
 8010506:	bf00      	nop
 8010508:	e7fd      	b.n	8010506 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d01f      	beq.n	8010550 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010510:	2300      	movs	r3, #0
 8010512:	61fb      	str	r3, [r7, #28]
 8010514:	e012      	b.n	801053c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010516:	68ba      	ldr	r2, [r7, #8]
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	4413      	add	r3, r2
 801051c:	7819      	ldrb	r1, [r3, #0]
 801051e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	4413      	add	r3, r2
 8010524:	3334      	adds	r3, #52	@ 0x34
 8010526:	460a      	mov	r2, r1
 8010528:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	4413      	add	r3, r2
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d006      	beq.n	8010544 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010536:	69fb      	ldr	r3, [r7, #28]
 8010538:	3301      	adds	r3, #1
 801053a:	61fb      	str	r3, [r7, #28]
 801053c:	69fb      	ldr	r3, [r7, #28]
 801053e:	2b0f      	cmp	r3, #15
 8010540:	d9e9      	bls.n	8010516 <prvInitialiseNewTask+0x6a>
 8010542:	e000      	b.n	8010546 <prvInitialiseNewTask+0x9a>
			{
				break;
 8010544:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010548:	2200      	movs	r2, #0
 801054a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801054e:	e003      	b.n	8010558 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010552:	2200      	movs	r2, #0
 8010554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801055a:	2b06      	cmp	r3, #6
 801055c:	d901      	bls.n	8010562 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801055e:	2306      	movs	r3, #6
 8010560:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010566:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801056a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801056c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801056e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010570:	2200      	movs	r2, #0
 8010572:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010576:	3304      	adds	r3, #4
 8010578:	4618      	mov	r0, r3
 801057a:	f7fe febf 	bl	800f2fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801057e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010580:	3318      	adds	r3, #24
 8010582:	4618      	mov	r0, r3
 8010584:	f7fe feba 	bl	800f2fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801058a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801058c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801058e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010590:	f1c3 0207 	rsb	r2, r3, #7
 8010594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010596:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801059a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801059c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801059e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105a0:	2200      	movs	r2, #0
 80105a2:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80105a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105a6:	2200      	movs	r2, #0
 80105a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80105ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ae:	2200      	movs	r2, #0
 80105b0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80105b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105b6:	3350      	adds	r3, #80	@ 0x50
 80105b8:	224c      	movs	r2, #76	@ 0x4c
 80105ba:	2100      	movs	r1, #0
 80105bc:	4618      	mov	r0, r3
 80105be:	f003 f945 	bl	801384c <memset>
 80105c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105c4:	4a0c      	ldr	r2, [pc, #48]	@ (80105f8 <prvInitialiseNewTask+0x14c>)
 80105c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80105c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ca:	4a0c      	ldr	r2, [pc, #48]	@ (80105fc <prvInitialiseNewTask+0x150>)
 80105cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80105ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105d0:	4a0b      	ldr	r2, [pc, #44]	@ (8010600 <prvInitialiseNewTask+0x154>)
 80105d2:	65da      	str	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80105d4:	683a      	ldr	r2, [r7, #0]
 80105d6:	68f9      	ldr	r1, [r7, #12]
 80105d8:	69b8      	ldr	r0, [r7, #24]
 80105da:	f000 ff75 	bl	80114c8 <pxPortInitialiseStack>
 80105de:	4602      	mov	r2, r0
 80105e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80105e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d002      	beq.n	80105f0 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80105ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80105ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80105f0:	bf00      	nop
 80105f2:	3720      	adds	r7, #32
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}
 80105f8:	2000b3a0 	.word	0x2000b3a0
 80105fc:	2000b408 	.word	0x2000b408
 8010600:	2000b470 	.word	0x2000b470

08010604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801060c:	f001 f86e 	bl	80116ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010610:	4b2a      	ldr	r3, [pc, #168]	@ (80106bc <prvAddNewTaskToReadyList+0xb8>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	3301      	adds	r3, #1
 8010616:	4a29      	ldr	r2, [pc, #164]	@ (80106bc <prvAddNewTaskToReadyList+0xb8>)
 8010618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801061a:	4b29      	ldr	r3, [pc, #164]	@ (80106c0 <prvAddNewTaskToReadyList+0xbc>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d109      	bne.n	8010636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010622:	4a27      	ldr	r2, [pc, #156]	@ (80106c0 <prvAddNewTaskToReadyList+0xbc>)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010628:	4b24      	ldr	r3, [pc, #144]	@ (80106bc <prvAddNewTaskToReadyList+0xb8>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d110      	bne.n	8010652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010630:	f000 fc40 	bl	8010eb4 <prvInitialiseTaskLists>
 8010634:	e00d      	b.n	8010652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010636:	4b23      	ldr	r3, [pc, #140]	@ (80106c4 <prvAddNewTaskToReadyList+0xc0>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d109      	bne.n	8010652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801063e:	4b20      	ldr	r3, [pc, #128]	@ (80106c0 <prvAddNewTaskToReadyList+0xbc>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010648:	429a      	cmp	r2, r3
 801064a:	d802      	bhi.n	8010652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801064c:	4a1c      	ldr	r2, [pc, #112]	@ (80106c0 <prvAddNewTaskToReadyList+0xbc>)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010652:	4b1d      	ldr	r3, [pc, #116]	@ (80106c8 <prvAddNewTaskToReadyList+0xc4>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3301      	adds	r3, #1
 8010658:	4a1b      	ldr	r2, [pc, #108]	@ (80106c8 <prvAddNewTaskToReadyList+0xc4>)
 801065a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010660:	2201      	movs	r2, #1
 8010662:	409a      	lsls	r2, r3
 8010664:	4b19      	ldr	r3, [pc, #100]	@ (80106cc <prvAddNewTaskToReadyList+0xc8>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	4313      	orrs	r3, r2
 801066a:	4a18      	ldr	r2, [pc, #96]	@ (80106cc <prvAddNewTaskToReadyList+0xc8>)
 801066c:	6013      	str	r3, [r2, #0]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010672:	4613      	mov	r3, r2
 8010674:	009b      	lsls	r3, r3, #2
 8010676:	4413      	add	r3, r2
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	4a15      	ldr	r2, [pc, #84]	@ (80106d0 <prvAddNewTaskToReadyList+0xcc>)
 801067c:	441a      	add	r2, r3
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	3304      	adds	r3, #4
 8010682:	4619      	mov	r1, r3
 8010684:	4610      	mov	r0, r2
 8010686:	f7fe fe46 	bl	800f316 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801068a:	f001 f865 	bl	8011758 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801068e:	4b0d      	ldr	r3, [pc, #52]	@ (80106c4 <prvAddNewTaskToReadyList+0xc0>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d00e      	beq.n	80106b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010696:	4b0a      	ldr	r3, [pc, #40]	@ (80106c0 <prvAddNewTaskToReadyList+0xbc>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d207      	bcs.n	80106b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80106a4:	4b0b      	ldr	r3, [pc, #44]	@ (80106d4 <prvAddNewTaskToReadyList+0xd0>)
 80106a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106aa:	601a      	str	r2, [r3, #0]
 80106ac:	f3bf 8f4f 	dsb	sy
 80106b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106b4:	bf00      	nop
 80106b6:	3708      	adds	r7, #8
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	20003354 	.word	0x20003354
 80106c0:	20003254 	.word	0x20003254
 80106c4:	20003360 	.word	0x20003360
 80106c8:	20003370 	.word	0x20003370
 80106cc:	2000335c 	.word	0x2000335c
 80106d0:	20003258 	.word	0x20003258
 80106d4:	e000ed04 	.word	0xe000ed04

080106d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b084      	sub	sp, #16
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80106e0:	2300      	movs	r3, #0
 80106e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d01a      	beq.n	8010720 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80106ea:	4b15      	ldr	r3, [pc, #84]	@ (8010740 <vTaskDelay+0x68>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d00d      	beq.n	801070e <vTaskDelay+0x36>
	__asm volatile
 80106f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106f6:	b672      	cpsid	i
 80106f8:	f383 8811 	msr	BASEPRI, r3
 80106fc:	f3bf 8f6f 	isb	sy
 8010700:	f3bf 8f4f 	dsb	sy
 8010704:	b662      	cpsie	i
 8010706:	60bb      	str	r3, [r7, #8]
}
 8010708:	bf00      	nop
 801070a:	bf00      	nop
 801070c:	e7fd      	b.n	801070a <vTaskDelay+0x32>
			vTaskSuspendAll();
 801070e:	f000 f889 	bl	8010824 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010712:	2100      	movs	r1, #0
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f000 fe71 	bl	80113fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801071a:	f000 f891 	bl	8010840 <xTaskResumeAll>
 801071e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d107      	bne.n	8010736 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8010726:	4b07      	ldr	r3, [pc, #28]	@ (8010744 <vTaskDelay+0x6c>)
 8010728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801072c:	601a      	str	r2, [r3, #0]
 801072e:	f3bf 8f4f 	dsb	sy
 8010732:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010736:	bf00      	nop
 8010738:	3710      	adds	r7, #16
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	2000337c 	.word	0x2000337c
 8010744:	e000ed04 	.word	0xe000ed04

08010748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b08a      	sub	sp, #40	@ 0x28
 801074c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801074e:	2300      	movs	r3, #0
 8010750:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010752:	2300      	movs	r3, #0
 8010754:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010756:	463a      	mov	r2, r7
 8010758:	1d39      	adds	r1, r7, #4
 801075a:	f107 0308 	add.w	r3, r7, #8
 801075e:	4618      	mov	r0, r3
 8010760:	f7f1 fc40 	bl	8001fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010764:	6839      	ldr	r1, [r7, #0]
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	68ba      	ldr	r2, [r7, #8]
 801076a:	9202      	str	r2, [sp, #8]
 801076c:	9301      	str	r3, [sp, #4]
 801076e:	2300      	movs	r3, #0
 8010770:	9300      	str	r3, [sp, #0]
 8010772:	2300      	movs	r3, #0
 8010774:	460a      	mov	r2, r1
 8010776:	4923      	ldr	r1, [pc, #140]	@ (8010804 <vTaskStartScheduler+0xbc>)
 8010778:	4823      	ldr	r0, [pc, #140]	@ (8010808 <vTaskStartScheduler+0xc0>)
 801077a:	f7ff fdeb 	bl	8010354 <xTaskCreateStatic>
 801077e:	4603      	mov	r3, r0
 8010780:	4a22      	ldr	r2, [pc, #136]	@ (801080c <vTaskStartScheduler+0xc4>)
 8010782:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010784:	4b21      	ldr	r3, [pc, #132]	@ (801080c <vTaskStartScheduler+0xc4>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d002      	beq.n	8010792 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801078c:	2301      	movs	r3, #1
 801078e:	617b      	str	r3, [r7, #20]
 8010790:	e001      	b.n	8010796 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010792:	2300      	movs	r3, #0
 8010794:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	2b01      	cmp	r3, #1
 801079a:	d11d      	bne.n	80107d8 <vTaskStartScheduler+0x90>
	__asm volatile
 801079c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107a0:	b672      	cpsid	i
 80107a2:	f383 8811 	msr	BASEPRI, r3
 80107a6:	f3bf 8f6f 	isb	sy
 80107aa:	f3bf 8f4f 	dsb	sy
 80107ae:	b662      	cpsie	i
 80107b0:	613b      	str	r3, [r7, #16]
}
 80107b2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80107b4:	4b16      	ldr	r3, [pc, #88]	@ (8010810 <vTaskStartScheduler+0xc8>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	3350      	adds	r3, #80	@ 0x50
 80107ba:	4a16      	ldr	r2, [pc, #88]	@ (8010814 <vTaskStartScheduler+0xcc>)
 80107bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80107be:	4b16      	ldr	r3, [pc, #88]	@ (8010818 <vTaskStartScheduler+0xd0>)
 80107c0:	f04f 32ff 	mov.w	r2, #4294967295
 80107c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80107c6:	4b15      	ldr	r3, [pc, #84]	@ (801081c <vTaskStartScheduler+0xd4>)
 80107c8:	2201      	movs	r2, #1
 80107ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80107cc:	4b14      	ldr	r3, [pc, #80]	@ (8010820 <vTaskStartScheduler+0xd8>)
 80107ce:	2200      	movs	r2, #0
 80107d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80107d2:	f000 ff0d 	bl	80115f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80107d6:	e011      	b.n	80107fc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107de:	d10d      	bne.n	80107fc <vTaskStartScheduler+0xb4>
	__asm volatile
 80107e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107e4:	b672      	cpsid	i
 80107e6:	f383 8811 	msr	BASEPRI, r3
 80107ea:	f3bf 8f6f 	isb	sy
 80107ee:	f3bf 8f4f 	dsb	sy
 80107f2:	b662      	cpsie	i
 80107f4:	60fb      	str	r3, [r7, #12]
}
 80107f6:	bf00      	nop
 80107f8:	bf00      	nop
 80107fa:	e7fd      	b.n	80107f8 <vTaskStartScheduler+0xb0>
}
 80107fc:	bf00      	nop
 80107fe:	3718      	adds	r7, #24
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	08016754 	.word	0x08016754
 8010808:	08010e81 	.word	0x08010e81
 801080c:	20003378 	.word	0x20003378
 8010810:	20003254 	.word	0x20003254
 8010814:	2000018c 	.word	0x2000018c
 8010818:	20003374 	.word	0x20003374
 801081c:	20003360 	.word	0x20003360
 8010820:	20003358 	.word	0x20003358

08010824 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010824:	b480      	push	{r7}
 8010826:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010828:	4b04      	ldr	r3, [pc, #16]	@ (801083c <vTaskSuspendAll+0x18>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	3301      	adds	r3, #1
 801082e:	4a03      	ldr	r2, [pc, #12]	@ (801083c <vTaskSuspendAll+0x18>)
 8010830:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010832:	bf00      	nop
 8010834:	46bd      	mov	sp, r7
 8010836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083a:	4770      	bx	lr
 801083c:	2000337c 	.word	0x2000337c

08010840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010846:	2300      	movs	r3, #0
 8010848:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801084a:	2300      	movs	r3, #0
 801084c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801084e:	4b43      	ldr	r3, [pc, #268]	@ (801095c <xTaskResumeAll+0x11c>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d10d      	bne.n	8010872 <xTaskResumeAll+0x32>
	__asm volatile
 8010856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801085a:	b672      	cpsid	i
 801085c:	f383 8811 	msr	BASEPRI, r3
 8010860:	f3bf 8f6f 	isb	sy
 8010864:	f3bf 8f4f 	dsb	sy
 8010868:	b662      	cpsie	i
 801086a:	603b      	str	r3, [r7, #0]
}
 801086c:	bf00      	nop
 801086e:	bf00      	nop
 8010870:	e7fd      	b.n	801086e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010872:	f000 ff3b 	bl	80116ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010876:	4b39      	ldr	r3, [pc, #228]	@ (801095c <xTaskResumeAll+0x11c>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	3b01      	subs	r3, #1
 801087c:	4a37      	ldr	r2, [pc, #220]	@ (801095c <xTaskResumeAll+0x11c>)
 801087e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010880:	4b36      	ldr	r3, [pc, #216]	@ (801095c <xTaskResumeAll+0x11c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d161      	bne.n	801094c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010888:	4b35      	ldr	r3, [pc, #212]	@ (8010960 <xTaskResumeAll+0x120>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d05d      	beq.n	801094c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010890:	e02e      	b.n	80108f0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010892:	4b34      	ldr	r3, [pc, #208]	@ (8010964 <xTaskResumeAll+0x124>)
 8010894:	68db      	ldr	r3, [r3, #12]
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	3318      	adds	r3, #24
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fe fd96 	bl	800f3d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	3304      	adds	r3, #4
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7fe fd91 	bl	800f3d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108b2:	2201      	movs	r2, #1
 80108b4:	409a      	lsls	r2, r3
 80108b6:	4b2c      	ldr	r3, [pc, #176]	@ (8010968 <xTaskResumeAll+0x128>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4313      	orrs	r3, r2
 80108bc:	4a2a      	ldr	r2, [pc, #168]	@ (8010968 <xTaskResumeAll+0x128>)
 80108be:	6013      	str	r3, [r2, #0]
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108c4:	4613      	mov	r3, r2
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	4413      	add	r3, r2
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	4a27      	ldr	r2, [pc, #156]	@ (801096c <xTaskResumeAll+0x12c>)
 80108ce:	441a      	add	r2, r3
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	3304      	adds	r3, #4
 80108d4:	4619      	mov	r1, r3
 80108d6:	4610      	mov	r0, r2
 80108d8:	f7fe fd1d 	bl	800f316 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80108e0:	4b23      	ldr	r3, [pc, #140]	@ (8010970 <xTaskResumeAll+0x130>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d302      	bcc.n	80108f0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80108ea:	4b22      	ldr	r3, [pc, #136]	@ (8010974 <xTaskResumeAll+0x134>)
 80108ec:	2201      	movs	r2, #1
 80108ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80108f0:	4b1c      	ldr	r3, [pc, #112]	@ (8010964 <xTaskResumeAll+0x124>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d1cc      	bne.n	8010892 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d001      	beq.n	8010902 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80108fe:	f000 fb7f 	bl	8011000 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010902:	4b1d      	ldr	r3, [pc, #116]	@ (8010978 <xTaskResumeAll+0x138>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d010      	beq.n	8010930 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801090e:	f000 f859 	bl	80109c4 <xTaskIncrementTick>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	d002      	beq.n	801091e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8010918:	4b16      	ldr	r3, [pc, #88]	@ (8010974 <xTaskResumeAll+0x134>)
 801091a:	2201      	movs	r2, #1
 801091c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	3b01      	subs	r3, #1
 8010922:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d1f1      	bne.n	801090e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 801092a:	4b13      	ldr	r3, [pc, #76]	@ (8010978 <xTaskResumeAll+0x138>)
 801092c:	2200      	movs	r2, #0
 801092e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010930:	4b10      	ldr	r3, [pc, #64]	@ (8010974 <xTaskResumeAll+0x134>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d009      	beq.n	801094c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010938:	2301      	movs	r3, #1
 801093a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801093c:	4b0f      	ldr	r3, [pc, #60]	@ (801097c <xTaskResumeAll+0x13c>)
 801093e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010942:	601a      	str	r2, [r3, #0]
 8010944:	f3bf 8f4f 	dsb	sy
 8010948:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801094c:	f000 ff04 	bl	8011758 <vPortExitCritical>

	return xAlreadyYielded;
 8010950:	68bb      	ldr	r3, [r7, #8]
}
 8010952:	4618      	mov	r0, r3
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	2000337c 	.word	0x2000337c
 8010960:	20003354 	.word	0x20003354
 8010964:	20003314 	.word	0x20003314
 8010968:	2000335c 	.word	0x2000335c
 801096c:	20003258 	.word	0x20003258
 8010970:	20003254 	.word	0x20003254
 8010974:	20003368 	.word	0x20003368
 8010978:	20003364 	.word	0x20003364
 801097c:	e000ed04 	.word	0xe000ed04

08010980 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010980:	b480      	push	{r7}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010986:	4b05      	ldr	r3, [pc, #20]	@ (801099c <xTaskGetTickCount+0x1c>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801098c:	687b      	ldr	r3, [r7, #4]
}
 801098e:	4618      	mov	r0, r3
 8010990:	370c      	adds	r7, #12
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr
 801099a:	bf00      	nop
 801099c:	20003358 	.word	0x20003358

080109a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109a6:	f000 ff89 	bl	80118bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80109aa:	2300      	movs	r3, #0
 80109ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80109ae:	4b04      	ldr	r3, [pc, #16]	@ (80109c0 <xTaskGetTickCountFromISR+0x20>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80109b4:	683b      	ldr	r3, [r7, #0]
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	20003358 	.word	0x20003358

080109c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b086      	sub	sp, #24
 80109c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80109ca:	2300      	movs	r3, #0
 80109cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109ce:	4b50      	ldr	r3, [pc, #320]	@ (8010b10 <xTaskIncrementTick+0x14c>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f040 808b 	bne.w	8010aee <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80109d8:	4b4e      	ldr	r3, [pc, #312]	@ (8010b14 <xTaskIncrementTick+0x150>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	3301      	adds	r3, #1
 80109de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80109e0:	4a4c      	ldr	r2, [pc, #304]	@ (8010b14 <xTaskIncrementTick+0x150>)
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d123      	bne.n	8010a34 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80109ec:	4b4a      	ldr	r3, [pc, #296]	@ (8010b18 <xTaskIncrementTick+0x154>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00d      	beq.n	8010a12 <xTaskIncrementTick+0x4e>
	__asm volatile
 80109f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109fa:	b672      	cpsid	i
 80109fc:	f383 8811 	msr	BASEPRI, r3
 8010a00:	f3bf 8f6f 	isb	sy
 8010a04:	f3bf 8f4f 	dsb	sy
 8010a08:	b662      	cpsie	i
 8010a0a:	603b      	str	r3, [r7, #0]
}
 8010a0c:	bf00      	nop
 8010a0e:	bf00      	nop
 8010a10:	e7fd      	b.n	8010a0e <xTaskIncrementTick+0x4a>
 8010a12:	4b41      	ldr	r3, [pc, #260]	@ (8010b18 <xTaskIncrementTick+0x154>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	60fb      	str	r3, [r7, #12]
 8010a18:	4b40      	ldr	r3, [pc, #256]	@ (8010b1c <xTaskIncrementTick+0x158>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4a3e      	ldr	r2, [pc, #248]	@ (8010b18 <xTaskIncrementTick+0x154>)
 8010a1e:	6013      	str	r3, [r2, #0]
 8010a20:	4a3e      	ldr	r2, [pc, #248]	@ (8010b1c <xTaskIncrementTick+0x158>)
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	6013      	str	r3, [r2, #0]
 8010a26:	4b3e      	ldr	r3, [pc, #248]	@ (8010b20 <xTaskIncrementTick+0x15c>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	3301      	adds	r3, #1
 8010a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8010b20 <xTaskIncrementTick+0x15c>)
 8010a2e:	6013      	str	r3, [r2, #0]
 8010a30:	f000 fae6 	bl	8011000 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010a34:	4b3b      	ldr	r3, [pc, #236]	@ (8010b24 <xTaskIncrementTick+0x160>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	693a      	ldr	r2, [r7, #16]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d348      	bcc.n	8010ad0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a3e:	4b36      	ldr	r3, [pc, #216]	@ (8010b18 <xTaskIncrementTick+0x154>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d104      	bne.n	8010a52 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a48:	4b36      	ldr	r3, [pc, #216]	@ (8010b24 <xTaskIncrementTick+0x160>)
 8010a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a4e:	601a      	str	r2, [r3, #0]
					break;
 8010a50:	e03e      	b.n	8010ad0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a52:	4b31      	ldr	r3, [pc, #196]	@ (8010b18 <xTaskIncrementTick+0x154>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	68db      	ldr	r3, [r3, #12]
 8010a58:	68db      	ldr	r3, [r3, #12]
 8010a5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	685b      	ldr	r3, [r3, #4]
 8010a60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010a62:	693a      	ldr	r2, [r7, #16]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d203      	bcs.n	8010a72 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8010b24 <xTaskIncrementTick+0x160>)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010a70:	e02e      	b.n	8010ad0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	3304      	adds	r3, #4
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fe fcaa 	bl	800f3d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d004      	beq.n	8010a8e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	3318      	adds	r3, #24
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7fe fca1 	bl	800f3d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a92:	2201      	movs	r2, #1
 8010a94:	409a      	lsls	r2, r3
 8010a96:	4b24      	ldr	r3, [pc, #144]	@ (8010b28 <xTaskIncrementTick+0x164>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	4313      	orrs	r3, r2
 8010a9c:	4a22      	ldr	r2, [pc, #136]	@ (8010b28 <xTaskIncrementTick+0x164>)
 8010a9e:	6013      	str	r3, [r2, #0]
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010aa4:	4613      	mov	r3, r2
 8010aa6:	009b      	lsls	r3, r3, #2
 8010aa8:	4413      	add	r3, r2
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	4a1f      	ldr	r2, [pc, #124]	@ (8010b2c <xTaskIncrementTick+0x168>)
 8010aae:	441a      	add	r2, r3
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	3304      	adds	r3, #4
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	4610      	mov	r0, r2
 8010ab8:	f7fe fc2d 	bl	800f316 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8010b30 <xTaskIncrementTick+0x16c>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d3b9      	bcc.n	8010a3e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8010aca:	2301      	movs	r3, #1
 8010acc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ace:	e7b6      	b.n	8010a3e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010ad0:	4b17      	ldr	r3, [pc, #92]	@ (8010b30 <xTaskIncrementTick+0x16c>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ad6:	4915      	ldr	r1, [pc, #84]	@ (8010b2c <xTaskIncrementTick+0x168>)
 8010ad8:	4613      	mov	r3, r2
 8010ada:	009b      	lsls	r3, r3, #2
 8010adc:	4413      	add	r3, r2
 8010ade:	009b      	lsls	r3, r3, #2
 8010ae0:	440b      	add	r3, r1
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d907      	bls.n	8010af8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8010ae8:	2301      	movs	r3, #1
 8010aea:	617b      	str	r3, [r7, #20]
 8010aec:	e004      	b.n	8010af8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010aee:	4b11      	ldr	r3, [pc, #68]	@ (8010b34 <xTaskIncrementTick+0x170>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	3301      	adds	r3, #1
 8010af4:	4a0f      	ldr	r2, [pc, #60]	@ (8010b34 <xTaskIncrementTick+0x170>)
 8010af6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010af8:	4b0f      	ldr	r3, [pc, #60]	@ (8010b38 <xTaskIncrementTick+0x174>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d001      	beq.n	8010b04 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8010b00:	2301      	movs	r3, #1
 8010b02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010b04:	697b      	ldr	r3, [r7, #20]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3718      	adds	r7, #24
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	2000337c 	.word	0x2000337c
 8010b14:	20003358 	.word	0x20003358
 8010b18:	2000330c 	.word	0x2000330c
 8010b1c:	20003310 	.word	0x20003310
 8010b20:	2000336c 	.word	0x2000336c
 8010b24:	20003374 	.word	0x20003374
 8010b28:	2000335c 	.word	0x2000335c
 8010b2c:	20003258 	.word	0x20003258
 8010b30:	20003254 	.word	0x20003254
 8010b34:	20003364 	.word	0x20003364
 8010b38:	20003368 	.word	0x20003368

08010b3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b088      	sub	sp, #32
 8010b40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010b42:	4b3d      	ldr	r3, [pc, #244]	@ (8010c38 <vTaskSwitchContext+0xfc>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d003      	beq.n	8010b52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010b4a:	4b3c      	ldr	r3, [pc, #240]	@ (8010c3c <vTaskSwitchContext+0x100>)
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010b50:	e06e      	b.n	8010c30 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8010b52:	4b3a      	ldr	r3, [pc, #232]	@ (8010c3c <vTaskSwitchContext+0x100>)
 8010b54:	2200      	movs	r2, #0
 8010b56:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010b58:	4b39      	ldr	r3, [pc, #228]	@ (8010c40 <vTaskSwitchContext+0x104>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b5e:	61fb      	str	r3, [r7, #28]
 8010b60:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8010b64:	61bb      	str	r3, [r7, #24]
 8010b66:	69fb      	ldr	r3, [r7, #28]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	69ba      	ldr	r2, [r7, #24]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d111      	bne.n	8010b94 <vTaskSwitchContext+0x58>
 8010b70:	69fb      	ldr	r3, [r7, #28]
 8010b72:	3304      	adds	r3, #4
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	69ba      	ldr	r2, [r7, #24]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d10b      	bne.n	8010b94 <vTaskSwitchContext+0x58>
 8010b7c:	69fb      	ldr	r3, [r7, #28]
 8010b7e:	3308      	adds	r3, #8
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	69ba      	ldr	r2, [r7, #24]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d105      	bne.n	8010b94 <vTaskSwitchContext+0x58>
 8010b88:	69fb      	ldr	r3, [r7, #28]
 8010b8a:	330c      	adds	r3, #12
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	69ba      	ldr	r2, [r7, #24]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d008      	beq.n	8010ba6 <vTaskSwitchContext+0x6a>
 8010b94:	4b2a      	ldr	r3, [pc, #168]	@ (8010c40 <vTaskSwitchContext+0x104>)
 8010b96:	681a      	ldr	r2, [r3, #0]
 8010b98:	4b29      	ldr	r3, [pc, #164]	@ (8010c40 <vTaskSwitchContext+0x104>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	3334      	adds	r3, #52	@ 0x34
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	4610      	mov	r0, r2
 8010ba2:	f7f1 fa0c 	bl	8001fbe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ba6:	4b27      	ldr	r3, [pc, #156]	@ (8010c44 <vTaskSwitchContext+0x108>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	fab3 f383 	clz	r3, r3
 8010bb2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010bb4:	7afb      	ldrb	r3, [r7, #11]
 8010bb6:	f1c3 031f 	rsb	r3, r3, #31
 8010bba:	617b      	str	r3, [r7, #20]
 8010bbc:	4922      	ldr	r1, [pc, #136]	@ (8010c48 <vTaskSwitchContext+0x10c>)
 8010bbe:	697a      	ldr	r2, [r7, #20]
 8010bc0:	4613      	mov	r3, r2
 8010bc2:	009b      	lsls	r3, r3, #2
 8010bc4:	4413      	add	r3, r2
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	440b      	add	r3, r1
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d10d      	bne.n	8010bec <vTaskSwitchContext+0xb0>
	__asm volatile
 8010bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bd4:	b672      	cpsid	i
 8010bd6:	f383 8811 	msr	BASEPRI, r3
 8010bda:	f3bf 8f6f 	isb	sy
 8010bde:	f3bf 8f4f 	dsb	sy
 8010be2:	b662      	cpsie	i
 8010be4:	607b      	str	r3, [r7, #4]
}
 8010be6:	bf00      	nop
 8010be8:	bf00      	nop
 8010bea:	e7fd      	b.n	8010be8 <vTaskSwitchContext+0xac>
 8010bec:	697a      	ldr	r2, [r7, #20]
 8010bee:	4613      	mov	r3, r2
 8010bf0:	009b      	lsls	r3, r3, #2
 8010bf2:	4413      	add	r3, r2
 8010bf4:	009b      	lsls	r3, r3, #2
 8010bf6:	4a14      	ldr	r2, [pc, #80]	@ (8010c48 <vTaskSwitchContext+0x10c>)
 8010bf8:	4413      	add	r3, r2
 8010bfa:	613b      	str	r3, [r7, #16]
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	685b      	ldr	r3, [r3, #4]
 8010c00:	685a      	ldr	r2, [r3, #4]
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	605a      	str	r2, [r3, #4]
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	685a      	ldr	r2, [r3, #4]
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	3308      	adds	r3, #8
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d104      	bne.n	8010c1c <vTaskSwitchContext+0xe0>
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	685a      	ldr	r2, [r3, #4]
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	605a      	str	r2, [r3, #4]
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	68db      	ldr	r3, [r3, #12]
 8010c22:	4a07      	ldr	r2, [pc, #28]	@ (8010c40 <vTaskSwitchContext+0x104>)
 8010c24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010c26:	4b06      	ldr	r3, [pc, #24]	@ (8010c40 <vTaskSwitchContext+0x104>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	3350      	adds	r3, #80	@ 0x50
 8010c2c:	4a07      	ldr	r2, [pc, #28]	@ (8010c4c <vTaskSwitchContext+0x110>)
 8010c2e:	6013      	str	r3, [r2, #0]
}
 8010c30:	bf00      	nop
 8010c32:	3720      	adds	r7, #32
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	2000337c 	.word	0x2000337c
 8010c3c:	20003368 	.word	0x20003368
 8010c40:	20003254 	.word	0x20003254
 8010c44:	2000335c 	.word	0x2000335c
 8010c48:	20003258 	.word	0x20003258
 8010c4c:	2000018c 	.word	0x2000018c

08010c50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d10d      	bne.n	8010c7c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8010c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c64:	b672      	cpsid	i
 8010c66:	f383 8811 	msr	BASEPRI, r3
 8010c6a:	f3bf 8f6f 	isb	sy
 8010c6e:	f3bf 8f4f 	dsb	sy
 8010c72:	b662      	cpsie	i
 8010c74:	60fb      	str	r3, [r7, #12]
}
 8010c76:	bf00      	nop
 8010c78:	bf00      	nop
 8010c7a:	e7fd      	b.n	8010c78 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010c7c:	4b07      	ldr	r3, [pc, #28]	@ (8010c9c <vTaskPlaceOnEventList+0x4c>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	3318      	adds	r3, #24
 8010c82:	4619      	mov	r1, r3
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f7fe fb6a 	bl	800f35e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010c8a:	2101      	movs	r1, #1
 8010c8c:	6838      	ldr	r0, [r7, #0]
 8010c8e:	f000 fbb5 	bl	80113fc <prvAddCurrentTaskToDelayedList>
}
 8010c92:	bf00      	nop
 8010c94:	3710      	adds	r7, #16
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	20003254 	.word	0x20003254

08010ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b086      	sub	sp, #24
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	68db      	ldr	r3, [r3, #12]
 8010cae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d10d      	bne.n	8010cd2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8010cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cba:	b672      	cpsid	i
 8010cbc:	f383 8811 	msr	BASEPRI, r3
 8010cc0:	f3bf 8f6f 	isb	sy
 8010cc4:	f3bf 8f4f 	dsb	sy
 8010cc8:	b662      	cpsie	i
 8010cca:	60fb      	str	r3, [r7, #12]
}
 8010ccc:	bf00      	nop
 8010cce:	bf00      	nop
 8010cd0:	e7fd      	b.n	8010cce <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	3318      	adds	r3, #24
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fe fb7a 	bl	800f3d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8010d54 <xTaskRemoveFromEventList+0xb4>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d11c      	bne.n	8010d1e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	3304      	adds	r3, #4
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fe fb71 	bl	800f3d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	409a      	lsls	r2, r3
 8010cf6:	4b18      	ldr	r3, [pc, #96]	@ (8010d58 <xTaskRemoveFromEventList+0xb8>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4313      	orrs	r3, r2
 8010cfc:	4a16      	ldr	r2, [pc, #88]	@ (8010d58 <xTaskRemoveFromEventList+0xb8>)
 8010cfe:	6013      	str	r3, [r2, #0]
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d04:	4613      	mov	r3, r2
 8010d06:	009b      	lsls	r3, r3, #2
 8010d08:	4413      	add	r3, r2
 8010d0a:	009b      	lsls	r3, r3, #2
 8010d0c:	4a13      	ldr	r2, [pc, #76]	@ (8010d5c <xTaskRemoveFromEventList+0xbc>)
 8010d0e:	441a      	add	r2, r3
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	3304      	adds	r3, #4
 8010d14:	4619      	mov	r1, r3
 8010d16:	4610      	mov	r0, r2
 8010d18:	f7fe fafd 	bl	800f316 <vListInsertEnd>
 8010d1c:	e005      	b.n	8010d2a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	3318      	adds	r3, #24
 8010d22:	4619      	mov	r1, r3
 8010d24:	480e      	ldr	r0, [pc, #56]	@ (8010d60 <xTaskRemoveFromEventList+0xc0>)
 8010d26:	f7fe faf6 	bl	800f316 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8010d64 <xTaskRemoveFromEventList+0xc4>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d905      	bls.n	8010d44 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8010d68 <xTaskRemoveFromEventList+0xc8>)
 8010d3e:	2201      	movs	r2, #1
 8010d40:	601a      	str	r2, [r3, #0]
 8010d42:	e001      	b.n	8010d48 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8010d44:	2300      	movs	r3, #0
 8010d46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010d48:	697b      	ldr	r3, [r7, #20]
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3718      	adds	r7, #24
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	2000337c 	.word	0x2000337c
 8010d58:	2000335c 	.word	0x2000335c
 8010d5c:	20003258 	.word	0x20003258
 8010d60:	20003314 	.word	0x20003314
 8010d64:	20003254 	.word	0x20003254
 8010d68:	20003368 	.word	0x20003368

08010d6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010d74:	4b06      	ldr	r3, [pc, #24]	@ (8010d90 <vTaskInternalSetTimeOutState+0x24>)
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010d7c:	4b05      	ldr	r3, [pc, #20]	@ (8010d94 <vTaskInternalSetTimeOutState+0x28>)
 8010d7e:	681a      	ldr	r2, [r3, #0]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	605a      	str	r2, [r3, #4]
}
 8010d84:	bf00      	nop
 8010d86:	370c      	adds	r7, #12
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr
 8010d90:	2000336c 	.word	0x2000336c
 8010d94:	20003358 	.word	0x20003358

08010d98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b088      	sub	sp, #32
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d10d      	bne.n	8010dc4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8010da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dac:	b672      	cpsid	i
 8010dae:	f383 8811 	msr	BASEPRI, r3
 8010db2:	f3bf 8f6f 	isb	sy
 8010db6:	f3bf 8f4f 	dsb	sy
 8010dba:	b662      	cpsie	i
 8010dbc:	613b      	str	r3, [r7, #16]
}
 8010dbe:	bf00      	nop
 8010dc0:	bf00      	nop
 8010dc2:	e7fd      	b.n	8010dc0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d10d      	bne.n	8010de6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8010dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dce:	b672      	cpsid	i
 8010dd0:	f383 8811 	msr	BASEPRI, r3
 8010dd4:	f3bf 8f6f 	isb	sy
 8010dd8:	f3bf 8f4f 	dsb	sy
 8010ddc:	b662      	cpsie	i
 8010dde:	60fb      	str	r3, [r7, #12]
}
 8010de0:	bf00      	nop
 8010de2:	bf00      	nop
 8010de4:	e7fd      	b.n	8010de2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8010de6:	f000 fc81 	bl	80116ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010dea:	4b1d      	ldr	r3, [pc, #116]	@ (8010e60 <xTaskCheckForTimeOut+0xc8>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	69ba      	ldr	r2, [r7, #24]
 8010df6:	1ad3      	subs	r3, r2, r3
 8010df8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e02:	d102      	bne.n	8010e0a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010e04:	2300      	movs	r3, #0
 8010e06:	61fb      	str	r3, [r7, #28]
 8010e08:	e023      	b.n	8010e52 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	4b15      	ldr	r3, [pc, #84]	@ (8010e64 <xTaskCheckForTimeOut+0xcc>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d007      	beq.n	8010e26 <xTaskCheckForTimeOut+0x8e>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	685b      	ldr	r3, [r3, #4]
 8010e1a:	69ba      	ldr	r2, [r7, #24]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d302      	bcc.n	8010e26 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010e20:	2301      	movs	r3, #1
 8010e22:	61fb      	str	r3, [r7, #28]
 8010e24:	e015      	b.n	8010e52 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	697a      	ldr	r2, [r7, #20]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d20b      	bcs.n	8010e48 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	1ad2      	subs	r2, r2, r3
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f7ff ff95 	bl	8010d6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010e42:	2300      	movs	r3, #0
 8010e44:	61fb      	str	r3, [r7, #28]
 8010e46:	e004      	b.n	8010e52 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010e52:	f000 fc81 	bl	8011758 <vPortExitCritical>

	return xReturn;
 8010e56:	69fb      	ldr	r3, [r7, #28]
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3720      	adds	r7, #32
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	20003358 	.word	0x20003358
 8010e64:	2000336c 	.word	0x2000336c

08010e68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010e68:	b480      	push	{r7}
 8010e6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010e6c:	4b03      	ldr	r3, [pc, #12]	@ (8010e7c <vTaskMissedYield+0x14>)
 8010e6e:	2201      	movs	r2, #1
 8010e70:	601a      	str	r2, [r3, #0]
}
 8010e72:	bf00      	nop
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr
 8010e7c:	20003368 	.word	0x20003368

08010e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010e88:	f000 f854 	bl	8010f34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010e8c:	4b07      	ldr	r3, [pc, #28]	@ (8010eac <prvIdleTask+0x2c>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	d907      	bls.n	8010ea4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8010e94:	4b06      	ldr	r3, [pc, #24]	@ (8010eb0 <prvIdleTask+0x30>)
 8010e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e9a:	601a      	str	r2, [r3, #0]
 8010e9c:	f3bf 8f4f 	dsb	sy
 8010ea0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8010ea4:	f7f1 f884 	bl	8001fb0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8010ea8:	e7ee      	b.n	8010e88 <prvIdleTask+0x8>
 8010eaa:	bf00      	nop
 8010eac:	20003258 	.word	0x20003258
 8010eb0:	e000ed04 	.word	0xe000ed04

08010eb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010eba:	2300      	movs	r3, #0
 8010ebc:	607b      	str	r3, [r7, #4]
 8010ebe:	e00c      	b.n	8010eda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	4413      	add	r3, r2
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	4a12      	ldr	r2, [pc, #72]	@ (8010f14 <prvInitialiseTaskLists+0x60>)
 8010ecc:	4413      	add	r3, r2
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fe f9f4 	bl	800f2bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	3301      	adds	r3, #1
 8010ed8:	607b      	str	r3, [r7, #4]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2b06      	cmp	r3, #6
 8010ede:	d9ef      	bls.n	8010ec0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010ee0:	480d      	ldr	r0, [pc, #52]	@ (8010f18 <prvInitialiseTaskLists+0x64>)
 8010ee2:	f7fe f9eb 	bl	800f2bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010ee6:	480d      	ldr	r0, [pc, #52]	@ (8010f1c <prvInitialiseTaskLists+0x68>)
 8010ee8:	f7fe f9e8 	bl	800f2bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010eec:	480c      	ldr	r0, [pc, #48]	@ (8010f20 <prvInitialiseTaskLists+0x6c>)
 8010eee:	f7fe f9e5 	bl	800f2bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010ef2:	480c      	ldr	r0, [pc, #48]	@ (8010f24 <prvInitialiseTaskLists+0x70>)
 8010ef4:	f7fe f9e2 	bl	800f2bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010ef8:	480b      	ldr	r0, [pc, #44]	@ (8010f28 <prvInitialiseTaskLists+0x74>)
 8010efa:	f7fe f9df 	bl	800f2bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010efe:	4b0b      	ldr	r3, [pc, #44]	@ (8010f2c <prvInitialiseTaskLists+0x78>)
 8010f00:	4a05      	ldr	r2, [pc, #20]	@ (8010f18 <prvInitialiseTaskLists+0x64>)
 8010f02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010f04:	4b0a      	ldr	r3, [pc, #40]	@ (8010f30 <prvInitialiseTaskLists+0x7c>)
 8010f06:	4a05      	ldr	r2, [pc, #20]	@ (8010f1c <prvInitialiseTaskLists+0x68>)
 8010f08:	601a      	str	r2, [r3, #0]
}
 8010f0a:	bf00      	nop
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	20003258 	.word	0x20003258
 8010f18:	200032e4 	.word	0x200032e4
 8010f1c:	200032f8 	.word	0x200032f8
 8010f20:	20003314 	.word	0x20003314
 8010f24:	20003328 	.word	0x20003328
 8010f28:	20003340 	.word	0x20003340
 8010f2c:	2000330c 	.word	0x2000330c
 8010f30:	20003310 	.word	0x20003310

08010f34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f3a:	e019      	b.n	8010f70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010f3c:	f000 fbd6 	bl	80116ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f40:	4b10      	ldr	r3, [pc, #64]	@ (8010f84 <prvCheckTasksWaitingTermination+0x50>)
 8010f42:	68db      	ldr	r3, [r3, #12]
 8010f44:	68db      	ldr	r3, [r3, #12]
 8010f46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	3304      	adds	r3, #4
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7fe fa3f 	bl	800f3d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010f52:	4b0d      	ldr	r3, [pc, #52]	@ (8010f88 <prvCheckTasksWaitingTermination+0x54>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	3b01      	subs	r3, #1
 8010f58:	4a0b      	ldr	r2, [pc, #44]	@ (8010f88 <prvCheckTasksWaitingTermination+0x54>)
 8010f5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8010f8c <prvCheckTasksWaitingTermination+0x58>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	3b01      	subs	r3, #1
 8010f62:	4a0a      	ldr	r2, [pc, #40]	@ (8010f8c <prvCheckTasksWaitingTermination+0x58>)
 8010f64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010f66:	f000 fbf7 	bl	8011758 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f000 f810 	bl	8010f90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f70:	4b06      	ldr	r3, [pc, #24]	@ (8010f8c <prvCheckTasksWaitingTermination+0x58>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1e1      	bne.n	8010f3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010f78:	bf00      	nop
 8010f7a:	bf00      	nop
 8010f7c:	3708      	adds	r7, #8
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	20003328 	.word	0x20003328
 8010f88:	20003354 	.word	0x20003354
 8010f8c:	2000333c 	.word	0x2000333c

08010f90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	3350      	adds	r3, #80	@ 0x50
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f002 fced 	bl	801397c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d108      	bne.n	8010fbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f000 fd9b 	bl	8011aec <vPortFree>
				vPortFree( pxTCB );
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f000 fd98 	bl	8011aec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010fbc:	e01b      	b.n	8010ff6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d103      	bne.n	8010fd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f000 fd8f 	bl	8011aec <vPortFree>
	}
 8010fce:	e012      	b.n	8010ff6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8010fd6:	2b02      	cmp	r3, #2
 8010fd8:	d00d      	beq.n	8010ff6 <prvDeleteTCB+0x66>
	__asm volatile
 8010fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fde:	b672      	cpsid	i
 8010fe0:	f383 8811 	msr	BASEPRI, r3
 8010fe4:	f3bf 8f6f 	isb	sy
 8010fe8:	f3bf 8f4f 	dsb	sy
 8010fec:	b662      	cpsie	i
 8010fee:	60fb      	str	r3, [r7, #12]
}
 8010ff0:	bf00      	nop
 8010ff2:	bf00      	nop
 8010ff4:	e7fd      	b.n	8010ff2 <prvDeleteTCB+0x62>
	}
 8010ff6:	bf00      	nop
 8010ff8:	3710      	adds	r7, #16
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}
	...

08011000 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011000:	b480      	push	{r7}
 8011002:	b083      	sub	sp, #12
 8011004:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011006:	4b0c      	ldr	r3, [pc, #48]	@ (8011038 <prvResetNextTaskUnblockTime+0x38>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d104      	bne.n	801101a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011010:	4b0a      	ldr	r3, [pc, #40]	@ (801103c <prvResetNextTaskUnblockTime+0x3c>)
 8011012:	f04f 32ff 	mov.w	r2, #4294967295
 8011016:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011018:	e008      	b.n	801102c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801101a:	4b07      	ldr	r3, [pc, #28]	@ (8011038 <prvResetNextTaskUnblockTime+0x38>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	68db      	ldr	r3, [r3, #12]
 8011022:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	4a04      	ldr	r2, [pc, #16]	@ (801103c <prvResetNextTaskUnblockTime+0x3c>)
 801102a:	6013      	str	r3, [r2, #0]
}
 801102c:	bf00      	nop
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr
 8011038:	2000330c 	.word	0x2000330c
 801103c:	20003374 	.word	0x20003374

08011040 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011046:	4b0b      	ldr	r3, [pc, #44]	@ (8011074 <xTaskGetSchedulerState+0x34>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d102      	bne.n	8011054 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801104e:	2301      	movs	r3, #1
 8011050:	607b      	str	r3, [r7, #4]
 8011052:	e008      	b.n	8011066 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011054:	4b08      	ldr	r3, [pc, #32]	@ (8011078 <xTaskGetSchedulerState+0x38>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d102      	bne.n	8011062 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801105c:	2302      	movs	r3, #2
 801105e:	607b      	str	r3, [r7, #4]
 8011060:	e001      	b.n	8011066 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011062:	2300      	movs	r3, #0
 8011064:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011066:	687b      	ldr	r3, [r7, #4]
	}
 8011068:	4618      	mov	r0, r3
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr
 8011074:	20003360 	.word	0x20003360
 8011078:	2000337c 	.word	0x2000337c

0801107c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011088:	2300      	movs	r3, #0
 801108a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d069      	beq.n	8011166 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011096:	4b36      	ldr	r3, [pc, #216]	@ (8011170 <xTaskPriorityInherit+0xf4>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801109c:	429a      	cmp	r2, r3
 801109e:	d259      	bcs.n	8011154 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	699b      	ldr	r3, [r3, #24]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	db06      	blt.n	80110b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110a8:	4b31      	ldr	r3, [pc, #196]	@ (8011170 <xTaskPriorityInherit+0xf4>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110ae:	f1c3 0207 	rsb	r2, r3, #7
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	6959      	ldr	r1, [r3, #20]
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110be:	4613      	mov	r3, r2
 80110c0:	009b      	lsls	r3, r3, #2
 80110c2:	4413      	add	r3, r2
 80110c4:	009b      	lsls	r3, r3, #2
 80110c6:	4a2b      	ldr	r2, [pc, #172]	@ (8011174 <xTaskPriorityInherit+0xf8>)
 80110c8:	4413      	add	r3, r2
 80110ca:	4299      	cmp	r1, r3
 80110cc:	d13a      	bne.n	8011144 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	3304      	adds	r3, #4
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7fe f97c 	bl	800f3d0 <uxListRemove>
 80110d8:	4603      	mov	r3, r0
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d115      	bne.n	801110a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80110e2:	4924      	ldr	r1, [pc, #144]	@ (8011174 <xTaskPriorityInherit+0xf8>)
 80110e4:	4613      	mov	r3, r2
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	4413      	add	r3, r2
 80110ea:	009b      	lsls	r3, r3, #2
 80110ec:	440b      	add	r3, r1
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d10a      	bne.n	801110a <xTaskPriorityInherit+0x8e>
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110f8:	2201      	movs	r2, #1
 80110fa:	fa02 f303 	lsl.w	r3, r2, r3
 80110fe:	43da      	mvns	r2, r3
 8011100:	4b1d      	ldr	r3, [pc, #116]	@ (8011178 <xTaskPriorityInherit+0xfc>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	4013      	ands	r3, r2
 8011106:	4a1c      	ldr	r2, [pc, #112]	@ (8011178 <xTaskPriorityInherit+0xfc>)
 8011108:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801110a:	4b19      	ldr	r3, [pc, #100]	@ (8011170 <xTaskPriorityInherit+0xf4>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011118:	2201      	movs	r2, #1
 801111a:	409a      	lsls	r2, r3
 801111c:	4b16      	ldr	r3, [pc, #88]	@ (8011178 <xTaskPriorityInherit+0xfc>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4313      	orrs	r3, r2
 8011122:	4a15      	ldr	r2, [pc, #84]	@ (8011178 <xTaskPriorityInherit+0xfc>)
 8011124:	6013      	str	r3, [r2, #0]
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801112a:	4613      	mov	r3, r2
 801112c:	009b      	lsls	r3, r3, #2
 801112e:	4413      	add	r3, r2
 8011130:	009b      	lsls	r3, r3, #2
 8011132:	4a10      	ldr	r2, [pc, #64]	@ (8011174 <xTaskPriorityInherit+0xf8>)
 8011134:	441a      	add	r2, r3
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	3304      	adds	r3, #4
 801113a:	4619      	mov	r1, r3
 801113c:	4610      	mov	r0, r2
 801113e:	f7fe f8ea 	bl	800f316 <vListInsertEnd>
 8011142:	e004      	b.n	801114e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011144:	4b0a      	ldr	r3, [pc, #40]	@ (8011170 <xTaskPriorityInherit+0xf4>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801114e:	2301      	movs	r3, #1
 8011150:	60fb      	str	r3, [r7, #12]
 8011152:	e008      	b.n	8011166 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011158:	4b05      	ldr	r3, [pc, #20]	@ (8011170 <xTaskPriorityInherit+0xf4>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801115e:	429a      	cmp	r2, r3
 8011160:	d201      	bcs.n	8011166 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011162:	2301      	movs	r3, #1
 8011164:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011166:	68fb      	ldr	r3, [r7, #12]
	}
 8011168:	4618      	mov	r0, r3
 801116a:	3710      	adds	r7, #16
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	20003254 	.word	0x20003254
 8011174:	20003258 	.word	0x20003258
 8011178:	2000335c 	.word	0x2000335c

0801117c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801117c:	b580      	push	{r7, lr}
 801117e:	b086      	sub	sp, #24
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011188:	2300      	movs	r3, #0
 801118a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d074      	beq.n	801127c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011192:	4b3d      	ldr	r3, [pc, #244]	@ (8011288 <xTaskPriorityDisinherit+0x10c>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	693a      	ldr	r2, [r7, #16]
 8011198:	429a      	cmp	r2, r3
 801119a:	d00d      	beq.n	80111b8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801119c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111a0:	b672      	cpsid	i
 80111a2:	f383 8811 	msr	BASEPRI, r3
 80111a6:	f3bf 8f6f 	isb	sy
 80111aa:	f3bf 8f4f 	dsb	sy
 80111ae:	b662      	cpsie	i
 80111b0:	60fb      	str	r3, [r7, #12]
}
 80111b2:	bf00      	nop
 80111b4:	bf00      	nop
 80111b6:	e7fd      	b.n	80111b4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d10d      	bne.n	80111dc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80111c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111c4:	b672      	cpsid	i
 80111c6:	f383 8811 	msr	BASEPRI, r3
 80111ca:	f3bf 8f6f 	isb	sy
 80111ce:	f3bf 8f4f 	dsb	sy
 80111d2:	b662      	cpsie	i
 80111d4:	60bb      	str	r3, [r7, #8]
}
 80111d6:	bf00      	nop
 80111d8:	bf00      	nop
 80111da:	e7fd      	b.n	80111d8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80111e0:	1e5a      	subs	r2, r3, #1
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d044      	beq.n	801127c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d140      	bne.n	801127c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	3304      	adds	r3, #4
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fe f8e6 	bl	800f3d0 <uxListRemove>
 8011204:	4603      	mov	r3, r0
 8011206:	2b00      	cmp	r3, #0
 8011208:	d115      	bne.n	8011236 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801120e:	491f      	ldr	r1, [pc, #124]	@ (801128c <xTaskPriorityDisinherit+0x110>)
 8011210:	4613      	mov	r3, r2
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	4413      	add	r3, r2
 8011216:	009b      	lsls	r3, r3, #2
 8011218:	440b      	add	r3, r1
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d10a      	bne.n	8011236 <xTaskPriorityDisinherit+0xba>
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011224:	2201      	movs	r2, #1
 8011226:	fa02 f303 	lsl.w	r3, r2, r3
 801122a:	43da      	mvns	r2, r3
 801122c:	4b18      	ldr	r3, [pc, #96]	@ (8011290 <xTaskPriorityDisinherit+0x114>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	4013      	ands	r3, r2
 8011232:	4a17      	ldr	r2, [pc, #92]	@ (8011290 <xTaskPriorityDisinherit+0x114>)
 8011234:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011242:	f1c3 0207 	rsb	r2, r3, #7
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801124e:	2201      	movs	r2, #1
 8011250:	409a      	lsls	r2, r3
 8011252:	4b0f      	ldr	r3, [pc, #60]	@ (8011290 <xTaskPriorityDisinherit+0x114>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	4313      	orrs	r3, r2
 8011258:	4a0d      	ldr	r2, [pc, #52]	@ (8011290 <xTaskPriorityDisinherit+0x114>)
 801125a:	6013      	str	r3, [r2, #0]
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011260:	4613      	mov	r3, r2
 8011262:	009b      	lsls	r3, r3, #2
 8011264:	4413      	add	r3, r2
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	4a08      	ldr	r2, [pc, #32]	@ (801128c <xTaskPriorityDisinherit+0x110>)
 801126a:	441a      	add	r2, r3
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	3304      	adds	r3, #4
 8011270:	4619      	mov	r1, r3
 8011272:	4610      	mov	r0, r2
 8011274:	f7fe f84f 	bl	800f316 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011278:	2301      	movs	r3, #1
 801127a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801127c:	697b      	ldr	r3, [r7, #20]
	}
 801127e:	4618      	mov	r0, r3
 8011280:	3718      	adds	r7, #24
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	20003254 	.word	0x20003254
 801128c:	20003258 	.word	0x20003258
 8011290:	2000335c 	.word	0x2000335c

08011294 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011294:	b580      	push	{r7, lr}
 8011296:	b088      	sub	sp, #32
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80112a2:	2301      	movs	r3, #1
 80112a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	f000 8089 	beq.w	80113c0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d10d      	bne.n	80112d2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80112b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112ba:	b672      	cpsid	i
 80112bc:	f383 8811 	msr	BASEPRI, r3
 80112c0:	f3bf 8f6f 	isb	sy
 80112c4:	f3bf 8f4f 	dsb	sy
 80112c8:	b662      	cpsie	i
 80112ca:	60fb      	str	r3, [r7, #12]
}
 80112cc:	bf00      	nop
 80112ce:	bf00      	nop
 80112d0:	e7fd      	b.n	80112ce <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80112d2:	69bb      	ldr	r3, [r7, #24]
 80112d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112d6:	683a      	ldr	r2, [r7, #0]
 80112d8:	429a      	cmp	r2, r3
 80112da:	d902      	bls.n	80112e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	61fb      	str	r3, [r7, #28]
 80112e0:	e002      	b.n	80112e8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80112e2:	69bb      	ldr	r3, [r7, #24]
 80112e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80112e8:	69bb      	ldr	r3, [r7, #24]
 80112ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112ec:	69fa      	ldr	r2, [r7, #28]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d066      	beq.n	80113c0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80112f2:	69bb      	ldr	r3, [r7, #24]
 80112f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80112f6:	697a      	ldr	r2, [r7, #20]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d161      	bne.n	80113c0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80112fc:	4b32      	ldr	r3, [pc, #200]	@ (80113c8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	69ba      	ldr	r2, [r7, #24]
 8011302:	429a      	cmp	r2, r3
 8011304:	d10d      	bne.n	8011322 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8011306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801130a:	b672      	cpsid	i
 801130c:	f383 8811 	msr	BASEPRI, r3
 8011310:	f3bf 8f6f 	isb	sy
 8011314:	f3bf 8f4f 	dsb	sy
 8011318:	b662      	cpsie	i
 801131a:	60bb      	str	r3, [r7, #8]
}
 801131c:	bf00      	nop
 801131e:	bf00      	nop
 8011320:	e7fd      	b.n	801131e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011322:	69bb      	ldr	r3, [r7, #24]
 8011324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011326:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011328:	69bb      	ldr	r3, [r7, #24]
 801132a:	69fa      	ldr	r2, [r7, #28]
 801132c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801132e:	69bb      	ldr	r3, [r7, #24]
 8011330:	699b      	ldr	r3, [r3, #24]
 8011332:	2b00      	cmp	r3, #0
 8011334:	db04      	blt.n	8011340 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011336:	69fb      	ldr	r3, [r7, #28]
 8011338:	f1c3 0207 	rsb	r2, r3, #7
 801133c:	69bb      	ldr	r3, [r7, #24]
 801133e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011340:	69bb      	ldr	r3, [r7, #24]
 8011342:	6959      	ldr	r1, [r3, #20]
 8011344:	693a      	ldr	r2, [r7, #16]
 8011346:	4613      	mov	r3, r2
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	4413      	add	r3, r2
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	4a1f      	ldr	r2, [pc, #124]	@ (80113cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011350:	4413      	add	r3, r2
 8011352:	4299      	cmp	r1, r3
 8011354:	d134      	bne.n	80113c0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011356:	69bb      	ldr	r3, [r7, #24]
 8011358:	3304      	adds	r3, #4
 801135a:	4618      	mov	r0, r3
 801135c:	f7fe f838 	bl	800f3d0 <uxListRemove>
 8011360:	4603      	mov	r3, r0
 8011362:	2b00      	cmp	r3, #0
 8011364:	d115      	bne.n	8011392 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011366:	69bb      	ldr	r3, [r7, #24]
 8011368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801136a:	4918      	ldr	r1, [pc, #96]	@ (80113cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801136c:	4613      	mov	r3, r2
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	4413      	add	r3, r2
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	440b      	add	r3, r1
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d10a      	bne.n	8011392 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 801137c:	69bb      	ldr	r3, [r7, #24]
 801137e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011380:	2201      	movs	r2, #1
 8011382:	fa02 f303 	lsl.w	r3, r2, r3
 8011386:	43da      	mvns	r2, r3
 8011388:	4b11      	ldr	r3, [pc, #68]	@ (80113d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4013      	ands	r3, r2
 801138e:	4a10      	ldr	r2, [pc, #64]	@ (80113d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011390:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011392:	69bb      	ldr	r3, [r7, #24]
 8011394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011396:	2201      	movs	r2, #1
 8011398:	409a      	lsls	r2, r3
 801139a:	4b0d      	ldr	r3, [pc, #52]	@ (80113d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	4313      	orrs	r3, r2
 80113a0:	4a0b      	ldr	r2, [pc, #44]	@ (80113d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80113a2:	6013      	str	r3, [r2, #0]
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113a8:	4613      	mov	r3, r2
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	4413      	add	r3, r2
 80113ae:	009b      	lsls	r3, r3, #2
 80113b0:	4a06      	ldr	r2, [pc, #24]	@ (80113cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80113b2:	441a      	add	r2, r3
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	3304      	adds	r3, #4
 80113b8:	4619      	mov	r1, r3
 80113ba:	4610      	mov	r0, r2
 80113bc:	f7fd ffab 	bl	800f316 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80113c0:	bf00      	nop
 80113c2:	3720      	adds	r7, #32
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	20003254 	.word	0x20003254
 80113cc:	20003258 	.word	0x20003258
 80113d0:	2000335c 	.word	0x2000335c

080113d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80113d4:	b480      	push	{r7}
 80113d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80113d8:	4b07      	ldr	r3, [pc, #28]	@ (80113f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d004      	beq.n	80113ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80113e0:	4b05      	ldr	r3, [pc, #20]	@ (80113f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80113e6:	3201      	adds	r2, #1
 80113e8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80113ea:	4b03      	ldr	r3, [pc, #12]	@ (80113f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80113ec:	681b      	ldr	r3, [r3, #0]
	}
 80113ee:	4618      	mov	r0, r3
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr
 80113f8:	20003254 	.word	0x20003254

080113fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011406:	4b29      	ldr	r3, [pc, #164]	@ (80114ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801140c:	4b28      	ldr	r3, [pc, #160]	@ (80114b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	3304      	adds	r3, #4
 8011412:	4618      	mov	r0, r3
 8011414:	f7fd ffdc 	bl	800f3d0 <uxListRemove>
 8011418:	4603      	mov	r3, r0
 801141a:	2b00      	cmp	r3, #0
 801141c:	d10b      	bne.n	8011436 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801141e:	4b24      	ldr	r3, [pc, #144]	@ (80114b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011424:	2201      	movs	r2, #1
 8011426:	fa02 f303 	lsl.w	r3, r2, r3
 801142a:	43da      	mvns	r2, r3
 801142c:	4b21      	ldr	r3, [pc, #132]	@ (80114b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	4013      	ands	r3, r2
 8011432:	4a20      	ldr	r2, [pc, #128]	@ (80114b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011434:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801143c:	d10a      	bne.n	8011454 <prvAddCurrentTaskToDelayedList+0x58>
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d007      	beq.n	8011454 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011444:	4b1a      	ldr	r3, [pc, #104]	@ (80114b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	3304      	adds	r3, #4
 801144a:	4619      	mov	r1, r3
 801144c:	481a      	ldr	r0, [pc, #104]	@ (80114b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801144e:	f7fd ff62 	bl	800f316 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011452:	e026      	b.n	80114a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011454:	68fa      	ldr	r2, [r7, #12]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	4413      	add	r3, r2
 801145a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801145c:	4b14      	ldr	r3, [pc, #80]	@ (80114b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	68ba      	ldr	r2, [r7, #8]
 8011462:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011464:	68ba      	ldr	r2, [r7, #8]
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	429a      	cmp	r2, r3
 801146a:	d209      	bcs.n	8011480 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801146c:	4b13      	ldr	r3, [pc, #76]	@ (80114bc <prvAddCurrentTaskToDelayedList+0xc0>)
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	4b0f      	ldr	r3, [pc, #60]	@ (80114b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	3304      	adds	r3, #4
 8011476:	4619      	mov	r1, r3
 8011478:	4610      	mov	r0, r2
 801147a:	f7fd ff70 	bl	800f35e <vListInsert>
}
 801147e:	e010      	b.n	80114a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011480:	4b0f      	ldr	r3, [pc, #60]	@ (80114c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011482:	681a      	ldr	r2, [r3, #0]
 8011484:	4b0a      	ldr	r3, [pc, #40]	@ (80114b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	3304      	adds	r3, #4
 801148a:	4619      	mov	r1, r3
 801148c:	4610      	mov	r0, r2
 801148e:	f7fd ff66 	bl	800f35e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011492:	4b0c      	ldr	r3, [pc, #48]	@ (80114c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	68ba      	ldr	r2, [r7, #8]
 8011498:	429a      	cmp	r2, r3
 801149a:	d202      	bcs.n	80114a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801149c:	4a09      	ldr	r2, [pc, #36]	@ (80114c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	6013      	str	r3, [r2, #0]
}
 80114a2:	bf00      	nop
 80114a4:	3710      	adds	r7, #16
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	bf00      	nop
 80114ac:	20003358 	.word	0x20003358
 80114b0:	20003254 	.word	0x20003254
 80114b4:	2000335c 	.word	0x2000335c
 80114b8:	20003340 	.word	0x20003340
 80114bc:	20003310 	.word	0x20003310
 80114c0:	2000330c 	.word	0x2000330c
 80114c4:	20003374 	.word	0x20003374

080114c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80114c8:	b480      	push	{r7}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	3b04      	subs	r3, #4
 80114d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80114e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	3b04      	subs	r3, #4
 80114e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	f023 0201 	bic.w	r2, r3, #1
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	3b04      	subs	r3, #4
 80114f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80114f8:	4a0c      	ldr	r2, [pc, #48]	@ (801152c <pxPortInitialiseStack+0x64>)
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	3b14      	subs	r3, #20
 8011502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	3b04      	subs	r3, #4
 801150e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	f06f 0202 	mvn.w	r2, #2
 8011516:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	3b20      	subs	r3, #32
 801151c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801151e:	68fb      	ldr	r3, [r7, #12]
}
 8011520:	4618      	mov	r0, r3
 8011522:	3714      	adds	r7, #20
 8011524:	46bd      	mov	sp, r7
 8011526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152a:	4770      	bx	lr
 801152c:	08011531 	.word	0x08011531

08011530 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011530:	b480      	push	{r7}
 8011532:	b085      	sub	sp, #20
 8011534:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011536:	2300      	movs	r3, #0
 8011538:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801153a:	4b15      	ldr	r3, [pc, #84]	@ (8011590 <prvTaskExitError+0x60>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011542:	d00d      	beq.n	8011560 <prvTaskExitError+0x30>
	__asm volatile
 8011544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011548:	b672      	cpsid	i
 801154a:	f383 8811 	msr	BASEPRI, r3
 801154e:	f3bf 8f6f 	isb	sy
 8011552:	f3bf 8f4f 	dsb	sy
 8011556:	b662      	cpsie	i
 8011558:	60fb      	str	r3, [r7, #12]
}
 801155a:	bf00      	nop
 801155c:	bf00      	nop
 801155e:	e7fd      	b.n	801155c <prvTaskExitError+0x2c>
	__asm volatile
 8011560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011564:	b672      	cpsid	i
 8011566:	f383 8811 	msr	BASEPRI, r3
 801156a:	f3bf 8f6f 	isb	sy
 801156e:	f3bf 8f4f 	dsb	sy
 8011572:	b662      	cpsie	i
 8011574:	60bb      	str	r3, [r7, #8]
}
 8011576:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011578:	bf00      	nop
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d0fc      	beq.n	801157a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011580:	bf00      	nop
 8011582:	bf00      	nop
 8011584:	3714      	adds	r7, #20
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr
 801158e:	bf00      	nop
 8011590:	20000010 	.word	0x20000010
	...

080115a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80115a0:	4b07      	ldr	r3, [pc, #28]	@ (80115c0 <pxCurrentTCBConst2>)
 80115a2:	6819      	ldr	r1, [r3, #0]
 80115a4:	6808      	ldr	r0, [r1, #0]
 80115a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115aa:	f380 8809 	msr	PSP, r0
 80115ae:	f3bf 8f6f 	isb	sy
 80115b2:	f04f 0000 	mov.w	r0, #0
 80115b6:	f380 8811 	msr	BASEPRI, r0
 80115ba:	4770      	bx	lr
 80115bc:	f3af 8000 	nop.w

080115c0 <pxCurrentTCBConst2>:
 80115c0:	20003254 	.word	0x20003254
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80115c4:	bf00      	nop
 80115c6:	bf00      	nop

080115c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80115c8:	4808      	ldr	r0, [pc, #32]	@ (80115ec <prvPortStartFirstTask+0x24>)
 80115ca:	6800      	ldr	r0, [r0, #0]
 80115cc:	6800      	ldr	r0, [r0, #0]
 80115ce:	f380 8808 	msr	MSP, r0
 80115d2:	f04f 0000 	mov.w	r0, #0
 80115d6:	f380 8814 	msr	CONTROL, r0
 80115da:	b662      	cpsie	i
 80115dc:	b661      	cpsie	f
 80115de:	f3bf 8f4f 	dsb	sy
 80115e2:	f3bf 8f6f 	isb	sy
 80115e6:	df00      	svc	0
 80115e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80115ea:	bf00      	nop
 80115ec:	e000ed08 	.word	0xe000ed08

080115f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80115f6:	4b37      	ldr	r3, [pc, #220]	@ (80116d4 <xPortStartScheduler+0xe4>)
 80115f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	b2db      	uxtb	r3, r3
 8011600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	22ff      	movs	r2, #255	@ 0xff
 8011606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	b2db      	uxtb	r3, r3
 801160e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011610:	78fb      	ldrb	r3, [r7, #3]
 8011612:	b2db      	uxtb	r3, r3
 8011614:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011618:	b2da      	uxtb	r2, r3
 801161a:	4b2f      	ldr	r3, [pc, #188]	@ (80116d8 <xPortStartScheduler+0xe8>)
 801161c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801161e:	4b2f      	ldr	r3, [pc, #188]	@ (80116dc <xPortStartScheduler+0xec>)
 8011620:	2207      	movs	r2, #7
 8011622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011624:	e009      	b.n	801163a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011626:	4b2d      	ldr	r3, [pc, #180]	@ (80116dc <xPortStartScheduler+0xec>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	3b01      	subs	r3, #1
 801162c:	4a2b      	ldr	r2, [pc, #172]	@ (80116dc <xPortStartScheduler+0xec>)
 801162e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011630:	78fb      	ldrb	r3, [r7, #3]
 8011632:	b2db      	uxtb	r3, r3
 8011634:	005b      	lsls	r3, r3, #1
 8011636:	b2db      	uxtb	r3, r3
 8011638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801163a:	78fb      	ldrb	r3, [r7, #3]
 801163c:	b2db      	uxtb	r3, r3
 801163e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011642:	2b80      	cmp	r3, #128	@ 0x80
 8011644:	d0ef      	beq.n	8011626 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011646:	4b25      	ldr	r3, [pc, #148]	@ (80116dc <xPortStartScheduler+0xec>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	f1c3 0307 	rsb	r3, r3, #7
 801164e:	2b04      	cmp	r3, #4
 8011650:	d00d      	beq.n	801166e <xPortStartScheduler+0x7e>
	__asm volatile
 8011652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011656:	b672      	cpsid	i
 8011658:	f383 8811 	msr	BASEPRI, r3
 801165c:	f3bf 8f6f 	isb	sy
 8011660:	f3bf 8f4f 	dsb	sy
 8011664:	b662      	cpsie	i
 8011666:	60bb      	str	r3, [r7, #8]
}
 8011668:	bf00      	nop
 801166a:	bf00      	nop
 801166c:	e7fd      	b.n	801166a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801166e:	4b1b      	ldr	r3, [pc, #108]	@ (80116dc <xPortStartScheduler+0xec>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	021b      	lsls	r3, r3, #8
 8011674:	4a19      	ldr	r2, [pc, #100]	@ (80116dc <xPortStartScheduler+0xec>)
 8011676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011678:	4b18      	ldr	r3, [pc, #96]	@ (80116dc <xPortStartScheduler+0xec>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011680:	4a16      	ldr	r2, [pc, #88]	@ (80116dc <xPortStartScheduler+0xec>)
 8011682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	b2da      	uxtb	r2, r3
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801168c:	4b14      	ldr	r3, [pc, #80]	@ (80116e0 <xPortStartScheduler+0xf0>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4a13      	ldr	r2, [pc, #76]	@ (80116e0 <xPortStartScheduler+0xf0>)
 8011692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011698:	4b11      	ldr	r3, [pc, #68]	@ (80116e0 <xPortStartScheduler+0xf0>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	4a10      	ldr	r2, [pc, #64]	@ (80116e0 <xPortStartScheduler+0xf0>)
 801169e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80116a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80116a4:	f000 f8dc 	bl	8011860 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80116a8:	4b0e      	ldr	r3, [pc, #56]	@ (80116e4 <xPortStartScheduler+0xf4>)
 80116aa:	2200      	movs	r2, #0
 80116ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80116ae:	f000 f8fb 	bl	80118a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80116b2:	4b0d      	ldr	r3, [pc, #52]	@ (80116e8 <xPortStartScheduler+0xf8>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	4a0c      	ldr	r2, [pc, #48]	@ (80116e8 <xPortStartScheduler+0xf8>)
 80116b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80116bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80116be:	f7ff ff83 	bl	80115c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80116c2:	f7ff fa3b 	bl	8010b3c <vTaskSwitchContext>
	prvTaskExitError();
 80116c6:	f7ff ff33 	bl	8011530 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80116ca:	2300      	movs	r3, #0
}
 80116cc:	4618      	mov	r0, r3
 80116ce:	3710      	adds	r7, #16
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	e000e400 	.word	0xe000e400
 80116d8:	20003380 	.word	0x20003380
 80116dc:	20003384 	.word	0x20003384
 80116e0:	e000ed20 	.word	0xe000ed20
 80116e4:	20000010 	.word	0x20000010
 80116e8:	e000ef34 	.word	0xe000ef34

080116ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80116ec:	b480      	push	{r7}
 80116ee:	b083      	sub	sp, #12
 80116f0:	af00      	add	r7, sp, #0
	__asm volatile
 80116f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116f6:	b672      	cpsid	i
 80116f8:	f383 8811 	msr	BASEPRI, r3
 80116fc:	f3bf 8f6f 	isb	sy
 8011700:	f3bf 8f4f 	dsb	sy
 8011704:	b662      	cpsie	i
 8011706:	607b      	str	r3, [r7, #4]
}
 8011708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801170a:	4b11      	ldr	r3, [pc, #68]	@ (8011750 <vPortEnterCritical+0x64>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	3301      	adds	r3, #1
 8011710:	4a0f      	ldr	r2, [pc, #60]	@ (8011750 <vPortEnterCritical+0x64>)
 8011712:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011714:	4b0e      	ldr	r3, [pc, #56]	@ (8011750 <vPortEnterCritical+0x64>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2b01      	cmp	r3, #1
 801171a:	d112      	bne.n	8011742 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801171c:	4b0d      	ldr	r3, [pc, #52]	@ (8011754 <vPortEnterCritical+0x68>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	b2db      	uxtb	r3, r3
 8011722:	2b00      	cmp	r3, #0
 8011724:	d00d      	beq.n	8011742 <vPortEnterCritical+0x56>
	__asm volatile
 8011726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801172a:	b672      	cpsid	i
 801172c:	f383 8811 	msr	BASEPRI, r3
 8011730:	f3bf 8f6f 	isb	sy
 8011734:	f3bf 8f4f 	dsb	sy
 8011738:	b662      	cpsie	i
 801173a:	603b      	str	r3, [r7, #0]
}
 801173c:	bf00      	nop
 801173e:	bf00      	nop
 8011740:	e7fd      	b.n	801173e <vPortEnterCritical+0x52>
	}
}
 8011742:	bf00      	nop
 8011744:	370c      	adds	r7, #12
 8011746:	46bd      	mov	sp, r7
 8011748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174c:	4770      	bx	lr
 801174e:	bf00      	nop
 8011750:	20000010 	.word	0x20000010
 8011754:	e000ed04 	.word	0xe000ed04

08011758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011758:	b480      	push	{r7}
 801175a:	b083      	sub	sp, #12
 801175c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801175e:	4b13      	ldr	r3, [pc, #76]	@ (80117ac <vPortExitCritical+0x54>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d10d      	bne.n	8011782 <vPortExitCritical+0x2a>
	__asm volatile
 8011766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801176a:	b672      	cpsid	i
 801176c:	f383 8811 	msr	BASEPRI, r3
 8011770:	f3bf 8f6f 	isb	sy
 8011774:	f3bf 8f4f 	dsb	sy
 8011778:	b662      	cpsie	i
 801177a:	607b      	str	r3, [r7, #4]
}
 801177c:	bf00      	nop
 801177e:	bf00      	nop
 8011780:	e7fd      	b.n	801177e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8011782:	4b0a      	ldr	r3, [pc, #40]	@ (80117ac <vPortExitCritical+0x54>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	3b01      	subs	r3, #1
 8011788:	4a08      	ldr	r2, [pc, #32]	@ (80117ac <vPortExitCritical+0x54>)
 801178a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801178c:	4b07      	ldr	r3, [pc, #28]	@ (80117ac <vPortExitCritical+0x54>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d105      	bne.n	80117a0 <vPortExitCritical+0x48>
 8011794:	2300      	movs	r3, #0
 8011796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	f383 8811 	msr	BASEPRI, r3
}
 801179e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80117a0:	bf00      	nop
 80117a2:	370c      	adds	r7, #12
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr
 80117ac:	20000010 	.word	0x20000010

080117b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80117b0:	f3ef 8009 	mrs	r0, PSP
 80117b4:	f3bf 8f6f 	isb	sy
 80117b8:	4b15      	ldr	r3, [pc, #84]	@ (8011810 <pxCurrentTCBConst>)
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	f01e 0f10 	tst.w	lr, #16
 80117c0:	bf08      	it	eq
 80117c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80117c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ca:	6010      	str	r0, [r2, #0]
 80117cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80117d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80117d4:	b672      	cpsid	i
 80117d6:	f380 8811 	msr	BASEPRI, r0
 80117da:	f3bf 8f4f 	dsb	sy
 80117de:	f3bf 8f6f 	isb	sy
 80117e2:	b662      	cpsie	i
 80117e4:	f7ff f9aa 	bl	8010b3c <vTaskSwitchContext>
 80117e8:	f04f 0000 	mov.w	r0, #0
 80117ec:	f380 8811 	msr	BASEPRI, r0
 80117f0:	bc09      	pop	{r0, r3}
 80117f2:	6819      	ldr	r1, [r3, #0]
 80117f4:	6808      	ldr	r0, [r1, #0]
 80117f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117fa:	f01e 0f10 	tst.w	lr, #16
 80117fe:	bf08      	it	eq
 8011800:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011804:	f380 8809 	msr	PSP, r0
 8011808:	f3bf 8f6f 	isb	sy
 801180c:	4770      	bx	lr
 801180e:	bf00      	nop

08011810 <pxCurrentTCBConst>:
 8011810:	20003254 	.word	0x20003254
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011814:	bf00      	nop
 8011816:	bf00      	nop

08011818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
	__asm volatile
 801181e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011822:	b672      	cpsid	i
 8011824:	f383 8811 	msr	BASEPRI, r3
 8011828:	f3bf 8f6f 	isb	sy
 801182c:	f3bf 8f4f 	dsb	sy
 8011830:	b662      	cpsie	i
 8011832:	607b      	str	r3, [r7, #4]
}
 8011834:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011836:	f7ff f8c5 	bl	80109c4 <xTaskIncrementTick>
 801183a:	4603      	mov	r3, r0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d003      	beq.n	8011848 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011840:	4b06      	ldr	r3, [pc, #24]	@ (801185c <SysTick_Handler+0x44>)
 8011842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011846:	601a      	str	r2, [r3, #0]
 8011848:	2300      	movs	r3, #0
 801184a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	f383 8811 	msr	BASEPRI, r3
}
 8011852:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011854:	bf00      	nop
 8011856:	3708      	adds	r7, #8
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}
 801185c:	e000ed04 	.word	0xe000ed04

08011860 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011860:	b480      	push	{r7}
 8011862:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011864:	4b0b      	ldr	r3, [pc, #44]	@ (8011894 <vPortSetupTimerInterrupt+0x34>)
 8011866:	2200      	movs	r2, #0
 8011868:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801186a:	4b0b      	ldr	r3, [pc, #44]	@ (8011898 <vPortSetupTimerInterrupt+0x38>)
 801186c:	2200      	movs	r2, #0
 801186e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011870:	4b0a      	ldr	r3, [pc, #40]	@ (801189c <vPortSetupTimerInterrupt+0x3c>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4a0a      	ldr	r2, [pc, #40]	@ (80118a0 <vPortSetupTimerInterrupt+0x40>)
 8011876:	fba2 2303 	umull	r2, r3, r2, r3
 801187a:	099b      	lsrs	r3, r3, #6
 801187c:	4a09      	ldr	r2, [pc, #36]	@ (80118a4 <vPortSetupTimerInterrupt+0x44>)
 801187e:	3b01      	subs	r3, #1
 8011880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011882:	4b04      	ldr	r3, [pc, #16]	@ (8011894 <vPortSetupTimerInterrupt+0x34>)
 8011884:	2207      	movs	r2, #7
 8011886:	601a      	str	r2, [r3, #0]
}
 8011888:	bf00      	nop
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr
 8011892:	bf00      	nop
 8011894:	e000e010 	.word	0xe000e010
 8011898:	e000e018 	.word	0xe000e018
 801189c:	20000004 	.word	0x20000004
 80118a0:	10624dd3 	.word	0x10624dd3
 80118a4:	e000e014 	.word	0xe000e014

080118a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80118a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80118b8 <vPortEnableVFP+0x10>
 80118ac:	6801      	ldr	r1, [r0, #0]
 80118ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80118b2:	6001      	str	r1, [r0, #0]
 80118b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80118b6:	bf00      	nop
 80118b8:	e000ed88 	.word	0xe000ed88

080118bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80118bc:	b480      	push	{r7}
 80118be:	b085      	sub	sp, #20
 80118c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80118c2:	f3ef 8305 	mrs	r3, IPSR
 80118c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2b0f      	cmp	r3, #15
 80118cc:	d917      	bls.n	80118fe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80118ce:	4a1a      	ldr	r2, [pc, #104]	@ (8011938 <vPortValidateInterruptPriority+0x7c>)
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	4413      	add	r3, r2
 80118d4:	781b      	ldrb	r3, [r3, #0]
 80118d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80118d8:	4b18      	ldr	r3, [pc, #96]	@ (801193c <vPortValidateInterruptPriority+0x80>)
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	7afa      	ldrb	r2, [r7, #11]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d20d      	bcs.n	80118fe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80118e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118e6:	b672      	cpsid	i
 80118e8:	f383 8811 	msr	BASEPRI, r3
 80118ec:	f3bf 8f6f 	isb	sy
 80118f0:	f3bf 8f4f 	dsb	sy
 80118f4:	b662      	cpsie	i
 80118f6:	607b      	str	r3, [r7, #4]
}
 80118f8:	bf00      	nop
 80118fa:	bf00      	nop
 80118fc:	e7fd      	b.n	80118fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80118fe:	4b10      	ldr	r3, [pc, #64]	@ (8011940 <vPortValidateInterruptPriority+0x84>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011906:	4b0f      	ldr	r3, [pc, #60]	@ (8011944 <vPortValidateInterruptPriority+0x88>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	429a      	cmp	r2, r3
 801190c:	d90d      	bls.n	801192a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801190e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011912:	b672      	cpsid	i
 8011914:	f383 8811 	msr	BASEPRI, r3
 8011918:	f3bf 8f6f 	isb	sy
 801191c:	f3bf 8f4f 	dsb	sy
 8011920:	b662      	cpsie	i
 8011922:	603b      	str	r3, [r7, #0]
}
 8011924:	bf00      	nop
 8011926:	bf00      	nop
 8011928:	e7fd      	b.n	8011926 <vPortValidateInterruptPriority+0x6a>
	}
 801192a:	bf00      	nop
 801192c:	3714      	adds	r7, #20
 801192e:	46bd      	mov	sp, r7
 8011930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011934:	4770      	bx	lr
 8011936:	bf00      	nop
 8011938:	e000e3f0 	.word	0xe000e3f0
 801193c:	20003380 	.word	0x20003380
 8011940:	e000ed0c 	.word	0xe000ed0c
 8011944:	20003384 	.word	0x20003384

08011948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b08a      	sub	sp, #40	@ 0x28
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011950:	2300      	movs	r3, #0
 8011952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011954:	f7fe ff66 	bl	8010824 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011958:	4b5f      	ldr	r3, [pc, #380]	@ (8011ad8 <pvPortMalloc+0x190>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d101      	bne.n	8011964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011960:	f000 f924 	bl	8011bac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011964:	4b5d      	ldr	r3, [pc, #372]	@ (8011adc <pvPortMalloc+0x194>)
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	4013      	ands	r3, r2
 801196c:	2b00      	cmp	r3, #0
 801196e:	f040 8094 	bne.w	8011a9a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d020      	beq.n	80119ba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8011978:	2208      	movs	r2, #8
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	4413      	add	r3, r2
 801197e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f003 0307 	and.w	r3, r3, #7
 8011986:	2b00      	cmp	r3, #0
 8011988:	d017      	beq.n	80119ba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f023 0307 	bic.w	r3, r3, #7
 8011990:	3308      	adds	r3, #8
 8011992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f003 0307 	and.w	r3, r3, #7
 801199a:	2b00      	cmp	r3, #0
 801199c:	d00d      	beq.n	80119ba <pvPortMalloc+0x72>
	__asm volatile
 801199e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119a2:	b672      	cpsid	i
 80119a4:	f383 8811 	msr	BASEPRI, r3
 80119a8:	f3bf 8f6f 	isb	sy
 80119ac:	f3bf 8f4f 	dsb	sy
 80119b0:	b662      	cpsie	i
 80119b2:	617b      	str	r3, [r7, #20]
}
 80119b4:	bf00      	nop
 80119b6:	bf00      	nop
 80119b8:	e7fd      	b.n	80119b6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d06c      	beq.n	8011a9a <pvPortMalloc+0x152>
 80119c0:	4b47      	ldr	r3, [pc, #284]	@ (8011ae0 <pvPortMalloc+0x198>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d867      	bhi.n	8011a9a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80119ca:	4b46      	ldr	r3, [pc, #280]	@ (8011ae4 <pvPortMalloc+0x19c>)
 80119cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80119ce:	4b45      	ldr	r3, [pc, #276]	@ (8011ae4 <pvPortMalloc+0x19c>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119d4:	e004      	b.n	80119e0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80119d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80119da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e2:	685b      	ldr	r3, [r3, #4]
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d903      	bls.n	80119f2 <pvPortMalloc+0xaa>
 80119ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d1f1      	bne.n	80119d6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80119f2:	4b39      	ldr	r3, [pc, #228]	@ (8011ad8 <pvPortMalloc+0x190>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d04e      	beq.n	8011a9a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80119fc:	6a3b      	ldr	r3, [r7, #32]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2208      	movs	r2, #8
 8011a02:	4413      	add	r3, r2
 8011a04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	6a3b      	ldr	r3, [r7, #32]
 8011a0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a10:	685a      	ldr	r2, [r3, #4]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	1ad2      	subs	r2, r2, r3
 8011a16:	2308      	movs	r3, #8
 8011a18:	005b      	lsls	r3, r3, #1
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d922      	bls.n	8011a64 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	4413      	add	r3, r2
 8011a24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	f003 0307 	and.w	r3, r3, #7
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d00d      	beq.n	8011a4c <pvPortMalloc+0x104>
	__asm volatile
 8011a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a34:	b672      	cpsid	i
 8011a36:	f383 8811 	msr	BASEPRI, r3
 8011a3a:	f3bf 8f6f 	isb	sy
 8011a3e:	f3bf 8f4f 	dsb	sy
 8011a42:	b662      	cpsie	i
 8011a44:	613b      	str	r3, [r7, #16]
}
 8011a46:	bf00      	nop
 8011a48:	bf00      	nop
 8011a4a:	e7fd      	b.n	8011a48 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a4e:	685a      	ldr	r2, [r3, #4]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	1ad2      	subs	r2, r2, r3
 8011a54:	69bb      	ldr	r3, [r7, #24]
 8011a56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a5a:	687a      	ldr	r2, [r7, #4]
 8011a5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a5e:	69b8      	ldr	r0, [r7, #24]
 8011a60:	f000 f906 	bl	8011c70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a64:	4b1e      	ldr	r3, [pc, #120]	@ (8011ae0 <pvPortMalloc+0x198>)
 8011a66:	681a      	ldr	r2, [r3, #0]
 8011a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a6a:	685b      	ldr	r3, [r3, #4]
 8011a6c:	1ad3      	subs	r3, r2, r3
 8011a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8011ae0 <pvPortMalloc+0x198>)
 8011a70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a72:	4b1b      	ldr	r3, [pc, #108]	@ (8011ae0 <pvPortMalloc+0x198>)
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	4b1c      	ldr	r3, [pc, #112]	@ (8011ae8 <pvPortMalloc+0x1a0>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d203      	bcs.n	8011a86 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a7e:	4b18      	ldr	r3, [pc, #96]	@ (8011ae0 <pvPortMalloc+0x198>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4a19      	ldr	r2, [pc, #100]	@ (8011ae8 <pvPortMalloc+0x1a0>)
 8011a84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a88:	685a      	ldr	r2, [r3, #4]
 8011a8a:	4b14      	ldr	r3, [pc, #80]	@ (8011adc <pvPortMalloc+0x194>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	431a      	orrs	r2, r3
 8011a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a96:	2200      	movs	r2, #0
 8011a98:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011a9a:	f7fe fed1 	bl	8010840 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d101      	bne.n	8011aa8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011aa4:	f7f0 fa96 	bl	8001fd4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	f003 0307 	and.w	r3, r3, #7
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d00d      	beq.n	8011ace <pvPortMalloc+0x186>
	__asm volatile
 8011ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ab6:	b672      	cpsid	i
 8011ab8:	f383 8811 	msr	BASEPRI, r3
 8011abc:	f3bf 8f6f 	isb	sy
 8011ac0:	f3bf 8f4f 	dsb	sy
 8011ac4:	b662      	cpsie	i
 8011ac6:	60fb      	str	r3, [r7, #12]
}
 8011ac8:	bf00      	nop
 8011aca:	bf00      	nop
 8011acc:	e7fd      	b.n	8011aca <pvPortMalloc+0x182>
	return pvReturn;
 8011ace:	69fb      	ldr	r3, [r7, #28]
}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3728      	adds	r7, #40	@ 0x28
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}
 8011ad8:	2000b390 	.word	0x2000b390
 8011adc:	2000b39c 	.word	0x2000b39c
 8011ae0:	2000b394 	.word	0x2000b394
 8011ae4:	2000b388 	.word	0x2000b388
 8011ae8:	2000b398 	.word	0x2000b398

08011aec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b086      	sub	sp, #24
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d04e      	beq.n	8011b9c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011afe:	2308      	movs	r3, #8
 8011b00:	425b      	negs	r3, r3
 8011b02:	697a      	ldr	r2, [r7, #20]
 8011b04:	4413      	add	r3, r2
 8011b06:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	685a      	ldr	r2, [r3, #4]
 8011b10:	4b24      	ldr	r3, [pc, #144]	@ (8011ba4 <vPortFree+0xb8>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	4013      	ands	r3, r2
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d10d      	bne.n	8011b36 <vPortFree+0x4a>
	__asm volatile
 8011b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b1e:	b672      	cpsid	i
 8011b20:	f383 8811 	msr	BASEPRI, r3
 8011b24:	f3bf 8f6f 	isb	sy
 8011b28:	f3bf 8f4f 	dsb	sy
 8011b2c:	b662      	cpsie	i
 8011b2e:	60fb      	str	r3, [r7, #12]
}
 8011b30:	bf00      	nop
 8011b32:	bf00      	nop
 8011b34:	e7fd      	b.n	8011b32 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d00d      	beq.n	8011b5a <vPortFree+0x6e>
	__asm volatile
 8011b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b42:	b672      	cpsid	i
 8011b44:	f383 8811 	msr	BASEPRI, r3
 8011b48:	f3bf 8f6f 	isb	sy
 8011b4c:	f3bf 8f4f 	dsb	sy
 8011b50:	b662      	cpsie	i
 8011b52:	60bb      	str	r3, [r7, #8]
}
 8011b54:	bf00      	nop
 8011b56:	bf00      	nop
 8011b58:	e7fd      	b.n	8011b56 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	685a      	ldr	r2, [r3, #4]
 8011b5e:	4b11      	ldr	r3, [pc, #68]	@ (8011ba4 <vPortFree+0xb8>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	4013      	ands	r3, r2
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d019      	beq.n	8011b9c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d115      	bne.n	8011b9c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	685a      	ldr	r2, [r3, #4]
 8011b74:	4b0b      	ldr	r3, [pc, #44]	@ (8011ba4 <vPortFree+0xb8>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	43db      	mvns	r3, r3
 8011b7a:	401a      	ands	r2, r3
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b80:	f7fe fe50 	bl	8010824 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	685a      	ldr	r2, [r3, #4]
 8011b88:	4b07      	ldr	r3, [pc, #28]	@ (8011ba8 <vPortFree+0xbc>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	4413      	add	r3, r2
 8011b8e:	4a06      	ldr	r2, [pc, #24]	@ (8011ba8 <vPortFree+0xbc>)
 8011b90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b92:	6938      	ldr	r0, [r7, #16]
 8011b94:	f000 f86c 	bl	8011c70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011b98:	f7fe fe52 	bl	8010840 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011b9c:	bf00      	nop
 8011b9e:	3718      	adds	r7, #24
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}
 8011ba4:	2000b39c 	.word	0x2000b39c
 8011ba8:	2000b394 	.word	0x2000b394

08011bac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011bac:	b480      	push	{r7}
 8011bae:	b085      	sub	sp, #20
 8011bb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011bb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011bb8:	4b27      	ldr	r3, [pc, #156]	@ (8011c58 <prvHeapInit+0xac>)
 8011bba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	f003 0307 	and.w	r3, r3, #7
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d00c      	beq.n	8011be0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	3307      	adds	r3, #7
 8011bca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f023 0307 	bic.w	r3, r3, #7
 8011bd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011bd4:	68ba      	ldr	r2, [r7, #8]
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	1ad3      	subs	r3, r2, r3
 8011bda:	4a1f      	ldr	r2, [pc, #124]	@ (8011c58 <prvHeapInit+0xac>)
 8011bdc:	4413      	add	r3, r2
 8011bde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011be4:	4a1d      	ldr	r2, [pc, #116]	@ (8011c5c <prvHeapInit+0xb0>)
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011bea:	4b1c      	ldr	r3, [pc, #112]	@ (8011c5c <prvHeapInit+0xb0>)
 8011bec:	2200      	movs	r2, #0
 8011bee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	68ba      	ldr	r2, [r7, #8]
 8011bf4:	4413      	add	r3, r2
 8011bf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011bf8:	2208      	movs	r2, #8
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	1a9b      	subs	r3, r3, r2
 8011bfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f023 0307 	bic.w	r3, r3, #7
 8011c06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	4a15      	ldr	r2, [pc, #84]	@ (8011c60 <prvHeapInit+0xb4>)
 8011c0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011c0e:	4b14      	ldr	r3, [pc, #80]	@ (8011c60 <prvHeapInit+0xb4>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2200      	movs	r2, #0
 8011c14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011c16:	4b12      	ldr	r3, [pc, #72]	@ (8011c60 <prvHeapInit+0xb4>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	68fa      	ldr	r2, [r7, #12]
 8011c26:	1ad2      	subs	r2, r2, r3
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8011c60 <prvHeapInit+0xb4>)
 8011c2e:	681a      	ldr	r2, [r3, #0]
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	4a0a      	ldr	r2, [pc, #40]	@ (8011c64 <prvHeapInit+0xb8>)
 8011c3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	685b      	ldr	r3, [r3, #4]
 8011c40:	4a09      	ldr	r2, [pc, #36]	@ (8011c68 <prvHeapInit+0xbc>)
 8011c42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c44:	4b09      	ldr	r3, [pc, #36]	@ (8011c6c <prvHeapInit+0xc0>)
 8011c46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011c4a:	601a      	str	r2, [r3, #0]
}
 8011c4c:	bf00      	nop
 8011c4e:	3714      	adds	r7, #20
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr
 8011c58:	20003388 	.word	0x20003388
 8011c5c:	2000b388 	.word	0x2000b388
 8011c60:	2000b390 	.word	0x2000b390
 8011c64:	2000b398 	.word	0x2000b398
 8011c68:	2000b394 	.word	0x2000b394
 8011c6c:	2000b39c 	.word	0x2000b39c

08011c70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c70:	b480      	push	{r7}
 8011c72:	b085      	sub	sp, #20
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c78:	4b28      	ldr	r3, [pc, #160]	@ (8011d1c <prvInsertBlockIntoFreeList+0xac>)
 8011c7a:	60fb      	str	r3, [r7, #12]
 8011c7c:	e002      	b.n	8011c84 <prvInsertBlockIntoFreeList+0x14>
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	60fb      	str	r3, [r7, #12]
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d8f7      	bhi.n	8011c7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	685b      	ldr	r3, [r3, #4]
 8011c96:	68ba      	ldr	r2, [r7, #8]
 8011c98:	4413      	add	r3, r2
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d108      	bne.n	8011cb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	685a      	ldr	r2, [r3, #4]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	441a      	add	r2, r3
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	68ba      	ldr	r2, [r7, #8]
 8011cbc:	441a      	add	r2, r3
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d118      	bne.n	8011cf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	4b15      	ldr	r3, [pc, #84]	@ (8011d20 <prvInsertBlockIntoFreeList+0xb0>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	429a      	cmp	r2, r3
 8011cd0:	d00d      	beq.n	8011cee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	685a      	ldr	r2, [r3, #4]
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	441a      	add	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	601a      	str	r2, [r3, #0]
 8011cec:	e008      	b.n	8011d00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011cee:	4b0c      	ldr	r3, [pc, #48]	@ (8011d20 <prvInsertBlockIntoFreeList+0xb0>)
 8011cf0:	681a      	ldr	r2, [r3, #0]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	601a      	str	r2, [r3, #0]
 8011cf6:	e003      	b.n	8011d00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	681a      	ldr	r2, [r3, #0]
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011d00:	68fa      	ldr	r2, [r7, #12]
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d002      	beq.n	8011d0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d0e:	bf00      	nop
 8011d10:	3714      	adds	r7, #20
 8011d12:	46bd      	mov	sp, r7
 8011d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d18:	4770      	bx	lr
 8011d1a:	bf00      	nop
 8011d1c:	2000b388 	.word	0x2000b388
 8011d20:	2000b390 	.word	0x2000b390

08011d24 <atof>:
 8011d24:	2100      	movs	r1, #0
 8011d26:	f000 be07 	b.w	8012938 <strtod>

08011d2a <atoi>:
 8011d2a:	220a      	movs	r2, #10
 8011d2c:	2100      	movs	r1, #0
 8011d2e:	f000 beed 	b.w	8012b0c <strtol>

08011d32 <sulp>:
 8011d32:	b570      	push	{r4, r5, r6, lr}
 8011d34:	4604      	mov	r4, r0
 8011d36:	460d      	mov	r5, r1
 8011d38:	ec45 4b10 	vmov	d0, r4, r5
 8011d3c:	4616      	mov	r6, r2
 8011d3e:	f003 fd2b 	bl	8015798 <__ulp>
 8011d42:	ec51 0b10 	vmov	r0, r1, d0
 8011d46:	b17e      	cbz	r6, 8011d68 <sulp+0x36>
 8011d48:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011d4c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	dd09      	ble.n	8011d68 <sulp+0x36>
 8011d54:	051b      	lsls	r3, r3, #20
 8011d56:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011d5a:	2400      	movs	r4, #0
 8011d5c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011d60:	4622      	mov	r2, r4
 8011d62:	462b      	mov	r3, r5
 8011d64:	f7ee fc68 	bl	8000638 <__aeabi_dmul>
 8011d68:	ec41 0b10 	vmov	d0, r0, r1
 8011d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011d70 <_strtod_l>:
 8011d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d74:	b09f      	sub	sp, #124	@ 0x7c
 8011d76:	460c      	mov	r4, r1
 8011d78:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	921a      	str	r2, [sp, #104]	@ 0x68
 8011d7e:	9005      	str	r0, [sp, #20]
 8011d80:	f04f 0a00 	mov.w	sl, #0
 8011d84:	f04f 0b00 	mov.w	fp, #0
 8011d88:	460a      	mov	r2, r1
 8011d8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8011d8c:	7811      	ldrb	r1, [r2, #0]
 8011d8e:	292b      	cmp	r1, #43	@ 0x2b
 8011d90:	d04a      	beq.n	8011e28 <_strtod_l+0xb8>
 8011d92:	d838      	bhi.n	8011e06 <_strtod_l+0x96>
 8011d94:	290d      	cmp	r1, #13
 8011d96:	d832      	bhi.n	8011dfe <_strtod_l+0x8e>
 8011d98:	2908      	cmp	r1, #8
 8011d9a:	d832      	bhi.n	8011e02 <_strtod_l+0x92>
 8011d9c:	2900      	cmp	r1, #0
 8011d9e:	d03b      	beq.n	8011e18 <_strtod_l+0xa8>
 8011da0:	2200      	movs	r2, #0
 8011da2:	920e      	str	r2, [sp, #56]	@ 0x38
 8011da4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011da6:	782a      	ldrb	r2, [r5, #0]
 8011da8:	2a30      	cmp	r2, #48	@ 0x30
 8011daa:	f040 80b2 	bne.w	8011f12 <_strtod_l+0x1a2>
 8011dae:	786a      	ldrb	r2, [r5, #1]
 8011db0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011db4:	2a58      	cmp	r2, #88	@ 0x58
 8011db6:	d16e      	bne.n	8011e96 <_strtod_l+0x126>
 8011db8:	9302      	str	r3, [sp, #8]
 8011dba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011dbc:	9301      	str	r3, [sp, #4]
 8011dbe:	ab1a      	add	r3, sp, #104	@ 0x68
 8011dc0:	9300      	str	r3, [sp, #0]
 8011dc2:	4a8f      	ldr	r2, [pc, #572]	@ (8012000 <_strtod_l+0x290>)
 8011dc4:	9805      	ldr	r0, [sp, #20]
 8011dc6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011dc8:	a919      	add	r1, sp, #100	@ 0x64
 8011dca:	f002 fddf 	bl	801498c <__gethex>
 8011dce:	f010 060f 	ands.w	r6, r0, #15
 8011dd2:	4604      	mov	r4, r0
 8011dd4:	d005      	beq.n	8011de2 <_strtod_l+0x72>
 8011dd6:	2e06      	cmp	r6, #6
 8011dd8:	d128      	bne.n	8011e2c <_strtod_l+0xbc>
 8011dda:	3501      	adds	r5, #1
 8011ddc:	2300      	movs	r3, #0
 8011dde:	9519      	str	r5, [sp, #100]	@ 0x64
 8011de0:	930e      	str	r3, [sp, #56]	@ 0x38
 8011de2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	f040 858e 	bne.w	8012906 <_strtod_l+0xb96>
 8011dea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011dec:	b1cb      	cbz	r3, 8011e22 <_strtod_l+0xb2>
 8011dee:	4652      	mov	r2, sl
 8011df0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011df4:	ec43 2b10 	vmov	d0, r2, r3
 8011df8:	b01f      	add	sp, #124	@ 0x7c
 8011dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dfe:	2920      	cmp	r1, #32
 8011e00:	d1ce      	bne.n	8011da0 <_strtod_l+0x30>
 8011e02:	3201      	adds	r2, #1
 8011e04:	e7c1      	b.n	8011d8a <_strtod_l+0x1a>
 8011e06:	292d      	cmp	r1, #45	@ 0x2d
 8011e08:	d1ca      	bne.n	8011da0 <_strtod_l+0x30>
 8011e0a:	2101      	movs	r1, #1
 8011e0c:	910e      	str	r1, [sp, #56]	@ 0x38
 8011e0e:	1c51      	adds	r1, r2, #1
 8011e10:	9119      	str	r1, [sp, #100]	@ 0x64
 8011e12:	7852      	ldrb	r2, [r2, #1]
 8011e14:	2a00      	cmp	r2, #0
 8011e16:	d1c5      	bne.n	8011da4 <_strtod_l+0x34>
 8011e18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011e1a:	9419      	str	r4, [sp, #100]	@ 0x64
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	f040 8570 	bne.w	8012902 <_strtod_l+0xb92>
 8011e22:	4652      	mov	r2, sl
 8011e24:	465b      	mov	r3, fp
 8011e26:	e7e5      	b.n	8011df4 <_strtod_l+0x84>
 8011e28:	2100      	movs	r1, #0
 8011e2a:	e7ef      	b.n	8011e0c <_strtod_l+0x9c>
 8011e2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011e2e:	b13a      	cbz	r2, 8011e40 <_strtod_l+0xd0>
 8011e30:	2135      	movs	r1, #53	@ 0x35
 8011e32:	a81c      	add	r0, sp, #112	@ 0x70
 8011e34:	f003 fdaa 	bl	801598c <__copybits>
 8011e38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011e3a:	9805      	ldr	r0, [sp, #20]
 8011e3c:	f003 f980 	bl	8015140 <_Bfree>
 8011e40:	3e01      	subs	r6, #1
 8011e42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011e44:	2e04      	cmp	r6, #4
 8011e46:	d806      	bhi.n	8011e56 <_strtod_l+0xe6>
 8011e48:	e8df f006 	tbb	[pc, r6]
 8011e4c:	201d0314 	.word	0x201d0314
 8011e50:	14          	.byte	0x14
 8011e51:	00          	.byte	0x00
 8011e52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011e56:	05e1      	lsls	r1, r4, #23
 8011e58:	bf48      	it	mi
 8011e5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011e5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011e62:	0d1b      	lsrs	r3, r3, #20
 8011e64:	051b      	lsls	r3, r3, #20
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d1bb      	bne.n	8011de2 <_strtod_l+0x72>
 8011e6a:	f001 fe1b 	bl	8013aa4 <__errno>
 8011e6e:	2322      	movs	r3, #34	@ 0x22
 8011e70:	6003      	str	r3, [r0, #0]
 8011e72:	e7b6      	b.n	8011de2 <_strtod_l+0x72>
 8011e74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011e78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011e7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011e80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011e84:	e7e7      	b.n	8011e56 <_strtod_l+0xe6>
 8011e86:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8012008 <_strtod_l+0x298>
 8011e8a:	e7e4      	b.n	8011e56 <_strtod_l+0xe6>
 8011e8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011e90:	f04f 3aff 	mov.w	sl, #4294967295
 8011e94:	e7df      	b.n	8011e56 <_strtod_l+0xe6>
 8011e96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e98:	1c5a      	adds	r2, r3, #1
 8011e9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8011e9c:	785b      	ldrb	r3, [r3, #1]
 8011e9e:	2b30      	cmp	r3, #48	@ 0x30
 8011ea0:	d0f9      	beq.n	8011e96 <_strtod_l+0x126>
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d09d      	beq.n	8011de2 <_strtod_l+0x72>
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	2700      	movs	r7, #0
 8011eaa:	9308      	str	r3, [sp, #32]
 8011eac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011eae:	930c      	str	r3, [sp, #48]	@ 0x30
 8011eb0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011eb2:	46b9      	mov	r9, r7
 8011eb4:	220a      	movs	r2, #10
 8011eb6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011eb8:	7805      	ldrb	r5, [r0, #0]
 8011eba:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011ebe:	b2d9      	uxtb	r1, r3
 8011ec0:	2909      	cmp	r1, #9
 8011ec2:	d928      	bls.n	8011f16 <_strtod_l+0x1a6>
 8011ec4:	494f      	ldr	r1, [pc, #316]	@ (8012004 <_strtod_l+0x294>)
 8011ec6:	2201      	movs	r2, #1
 8011ec8:	f001 fcd5 	bl	8013876 <strncmp>
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	d032      	beq.n	8011f36 <_strtod_l+0x1c6>
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	462a      	mov	r2, r5
 8011ed4:	900a      	str	r0, [sp, #40]	@ 0x28
 8011ed6:	464d      	mov	r5, r9
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2a65      	cmp	r2, #101	@ 0x65
 8011edc:	d001      	beq.n	8011ee2 <_strtod_l+0x172>
 8011ede:	2a45      	cmp	r2, #69	@ 0x45
 8011ee0:	d114      	bne.n	8011f0c <_strtod_l+0x19c>
 8011ee2:	b91d      	cbnz	r5, 8011eec <_strtod_l+0x17c>
 8011ee4:	9a08      	ldr	r2, [sp, #32]
 8011ee6:	4302      	orrs	r2, r0
 8011ee8:	d096      	beq.n	8011e18 <_strtod_l+0xa8>
 8011eea:	2500      	movs	r5, #0
 8011eec:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011eee:	1c62      	adds	r2, r4, #1
 8011ef0:	9219      	str	r2, [sp, #100]	@ 0x64
 8011ef2:	7862      	ldrb	r2, [r4, #1]
 8011ef4:	2a2b      	cmp	r2, #43	@ 0x2b
 8011ef6:	d07a      	beq.n	8011fee <_strtod_l+0x27e>
 8011ef8:	2a2d      	cmp	r2, #45	@ 0x2d
 8011efa:	d07e      	beq.n	8011ffa <_strtod_l+0x28a>
 8011efc:	f04f 0c00 	mov.w	ip, #0
 8011f00:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011f04:	2909      	cmp	r1, #9
 8011f06:	f240 8085 	bls.w	8012014 <_strtod_l+0x2a4>
 8011f0a:	9419      	str	r4, [sp, #100]	@ 0x64
 8011f0c:	f04f 0800 	mov.w	r8, #0
 8011f10:	e0a5      	b.n	801205e <_strtod_l+0x2ee>
 8011f12:	2300      	movs	r3, #0
 8011f14:	e7c8      	b.n	8011ea8 <_strtod_l+0x138>
 8011f16:	f1b9 0f08 	cmp.w	r9, #8
 8011f1a:	bfd8      	it	le
 8011f1c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8011f1e:	f100 0001 	add.w	r0, r0, #1
 8011f22:	bfda      	itte	le
 8011f24:	fb02 3301 	mlale	r3, r2, r1, r3
 8011f28:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8011f2a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8011f2e:	f109 0901 	add.w	r9, r9, #1
 8011f32:	9019      	str	r0, [sp, #100]	@ 0x64
 8011f34:	e7bf      	b.n	8011eb6 <_strtod_l+0x146>
 8011f36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011f38:	1c5a      	adds	r2, r3, #1
 8011f3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8011f3c:	785a      	ldrb	r2, [r3, #1]
 8011f3e:	f1b9 0f00 	cmp.w	r9, #0
 8011f42:	d03b      	beq.n	8011fbc <_strtod_l+0x24c>
 8011f44:	900a      	str	r0, [sp, #40]	@ 0x28
 8011f46:	464d      	mov	r5, r9
 8011f48:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011f4c:	2b09      	cmp	r3, #9
 8011f4e:	d912      	bls.n	8011f76 <_strtod_l+0x206>
 8011f50:	2301      	movs	r3, #1
 8011f52:	e7c2      	b.n	8011eda <_strtod_l+0x16a>
 8011f54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011f56:	1c5a      	adds	r2, r3, #1
 8011f58:	9219      	str	r2, [sp, #100]	@ 0x64
 8011f5a:	785a      	ldrb	r2, [r3, #1]
 8011f5c:	3001      	adds	r0, #1
 8011f5e:	2a30      	cmp	r2, #48	@ 0x30
 8011f60:	d0f8      	beq.n	8011f54 <_strtod_l+0x1e4>
 8011f62:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011f66:	2b08      	cmp	r3, #8
 8011f68:	f200 84d2 	bhi.w	8012910 <_strtod_l+0xba0>
 8011f6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011f6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8011f70:	2000      	movs	r0, #0
 8011f72:	930c      	str	r3, [sp, #48]	@ 0x30
 8011f74:	4605      	mov	r5, r0
 8011f76:	3a30      	subs	r2, #48	@ 0x30
 8011f78:	f100 0301 	add.w	r3, r0, #1
 8011f7c:	d018      	beq.n	8011fb0 <_strtod_l+0x240>
 8011f7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011f80:	4419      	add	r1, r3
 8011f82:	910a      	str	r1, [sp, #40]	@ 0x28
 8011f84:	462e      	mov	r6, r5
 8011f86:	f04f 0e0a 	mov.w	lr, #10
 8011f8a:	1c71      	adds	r1, r6, #1
 8011f8c:	eba1 0c05 	sub.w	ip, r1, r5
 8011f90:	4563      	cmp	r3, ip
 8011f92:	dc15      	bgt.n	8011fc0 <_strtod_l+0x250>
 8011f94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011f98:	182b      	adds	r3, r5, r0
 8011f9a:	2b08      	cmp	r3, #8
 8011f9c:	f105 0501 	add.w	r5, r5, #1
 8011fa0:	4405      	add	r5, r0
 8011fa2:	dc1a      	bgt.n	8011fda <_strtod_l+0x26a>
 8011fa4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011fa6:	230a      	movs	r3, #10
 8011fa8:	fb03 2301 	mla	r3, r3, r1, r2
 8011fac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011fae:	2300      	movs	r3, #0
 8011fb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011fb2:	1c51      	adds	r1, r2, #1
 8011fb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8011fb6:	7852      	ldrb	r2, [r2, #1]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	e7c5      	b.n	8011f48 <_strtod_l+0x1d8>
 8011fbc:	4648      	mov	r0, r9
 8011fbe:	e7ce      	b.n	8011f5e <_strtod_l+0x1ee>
 8011fc0:	2e08      	cmp	r6, #8
 8011fc2:	dc05      	bgt.n	8011fd0 <_strtod_l+0x260>
 8011fc4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011fc6:	fb0e f606 	mul.w	r6, lr, r6
 8011fca:	960b      	str	r6, [sp, #44]	@ 0x2c
 8011fcc:	460e      	mov	r6, r1
 8011fce:	e7dc      	b.n	8011f8a <_strtod_l+0x21a>
 8011fd0:	2910      	cmp	r1, #16
 8011fd2:	bfd8      	it	le
 8011fd4:	fb0e f707 	mulle.w	r7, lr, r7
 8011fd8:	e7f8      	b.n	8011fcc <_strtod_l+0x25c>
 8011fda:	2b0f      	cmp	r3, #15
 8011fdc:	bfdc      	itt	le
 8011fde:	230a      	movle	r3, #10
 8011fe0:	fb03 2707 	mlale	r7, r3, r7, r2
 8011fe4:	e7e3      	b.n	8011fae <_strtod_l+0x23e>
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011fea:	2301      	movs	r3, #1
 8011fec:	e77a      	b.n	8011ee4 <_strtod_l+0x174>
 8011fee:	f04f 0c00 	mov.w	ip, #0
 8011ff2:	1ca2      	adds	r2, r4, #2
 8011ff4:	9219      	str	r2, [sp, #100]	@ 0x64
 8011ff6:	78a2      	ldrb	r2, [r4, #2]
 8011ff8:	e782      	b.n	8011f00 <_strtod_l+0x190>
 8011ffa:	f04f 0c01 	mov.w	ip, #1
 8011ffe:	e7f8      	b.n	8011ff2 <_strtod_l+0x282>
 8012000:	080169c8 	.word	0x080169c8
 8012004:	08016788 	.word	0x08016788
 8012008:	7ff00000 	.word	0x7ff00000
 801200c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801200e:	1c51      	adds	r1, r2, #1
 8012010:	9119      	str	r1, [sp, #100]	@ 0x64
 8012012:	7852      	ldrb	r2, [r2, #1]
 8012014:	2a30      	cmp	r2, #48	@ 0x30
 8012016:	d0f9      	beq.n	801200c <_strtod_l+0x29c>
 8012018:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801201c:	2908      	cmp	r1, #8
 801201e:	f63f af75 	bhi.w	8011f0c <_strtod_l+0x19c>
 8012022:	3a30      	subs	r2, #48	@ 0x30
 8012024:	9209      	str	r2, [sp, #36]	@ 0x24
 8012026:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012028:	920f      	str	r2, [sp, #60]	@ 0x3c
 801202a:	f04f 080a 	mov.w	r8, #10
 801202e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012030:	1c56      	adds	r6, r2, #1
 8012032:	9619      	str	r6, [sp, #100]	@ 0x64
 8012034:	7852      	ldrb	r2, [r2, #1]
 8012036:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801203a:	f1be 0f09 	cmp.w	lr, #9
 801203e:	d939      	bls.n	80120b4 <_strtod_l+0x344>
 8012040:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012042:	1a76      	subs	r6, r6, r1
 8012044:	2e08      	cmp	r6, #8
 8012046:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801204a:	dc03      	bgt.n	8012054 <_strtod_l+0x2e4>
 801204c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801204e:	4588      	cmp	r8, r1
 8012050:	bfa8      	it	ge
 8012052:	4688      	movge	r8, r1
 8012054:	f1bc 0f00 	cmp.w	ip, #0
 8012058:	d001      	beq.n	801205e <_strtod_l+0x2ee>
 801205a:	f1c8 0800 	rsb	r8, r8, #0
 801205e:	2d00      	cmp	r5, #0
 8012060:	d14e      	bne.n	8012100 <_strtod_l+0x390>
 8012062:	9908      	ldr	r1, [sp, #32]
 8012064:	4308      	orrs	r0, r1
 8012066:	f47f aebc 	bne.w	8011de2 <_strtod_l+0x72>
 801206a:	2b00      	cmp	r3, #0
 801206c:	f47f aed4 	bne.w	8011e18 <_strtod_l+0xa8>
 8012070:	2a69      	cmp	r2, #105	@ 0x69
 8012072:	d028      	beq.n	80120c6 <_strtod_l+0x356>
 8012074:	dc25      	bgt.n	80120c2 <_strtod_l+0x352>
 8012076:	2a49      	cmp	r2, #73	@ 0x49
 8012078:	d025      	beq.n	80120c6 <_strtod_l+0x356>
 801207a:	2a4e      	cmp	r2, #78	@ 0x4e
 801207c:	f47f aecc 	bne.w	8011e18 <_strtod_l+0xa8>
 8012080:	499a      	ldr	r1, [pc, #616]	@ (80122ec <_strtod_l+0x57c>)
 8012082:	a819      	add	r0, sp, #100	@ 0x64
 8012084:	f002 fea4 	bl	8014dd0 <__match>
 8012088:	2800      	cmp	r0, #0
 801208a:	f43f aec5 	beq.w	8011e18 <_strtod_l+0xa8>
 801208e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	2b28      	cmp	r3, #40	@ 0x28
 8012094:	d12e      	bne.n	80120f4 <_strtod_l+0x384>
 8012096:	4996      	ldr	r1, [pc, #600]	@ (80122f0 <_strtod_l+0x580>)
 8012098:	aa1c      	add	r2, sp, #112	@ 0x70
 801209a:	a819      	add	r0, sp, #100	@ 0x64
 801209c:	f002 feac 	bl	8014df8 <__hexnan>
 80120a0:	2805      	cmp	r0, #5
 80120a2:	d127      	bne.n	80120f4 <_strtod_l+0x384>
 80120a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80120a6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80120aa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80120ae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80120b2:	e696      	b.n	8011de2 <_strtod_l+0x72>
 80120b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80120b6:	fb08 2101 	mla	r1, r8, r1, r2
 80120ba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80120be:	9209      	str	r2, [sp, #36]	@ 0x24
 80120c0:	e7b5      	b.n	801202e <_strtod_l+0x2be>
 80120c2:	2a6e      	cmp	r2, #110	@ 0x6e
 80120c4:	e7da      	b.n	801207c <_strtod_l+0x30c>
 80120c6:	498b      	ldr	r1, [pc, #556]	@ (80122f4 <_strtod_l+0x584>)
 80120c8:	a819      	add	r0, sp, #100	@ 0x64
 80120ca:	f002 fe81 	bl	8014dd0 <__match>
 80120ce:	2800      	cmp	r0, #0
 80120d0:	f43f aea2 	beq.w	8011e18 <_strtod_l+0xa8>
 80120d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80120d6:	4988      	ldr	r1, [pc, #544]	@ (80122f8 <_strtod_l+0x588>)
 80120d8:	3b01      	subs	r3, #1
 80120da:	a819      	add	r0, sp, #100	@ 0x64
 80120dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80120de:	f002 fe77 	bl	8014dd0 <__match>
 80120e2:	b910      	cbnz	r0, 80120ea <_strtod_l+0x37a>
 80120e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80120e6:	3301      	adds	r3, #1
 80120e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80120ea:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8012308 <_strtod_l+0x598>
 80120ee:	f04f 0a00 	mov.w	sl, #0
 80120f2:	e676      	b.n	8011de2 <_strtod_l+0x72>
 80120f4:	4881      	ldr	r0, [pc, #516]	@ (80122fc <_strtod_l+0x58c>)
 80120f6:	f001 fd13 	bl	8013b20 <nan>
 80120fa:	ec5b ab10 	vmov	sl, fp, d0
 80120fe:	e670      	b.n	8011de2 <_strtod_l+0x72>
 8012100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012102:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012104:	eba8 0303 	sub.w	r3, r8, r3
 8012108:	f1b9 0f00 	cmp.w	r9, #0
 801210c:	bf08      	it	eq
 801210e:	46a9      	moveq	r9, r5
 8012110:	2d10      	cmp	r5, #16
 8012112:	9309      	str	r3, [sp, #36]	@ 0x24
 8012114:	462c      	mov	r4, r5
 8012116:	bfa8      	it	ge
 8012118:	2410      	movge	r4, #16
 801211a:	f7ee fa13 	bl	8000544 <__aeabi_ui2d>
 801211e:	2d09      	cmp	r5, #9
 8012120:	4682      	mov	sl, r0
 8012122:	468b      	mov	fp, r1
 8012124:	dc13      	bgt.n	801214e <_strtod_l+0x3de>
 8012126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012128:	2b00      	cmp	r3, #0
 801212a:	f43f ae5a 	beq.w	8011de2 <_strtod_l+0x72>
 801212e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012130:	dd78      	ble.n	8012224 <_strtod_l+0x4b4>
 8012132:	2b16      	cmp	r3, #22
 8012134:	dc5f      	bgt.n	80121f6 <_strtod_l+0x486>
 8012136:	4972      	ldr	r1, [pc, #456]	@ (8012300 <_strtod_l+0x590>)
 8012138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801213c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012140:	4652      	mov	r2, sl
 8012142:	465b      	mov	r3, fp
 8012144:	f7ee fa78 	bl	8000638 <__aeabi_dmul>
 8012148:	4682      	mov	sl, r0
 801214a:	468b      	mov	fp, r1
 801214c:	e649      	b.n	8011de2 <_strtod_l+0x72>
 801214e:	4b6c      	ldr	r3, [pc, #432]	@ (8012300 <_strtod_l+0x590>)
 8012150:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012154:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012158:	f7ee fa6e 	bl	8000638 <__aeabi_dmul>
 801215c:	4682      	mov	sl, r0
 801215e:	4638      	mov	r0, r7
 8012160:	468b      	mov	fp, r1
 8012162:	f7ee f9ef 	bl	8000544 <__aeabi_ui2d>
 8012166:	4602      	mov	r2, r0
 8012168:	460b      	mov	r3, r1
 801216a:	4650      	mov	r0, sl
 801216c:	4659      	mov	r1, fp
 801216e:	f7ee f8ad 	bl	80002cc <__adddf3>
 8012172:	2d0f      	cmp	r5, #15
 8012174:	4682      	mov	sl, r0
 8012176:	468b      	mov	fp, r1
 8012178:	ddd5      	ble.n	8012126 <_strtod_l+0x3b6>
 801217a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801217c:	1b2c      	subs	r4, r5, r4
 801217e:	441c      	add	r4, r3
 8012180:	2c00      	cmp	r4, #0
 8012182:	f340 8093 	ble.w	80122ac <_strtod_l+0x53c>
 8012186:	f014 030f 	ands.w	r3, r4, #15
 801218a:	d00a      	beq.n	80121a2 <_strtod_l+0x432>
 801218c:	495c      	ldr	r1, [pc, #368]	@ (8012300 <_strtod_l+0x590>)
 801218e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012192:	4652      	mov	r2, sl
 8012194:	465b      	mov	r3, fp
 8012196:	e9d1 0100 	ldrd	r0, r1, [r1]
 801219a:	f7ee fa4d 	bl	8000638 <__aeabi_dmul>
 801219e:	4682      	mov	sl, r0
 80121a0:	468b      	mov	fp, r1
 80121a2:	f034 040f 	bics.w	r4, r4, #15
 80121a6:	d073      	beq.n	8012290 <_strtod_l+0x520>
 80121a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80121ac:	dd49      	ble.n	8012242 <_strtod_l+0x4d2>
 80121ae:	2400      	movs	r4, #0
 80121b0:	46a0      	mov	r8, r4
 80121b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80121b4:	46a1      	mov	r9, r4
 80121b6:	9a05      	ldr	r2, [sp, #20]
 80121b8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8012308 <_strtod_l+0x598>
 80121bc:	2322      	movs	r3, #34	@ 0x22
 80121be:	6013      	str	r3, [r2, #0]
 80121c0:	f04f 0a00 	mov.w	sl, #0
 80121c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	f43f ae0b 	beq.w	8011de2 <_strtod_l+0x72>
 80121cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80121ce:	9805      	ldr	r0, [sp, #20]
 80121d0:	f002 ffb6 	bl	8015140 <_Bfree>
 80121d4:	9805      	ldr	r0, [sp, #20]
 80121d6:	4649      	mov	r1, r9
 80121d8:	f002 ffb2 	bl	8015140 <_Bfree>
 80121dc:	9805      	ldr	r0, [sp, #20]
 80121de:	4641      	mov	r1, r8
 80121e0:	f002 ffae 	bl	8015140 <_Bfree>
 80121e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80121e6:	9805      	ldr	r0, [sp, #20]
 80121e8:	f002 ffaa 	bl	8015140 <_Bfree>
 80121ec:	9805      	ldr	r0, [sp, #20]
 80121ee:	4621      	mov	r1, r4
 80121f0:	f002 ffa6 	bl	8015140 <_Bfree>
 80121f4:	e5f5      	b.n	8011de2 <_strtod_l+0x72>
 80121f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80121fc:	4293      	cmp	r3, r2
 80121fe:	dbbc      	blt.n	801217a <_strtod_l+0x40a>
 8012200:	4c3f      	ldr	r4, [pc, #252]	@ (8012300 <_strtod_l+0x590>)
 8012202:	f1c5 050f 	rsb	r5, r5, #15
 8012206:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801220a:	4652      	mov	r2, sl
 801220c:	465b      	mov	r3, fp
 801220e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012212:	f7ee fa11 	bl	8000638 <__aeabi_dmul>
 8012216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012218:	1b5d      	subs	r5, r3, r5
 801221a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801221e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012222:	e78f      	b.n	8012144 <_strtod_l+0x3d4>
 8012224:	3316      	adds	r3, #22
 8012226:	dba8      	blt.n	801217a <_strtod_l+0x40a>
 8012228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801222a:	eba3 0808 	sub.w	r8, r3, r8
 801222e:	4b34      	ldr	r3, [pc, #208]	@ (8012300 <_strtod_l+0x590>)
 8012230:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8012234:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012238:	4650      	mov	r0, sl
 801223a:	4659      	mov	r1, fp
 801223c:	f7ee fb26 	bl	800088c <__aeabi_ddiv>
 8012240:	e782      	b.n	8012148 <_strtod_l+0x3d8>
 8012242:	2300      	movs	r3, #0
 8012244:	4f2f      	ldr	r7, [pc, #188]	@ (8012304 <_strtod_l+0x594>)
 8012246:	1124      	asrs	r4, r4, #4
 8012248:	4650      	mov	r0, sl
 801224a:	4659      	mov	r1, fp
 801224c:	461e      	mov	r6, r3
 801224e:	2c01      	cmp	r4, #1
 8012250:	dc21      	bgt.n	8012296 <_strtod_l+0x526>
 8012252:	b10b      	cbz	r3, 8012258 <_strtod_l+0x4e8>
 8012254:	4682      	mov	sl, r0
 8012256:	468b      	mov	fp, r1
 8012258:	492a      	ldr	r1, [pc, #168]	@ (8012304 <_strtod_l+0x594>)
 801225a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801225e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012262:	4652      	mov	r2, sl
 8012264:	465b      	mov	r3, fp
 8012266:	e9d1 0100 	ldrd	r0, r1, [r1]
 801226a:	f7ee f9e5 	bl	8000638 <__aeabi_dmul>
 801226e:	4b26      	ldr	r3, [pc, #152]	@ (8012308 <_strtod_l+0x598>)
 8012270:	460a      	mov	r2, r1
 8012272:	400b      	ands	r3, r1
 8012274:	4925      	ldr	r1, [pc, #148]	@ (801230c <_strtod_l+0x59c>)
 8012276:	428b      	cmp	r3, r1
 8012278:	4682      	mov	sl, r0
 801227a:	d898      	bhi.n	80121ae <_strtod_l+0x43e>
 801227c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012280:	428b      	cmp	r3, r1
 8012282:	bf86      	itte	hi
 8012284:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8012310 <_strtod_l+0x5a0>
 8012288:	f04f 3aff 	movhi.w	sl, #4294967295
 801228c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012290:	2300      	movs	r3, #0
 8012292:	9308      	str	r3, [sp, #32]
 8012294:	e076      	b.n	8012384 <_strtod_l+0x614>
 8012296:	07e2      	lsls	r2, r4, #31
 8012298:	d504      	bpl.n	80122a4 <_strtod_l+0x534>
 801229a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801229e:	f7ee f9cb 	bl	8000638 <__aeabi_dmul>
 80122a2:	2301      	movs	r3, #1
 80122a4:	3601      	adds	r6, #1
 80122a6:	1064      	asrs	r4, r4, #1
 80122a8:	3708      	adds	r7, #8
 80122aa:	e7d0      	b.n	801224e <_strtod_l+0x4de>
 80122ac:	d0f0      	beq.n	8012290 <_strtod_l+0x520>
 80122ae:	4264      	negs	r4, r4
 80122b0:	f014 020f 	ands.w	r2, r4, #15
 80122b4:	d00a      	beq.n	80122cc <_strtod_l+0x55c>
 80122b6:	4b12      	ldr	r3, [pc, #72]	@ (8012300 <_strtod_l+0x590>)
 80122b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122bc:	4650      	mov	r0, sl
 80122be:	4659      	mov	r1, fp
 80122c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c4:	f7ee fae2 	bl	800088c <__aeabi_ddiv>
 80122c8:	4682      	mov	sl, r0
 80122ca:	468b      	mov	fp, r1
 80122cc:	1124      	asrs	r4, r4, #4
 80122ce:	d0df      	beq.n	8012290 <_strtod_l+0x520>
 80122d0:	2c1f      	cmp	r4, #31
 80122d2:	dd1f      	ble.n	8012314 <_strtod_l+0x5a4>
 80122d4:	2400      	movs	r4, #0
 80122d6:	46a0      	mov	r8, r4
 80122d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80122da:	46a1      	mov	r9, r4
 80122dc:	9a05      	ldr	r2, [sp, #20]
 80122de:	2322      	movs	r3, #34	@ 0x22
 80122e0:	f04f 0a00 	mov.w	sl, #0
 80122e4:	f04f 0b00 	mov.w	fp, #0
 80122e8:	6013      	str	r3, [r2, #0]
 80122ea:	e76b      	b.n	80121c4 <_strtod_l+0x454>
 80122ec:	08016797 	.word	0x08016797
 80122f0:	080169b4 	.word	0x080169b4
 80122f4:	0801678f 	.word	0x0801678f
 80122f8:	08016876 	.word	0x08016876
 80122fc:	08016872 	.word	0x08016872
 8012300:	08016b40 	.word	0x08016b40
 8012304:	08016b18 	.word	0x08016b18
 8012308:	7ff00000 	.word	0x7ff00000
 801230c:	7ca00000 	.word	0x7ca00000
 8012310:	7fefffff 	.word	0x7fefffff
 8012314:	f014 0310 	ands.w	r3, r4, #16
 8012318:	bf18      	it	ne
 801231a:	236a      	movne	r3, #106	@ 0x6a
 801231c:	4ea9      	ldr	r6, [pc, #676]	@ (80125c4 <_strtod_l+0x854>)
 801231e:	9308      	str	r3, [sp, #32]
 8012320:	4650      	mov	r0, sl
 8012322:	4659      	mov	r1, fp
 8012324:	2300      	movs	r3, #0
 8012326:	07e7      	lsls	r7, r4, #31
 8012328:	d504      	bpl.n	8012334 <_strtod_l+0x5c4>
 801232a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801232e:	f7ee f983 	bl	8000638 <__aeabi_dmul>
 8012332:	2301      	movs	r3, #1
 8012334:	1064      	asrs	r4, r4, #1
 8012336:	f106 0608 	add.w	r6, r6, #8
 801233a:	d1f4      	bne.n	8012326 <_strtod_l+0x5b6>
 801233c:	b10b      	cbz	r3, 8012342 <_strtod_l+0x5d2>
 801233e:	4682      	mov	sl, r0
 8012340:	468b      	mov	fp, r1
 8012342:	9b08      	ldr	r3, [sp, #32]
 8012344:	b1b3      	cbz	r3, 8012374 <_strtod_l+0x604>
 8012346:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801234a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801234e:	2b00      	cmp	r3, #0
 8012350:	4659      	mov	r1, fp
 8012352:	dd0f      	ble.n	8012374 <_strtod_l+0x604>
 8012354:	2b1f      	cmp	r3, #31
 8012356:	dd56      	ble.n	8012406 <_strtod_l+0x696>
 8012358:	2b34      	cmp	r3, #52	@ 0x34
 801235a:	bfde      	ittt	le
 801235c:	f04f 33ff 	movle.w	r3, #4294967295
 8012360:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8012364:	4093      	lslle	r3, r2
 8012366:	f04f 0a00 	mov.w	sl, #0
 801236a:	bfcc      	ite	gt
 801236c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012370:	ea03 0b01 	andle.w	fp, r3, r1
 8012374:	2200      	movs	r2, #0
 8012376:	2300      	movs	r3, #0
 8012378:	4650      	mov	r0, sl
 801237a:	4659      	mov	r1, fp
 801237c:	f7ee fbc4 	bl	8000b08 <__aeabi_dcmpeq>
 8012380:	2800      	cmp	r0, #0
 8012382:	d1a7      	bne.n	80122d4 <_strtod_l+0x564>
 8012384:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012386:	9300      	str	r3, [sp, #0]
 8012388:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801238a:	9805      	ldr	r0, [sp, #20]
 801238c:	462b      	mov	r3, r5
 801238e:	464a      	mov	r2, r9
 8012390:	f002 ff3e 	bl	8015210 <__s2b>
 8012394:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012396:	2800      	cmp	r0, #0
 8012398:	f43f af09 	beq.w	80121ae <_strtod_l+0x43e>
 801239c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801239e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80123a0:	2a00      	cmp	r2, #0
 80123a2:	eba3 0308 	sub.w	r3, r3, r8
 80123a6:	bfa8      	it	ge
 80123a8:	2300      	movge	r3, #0
 80123aa:	9312      	str	r3, [sp, #72]	@ 0x48
 80123ac:	2400      	movs	r4, #0
 80123ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80123b2:	9316      	str	r3, [sp, #88]	@ 0x58
 80123b4:	46a0      	mov	r8, r4
 80123b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80123b8:	9805      	ldr	r0, [sp, #20]
 80123ba:	6859      	ldr	r1, [r3, #4]
 80123bc:	f002 fe80 	bl	80150c0 <_Balloc>
 80123c0:	4681      	mov	r9, r0
 80123c2:	2800      	cmp	r0, #0
 80123c4:	f43f aef7 	beq.w	80121b6 <_strtod_l+0x446>
 80123c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80123ca:	691a      	ldr	r2, [r3, #16]
 80123cc:	3202      	adds	r2, #2
 80123ce:	f103 010c 	add.w	r1, r3, #12
 80123d2:	0092      	lsls	r2, r2, #2
 80123d4:	300c      	adds	r0, #12
 80123d6:	f001 fb92 	bl	8013afe <memcpy>
 80123da:	ec4b ab10 	vmov	d0, sl, fp
 80123de:	9805      	ldr	r0, [sp, #20]
 80123e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80123e2:	a91b      	add	r1, sp, #108	@ 0x6c
 80123e4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80123e8:	f003 fa46 	bl	8015878 <__d2b>
 80123ec:	901a      	str	r0, [sp, #104]	@ 0x68
 80123ee:	2800      	cmp	r0, #0
 80123f0:	f43f aee1 	beq.w	80121b6 <_strtod_l+0x446>
 80123f4:	9805      	ldr	r0, [sp, #20]
 80123f6:	2101      	movs	r1, #1
 80123f8:	f002 ffa0 	bl	801533c <__i2b>
 80123fc:	4680      	mov	r8, r0
 80123fe:	b948      	cbnz	r0, 8012414 <_strtod_l+0x6a4>
 8012400:	f04f 0800 	mov.w	r8, #0
 8012404:	e6d7      	b.n	80121b6 <_strtod_l+0x446>
 8012406:	f04f 32ff 	mov.w	r2, #4294967295
 801240a:	fa02 f303 	lsl.w	r3, r2, r3
 801240e:	ea03 0a0a 	and.w	sl, r3, sl
 8012412:	e7af      	b.n	8012374 <_strtod_l+0x604>
 8012414:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8012416:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012418:	2d00      	cmp	r5, #0
 801241a:	bfab      	itete	ge
 801241c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801241e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012420:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012422:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8012424:	bfac      	ite	ge
 8012426:	18ef      	addge	r7, r5, r3
 8012428:	1b5e      	sublt	r6, r3, r5
 801242a:	9b08      	ldr	r3, [sp, #32]
 801242c:	1aed      	subs	r5, r5, r3
 801242e:	4415      	add	r5, r2
 8012430:	4b65      	ldr	r3, [pc, #404]	@ (80125c8 <_strtod_l+0x858>)
 8012432:	3d01      	subs	r5, #1
 8012434:	429d      	cmp	r5, r3
 8012436:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801243a:	da50      	bge.n	80124de <_strtod_l+0x76e>
 801243c:	1b5b      	subs	r3, r3, r5
 801243e:	2b1f      	cmp	r3, #31
 8012440:	eba2 0203 	sub.w	r2, r2, r3
 8012444:	f04f 0101 	mov.w	r1, #1
 8012448:	dc3d      	bgt.n	80124c6 <_strtod_l+0x756>
 801244a:	fa01 f303 	lsl.w	r3, r1, r3
 801244e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012450:	2300      	movs	r3, #0
 8012452:	9310      	str	r3, [sp, #64]	@ 0x40
 8012454:	18bd      	adds	r5, r7, r2
 8012456:	9b08      	ldr	r3, [sp, #32]
 8012458:	42af      	cmp	r7, r5
 801245a:	4416      	add	r6, r2
 801245c:	441e      	add	r6, r3
 801245e:	463b      	mov	r3, r7
 8012460:	bfa8      	it	ge
 8012462:	462b      	movge	r3, r5
 8012464:	42b3      	cmp	r3, r6
 8012466:	bfa8      	it	ge
 8012468:	4633      	movge	r3, r6
 801246a:	2b00      	cmp	r3, #0
 801246c:	bfc2      	ittt	gt
 801246e:	1aed      	subgt	r5, r5, r3
 8012470:	1af6      	subgt	r6, r6, r3
 8012472:	1aff      	subgt	r7, r7, r3
 8012474:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012476:	2b00      	cmp	r3, #0
 8012478:	dd16      	ble.n	80124a8 <_strtod_l+0x738>
 801247a:	4641      	mov	r1, r8
 801247c:	9805      	ldr	r0, [sp, #20]
 801247e:	461a      	mov	r2, r3
 8012480:	f003 f814 	bl	80154ac <__pow5mult>
 8012484:	4680      	mov	r8, r0
 8012486:	2800      	cmp	r0, #0
 8012488:	d0ba      	beq.n	8012400 <_strtod_l+0x690>
 801248a:	4601      	mov	r1, r0
 801248c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801248e:	9805      	ldr	r0, [sp, #20]
 8012490:	f002 ff6a 	bl	8015368 <__multiply>
 8012494:	900a      	str	r0, [sp, #40]	@ 0x28
 8012496:	2800      	cmp	r0, #0
 8012498:	f43f ae8d 	beq.w	80121b6 <_strtod_l+0x446>
 801249c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801249e:	9805      	ldr	r0, [sp, #20]
 80124a0:	f002 fe4e 	bl	8015140 <_Bfree>
 80124a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80124a8:	2d00      	cmp	r5, #0
 80124aa:	dc1d      	bgt.n	80124e8 <_strtod_l+0x778>
 80124ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	dd23      	ble.n	80124fa <_strtod_l+0x78a>
 80124b2:	4649      	mov	r1, r9
 80124b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80124b6:	9805      	ldr	r0, [sp, #20]
 80124b8:	f002 fff8 	bl	80154ac <__pow5mult>
 80124bc:	4681      	mov	r9, r0
 80124be:	b9e0      	cbnz	r0, 80124fa <_strtod_l+0x78a>
 80124c0:	f04f 0900 	mov.w	r9, #0
 80124c4:	e677      	b.n	80121b6 <_strtod_l+0x446>
 80124c6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80124ca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80124ce:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80124d2:	35e2      	adds	r5, #226	@ 0xe2
 80124d4:	fa01 f305 	lsl.w	r3, r1, r5
 80124d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80124da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80124dc:	e7ba      	b.n	8012454 <_strtod_l+0x6e4>
 80124de:	2300      	movs	r3, #0
 80124e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80124e2:	2301      	movs	r3, #1
 80124e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80124e6:	e7b5      	b.n	8012454 <_strtod_l+0x6e4>
 80124e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80124ea:	9805      	ldr	r0, [sp, #20]
 80124ec:	462a      	mov	r2, r5
 80124ee:	f003 f837 	bl	8015560 <__lshift>
 80124f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80124f4:	2800      	cmp	r0, #0
 80124f6:	d1d9      	bne.n	80124ac <_strtod_l+0x73c>
 80124f8:	e65d      	b.n	80121b6 <_strtod_l+0x446>
 80124fa:	2e00      	cmp	r6, #0
 80124fc:	dd07      	ble.n	801250e <_strtod_l+0x79e>
 80124fe:	4649      	mov	r1, r9
 8012500:	9805      	ldr	r0, [sp, #20]
 8012502:	4632      	mov	r2, r6
 8012504:	f003 f82c 	bl	8015560 <__lshift>
 8012508:	4681      	mov	r9, r0
 801250a:	2800      	cmp	r0, #0
 801250c:	d0d8      	beq.n	80124c0 <_strtod_l+0x750>
 801250e:	2f00      	cmp	r7, #0
 8012510:	dd08      	ble.n	8012524 <_strtod_l+0x7b4>
 8012512:	4641      	mov	r1, r8
 8012514:	9805      	ldr	r0, [sp, #20]
 8012516:	463a      	mov	r2, r7
 8012518:	f003 f822 	bl	8015560 <__lshift>
 801251c:	4680      	mov	r8, r0
 801251e:	2800      	cmp	r0, #0
 8012520:	f43f ae49 	beq.w	80121b6 <_strtod_l+0x446>
 8012524:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012526:	9805      	ldr	r0, [sp, #20]
 8012528:	464a      	mov	r2, r9
 801252a:	f003 f8a1 	bl	8015670 <__mdiff>
 801252e:	4604      	mov	r4, r0
 8012530:	2800      	cmp	r0, #0
 8012532:	f43f ae40 	beq.w	80121b6 <_strtod_l+0x446>
 8012536:	68c3      	ldr	r3, [r0, #12]
 8012538:	930f      	str	r3, [sp, #60]	@ 0x3c
 801253a:	2300      	movs	r3, #0
 801253c:	60c3      	str	r3, [r0, #12]
 801253e:	4641      	mov	r1, r8
 8012540:	f003 f87a 	bl	8015638 <__mcmp>
 8012544:	2800      	cmp	r0, #0
 8012546:	da45      	bge.n	80125d4 <_strtod_l+0x864>
 8012548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801254a:	ea53 030a 	orrs.w	r3, r3, sl
 801254e:	d16b      	bne.n	8012628 <_strtod_l+0x8b8>
 8012550:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012554:	2b00      	cmp	r3, #0
 8012556:	d167      	bne.n	8012628 <_strtod_l+0x8b8>
 8012558:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801255c:	0d1b      	lsrs	r3, r3, #20
 801255e:	051b      	lsls	r3, r3, #20
 8012560:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012564:	d960      	bls.n	8012628 <_strtod_l+0x8b8>
 8012566:	6963      	ldr	r3, [r4, #20]
 8012568:	b913      	cbnz	r3, 8012570 <_strtod_l+0x800>
 801256a:	6923      	ldr	r3, [r4, #16]
 801256c:	2b01      	cmp	r3, #1
 801256e:	dd5b      	ble.n	8012628 <_strtod_l+0x8b8>
 8012570:	4621      	mov	r1, r4
 8012572:	2201      	movs	r2, #1
 8012574:	9805      	ldr	r0, [sp, #20]
 8012576:	f002 fff3 	bl	8015560 <__lshift>
 801257a:	4641      	mov	r1, r8
 801257c:	4604      	mov	r4, r0
 801257e:	f003 f85b 	bl	8015638 <__mcmp>
 8012582:	2800      	cmp	r0, #0
 8012584:	dd50      	ble.n	8012628 <_strtod_l+0x8b8>
 8012586:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801258a:	9a08      	ldr	r2, [sp, #32]
 801258c:	0d1b      	lsrs	r3, r3, #20
 801258e:	051b      	lsls	r3, r3, #20
 8012590:	2a00      	cmp	r2, #0
 8012592:	d06a      	beq.n	801266a <_strtod_l+0x8fa>
 8012594:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012598:	d867      	bhi.n	801266a <_strtod_l+0x8fa>
 801259a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801259e:	f67f ae9d 	bls.w	80122dc <_strtod_l+0x56c>
 80125a2:	4b0a      	ldr	r3, [pc, #40]	@ (80125cc <_strtod_l+0x85c>)
 80125a4:	4650      	mov	r0, sl
 80125a6:	4659      	mov	r1, fp
 80125a8:	2200      	movs	r2, #0
 80125aa:	f7ee f845 	bl	8000638 <__aeabi_dmul>
 80125ae:	4b08      	ldr	r3, [pc, #32]	@ (80125d0 <_strtod_l+0x860>)
 80125b0:	400b      	ands	r3, r1
 80125b2:	4682      	mov	sl, r0
 80125b4:	468b      	mov	fp, r1
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	f47f ae08 	bne.w	80121cc <_strtod_l+0x45c>
 80125bc:	9a05      	ldr	r2, [sp, #20]
 80125be:	2322      	movs	r3, #34	@ 0x22
 80125c0:	6013      	str	r3, [r2, #0]
 80125c2:	e603      	b.n	80121cc <_strtod_l+0x45c>
 80125c4:	080169e0 	.word	0x080169e0
 80125c8:	fffffc02 	.word	0xfffffc02
 80125cc:	39500000 	.word	0x39500000
 80125d0:	7ff00000 	.word	0x7ff00000
 80125d4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80125d8:	d165      	bne.n	80126a6 <_strtod_l+0x936>
 80125da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80125dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80125e0:	b35a      	cbz	r2, 801263a <_strtod_l+0x8ca>
 80125e2:	4a9f      	ldr	r2, [pc, #636]	@ (8012860 <_strtod_l+0xaf0>)
 80125e4:	4293      	cmp	r3, r2
 80125e6:	d12b      	bne.n	8012640 <_strtod_l+0x8d0>
 80125e8:	9b08      	ldr	r3, [sp, #32]
 80125ea:	4651      	mov	r1, sl
 80125ec:	b303      	cbz	r3, 8012630 <_strtod_l+0x8c0>
 80125ee:	4b9d      	ldr	r3, [pc, #628]	@ (8012864 <_strtod_l+0xaf4>)
 80125f0:	465a      	mov	r2, fp
 80125f2:	4013      	ands	r3, r2
 80125f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80125f8:	f04f 32ff 	mov.w	r2, #4294967295
 80125fc:	d81b      	bhi.n	8012636 <_strtod_l+0x8c6>
 80125fe:	0d1b      	lsrs	r3, r3, #20
 8012600:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012604:	fa02 f303 	lsl.w	r3, r2, r3
 8012608:	4299      	cmp	r1, r3
 801260a:	d119      	bne.n	8012640 <_strtod_l+0x8d0>
 801260c:	4b96      	ldr	r3, [pc, #600]	@ (8012868 <_strtod_l+0xaf8>)
 801260e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012610:	429a      	cmp	r2, r3
 8012612:	d102      	bne.n	801261a <_strtod_l+0x8aa>
 8012614:	3101      	adds	r1, #1
 8012616:	f43f adce 	beq.w	80121b6 <_strtod_l+0x446>
 801261a:	4b92      	ldr	r3, [pc, #584]	@ (8012864 <_strtod_l+0xaf4>)
 801261c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801261e:	401a      	ands	r2, r3
 8012620:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012624:	f04f 0a00 	mov.w	sl, #0
 8012628:	9b08      	ldr	r3, [sp, #32]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d1b9      	bne.n	80125a2 <_strtod_l+0x832>
 801262e:	e5cd      	b.n	80121cc <_strtod_l+0x45c>
 8012630:	f04f 33ff 	mov.w	r3, #4294967295
 8012634:	e7e8      	b.n	8012608 <_strtod_l+0x898>
 8012636:	4613      	mov	r3, r2
 8012638:	e7e6      	b.n	8012608 <_strtod_l+0x898>
 801263a:	ea53 030a 	orrs.w	r3, r3, sl
 801263e:	d0a2      	beq.n	8012586 <_strtod_l+0x816>
 8012640:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012642:	b1db      	cbz	r3, 801267c <_strtod_l+0x90c>
 8012644:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012646:	4213      	tst	r3, r2
 8012648:	d0ee      	beq.n	8012628 <_strtod_l+0x8b8>
 801264a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801264c:	9a08      	ldr	r2, [sp, #32]
 801264e:	4650      	mov	r0, sl
 8012650:	4659      	mov	r1, fp
 8012652:	b1bb      	cbz	r3, 8012684 <_strtod_l+0x914>
 8012654:	f7ff fb6d 	bl	8011d32 <sulp>
 8012658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801265c:	ec53 2b10 	vmov	r2, r3, d0
 8012660:	f7ed fe34 	bl	80002cc <__adddf3>
 8012664:	4682      	mov	sl, r0
 8012666:	468b      	mov	fp, r1
 8012668:	e7de      	b.n	8012628 <_strtod_l+0x8b8>
 801266a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801266e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012672:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012676:	f04f 3aff 	mov.w	sl, #4294967295
 801267a:	e7d5      	b.n	8012628 <_strtod_l+0x8b8>
 801267c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801267e:	ea13 0f0a 	tst.w	r3, sl
 8012682:	e7e1      	b.n	8012648 <_strtod_l+0x8d8>
 8012684:	f7ff fb55 	bl	8011d32 <sulp>
 8012688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801268c:	ec53 2b10 	vmov	r2, r3, d0
 8012690:	f7ed fe1a 	bl	80002c8 <__aeabi_dsub>
 8012694:	2200      	movs	r2, #0
 8012696:	2300      	movs	r3, #0
 8012698:	4682      	mov	sl, r0
 801269a:	468b      	mov	fp, r1
 801269c:	f7ee fa34 	bl	8000b08 <__aeabi_dcmpeq>
 80126a0:	2800      	cmp	r0, #0
 80126a2:	d0c1      	beq.n	8012628 <_strtod_l+0x8b8>
 80126a4:	e61a      	b.n	80122dc <_strtod_l+0x56c>
 80126a6:	4641      	mov	r1, r8
 80126a8:	4620      	mov	r0, r4
 80126aa:	f003 f93d 	bl	8015928 <__ratio>
 80126ae:	ec57 6b10 	vmov	r6, r7, d0
 80126b2:	2200      	movs	r2, #0
 80126b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80126b8:	4630      	mov	r0, r6
 80126ba:	4639      	mov	r1, r7
 80126bc:	f7ee fa38 	bl	8000b30 <__aeabi_dcmple>
 80126c0:	2800      	cmp	r0, #0
 80126c2:	d06f      	beq.n	80127a4 <_strtod_l+0xa34>
 80126c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d17a      	bne.n	80127c0 <_strtod_l+0xa50>
 80126ca:	f1ba 0f00 	cmp.w	sl, #0
 80126ce:	d158      	bne.n	8012782 <_strtod_l+0xa12>
 80126d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d15a      	bne.n	8012790 <_strtod_l+0xa20>
 80126da:	4b64      	ldr	r3, [pc, #400]	@ (801286c <_strtod_l+0xafc>)
 80126dc:	2200      	movs	r2, #0
 80126de:	4630      	mov	r0, r6
 80126e0:	4639      	mov	r1, r7
 80126e2:	f7ee fa1b 	bl	8000b1c <__aeabi_dcmplt>
 80126e6:	2800      	cmp	r0, #0
 80126e8:	d159      	bne.n	801279e <_strtod_l+0xa2e>
 80126ea:	4630      	mov	r0, r6
 80126ec:	4639      	mov	r1, r7
 80126ee:	4b60      	ldr	r3, [pc, #384]	@ (8012870 <_strtod_l+0xb00>)
 80126f0:	2200      	movs	r2, #0
 80126f2:	f7ed ffa1 	bl	8000638 <__aeabi_dmul>
 80126f6:	4606      	mov	r6, r0
 80126f8:	460f      	mov	r7, r1
 80126fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80126fe:	9606      	str	r6, [sp, #24]
 8012700:	9307      	str	r3, [sp, #28]
 8012702:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012706:	4d57      	ldr	r5, [pc, #348]	@ (8012864 <_strtod_l+0xaf4>)
 8012708:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801270c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801270e:	401d      	ands	r5, r3
 8012710:	4b58      	ldr	r3, [pc, #352]	@ (8012874 <_strtod_l+0xb04>)
 8012712:	429d      	cmp	r5, r3
 8012714:	f040 80b2 	bne.w	801287c <_strtod_l+0xb0c>
 8012718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801271a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801271e:	ec4b ab10 	vmov	d0, sl, fp
 8012722:	f003 f839 	bl	8015798 <__ulp>
 8012726:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801272a:	ec51 0b10 	vmov	r0, r1, d0
 801272e:	f7ed ff83 	bl	8000638 <__aeabi_dmul>
 8012732:	4652      	mov	r2, sl
 8012734:	465b      	mov	r3, fp
 8012736:	f7ed fdc9 	bl	80002cc <__adddf3>
 801273a:	460b      	mov	r3, r1
 801273c:	4949      	ldr	r1, [pc, #292]	@ (8012864 <_strtod_l+0xaf4>)
 801273e:	4a4e      	ldr	r2, [pc, #312]	@ (8012878 <_strtod_l+0xb08>)
 8012740:	4019      	ands	r1, r3
 8012742:	4291      	cmp	r1, r2
 8012744:	4682      	mov	sl, r0
 8012746:	d942      	bls.n	80127ce <_strtod_l+0xa5e>
 8012748:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801274a:	4b47      	ldr	r3, [pc, #284]	@ (8012868 <_strtod_l+0xaf8>)
 801274c:	429a      	cmp	r2, r3
 801274e:	d103      	bne.n	8012758 <_strtod_l+0x9e8>
 8012750:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012752:	3301      	adds	r3, #1
 8012754:	f43f ad2f 	beq.w	80121b6 <_strtod_l+0x446>
 8012758:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012868 <_strtod_l+0xaf8>
 801275c:	f04f 3aff 	mov.w	sl, #4294967295
 8012760:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012762:	9805      	ldr	r0, [sp, #20]
 8012764:	f002 fcec 	bl	8015140 <_Bfree>
 8012768:	9805      	ldr	r0, [sp, #20]
 801276a:	4649      	mov	r1, r9
 801276c:	f002 fce8 	bl	8015140 <_Bfree>
 8012770:	9805      	ldr	r0, [sp, #20]
 8012772:	4641      	mov	r1, r8
 8012774:	f002 fce4 	bl	8015140 <_Bfree>
 8012778:	9805      	ldr	r0, [sp, #20]
 801277a:	4621      	mov	r1, r4
 801277c:	f002 fce0 	bl	8015140 <_Bfree>
 8012780:	e619      	b.n	80123b6 <_strtod_l+0x646>
 8012782:	f1ba 0f01 	cmp.w	sl, #1
 8012786:	d103      	bne.n	8012790 <_strtod_l+0xa20>
 8012788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801278a:	2b00      	cmp	r3, #0
 801278c:	f43f ada6 	beq.w	80122dc <_strtod_l+0x56c>
 8012790:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012840 <_strtod_l+0xad0>
 8012794:	4f35      	ldr	r7, [pc, #212]	@ (801286c <_strtod_l+0xafc>)
 8012796:	ed8d 7b06 	vstr	d7, [sp, #24]
 801279a:	2600      	movs	r6, #0
 801279c:	e7b1      	b.n	8012702 <_strtod_l+0x992>
 801279e:	4f34      	ldr	r7, [pc, #208]	@ (8012870 <_strtod_l+0xb00>)
 80127a0:	2600      	movs	r6, #0
 80127a2:	e7aa      	b.n	80126fa <_strtod_l+0x98a>
 80127a4:	4b32      	ldr	r3, [pc, #200]	@ (8012870 <_strtod_l+0xb00>)
 80127a6:	4630      	mov	r0, r6
 80127a8:	4639      	mov	r1, r7
 80127aa:	2200      	movs	r2, #0
 80127ac:	f7ed ff44 	bl	8000638 <__aeabi_dmul>
 80127b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127b2:	4606      	mov	r6, r0
 80127b4:	460f      	mov	r7, r1
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d09f      	beq.n	80126fa <_strtod_l+0x98a>
 80127ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80127be:	e7a0      	b.n	8012702 <_strtod_l+0x992>
 80127c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012848 <_strtod_l+0xad8>
 80127c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80127c8:	ec57 6b17 	vmov	r6, r7, d7
 80127cc:	e799      	b.n	8012702 <_strtod_l+0x992>
 80127ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80127d2:	9b08      	ldr	r3, [sp, #32]
 80127d4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d1c1      	bne.n	8012760 <_strtod_l+0x9f0>
 80127dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80127e0:	0d1b      	lsrs	r3, r3, #20
 80127e2:	051b      	lsls	r3, r3, #20
 80127e4:	429d      	cmp	r5, r3
 80127e6:	d1bb      	bne.n	8012760 <_strtod_l+0x9f0>
 80127e8:	4630      	mov	r0, r6
 80127ea:	4639      	mov	r1, r7
 80127ec:	f7ee fa84 	bl	8000cf8 <__aeabi_d2lz>
 80127f0:	f7ed fef4 	bl	80005dc <__aeabi_l2d>
 80127f4:	4602      	mov	r2, r0
 80127f6:	460b      	mov	r3, r1
 80127f8:	4630      	mov	r0, r6
 80127fa:	4639      	mov	r1, r7
 80127fc:	f7ed fd64 	bl	80002c8 <__aeabi_dsub>
 8012800:	460b      	mov	r3, r1
 8012802:	4602      	mov	r2, r0
 8012804:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012808:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801280c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801280e:	ea46 060a 	orr.w	r6, r6, sl
 8012812:	431e      	orrs	r6, r3
 8012814:	d06f      	beq.n	80128f6 <_strtod_l+0xb86>
 8012816:	a30e      	add	r3, pc, #56	@ (adr r3, 8012850 <_strtod_l+0xae0>)
 8012818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281c:	f7ee f97e 	bl	8000b1c <__aeabi_dcmplt>
 8012820:	2800      	cmp	r0, #0
 8012822:	f47f acd3 	bne.w	80121cc <_strtod_l+0x45c>
 8012826:	a30c      	add	r3, pc, #48	@ (adr r3, 8012858 <_strtod_l+0xae8>)
 8012828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801282c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012830:	f7ee f992 	bl	8000b58 <__aeabi_dcmpgt>
 8012834:	2800      	cmp	r0, #0
 8012836:	d093      	beq.n	8012760 <_strtod_l+0x9f0>
 8012838:	e4c8      	b.n	80121cc <_strtod_l+0x45c>
 801283a:	bf00      	nop
 801283c:	f3af 8000 	nop.w
 8012840:	00000000 	.word	0x00000000
 8012844:	bff00000 	.word	0xbff00000
 8012848:	00000000 	.word	0x00000000
 801284c:	3ff00000 	.word	0x3ff00000
 8012850:	94a03595 	.word	0x94a03595
 8012854:	3fdfffff 	.word	0x3fdfffff
 8012858:	35afe535 	.word	0x35afe535
 801285c:	3fe00000 	.word	0x3fe00000
 8012860:	000fffff 	.word	0x000fffff
 8012864:	7ff00000 	.word	0x7ff00000
 8012868:	7fefffff 	.word	0x7fefffff
 801286c:	3ff00000 	.word	0x3ff00000
 8012870:	3fe00000 	.word	0x3fe00000
 8012874:	7fe00000 	.word	0x7fe00000
 8012878:	7c9fffff 	.word	0x7c9fffff
 801287c:	9b08      	ldr	r3, [sp, #32]
 801287e:	b323      	cbz	r3, 80128ca <_strtod_l+0xb5a>
 8012880:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012884:	d821      	bhi.n	80128ca <_strtod_l+0xb5a>
 8012886:	a328      	add	r3, pc, #160	@ (adr r3, 8012928 <_strtod_l+0xbb8>)
 8012888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288c:	4630      	mov	r0, r6
 801288e:	4639      	mov	r1, r7
 8012890:	f7ee f94e 	bl	8000b30 <__aeabi_dcmple>
 8012894:	b1a0      	cbz	r0, 80128c0 <_strtod_l+0xb50>
 8012896:	4639      	mov	r1, r7
 8012898:	4630      	mov	r0, r6
 801289a:	f7ee f9a5 	bl	8000be8 <__aeabi_d2uiz>
 801289e:	2801      	cmp	r0, #1
 80128a0:	bf38      	it	cc
 80128a2:	2001      	movcc	r0, #1
 80128a4:	f7ed fe4e 	bl	8000544 <__aeabi_ui2d>
 80128a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128aa:	4606      	mov	r6, r0
 80128ac:	460f      	mov	r7, r1
 80128ae:	b9fb      	cbnz	r3, 80128f0 <_strtod_l+0xb80>
 80128b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80128b4:	9014      	str	r0, [sp, #80]	@ 0x50
 80128b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80128b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80128bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80128c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80128c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80128c6:	1b5b      	subs	r3, r3, r5
 80128c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80128ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80128ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80128d2:	f002 ff61 	bl	8015798 <__ulp>
 80128d6:	4650      	mov	r0, sl
 80128d8:	ec53 2b10 	vmov	r2, r3, d0
 80128dc:	4659      	mov	r1, fp
 80128de:	f7ed feab 	bl	8000638 <__aeabi_dmul>
 80128e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80128e6:	f7ed fcf1 	bl	80002cc <__adddf3>
 80128ea:	4682      	mov	sl, r0
 80128ec:	468b      	mov	fp, r1
 80128ee:	e770      	b.n	80127d2 <_strtod_l+0xa62>
 80128f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80128f4:	e7e0      	b.n	80128b8 <_strtod_l+0xb48>
 80128f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8012930 <_strtod_l+0xbc0>)
 80128f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128fc:	f7ee f90e 	bl	8000b1c <__aeabi_dcmplt>
 8012900:	e798      	b.n	8012834 <_strtod_l+0xac4>
 8012902:	2300      	movs	r3, #0
 8012904:	930e      	str	r3, [sp, #56]	@ 0x38
 8012906:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012908:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801290a:	6013      	str	r3, [r2, #0]
 801290c:	f7ff ba6d 	b.w	8011dea <_strtod_l+0x7a>
 8012910:	2a65      	cmp	r2, #101	@ 0x65
 8012912:	f43f ab68 	beq.w	8011fe6 <_strtod_l+0x276>
 8012916:	2a45      	cmp	r2, #69	@ 0x45
 8012918:	f43f ab65 	beq.w	8011fe6 <_strtod_l+0x276>
 801291c:	2301      	movs	r3, #1
 801291e:	f7ff bba0 	b.w	8012062 <_strtod_l+0x2f2>
 8012922:	bf00      	nop
 8012924:	f3af 8000 	nop.w
 8012928:	ffc00000 	.word	0xffc00000
 801292c:	41dfffff 	.word	0x41dfffff
 8012930:	94a03595 	.word	0x94a03595
 8012934:	3fcfffff 	.word	0x3fcfffff

08012938 <strtod>:
 8012938:	460a      	mov	r2, r1
 801293a:	4601      	mov	r1, r0
 801293c:	4802      	ldr	r0, [pc, #8]	@ (8012948 <strtod+0x10>)
 801293e:	4b03      	ldr	r3, [pc, #12]	@ (801294c <strtod+0x14>)
 8012940:	6800      	ldr	r0, [r0, #0]
 8012942:	f7ff ba15 	b.w	8011d70 <_strtod_l>
 8012946:	bf00      	nop
 8012948:	2000018c 	.word	0x2000018c
 801294c:	20000020 	.word	0x20000020

08012950 <strtof>:
 8012950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012954:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8012a14 <strtof+0xc4>
 8012958:	4b29      	ldr	r3, [pc, #164]	@ (8012a00 <strtof+0xb0>)
 801295a:	460a      	mov	r2, r1
 801295c:	ed2d 8b02 	vpush	{d8}
 8012960:	4601      	mov	r1, r0
 8012962:	f8d8 0000 	ldr.w	r0, [r8]
 8012966:	f7ff fa03 	bl	8011d70 <_strtod_l>
 801296a:	ec55 4b10 	vmov	r4, r5, d0
 801296e:	4622      	mov	r2, r4
 8012970:	462b      	mov	r3, r5
 8012972:	4620      	mov	r0, r4
 8012974:	4629      	mov	r1, r5
 8012976:	f7ee f8f9 	bl	8000b6c <__aeabi_dcmpun>
 801297a:	b190      	cbz	r0, 80129a2 <strtof+0x52>
 801297c:	2d00      	cmp	r5, #0
 801297e:	4821      	ldr	r0, [pc, #132]	@ (8012a04 <strtof+0xb4>)
 8012980:	da09      	bge.n	8012996 <strtof+0x46>
 8012982:	f001 f8d5 	bl	8013b30 <nanf>
 8012986:	eeb1 8a40 	vneg.f32	s16, s0
 801298a:	eeb0 0a48 	vmov.f32	s0, s16
 801298e:	ecbd 8b02 	vpop	{d8}
 8012992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012996:	ecbd 8b02 	vpop	{d8}
 801299a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801299e:	f001 b8c7 	b.w	8013b30 <nanf>
 80129a2:	4620      	mov	r0, r4
 80129a4:	4629      	mov	r1, r5
 80129a6:	f7ee f93f 	bl	8000c28 <__aeabi_d2f>
 80129aa:	ee08 0a10 	vmov	s16, r0
 80129ae:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8012a08 <strtof+0xb8>
 80129b2:	eeb0 7ac8 	vabs.f32	s14, s16
 80129b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80129ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129be:	dd11      	ble.n	80129e4 <strtof+0x94>
 80129c0:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80129c4:	4b11      	ldr	r3, [pc, #68]	@ (8012a0c <strtof+0xbc>)
 80129c6:	f04f 32ff 	mov.w	r2, #4294967295
 80129ca:	4620      	mov	r0, r4
 80129cc:	4639      	mov	r1, r7
 80129ce:	f7ee f8cd 	bl	8000b6c <__aeabi_dcmpun>
 80129d2:	b980      	cbnz	r0, 80129f6 <strtof+0xa6>
 80129d4:	4b0d      	ldr	r3, [pc, #52]	@ (8012a0c <strtof+0xbc>)
 80129d6:	f04f 32ff 	mov.w	r2, #4294967295
 80129da:	4620      	mov	r0, r4
 80129dc:	4639      	mov	r1, r7
 80129de:	f7ee f8a7 	bl	8000b30 <__aeabi_dcmple>
 80129e2:	b940      	cbnz	r0, 80129f6 <strtof+0xa6>
 80129e4:	ee18 3a10 	vmov	r3, s16
 80129e8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80129ec:	d1cd      	bne.n	801298a <strtof+0x3a>
 80129ee:	4b08      	ldr	r3, [pc, #32]	@ (8012a10 <strtof+0xc0>)
 80129f0:	402b      	ands	r3, r5
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d0c9      	beq.n	801298a <strtof+0x3a>
 80129f6:	f8d8 3000 	ldr.w	r3, [r8]
 80129fa:	2222      	movs	r2, #34	@ 0x22
 80129fc:	601a      	str	r2, [r3, #0]
 80129fe:	e7c4      	b.n	801298a <strtof+0x3a>
 8012a00:	20000020 	.word	0x20000020
 8012a04:	08016872 	.word	0x08016872
 8012a08:	7f7fffff 	.word	0x7f7fffff
 8012a0c:	7fefffff 	.word	0x7fefffff
 8012a10:	7ff00000 	.word	0x7ff00000
 8012a14:	2000018c 	.word	0x2000018c

08012a18 <_strtol_l.isra.0>:
 8012a18:	2b24      	cmp	r3, #36	@ 0x24
 8012a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a1e:	4686      	mov	lr, r0
 8012a20:	4690      	mov	r8, r2
 8012a22:	d801      	bhi.n	8012a28 <_strtol_l.isra.0+0x10>
 8012a24:	2b01      	cmp	r3, #1
 8012a26:	d106      	bne.n	8012a36 <_strtol_l.isra.0+0x1e>
 8012a28:	f001 f83c 	bl	8013aa4 <__errno>
 8012a2c:	2316      	movs	r3, #22
 8012a2e:	6003      	str	r3, [r0, #0]
 8012a30:	2000      	movs	r0, #0
 8012a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a36:	4834      	ldr	r0, [pc, #208]	@ (8012b08 <_strtol_l.isra.0+0xf0>)
 8012a38:	460d      	mov	r5, r1
 8012a3a:	462a      	mov	r2, r5
 8012a3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a40:	5d06      	ldrb	r6, [r0, r4]
 8012a42:	f016 0608 	ands.w	r6, r6, #8
 8012a46:	d1f8      	bne.n	8012a3a <_strtol_l.isra.0+0x22>
 8012a48:	2c2d      	cmp	r4, #45	@ 0x2d
 8012a4a:	d110      	bne.n	8012a6e <_strtol_l.isra.0+0x56>
 8012a4c:	782c      	ldrb	r4, [r5, #0]
 8012a4e:	2601      	movs	r6, #1
 8012a50:	1c95      	adds	r5, r2, #2
 8012a52:	f033 0210 	bics.w	r2, r3, #16
 8012a56:	d115      	bne.n	8012a84 <_strtol_l.isra.0+0x6c>
 8012a58:	2c30      	cmp	r4, #48	@ 0x30
 8012a5a:	d10d      	bne.n	8012a78 <_strtol_l.isra.0+0x60>
 8012a5c:	782a      	ldrb	r2, [r5, #0]
 8012a5e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012a62:	2a58      	cmp	r2, #88	@ 0x58
 8012a64:	d108      	bne.n	8012a78 <_strtol_l.isra.0+0x60>
 8012a66:	786c      	ldrb	r4, [r5, #1]
 8012a68:	3502      	adds	r5, #2
 8012a6a:	2310      	movs	r3, #16
 8012a6c:	e00a      	b.n	8012a84 <_strtol_l.isra.0+0x6c>
 8012a6e:	2c2b      	cmp	r4, #43	@ 0x2b
 8012a70:	bf04      	itt	eq
 8012a72:	782c      	ldrbeq	r4, [r5, #0]
 8012a74:	1c95      	addeq	r5, r2, #2
 8012a76:	e7ec      	b.n	8012a52 <_strtol_l.isra.0+0x3a>
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d1f6      	bne.n	8012a6a <_strtol_l.isra.0+0x52>
 8012a7c:	2c30      	cmp	r4, #48	@ 0x30
 8012a7e:	bf14      	ite	ne
 8012a80:	230a      	movne	r3, #10
 8012a82:	2308      	moveq	r3, #8
 8012a84:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012a88:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	fbbc f9f3 	udiv	r9, ip, r3
 8012a92:	4610      	mov	r0, r2
 8012a94:	fb03 ca19 	mls	sl, r3, r9, ip
 8012a98:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012a9c:	2f09      	cmp	r7, #9
 8012a9e:	d80f      	bhi.n	8012ac0 <_strtol_l.isra.0+0xa8>
 8012aa0:	463c      	mov	r4, r7
 8012aa2:	42a3      	cmp	r3, r4
 8012aa4:	dd1b      	ble.n	8012ade <_strtol_l.isra.0+0xc6>
 8012aa6:	1c57      	adds	r7, r2, #1
 8012aa8:	d007      	beq.n	8012aba <_strtol_l.isra.0+0xa2>
 8012aaa:	4581      	cmp	r9, r0
 8012aac:	d314      	bcc.n	8012ad8 <_strtol_l.isra.0+0xc0>
 8012aae:	d101      	bne.n	8012ab4 <_strtol_l.isra.0+0x9c>
 8012ab0:	45a2      	cmp	sl, r4
 8012ab2:	db11      	blt.n	8012ad8 <_strtol_l.isra.0+0xc0>
 8012ab4:	fb00 4003 	mla	r0, r0, r3, r4
 8012ab8:	2201      	movs	r2, #1
 8012aba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012abe:	e7eb      	b.n	8012a98 <_strtol_l.isra.0+0x80>
 8012ac0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012ac4:	2f19      	cmp	r7, #25
 8012ac6:	d801      	bhi.n	8012acc <_strtol_l.isra.0+0xb4>
 8012ac8:	3c37      	subs	r4, #55	@ 0x37
 8012aca:	e7ea      	b.n	8012aa2 <_strtol_l.isra.0+0x8a>
 8012acc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012ad0:	2f19      	cmp	r7, #25
 8012ad2:	d804      	bhi.n	8012ade <_strtol_l.isra.0+0xc6>
 8012ad4:	3c57      	subs	r4, #87	@ 0x57
 8012ad6:	e7e4      	b.n	8012aa2 <_strtol_l.isra.0+0x8a>
 8012ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8012adc:	e7ed      	b.n	8012aba <_strtol_l.isra.0+0xa2>
 8012ade:	1c53      	adds	r3, r2, #1
 8012ae0:	d108      	bne.n	8012af4 <_strtol_l.isra.0+0xdc>
 8012ae2:	2322      	movs	r3, #34	@ 0x22
 8012ae4:	f8ce 3000 	str.w	r3, [lr]
 8012ae8:	4660      	mov	r0, ip
 8012aea:	f1b8 0f00 	cmp.w	r8, #0
 8012aee:	d0a0      	beq.n	8012a32 <_strtol_l.isra.0+0x1a>
 8012af0:	1e69      	subs	r1, r5, #1
 8012af2:	e006      	b.n	8012b02 <_strtol_l.isra.0+0xea>
 8012af4:	b106      	cbz	r6, 8012af8 <_strtol_l.isra.0+0xe0>
 8012af6:	4240      	negs	r0, r0
 8012af8:	f1b8 0f00 	cmp.w	r8, #0
 8012afc:	d099      	beq.n	8012a32 <_strtol_l.isra.0+0x1a>
 8012afe:	2a00      	cmp	r2, #0
 8012b00:	d1f6      	bne.n	8012af0 <_strtol_l.isra.0+0xd8>
 8012b02:	f8c8 1000 	str.w	r1, [r8]
 8012b06:	e794      	b.n	8012a32 <_strtol_l.isra.0+0x1a>
 8012b08:	08016a09 	.word	0x08016a09

08012b0c <strtol>:
 8012b0c:	4613      	mov	r3, r2
 8012b0e:	460a      	mov	r2, r1
 8012b10:	4601      	mov	r1, r0
 8012b12:	4802      	ldr	r0, [pc, #8]	@ (8012b1c <strtol+0x10>)
 8012b14:	6800      	ldr	r0, [r0, #0]
 8012b16:	f7ff bf7f 	b.w	8012a18 <_strtol_l.isra.0>
 8012b1a:	bf00      	nop
 8012b1c:	2000018c 	.word	0x2000018c

08012b20 <__cvt>:
 8012b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b24:	ec57 6b10 	vmov	r6, r7, d0
 8012b28:	2f00      	cmp	r7, #0
 8012b2a:	460c      	mov	r4, r1
 8012b2c:	4619      	mov	r1, r3
 8012b2e:	463b      	mov	r3, r7
 8012b30:	bfbb      	ittet	lt
 8012b32:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012b36:	461f      	movlt	r7, r3
 8012b38:	2300      	movge	r3, #0
 8012b3a:	232d      	movlt	r3, #45	@ 0x2d
 8012b3c:	700b      	strb	r3, [r1, #0]
 8012b3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b40:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012b44:	4691      	mov	r9, r2
 8012b46:	f023 0820 	bic.w	r8, r3, #32
 8012b4a:	bfbc      	itt	lt
 8012b4c:	4632      	movlt	r2, r6
 8012b4e:	4616      	movlt	r6, r2
 8012b50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012b54:	d005      	beq.n	8012b62 <__cvt+0x42>
 8012b56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012b5a:	d100      	bne.n	8012b5e <__cvt+0x3e>
 8012b5c:	3401      	adds	r4, #1
 8012b5e:	2102      	movs	r1, #2
 8012b60:	e000      	b.n	8012b64 <__cvt+0x44>
 8012b62:	2103      	movs	r1, #3
 8012b64:	ab03      	add	r3, sp, #12
 8012b66:	9301      	str	r3, [sp, #4]
 8012b68:	ab02      	add	r3, sp, #8
 8012b6a:	9300      	str	r3, [sp, #0]
 8012b6c:	ec47 6b10 	vmov	d0, r6, r7
 8012b70:	4653      	mov	r3, sl
 8012b72:	4622      	mov	r2, r4
 8012b74:	f001 f888 	bl	8013c88 <_dtoa_r>
 8012b78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012b7c:	4605      	mov	r5, r0
 8012b7e:	d119      	bne.n	8012bb4 <__cvt+0x94>
 8012b80:	f019 0f01 	tst.w	r9, #1
 8012b84:	d00e      	beq.n	8012ba4 <__cvt+0x84>
 8012b86:	eb00 0904 	add.w	r9, r0, r4
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	4630      	mov	r0, r6
 8012b90:	4639      	mov	r1, r7
 8012b92:	f7ed ffb9 	bl	8000b08 <__aeabi_dcmpeq>
 8012b96:	b108      	cbz	r0, 8012b9c <__cvt+0x7c>
 8012b98:	f8cd 900c 	str.w	r9, [sp, #12]
 8012b9c:	2230      	movs	r2, #48	@ 0x30
 8012b9e:	9b03      	ldr	r3, [sp, #12]
 8012ba0:	454b      	cmp	r3, r9
 8012ba2:	d31e      	bcc.n	8012be2 <__cvt+0xc2>
 8012ba4:	9b03      	ldr	r3, [sp, #12]
 8012ba6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ba8:	1b5b      	subs	r3, r3, r5
 8012baa:	4628      	mov	r0, r5
 8012bac:	6013      	str	r3, [r2, #0]
 8012bae:	b004      	add	sp, #16
 8012bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012bb8:	eb00 0904 	add.w	r9, r0, r4
 8012bbc:	d1e5      	bne.n	8012b8a <__cvt+0x6a>
 8012bbe:	7803      	ldrb	r3, [r0, #0]
 8012bc0:	2b30      	cmp	r3, #48	@ 0x30
 8012bc2:	d10a      	bne.n	8012bda <__cvt+0xba>
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	4630      	mov	r0, r6
 8012bca:	4639      	mov	r1, r7
 8012bcc:	f7ed ff9c 	bl	8000b08 <__aeabi_dcmpeq>
 8012bd0:	b918      	cbnz	r0, 8012bda <__cvt+0xba>
 8012bd2:	f1c4 0401 	rsb	r4, r4, #1
 8012bd6:	f8ca 4000 	str.w	r4, [sl]
 8012bda:	f8da 3000 	ldr.w	r3, [sl]
 8012bde:	4499      	add	r9, r3
 8012be0:	e7d3      	b.n	8012b8a <__cvt+0x6a>
 8012be2:	1c59      	adds	r1, r3, #1
 8012be4:	9103      	str	r1, [sp, #12]
 8012be6:	701a      	strb	r2, [r3, #0]
 8012be8:	e7d9      	b.n	8012b9e <__cvt+0x7e>

08012bea <__exponent>:
 8012bea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bec:	2900      	cmp	r1, #0
 8012bee:	bfba      	itte	lt
 8012bf0:	4249      	neglt	r1, r1
 8012bf2:	232d      	movlt	r3, #45	@ 0x2d
 8012bf4:	232b      	movge	r3, #43	@ 0x2b
 8012bf6:	2909      	cmp	r1, #9
 8012bf8:	7002      	strb	r2, [r0, #0]
 8012bfa:	7043      	strb	r3, [r0, #1]
 8012bfc:	dd29      	ble.n	8012c52 <__exponent+0x68>
 8012bfe:	f10d 0307 	add.w	r3, sp, #7
 8012c02:	461d      	mov	r5, r3
 8012c04:	270a      	movs	r7, #10
 8012c06:	461a      	mov	r2, r3
 8012c08:	fbb1 f6f7 	udiv	r6, r1, r7
 8012c0c:	fb07 1416 	mls	r4, r7, r6, r1
 8012c10:	3430      	adds	r4, #48	@ 0x30
 8012c12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012c16:	460c      	mov	r4, r1
 8012c18:	2c63      	cmp	r4, #99	@ 0x63
 8012c1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8012c1e:	4631      	mov	r1, r6
 8012c20:	dcf1      	bgt.n	8012c06 <__exponent+0x1c>
 8012c22:	3130      	adds	r1, #48	@ 0x30
 8012c24:	1e94      	subs	r4, r2, #2
 8012c26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012c2a:	1c41      	adds	r1, r0, #1
 8012c2c:	4623      	mov	r3, r4
 8012c2e:	42ab      	cmp	r3, r5
 8012c30:	d30a      	bcc.n	8012c48 <__exponent+0x5e>
 8012c32:	f10d 0309 	add.w	r3, sp, #9
 8012c36:	1a9b      	subs	r3, r3, r2
 8012c38:	42ac      	cmp	r4, r5
 8012c3a:	bf88      	it	hi
 8012c3c:	2300      	movhi	r3, #0
 8012c3e:	3302      	adds	r3, #2
 8012c40:	4403      	add	r3, r0
 8012c42:	1a18      	subs	r0, r3, r0
 8012c44:	b003      	add	sp, #12
 8012c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012c4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012c50:	e7ed      	b.n	8012c2e <__exponent+0x44>
 8012c52:	2330      	movs	r3, #48	@ 0x30
 8012c54:	3130      	adds	r1, #48	@ 0x30
 8012c56:	7083      	strb	r3, [r0, #2]
 8012c58:	70c1      	strb	r1, [r0, #3]
 8012c5a:	1d03      	adds	r3, r0, #4
 8012c5c:	e7f1      	b.n	8012c42 <__exponent+0x58>
	...

08012c60 <_printf_float>:
 8012c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c64:	b08d      	sub	sp, #52	@ 0x34
 8012c66:	460c      	mov	r4, r1
 8012c68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012c6c:	4616      	mov	r6, r2
 8012c6e:	461f      	mov	r7, r3
 8012c70:	4605      	mov	r5, r0
 8012c72:	f000 fe6f 	bl	8013954 <_localeconv_r>
 8012c76:	6803      	ldr	r3, [r0, #0]
 8012c78:	9304      	str	r3, [sp, #16]
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7ed fb18 	bl	80002b0 <strlen>
 8012c80:	2300      	movs	r3, #0
 8012c82:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c84:	f8d8 3000 	ldr.w	r3, [r8]
 8012c88:	9005      	str	r0, [sp, #20]
 8012c8a:	3307      	adds	r3, #7
 8012c8c:	f023 0307 	bic.w	r3, r3, #7
 8012c90:	f103 0208 	add.w	r2, r3, #8
 8012c94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012c98:	f8d4 b000 	ldr.w	fp, [r4]
 8012c9c:	f8c8 2000 	str.w	r2, [r8]
 8012ca0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012ca4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012ca8:	9307      	str	r3, [sp, #28]
 8012caa:	f8cd 8018 	str.w	r8, [sp, #24]
 8012cae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012cb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012cb6:	4b9c      	ldr	r3, [pc, #624]	@ (8012f28 <_printf_float+0x2c8>)
 8012cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8012cbc:	f7ed ff56 	bl	8000b6c <__aeabi_dcmpun>
 8012cc0:	bb70      	cbnz	r0, 8012d20 <_printf_float+0xc0>
 8012cc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012cc6:	4b98      	ldr	r3, [pc, #608]	@ (8012f28 <_printf_float+0x2c8>)
 8012cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8012ccc:	f7ed ff30 	bl	8000b30 <__aeabi_dcmple>
 8012cd0:	bb30      	cbnz	r0, 8012d20 <_printf_float+0xc0>
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	4640      	mov	r0, r8
 8012cd8:	4649      	mov	r1, r9
 8012cda:	f7ed ff1f 	bl	8000b1c <__aeabi_dcmplt>
 8012cde:	b110      	cbz	r0, 8012ce6 <_printf_float+0x86>
 8012ce0:	232d      	movs	r3, #45	@ 0x2d
 8012ce2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ce6:	4a91      	ldr	r2, [pc, #580]	@ (8012f2c <_printf_float+0x2cc>)
 8012ce8:	4b91      	ldr	r3, [pc, #580]	@ (8012f30 <_printf_float+0x2d0>)
 8012cea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012cee:	bf8c      	ite	hi
 8012cf0:	4690      	movhi	r8, r2
 8012cf2:	4698      	movls	r8, r3
 8012cf4:	2303      	movs	r3, #3
 8012cf6:	6123      	str	r3, [r4, #16]
 8012cf8:	f02b 0304 	bic.w	r3, fp, #4
 8012cfc:	6023      	str	r3, [r4, #0]
 8012cfe:	f04f 0900 	mov.w	r9, #0
 8012d02:	9700      	str	r7, [sp, #0]
 8012d04:	4633      	mov	r3, r6
 8012d06:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012d08:	4621      	mov	r1, r4
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	f000 f9d2 	bl	80130b4 <_printf_common>
 8012d10:	3001      	adds	r0, #1
 8012d12:	f040 808d 	bne.w	8012e30 <_printf_float+0x1d0>
 8012d16:	f04f 30ff 	mov.w	r0, #4294967295
 8012d1a:	b00d      	add	sp, #52	@ 0x34
 8012d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d20:	4642      	mov	r2, r8
 8012d22:	464b      	mov	r3, r9
 8012d24:	4640      	mov	r0, r8
 8012d26:	4649      	mov	r1, r9
 8012d28:	f7ed ff20 	bl	8000b6c <__aeabi_dcmpun>
 8012d2c:	b140      	cbz	r0, 8012d40 <_printf_float+0xe0>
 8012d2e:	464b      	mov	r3, r9
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	bfbc      	itt	lt
 8012d34:	232d      	movlt	r3, #45	@ 0x2d
 8012d36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8012f34 <_printf_float+0x2d4>)
 8012d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8012f38 <_printf_float+0x2d8>)
 8012d3e:	e7d4      	b.n	8012cea <_printf_float+0x8a>
 8012d40:	6863      	ldr	r3, [r4, #4]
 8012d42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012d46:	9206      	str	r2, [sp, #24]
 8012d48:	1c5a      	adds	r2, r3, #1
 8012d4a:	d13b      	bne.n	8012dc4 <_printf_float+0x164>
 8012d4c:	2306      	movs	r3, #6
 8012d4e:	6063      	str	r3, [r4, #4]
 8012d50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012d54:	2300      	movs	r3, #0
 8012d56:	6022      	str	r2, [r4, #0]
 8012d58:	9303      	str	r3, [sp, #12]
 8012d5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8012d5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012d60:	ab09      	add	r3, sp, #36	@ 0x24
 8012d62:	9300      	str	r3, [sp, #0]
 8012d64:	6861      	ldr	r1, [r4, #4]
 8012d66:	ec49 8b10 	vmov	d0, r8, r9
 8012d6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012d6e:	4628      	mov	r0, r5
 8012d70:	f7ff fed6 	bl	8012b20 <__cvt>
 8012d74:	9b06      	ldr	r3, [sp, #24]
 8012d76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012d78:	2b47      	cmp	r3, #71	@ 0x47
 8012d7a:	4680      	mov	r8, r0
 8012d7c:	d129      	bne.n	8012dd2 <_printf_float+0x172>
 8012d7e:	1cc8      	adds	r0, r1, #3
 8012d80:	db02      	blt.n	8012d88 <_printf_float+0x128>
 8012d82:	6863      	ldr	r3, [r4, #4]
 8012d84:	4299      	cmp	r1, r3
 8012d86:	dd41      	ble.n	8012e0c <_printf_float+0x1ac>
 8012d88:	f1aa 0a02 	sub.w	sl, sl, #2
 8012d8c:	fa5f fa8a 	uxtb.w	sl, sl
 8012d90:	3901      	subs	r1, #1
 8012d92:	4652      	mov	r2, sl
 8012d94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012d98:	9109      	str	r1, [sp, #36]	@ 0x24
 8012d9a:	f7ff ff26 	bl	8012bea <__exponent>
 8012d9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012da0:	1813      	adds	r3, r2, r0
 8012da2:	2a01      	cmp	r2, #1
 8012da4:	4681      	mov	r9, r0
 8012da6:	6123      	str	r3, [r4, #16]
 8012da8:	dc02      	bgt.n	8012db0 <_printf_float+0x150>
 8012daa:	6822      	ldr	r2, [r4, #0]
 8012dac:	07d2      	lsls	r2, r2, #31
 8012dae:	d501      	bpl.n	8012db4 <_printf_float+0x154>
 8012db0:	3301      	adds	r3, #1
 8012db2:	6123      	str	r3, [r4, #16]
 8012db4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d0a2      	beq.n	8012d02 <_printf_float+0xa2>
 8012dbc:	232d      	movs	r3, #45	@ 0x2d
 8012dbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012dc2:	e79e      	b.n	8012d02 <_printf_float+0xa2>
 8012dc4:	9a06      	ldr	r2, [sp, #24]
 8012dc6:	2a47      	cmp	r2, #71	@ 0x47
 8012dc8:	d1c2      	bne.n	8012d50 <_printf_float+0xf0>
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d1c0      	bne.n	8012d50 <_printf_float+0xf0>
 8012dce:	2301      	movs	r3, #1
 8012dd0:	e7bd      	b.n	8012d4e <_printf_float+0xee>
 8012dd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012dd6:	d9db      	bls.n	8012d90 <_printf_float+0x130>
 8012dd8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012ddc:	d118      	bne.n	8012e10 <_printf_float+0x1b0>
 8012dde:	2900      	cmp	r1, #0
 8012de0:	6863      	ldr	r3, [r4, #4]
 8012de2:	dd0b      	ble.n	8012dfc <_printf_float+0x19c>
 8012de4:	6121      	str	r1, [r4, #16]
 8012de6:	b913      	cbnz	r3, 8012dee <_printf_float+0x18e>
 8012de8:	6822      	ldr	r2, [r4, #0]
 8012dea:	07d0      	lsls	r0, r2, #31
 8012dec:	d502      	bpl.n	8012df4 <_printf_float+0x194>
 8012dee:	3301      	adds	r3, #1
 8012df0:	440b      	add	r3, r1
 8012df2:	6123      	str	r3, [r4, #16]
 8012df4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012df6:	f04f 0900 	mov.w	r9, #0
 8012dfa:	e7db      	b.n	8012db4 <_printf_float+0x154>
 8012dfc:	b913      	cbnz	r3, 8012e04 <_printf_float+0x1a4>
 8012dfe:	6822      	ldr	r2, [r4, #0]
 8012e00:	07d2      	lsls	r2, r2, #31
 8012e02:	d501      	bpl.n	8012e08 <_printf_float+0x1a8>
 8012e04:	3302      	adds	r3, #2
 8012e06:	e7f4      	b.n	8012df2 <_printf_float+0x192>
 8012e08:	2301      	movs	r3, #1
 8012e0a:	e7f2      	b.n	8012df2 <_printf_float+0x192>
 8012e0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e12:	4299      	cmp	r1, r3
 8012e14:	db05      	blt.n	8012e22 <_printf_float+0x1c2>
 8012e16:	6823      	ldr	r3, [r4, #0]
 8012e18:	6121      	str	r1, [r4, #16]
 8012e1a:	07d8      	lsls	r0, r3, #31
 8012e1c:	d5ea      	bpl.n	8012df4 <_printf_float+0x194>
 8012e1e:	1c4b      	adds	r3, r1, #1
 8012e20:	e7e7      	b.n	8012df2 <_printf_float+0x192>
 8012e22:	2900      	cmp	r1, #0
 8012e24:	bfd4      	ite	le
 8012e26:	f1c1 0202 	rsble	r2, r1, #2
 8012e2a:	2201      	movgt	r2, #1
 8012e2c:	4413      	add	r3, r2
 8012e2e:	e7e0      	b.n	8012df2 <_printf_float+0x192>
 8012e30:	6823      	ldr	r3, [r4, #0]
 8012e32:	055a      	lsls	r2, r3, #21
 8012e34:	d407      	bmi.n	8012e46 <_printf_float+0x1e6>
 8012e36:	6923      	ldr	r3, [r4, #16]
 8012e38:	4642      	mov	r2, r8
 8012e3a:	4631      	mov	r1, r6
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	47b8      	blx	r7
 8012e40:	3001      	adds	r0, #1
 8012e42:	d12b      	bne.n	8012e9c <_printf_float+0x23c>
 8012e44:	e767      	b.n	8012d16 <_printf_float+0xb6>
 8012e46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012e4a:	f240 80dd 	bls.w	8013008 <_printf_float+0x3a8>
 8012e4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012e52:	2200      	movs	r2, #0
 8012e54:	2300      	movs	r3, #0
 8012e56:	f7ed fe57 	bl	8000b08 <__aeabi_dcmpeq>
 8012e5a:	2800      	cmp	r0, #0
 8012e5c:	d033      	beq.n	8012ec6 <_printf_float+0x266>
 8012e5e:	4a37      	ldr	r2, [pc, #220]	@ (8012f3c <_printf_float+0x2dc>)
 8012e60:	2301      	movs	r3, #1
 8012e62:	4631      	mov	r1, r6
 8012e64:	4628      	mov	r0, r5
 8012e66:	47b8      	blx	r7
 8012e68:	3001      	adds	r0, #1
 8012e6a:	f43f af54 	beq.w	8012d16 <_printf_float+0xb6>
 8012e6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012e72:	4543      	cmp	r3, r8
 8012e74:	db02      	blt.n	8012e7c <_printf_float+0x21c>
 8012e76:	6823      	ldr	r3, [r4, #0]
 8012e78:	07d8      	lsls	r0, r3, #31
 8012e7a:	d50f      	bpl.n	8012e9c <_printf_float+0x23c>
 8012e7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e80:	4631      	mov	r1, r6
 8012e82:	4628      	mov	r0, r5
 8012e84:	47b8      	blx	r7
 8012e86:	3001      	adds	r0, #1
 8012e88:	f43f af45 	beq.w	8012d16 <_printf_float+0xb6>
 8012e8c:	f04f 0900 	mov.w	r9, #0
 8012e90:	f108 38ff 	add.w	r8, r8, #4294967295
 8012e94:	f104 0a1a 	add.w	sl, r4, #26
 8012e98:	45c8      	cmp	r8, r9
 8012e9a:	dc09      	bgt.n	8012eb0 <_printf_float+0x250>
 8012e9c:	6823      	ldr	r3, [r4, #0]
 8012e9e:	079b      	lsls	r3, r3, #30
 8012ea0:	f100 8103 	bmi.w	80130aa <_printf_float+0x44a>
 8012ea4:	68e0      	ldr	r0, [r4, #12]
 8012ea6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ea8:	4298      	cmp	r0, r3
 8012eaa:	bfb8      	it	lt
 8012eac:	4618      	movlt	r0, r3
 8012eae:	e734      	b.n	8012d1a <_printf_float+0xba>
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	4652      	mov	r2, sl
 8012eb4:	4631      	mov	r1, r6
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	47b8      	blx	r7
 8012eba:	3001      	adds	r0, #1
 8012ebc:	f43f af2b 	beq.w	8012d16 <_printf_float+0xb6>
 8012ec0:	f109 0901 	add.w	r9, r9, #1
 8012ec4:	e7e8      	b.n	8012e98 <_printf_float+0x238>
 8012ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	dc39      	bgt.n	8012f40 <_printf_float+0x2e0>
 8012ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8012f3c <_printf_float+0x2dc>)
 8012ece:	2301      	movs	r3, #1
 8012ed0:	4631      	mov	r1, r6
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	47b8      	blx	r7
 8012ed6:	3001      	adds	r0, #1
 8012ed8:	f43f af1d 	beq.w	8012d16 <_printf_float+0xb6>
 8012edc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012ee0:	ea59 0303 	orrs.w	r3, r9, r3
 8012ee4:	d102      	bne.n	8012eec <_printf_float+0x28c>
 8012ee6:	6823      	ldr	r3, [r4, #0]
 8012ee8:	07d9      	lsls	r1, r3, #31
 8012eea:	d5d7      	bpl.n	8012e9c <_printf_float+0x23c>
 8012eec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ef0:	4631      	mov	r1, r6
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	47b8      	blx	r7
 8012ef6:	3001      	adds	r0, #1
 8012ef8:	f43f af0d 	beq.w	8012d16 <_printf_float+0xb6>
 8012efc:	f04f 0a00 	mov.w	sl, #0
 8012f00:	f104 0b1a 	add.w	fp, r4, #26
 8012f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f06:	425b      	negs	r3, r3
 8012f08:	4553      	cmp	r3, sl
 8012f0a:	dc01      	bgt.n	8012f10 <_printf_float+0x2b0>
 8012f0c:	464b      	mov	r3, r9
 8012f0e:	e793      	b.n	8012e38 <_printf_float+0x1d8>
 8012f10:	2301      	movs	r3, #1
 8012f12:	465a      	mov	r2, fp
 8012f14:	4631      	mov	r1, r6
 8012f16:	4628      	mov	r0, r5
 8012f18:	47b8      	blx	r7
 8012f1a:	3001      	adds	r0, #1
 8012f1c:	f43f aefb 	beq.w	8012d16 <_printf_float+0xb6>
 8012f20:	f10a 0a01 	add.w	sl, sl, #1
 8012f24:	e7ee      	b.n	8012f04 <_printf_float+0x2a4>
 8012f26:	bf00      	nop
 8012f28:	7fefffff 	.word	0x7fefffff
 8012f2c:	0801678e 	.word	0x0801678e
 8012f30:	0801678a 	.word	0x0801678a
 8012f34:	08016796 	.word	0x08016796
 8012f38:	08016792 	.word	0x08016792
 8012f3c:	0801679a 	.word	0x0801679a
 8012f40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012f42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012f46:	4553      	cmp	r3, sl
 8012f48:	bfa8      	it	ge
 8012f4a:	4653      	movge	r3, sl
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	4699      	mov	r9, r3
 8012f50:	dc36      	bgt.n	8012fc0 <_printf_float+0x360>
 8012f52:	f04f 0b00 	mov.w	fp, #0
 8012f56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f5a:	f104 021a 	add.w	r2, r4, #26
 8012f5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012f60:	9306      	str	r3, [sp, #24]
 8012f62:	eba3 0309 	sub.w	r3, r3, r9
 8012f66:	455b      	cmp	r3, fp
 8012f68:	dc31      	bgt.n	8012fce <_printf_float+0x36e>
 8012f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f6c:	459a      	cmp	sl, r3
 8012f6e:	dc3a      	bgt.n	8012fe6 <_printf_float+0x386>
 8012f70:	6823      	ldr	r3, [r4, #0]
 8012f72:	07da      	lsls	r2, r3, #31
 8012f74:	d437      	bmi.n	8012fe6 <_printf_float+0x386>
 8012f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f78:	ebaa 0903 	sub.w	r9, sl, r3
 8012f7c:	9b06      	ldr	r3, [sp, #24]
 8012f7e:	ebaa 0303 	sub.w	r3, sl, r3
 8012f82:	4599      	cmp	r9, r3
 8012f84:	bfa8      	it	ge
 8012f86:	4699      	movge	r9, r3
 8012f88:	f1b9 0f00 	cmp.w	r9, #0
 8012f8c:	dc33      	bgt.n	8012ff6 <_printf_float+0x396>
 8012f8e:	f04f 0800 	mov.w	r8, #0
 8012f92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f96:	f104 0b1a 	add.w	fp, r4, #26
 8012f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f9c:	ebaa 0303 	sub.w	r3, sl, r3
 8012fa0:	eba3 0309 	sub.w	r3, r3, r9
 8012fa4:	4543      	cmp	r3, r8
 8012fa6:	f77f af79 	ble.w	8012e9c <_printf_float+0x23c>
 8012faa:	2301      	movs	r3, #1
 8012fac:	465a      	mov	r2, fp
 8012fae:	4631      	mov	r1, r6
 8012fb0:	4628      	mov	r0, r5
 8012fb2:	47b8      	blx	r7
 8012fb4:	3001      	adds	r0, #1
 8012fb6:	f43f aeae 	beq.w	8012d16 <_printf_float+0xb6>
 8012fba:	f108 0801 	add.w	r8, r8, #1
 8012fbe:	e7ec      	b.n	8012f9a <_printf_float+0x33a>
 8012fc0:	4642      	mov	r2, r8
 8012fc2:	4631      	mov	r1, r6
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	47b8      	blx	r7
 8012fc8:	3001      	adds	r0, #1
 8012fca:	d1c2      	bne.n	8012f52 <_printf_float+0x2f2>
 8012fcc:	e6a3      	b.n	8012d16 <_printf_float+0xb6>
 8012fce:	2301      	movs	r3, #1
 8012fd0:	4631      	mov	r1, r6
 8012fd2:	4628      	mov	r0, r5
 8012fd4:	9206      	str	r2, [sp, #24]
 8012fd6:	47b8      	blx	r7
 8012fd8:	3001      	adds	r0, #1
 8012fda:	f43f ae9c 	beq.w	8012d16 <_printf_float+0xb6>
 8012fde:	9a06      	ldr	r2, [sp, #24]
 8012fe0:	f10b 0b01 	add.w	fp, fp, #1
 8012fe4:	e7bb      	b.n	8012f5e <_printf_float+0x2fe>
 8012fe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fea:	4631      	mov	r1, r6
 8012fec:	4628      	mov	r0, r5
 8012fee:	47b8      	blx	r7
 8012ff0:	3001      	adds	r0, #1
 8012ff2:	d1c0      	bne.n	8012f76 <_printf_float+0x316>
 8012ff4:	e68f      	b.n	8012d16 <_printf_float+0xb6>
 8012ff6:	9a06      	ldr	r2, [sp, #24]
 8012ff8:	464b      	mov	r3, r9
 8012ffa:	4442      	add	r2, r8
 8012ffc:	4631      	mov	r1, r6
 8012ffe:	4628      	mov	r0, r5
 8013000:	47b8      	blx	r7
 8013002:	3001      	adds	r0, #1
 8013004:	d1c3      	bne.n	8012f8e <_printf_float+0x32e>
 8013006:	e686      	b.n	8012d16 <_printf_float+0xb6>
 8013008:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801300c:	f1ba 0f01 	cmp.w	sl, #1
 8013010:	dc01      	bgt.n	8013016 <_printf_float+0x3b6>
 8013012:	07db      	lsls	r3, r3, #31
 8013014:	d536      	bpl.n	8013084 <_printf_float+0x424>
 8013016:	2301      	movs	r3, #1
 8013018:	4642      	mov	r2, r8
 801301a:	4631      	mov	r1, r6
 801301c:	4628      	mov	r0, r5
 801301e:	47b8      	blx	r7
 8013020:	3001      	adds	r0, #1
 8013022:	f43f ae78 	beq.w	8012d16 <_printf_float+0xb6>
 8013026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801302a:	4631      	mov	r1, r6
 801302c:	4628      	mov	r0, r5
 801302e:	47b8      	blx	r7
 8013030:	3001      	adds	r0, #1
 8013032:	f43f ae70 	beq.w	8012d16 <_printf_float+0xb6>
 8013036:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801303a:	2200      	movs	r2, #0
 801303c:	2300      	movs	r3, #0
 801303e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013042:	f7ed fd61 	bl	8000b08 <__aeabi_dcmpeq>
 8013046:	b9c0      	cbnz	r0, 801307a <_printf_float+0x41a>
 8013048:	4653      	mov	r3, sl
 801304a:	f108 0201 	add.w	r2, r8, #1
 801304e:	4631      	mov	r1, r6
 8013050:	4628      	mov	r0, r5
 8013052:	47b8      	blx	r7
 8013054:	3001      	adds	r0, #1
 8013056:	d10c      	bne.n	8013072 <_printf_float+0x412>
 8013058:	e65d      	b.n	8012d16 <_printf_float+0xb6>
 801305a:	2301      	movs	r3, #1
 801305c:	465a      	mov	r2, fp
 801305e:	4631      	mov	r1, r6
 8013060:	4628      	mov	r0, r5
 8013062:	47b8      	blx	r7
 8013064:	3001      	adds	r0, #1
 8013066:	f43f ae56 	beq.w	8012d16 <_printf_float+0xb6>
 801306a:	f108 0801 	add.w	r8, r8, #1
 801306e:	45d0      	cmp	r8, sl
 8013070:	dbf3      	blt.n	801305a <_printf_float+0x3fa>
 8013072:	464b      	mov	r3, r9
 8013074:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013078:	e6df      	b.n	8012e3a <_printf_float+0x1da>
 801307a:	f04f 0800 	mov.w	r8, #0
 801307e:	f104 0b1a 	add.w	fp, r4, #26
 8013082:	e7f4      	b.n	801306e <_printf_float+0x40e>
 8013084:	2301      	movs	r3, #1
 8013086:	4642      	mov	r2, r8
 8013088:	e7e1      	b.n	801304e <_printf_float+0x3ee>
 801308a:	2301      	movs	r3, #1
 801308c:	464a      	mov	r2, r9
 801308e:	4631      	mov	r1, r6
 8013090:	4628      	mov	r0, r5
 8013092:	47b8      	blx	r7
 8013094:	3001      	adds	r0, #1
 8013096:	f43f ae3e 	beq.w	8012d16 <_printf_float+0xb6>
 801309a:	f108 0801 	add.w	r8, r8, #1
 801309e:	68e3      	ldr	r3, [r4, #12]
 80130a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80130a2:	1a5b      	subs	r3, r3, r1
 80130a4:	4543      	cmp	r3, r8
 80130a6:	dcf0      	bgt.n	801308a <_printf_float+0x42a>
 80130a8:	e6fc      	b.n	8012ea4 <_printf_float+0x244>
 80130aa:	f04f 0800 	mov.w	r8, #0
 80130ae:	f104 0919 	add.w	r9, r4, #25
 80130b2:	e7f4      	b.n	801309e <_printf_float+0x43e>

080130b4 <_printf_common>:
 80130b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130b8:	4616      	mov	r6, r2
 80130ba:	4698      	mov	r8, r3
 80130bc:	688a      	ldr	r2, [r1, #8]
 80130be:	690b      	ldr	r3, [r1, #16]
 80130c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80130c4:	4293      	cmp	r3, r2
 80130c6:	bfb8      	it	lt
 80130c8:	4613      	movlt	r3, r2
 80130ca:	6033      	str	r3, [r6, #0]
 80130cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80130d0:	4607      	mov	r7, r0
 80130d2:	460c      	mov	r4, r1
 80130d4:	b10a      	cbz	r2, 80130da <_printf_common+0x26>
 80130d6:	3301      	adds	r3, #1
 80130d8:	6033      	str	r3, [r6, #0]
 80130da:	6823      	ldr	r3, [r4, #0]
 80130dc:	0699      	lsls	r1, r3, #26
 80130de:	bf42      	ittt	mi
 80130e0:	6833      	ldrmi	r3, [r6, #0]
 80130e2:	3302      	addmi	r3, #2
 80130e4:	6033      	strmi	r3, [r6, #0]
 80130e6:	6825      	ldr	r5, [r4, #0]
 80130e8:	f015 0506 	ands.w	r5, r5, #6
 80130ec:	d106      	bne.n	80130fc <_printf_common+0x48>
 80130ee:	f104 0a19 	add.w	sl, r4, #25
 80130f2:	68e3      	ldr	r3, [r4, #12]
 80130f4:	6832      	ldr	r2, [r6, #0]
 80130f6:	1a9b      	subs	r3, r3, r2
 80130f8:	42ab      	cmp	r3, r5
 80130fa:	dc26      	bgt.n	801314a <_printf_common+0x96>
 80130fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013100:	6822      	ldr	r2, [r4, #0]
 8013102:	3b00      	subs	r3, #0
 8013104:	bf18      	it	ne
 8013106:	2301      	movne	r3, #1
 8013108:	0692      	lsls	r2, r2, #26
 801310a:	d42b      	bmi.n	8013164 <_printf_common+0xb0>
 801310c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013110:	4641      	mov	r1, r8
 8013112:	4638      	mov	r0, r7
 8013114:	47c8      	blx	r9
 8013116:	3001      	adds	r0, #1
 8013118:	d01e      	beq.n	8013158 <_printf_common+0xa4>
 801311a:	6823      	ldr	r3, [r4, #0]
 801311c:	6922      	ldr	r2, [r4, #16]
 801311e:	f003 0306 	and.w	r3, r3, #6
 8013122:	2b04      	cmp	r3, #4
 8013124:	bf02      	ittt	eq
 8013126:	68e5      	ldreq	r5, [r4, #12]
 8013128:	6833      	ldreq	r3, [r6, #0]
 801312a:	1aed      	subeq	r5, r5, r3
 801312c:	68a3      	ldr	r3, [r4, #8]
 801312e:	bf0c      	ite	eq
 8013130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013134:	2500      	movne	r5, #0
 8013136:	4293      	cmp	r3, r2
 8013138:	bfc4      	itt	gt
 801313a:	1a9b      	subgt	r3, r3, r2
 801313c:	18ed      	addgt	r5, r5, r3
 801313e:	2600      	movs	r6, #0
 8013140:	341a      	adds	r4, #26
 8013142:	42b5      	cmp	r5, r6
 8013144:	d11a      	bne.n	801317c <_printf_common+0xc8>
 8013146:	2000      	movs	r0, #0
 8013148:	e008      	b.n	801315c <_printf_common+0xa8>
 801314a:	2301      	movs	r3, #1
 801314c:	4652      	mov	r2, sl
 801314e:	4641      	mov	r1, r8
 8013150:	4638      	mov	r0, r7
 8013152:	47c8      	blx	r9
 8013154:	3001      	adds	r0, #1
 8013156:	d103      	bne.n	8013160 <_printf_common+0xac>
 8013158:	f04f 30ff 	mov.w	r0, #4294967295
 801315c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013160:	3501      	adds	r5, #1
 8013162:	e7c6      	b.n	80130f2 <_printf_common+0x3e>
 8013164:	18e1      	adds	r1, r4, r3
 8013166:	1c5a      	adds	r2, r3, #1
 8013168:	2030      	movs	r0, #48	@ 0x30
 801316a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801316e:	4422      	add	r2, r4
 8013170:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013174:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013178:	3302      	adds	r3, #2
 801317a:	e7c7      	b.n	801310c <_printf_common+0x58>
 801317c:	2301      	movs	r3, #1
 801317e:	4622      	mov	r2, r4
 8013180:	4641      	mov	r1, r8
 8013182:	4638      	mov	r0, r7
 8013184:	47c8      	blx	r9
 8013186:	3001      	adds	r0, #1
 8013188:	d0e6      	beq.n	8013158 <_printf_common+0xa4>
 801318a:	3601      	adds	r6, #1
 801318c:	e7d9      	b.n	8013142 <_printf_common+0x8e>
	...

08013190 <_printf_i>:
 8013190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013194:	7e0f      	ldrb	r7, [r1, #24]
 8013196:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013198:	2f78      	cmp	r7, #120	@ 0x78
 801319a:	4691      	mov	r9, r2
 801319c:	4680      	mov	r8, r0
 801319e:	460c      	mov	r4, r1
 80131a0:	469a      	mov	sl, r3
 80131a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80131a6:	d807      	bhi.n	80131b8 <_printf_i+0x28>
 80131a8:	2f62      	cmp	r7, #98	@ 0x62
 80131aa:	d80a      	bhi.n	80131c2 <_printf_i+0x32>
 80131ac:	2f00      	cmp	r7, #0
 80131ae:	f000 80d1 	beq.w	8013354 <_printf_i+0x1c4>
 80131b2:	2f58      	cmp	r7, #88	@ 0x58
 80131b4:	f000 80b8 	beq.w	8013328 <_printf_i+0x198>
 80131b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80131bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80131c0:	e03a      	b.n	8013238 <_printf_i+0xa8>
 80131c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80131c6:	2b15      	cmp	r3, #21
 80131c8:	d8f6      	bhi.n	80131b8 <_printf_i+0x28>
 80131ca:	a101      	add	r1, pc, #4	@ (adr r1, 80131d0 <_printf_i+0x40>)
 80131cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80131d0:	08013229 	.word	0x08013229
 80131d4:	0801323d 	.word	0x0801323d
 80131d8:	080131b9 	.word	0x080131b9
 80131dc:	080131b9 	.word	0x080131b9
 80131e0:	080131b9 	.word	0x080131b9
 80131e4:	080131b9 	.word	0x080131b9
 80131e8:	0801323d 	.word	0x0801323d
 80131ec:	080131b9 	.word	0x080131b9
 80131f0:	080131b9 	.word	0x080131b9
 80131f4:	080131b9 	.word	0x080131b9
 80131f8:	080131b9 	.word	0x080131b9
 80131fc:	0801333b 	.word	0x0801333b
 8013200:	08013267 	.word	0x08013267
 8013204:	080132f5 	.word	0x080132f5
 8013208:	080131b9 	.word	0x080131b9
 801320c:	080131b9 	.word	0x080131b9
 8013210:	0801335d 	.word	0x0801335d
 8013214:	080131b9 	.word	0x080131b9
 8013218:	08013267 	.word	0x08013267
 801321c:	080131b9 	.word	0x080131b9
 8013220:	080131b9 	.word	0x080131b9
 8013224:	080132fd 	.word	0x080132fd
 8013228:	6833      	ldr	r3, [r6, #0]
 801322a:	1d1a      	adds	r2, r3, #4
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	6032      	str	r2, [r6, #0]
 8013230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013234:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013238:	2301      	movs	r3, #1
 801323a:	e09c      	b.n	8013376 <_printf_i+0x1e6>
 801323c:	6833      	ldr	r3, [r6, #0]
 801323e:	6820      	ldr	r0, [r4, #0]
 8013240:	1d19      	adds	r1, r3, #4
 8013242:	6031      	str	r1, [r6, #0]
 8013244:	0606      	lsls	r6, r0, #24
 8013246:	d501      	bpl.n	801324c <_printf_i+0xbc>
 8013248:	681d      	ldr	r5, [r3, #0]
 801324a:	e003      	b.n	8013254 <_printf_i+0xc4>
 801324c:	0645      	lsls	r5, r0, #25
 801324e:	d5fb      	bpl.n	8013248 <_printf_i+0xb8>
 8013250:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013254:	2d00      	cmp	r5, #0
 8013256:	da03      	bge.n	8013260 <_printf_i+0xd0>
 8013258:	232d      	movs	r3, #45	@ 0x2d
 801325a:	426d      	negs	r5, r5
 801325c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013260:	4858      	ldr	r0, [pc, #352]	@ (80133c4 <_printf_i+0x234>)
 8013262:	230a      	movs	r3, #10
 8013264:	e011      	b.n	801328a <_printf_i+0xfa>
 8013266:	6821      	ldr	r1, [r4, #0]
 8013268:	6833      	ldr	r3, [r6, #0]
 801326a:	0608      	lsls	r0, r1, #24
 801326c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013270:	d402      	bmi.n	8013278 <_printf_i+0xe8>
 8013272:	0649      	lsls	r1, r1, #25
 8013274:	bf48      	it	mi
 8013276:	b2ad      	uxthmi	r5, r5
 8013278:	2f6f      	cmp	r7, #111	@ 0x6f
 801327a:	4852      	ldr	r0, [pc, #328]	@ (80133c4 <_printf_i+0x234>)
 801327c:	6033      	str	r3, [r6, #0]
 801327e:	bf14      	ite	ne
 8013280:	230a      	movne	r3, #10
 8013282:	2308      	moveq	r3, #8
 8013284:	2100      	movs	r1, #0
 8013286:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801328a:	6866      	ldr	r6, [r4, #4]
 801328c:	60a6      	str	r6, [r4, #8]
 801328e:	2e00      	cmp	r6, #0
 8013290:	db05      	blt.n	801329e <_printf_i+0x10e>
 8013292:	6821      	ldr	r1, [r4, #0]
 8013294:	432e      	orrs	r6, r5
 8013296:	f021 0104 	bic.w	r1, r1, #4
 801329a:	6021      	str	r1, [r4, #0]
 801329c:	d04b      	beq.n	8013336 <_printf_i+0x1a6>
 801329e:	4616      	mov	r6, r2
 80132a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80132a4:	fb03 5711 	mls	r7, r3, r1, r5
 80132a8:	5dc7      	ldrb	r7, [r0, r7]
 80132aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80132ae:	462f      	mov	r7, r5
 80132b0:	42bb      	cmp	r3, r7
 80132b2:	460d      	mov	r5, r1
 80132b4:	d9f4      	bls.n	80132a0 <_printf_i+0x110>
 80132b6:	2b08      	cmp	r3, #8
 80132b8:	d10b      	bne.n	80132d2 <_printf_i+0x142>
 80132ba:	6823      	ldr	r3, [r4, #0]
 80132bc:	07df      	lsls	r7, r3, #31
 80132be:	d508      	bpl.n	80132d2 <_printf_i+0x142>
 80132c0:	6923      	ldr	r3, [r4, #16]
 80132c2:	6861      	ldr	r1, [r4, #4]
 80132c4:	4299      	cmp	r1, r3
 80132c6:	bfde      	ittt	le
 80132c8:	2330      	movle	r3, #48	@ 0x30
 80132ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80132ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80132d2:	1b92      	subs	r2, r2, r6
 80132d4:	6122      	str	r2, [r4, #16]
 80132d6:	f8cd a000 	str.w	sl, [sp]
 80132da:	464b      	mov	r3, r9
 80132dc:	aa03      	add	r2, sp, #12
 80132de:	4621      	mov	r1, r4
 80132e0:	4640      	mov	r0, r8
 80132e2:	f7ff fee7 	bl	80130b4 <_printf_common>
 80132e6:	3001      	adds	r0, #1
 80132e8:	d14a      	bne.n	8013380 <_printf_i+0x1f0>
 80132ea:	f04f 30ff 	mov.w	r0, #4294967295
 80132ee:	b004      	add	sp, #16
 80132f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132f4:	6823      	ldr	r3, [r4, #0]
 80132f6:	f043 0320 	orr.w	r3, r3, #32
 80132fa:	6023      	str	r3, [r4, #0]
 80132fc:	4832      	ldr	r0, [pc, #200]	@ (80133c8 <_printf_i+0x238>)
 80132fe:	2778      	movs	r7, #120	@ 0x78
 8013300:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013304:	6823      	ldr	r3, [r4, #0]
 8013306:	6831      	ldr	r1, [r6, #0]
 8013308:	061f      	lsls	r7, r3, #24
 801330a:	f851 5b04 	ldr.w	r5, [r1], #4
 801330e:	d402      	bmi.n	8013316 <_printf_i+0x186>
 8013310:	065f      	lsls	r7, r3, #25
 8013312:	bf48      	it	mi
 8013314:	b2ad      	uxthmi	r5, r5
 8013316:	6031      	str	r1, [r6, #0]
 8013318:	07d9      	lsls	r1, r3, #31
 801331a:	bf44      	itt	mi
 801331c:	f043 0320 	orrmi.w	r3, r3, #32
 8013320:	6023      	strmi	r3, [r4, #0]
 8013322:	b11d      	cbz	r5, 801332c <_printf_i+0x19c>
 8013324:	2310      	movs	r3, #16
 8013326:	e7ad      	b.n	8013284 <_printf_i+0xf4>
 8013328:	4826      	ldr	r0, [pc, #152]	@ (80133c4 <_printf_i+0x234>)
 801332a:	e7e9      	b.n	8013300 <_printf_i+0x170>
 801332c:	6823      	ldr	r3, [r4, #0]
 801332e:	f023 0320 	bic.w	r3, r3, #32
 8013332:	6023      	str	r3, [r4, #0]
 8013334:	e7f6      	b.n	8013324 <_printf_i+0x194>
 8013336:	4616      	mov	r6, r2
 8013338:	e7bd      	b.n	80132b6 <_printf_i+0x126>
 801333a:	6833      	ldr	r3, [r6, #0]
 801333c:	6825      	ldr	r5, [r4, #0]
 801333e:	6961      	ldr	r1, [r4, #20]
 8013340:	1d18      	adds	r0, r3, #4
 8013342:	6030      	str	r0, [r6, #0]
 8013344:	062e      	lsls	r6, r5, #24
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	d501      	bpl.n	801334e <_printf_i+0x1be>
 801334a:	6019      	str	r1, [r3, #0]
 801334c:	e002      	b.n	8013354 <_printf_i+0x1c4>
 801334e:	0668      	lsls	r0, r5, #25
 8013350:	d5fb      	bpl.n	801334a <_printf_i+0x1ba>
 8013352:	8019      	strh	r1, [r3, #0]
 8013354:	2300      	movs	r3, #0
 8013356:	6123      	str	r3, [r4, #16]
 8013358:	4616      	mov	r6, r2
 801335a:	e7bc      	b.n	80132d6 <_printf_i+0x146>
 801335c:	6833      	ldr	r3, [r6, #0]
 801335e:	1d1a      	adds	r2, r3, #4
 8013360:	6032      	str	r2, [r6, #0]
 8013362:	681e      	ldr	r6, [r3, #0]
 8013364:	6862      	ldr	r2, [r4, #4]
 8013366:	2100      	movs	r1, #0
 8013368:	4630      	mov	r0, r6
 801336a:	f7ec ff51 	bl	8000210 <memchr>
 801336e:	b108      	cbz	r0, 8013374 <_printf_i+0x1e4>
 8013370:	1b80      	subs	r0, r0, r6
 8013372:	6060      	str	r0, [r4, #4]
 8013374:	6863      	ldr	r3, [r4, #4]
 8013376:	6123      	str	r3, [r4, #16]
 8013378:	2300      	movs	r3, #0
 801337a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801337e:	e7aa      	b.n	80132d6 <_printf_i+0x146>
 8013380:	6923      	ldr	r3, [r4, #16]
 8013382:	4632      	mov	r2, r6
 8013384:	4649      	mov	r1, r9
 8013386:	4640      	mov	r0, r8
 8013388:	47d0      	blx	sl
 801338a:	3001      	adds	r0, #1
 801338c:	d0ad      	beq.n	80132ea <_printf_i+0x15a>
 801338e:	6823      	ldr	r3, [r4, #0]
 8013390:	079b      	lsls	r3, r3, #30
 8013392:	d413      	bmi.n	80133bc <_printf_i+0x22c>
 8013394:	68e0      	ldr	r0, [r4, #12]
 8013396:	9b03      	ldr	r3, [sp, #12]
 8013398:	4298      	cmp	r0, r3
 801339a:	bfb8      	it	lt
 801339c:	4618      	movlt	r0, r3
 801339e:	e7a6      	b.n	80132ee <_printf_i+0x15e>
 80133a0:	2301      	movs	r3, #1
 80133a2:	4632      	mov	r2, r6
 80133a4:	4649      	mov	r1, r9
 80133a6:	4640      	mov	r0, r8
 80133a8:	47d0      	blx	sl
 80133aa:	3001      	adds	r0, #1
 80133ac:	d09d      	beq.n	80132ea <_printf_i+0x15a>
 80133ae:	3501      	adds	r5, #1
 80133b0:	68e3      	ldr	r3, [r4, #12]
 80133b2:	9903      	ldr	r1, [sp, #12]
 80133b4:	1a5b      	subs	r3, r3, r1
 80133b6:	42ab      	cmp	r3, r5
 80133b8:	dcf2      	bgt.n	80133a0 <_printf_i+0x210>
 80133ba:	e7eb      	b.n	8013394 <_printf_i+0x204>
 80133bc:	2500      	movs	r5, #0
 80133be:	f104 0619 	add.w	r6, r4, #25
 80133c2:	e7f5      	b.n	80133b0 <_printf_i+0x220>
 80133c4:	0801679c 	.word	0x0801679c
 80133c8:	080167ad 	.word	0x080167ad

080133cc <std>:
 80133cc:	2300      	movs	r3, #0
 80133ce:	b510      	push	{r4, lr}
 80133d0:	4604      	mov	r4, r0
 80133d2:	e9c0 3300 	strd	r3, r3, [r0]
 80133d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80133da:	6083      	str	r3, [r0, #8]
 80133dc:	8181      	strh	r1, [r0, #12]
 80133de:	6643      	str	r3, [r0, #100]	@ 0x64
 80133e0:	81c2      	strh	r2, [r0, #14]
 80133e2:	6183      	str	r3, [r0, #24]
 80133e4:	4619      	mov	r1, r3
 80133e6:	2208      	movs	r2, #8
 80133e8:	305c      	adds	r0, #92	@ 0x5c
 80133ea:	f000 fa2f 	bl	801384c <memset>
 80133ee:	4b0d      	ldr	r3, [pc, #52]	@ (8013424 <std+0x58>)
 80133f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80133f2:	4b0d      	ldr	r3, [pc, #52]	@ (8013428 <std+0x5c>)
 80133f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80133f6:	4b0d      	ldr	r3, [pc, #52]	@ (801342c <std+0x60>)
 80133f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80133fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013430 <std+0x64>)
 80133fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80133fe:	4b0d      	ldr	r3, [pc, #52]	@ (8013434 <std+0x68>)
 8013400:	6224      	str	r4, [r4, #32]
 8013402:	429c      	cmp	r4, r3
 8013404:	d006      	beq.n	8013414 <std+0x48>
 8013406:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801340a:	4294      	cmp	r4, r2
 801340c:	d002      	beq.n	8013414 <std+0x48>
 801340e:	33d0      	adds	r3, #208	@ 0xd0
 8013410:	429c      	cmp	r4, r3
 8013412:	d105      	bne.n	8013420 <std+0x54>
 8013414:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801341c:	f000 bb6c 	b.w	8013af8 <__retarget_lock_init_recursive>
 8013420:	bd10      	pop	{r4, pc}
 8013422:	bf00      	nop
 8013424:	0801369d 	.word	0x0801369d
 8013428:	080136bf 	.word	0x080136bf
 801342c:	080136f7 	.word	0x080136f7
 8013430:	0801371b 	.word	0x0801371b
 8013434:	2000b3a0 	.word	0x2000b3a0

08013438 <stdio_exit_handler>:
 8013438:	4a02      	ldr	r2, [pc, #8]	@ (8013444 <stdio_exit_handler+0xc>)
 801343a:	4903      	ldr	r1, [pc, #12]	@ (8013448 <stdio_exit_handler+0x10>)
 801343c:	4803      	ldr	r0, [pc, #12]	@ (801344c <stdio_exit_handler+0x14>)
 801343e:	f000 b869 	b.w	8013514 <_fwalk_sglue>
 8013442:	bf00      	nop
 8013444:	20000014 	.word	0x20000014
 8013448:	08016069 	.word	0x08016069
 801344c:	20000190 	.word	0x20000190

08013450 <cleanup_stdio>:
 8013450:	6841      	ldr	r1, [r0, #4]
 8013452:	4b0c      	ldr	r3, [pc, #48]	@ (8013484 <cleanup_stdio+0x34>)
 8013454:	4299      	cmp	r1, r3
 8013456:	b510      	push	{r4, lr}
 8013458:	4604      	mov	r4, r0
 801345a:	d001      	beq.n	8013460 <cleanup_stdio+0x10>
 801345c:	f002 fe04 	bl	8016068 <_fflush_r>
 8013460:	68a1      	ldr	r1, [r4, #8]
 8013462:	4b09      	ldr	r3, [pc, #36]	@ (8013488 <cleanup_stdio+0x38>)
 8013464:	4299      	cmp	r1, r3
 8013466:	d002      	beq.n	801346e <cleanup_stdio+0x1e>
 8013468:	4620      	mov	r0, r4
 801346a:	f002 fdfd 	bl	8016068 <_fflush_r>
 801346e:	68e1      	ldr	r1, [r4, #12]
 8013470:	4b06      	ldr	r3, [pc, #24]	@ (801348c <cleanup_stdio+0x3c>)
 8013472:	4299      	cmp	r1, r3
 8013474:	d004      	beq.n	8013480 <cleanup_stdio+0x30>
 8013476:	4620      	mov	r0, r4
 8013478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801347c:	f002 bdf4 	b.w	8016068 <_fflush_r>
 8013480:	bd10      	pop	{r4, pc}
 8013482:	bf00      	nop
 8013484:	2000b3a0 	.word	0x2000b3a0
 8013488:	2000b408 	.word	0x2000b408
 801348c:	2000b470 	.word	0x2000b470

08013490 <global_stdio_init.part.0>:
 8013490:	b510      	push	{r4, lr}
 8013492:	4b0b      	ldr	r3, [pc, #44]	@ (80134c0 <global_stdio_init.part.0+0x30>)
 8013494:	4c0b      	ldr	r4, [pc, #44]	@ (80134c4 <global_stdio_init.part.0+0x34>)
 8013496:	4a0c      	ldr	r2, [pc, #48]	@ (80134c8 <global_stdio_init.part.0+0x38>)
 8013498:	601a      	str	r2, [r3, #0]
 801349a:	4620      	mov	r0, r4
 801349c:	2200      	movs	r2, #0
 801349e:	2104      	movs	r1, #4
 80134a0:	f7ff ff94 	bl	80133cc <std>
 80134a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80134a8:	2201      	movs	r2, #1
 80134aa:	2109      	movs	r1, #9
 80134ac:	f7ff ff8e 	bl	80133cc <std>
 80134b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80134b4:	2202      	movs	r2, #2
 80134b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134ba:	2112      	movs	r1, #18
 80134bc:	f7ff bf86 	b.w	80133cc <std>
 80134c0:	2000b4d8 	.word	0x2000b4d8
 80134c4:	2000b3a0 	.word	0x2000b3a0
 80134c8:	08013439 	.word	0x08013439

080134cc <__sfp_lock_acquire>:
 80134cc:	4801      	ldr	r0, [pc, #4]	@ (80134d4 <__sfp_lock_acquire+0x8>)
 80134ce:	f000 bb14 	b.w	8013afa <__retarget_lock_acquire_recursive>
 80134d2:	bf00      	nop
 80134d4:	2000b4e1 	.word	0x2000b4e1

080134d8 <__sfp_lock_release>:
 80134d8:	4801      	ldr	r0, [pc, #4]	@ (80134e0 <__sfp_lock_release+0x8>)
 80134da:	f000 bb0f 	b.w	8013afc <__retarget_lock_release_recursive>
 80134de:	bf00      	nop
 80134e0:	2000b4e1 	.word	0x2000b4e1

080134e4 <__sinit>:
 80134e4:	b510      	push	{r4, lr}
 80134e6:	4604      	mov	r4, r0
 80134e8:	f7ff fff0 	bl	80134cc <__sfp_lock_acquire>
 80134ec:	6a23      	ldr	r3, [r4, #32]
 80134ee:	b11b      	cbz	r3, 80134f8 <__sinit+0x14>
 80134f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134f4:	f7ff bff0 	b.w	80134d8 <__sfp_lock_release>
 80134f8:	4b04      	ldr	r3, [pc, #16]	@ (801350c <__sinit+0x28>)
 80134fa:	6223      	str	r3, [r4, #32]
 80134fc:	4b04      	ldr	r3, [pc, #16]	@ (8013510 <__sinit+0x2c>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d1f5      	bne.n	80134f0 <__sinit+0xc>
 8013504:	f7ff ffc4 	bl	8013490 <global_stdio_init.part.0>
 8013508:	e7f2      	b.n	80134f0 <__sinit+0xc>
 801350a:	bf00      	nop
 801350c:	08013451 	.word	0x08013451
 8013510:	2000b4d8 	.word	0x2000b4d8

08013514 <_fwalk_sglue>:
 8013514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013518:	4607      	mov	r7, r0
 801351a:	4688      	mov	r8, r1
 801351c:	4614      	mov	r4, r2
 801351e:	2600      	movs	r6, #0
 8013520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013524:	f1b9 0901 	subs.w	r9, r9, #1
 8013528:	d505      	bpl.n	8013536 <_fwalk_sglue+0x22>
 801352a:	6824      	ldr	r4, [r4, #0]
 801352c:	2c00      	cmp	r4, #0
 801352e:	d1f7      	bne.n	8013520 <_fwalk_sglue+0xc>
 8013530:	4630      	mov	r0, r6
 8013532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013536:	89ab      	ldrh	r3, [r5, #12]
 8013538:	2b01      	cmp	r3, #1
 801353a:	d907      	bls.n	801354c <_fwalk_sglue+0x38>
 801353c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013540:	3301      	adds	r3, #1
 8013542:	d003      	beq.n	801354c <_fwalk_sglue+0x38>
 8013544:	4629      	mov	r1, r5
 8013546:	4638      	mov	r0, r7
 8013548:	47c0      	blx	r8
 801354a:	4306      	orrs	r6, r0
 801354c:	3568      	adds	r5, #104	@ 0x68
 801354e:	e7e9      	b.n	8013524 <_fwalk_sglue+0x10>

08013550 <iprintf>:
 8013550:	b40f      	push	{r0, r1, r2, r3}
 8013552:	b507      	push	{r0, r1, r2, lr}
 8013554:	4906      	ldr	r1, [pc, #24]	@ (8013570 <iprintf+0x20>)
 8013556:	ab04      	add	r3, sp, #16
 8013558:	6808      	ldr	r0, [r1, #0]
 801355a:	f853 2b04 	ldr.w	r2, [r3], #4
 801355e:	6881      	ldr	r1, [r0, #8]
 8013560:	9301      	str	r3, [sp, #4]
 8013562:	f002 fbe5 	bl	8015d30 <_vfiprintf_r>
 8013566:	b003      	add	sp, #12
 8013568:	f85d eb04 	ldr.w	lr, [sp], #4
 801356c:	b004      	add	sp, #16
 801356e:	4770      	bx	lr
 8013570:	2000018c 	.word	0x2000018c

08013574 <_puts_r>:
 8013574:	6a03      	ldr	r3, [r0, #32]
 8013576:	b570      	push	{r4, r5, r6, lr}
 8013578:	6884      	ldr	r4, [r0, #8]
 801357a:	4605      	mov	r5, r0
 801357c:	460e      	mov	r6, r1
 801357e:	b90b      	cbnz	r3, 8013584 <_puts_r+0x10>
 8013580:	f7ff ffb0 	bl	80134e4 <__sinit>
 8013584:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013586:	07db      	lsls	r3, r3, #31
 8013588:	d405      	bmi.n	8013596 <_puts_r+0x22>
 801358a:	89a3      	ldrh	r3, [r4, #12]
 801358c:	0598      	lsls	r0, r3, #22
 801358e:	d402      	bmi.n	8013596 <_puts_r+0x22>
 8013590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013592:	f000 fab2 	bl	8013afa <__retarget_lock_acquire_recursive>
 8013596:	89a3      	ldrh	r3, [r4, #12]
 8013598:	0719      	lsls	r1, r3, #28
 801359a:	d502      	bpl.n	80135a2 <_puts_r+0x2e>
 801359c:	6923      	ldr	r3, [r4, #16]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d135      	bne.n	801360e <_puts_r+0x9a>
 80135a2:	4621      	mov	r1, r4
 80135a4:	4628      	mov	r0, r5
 80135a6:	f000 f8fb 	bl	80137a0 <__swsetup_r>
 80135aa:	b380      	cbz	r0, 801360e <_puts_r+0x9a>
 80135ac:	f04f 35ff 	mov.w	r5, #4294967295
 80135b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80135b2:	07da      	lsls	r2, r3, #31
 80135b4:	d405      	bmi.n	80135c2 <_puts_r+0x4e>
 80135b6:	89a3      	ldrh	r3, [r4, #12]
 80135b8:	059b      	lsls	r3, r3, #22
 80135ba:	d402      	bmi.n	80135c2 <_puts_r+0x4e>
 80135bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80135be:	f000 fa9d 	bl	8013afc <__retarget_lock_release_recursive>
 80135c2:	4628      	mov	r0, r5
 80135c4:	bd70      	pop	{r4, r5, r6, pc}
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	da04      	bge.n	80135d4 <_puts_r+0x60>
 80135ca:	69a2      	ldr	r2, [r4, #24]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	dc17      	bgt.n	8013600 <_puts_r+0x8c>
 80135d0:	290a      	cmp	r1, #10
 80135d2:	d015      	beq.n	8013600 <_puts_r+0x8c>
 80135d4:	6823      	ldr	r3, [r4, #0]
 80135d6:	1c5a      	adds	r2, r3, #1
 80135d8:	6022      	str	r2, [r4, #0]
 80135da:	7019      	strb	r1, [r3, #0]
 80135dc:	68a3      	ldr	r3, [r4, #8]
 80135de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80135e2:	3b01      	subs	r3, #1
 80135e4:	60a3      	str	r3, [r4, #8]
 80135e6:	2900      	cmp	r1, #0
 80135e8:	d1ed      	bne.n	80135c6 <_puts_r+0x52>
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	da11      	bge.n	8013612 <_puts_r+0x9e>
 80135ee:	4622      	mov	r2, r4
 80135f0:	210a      	movs	r1, #10
 80135f2:	4628      	mov	r0, r5
 80135f4:	f000 f895 	bl	8013722 <__swbuf_r>
 80135f8:	3001      	adds	r0, #1
 80135fa:	d0d7      	beq.n	80135ac <_puts_r+0x38>
 80135fc:	250a      	movs	r5, #10
 80135fe:	e7d7      	b.n	80135b0 <_puts_r+0x3c>
 8013600:	4622      	mov	r2, r4
 8013602:	4628      	mov	r0, r5
 8013604:	f000 f88d 	bl	8013722 <__swbuf_r>
 8013608:	3001      	adds	r0, #1
 801360a:	d1e7      	bne.n	80135dc <_puts_r+0x68>
 801360c:	e7ce      	b.n	80135ac <_puts_r+0x38>
 801360e:	3e01      	subs	r6, #1
 8013610:	e7e4      	b.n	80135dc <_puts_r+0x68>
 8013612:	6823      	ldr	r3, [r4, #0]
 8013614:	1c5a      	adds	r2, r3, #1
 8013616:	6022      	str	r2, [r4, #0]
 8013618:	220a      	movs	r2, #10
 801361a:	701a      	strb	r2, [r3, #0]
 801361c:	e7ee      	b.n	80135fc <_puts_r+0x88>
	...

08013620 <puts>:
 8013620:	4b02      	ldr	r3, [pc, #8]	@ (801362c <puts+0xc>)
 8013622:	4601      	mov	r1, r0
 8013624:	6818      	ldr	r0, [r3, #0]
 8013626:	f7ff bfa5 	b.w	8013574 <_puts_r>
 801362a:	bf00      	nop
 801362c:	2000018c 	.word	0x2000018c

08013630 <sniprintf>:
 8013630:	b40c      	push	{r2, r3}
 8013632:	b530      	push	{r4, r5, lr}
 8013634:	4b18      	ldr	r3, [pc, #96]	@ (8013698 <sniprintf+0x68>)
 8013636:	1e0c      	subs	r4, r1, #0
 8013638:	681d      	ldr	r5, [r3, #0]
 801363a:	b09d      	sub	sp, #116	@ 0x74
 801363c:	da08      	bge.n	8013650 <sniprintf+0x20>
 801363e:	238b      	movs	r3, #139	@ 0x8b
 8013640:	602b      	str	r3, [r5, #0]
 8013642:	f04f 30ff 	mov.w	r0, #4294967295
 8013646:	b01d      	add	sp, #116	@ 0x74
 8013648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801364c:	b002      	add	sp, #8
 801364e:	4770      	bx	lr
 8013650:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013654:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013658:	f04f 0300 	mov.w	r3, #0
 801365c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801365e:	bf14      	ite	ne
 8013660:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013664:	4623      	moveq	r3, r4
 8013666:	9304      	str	r3, [sp, #16]
 8013668:	9307      	str	r3, [sp, #28]
 801366a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801366e:	9002      	str	r0, [sp, #8]
 8013670:	9006      	str	r0, [sp, #24]
 8013672:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013676:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013678:	ab21      	add	r3, sp, #132	@ 0x84
 801367a:	a902      	add	r1, sp, #8
 801367c:	4628      	mov	r0, r5
 801367e:	9301      	str	r3, [sp, #4]
 8013680:	f002 fa30 	bl	8015ae4 <_svfiprintf_r>
 8013684:	1c43      	adds	r3, r0, #1
 8013686:	bfbc      	itt	lt
 8013688:	238b      	movlt	r3, #139	@ 0x8b
 801368a:	602b      	strlt	r3, [r5, #0]
 801368c:	2c00      	cmp	r4, #0
 801368e:	d0da      	beq.n	8013646 <sniprintf+0x16>
 8013690:	9b02      	ldr	r3, [sp, #8]
 8013692:	2200      	movs	r2, #0
 8013694:	701a      	strb	r2, [r3, #0]
 8013696:	e7d6      	b.n	8013646 <sniprintf+0x16>
 8013698:	2000018c 	.word	0x2000018c

0801369c <__sread>:
 801369c:	b510      	push	{r4, lr}
 801369e:	460c      	mov	r4, r1
 80136a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136a4:	f000 f9da 	bl	8013a5c <_read_r>
 80136a8:	2800      	cmp	r0, #0
 80136aa:	bfab      	itete	ge
 80136ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80136ae:	89a3      	ldrhlt	r3, [r4, #12]
 80136b0:	181b      	addge	r3, r3, r0
 80136b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80136b6:	bfac      	ite	ge
 80136b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80136ba:	81a3      	strhlt	r3, [r4, #12]
 80136bc:	bd10      	pop	{r4, pc}

080136be <__swrite>:
 80136be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136c2:	461f      	mov	r7, r3
 80136c4:	898b      	ldrh	r3, [r1, #12]
 80136c6:	05db      	lsls	r3, r3, #23
 80136c8:	4605      	mov	r5, r0
 80136ca:	460c      	mov	r4, r1
 80136cc:	4616      	mov	r6, r2
 80136ce:	d505      	bpl.n	80136dc <__swrite+0x1e>
 80136d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136d4:	2302      	movs	r3, #2
 80136d6:	2200      	movs	r2, #0
 80136d8:	f000 f9ae 	bl	8013a38 <_lseek_r>
 80136dc:	89a3      	ldrh	r3, [r4, #12]
 80136de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80136e6:	81a3      	strh	r3, [r4, #12]
 80136e8:	4632      	mov	r2, r6
 80136ea:	463b      	mov	r3, r7
 80136ec:	4628      	mov	r0, r5
 80136ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136f2:	f000 b9c5 	b.w	8013a80 <_write_r>

080136f6 <__sseek>:
 80136f6:	b510      	push	{r4, lr}
 80136f8:	460c      	mov	r4, r1
 80136fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136fe:	f000 f99b 	bl	8013a38 <_lseek_r>
 8013702:	1c43      	adds	r3, r0, #1
 8013704:	89a3      	ldrh	r3, [r4, #12]
 8013706:	bf15      	itete	ne
 8013708:	6560      	strne	r0, [r4, #84]	@ 0x54
 801370a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801370e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013712:	81a3      	strheq	r3, [r4, #12]
 8013714:	bf18      	it	ne
 8013716:	81a3      	strhne	r3, [r4, #12]
 8013718:	bd10      	pop	{r4, pc}

0801371a <__sclose>:
 801371a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801371e:	f000 b91d 	b.w	801395c <_close_r>

08013722 <__swbuf_r>:
 8013722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013724:	460e      	mov	r6, r1
 8013726:	4614      	mov	r4, r2
 8013728:	4605      	mov	r5, r0
 801372a:	b118      	cbz	r0, 8013734 <__swbuf_r+0x12>
 801372c:	6a03      	ldr	r3, [r0, #32]
 801372e:	b90b      	cbnz	r3, 8013734 <__swbuf_r+0x12>
 8013730:	f7ff fed8 	bl	80134e4 <__sinit>
 8013734:	69a3      	ldr	r3, [r4, #24]
 8013736:	60a3      	str	r3, [r4, #8]
 8013738:	89a3      	ldrh	r3, [r4, #12]
 801373a:	071a      	lsls	r2, r3, #28
 801373c:	d501      	bpl.n	8013742 <__swbuf_r+0x20>
 801373e:	6923      	ldr	r3, [r4, #16]
 8013740:	b943      	cbnz	r3, 8013754 <__swbuf_r+0x32>
 8013742:	4621      	mov	r1, r4
 8013744:	4628      	mov	r0, r5
 8013746:	f000 f82b 	bl	80137a0 <__swsetup_r>
 801374a:	b118      	cbz	r0, 8013754 <__swbuf_r+0x32>
 801374c:	f04f 37ff 	mov.w	r7, #4294967295
 8013750:	4638      	mov	r0, r7
 8013752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013754:	6823      	ldr	r3, [r4, #0]
 8013756:	6922      	ldr	r2, [r4, #16]
 8013758:	1a98      	subs	r0, r3, r2
 801375a:	6963      	ldr	r3, [r4, #20]
 801375c:	b2f6      	uxtb	r6, r6
 801375e:	4283      	cmp	r3, r0
 8013760:	4637      	mov	r7, r6
 8013762:	dc05      	bgt.n	8013770 <__swbuf_r+0x4e>
 8013764:	4621      	mov	r1, r4
 8013766:	4628      	mov	r0, r5
 8013768:	f002 fc7e 	bl	8016068 <_fflush_r>
 801376c:	2800      	cmp	r0, #0
 801376e:	d1ed      	bne.n	801374c <__swbuf_r+0x2a>
 8013770:	68a3      	ldr	r3, [r4, #8]
 8013772:	3b01      	subs	r3, #1
 8013774:	60a3      	str	r3, [r4, #8]
 8013776:	6823      	ldr	r3, [r4, #0]
 8013778:	1c5a      	adds	r2, r3, #1
 801377a:	6022      	str	r2, [r4, #0]
 801377c:	701e      	strb	r6, [r3, #0]
 801377e:	6962      	ldr	r2, [r4, #20]
 8013780:	1c43      	adds	r3, r0, #1
 8013782:	429a      	cmp	r2, r3
 8013784:	d004      	beq.n	8013790 <__swbuf_r+0x6e>
 8013786:	89a3      	ldrh	r3, [r4, #12]
 8013788:	07db      	lsls	r3, r3, #31
 801378a:	d5e1      	bpl.n	8013750 <__swbuf_r+0x2e>
 801378c:	2e0a      	cmp	r6, #10
 801378e:	d1df      	bne.n	8013750 <__swbuf_r+0x2e>
 8013790:	4621      	mov	r1, r4
 8013792:	4628      	mov	r0, r5
 8013794:	f002 fc68 	bl	8016068 <_fflush_r>
 8013798:	2800      	cmp	r0, #0
 801379a:	d0d9      	beq.n	8013750 <__swbuf_r+0x2e>
 801379c:	e7d6      	b.n	801374c <__swbuf_r+0x2a>
	...

080137a0 <__swsetup_r>:
 80137a0:	b538      	push	{r3, r4, r5, lr}
 80137a2:	4b29      	ldr	r3, [pc, #164]	@ (8013848 <__swsetup_r+0xa8>)
 80137a4:	4605      	mov	r5, r0
 80137a6:	6818      	ldr	r0, [r3, #0]
 80137a8:	460c      	mov	r4, r1
 80137aa:	b118      	cbz	r0, 80137b4 <__swsetup_r+0x14>
 80137ac:	6a03      	ldr	r3, [r0, #32]
 80137ae:	b90b      	cbnz	r3, 80137b4 <__swsetup_r+0x14>
 80137b0:	f7ff fe98 	bl	80134e4 <__sinit>
 80137b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137b8:	0719      	lsls	r1, r3, #28
 80137ba:	d422      	bmi.n	8013802 <__swsetup_r+0x62>
 80137bc:	06da      	lsls	r2, r3, #27
 80137be:	d407      	bmi.n	80137d0 <__swsetup_r+0x30>
 80137c0:	2209      	movs	r2, #9
 80137c2:	602a      	str	r2, [r5, #0]
 80137c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137c8:	81a3      	strh	r3, [r4, #12]
 80137ca:	f04f 30ff 	mov.w	r0, #4294967295
 80137ce:	e033      	b.n	8013838 <__swsetup_r+0x98>
 80137d0:	0758      	lsls	r0, r3, #29
 80137d2:	d512      	bpl.n	80137fa <__swsetup_r+0x5a>
 80137d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137d6:	b141      	cbz	r1, 80137ea <__swsetup_r+0x4a>
 80137d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137dc:	4299      	cmp	r1, r3
 80137de:	d002      	beq.n	80137e6 <__swsetup_r+0x46>
 80137e0:	4628      	mov	r0, r5
 80137e2:	f001 f821 	bl	8014828 <_free_r>
 80137e6:	2300      	movs	r3, #0
 80137e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80137ea:	89a3      	ldrh	r3, [r4, #12]
 80137ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80137f0:	81a3      	strh	r3, [r4, #12]
 80137f2:	2300      	movs	r3, #0
 80137f4:	6063      	str	r3, [r4, #4]
 80137f6:	6923      	ldr	r3, [r4, #16]
 80137f8:	6023      	str	r3, [r4, #0]
 80137fa:	89a3      	ldrh	r3, [r4, #12]
 80137fc:	f043 0308 	orr.w	r3, r3, #8
 8013800:	81a3      	strh	r3, [r4, #12]
 8013802:	6923      	ldr	r3, [r4, #16]
 8013804:	b94b      	cbnz	r3, 801381a <__swsetup_r+0x7a>
 8013806:	89a3      	ldrh	r3, [r4, #12]
 8013808:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801380c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013810:	d003      	beq.n	801381a <__swsetup_r+0x7a>
 8013812:	4621      	mov	r1, r4
 8013814:	4628      	mov	r0, r5
 8013816:	f002 fc87 	bl	8016128 <__smakebuf_r>
 801381a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801381e:	f013 0201 	ands.w	r2, r3, #1
 8013822:	d00a      	beq.n	801383a <__swsetup_r+0x9a>
 8013824:	2200      	movs	r2, #0
 8013826:	60a2      	str	r2, [r4, #8]
 8013828:	6962      	ldr	r2, [r4, #20]
 801382a:	4252      	negs	r2, r2
 801382c:	61a2      	str	r2, [r4, #24]
 801382e:	6922      	ldr	r2, [r4, #16]
 8013830:	b942      	cbnz	r2, 8013844 <__swsetup_r+0xa4>
 8013832:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013836:	d1c5      	bne.n	80137c4 <__swsetup_r+0x24>
 8013838:	bd38      	pop	{r3, r4, r5, pc}
 801383a:	0799      	lsls	r1, r3, #30
 801383c:	bf58      	it	pl
 801383e:	6962      	ldrpl	r2, [r4, #20]
 8013840:	60a2      	str	r2, [r4, #8]
 8013842:	e7f4      	b.n	801382e <__swsetup_r+0x8e>
 8013844:	2000      	movs	r0, #0
 8013846:	e7f7      	b.n	8013838 <__swsetup_r+0x98>
 8013848:	2000018c 	.word	0x2000018c

0801384c <memset>:
 801384c:	4402      	add	r2, r0
 801384e:	4603      	mov	r3, r0
 8013850:	4293      	cmp	r3, r2
 8013852:	d100      	bne.n	8013856 <memset+0xa>
 8013854:	4770      	bx	lr
 8013856:	f803 1b01 	strb.w	r1, [r3], #1
 801385a:	e7f9      	b.n	8013850 <memset+0x4>

0801385c <strchr>:
 801385c:	b2c9      	uxtb	r1, r1
 801385e:	4603      	mov	r3, r0
 8013860:	4618      	mov	r0, r3
 8013862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013866:	b112      	cbz	r2, 801386e <strchr+0x12>
 8013868:	428a      	cmp	r2, r1
 801386a:	d1f9      	bne.n	8013860 <strchr+0x4>
 801386c:	4770      	bx	lr
 801386e:	2900      	cmp	r1, #0
 8013870:	bf18      	it	ne
 8013872:	2000      	movne	r0, #0
 8013874:	4770      	bx	lr

08013876 <strncmp>:
 8013876:	b510      	push	{r4, lr}
 8013878:	b16a      	cbz	r2, 8013896 <strncmp+0x20>
 801387a:	3901      	subs	r1, #1
 801387c:	1884      	adds	r4, r0, r2
 801387e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013882:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013886:	429a      	cmp	r2, r3
 8013888:	d103      	bne.n	8013892 <strncmp+0x1c>
 801388a:	42a0      	cmp	r0, r4
 801388c:	d001      	beq.n	8013892 <strncmp+0x1c>
 801388e:	2a00      	cmp	r2, #0
 8013890:	d1f5      	bne.n	801387e <strncmp+0x8>
 8013892:	1ad0      	subs	r0, r2, r3
 8013894:	bd10      	pop	{r4, pc}
 8013896:	4610      	mov	r0, r2
 8013898:	e7fc      	b.n	8013894 <strncmp+0x1e>
	...

0801389c <strtok>:
 801389c:	4b16      	ldr	r3, [pc, #88]	@ (80138f8 <strtok+0x5c>)
 801389e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138a2:	681f      	ldr	r7, [r3, #0]
 80138a4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80138a6:	4605      	mov	r5, r0
 80138a8:	460e      	mov	r6, r1
 80138aa:	b9ec      	cbnz	r4, 80138e8 <strtok+0x4c>
 80138ac:	2050      	movs	r0, #80	@ 0x50
 80138ae:	f001 fb3f 	bl	8014f30 <malloc>
 80138b2:	4602      	mov	r2, r0
 80138b4:	6478      	str	r0, [r7, #68]	@ 0x44
 80138b6:	b920      	cbnz	r0, 80138c2 <strtok+0x26>
 80138b8:	4b10      	ldr	r3, [pc, #64]	@ (80138fc <strtok+0x60>)
 80138ba:	4811      	ldr	r0, [pc, #68]	@ (8013900 <strtok+0x64>)
 80138bc:	215b      	movs	r1, #91	@ 0x5b
 80138be:	f000 f93d 	bl	8013b3c <__assert_func>
 80138c2:	e9c0 4400 	strd	r4, r4, [r0]
 80138c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80138ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80138ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80138d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80138d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80138da:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80138de:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80138e2:	6184      	str	r4, [r0, #24]
 80138e4:	7704      	strb	r4, [r0, #28]
 80138e6:	6244      	str	r4, [r0, #36]	@ 0x24
 80138e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80138ea:	4631      	mov	r1, r6
 80138ec:	4628      	mov	r0, r5
 80138ee:	2301      	movs	r3, #1
 80138f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138f4:	f000 b806 	b.w	8013904 <__strtok_r>
 80138f8:	2000018c 	.word	0x2000018c
 80138fc:	080167be 	.word	0x080167be
 8013900:	080167d5 	.word	0x080167d5

08013904 <__strtok_r>:
 8013904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013906:	4604      	mov	r4, r0
 8013908:	b908      	cbnz	r0, 801390e <__strtok_r+0xa>
 801390a:	6814      	ldr	r4, [r2, #0]
 801390c:	b144      	cbz	r4, 8013920 <__strtok_r+0x1c>
 801390e:	4620      	mov	r0, r4
 8013910:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013914:	460f      	mov	r7, r1
 8013916:	f817 6b01 	ldrb.w	r6, [r7], #1
 801391a:	b91e      	cbnz	r6, 8013924 <__strtok_r+0x20>
 801391c:	b965      	cbnz	r5, 8013938 <__strtok_r+0x34>
 801391e:	6015      	str	r5, [r2, #0]
 8013920:	2000      	movs	r0, #0
 8013922:	e005      	b.n	8013930 <__strtok_r+0x2c>
 8013924:	42b5      	cmp	r5, r6
 8013926:	d1f6      	bne.n	8013916 <__strtok_r+0x12>
 8013928:	2b00      	cmp	r3, #0
 801392a:	d1f0      	bne.n	801390e <__strtok_r+0xa>
 801392c:	6014      	str	r4, [r2, #0]
 801392e:	7003      	strb	r3, [r0, #0]
 8013930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013932:	461c      	mov	r4, r3
 8013934:	e00c      	b.n	8013950 <__strtok_r+0x4c>
 8013936:	b91d      	cbnz	r5, 8013940 <__strtok_r+0x3c>
 8013938:	4627      	mov	r7, r4
 801393a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801393e:	460e      	mov	r6, r1
 8013940:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013944:	42ab      	cmp	r3, r5
 8013946:	d1f6      	bne.n	8013936 <__strtok_r+0x32>
 8013948:	2b00      	cmp	r3, #0
 801394a:	d0f2      	beq.n	8013932 <__strtok_r+0x2e>
 801394c:	2300      	movs	r3, #0
 801394e:	703b      	strb	r3, [r7, #0]
 8013950:	6014      	str	r4, [r2, #0]
 8013952:	e7ed      	b.n	8013930 <__strtok_r+0x2c>

08013954 <_localeconv_r>:
 8013954:	4800      	ldr	r0, [pc, #0]	@ (8013958 <_localeconv_r+0x4>)
 8013956:	4770      	bx	lr
 8013958:	20000110 	.word	0x20000110

0801395c <_close_r>:
 801395c:	b538      	push	{r3, r4, r5, lr}
 801395e:	4d06      	ldr	r5, [pc, #24]	@ (8013978 <_close_r+0x1c>)
 8013960:	2300      	movs	r3, #0
 8013962:	4604      	mov	r4, r0
 8013964:	4608      	mov	r0, r1
 8013966:	602b      	str	r3, [r5, #0]
 8013968:	f7f0 fd9c 	bl	80044a4 <_close>
 801396c:	1c43      	adds	r3, r0, #1
 801396e:	d102      	bne.n	8013976 <_close_r+0x1a>
 8013970:	682b      	ldr	r3, [r5, #0]
 8013972:	b103      	cbz	r3, 8013976 <_close_r+0x1a>
 8013974:	6023      	str	r3, [r4, #0]
 8013976:	bd38      	pop	{r3, r4, r5, pc}
 8013978:	2000b4dc 	.word	0x2000b4dc

0801397c <_reclaim_reent>:
 801397c:	4b2d      	ldr	r3, [pc, #180]	@ (8013a34 <_reclaim_reent+0xb8>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4283      	cmp	r3, r0
 8013982:	b570      	push	{r4, r5, r6, lr}
 8013984:	4604      	mov	r4, r0
 8013986:	d053      	beq.n	8013a30 <_reclaim_reent+0xb4>
 8013988:	69c3      	ldr	r3, [r0, #28]
 801398a:	b31b      	cbz	r3, 80139d4 <_reclaim_reent+0x58>
 801398c:	68db      	ldr	r3, [r3, #12]
 801398e:	b163      	cbz	r3, 80139aa <_reclaim_reent+0x2e>
 8013990:	2500      	movs	r5, #0
 8013992:	69e3      	ldr	r3, [r4, #28]
 8013994:	68db      	ldr	r3, [r3, #12]
 8013996:	5959      	ldr	r1, [r3, r5]
 8013998:	b9b1      	cbnz	r1, 80139c8 <_reclaim_reent+0x4c>
 801399a:	3504      	adds	r5, #4
 801399c:	2d80      	cmp	r5, #128	@ 0x80
 801399e:	d1f8      	bne.n	8013992 <_reclaim_reent+0x16>
 80139a0:	69e3      	ldr	r3, [r4, #28]
 80139a2:	4620      	mov	r0, r4
 80139a4:	68d9      	ldr	r1, [r3, #12]
 80139a6:	f000 ff3f 	bl	8014828 <_free_r>
 80139aa:	69e3      	ldr	r3, [r4, #28]
 80139ac:	6819      	ldr	r1, [r3, #0]
 80139ae:	b111      	cbz	r1, 80139b6 <_reclaim_reent+0x3a>
 80139b0:	4620      	mov	r0, r4
 80139b2:	f000 ff39 	bl	8014828 <_free_r>
 80139b6:	69e3      	ldr	r3, [r4, #28]
 80139b8:	689d      	ldr	r5, [r3, #8]
 80139ba:	b15d      	cbz	r5, 80139d4 <_reclaim_reent+0x58>
 80139bc:	4629      	mov	r1, r5
 80139be:	4620      	mov	r0, r4
 80139c0:	682d      	ldr	r5, [r5, #0]
 80139c2:	f000 ff31 	bl	8014828 <_free_r>
 80139c6:	e7f8      	b.n	80139ba <_reclaim_reent+0x3e>
 80139c8:	680e      	ldr	r6, [r1, #0]
 80139ca:	4620      	mov	r0, r4
 80139cc:	f000 ff2c 	bl	8014828 <_free_r>
 80139d0:	4631      	mov	r1, r6
 80139d2:	e7e1      	b.n	8013998 <_reclaim_reent+0x1c>
 80139d4:	6961      	ldr	r1, [r4, #20]
 80139d6:	b111      	cbz	r1, 80139de <_reclaim_reent+0x62>
 80139d8:	4620      	mov	r0, r4
 80139da:	f000 ff25 	bl	8014828 <_free_r>
 80139de:	69e1      	ldr	r1, [r4, #28]
 80139e0:	b111      	cbz	r1, 80139e8 <_reclaim_reent+0x6c>
 80139e2:	4620      	mov	r0, r4
 80139e4:	f000 ff20 	bl	8014828 <_free_r>
 80139e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80139ea:	b111      	cbz	r1, 80139f2 <_reclaim_reent+0x76>
 80139ec:	4620      	mov	r0, r4
 80139ee:	f000 ff1b 	bl	8014828 <_free_r>
 80139f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80139f4:	b111      	cbz	r1, 80139fc <_reclaim_reent+0x80>
 80139f6:	4620      	mov	r0, r4
 80139f8:	f000 ff16 	bl	8014828 <_free_r>
 80139fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80139fe:	b111      	cbz	r1, 8013a06 <_reclaim_reent+0x8a>
 8013a00:	4620      	mov	r0, r4
 8013a02:	f000 ff11 	bl	8014828 <_free_r>
 8013a06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013a08:	b111      	cbz	r1, 8013a10 <_reclaim_reent+0x94>
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	f000 ff0c 	bl	8014828 <_free_r>
 8013a10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013a12:	b111      	cbz	r1, 8013a1a <_reclaim_reent+0x9e>
 8013a14:	4620      	mov	r0, r4
 8013a16:	f000 ff07 	bl	8014828 <_free_r>
 8013a1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013a1c:	b111      	cbz	r1, 8013a24 <_reclaim_reent+0xa8>
 8013a1e:	4620      	mov	r0, r4
 8013a20:	f000 ff02 	bl	8014828 <_free_r>
 8013a24:	6a23      	ldr	r3, [r4, #32]
 8013a26:	b11b      	cbz	r3, 8013a30 <_reclaim_reent+0xb4>
 8013a28:	4620      	mov	r0, r4
 8013a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a2e:	4718      	bx	r3
 8013a30:	bd70      	pop	{r4, r5, r6, pc}
 8013a32:	bf00      	nop
 8013a34:	2000018c 	.word	0x2000018c

08013a38 <_lseek_r>:
 8013a38:	b538      	push	{r3, r4, r5, lr}
 8013a3a:	4d07      	ldr	r5, [pc, #28]	@ (8013a58 <_lseek_r+0x20>)
 8013a3c:	4604      	mov	r4, r0
 8013a3e:	4608      	mov	r0, r1
 8013a40:	4611      	mov	r1, r2
 8013a42:	2200      	movs	r2, #0
 8013a44:	602a      	str	r2, [r5, #0]
 8013a46:	461a      	mov	r2, r3
 8013a48:	f7f0 fd53 	bl	80044f2 <_lseek>
 8013a4c:	1c43      	adds	r3, r0, #1
 8013a4e:	d102      	bne.n	8013a56 <_lseek_r+0x1e>
 8013a50:	682b      	ldr	r3, [r5, #0]
 8013a52:	b103      	cbz	r3, 8013a56 <_lseek_r+0x1e>
 8013a54:	6023      	str	r3, [r4, #0]
 8013a56:	bd38      	pop	{r3, r4, r5, pc}
 8013a58:	2000b4dc 	.word	0x2000b4dc

08013a5c <_read_r>:
 8013a5c:	b538      	push	{r3, r4, r5, lr}
 8013a5e:	4d07      	ldr	r5, [pc, #28]	@ (8013a7c <_read_r+0x20>)
 8013a60:	4604      	mov	r4, r0
 8013a62:	4608      	mov	r0, r1
 8013a64:	4611      	mov	r1, r2
 8013a66:	2200      	movs	r2, #0
 8013a68:	602a      	str	r2, [r5, #0]
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	f7f0 fce1 	bl	8004432 <_read>
 8013a70:	1c43      	adds	r3, r0, #1
 8013a72:	d102      	bne.n	8013a7a <_read_r+0x1e>
 8013a74:	682b      	ldr	r3, [r5, #0]
 8013a76:	b103      	cbz	r3, 8013a7a <_read_r+0x1e>
 8013a78:	6023      	str	r3, [r4, #0]
 8013a7a:	bd38      	pop	{r3, r4, r5, pc}
 8013a7c:	2000b4dc 	.word	0x2000b4dc

08013a80 <_write_r>:
 8013a80:	b538      	push	{r3, r4, r5, lr}
 8013a82:	4d07      	ldr	r5, [pc, #28]	@ (8013aa0 <_write_r+0x20>)
 8013a84:	4604      	mov	r4, r0
 8013a86:	4608      	mov	r0, r1
 8013a88:	4611      	mov	r1, r2
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	602a      	str	r2, [r5, #0]
 8013a8e:	461a      	mov	r2, r3
 8013a90:	f7f0 fcec 	bl	800446c <_write>
 8013a94:	1c43      	adds	r3, r0, #1
 8013a96:	d102      	bne.n	8013a9e <_write_r+0x1e>
 8013a98:	682b      	ldr	r3, [r5, #0]
 8013a9a:	b103      	cbz	r3, 8013a9e <_write_r+0x1e>
 8013a9c:	6023      	str	r3, [r4, #0]
 8013a9e:	bd38      	pop	{r3, r4, r5, pc}
 8013aa0:	2000b4dc 	.word	0x2000b4dc

08013aa4 <__errno>:
 8013aa4:	4b01      	ldr	r3, [pc, #4]	@ (8013aac <__errno+0x8>)
 8013aa6:	6818      	ldr	r0, [r3, #0]
 8013aa8:	4770      	bx	lr
 8013aaa:	bf00      	nop
 8013aac:	2000018c 	.word	0x2000018c

08013ab0 <__libc_init_array>:
 8013ab0:	b570      	push	{r4, r5, r6, lr}
 8013ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8013ae8 <__libc_init_array+0x38>)
 8013ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8013aec <__libc_init_array+0x3c>)
 8013ab6:	1b64      	subs	r4, r4, r5
 8013ab8:	10a4      	asrs	r4, r4, #2
 8013aba:	2600      	movs	r6, #0
 8013abc:	42a6      	cmp	r6, r4
 8013abe:	d109      	bne.n	8013ad4 <__libc_init_array+0x24>
 8013ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8013af0 <__libc_init_array+0x40>)
 8013ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8013af4 <__libc_init_array+0x44>)
 8013ac4:	f002 fc4e 	bl	8016364 <_init>
 8013ac8:	1b64      	subs	r4, r4, r5
 8013aca:	10a4      	asrs	r4, r4, #2
 8013acc:	2600      	movs	r6, #0
 8013ace:	42a6      	cmp	r6, r4
 8013ad0:	d105      	bne.n	8013ade <__libc_init_array+0x2e>
 8013ad2:	bd70      	pop	{r4, r5, r6, pc}
 8013ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ad8:	4798      	blx	r3
 8013ada:	3601      	adds	r6, #1
 8013adc:	e7ee      	b.n	8013abc <__libc_init_array+0xc>
 8013ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ae2:	4798      	blx	r3
 8013ae4:	3601      	adds	r6, #1
 8013ae6:	e7f2      	b.n	8013ace <__libc_init_array+0x1e>
 8013ae8:	08016c10 	.word	0x08016c10
 8013aec:	08016c10 	.word	0x08016c10
 8013af0:	08016c10 	.word	0x08016c10
 8013af4:	08016c14 	.word	0x08016c14

08013af8 <__retarget_lock_init_recursive>:
 8013af8:	4770      	bx	lr

08013afa <__retarget_lock_acquire_recursive>:
 8013afa:	4770      	bx	lr

08013afc <__retarget_lock_release_recursive>:
 8013afc:	4770      	bx	lr

08013afe <memcpy>:
 8013afe:	440a      	add	r2, r1
 8013b00:	4291      	cmp	r1, r2
 8013b02:	f100 33ff 	add.w	r3, r0, #4294967295
 8013b06:	d100      	bne.n	8013b0a <memcpy+0xc>
 8013b08:	4770      	bx	lr
 8013b0a:	b510      	push	{r4, lr}
 8013b0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b14:	4291      	cmp	r1, r2
 8013b16:	d1f9      	bne.n	8013b0c <memcpy+0xe>
 8013b18:	bd10      	pop	{r4, pc}
 8013b1a:	0000      	movs	r0, r0
 8013b1c:	0000      	movs	r0, r0
	...

08013b20 <nan>:
 8013b20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013b28 <nan+0x8>
 8013b24:	4770      	bx	lr
 8013b26:	bf00      	nop
 8013b28:	00000000 	.word	0x00000000
 8013b2c:	7ff80000 	.word	0x7ff80000

08013b30 <nanf>:
 8013b30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013b38 <nanf+0x8>
 8013b34:	4770      	bx	lr
 8013b36:	bf00      	nop
 8013b38:	7fc00000 	.word	0x7fc00000

08013b3c <__assert_func>:
 8013b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b3e:	4614      	mov	r4, r2
 8013b40:	461a      	mov	r2, r3
 8013b42:	4b09      	ldr	r3, [pc, #36]	@ (8013b68 <__assert_func+0x2c>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	4605      	mov	r5, r0
 8013b48:	68d8      	ldr	r0, [r3, #12]
 8013b4a:	b14c      	cbz	r4, 8013b60 <__assert_func+0x24>
 8013b4c:	4b07      	ldr	r3, [pc, #28]	@ (8013b6c <__assert_func+0x30>)
 8013b4e:	9100      	str	r1, [sp, #0]
 8013b50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b54:	4906      	ldr	r1, [pc, #24]	@ (8013b70 <__assert_func+0x34>)
 8013b56:	462b      	mov	r3, r5
 8013b58:	f002 faae 	bl	80160b8 <fiprintf>
 8013b5c:	f002 fb6c 	bl	8016238 <abort>
 8013b60:	4b04      	ldr	r3, [pc, #16]	@ (8013b74 <__assert_func+0x38>)
 8013b62:	461c      	mov	r4, r3
 8013b64:	e7f3      	b.n	8013b4e <__assert_func+0x12>
 8013b66:	bf00      	nop
 8013b68:	2000018c 	.word	0x2000018c
 8013b6c:	08016837 	.word	0x08016837
 8013b70:	08016844 	.word	0x08016844
 8013b74:	08016872 	.word	0x08016872

08013b78 <quorem>:
 8013b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b7c:	6903      	ldr	r3, [r0, #16]
 8013b7e:	690c      	ldr	r4, [r1, #16]
 8013b80:	42a3      	cmp	r3, r4
 8013b82:	4607      	mov	r7, r0
 8013b84:	db7e      	blt.n	8013c84 <quorem+0x10c>
 8013b86:	3c01      	subs	r4, #1
 8013b88:	f101 0814 	add.w	r8, r1, #20
 8013b8c:	00a3      	lsls	r3, r4, #2
 8013b8e:	f100 0514 	add.w	r5, r0, #20
 8013b92:	9300      	str	r3, [sp, #0]
 8013b94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b98:	9301      	str	r3, [sp, #4]
 8013b9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013b9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013ba2:	3301      	adds	r3, #1
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013baa:	fbb2 f6f3 	udiv	r6, r2, r3
 8013bae:	d32e      	bcc.n	8013c0e <quorem+0x96>
 8013bb0:	f04f 0a00 	mov.w	sl, #0
 8013bb4:	46c4      	mov	ip, r8
 8013bb6:	46ae      	mov	lr, r5
 8013bb8:	46d3      	mov	fp, sl
 8013bba:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013bbe:	b298      	uxth	r0, r3
 8013bc0:	fb06 a000 	mla	r0, r6, r0, sl
 8013bc4:	0c02      	lsrs	r2, r0, #16
 8013bc6:	0c1b      	lsrs	r3, r3, #16
 8013bc8:	fb06 2303 	mla	r3, r6, r3, r2
 8013bcc:	f8de 2000 	ldr.w	r2, [lr]
 8013bd0:	b280      	uxth	r0, r0
 8013bd2:	b292      	uxth	r2, r2
 8013bd4:	1a12      	subs	r2, r2, r0
 8013bd6:	445a      	add	r2, fp
 8013bd8:	f8de 0000 	ldr.w	r0, [lr]
 8013bdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013be6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013bea:	b292      	uxth	r2, r2
 8013bec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013bf0:	45e1      	cmp	r9, ip
 8013bf2:	f84e 2b04 	str.w	r2, [lr], #4
 8013bf6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013bfa:	d2de      	bcs.n	8013bba <quorem+0x42>
 8013bfc:	9b00      	ldr	r3, [sp, #0]
 8013bfe:	58eb      	ldr	r3, [r5, r3]
 8013c00:	b92b      	cbnz	r3, 8013c0e <quorem+0x96>
 8013c02:	9b01      	ldr	r3, [sp, #4]
 8013c04:	3b04      	subs	r3, #4
 8013c06:	429d      	cmp	r5, r3
 8013c08:	461a      	mov	r2, r3
 8013c0a:	d32f      	bcc.n	8013c6c <quorem+0xf4>
 8013c0c:	613c      	str	r4, [r7, #16]
 8013c0e:	4638      	mov	r0, r7
 8013c10:	f001 fd12 	bl	8015638 <__mcmp>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	db25      	blt.n	8013c64 <quorem+0xec>
 8013c18:	4629      	mov	r1, r5
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013c20:	f8d1 c000 	ldr.w	ip, [r1]
 8013c24:	fa1f fe82 	uxth.w	lr, r2
 8013c28:	fa1f f38c 	uxth.w	r3, ip
 8013c2c:	eba3 030e 	sub.w	r3, r3, lr
 8013c30:	4403      	add	r3, r0
 8013c32:	0c12      	lsrs	r2, r2, #16
 8013c34:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013c38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c42:	45c1      	cmp	r9, r8
 8013c44:	f841 3b04 	str.w	r3, [r1], #4
 8013c48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013c4c:	d2e6      	bcs.n	8013c1c <quorem+0xa4>
 8013c4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013c52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013c56:	b922      	cbnz	r2, 8013c62 <quorem+0xea>
 8013c58:	3b04      	subs	r3, #4
 8013c5a:	429d      	cmp	r5, r3
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	d30b      	bcc.n	8013c78 <quorem+0x100>
 8013c60:	613c      	str	r4, [r7, #16]
 8013c62:	3601      	adds	r6, #1
 8013c64:	4630      	mov	r0, r6
 8013c66:	b003      	add	sp, #12
 8013c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c6c:	6812      	ldr	r2, [r2, #0]
 8013c6e:	3b04      	subs	r3, #4
 8013c70:	2a00      	cmp	r2, #0
 8013c72:	d1cb      	bne.n	8013c0c <quorem+0x94>
 8013c74:	3c01      	subs	r4, #1
 8013c76:	e7c6      	b.n	8013c06 <quorem+0x8e>
 8013c78:	6812      	ldr	r2, [r2, #0]
 8013c7a:	3b04      	subs	r3, #4
 8013c7c:	2a00      	cmp	r2, #0
 8013c7e:	d1ef      	bne.n	8013c60 <quorem+0xe8>
 8013c80:	3c01      	subs	r4, #1
 8013c82:	e7ea      	b.n	8013c5a <quorem+0xe2>
 8013c84:	2000      	movs	r0, #0
 8013c86:	e7ee      	b.n	8013c66 <quorem+0xee>

08013c88 <_dtoa_r>:
 8013c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c8c:	69c7      	ldr	r7, [r0, #28]
 8013c8e:	b097      	sub	sp, #92	@ 0x5c
 8013c90:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013c94:	ec55 4b10 	vmov	r4, r5, d0
 8013c98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8013c9a:	9107      	str	r1, [sp, #28]
 8013c9c:	4681      	mov	r9, r0
 8013c9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013ca0:	9311      	str	r3, [sp, #68]	@ 0x44
 8013ca2:	b97f      	cbnz	r7, 8013cc4 <_dtoa_r+0x3c>
 8013ca4:	2010      	movs	r0, #16
 8013ca6:	f001 f943 	bl	8014f30 <malloc>
 8013caa:	4602      	mov	r2, r0
 8013cac:	f8c9 001c 	str.w	r0, [r9, #28]
 8013cb0:	b920      	cbnz	r0, 8013cbc <_dtoa_r+0x34>
 8013cb2:	4ba9      	ldr	r3, [pc, #676]	@ (8013f58 <_dtoa_r+0x2d0>)
 8013cb4:	21ef      	movs	r1, #239	@ 0xef
 8013cb6:	48a9      	ldr	r0, [pc, #676]	@ (8013f5c <_dtoa_r+0x2d4>)
 8013cb8:	f7ff ff40 	bl	8013b3c <__assert_func>
 8013cbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013cc0:	6007      	str	r7, [r0, #0]
 8013cc2:	60c7      	str	r7, [r0, #12]
 8013cc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013cc8:	6819      	ldr	r1, [r3, #0]
 8013cca:	b159      	cbz	r1, 8013ce4 <_dtoa_r+0x5c>
 8013ccc:	685a      	ldr	r2, [r3, #4]
 8013cce:	604a      	str	r2, [r1, #4]
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	4093      	lsls	r3, r2
 8013cd4:	608b      	str	r3, [r1, #8]
 8013cd6:	4648      	mov	r0, r9
 8013cd8:	f001 fa32 	bl	8015140 <_Bfree>
 8013cdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	601a      	str	r2, [r3, #0]
 8013ce4:	1e2b      	subs	r3, r5, #0
 8013ce6:	bfb9      	ittee	lt
 8013ce8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013cec:	9305      	strlt	r3, [sp, #20]
 8013cee:	2300      	movge	r3, #0
 8013cf0:	6033      	strge	r3, [r6, #0]
 8013cf2:	9f05      	ldr	r7, [sp, #20]
 8013cf4:	4b9a      	ldr	r3, [pc, #616]	@ (8013f60 <_dtoa_r+0x2d8>)
 8013cf6:	bfbc      	itt	lt
 8013cf8:	2201      	movlt	r2, #1
 8013cfa:	6032      	strlt	r2, [r6, #0]
 8013cfc:	43bb      	bics	r3, r7
 8013cfe:	d112      	bne.n	8013d26 <_dtoa_r+0x9e>
 8013d00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013d02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013d06:	6013      	str	r3, [r2, #0]
 8013d08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013d0c:	4323      	orrs	r3, r4
 8013d0e:	f000 855a 	beq.w	80147c6 <_dtoa_r+0xb3e>
 8013d12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013d14:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8013f74 <_dtoa_r+0x2ec>
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	f000 855c 	beq.w	80147d6 <_dtoa_r+0xb4e>
 8013d1e:	f10a 0303 	add.w	r3, sl, #3
 8013d22:	f000 bd56 	b.w	80147d2 <_dtoa_r+0xb4a>
 8013d26:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	ec51 0b17 	vmov	r0, r1, d7
 8013d30:	2300      	movs	r3, #0
 8013d32:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8013d36:	f7ec fee7 	bl	8000b08 <__aeabi_dcmpeq>
 8013d3a:	4680      	mov	r8, r0
 8013d3c:	b158      	cbz	r0, 8013d56 <_dtoa_r+0xce>
 8013d3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013d40:	2301      	movs	r3, #1
 8013d42:	6013      	str	r3, [r2, #0]
 8013d44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013d46:	b113      	cbz	r3, 8013d4e <_dtoa_r+0xc6>
 8013d48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013d4a:	4b86      	ldr	r3, [pc, #536]	@ (8013f64 <_dtoa_r+0x2dc>)
 8013d4c:	6013      	str	r3, [r2, #0]
 8013d4e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013f78 <_dtoa_r+0x2f0>
 8013d52:	f000 bd40 	b.w	80147d6 <_dtoa_r+0xb4e>
 8013d56:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8013d5a:	aa14      	add	r2, sp, #80	@ 0x50
 8013d5c:	a915      	add	r1, sp, #84	@ 0x54
 8013d5e:	4648      	mov	r0, r9
 8013d60:	f001 fd8a 	bl	8015878 <__d2b>
 8013d64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013d68:	9002      	str	r0, [sp, #8]
 8013d6a:	2e00      	cmp	r6, #0
 8013d6c:	d078      	beq.n	8013e60 <_dtoa_r+0x1d8>
 8013d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013d70:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8013d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013d7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013d80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013d84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013d88:	4619      	mov	r1, r3
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	4b76      	ldr	r3, [pc, #472]	@ (8013f68 <_dtoa_r+0x2e0>)
 8013d8e:	f7ec fa9b 	bl	80002c8 <__aeabi_dsub>
 8013d92:	a36b      	add	r3, pc, #428	@ (adr r3, 8013f40 <_dtoa_r+0x2b8>)
 8013d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d98:	f7ec fc4e 	bl	8000638 <__aeabi_dmul>
 8013d9c:	a36a      	add	r3, pc, #424	@ (adr r3, 8013f48 <_dtoa_r+0x2c0>)
 8013d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da2:	f7ec fa93 	bl	80002cc <__adddf3>
 8013da6:	4604      	mov	r4, r0
 8013da8:	4630      	mov	r0, r6
 8013daa:	460d      	mov	r5, r1
 8013dac:	f7ec fbda 	bl	8000564 <__aeabi_i2d>
 8013db0:	a367      	add	r3, pc, #412	@ (adr r3, 8013f50 <_dtoa_r+0x2c8>)
 8013db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db6:	f7ec fc3f 	bl	8000638 <__aeabi_dmul>
 8013dba:	4602      	mov	r2, r0
 8013dbc:	460b      	mov	r3, r1
 8013dbe:	4620      	mov	r0, r4
 8013dc0:	4629      	mov	r1, r5
 8013dc2:	f7ec fa83 	bl	80002cc <__adddf3>
 8013dc6:	4604      	mov	r4, r0
 8013dc8:	460d      	mov	r5, r1
 8013dca:	f7ec fee5 	bl	8000b98 <__aeabi_d2iz>
 8013dce:	2200      	movs	r2, #0
 8013dd0:	4607      	mov	r7, r0
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	4620      	mov	r0, r4
 8013dd6:	4629      	mov	r1, r5
 8013dd8:	f7ec fea0 	bl	8000b1c <__aeabi_dcmplt>
 8013ddc:	b140      	cbz	r0, 8013df0 <_dtoa_r+0x168>
 8013dde:	4638      	mov	r0, r7
 8013de0:	f7ec fbc0 	bl	8000564 <__aeabi_i2d>
 8013de4:	4622      	mov	r2, r4
 8013de6:	462b      	mov	r3, r5
 8013de8:	f7ec fe8e 	bl	8000b08 <__aeabi_dcmpeq>
 8013dec:	b900      	cbnz	r0, 8013df0 <_dtoa_r+0x168>
 8013dee:	3f01      	subs	r7, #1
 8013df0:	2f16      	cmp	r7, #22
 8013df2:	d852      	bhi.n	8013e9a <_dtoa_r+0x212>
 8013df4:	4b5d      	ldr	r3, [pc, #372]	@ (8013f6c <_dtoa_r+0x2e4>)
 8013df6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013e02:	f7ec fe8b 	bl	8000b1c <__aeabi_dcmplt>
 8013e06:	2800      	cmp	r0, #0
 8013e08:	d049      	beq.n	8013e9e <_dtoa_r+0x216>
 8013e0a:	3f01      	subs	r7, #1
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013e10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013e12:	1b9b      	subs	r3, r3, r6
 8013e14:	1e5a      	subs	r2, r3, #1
 8013e16:	bf45      	ittet	mi
 8013e18:	f1c3 0301 	rsbmi	r3, r3, #1
 8013e1c:	9300      	strmi	r3, [sp, #0]
 8013e1e:	2300      	movpl	r3, #0
 8013e20:	2300      	movmi	r3, #0
 8013e22:	9206      	str	r2, [sp, #24]
 8013e24:	bf54      	ite	pl
 8013e26:	9300      	strpl	r3, [sp, #0]
 8013e28:	9306      	strmi	r3, [sp, #24]
 8013e2a:	2f00      	cmp	r7, #0
 8013e2c:	db39      	blt.n	8013ea2 <_dtoa_r+0x21a>
 8013e2e:	9b06      	ldr	r3, [sp, #24]
 8013e30:	970d      	str	r7, [sp, #52]	@ 0x34
 8013e32:	443b      	add	r3, r7
 8013e34:	9306      	str	r3, [sp, #24]
 8013e36:	2300      	movs	r3, #0
 8013e38:	9308      	str	r3, [sp, #32]
 8013e3a:	9b07      	ldr	r3, [sp, #28]
 8013e3c:	2b09      	cmp	r3, #9
 8013e3e:	d863      	bhi.n	8013f08 <_dtoa_r+0x280>
 8013e40:	2b05      	cmp	r3, #5
 8013e42:	bfc4      	itt	gt
 8013e44:	3b04      	subgt	r3, #4
 8013e46:	9307      	strgt	r3, [sp, #28]
 8013e48:	9b07      	ldr	r3, [sp, #28]
 8013e4a:	f1a3 0302 	sub.w	r3, r3, #2
 8013e4e:	bfcc      	ite	gt
 8013e50:	2400      	movgt	r4, #0
 8013e52:	2401      	movle	r4, #1
 8013e54:	2b03      	cmp	r3, #3
 8013e56:	d863      	bhi.n	8013f20 <_dtoa_r+0x298>
 8013e58:	e8df f003 	tbb	[pc, r3]
 8013e5c:	2b375452 	.word	0x2b375452
 8013e60:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8013e64:	441e      	add	r6, r3
 8013e66:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013e6a:	2b20      	cmp	r3, #32
 8013e6c:	bfc1      	itttt	gt
 8013e6e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013e72:	409f      	lslgt	r7, r3
 8013e74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013e78:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013e7c:	bfd6      	itet	le
 8013e7e:	f1c3 0320 	rsble	r3, r3, #32
 8013e82:	ea47 0003 	orrgt.w	r0, r7, r3
 8013e86:	fa04 f003 	lslle.w	r0, r4, r3
 8013e8a:	f7ec fb5b 	bl	8000544 <__aeabi_ui2d>
 8013e8e:	2201      	movs	r2, #1
 8013e90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013e94:	3e01      	subs	r6, #1
 8013e96:	9212      	str	r2, [sp, #72]	@ 0x48
 8013e98:	e776      	b.n	8013d88 <_dtoa_r+0x100>
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	e7b7      	b.n	8013e0e <_dtoa_r+0x186>
 8013e9e:	9010      	str	r0, [sp, #64]	@ 0x40
 8013ea0:	e7b6      	b.n	8013e10 <_dtoa_r+0x188>
 8013ea2:	9b00      	ldr	r3, [sp, #0]
 8013ea4:	1bdb      	subs	r3, r3, r7
 8013ea6:	9300      	str	r3, [sp, #0]
 8013ea8:	427b      	negs	r3, r7
 8013eaa:	9308      	str	r3, [sp, #32]
 8013eac:	2300      	movs	r3, #0
 8013eae:	930d      	str	r3, [sp, #52]	@ 0x34
 8013eb0:	e7c3      	b.n	8013e3a <_dtoa_r+0x1b2>
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013eb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013eb8:	eb07 0b03 	add.w	fp, r7, r3
 8013ebc:	f10b 0301 	add.w	r3, fp, #1
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	9303      	str	r3, [sp, #12]
 8013ec4:	bfb8      	it	lt
 8013ec6:	2301      	movlt	r3, #1
 8013ec8:	e006      	b.n	8013ed8 <_dtoa_r+0x250>
 8013eca:	2301      	movs	r3, #1
 8013ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ece:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	dd28      	ble.n	8013f26 <_dtoa_r+0x29e>
 8013ed4:	469b      	mov	fp, r3
 8013ed6:	9303      	str	r3, [sp, #12]
 8013ed8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8013edc:	2100      	movs	r1, #0
 8013ede:	2204      	movs	r2, #4
 8013ee0:	f102 0514 	add.w	r5, r2, #20
 8013ee4:	429d      	cmp	r5, r3
 8013ee6:	d926      	bls.n	8013f36 <_dtoa_r+0x2ae>
 8013ee8:	6041      	str	r1, [r0, #4]
 8013eea:	4648      	mov	r0, r9
 8013eec:	f001 f8e8 	bl	80150c0 <_Balloc>
 8013ef0:	4682      	mov	sl, r0
 8013ef2:	2800      	cmp	r0, #0
 8013ef4:	d142      	bne.n	8013f7c <_dtoa_r+0x2f4>
 8013ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8013f70 <_dtoa_r+0x2e8>)
 8013ef8:	4602      	mov	r2, r0
 8013efa:	f240 11af 	movw	r1, #431	@ 0x1af
 8013efe:	e6da      	b.n	8013cb6 <_dtoa_r+0x2e>
 8013f00:	2300      	movs	r3, #0
 8013f02:	e7e3      	b.n	8013ecc <_dtoa_r+0x244>
 8013f04:	2300      	movs	r3, #0
 8013f06:	e7d5      	b.n	8013eb4 <_dtoa_r+0x22c>
 8013f08:	2401      	movs	r4, #1
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	9307      	str	r3, [sp, #28]
 8013f0e:	9409      	str	r4, [sp, #36]	@ 0x24
 8013f10:	f04f 3bff 	mov.w	fp, #4294967295
 8013f14:	2200      	movs	r2, #0
 8013f16:	f8cd b00c 	str.w	fp, [sp, #12]
 8013f1a:	2312      	movs	r3, #18
 8013f1c:	920c      	str	r2, [sp, #48]	@ 0x30
 8013f1e:	e7db      	b.n	8013ed8 <_dtoa_r+0x250>
 8013f20:	2301      	movs	r3, #1
 8013f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f24:	e7f4      	b.n	8013f10 <_dtoa_r+0x288>
 8013f26:	f04f 0b01 	mov.w	fp, #1
 8013f2a:	f8cd b00c 	str.w	fp, [sp, #12]
 8013f2e:	465b      	mov	r3, fp
 8013f30:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8013f34:	e7d0      	b.n	8013ed8 <_dtoa_r+0x250>
 8013f36:	3101      	adds	r1, #1
 8013f38:	0052      	lsls	r2, r2, #1
 8013f3a:	e7d1      	b.n	8013ee0 <_dtoa_r+0x258>
 8013f3c:	f3af 8000 	nop.w
 8013f40:	636f4361 	.word	0x636f4361
 8013f44:	3fd287a7 	.word	0x3fd287a7
 8013f48:	8b60c8b3 	.word	0x8b60c8b3
 8013f4c:	3fc68a28 	.word	0x3fc68a28
 8013f50:	509f79fb 	.word	0x509f79fb
 8013f54:	3fd34413 	.word	0x3fd34413
 8013f58:	080167be 	.word	0x080167be
 8013f5c:	08016880 	.word	0x08016880
 8013f60:	7ff00000 	.word	0x7ff00000
 8013f64:	0801679b 	.word	0x0801679b
 8013f68:	3ff80000 	.word	0x3ff80000
 8013f6c:	08016b40 	.word	0x08016b40
 8013f70:	080168d8 	.word	0x080168d8
 8013f74:	0801687c 	.word	0x0801687c
 8013f78:	0801679a 	.word	0x0801679a
 8013f7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013f80:	6018      	str	r0, [r3, #0]
 8013f82:	9b03      	ldr	r3, [sp, #12]
 8013f84:	2b0e      	cmp	r3, #14
 8013f86:	f200 80a1 	bhi.w	80140cc <_dtoa_r+0x444>
 8013f8a:	2c00      	cmp	r4, #0
 8013f8c:	f000 809e 	beq.w	80140cc <_dtoa_r+0x444>
 8013f90:	2f00      	cmp	r7, #0
 8013f92:	dd33      	ble.n	8013ffc <_dtoa_r+0x374>
 8013f94:	4b9c      	ldr	r3, [pc, #624]	@ (8014208 <_dtoa_r+0x580>)
 8013f96:	f007 020f 	and.w	r2, r7, #15
 8013f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f9e:	ed93 7b00 	vldr	d7, [r3]
 8013fa2:	05f8      	lsls	r0, r7, #23
 8013fa4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8013fa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013fac:	d516      	bpl.n	8013fdc <_dtoa_r+0x354>
 8013fae:	4b97      	ldr	r3, [pc, #604]	@ (801420c <_dtoa_r+0x584>)
 8013fb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013fb8:	f7ec fc68 	bl	800088c <__aeabi_ddiv>
 8013fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013fc0:	f004 040f 	and.w	r4, r4, #15
 8013fc4:	2603      	movs	r6, #3
 8013fc6:	4d91      	ldr	r5, [pc, #580]	@ (801420c <_dtoa_r+0x584>)
 8013fc8:	b954      	cbnz	r4, 8013fe0 <_dtoa_r+0x358>
 8013fca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013fd2:	f7ec fc5b 	bl	800088c <__aeabi_ddiv>
 8013fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013fda:	e028      	b.n	801402e <_dtoa_r+0x3a6>
 8013fdc:	2602      	movs	r6, #2
 8013fde:	e7f2      	b.n	8013fc6 <_dtoa_r+0x33e>
 8013fe0:	07e1      	lsls	r1, r4, #31
 8013fe2:	d508      	bpl.n	8013ff6 <_dtoa_r+0x36e>
 8013fe4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013fec:	f7ec fb24 	bl	8000638 <__aeabi_dmul>
 8013ff0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013ff4:	3601      	adds	r6, #1
 8013ff6:	1064      	asrs	r4, r4, #1
 8013ff8:	3508      	adds	r5, #8
 8013ffa:	e7e5      	b.n	8013fc8 <_dtoa_r+0x340>
 8013ffc:	f000 80af 	beq.w	801415e <_dtoa_r+0x4d6>
 8014000:	427c      	negs	r4, r7
 8014002:	4b81      	ldr	r3, [pc, #516]	@ (8014208 <_dtoa_r+0x580>)
 8014004:	4d81      	ldr	r5, [pc, #516]	@ (801420c <_dtoa_r+0x584>)
 8014006:	f004 020f 	and.w	r2, r4, #15
 801400a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014016:	f7ec fb0f 	bl	8000638 <__aeabi_dmul>
 801401a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801401e:	1124      	asrs	r4, r4, #4
 8014020:	2300      	movs	r3, #0
 8014022:	2602      	movs	r6, #2
 8014024:	2c00      	cmp	r4, #0
 8014026:	f040 808f 	bne.w	8014148 <_dtoa_r+0x4c0>
 801402a:	2b00      	cmp	r3, #0
 801402c:	d1d3      	bne.n	8013fd6 <_dtoa_r+0x34e>
 801402e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014030:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8014034:	2b00      	cmp	r3, #0
 8014036:	f000 8094 	beq.w	8014162 <_dtoa_r+0x4da>
 801403a:	4b75      	ldr	r3, [pc, #468]	@ (8014210 <_dtoa_r+0x588>)
 801403c:	2200      	movs	r2, #0
 801403e:	4620      	mov	r0, r4
 8014040:	4629      	mov	r1, r5
 8014042:	f7ec fd6b 	bl	8000b1c <__aeabi_dcmplt>
 8014046:	2800      	cmp	r0, #0
 8014048:	f000 808b 	beq.w	8014162 <_dtoa_r+0x4da>
 801404c:	9b03      	ldr	r3, [sp, #12]
 801404e:	2b00      	cmp	r3, #0
 8014050:	f000 8087 	beq.w	8014162 <_dtoa_r+0x4da>
 8014054:	f1bb 0f00 	cmp.w	fp, #0
 8014058:	dd34      	ble.n	80140c4 <_dtoa_r+0x43c>
 801405a:	4620      	mov	r0, r4
 801405c:	4b6d      	ldr	r3, [pc, #436]	@ (8014214 <_dtoa_r+0x58c>)
 801405e:	2200      	movs	r2, #0
 8014060:	4629      	mov	r1, r5
 8014062:	f7ec fae9 	bl	8000638 <__aeabi_dmul>
 8014066:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801406a:	f107 38ff 	add.w	r8, r7, #4294967295
 801406e:	3601      	adds	r6, #1
 8014070:	465c      	mov	r4, fp
 8014072:	4630      	mov	r0, r6
 8014074:	f7ec fa76 	bl	8000564 <__aeabi_i2d>
 8014078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801407c:	f7ec fadc 	bl	8000638 <__aeabi_dmul>
 8014080:	4b65      	ldr	r3, [pc, #404]	@ (8014218 <_dtoa_r+0x590>)
 8014082:	2200      	movs	r2, #0
 8014084:	f7ec f922 	bl	80002cc <__adddf3>
 8014088:	4605      	mov	r5, r0
 801408a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801408e:	2c00      	cmp	r4, #0
 8014090:	d16a      	bne.n	8014168 <_dtoa_r+0x4e0>
 8014092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014096:	4b61      	ldr	r3, [pc, #388]	@ (801421c <_dtoa_r+0x594>)
 8014098:	2200      	movs	r2, #0
 801409a:	f7ec f915 	bl	80002c8 <__aeabi_dsub>
 801409e:	4602      	mov	r2, r0
 80140a0:	460b      	mov	r3, r1
 80140a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80140a6:	462a      	mov	r2, r5
 80140a8:	4633      	mov	r3, r6
 80140aa:	f7ec fd55 	bl	8000b58 <__aeabi_dcmpgt>
 80140ae:	2800      	cmp	r0, #0
 80140b0:	f040 8298 	bne.w	80145e4 <_dtoa_r+0x95c>
 80140b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80140b8:	462a      	mov	r2, r5
 80140ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80140be:	f7ec fd2d 	bl	8000b1c <__aeabi_dcmplt>
 80140c2:	bb38      	cbnz	r0, 8014114 <_dtoa_r+0x48c>
 80140c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80140c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80140cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	f2c0 8157 	blt.w	8014382 <_dtoa_r+0x6fa>
 80140d4:	2f0e      	cmp	r7, #14
 80140d6:	f300 8154 	bgt.w	8014382 <_dtoa_r+0x6fa>
 80140da:	4b4b      	ldr	r3, [pc, #300]	@ (8014208 <_dtoa_r+0x580>)
 80140dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80140e0:	ed93 7b00 	vldr	d7, [r3]
 80140e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	ed8d 7b00 	vstr	d7, [sp]
 80140ec:	f280 80e5 	bge.w	80142ba <_dtoa_r+0x632>
 80140f0:	9b03      	ldr	r3, [sp, #12]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	f300 80e1 	bgt.w	80142ba <_dtoa_r+0x632>
 80140f8:	d10c      	bne.n	8014114 <_dtoa_r+0x48c>
 80140fa:	4b48      	ldr	r3, [pc, #288]	@ (801421c <_dtoa_r+0x594>)
 80140fc:	2200      	movs	r2, #0
 80140fe:	ec51 0b17 	vmov	r0, r1, d7
 8014102:	f7ec fa99 	bl	8000638 <__aeabi_dmul>
 8014106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801410a:	f7ec fd1b 	bl	8000b44 <__aeabi_dcmpge>
 801410e:	2800      	cmp	r0, #0
 8014110:	f000 8266 	beq.w	80145e0 <_dtoa_r+0x958>
 8014114:	2400      	movs	r4, #0
 8014116:	4625      	mov	r5, r4
 8014118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801411a:	4656      	mov	r6, sl
 801411c:	ea6f 0803 	mvn.w	r8, r3
 8014120:	2700      	movs	r7, #0
 8014122:	4621      	mov	r1, r4
 8014124:	4648      	mov	r0, r9
 8014126:	f001 f80b 	bl	8015140 <_Bfree>
 801412a:	2d00      	cmp	r5, #0
 801412c:	f000 80bd 	beq.w	80142aa <_dtoa_r+0x622>
 8014130:	b12f      	cbz	r7, 801413e <_dtoa_r+0x4b6>
 8014132:	42af      	cmp	r7, r5
 8014134:	d003      	beq.n	801413e <_dtoa_r+0x4b6>
 8014136:	4639      	mov	r1, r7
 8014138:	4648      	mov	r0, r9
 801413a:	f001 f801 	bl	8015140 <_Bfree>
 801413e:	4629      	mov	r1, r5
 8014140:	4648      	mov	r0, r9
 8014142:	f000 fffd 	bl	8015140 <_Bfree>
 8014146:	e0b0      	b.n	80142aa <_dtoa_r+0x622>
 8014148:	07e2      	lsls	r2, r4, #31
 801414a:	d505      	bpl.n	8014158 <_dtoa_r+0x4d0>
 801414c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014150:	f7ec fa72 	bl	8000638 <__aeabi_dmul>
 8014154:	3601      	adds	r6, #1
 8014156:	2301      	movs	r3, #1
 8014158:	1064      	asrs	r4, r4, #1
 801415a:	3508      	adds	r5, #8
 801415c:	e762      	b.n	8014024 <_dtoa_r+0x39c>
 801415e:	2602      	movs	r6, #2
 8014160:	e765      	b.n	801402e <_dtoa_r+0x3a6>
 8014162:	9c03      	ldr	r4, [sp, #12]
 8014164:	46b8      	mov	r8, r7
 8014166:	e784      	b.n	8014072 <_dtoa_r+0x3ea>
 8014168:	4b27      	ldr	r3, [pc, #156]	@ (8014208 <_dtoa_r+0x580>)
 801416a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801416c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014174:	4454      	add	r4, sl
 8014176:	2900      	cmp	r1, #0
 8014178:	d054      	beq.n	8014224 <_dtoa_r+0x59c>
 801417a:	4929      	ldr	r1, [pc, #164]	@ (8014220 <_dtoa_r+0x598>)
 801417c:	2000      	movs	r0, #0
 801417e:	f7ec fb85 	bl	800088c <__aeabi_ddiv>
 8014182:	4633      	mov	r3, r6
 8014184:	462a      	mov	r2, r5
 8014186:	f7ec f89f 	bl	80002c8 <__aeabi_dsub>
 801418a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801418e:	4656      	mov	r6, sl
 8014190:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014194:	f7ec fd00 	bl	8000b98 <__aeabi_d2iz>
 8014198:	4605      	mov	r5, r0
 801419a:	f7ec f9e3 	bl	8000564 <__aeabi_i2d>
 801419e:	4602      	mov	r2, r0
 80141a0:	460b      	mov	r3, r1
 80141a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80141a6:	f7ec f88f 	bl	80002c8 <__aeabi_dsub>
 80141aa:	3530      	adds	r5, #48	@ 0x30
 80141ac:	4602      	mov	r2, r0
 80141ae:	460b      	mov	r3, r1
 80141b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80141b4:	f806 5b01 	strb.w	r5, [r6], #1
 80141b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80141bc:	f7ec fcae 	bl	8000b1c <__aeabi_dcmplt>
 80141c0:	2800      	cmp	r0, #0
 80141c2:	d172      	bne.n	80142aa <_dtoa_r+0x622>
 80141c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141c8:	4911      	ldr	r1, [pc, #68]	@ (8014210 <_dtoa_r+0x588>)
 80141ca:	2000      	movs	r0, #0
 80141cc:	f7ec f87c 	bl	80002c8 <__aeabi_dsub>
 80141d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80141d4:	f7ec fca2 	bl	8000b1c <__aeabi_dcmplt>
 80141d8:	2800      	cmp	r0, #0
 80141da:	f040 80b4 	bne.w	8014346 <_dtoa_r+0x6be>
 80141de:	42a6      	cmp	r6, r4
 80141e0:	f43f af70 	beq.w	80140c4 <_dtoa_r+0x43c>
 80141e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80141e8:	4b0a      	ldr	r3, [pc, #40]	@ (8014214 <_dtoa_r+0x58c>)
 80141ea:	2200      	movs	r2, #0
 80141ec:	f7ec fa24 	bl	8000638 <__aeabi_dmul>
 80141f0:	4b08      	ldr	r3, [pc, #32]	@ (8014214 <_dtoa_r+0x58c>)
 80141f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80141f6:	2200      	movs	r2, #0
 80141f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80141fc:	f7ec fa1c 	bl	8000638 <__aeabi_dmul>
 8014200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014204:	e7c4      	b.n	8014190 <_dtoa_r+0x508>
 8014206:	bf00      	nop
 8014208:	08016b40 	.word	0x08016b40
 801420c:	08016b18 	.word	0x08016b18
 8014210:	3ff00000 	.word	0x3ff00000
 8014214:	40240000 	.word	0x40240000
 8014218:	401c0000 	.word	0x401c0000
 801421c:	40140000 	.word	0x40140000
 8014220:	3fe00000 	.word	0x3fe00000
 8014224:	4631      	mov	r1, r6
 8014226:	4628      	mov	r0, r5
 8014228:	f7ec fa06 	bl	8000638 <__aeabi_dmul>
 801422c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014230:	9413      	str	r4, [sp, #76]	@ 0x4c
 8014232:	4656      	mov	r6, sl
 8014234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014238:	f7ec fcae 	bl	8000b98 <__aeabi_d2iz>
 801423c:	4605      	mov	r5, r0
 801423e:	f7ec f991 	bl	8000564 <__aeabi_i2d>
 8014242:	4602      	mov	r2, r0
 8014244:	460b      	mov	r3, r1
 8014246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801424a:	f7ec f83d 	bl	80002c8 <__aeabi_dsub>
 801424e:	3530      	adds	r5, #48	@ 0x30
 8014250:	f806 5b01 	strb.w	r5, [r6], #1
 8014254:	4602      	mov	r2, r0
 8014256:	460b      	mov	r3, r1
 8014258:	42a6      	cmp	r6, r4
 801425a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801425e:	f04f 0200 	mov.w	r2, #0
 8014262:	d124      	bne.n	80142ae <_dtoa_r+0x626>
 8014264:	4baf      	ldr	r3, [pc, #700]	@ (8014524 <_dtoa_r+0x89c>)
 8014266:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801426a:	f7ec f82f 	bl	80002cc <__adddf3>
 801426e:	4602      	mov	r2, r0
 8014270:	460b      	mov	r3, r1
 8014272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014276:	f7ec fc6f 	bl	8000b58 <__aeabi_dcmpgt>
 801427a:	2800      	cmp	r0, #0
 801427c:	d163      	bne.n	8014346 <_dtoa_r+0x6be>
 801427e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014282:	49a8      	ldr	r1, [pc, #672]	@ (8014524 <_dtoa_r+0x89c>)
 8014284:	2000      	movs	r0, #0
 8014286:	f7ec f81f 	bl	80002c8 <__aeabi_dsub>
 801428a:	4602      	mov	r2, r0
 801428c:	460b      	mov	r3, r1
 801428e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014292:	f7ec fc43 	bl	8000b1c <__aeabi_dcmplt>
 8014296:	2800      	cmp	r0, #0
 8014298:	f43f af14 	beq.w	80140c4 <_dtoa_r+0x43c>
 801429c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801429e:	1e73      	subs	r3, r6, #1
 80142a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80142a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80142a6:	2b30      	cmp	r3, #48	@ 0x30
 80142a8:	d0f8      	beq.n	801429c <_dtoa_r+0x614>
 80142aa:	4647      	mov	r7, r8
 80142ac:	e03b      	b.n	8014326 <_dtoa_r+0x69e>
 80142ae:	4b9e      	ldr	r3, [pc, #632]	@ (8014528 <_dtoa_r+0x8a0>)
 80142b0:	f7ec f9c2 	bl	8000638 <__aeabi_dmul>
 80142b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80142b8:	e7bc      	b.n	8014234 <_dtoa_r+0x5ac>
 80142ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80142be:	4656      	mov	r6, sl
 80142c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142c4:	4620      	mov	r0, r4
 80142c6:	4629      	mov	r1, r5
 80142c8:	f7ec fae0 	bl	800088c <__aeabi_ddiv>
 80142cc:	f7ec fc64 	bl	8000b98 <__aeabi_d2iz>
 80142d0:	4680      	mov	r8, r0
 80142d2:	f7ec f947 	bl	8000564 <__aeabi_i2d>
 80142d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142da:	f7ec f9ad 	bl	8000638 <__aeabi_dmul>
 80142de:	4602      	mov	r2, r0
 80142e0:	460b      	mov	r3, r1
 80142e2:	4620      	mov	r0, r4
 80142e4:	4629      	mov	r1, r5
 80142e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80142ea:	f7eb ffed 	bl	80002c8 <__aeabi_dsub>
 80142ee:	f806 4b01 	strb.w	r4, [r6], #1
 80142f2:	9d03      	ldr	r5, [sp, #12]
 80142f4:	eba6 040a 	sub.w	r4, r6, sl
 80142f8:	42a5      	cmp	r5, r4
 80142fa:	4602      	mov	r2, r0
 80142fc:	460b      	mov	r3, r1
 80142fe:	d133      	bne.n	8014368 <_dtoa_r+0x6e0>
 8014300:	f7eb ffe4 	bl	80002cc <__adddf3>
 8014304:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014308:	4604      	mov	r4, r0
 801430a:	460d      	mov	r5, r1
 801430c:	f7ec fc24 	bl	8000b58 <__aeabi_dcmpgt>
 8014310:	b9c0      	cbnz	r0, 8014344 <_dtoa_r+0x6bc>
 8014312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014316:	4620      	mov	r0, r4
 8014318:	4629      	mov	r1, r5
 801431a:	f7ec fbf5 	bl	8000b08 <__aeabi_dcmpeq>
 801431e:	b110      	cbz	r0, 8014326 <_dtoa_r+0x69e>
 8014320:	f018 0f01 	tst.w	r8, #1
 8014324:	d10e      	bne.n	8014344 <_dtoa_r+0x6bc>
 8014326:	9902      	ldr	r1, [sp, #8]
 8014328:	4648      	mov	r0, r9
 801432a:	f000 ff09 	bl	8015140 <_Bfree>
 801432e:	2300      	movs	r3, #0
 8014330:	7033      	strb	r3, [r6, #0]
 8014332:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014334:	3701      	adds	r7, #1
 8014336:	601f      	str	r7, [r3, #0]
 8014338:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801433a:	2b00      	cmp	r3, #0
 801433c:	f000 824b 	beq.w	80147d6 <_dtoa_r+0xb4e>
 8014340:	601e      	str	r6, [r3, #0]
 8014342:	e248      	b.n	80147d6 <_dtoa_r+0xb4e>
 8014344:	46b8      	mov	r8, r7
 8014346:	4633      	mov	r3, r6
 8014348:	461e      	mov	r6, r3
 801434a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801434e:	2a39      	cmp	r2, #57	@ 0x39
 8014350:	d106      	bne.n	8014360 <_dtoa_r+0x6d8>
 8014352:	459a      	cmp	sl, r3
 8014354:	d1f8      	bne.n	8014348 <_dtoa_r+0x6c0>
 8014356:	2230      	movs	r2, #48	@ 0x30
 8014358:	f108 0801 	add.w	r8, r8, #1
 801435c:	f88a 2000 	strb.w	r2, [sl]
 8014360:	781a      	ldrb	r2, [r3, #0]
 8014362:	3201      	adds	r2, #1
 8014364:	701a      	strb	r2, [r3, #0]
 8014366:	e7a0      	b.n	80142aa <_dtoa_r+0x622>
 8014368:	4b6f      	ldr	r3, [pc, #444]	@ (8014528 <_dtoa_r+0x8a0>)
 801436a:	2200      	movs	r2, #0
 801436c:	f7ec f964 	bl	8000638 <__aeabi_dmul>
 8014370:	2200      	movs	r2, #0
 8014372:	2300      	movs	r3, #0
 8014374:	4604      	mov	r4, r0
 8014376:	460d      	mov	r5, r1
 8014378:	f7ec fbc6 	bl	8000b08 <__aeabi_dcmpeq>
 801437c:	2800      	cmp	r0, #0
 801437e:	d09f      	beq.n	80142c0 <_dtoa_r+0x638>
 8014380:	e7d1      	b.n	8014326 <_dtoa_r+0x69e>
 8014382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014384:	2a00      	cmp	r2, #0
 8014386:	f000 80ea 	beq.w	801455e <_dtoa_r+0x8d6>
 801438a:	9a07      	ldr	r2, [sp, #28]
 801438c:	2a01      	cmp	r2, #1
 801438e:	f300 80cd 	bgt.w	801452c <_dtoa_r+0x8a4>
 8014392:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014394:	2a00      	cmp	r2, #0
 8014396:	f000 80c1 	beq.w	801451c <_dtoa_r+0x894>
 801439a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801439e:	9c08      	ldr	r4, [sp, #32]
 80143a0:	9e00      	ldr	r6, [sp, #0]
 80143a2:	9a00      	ldr	r2, [sp, #0]
 80143a4:	441a      	add	r2, r3
 80143a6:	9200      	str	r2, [sp, #0]
 80143a8:	9a06      	ldr	r2, [sp, #24]
 80143aa:	2101      	movs	r1, #1
 80143ac:	441a      	add	r2, r3
 80143ae:	4648      	mov	r0, r9
 80143b0:	9206      	str	r2, [sp, #24]
 80143b2:	f000 ffc3 	bl	801533c <__i2b>
 80143b6:	4605      	mov	r5, r0
 80143b8:	b166      	cbz	r6, 80143d4 <_dtoa_r+0x74c>
 80143ba:	9b06      	ldr	r3, [sp, #24]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	dd09      	ble.n	80143d4 <_dtoa_r+0x74c>
 80143c0:	42b3      	cmp	r3, r6
 80143c2:	9a00      	ldr	r2, [sp, #0]
 80143c4:	bfa8      	it	ge
 80143c6:	4633      	movge	r3, r6
 80143c8:	1ad2      	subs	r2, r2, r3
 80143ca:	9200      	str	r2, [sp, #0]
 80143cc:	9a06      	ldr	r2, [sp, #24]
 80143ce:	1af6      	subs	r6, r6, r3
 80143d0:	1ad3      	subs	r3, r2, r3
 80143d2:	9306      	str	r3, [sp, #24]
 80143d4:	9b08      	ldr	r3, [sp, #32]
 80143d6:	b30b      	cbz	r3, 801441c <_dtoa_r+0x794>
 80143d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143da:	2b00      	cmp	r3, #0
 80143dc:	f000 80c6 	beq.w	801456c <_dtoa_r+0x8e4>
 80143e0:	2c00      	cmp	r4, #0
 80143e2:	f000 80c0 	beq.w	8014566 <_dtoa_r+0x8de>
 80143e6:	4629      	mov	r1, r5
 80143e8:	4622      	mov	r2, r4
 80143ea:	4648      	mov	r0, r9
 80143ec:	f001 f85e 	bl	80154ac <__pow5mult>
 80143f0:	9a02      	ldr	r2, [sp, #8]
 80143f2:	4601      	mov	r1, r0
 80143f4:	4605      	mov	r5, r0
 80143f6:	4648      	mov	r0, r9
 80143f8:	f000 ffb6 	bl	8015368 <__multiply>
 80143fc:	9902      	ldr	r1, [sp, #8]
 80143fe:	4680      	mov	r8, r0
 8014400:	4648      	mov	r0, r9
 8014402:	f000 fe9d 	bl	8015140 <_Bfree>
 8014406:	9b08      	ldr	r3, [sp, #32]
 8014408:	1b1b      	subs	r3, r3, r4
 801440a:	9308      	str	r3, [sp, #32]
 801440c:	f000 80b1 	beq.w	8014572 <_dtoa_r+0x8ea>
 8014410:	9a08      	ldr	r2, [sp, #32]
 8014412:	4641      	mov	r1, r8
 8014414:	4648      	mov	r0, r9
 8014416:	f001 f849 	bl	80154ac <__pow5mult>
 801441a:	9002      	str	r0, [sp, #8]
 801441c:	2101      	movs	r1, #1
 801441e:	4648      	mov	r0, r9
 8014420:	f000 ff8c 	bl	801533c <__i2b>
 8014424:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014426:	4604      	mov	r4, r0
 8014428:	2b00      	cmp	r3, #0
 801442a:	f000 81d8 	beq.w	80147de <_dtoa_r+0xb56>
 801442e:	461a      	mov	r2, r3
 8014430:	4601      	mov	r1, r0
 8014432:	4648      	mov	r0, r9
 8014434:	f001 f83a 	bl	80154ac <__pow5mult>
 8014438:	9b07      	ldr	r3, [sp, #28]
 801443a:	2b01      	cmp	r3, #1
 801443c:	4604      	mov	r4, r0
 801443e:	f300 809f 	bgt.w	8014580 <_dtoa_r+0x8f8>
 8014442:	9b04      	ldr	r3, [sp, #16]
 8014444:	2b00      	cmp	r3, #0
 8014446:	f040 8097 	bne.w	8014578 <_dtoa_r+0x8f0>
 801444a:	9b05      	ldr	r3, [sp, #20]
 801444c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014450:	2b00      	cmp	r3, #0
 8014452:	f040 8093 	bne.w	801457c <_dtoa_r+0x8f4>
 8014456:	9b05      	ldr	r3, [sp, #20]
 8014458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801445c:	0d1b      	lsrs	r3, r3, #20
 801445e:	051b      	lsls	r3, r3, #20
 8014460:	b133      	cbz	r3, 8014470 <_dtoa_r+0x7e8>
 8014462:	9b00      	ldr	r3, [sp, #0]
 8014464:	3301      	adds	r3, #1
 8014466:	9300      	str	r3, [sp, #0]
 8014468:	9b06      	ldr	r3, [sp, #24]
 801446a:	3301      	adds	r3, #1
 801446c:	9306      	str	r3, [sp, #24]
 801446e:	2301      	movs	r3, #1
 8014470:	9308      	str	r3, [sp, #32]
 8014472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014474:	2b00      	cmp	r3, #0
 8014476:	f000 81b8 	beq.w	80147ea <_dtoa_r+0xb62>
 801447a:	6923      	ldr	r3, [r4, #16]
 801447c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014480:	6918      	ldr	r0, [r3, #16]
 8014482:	f000 ff0f 	bl	80152a4 <__hi0bits>
 8014486:	f1c0 0020 	rsb	r0, r0, #32
 801448a:	9b06      	ldr	r3, [sp, #24]
 801448c:	4418      	add	r0, r3
 801448e:	f010 001f 	ands.w	r0, r0, #31
 8014492:	f000 8082 	beq.w	801459a <_dtoa_r+0x912>
 8014496:	f1c0 0320 	rsb	r3, r0, #32
 801449a:	2b04      	cmp	r3, #4
 801449c:	dd73      	ble.n	8014586 <_dtoa_r+0x8fe>
 801449e:	9b00      	ldr	r3, [sp, #0]
 80144a0:	f1c0 001c 	rsb	r0, r0, #28
 80144a4:	4403      	add	r3, r0
 80144a6:	9300      	str	r3, [sp, #0]
 80144a8:	9b06      	ldr	r3, [sp, #24]
 80144aa:	4403      	add	r3, r0
 80144ac:	4406      	add	r6, r0
 80144ae:	9306      	str	r3, [sp, #24]
 80144b0:	9b00      	ldr	r3, [sp, #0]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	dd05      	ble.n	80144c2 <_dtoa_r+0x83a>
 80144b6:	9902      	ldr	r1, [sp, #8]
 80144b8:	461a      	mov	r2, r3
 80144ba:	4648      	mov	r0, r9
 80144bc:	f001 f850 	bl	8015560 <__lshift>
 80144c0:	9002      	str	r0, [sp, #8]
 80144c2:	9b06      	ldr	r3, [sp, #24]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	dd05      	ble.n	80144d4 <_dtoa_r+0x84c>
 80144c8:	4621      	mov	r1, r4
 80144ca:	461a      	mov	r2, r3
 80144cc:	4648      	mov	r0, r9
 80144ce:	f001 f847 	bl	8015560 <__lshift>
 80144d2:	4604      	mov	r4, r0
 80144d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d061      	beq.n	801459e <_dtoa_r+0x916>
 80144da:	9802      	ldr	r0, [sp, #8]
 80144dc:	4621      	mov	r1, r4
 80144de:	f001 f8ab 	bl	8015638 <__mcmp>
 80144e2:	2800      	cmp	r0, #0
 80144e4:	da5b      	bge.n	801459e <_dtoa_r+0x916>
 80144e6:	2300      	movs	r3, #0
 80144e8:	9902      	ldr	r1, [sp, #8]
 80144ea:	220a      	movs	r2, #10
 80144ec:	4648      	mov	r0, r9
 80144ee:	f000 fe49 	bl	8015184 <__multadd>
 80144f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144f4:	9002      	str	r0, [sp, #8]
 80144f6:	f107 38ff 	add.w	r8, r7, #4294967295
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	f000 8177 	beq.w	80147ee <_dtoa_r+0xb66>
 8014500:	4629      	mov	r1, r5
 8014502:	2300      	movs	r3, #0
 8014504:	220a      	movs	r2, #10
 8014506:	4648      	mov	r0, r9
 8014508:	f000 fe3c 	bl	8015184 <__multadd>
 801450c:	f1bb 0f00 	cmp.w	fp, #0
 8014510:	4605      	mov	r5, r0
 8014512:	dc6f      	bgt.n	80145f4 <_dtoa_r+0x96c>
 8014514:	9b07      	ldr	r3, [sp, #28]
 8014516:	2b02      	cmp	r3, #2
 8014518:	dc49      	bgt.n	80145ae <_dtoa_r+0x926>
 801451a:	e06b      	b.n	80145f4 <_dtoa_r+0x96c>
 801451c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801451e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014522:	e73c      	b.n	801439e <_dtoa_r+0x716>
 8014524:	3fe00000 	.word	0x3fe00000
 8014528:	40240000 	.word	0x40240000
 801452c:	9b03      	ldr	r3, [sp, #12]
 801452e:	1e5c      	subs	r4, r3, #1
 8014530:	9b08      	ldr	r3, [sp, #32]
 8014532:	42a3      	cmp	r3, r4
 8014534:	db09      	blt.n	801454a <_dtoa_r+0x8c2>
 8014536:	1b1c      	subs	r4, r3, r4
 8014538:	9b03      	ldr	r3, [sp, #12]
 801453a:	2b00      	cmp	r3, #0
 801453c:	f6bf af30 	bge.w	80143a0 <_dtoa_r+0x718>
 8014540:	9b00      	ldr	r3, [sp, #0]
 8014542:	9a03      	ldr	r2, [sp, #12]
 8014544:	1a9e      	subs	r6, r3, r2
 8014546:	2300      	movs	r3, #0
 8014548:	e72b      	b.n	80143a2 <_dtoa_r+0x71a>
 801454a:	9b08      	ldr	r3, [sp, #32]
 801454c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801454e:	9408      	str	r4, [sp, #32]
 8014550:	1ae3      	subs	r3, r4, r3
 8014552:	441a      	add	r2, r3
 8014554:	9e00      	ldr	r6, [sp, #0]
 8014556:	9b03      	ldr	r3, [sp, #12]
 8014558:	920d      	str	r2, [sp, #52]	@ 0x34
 801455a:	2400      	movs	r4, #0
 801455c:	e721      	b.n	80143a2 <_dtoa_r+0x71a>
 801455e:	9c08      	ldr	r4, [sp, #32]
 8014560:	9e00      	ldr	r6, [sp, #0]
 8014562:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8014564:	e728      	b.n	80143b8 <_dtoa_r+0x730>
 8014566:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801456a:	e751      	b.n	8014410 <_dtoa_r+0x788>
 801456c:	9a08      	ldr	r2, [sp, #32]
 801456e:	9902      	ldr	r1, [sp, #8]
 8014570:	e750      	b.n	8014414 <_dtoa_r+0x78c>
 8014572:	f8cd 8008 	str.w	r8, [sp, #8]
 8014576:	e751      	b.n	801441c <_dtoa_r+0x794>
 8014578:	2300      	movs	r3, #0
 801457a:	e779      	b.n	8014470 <_dtoa_r+0x7e8>
 801457c:	9b04      	ldr	r3, [sp, #16]
 801457e:	e777      	b.n	8014470 <_dtoa_r+0x7e8>
 8014580:	2300      	movs	r3, #0
 8014582:	9308      	str	r3, [sp, #32]
 8014584:	e779      	b.n	801447a <_dtoa_r+0x7f2>
 8014586:	d093      	beq.n	80144b0 <_dtoa_r+0x828>
 8014588:	9a00      	ldr	r2, [sp, #0]
 801458a:	331c      	adds	r3, #28
 801458c:	441a      	add	r2, r3
 801458e:	9200      	str	r2, [sp, #0]
 8014590:	9a06      	ldr	r2, [sp, #24]
 8014592:	441a      	add	r2, r3
 8014594:	441e      	add	r6, r3
 8014596:	9206      	str	r2, [sp, #24]
 8014598:	e78a      	b.n	80144b0 <_dtoa_r+0x828>
 801459a:	4603      	mov	r3, r0
 801459c:	e7f4      	b.n	8014588 <_dtoa_r+0x900>
 801459e:	9b03      	ldr	r3, [sp, #12]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	46b8      	mov	r8, r7
 80145a4:	dc20      	bgt.n	80145e8 <_dtoa_r+0x960>
 80145a6:	469b      	mov	fp, r3
 80145a8:	9b07      	ldr	r3, [sp, #28]
 80145aa:	2b02      	cmp	r3, #2
 80145ac:	dd1e      	ble.n	80145ec <_dtoa_r+0x964>
 80145ae:	f1bb 0f00 	cmp.w	fp, #0
 80145b2:	f47f adb1 	bne.w	8014118 <_dtoa_r+0x490>
 80145b6:	4621      	mov	r1, r4
 80145b8:	465b      	mov	r3, fp
 80145ba:	2205      	movs	r2, #5
 80145bc:	4648      	mov	r0, r9
 80145be:	f000 fde1 	bl	8015184 <__multadd>
 80145c2:	4601      	mov	r1, r0
 80145c4:	4604      	mov	r4, r0
 80145c6:	9802      	ldr	r0, [sp, #8]
 80145c8:	f001 f836 	bl	8015638 <__mcmp>
 80145cc:	2800      	cmp	r0, #0
 80145ce:	f77f ada3 	ble.w	8014118 <_dtoa_r+0x490>
 80145d2:	4656      	mov	r6, sl
 80145d4:	2331      	movs	r3, #49	@ 0x31
 80145d6:	f806 3b01 	strb.w	r3, [r6], #1
 80145da:	f108 0801 	add.w	r8, r8, #1
 80145de:	e59f      	b.n	8014120 <_dtoa_r+0x498>
 80145e0:	9c03      	ldr	r4, [sp, #12]
 80145e2:	46b8      	mov	r8, r7
 80145e4:	4625      	mov	r5, r4
 80145e6:	e7f4      	b.n	80145d2 <_dtoa_r+0x94a>
 80145e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80145ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	f000 8101 	beq.w	80147f6 <_dtoa_r+0xb6e>
 80145f4:	2e00      	cmp	r6, #0
 80145f6:	dd05      	ble.n	8014604 <_dtoa_r+0x97c>
 80145f8:	4629      	mov	r1, r5
 80145fa:	4632      	mov	r2, r6
 80145fc:	4648      	mov	r0, r9
 80145fe:	f000 ffaf 	bl	8015560 <__lshift>
 8014602:	4605      	mov	r5, r0
 8014604:	9b08      	ldr	r3, [sp, #32]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d05c      	beq.n	80146c4 <_dtoa_r+0xa3c>
 801460a:	6869      	ldr	r1, [r5, #4]
 801460c:	4648      	mov	r0, r9
 801460e:	f000 fd57 	bl	80150c0 <_Balloc>
 8014612:	4606      	mov	r6, r0
 8014614:	b928      	cbnz	r0, 8014622 <_dtoa_r+0x99a>
 8014616:	4b82      	ldr	r3, [pc, #520]	@ (8014820 <_dtoa_r+0xb98>)
 8014618:	4602      	mov	r2, r0
 801461a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801461e:	f7ff bb4a 	b.w	8013cb6 <_dtoa_r+0x2e>
 8014622:	692a      	ldr	r2, [r5, #16]
 8014624:	3202      	adds	r2, #2
 8014626:	0092      	lsls	r2, r2, #2
 8014628:	f105 010c 	add.w	r1, r5, #12
 801462c:	300c      	adds	r0, #12
 801462e:	f7ff fa66 	bl	8013afe <memcpy>
 8014632:	2201      	movs	r2, #1
 8014634:	4631      	mov	r1, r6
 8014636:	4648      	mov	r0, r9
 8014638:	f000 ff92 	bl	8015560 <__lshift>
 801463c:	f10a 0301 	add.w	r3, sl, #1
 8014640:	9300      	str	r3, [sp, #0]
 8014642:	eb0a 030b 	add.w	r3, sl, fp
 8014646:	9308      	str	r3, [sp, #32]
 8014648:	9b04      	ldr	r3, [sp, #16]
 801464a:	f003 0301 	and.w	r3, r3, #1
 801464e:	462f      	mov	r7, r5
 8014650:	9306      	str	r3, [sp, #24]
 8014652:	4605      	mov	r5, r0
 8014654:	9b00      	ldr	r3, [sp, #0]
 8014656:	9802      	ldr	r0, [sp, #8]
 8014658:	4621      	mov	r1, r4
 801465a:	f103 3bff 	add.w	fp, r3, #4294967295
 801465e:	f7ff fa8b 	bl	8013b78 <quorem>
 8014662:	4603      	mov	r3, r0
 8014664:	3330      	adds	r3, #48	@ 0x30
 8014666:	9003      	str	r0, [sp, #12]
 8014668:	4639      	mov	r1, r7
 801466a:	9802      	ldr	r0, [sp, #8]
 801466c:	9309      	str	r3, [sp, #36]	@ 0x24
 801466e:	f000 ffe3 	bl	8015638 <__mcmp>
 8014672:	462a      	mov	r2, r5
 8014674:	9004      	str	r0, [sp, #16]
 8014676:	4621      	mov	r1, r4
 8014678:	4648      	mov	r0, r9
 801467a:	f000 fff9 	bl	8015670 <__mdiff>
 801467e:	68c2      	ldr	r2, [r0, #12]
 8014680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014682:	4606      	mov	r6, r0
 8014684:	bb02      	cbnz	r2, 80146c8 <_dtoa_r+0xa40>
 8014686:	4601      	mov	r1, r0
 8014688:	9802      	ldr	r0, [sp, #8]
 801468a:	f000 ffd5 	bl	8015638 <__mcmp>
 801468e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014690:	4602      	mov	r2, r0
 8014692:	4631      	mov	r1, r6
 8014694:	4648      	mov	r0, r9
 8014696:	920c      	str	r2, [sp, #48]	@ 0x30
 8014698:	9309      	str	r3, [sp, #36]	@ 0x24
 801469a:	f000 fd51 	bl	8015140 <_Bfree>
 801469e:	9b07      	ldr	r3, [sp, #28]
 80146a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80146a2:	9e00      	ldr	r6, [sp, #0]
 80146a4:	ea42 0103 	orr.w	r1, r2, r3
 80146a8:	9b06      	ldr	r3, [sp, #24]
 80146aa:	4319      	orrs	r1, r3
 80146ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146ae:	d10d      	bne.n	80146cc <_dtoa_r+0xa44>
 80146b0:	2b39      	cmp	r3, #57	@ 0x39
 80146b2:	d027      	beq.n	8014704 <_dtoa_r+0xa7c>
 80146b4:	9a04      	ldr	r2, [sp, #16]
 80146b6:	2a00      	cmp	r2, #0
 80146b8:	dd01      	ble.n	80146be <_dtoa_r+0xa36>
 80146ba:	9b03      	ldr	r3, [sp, #12]
 80146bc:	3331      	adds	r3, #49	@ 0x31
 80146be:	f88b 3000 	strb.w	r3, [fp]
 80146c2:	e52e      	b.n	8014122 <_dtoa_r+0x49a>
 80146c4:	4628      	mov	r0, r5
 80146c6:	e7b9      	b.n	801463c <_dtoa_r+0x9b4>
 80146c8:	2201      	movs	r2, #1
 80146ca:	e7e2      	b.n	8014692 <_dtoa_r+0xa0a>
 80146cc:	9904      	ldr	r1, [sp, #16]
 80146ce:	2900      	cmp	r1, #0
 80146d0:	db04      	blt.n	80146dc <_dtoa_r+0xa54>
 80146d2:	9807      	ldr	r0, [sp, #28]
 80146d4:	4301      	orrs	r1, r0
 80146d6:	9806      	ldr	r0, [sp, #24]
 80146d8:	4301      	orrs	r1, r0
 80146da:	d120      	bne.n	801471e <_dtoa_r+0xa96>
 80146dc:	2a00      	cmp	r2, #0
 80146de:	ddee      	ble.n	80146be <_dtoa_r+0xa36>
 80146e0:	9902      	ldr	r1, [sp, #8]
 80146e2:	9300      	str	r3, [sp, #0]
 80146e4:	2201      	movs	r2, #1
 80146e6:	4648      	mov	r0, r9
 80146e8:	f000 ff3a 	bl	8015560 <__lshift>
 80146ec:	4621      	mov	r1, r4
 80146ee:	9002      	str	r0, [sp, #8]
 80146f0:	f000 ffa2 	bl	8015638 <__mcmp>
 80146f4:	2800      	cmp	r0, #0
 80146f6:	9b00      	ldr	r3, [sp, #0]
 80146f8:	dc02      	bgt.n	8014700 <_dtoa_r+0xa78>
 80146fa:	d1e0      	bne.n	80146be <_dtoa_r+0xa36>
 80146fc:	07da      	lsls	r2, r3, #31
 80146fe:	d5de      	bpl.n	80146be <_dtoa_r+0xa36>
 8014700:	2b39      	cmp	r3, #57	@ 0x39
 8014702:	d1da      	bne.n	80146ba <_dtoa_r+0xa32>
 8014704:	2339      	movs	r3, #57	@ 0x39
 8014706:	f88b 3000 	strb.w	r3, [fp]
 801470a:	4633      	mov	r3, r6
 801470c:	461e      	mov	r6, r3
 801470e:	3b01      	subs	r3, #1
 8014710:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014714:	2a39      	cmp	r2, #57	@ 0x39
 8014716:	d04e      	beq.n	80147b6 <_dtoa_r+0xb2e>
 8014718:	3201      	adds	r2, #1
 801471a:	701a      	strb	r2, [r3, #0]
 801471c:	e501      	b.n	8014122 <_dtoa_r+0x49a>
 801471e:	2a00      	cmp	r2, #0
 8014720:	dd03      	ble.n	801472a <_dtoa_r+0xaa2>
 8014722:	2b39      	cmp	r3, #57	@ 0x39
 8014724:	d0ee      	beq.n	8014704 <_dtoa_r+0xa7c>
 8014726:	3301      	adds	r3, #1
 8014728:	e7c9      	b.n	80146be <_dtoa_r+0xa36>
 801472a:	9a00      	ldr	r2, [sp, #0]
 801472c:	9908      	ldr	r1, [sp, #32]
 801472e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014732:	428a      	cmp	r2, r1
 8014734:	d028      	beq.n	8014788 <_dtoa_r+0xb00>
 8014736:	9902      	ldr	r1, [sp, #8]
 8014738:	2300      	movs	r3, #0
 801473a:	220a      	movs	r2, #10
 801473c:	4648      	mov	r0, r9
 801473e:	f000 fd21 	bl	8015184 <__multadd>
 8014742:	42af      	cmp	r7, r5
 8014744:	9002      	str	r0, [sp, #8]
 8014746:	f04f 0300 	mov.w	r3, #0
 801474a:	f04f 020a 	mov.w	r2, #10
 801474e:	4639      	mov	r1, r7
 8014750:	4648      	mov	r0, r9
 8014752:	d107      	bne.n	8014764 <_dtoa_r+0xadc>
 8014754:	f000 fd16 	bl	8015184 <__multadd>
 8014758:	4607      	mov	r7, r0
 801475a:	4605      	mov	r5, r0
 801475c:	9b00      	ldr	r3, [sp, #0]
 801475e:	3301      	adds	r3, #1
 8014760:	9300      	str	r3, [sp, #0]
 8014762:	e777      	b.n	8014654 <_dtoa_r+0x9cc>
 8014764:	f000 fd0e 	bl	8015184 <__multadd>
 8014768:	4629      	mov	r1, r5
 801476a:	4607      	mov	r7, r0
 801476c:	2300      	movs	r3, #0
 801476e:	220a      	movs	r2, #10
 8014770:	4648      	mov	r0, r9
 8014772:	f000 fd07 	bl	8015184 <__multadd>
 8014776:	4605      	mov	r5, r0
 8014778:	e7f0      	b.n	801475c <_dtoa_r+0xad4>
 801477a:	f1bb 0f00 	cmp.w	fp, #0
 801477e:	bfcc      	ite	gt
 8014780:	465e      	movgt	r6, fp
 8014782:	2601      	movle	r6, #1
 8014784:	4456      	add	r6, sl
 8014786:	2700      	movs	r7, #0
 8014788:	9902      	ldr	r1, [sp, #8]
 801478a:	9300      	str	r3, [sp, #0]
 801478c:	2201      	movs	r2, #1
 801478e:	4648      	mov	r0, r9
 8014790:	f000 fee6 	bl	8015560 <__lshift>
 8014794:	4621      	mov	r1, r4
 8014796:	9002      	str	r0, [sp, #8]
 8014798:	f000 ff4e 	bl	8015638 <__mcmp>
 801479c:	2800      	cmp	r0, #0
 801479e:	dcb4      	bgt.n	801470a <_dtoa_r+0xa82>
 80147a0:	d102      	bne.n	80147a8 <_dtoa_r+0xb20>
 80147a2:	9b00      	ldr	r3, [sp, #0]
 80147a4:	07db      	lsls	r3, r3, #31
 80147a6:	d4b0      	bmi.n	801470a <_dtoa_r+0xa82>
 80147a8:	4633      	mov	r3, r6
 80147aa:	461e      	mov	r6, r3
 80147ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80147b0:	2a30      	cmp	r2, #48	@ 0x30
 80147b2:	d0fa      	beq.n	80147aa <_dtoa_r+0xb22>
 80147b4:	e4b5      	b.n	8014122 <_dtoa_r+0x49a>
 80147b6:	459a      	cmp	sl, r3
 80147b8:	d1a8      	bne.n	801470c <_dtoa_r+0xa84>
 80147ba:	2331      	movs	r3, #49	@ 0x31
 80147bc:	f108 0801 	add.w	r8, r8, #1
 80147c0:	f88a 3000 	strb.w	r3, [sl]
 80147c4:	e4ad      	b.n	8014122 <_dtoa_r+0x49a>
 80147c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80147c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8014824 <_dtoa_r+0xb9c>
 80147cc:	b11b      	cbz	r3, 80147d6 <_dtoa_r+0xb4e>
 80147ce:	f10a 0308 	add.w	r3, sl, #8
 80147d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80147d4:	6013      	str	r3, [r2, #0]
 80147d6:	4650      	mov	r0, sl
 80147d8:	b017      	add	sp, #92	@ 0x5c
 80147da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147de:	9b07      	ldr	r3, [sp, #28]
 80147e0:	2b01      	cmp	r3, #1
 80147e2:	f77f ae2e 	ble.w	8014442 <_dtoa_r+0x7ba>
 80147e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80147e8:	9308      	str	r3, [sp, #32]
 80147ea:	2001      	movs	r0, #1
 80147ec:	e64d      	b.n	801448a <_dtoa_r+0x802>
 80147ee:	f1bb 0f00 	cmp.w	fp, #0
 80147f2:	f77f aed9 	ble.w	80145a8 <_dtoa_r+0x920>
 80147f6:	4656      	mov	r6, sl
 80147f8:	9802      	ldr	r0, [sp, #8]
 80147fa:	4621      	mov	r1, r4
 80147fc:	f7ff f9bc 	bl	8013b78 <quorem>
 8014800:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8014804:	f806 3b01 	strb.w	r3, [r6], #1
 8014808:	eba6 020a 	sub.w	r2, r6, sl
 801480c:	4593      	cmp	fp, r2
 801480e:	ddb4      	ble.n	801477a <_dtoa_r+0xaf2>
 8014810:	9902      	ldr	r1, [sp, #8]
 8014812:	2300      	movs	r3, #0
 8014814:	220a      	movs	r2, #10
 8014816:	4648      	mov	r0, r9
 8014818:	f000 fcb4 	bl	8015184 <__multadd>
 801481c:	9002      	str	r0, [sp, #8]
 801481e:	e7eb      	b.n	80147f8 <_dtoa_r+0xb70>
 8014820:	080168d8 	.word	0x080168d8
 8014824:	08016873 	.word	0x08016873

08014828 <_free_r>:
 8014828:	b538      	push	{r3, r4, r5, lr}
 801482a:	4605      	mov	r5, r0
 801482c:	2900      	cmp	r1, #0
 801482e:	d041      	beq.n	80148b4 <_free_r+0x8c>
 8014830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014834:	1f0c      	subs	r4, r1, #4
 8014836:	2b00      	cmp	r3, #0
 8014838:	bfb8      	it	lt
 801483a:	18e4      	addlt	r4, r4, r3
 801483c:	f000 fc34 	bl	80150a8 <__malloc_lock>
 8014840:	4a1d      	ldr	r2, [pc, #116]	@ (80148b8 <_free_r+0x90>)
 8014842:	6813      	ldr	r3, [r2, #0]
 8014844:	b933      	cbnz	r3, 8014854 <_free_r+0x2c>
 8014846:	6063      	str	r3, [r4, #4]
 8014848:	6014      	str	r4, [r2, #0]
 801484a:	4628      	mov	r0, r5
 801484c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014850:	f000 bc30 	b.w	80150b4 <__malloc_unlock>
 8014854:	42a3      	cmp	r3, r4
 8014856:	d908      	bls.n	801486a <_free_r+0x42>
 8014858:	6820      	ldr	r0, [r4, #0]
 801485a:	1821      	adds	r1, r4, r0
 801485c:	428b      	cmp	r3, r1
 801485e:	bf01      	itttt	eq
 8014860:	6819      	ldreq	r1, [r3, #0]
 8014862:	685b      	ldreq	r3, [r3, #4]
 8014864:	1809      	addeq	r1, r1, r0
 8014866:	6021      	streq	r1, [r4, #0]
 8014868:	e7ed      	b.n	8014846 <_free_r+0x1e>
 801486a:	461a      	mov	r2, r3
 801486c:	685b      	ldr	r3, [r3, #4]
 801486e:	b10b      	cbz	r3, 8014874 <_free_r+0x4c>
 8014870:	42a3      	cmp	r3, r4
 8014872:	d9fa      	bls.n	801486a <_free_r+0x42>
 8014874:	6811      	ldr	r1, [r2, #0]
 8014876:	1850      	adds	r0, r2, r1
 8014878:	42a0      	cmp	r0, r4
 801487a:	d10b      	bne.n	8014894 <_free_r+0x6c>
 801487c:	6820      	ldr	r0, [r4, #0]
 801487e:	4401      	add	r1, r0
 8014880:	1850      	adds	r0, r2, r1
 8014882:	4283      	cmp	r3, r0
 8014884:	6011      	str	r1, [r2, #0]
 8014886:	d1e0      	bne.n	801484a <_free_r+0x22>
 8014888:	6818      	ldr	r0, [r3, #0]
 801488a:	685b      	ldr	r3, [r3, #4]
 801488c:	6053      	str	r3, [r2, #4]
 801488e:	4408      	add	r0, r1
 8014890:	6010      	str	r0, [r2, #0]
 8014892:	e7da      	b.n	801484a <_free_r+0x22>
 8014894:	d902      	bls.n	801489c <_free_r+0x74>
 8014896:	230c      	movs	r3, #12
 8014898:	602b      	str	r3, [r5, #0]
 801489a:	e7d6      	b.n	801484a <_free_r+0x22>
 801489c:	6820      	ldr	r0, [r4, #0]
 801489e:	1821      	adds	r1, r4, r0
 80148a0:	428b      	cmp	r3, r1
 80148a2:	bf04      	itt	eq
 80148a4:	6819      	ldreq	r1, [r3, #0]
 80148a6:	685b      	ldreq	r3, [r3, #4]
 80148a8:	6063      	str	r3, [r4, #4]
 80148aa:	bf04      	itt	eq
 80148ac:	1809      	addeq	r1, r1, r0
 80148ae:	6021      	streq	r1, [r4, #0]
 80148b0:	6054      	str	r4, [r2, #4]
 80148b2:	e7ca      	b.n	801484a <_free_r+0x22>
 80148b4:	bd38      	pop	{r3, r4, r5, pc}
 80148b6:	bf00      	nop
 80148b8:	2000b4e8 	.word	0x2000b4e8

080148bc <rshift>:
 80148bc:	6903      	ldr	r3, [r0, #16]
 80148be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80148c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80148ca:	f100 0414 	add.w	r4, r0, #20
 80148ce:	dd45      	ble.n	801495c <rshift+0xa0>
 80148d0:	f011 011f 	ands.w	r1, r1, #31
 80148d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80148d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80148dc:	d10c      	bne.n	80148f8 <rshift+0x3c>
 80148de:	f100 0710 	add.w	r7, r0, #16
 80148e2:	4629      	mov	r1, r5
 80148e4:	42b1      	cmp	r1, r6
 80148e6:	d334      	bcc.n	8014952 <rshift+0x96>
 80148e8:	1a9b      	subs	r3, r3, r2
 80148ea:	009b      	lsls	r3, r3, #2
 80148ec:	1eea      	subs	r2, r5, #3
 80148ee:	4296      	cmp	r6, r2
 80148f0:	bf38      	it	cc
 80148f2:	2300      	movcc	r3, #0
 80148f4:	4423      	add	r3, r4
 80148f6:	e015      	b.n	8014924 <rshift+0x68>
 80148f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80148fc:	f1c1 0820 	rsb	r8, r1, #32
 8014900:	40cf      	lsrs	r7, r1
 8014902:	f105 0e04 	add.w	lr, r5, #4
 8014906:	46a1      	mov	r9, r4
 8014908:	4576      	cmp	r6, lr
 801490a:	46f4      	mov	ip, lr
 801490c:	d815      	bhi.n	801493a <rshift+0x7e>
 801490e:	1a9a      	subs	r2, r3, r2
 8014910:	0092      	lsls	r2, r2, #2
 8014912:	3a04      	subs	r2, #4
 8014914:	3501      	adds	r5, #1
 8014916:	42ae      	cmp	r6, r5
 8014918:	bf38      	it	cc
 801491a:	2200      	movcc	r2, #0
 801491c:	18a3      	adds	r3, r4, r2
 801491e:	50a7      	str	r7, [r4, r2]
 8014920:	b107      	cbz	r7, 8014924 <rshift+0x68>
 8014922:	3304      	adds	r3, #4
 8014924:	1b1a      	subs	r2, r3, r4
 8014926:	42a3      	cmp	r3, r4
 8014928:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801492c:	bf08      	it	eq
 801492e:	2300      	moveq	r3, #0
 8014930:	6102      	str	r2, [r0, #16]
 8014932:	bf08      	it	eq
 8014934:	6143      	streq	r3, [r0, #20]
 8014936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801493a:	f8dc c000 	ldr.w	ip, [ip]
 801493e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014942:	ea4c 0707 	orr.w	r7, ip, r7
 8014946:	f849 7b04 	str.w	r7, [r9], #4
 801494a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801494e:	40cf      	lsrs	r7, r1
 8014950:	e7da      	b.n	8014908 <rshift+0x4c>
 8014952:	f851 cb04 	ldr.w	ip, [r1], #4
 8014956:	f847 cf04 	str.w	ip, [r7, #4]!
 801495a:	e7c3      	b.n	80148e4 <rshift+0x28>
 801495c:	4623      	mov	r3, r4
 801495e:	e7e1      	b.n	8014924 <rshift+0x68>

08014960 <__hexdig_fun>:
 8014960:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014964:	2b09      	cmp	r3, #9
 8014966:	d802      	bhi.n	801496e <__hexdig_fun+0xe>
 8014968:	3820      	subs	r0, #32
 801496a:	b2c0      	uxtb	r0, r0
 801496c:	4770      	bx	lr
 801496e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014972:	2b05      	cmp	r3, #5
 8014974:	d801      	bhi.n	801497a <__hexdig_fun+0x1a>
 8014976:	3847      	subs	r0, #71	@ 0x47
 8014978:	e7f7      	b.n	801496a <__hexdig_fun+0xa>
 801497a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801497e:	2b05      	cmp	r3, #5
 8014980:	d801      	bhi.n	8014986 <__hexdig_fun+0x26>
 8014982:	3827      	subs	r0, #39	@ 0x27
 8014984:	e7f1      	b.n	801496a <__hexdig_fun+0xa>
 8014986:	2000      	movs	r0, #0
 8014988:	4770      	bx	lr
	...

0801498c <__gethex>:
 801498c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014990:	b085      	sub	sp, #20
 8014992:	468a      	mov	sl, r1
 8014994:	9302      	str	r3, [sp, #8]
 8014996:	680b      	ldr	r3, [r1, #0]
 8014998:	9001      	str	r0, [sp, #4]
 801499a:	4690      	mov	r8, r2
 801499c:	1c9c      	adds	r4, r3, #2
 801499e:	46a1      	mov	r9, r4
 80149a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80149a4:	2830      	cmp	r0, #48	@ 0x30
 80149a6:	d0fa      	beq.n	801499e <__gethex+0x12>
 80149a8:	eba9 0303 	sub.w	r3, r9, r3
 80149ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80149b0:	f7ff ffd6 	bl	8014960 <__hexdig_fun>
 80149b4:	4605      	mov	r5, r0
 80149b6:	2800      	cmp	r0, #0
 80149b8:	d168      	bne.n	8014a8c <__gethex+0x100>
 80149ba:	49a0      	ldr	r1, [pc, #640]	@ (8014c3c <__gethex+0x2b0>)
 80149bc:	2201      	movs	r2, #1
 80149be:	4648      	mov	r0, r9
 80149c0:	f7fe ff59 	bl	8013876 <strncmp>
 80149c4:	4607      	mov	r7, r0
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d167      	bne.n	8014a9a <__gethex+0x10e>
 80149ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80149ce:	4626      	mov	r6, r4
 80149d0:	f7ff ffc6 	bl	8014960 <__hexdig_fun>
 80149d4:	2800      	cmp	r0, #0
 80149d6:	d062      	beq.n	8014a9e <__gethex+0x112>
 80149d8:	4623      	mov	r3, r4
 80149da:	7818      	ldrb	r0, [r3, #0]
 80149dc:	2830      	cmp	r0, #48	@ 0x30
 80149de:	4699      	mov	r9, r3
 80149e0:	f103 0301 	add.w	r3, r3, #1
 80149e4:	d0f9      	beq.n	80149da <__gethex+0x4e>
 80149e6:	f7ff ffbb 	bl	8014960 <__hexdig_fun>
 80149ea:	fab0 f580 	clz	r5, r0
 80149ee:	096d      	lsrs	r5, r5, #5
 80149f0:	f04f 0b01 	mov.w	fp, #1
 80149f4:	464a      	mov	r2, r9
 80149f6:	4616      	mov	r6, r2
 80149f8:	3201      	adds	r2, #1
 80149fa:	7830      	ldrb	r0, [r6, #0]
 80149fc:	f7ff ffb0 	bl	8014960 <__hexdig_fun>
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d1f8      	bne.n	80149f6 <__gethex+0x6a>
 8014a04:	498d      	ldr	r1, [pc, #564]	@ (8014c3c <__gethex+0x2b0>)
 8014a06:	2201      	movs	r2, #1
 8014a08:	4630      	mov	r0, r6
 8014a0a:	f7fe ff34 	bl	8013876 <strncmp>
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	d13f      	bne.n	8014a92 <__gethex+0x106>
 8014a12:	b944      	cbnz	r4, 8014a26 <__gethex+0x9a>
 8014a14:	1c74      	adds	r4, r6, #1
 8014a16:	4622      	mov	r2, r4
 8014a18:	4616      	mov	r6, r2
 8014a1a:	3201      	adds	r2, #1
 8014a1c:	7830      	ldrb	r0, [r6, #0]
 8014a1e:	f7ff ff9f 	bl	8014960 <__hexdig_fun>
 8014a22:	2800      	cmp	r0, #0
 8014a24:	d1f8      	bne.n	8014a18 <__gethex+0x8c>
 8014a26:	1ba4      	subs	r4, r4, r6
 8014a28:	00a7      	lsls	r7, r4, #2
 8014a2a:	7833      	ldrb	r3, [r6, #0]
 8014a2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014a30:	2b50      	cmp	r3, #80	@ 0x50
 8014a32:	d13e      	bne.n	8014ab2 <__gethex+0x126>
 8014a34:	7873      	ldrb	r3, [r6, #1]
 8014a36:	2b2b      	cmp	r3, #43	@ 0x2b
 8014a38:	d033      	beq.n	8014aa2 <__gethex+0x116>
 8014a3a:	2b2d      	cmp	r3, #45	@ 0x2d
 8014a3c:	d034      	beq.n	8014aa8 <__gethex+0x11c>
 8014a3e:	1c71      	adds	r1, r6, #1
 8014a40:	2400      	movs	r4, #0
 8014a42:	7808      	ldrb	r0, [r1, #0]
 8014a44:	f7ff ff8c 	bl	8014960 <__hexdig_fun>
 8014a48:	1e43      	subs	r3, r0, #1
 8014a4a:	b2db      	uxtb	r3, r3
 8014a4c:	2b18      	cmp	r3, #24
 8014a4e:	d830      	bhi.n	8014ab2 <__gethex+0x126>
 8014a50:	f1a0 0210 	sub.w	r2, r0, #16
 8014a54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014a58:	f7ff ff82 	bl	8014960 <__hexdig_fun>
 8014a5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014a60:	fa5f fc8c 	uxtb.w	ip, ip
 8014a64:	f1bc 0f18 	cmp.w	ip, #24
 8014a68:	f04f 030a 	mov.w	r3, #10
 8014a6c:	d91e      	bls.n	8014aac <__gethex+0x120>
 8014a6e:	b104      	cbz	r4, 8014a72 <__gethex+0xe6>
 8014a70:	4252      	negs	r2, r2
 8014a72:	4417      	add	r7, r2
 8014a74:	f8ca 1000 	str.w	r1, [sl]
 8014a78:	b1ed      	cbz	r5, 8014ab6 <__gethex+0x12a>
 8014a7a:	f1bb 0f00 	cmp.w	fp, #0
 8014a7e:	bf0c      	ite	eq
 8014a80:	2506      	moveq	r5, #6
 8014a82:	2500      	movne	r5, #0
 8014a84:	4628      	mov	r0, r5
 8014a86:	b005      	add	sp, #20
 8014a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a8c:	2500      	movs	r5, #0
 8014a8e:	462c      	mov	r4, r5
 8014a90:	e7b0      	b.n	80149f4 <__gethex+0x68>
 8014a92:	2c00      	cmp	r4, #0
 8014a94:	d1c7      	bne.n	8014a26 <__gethex+0x9a>
 8014a96:	4627      	mov	r7, r4
 8014a98:	e7c7      	b.n	8014a2a <__gethex+0x9e>
 8014a9a:	464e      	mov	r6, r9
 8014a9c:	462f      	mov	r7, r5
 8014a9e:	2501      	movs	r5, #1
 8014aa0:	e7c3      	b.n	8014a2a <__gethex+0x9e>
 8014aa2:	2400      	movs	r4, #0
 8014aa4:	1cb1      	adds	r1, r6, #2
 8014aa6:	e7cc      	b.n	8014a42 <__gethex+0xb6>
 8014aa8:	2401      	movs	r4, #1
 8014aaa:	e7fb      	b.n	8014aa4 <__gethex+0x118>
 8014aac:	fb03 0002 	mla	r0, r3, r2, r0
 8014ab0:	e7ce      	b.n	8014a50 <__gethex+0xc4>
 8014ab2:	4631      	mov	r1, r6
 8014ab4:	e7de      	b.n	8014a74 <__gethex+0xe8>
 8014ab6:	eba6 0309 	sub.w	r3, r6, r9
 8014aba:	3b01      	subs	r3, #1
 8014abc:	4629      	mov	r1, r5
 8014abe:	2b07      	cmp	r3, #7
 8014ac0:	dc0a      	bgt.n	8014ad8 <__gethex+0x14c>
 8014ac2:	9801      	ldr	r0, [sp, #4]
 8014ac4:	f000 fafc 	bl	80150c0 <_Balloc>
 8014ac8:	4604      	mov	r4, r0
 8014aca:	b940      	cbnz	r0, 8014ade <__gethex+0x152>
 8014acc:	4b5c      	ldr	r3, [pc, #368]	@ (8014c40 <__gethex+0x2b4>)
 8014ace:	4602      	mov	r2, r0
 8014ad0:	21e4      	movs	r1, #228	@ 0xe4
 8014ad2:	485c      	ldr	r0, [pc, #368]	@ (8014c44 <__gethex+0x2b8>)
 8014ad4:	f7ff f832 	bl	8013b3c <__assert_func>
 8014ad8:	3101      	adds	r1, #1
 8014ada:	105b      	asrs	r3, r3, #1
 8014adc:	e7ef      	b.n	8014abe <__gethex+0x132>
 8014ade:	f100 0a14 	add.w	sl, r0, #20
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	4655      	mov	r5, sl
 8014ae6:	469b      	mov	fp, r3
 8014ae8:	45b1      	cmp	r9, r6
 8014aea:	d337      	bcc.n	8014b5c <__gethex+0x1d0>
 8014aec:	f845 bb04 	str.w	fp, [r5], #4
 8014af0:	eba5 050a 	sub.w	r5, r5, sl
 8014af4:	10ad      	asrs	r5, r5, #2
 8014af6:	6125      	str	r5, [r4, #16]
 8014af8:	4658      	mov	r0, fp
 8014afa:	f000 fbd3 	bl	80152a4 <__hi0bits>
 8014afe:	016d      	lsls	r5, r5, #5
 8014b00:	f8d8 6000 	ldr.w	r6, [r8]
 8014b04:	1a2d      	subs	r5, r5, r0
 8014b06:	42b5      	cmp	r5, r6
 8014b08:	dd54      	ble.n	8014bb4 <__gethex+0x228>
 8014b0a:	1bad      	subs	r5, r5, r6
 8014b0c:	4629      	mov	r1, r5
 8014b0e:	4620      	mov	r0, r4
 8014b10:	f000 ff5f 	bl	80159d2 <__any_on>
 8014b14:	4681      	mov	r9, r0
 8014b16:	b178      	cbz	r0, 8014b38 <__gethex+0x1ac>
 8014b18:	1e6b      	subs	r3, r5, #1
 8014b1a:	1159      	asrs	r1, r3, #5
 8014b1c:	f003 021f 	and.w	r2, r3, #31
 8014b20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014b24:	f04f 0901 	mov.w	r9, #1
 8014b28:	fa09 f202 	lsl.w	r2, r9, r2
 8014b2c:	420a      	tst	r2, r1
 8014b2e:	d003      	beq.n	8014b38 <__gethex+0x1ac>
 8014b30:	454b      	cmp	r3, r9
 8014b32:	dc36      	bgt.n	8014ba2 <__gethex+0x216>
 8014b34:	f04f 0902 	mov.w	r9, #2
 8014b38:	4629      	mov	r1, r5
 8014b3a:	4620      	mov	r0, r4
 8014b3c:	f7ff febe 	bl	80148bc <rshift>
 8014b40:	442f      	add	r7, r5
 8014b42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014b46:	42bb      	cmp	r3, r7
 8014b48:	da42      	bge.n	8014bd0 <__gethex+0x244>
 8014b4a:	9801      	ldr	r0, [sp, #4]
 8014b4c:	4621      	mov	r1, r4
 8014b4e:	f000 faf7 	bl	8015140 <_Bfree>
 8014b52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b54:	2300      	movs	r3, #0
 8014b56:	6013      	str	r3, [r2, #0]
 8014b58:	25a3      	movs	r5, #163	@ 0xa3
 8014b5a:	e793      	b.n	8014a84 <__gethex+0xf8>
 8014b5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014b60:	2a2e      	cmp	r2, #46	@ 0x2e
 8014b62:	d012      	beq.n	8014b8a <__gethex+0x1fe>
 8014b64:	2b20      	cmp	r3, #32
 8014b66:	d104      	bne.n	8014b72 <__gethex+0x1e6>
 8014b68:	f845 bb04 	str.w	fp, [r5], #4
 8014b6c:	f04f 0b00 	mov.w	fp, #0
 8014b70:	465b      	mov	r3, fp
 8014b72:	7830      	ldrb	r0, [r6, #0]
 8014b74:	9303      	str	r3, [sp, #12]
 8014b76:	f7ff fef3 	bl	8014960 <__hexdig_fun>
 8014b7a:	9b03      	ldr	r3, [sp, #12]
 8014b7c:	f000 000f 	and.w	r0, r0, #15
 8014b80:	4098      	lsls	r0, r3
 8014b82:	ea4b 0b00 	orr.w	fp, fp, r0
 8014b86:	3304      	adds	r3, #4
 8014b88:	e7ae      	b.n	8014ae8 <__gethex+0x15c>
 8014b8a:	45b1      	cmp	r9, r6
 8014b8c:	d8ea      	bhi.n	8014b64 <__gethex+0x1d8>
 8014b8e:	492b      	ldr	r1, [pc, #172]	@ (8014c3c <__gethex+0x2b0>)
 8014b90:	9303      	str	r3, [sp, #12]
 8014b92:	2201      	movs	r2, #1
 8014b94:	4630      	mov	r0, r6
 8014b96:	f7fe fe6e 	bl	8013876 <strncmp>
 8014b9a:	9b03      	ldr	r3, [sp, #12]
 8014b9c:	2800      	cmp	r0, #0
 8014b9e:	d1e1      	bne.n	8014b64 <__gethex+0x1d8>
 8014ba0:	e7a2      	b.n	8014ae8 <__gethex+0x15c>
 8014ba2:	1ea9      	subs	r1, r5, #2
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	f000 ff14 	bl	80159d2 <__any_on>
 8014baa:	2800      	cmp	r0, #0
 8014bac:	d0c2      	beq.n	8014b34 <__gethex+0x1a8>
 8014bae:	f04f 0903 	mov.w	r9, #3
 8014bb2:	e7c1      	b.n	8014b38 <__gethex+0x1ac>
 8014bb4:	da09      	bge.n	8014bca <__gethex+0x23e>
 8014bb6:	1b75      	subs	r5, r6, r5
 8014bb8:	4621      	mov	r1, r4
 8014bba:	9801      	ldr	r0, [sp, #4]
 8014bbc:	462a      	mov	r2, r5
 8014bbe:	f000 fccf 	bl	8015560 <__lshift>
 8014bc2:	1b7f      	subs	r7, r7, r5
 8014bc4:	4604      	mov	r4, r0
 8014bc6:	f100 0a14 	add.w	sl, r0, #20
 8014bca:	f04f 0900 	mov.w	r9, #0
 8014bce:	e7b8      	b.n	8014b42 <__gethex+0x1b6>
 8014bd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014bd4:	42bd      	cmp	r5, r7
 8014bd6:	dd6f      	ble.n	8014cb8 <__gethex+0x32c>
 8014bd8:	1bed      	subs	r5, r5, r7
 8014bda:	42ae      	cmp	r6, r5
 8014bdc:	dc34      	bgt.n	8014c48 <__gethex+0x2bc>
 8014bde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014be2:	2b02      	cmp	r3, #2
 8014be4:	d022      	beq.n	8014c2c <__gethex+0x2a0>
 8014be6:	2b03      	cmp	r3, #3
 8014be8:	d024      	beq.n	8014c34 <__gethex+0x2a8>
 8014bea:	2b01      	cmp	r3, #1
 8014bec:	d115      	bne.n	8014c1a <__gethex+0x28e>
 8014bee:	42ae      	cmp	r6, r5
 8014bf0:	d113      	bne.n	8014c1a <__gethex+0x28e>
 8014bf2:	2e01      	cmp	r6, #1
 8014bf4:	d10b      	bne.n	8014c0e <__gethex+0x282>
 8014bf6:	9a02      	ldr	r2, [sp, #8]
 8014bf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014bfc:	6013      	str	r3, [r2, #0]
 8014bfe:	2301      	movs	r3, #1
 8014c00:	6123      	str	r3, [r4, #16]
 8014c02:	f8ca 3000 	str.w	r3, [sl]
 8014c06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c08:	2562      	movs	r5, #98	@ 0x62
 8014c0a:	601c      	str	r4, [r3, #0]
 8014c0c:	e73a      	b.n	8014a84 <__gethex+0xf8>
 8014c0e:	1e71      	subs	r1, r6, #1
 8014c10:	4620      	mov	r0, r4
 8014c12:	f000 fede 	bl	80159d2 <__any_on>
 8014c16:	2800      	cmp	r0, #0
 8014c18:	d1ed      	bne.n	8014bf6 <__gethex+0x26a>
 8014c1a:	9801      	ldr	r0, [sp, #4]
 8014c1c:	4621      	mov	r1, r4
 8014c1e:	f000 fa8f 	bl	8015140 <_Bfree>
 8014c22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014c24:	2300      	movs	r3, #0
 8014c26:	6013      	str	r3, [r2, #0]
 8014c28:	2550      	movs	r5, #80	@ 0x50
 8014c2a:	e72b      	b.n	8014a84 <__gethex+0xf8>
 8014c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d1f3      	bne.n	8014c1a <__gethex+0x28e>
 8014c32:	e7e0      	b.n	8014bf6 <__gethex+0x26a>
 8014c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d1dd      	bne.n	8014bf6 <__gethex+0x26a>
 8014c3a:	e7ee      	b.n	8014c1a <__gethex+0x28e>
 8014c3c:	08016788 	.word	0x08016788
 8014c40:	080168d8 	.word	0x080168d8
 8014c44:	080168e9 	.word	0x080168e9
 8014c48:	1e6f      	subs	r7, r5, #1
 8014c4a:	f1b9 0f00 	cmp.w	r9, #0
 8014c4e:	d130      	bne.n	8014cb2 <__gethex+0x326>
 8014c50:	b127      	cbz	r7, 8014c5c <__gethex+0x2d0>
 8014c52:	4639      	mov	r1, r7
 8014c54:	4620      	mov	r0, r4
 8014c56:	f000 febc 	bl	80159d2 <__any_on>
 8014c5a:	4681      	mov	r9, r0
 8014c5c:	117a      	asrs	r2, r7, #5
 8014c5e:	2301      	movs	r3, #1
 8014c60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014c64:	f007 071f 	and.w	r7, r7, #31
 8014c68:	40bb      	lsls	r3, r7
 8014c6a:	4213      	tst	r3, r2
 8014c6c:	4629      	mov	r1, r5
 8014c6e:	4620      	mov	r0, r4
 8014c70:	bf18      	it	ne
 8014c72:	f049 0902 	orrne.w	r9, r9, #2
 8014c76:	f7ff fe21 	bl	80148bc <rshift>
 8014c7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014c7e:	1b76      	subs	r6, r6, r5
 8014c80:	2502      	movs	r5, #2
 8014c82:	f1b9 0f00 	cmp.w	r9, #0
 8014c86:	d047      	beq.n	8014d18 <__gethex+0x38c>
 8014c88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014c8c:	2b02      	cmp	r3, #2
 8014c8e:	d015      	beq.n	8014cbc <__gethex+0x330>
 8014c90:	2b03      	cmp	r3, #3
 8014c92:	d017      	beq.n	8014cc4 <__gethex+0x338>
 8014c94:	2b01      	cmp	r3, #1
 8014c96:	d109      	bne.n	8014cac <__gethex+0x320>
 8014c98:	f019 0f02 	tst.w	r9, #2
 8014c9c:	d006      	beq.n	8014cac <__gethex+0x320>
 8014c9e:	f8da 3000 	ldr.w	r3, [sl]
 8014ca2:	ea49 0903 	orr.w	r9, r9, r3
 8014ca6:	f019 0f01 	tst.w	r9, #1
 8014caa:	d10e      	bne.n	8014cca <__gethex+0x33e>
 8014cac:	f045 0510 	orr.w	r5, r5, #16
 8014cb0:	e032      	b.n	8014d18 <__gethex+0x38c>
 8014cb2:	f04f 0901 	mov.w	r9, #1
 8014cb6:	e7d1      	b.n	8014c5c <__gethex+0x2d0>
 8014cb8:	2501      	movs	r5, #1
 8014cba:	e7e2      	b.n	8014c82 <__gethex+0x2f6>
 8014cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014cbe:	f1c3 0301 	rsb	r3, r3, #1
 8014cc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d0f0      	beq.n	8014cac <__gethex+0x320>
 8014cca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014cce:	f104 0314 	add.w	r3, r4, #20
 8014cd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014cd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014cda:	f04f 0c00 	mov.w	ip, #0
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ce4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014ce8:	d01b      	beq.n	8014d22 <__gethex+0x396>
 8014cea:	3201      	adds	r2, #1
 8014cec:	6002      	str	r2, [r0, #0]
 8014cee:	2d02      	cmp	r5, #2
 8014cf0:	f104 0314 	add.w	r3, r4, #20
 8014cf4:	d13c      	bne.n	8014d70 <__gethex+0x3e4>
 8014cf6:	f8d8 2000 	ldr.w	r2, [r8]
 8014cfa:	3a01      	subs	r2, #1
 8014cfc:	42b2      	cmp	r2, r6
 8014cfe:	d109      	bne.n	8014d14 <__gethex+0x388>
 8014d00:	1171      	asrs	r1, r6, #5
 8014d02:	2201      	movs	r2, #1
 8014d04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014d08:	f006 061f 	and.w	r6, r6, #31
 8014d0c:	fa02 f606 	lsl.w	r6, r2, r6
 8014d10:	421e      	tst	r6, r3
 8014d12:	d13a      	bne.n	8014d8a <__gethex+0x3fe>
 8014d14:	f045 0520 	orr.w	r5, r5, #32
 8014d18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d1a:	601c      	str	r4, [r3, #0]
 8014d1c:	9b02      	ldr	r3, [sp, #8]
 8014d1e:	601f      	str	r7, [r3, #0]
 8014d20:	e6b0      	b.n	8014a84 <__gethex+0xf8>
 8014d22:	4299      	cmp	r1, r3
 8014d24:	f843 cc04 	str.w	ip, [r3, #-4]
 8014d28:	d8d9      	bhi.n	8014cde <__gethex+0x352>
 8014d2a:	68a3      	ldr	r3, [r4, #8]
 8014d2c:	459b      	cmp	fp, r3
 8014d2e:	db17      	blt.n	8014d60 <__gethex+0x3d4>
 8014d30:	6861      	ldr	r1, [r4, #4]
 8014d32:	9801      	ldr	r0, [sp, #4]
 8014d34:	3101      	adds	r1, #1
 8014d36:	f000 f9c3 	bl	80150c0 <_Balloc>
 8014d3a:	4681      	mov	r9, r0
 8014d3c:	b918      	cbnz	r0, 8014d46 <__gethex+0x3ba>
 8014d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8014da8 <__gethex+0x41c>)
 8014d40:	4602      	mov	r2, r0
 8014d42:	2184      	movs	r1, #132	@ 0x84
 8014d44:	e6c5      	b.n	8014ad2 <__gethex+0x146>
 8014d46:	6922      	ldr	r2, [r4, #16]
 8014d48:	3202      	adds	r2, #2
 8014d4a:	f104 010c 	add.w	r1, r4, #12
 8014d4e:	0092      	lsls	r2, r2, #2
 8014d50:	300c      	adds	r0, #12
 8014d52:	f7fe fed4 	bl	8013afe <memcpy>
 8014d56:	4621      	mov	r1, r4
 8014d58:	9801      	ldr	r0, [sp, #4]
 8014d5a:	f000 f9f1 	bl	8015140 <_Bfree>
 8014d5e:	464c      	mov	r4, r9
 8014d60:	6923      	ldr	r3, [r4, #16]
 8014d62:	1c5a      	adds	r2, r3, #1
 8014d64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014d68:	6122      	str	r2, [r4, #16]
 8014d6a:	2201      	movs	r2, #1
 8014d6c:	615a      	str	r2, [r3, #20]
 8014d6e:	e7be      	b.n	8014cee <__gethex+0x362>
 8014d70:	6922      	ldr	r2, [r4, #16]
 8014d72:	455a      	cmp	r2, fp
 8014d74:	dd0b      	ble.n	8014d8e <__gethex+0x402>
 8014d76:	2101      	movs	r1, #1
 8014d78:	4620      	mov	r0, r4
 8014d7a:	f7ff fd9f 	bl	80148bc <rshift>
 8014d7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014d82:	3701      	adds	r7, #1
 8014d84:	42bb      	cmp	r3, r7
 8014d86:	f6ff aee0 	blt.w	8014b4a <__gethex+0x1be>
 8014d8a:	2501      	movs	r5, #1
 8014d8c:	e7c2      	b.n	8014d14 <__gethex+0x388>
 8014d8e:	f016 061f 	ands.w	r6, r6, #31
 8014d92:	d0fa      	beq.n	8014d8a <__gethex+0x3fe>
 8014d94:	4453      	add	r3, sl
 8014d96:	f1c6 0620 	rsb	r6, r6, #32
 8014d9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014d9e:	f000 fa81 	bl	80152a4 <__hi0bits>
 8014da2:	42b0      	cmp	r0, r6
 8014da4:	dbe7      	blt.n	8014d76 <__gethex+0x3ea>
 8014da6:	e7f0      	b.n	8014d8a <__gethex+0x3fe>
 8014da8:	080168d8 	.word	0x080168d8

08014dac <L_shift>:
 8014dac:	f1c2 0208 	rsb	r2, r2, #8
 8014db0:	0092      	lsls	r2, r2, #2
 8014db2:	b570      	push	{r4, r5, r6, lr}
 8014db4:	f1c2 0620 	rsb	r6, r2, #32
 8014db8:	6843      	ldr	r3, [r0, #4]
 8014dba:	6804      	ldr	r4, [r0, #0]
 8014dbc:	fa03 f506 	lsl.w	r5, r3, r6
 8014dc0:	432c      	orrs	r4, r5
 8014dc2:	40d3      	lsrs	r3, r2
 8014dc4:	6004      	str	r4, [r0, #0]
 8014dc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8014dca:	4288      	cmp	r0, r1
 8014dcc:	d3f4      	bcc.n	8014db8 <L_shift+0xc>
 8014dce:	bd70      	pop	{r4, r5, r6, pc}

08014dd0 <__match>:
 8014dd0:	b530      	push	{r4, r5, lr}
 8014dd2:	6803      	ldr	r3, [r0, #0]
 8014dd4:	3301      	adds	r3, #1
 8014dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014dda:	b914      	cbnz	r4, 8014de2 <__match+0x12>
 8014ddc:	6003      	str	r3, [r0, #0]
 8014dde:	2001      	movs	r0, #1
 8014de0:	bd30      	pop	{r4, r5, pc}
 8014de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014de6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014dea:	2d19      	cmp	r5, #25
 8014dec:	bf98      	it	ls
 8014dee:	3220      	addls	r2, #32
 8014df0:	42a2      	cmp	r2, r4
 8014df2:	d0f0      	beq.n	8014dd6 <__match+0x6>
 8014df4:	2000      	movs	r0, #0
 8014df6:	e7f3      	b.n	8014de0 <__match+0x10>

08014df8 <__hexnan>:
 8014df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dfc:	680b      	ldr	r3, [r1, #0]
 8014dfe:	6801      	ldr	r1, [r0, #0]
 8014e00:	115e      	asrs	r6, r3, #5
 8014e02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014e06:	f013 031f 	ands.w	r3, r3, #31
 8014e0a:	b087      	sub	sp, #28
 8014e0c:	bf18      	it	ne
 8014e0e:	3604      	addne	r6, #4
 8014e10:	2500      	movs	r5, #0
 8014e12:	1f37      	subs	r7, r6, #4
 8014e14:	4682      	mov	sl, r0
 8014e16:	4690      	mov	r8, r2
 8014e18:	9301      	str	r3, [sp, #4]
 8014e1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8014e1e:	46b9      	mov	r9, r7
 8014e20:	463c      	mov	r4, r7
 8014e22:	9502      	str	r5, [sp, #8]
 8014e24:	46ab      	mov	fp, r5
 8014e26:	784a      	ldrb	r2, [r1, #1]
 8014e28:	1c4b      	adds	r3, r1, #1
 8014e2a:	9303      	str	r3, [sp, #12]
 8014e2c:	b342      	cbz	r2, 8014e80 <__hexnan+0x88>
 8014e2e:	4610      	mov	r0, r2
 8014e30:	9105      	str	r1, [sp, #20]
 8014e32:	9204      	str	r2, [sp, #16]
 8014e34:	f7ff fd94 	bl	8014960 <__hexdig_fun>
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	d151      	bne.n	8014ee0 <__hexnan+0xe8>
 8014e3c:	9a04      	ldr	r2, [sp, #16]
 8014e3e:	9905      	ldr	r1, [sp, #20]
 8014e40:	2a20      	cmp	r2, #32
 8014e42:	d818      	bhi.n	8014e76 <__hexnan+0x7e>
 8014e44:	9b02      	ldr	r3, [sp, #8]
 8014e46:	459b      	cmp	fp, r3
 8014e48:	dd13      	ble.n	8014e72 <__hexnan+0x7a>
 8014e4a:	454c      	cmp	r4, r9
 8014e4c:	d206      	bcs.n	8014e5c <__hexnan+0x64>
 8014e4e:	2d07      	cmp	r5, #7
 8014e50:	dc04      	bgt.n	8014e5c <__hexnan+0x64>
 8014e52:	462a      	mov	r2, r5
 8014e54:	4649      	mov	r1, r9
 8014e56:	4620      	mov	r0, r4
 8014e58:	f7ff ffa8 	bl	8014dac <L_shift>
 8014e5c:	4544      	cmp	r4, r8
 8014e5e:	d952      	bls.n	8014f06 <__hexnan+0x10e>
 8014e60:	2300      	movs	r3, #0
 8014e62:	f1a4 0904 	sub.w	r9, r4, #4
 8014e66:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e6a:	f8cd b008 	str.w	fp, [sp, #8]
 8014e6e:	464c      	mov	r4, r9
 8014e70:	461d      	mov	r5, r3
 8014e72:	9903      	ldr	r1, [sp, #12]
 8014e74:	e7d7      	b.n	8014e26 <__hexnan+0x2e>
 8014e76:	2a29      	cmp	r2, #41	@ 0x29
 8014e78:	d157      	bne.n	8014f2a <__hexnan+0x132>
 8014e7a:	3102      	adds	r1, #2
 8014e7c:	f8ca 1000 	str.w	r1, [sl]
 8014e80:	f1bb 0f00 	cmp.w	fp, #0
 8014e84:	d051      	beq.n	8014f2a <__hexnan+0x132>
 8014e86:	454c      	cmp	r4, r9
 8014e88:	d206      	bcs.n	8014e98 <__hexnan+0xa0>
 8014e8a:	2d07      	cmp	r5, #7
 8014e8c:	dc04      	bgt.n	8014e98 <__hexnan+0xa0>
 8014e8e:	462a      	mov	r2, r5
 8014e90:	4649      	mov	r1, r9
 8014e92:	4620      	mov	r0, r4
 8014e94:	f7ff ff8a 	bl	8014dac <L_shift>
 8014e98:	4544      	cmp	r4, r8
 8014e9a:	d936      	bls.n	8014f0a <__hexnan+0x112>
 8014e9c:	f1a8 0204 	sub.w	r2, r8, #4
 8014ea0:	4623      	mov	r3, r4
 8014ea2:	f853 1b04 	ldr.w	r1, [r3], #4
 8014ea6:	f842 1f04 	str.w	r1, [r2, #4]!
 8014eaa:	429f      	cmp	r7, r3
 8014eac:	d2f9      	bcs.n	8014ea2 <__hexnan+0xaa>
 8014eae:	1b3b      	subs	r3, r7, r4
 8014eb0:	f023 0303 	bic.w	r3, r3, #3
 8014eb4:	3304      	adds	r3, #4
 8014eb6:	3401      	adds	r4, #1
 8014eb8:	3e03      	subs	r6, #3
 8014eba:	42b4      	cmp	r4, r6
 8014ebc:	bf88      	it	hi
 8014ebe:	2304      	movhi	r3, #4
 8014ec0:	4443      	add	r3, r8
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	f843 2b04 	str.w	r2, [r3], #4
 8014ec8:	429f      	cmp	r7, r3
 8014eca:	d2fb      	bcs.n	8014ec4 <__hexnan+0xcc>
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	b91b      	cbnz	r3, 8014ed8 <__hexnan+0xe0>
 8014ed0:	4547      	cmp	r7, r8
 8014ed2:	d128      	bne.n	8014f26 <__hexnan+0x12e>
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	603b      	str	r3, [r7, #0]
 8014ed8:	2005      	movs	r0, #5
 8014eda:	b007      	add	sp, #28
 8014edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ee0:	3501      	adds	r5, #1
 8014ee2:	2d08      	cmp	r5, #8
 8014ee4:	f10b 0b01 	add.w	fp, fp, #1
 8014ee8:	dd06      	ble.n	8014ef8 <__hexnan+0x100>
 8014eea:	4544      	cmp	r4, r8
 8014eec:	d9c1      	bls.n	8014e72 <__hexnan+0x7a>
 8014eee:	2300      	movs	r3, #0
 8014ef0:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ef4:	2501      	movs	r5, #1
 8014ef6:	3c04      	subs	r4, #4
 8014ef8:	6822      	ldr	r2, [r4, #0]
 8014efa:	f000 000f 	and.w	r0, r0, #15
 8014efe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014f02:	6020      	str	r0, [r4, #0]
 8014f04:	e7b5      	b.n	8014e72 <__hexnan+0x7a>
 8014f06:	2508      	movs	r5, #8
 8014f08:	e7b3      	b.n	8014e72 <__hexnan+0x7a>
 8014f0a:	9b01      	ldr	r3, [sp, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d0dd      	beq.n	8014ecc <__hexnan+0xd4>
 8014f10:	f1c3 0320 	rsb	r3, r3, #32
 8014f14:	f04f 32ff 	mov.w	r2, #4294967295
 8014f18:	40da      	lsrs	r2, r3
 8014f1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014f1e:	4013      	ands	r3, r2
 8014f20:	f846 3c04 	str.w	r3, [r6, #-4]
 8014f24:	e7d2      	b.n	8014ecc <__hexnan+0xd4>
 8014f26:	3f04      	subs	r7, #4
 8014f28:	e7d0      	b.n	8014ecc <__hexnan+0xd4>
 8014f2a:	2004      	movs	r0, #4
 8014f2c:	e7d5      	b.n	8014eda <__hexnan+0xe2>
	...

08014f30 <malloc>:
 8014f30:	4b02      	ldr	r3, [pc, #8]	@ (8014f3c <malloc+0xc>)
 8014f32:	4601      	mov	r1, r0
 8014f34:	6818      	ldr	r0, [r3, #0]
 8014f36:	f000 b825 	b.w	8014f84 <_malloc_r>
 8014f3a:	bf00      	nop
 8014f3c:	2000018c 	.word	0x2000018c

08014f40 <sbrk_aligned>:
 8014f40:	b570      	push	{r4, r5, r6, lr}
 8014f42:	4e0f      	ldr	r6, [pc, #60]	@ (8014f80 <sbrk_aligned+0x40>)
 8014f44:	460c      	mov	r4, r1
 8014f46:	6831      	ldr	r1, [r6, #0]
 8014f48:	4605      	mov	r5, r0
 8014f4a:	b911      	cbnz	r1, 8014f52 <sbrk_aligned+0x12>
 8014f4c:	f001 f964 	bl	8016218 <_sbrk_r>
 8014f50:	6030      	str	r0, [r6, #0]
 8014f52:	4621      	mov	r1, r4
 8014f54:	4628      	mov	r0, r5
 8014f56:	f001 f95f 	bl	8016218 <_sbrk_r>
 8014f5a:	1c43      	adds	r3, r0, #1
 8014f5c:	d103      	bne.n	8014f66 <sbrk_aligned+0x26>
 8014f5e:	f04f 34ff 	mov.w	r4, #4294967295
 8014f62:	4620      	mov	r0, r4
 8014f64:	bd70      	pop	{r4, r5, r6, pc}
 8014f66:	1cc4      	adds	r4, r0, #3
 8014f68:	f024 0403 	bic.w	r4, r4, #3
 8014f6c:	42a0      	cmp	r0, r4
 8014f6e:	d0f8      	beq.n	8014f62 <sbrk_aligned+0x22>
 8014f70:	1a21      	subs	r1, r4, r0
 8014f72:	4628      	mov	r0, r5
 8014f74:	f001 f950 	bl	8016218 <_sbrk_r>
 8014f78:	3001      	adds	r0, #1
 8014f7a:	d1f2      	bne.n	8014f62 <sbrk_aligned+0x22>
 8014f7c:	e7ef      	b.n	8014f5e <sbrk_aligned+0x1e>
 8014f7e:	bf00      	nop
 8014f80:	2000b4e4 	.word	0x2000b4e4

08014f84 <_malloc_r>:
 8014f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f88:	1ccd      	adds	r5, r1, #3
 8014f8a:	f025 0503 	bic.w	r5, r5, #3
 8014f8e:	3508      	adds	r5, #8
 8014f90:	2d0c      	cmp	r5, #12
 8014f92:	bf38      	it	cc
 8014f94:	250c      	movcc	r5, #12
 8014f96:	2d00      	cmp	r5, #0
 8014f98:	4606      	mov	r6, r0
 8014f9a:	db01      	blt.n	8014fa0 <_malloc_r+0x1c>
 8014f9c:	42a9      	cmp	r1, r5
 8014f9e:	d904      	bls.n	8014faa <_malloc_r+0x26>
 8014fa0:	230c      	movs	r3, #12
 8014fa2:	6033      	str	r3, [r6, #0]
 8014fa4:	2000      	movs	r0, #0
 8014fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014faa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015080 <_malloc_r+0xfc>
 8014fae:	f000 f87b 	bl	80150a8 <__malloc_lock>
 8014fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8014fb6:	461c      	mov	r4, r3
 8014fb8:	bb44      	cbnz	r4, 801500c <_malloc_r+0x88>
 8014fba:	4629      	mov	r1, r5
 8014fbc:	4630      	mov	r0, r6
 8014fbe:	f7ff ffbf 	bl	8014f40 <sbrk_aligned>
 8014fc2:	1c43      	adds	r3, r0, #1
 8014fc4:	4604      	mov	r4, r0
 8014fc6:	d158      	bne.n	801507a <_malloc_r+0xf6>
 8014fc8:	f8d8 4000 	ldr.w	r4, [r8]
 8014fcc:	4627      	mov	r7, r4
 8014fce:	2f00      	cmp	r7, #0
 8014fd0:	d143      	bne.n	801505a <_malloc_r+0xd6>
 8014fd2:	2c00      	cmp	r4, #0
 8014fd4:	d04b      	beq.n	801506e <_malloc_r+0xea>
 8014fd6:	6823      	ldr	r3, [r4, #0]
 8014fd8:	4639      	mov	r1, r7
 8014fda:	4630      	mov	r0, r6
 8014fdc:	eb04 0903 	add.w	r9, r4, r3
 8014fe0:	f001 f91a 	bl	8016218 <_sbrk_r>
 8014fe4:	4581      	cmp	r9, r0
 8014fe6:	d142      	bne.n	801506e <_malloc_r+0xea>
 8014fe8:	6821      	ldr	r1, [r4, #0]
 8014fea:	1a6d      	subs	r5, r5, r1
 8014fec:	4629      	mov	r1, r5
 8014fee:	4630      	mov	r0, r6
 8014ff0:	f7ff ffa6 	bl	8014f40 <sbrk_aligned>
 8014ff4:	3001      	adds	r0, #1
 8014ff6:	d03a      	beq.n	801506e <_malloc_r+0xea>
 8014ff8:	6823      	ldr	r3, [r4, #0]
 8014ffa:	442b      	add	r3, r5
 8014ffc:	6023      	str	r3, [r4, #0]
 8014ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8015002:	685a      	ldr	r2, [r3, #4]
 8015004:	bb62      	cbnz	r2, 8015060 <_malloc_r+0xdc>
 8015006:	f8c8 7000 	str.w	r7, [r8]
 801500a:	e00f      	b.n	801502c <_malloc_r+0xa8>
 801500c:	6822      	ldr	r2, [r4, #0]
 801500e:	1b52      	subs	r2, r2, r5
 8015010:	d420      	bmi.n	8015054 <_malloc_r+0xd0>
 8015012:	2a0b      	cmp	r2, #11
 8015014:	d917      	bls.n	8015046 <_malloc_r+0xc2>
 8015016:	1961      	adds	r1, r4, r5
 8015018:	42a3      	cmp	r3, r4
 801501a:	6025      	str	r5, [r4, #0]
 801501c:	bf18      	it	ne
 801501e:	6059      	strne	r1, [r3, #4]
 8015020:	6863      	ldr	r3, [r4, #4]
 8015022:	bf08      	it	eq
 8015024:	f8c8 1000 	streq.w	r1, [r8]
 8015028:	5162      	str	r2, [r4, r5]
 801502a:	604b      	str	r3, [r1, #4]
 801502c:	4630      	mov	r0, r6
 801502e:	f000 f841 	bl	80150b4 <__malloc_unlock>
 8015032:	f104 000b 	add.w	r0, r4, #11
 8015036:	1d23      	adds	r3, r4, #4
 8015038:	f020 0007 	bic.w	r0, r0, #7
 801503c:	1ac2      	subs	r2, r0, r3
 801503e:	bf1c      	itt	ne
 8015040:	1a1b      	subne	r3, r3, r0
 8015042:	50a3      	strne	r3, [r4, r2]
 8015044:	e7af      	b.n	8014fa6 <_malloc_r+0x22>
 8015046:	6862      	ldr	r2, [r4, #4]
 8015048:	42a3      	cmp	r3, r4
 801504a:	bf0c      	ite	eq
 801504c:	f8c8 2000 	streq.w	r2, [r8]
 8015050:	605a      	strne	r2, [r3, #4]
 8015052:	e7eb      	b.n	801502c <_malloc_r+0xa8>
 8015054:	4623      	mov	r3, r4
 8015056:	6864      	ldr	r4, [r4, #4]
 8015058:	e7ae      	b.n	8014fb8 <_malloc_r+0x34>
 801505a:	463c      	mov	r4, r7
 801505c:	687f      	ldr	r7, [r7, #4]
 801505e:	e7b6      	b.n	8014fce <_malloc_r+0x4a>
 8015060:	461a      	mov	r2, r3
 8015062:	685b      	ldr	r3, [r3, #4]
 8015064:	42a3      	cmp	r3, r4
 8015066:	d1fb      	bne.n	8015060 <_malloc_r+0xdc>
 8015068:	2300      	movs	r3, #0
 801506a:	6053      	str	r3, [r2, #4]
 801506c:	e7de      	b.n	801502c <_malloc_r+0xa8>
 801506e:	230c      	movs	r3, #12
 8015070:	6033      	str	r3, [r6, #0]
 8015072:	4630      	mov	r0, r6
 8015074:	f000 f81e 	bl	80150b4 <__malloc_unlock>
 8015078:	e794      	b.n	8014fa4 <_malloc_r+0x20>
 801507a:	6005      	str	r5, [r0, #0]
 801507c:	e7d6      	b.n	801502c <_malloc_r+0xa8>
 801507e:	bf00      	nop
 8015080:	2000b4e8 	.word	0x2000b4e8

08015084 <__ascii_mbtowc>:
 8015084:	b082      	sub	sp, #8
 8015086:	b901      	cbnz	r1, 801508a <__ascii_mbtowc+0x6>
 8015088:	a901      	add	r1, sp, #4
 801508a:	b142      	cbz	r2, 801509e <__ascii_mbtowc+0x1a>
 801508c:	b14b      	cbz	r3, 80150a2 <__ascii_mbtowc+0x1e>
 801508e:	7813      	ldrb	r3, [r2, #0]
 8015090:	600b      	str	r3, [r1, #0]
 8015092:	7812      	ldrb	r2, [r2, #0]
 8015094:	1e10      	subs	r0, r2, #0
 8015096:	bf18      	it	ne
 8015098:	2001      	movne	r0, #1
 801509a:	b002      	add	sp, #8
 801509c:	4770      	bx	lr
 801509e:	4610      	mov	r0, r2
 80150a0:	e7fb      	b.n	801509a <__ascii_mbtowc+0x16>
 80150a2:	f06f 0001 	mvn.w	r0, #1
 80150a6:	e7f8      	b.n	801509a <__ascii_mbtowc+0x16>

080150a8 <__malloc_lock>:
 80150a8:	4801      	ldr	r0, [pc, #4]	@ (80150b0 <__malloc_lock+0x8>)
 80150aa:	f7fe bd26 	b.w	8013afa <__retarget_lock_acquire_recursive>
 80150ae:	bf00      	nop
 80150b0:	2000b4e0 	.word	0x2000b4e0

080150b4 <__malloc_unlock>:
 80150b4:	4801      	ldr	r0, [pc, #4]	@ (80150bc <__malloc_unlock+0x8>)
 80150b6:	f7fe bd21 	b.w	8013afc <__retarget_lock_release_recursive>
 80150ba:	bf00      	nop
 80150bc:	2000b4e0 	.word	0x2000b4e0

080150c0 <_Balloc>:
 80150c0:	b570      	push	{r4, r5, r6, lr}
 80150c2:	69c6      	ldr	r6, [r0, #28]
 80150c4:	4604      	mov	r4, r0
 80150c6:	460d      	mov	r5, r1
 80150c8:	b976      	cbnz	r6, 80150e8 <_Balloc+0x28>
 80150ca:	2010      	movs	r0, #16
 80150cc:	f7ff ff30 	bl	8014f30 <malloc>
 80150d0:	4602      	mov	r2, r0
 80150d2:	61e0      	str	r0, [r4, #28]
 80150d4:	b920      	cbnz	r0, 80150e0 <_Balloc+0x20>
 80150d6:	4b18      	ldr	r3, [pc, #96]	@ (8015138 <_Balloc+0x78>)
 80150d8:	4818      	ldr	r0, [pc, #96]	@ (801513c <_Balloc+0x7c>)
 80150da:	216b      	movs	r1, #107	@ 0x6b
 80150dc:	f7fe fd2e 	bl	8013b3c <__assert_func>
 80150e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80150e4:	6006      	str	r6, [r0, #0]
 80150e6:	60c6      	str	r6, [r0, #12]
 80150e8:	69e6      	ldr	r6, [r4, #28]
 80150ea:	68f3      	ldr	r3, [r6, #12]
 80150ec:	b183      	cbz	r3, 8015110 <_Balloc+0x50>
 80150ee:	69e3      	ldr	r3, [r4, #28]
 80150f0:	68db      	ldr	r3, [r3, #12]
 80150f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80150f6:	b9b8      	cbnz	r0, 8015128 <_Balloc+0x68>
 80150f8:	2101      	movs	r1, #1
 80150fa:	fa01 f605 	lsl.w	r6, r1, r5
 80150fe:	1d72      	adds	r2, r6, #5
 8015100:	0092      	lsls	r2, r2, #2
 8015102:	4620      	mov	r0, r4
 8015104:	f001 f89f 	bl	8016246 <_calloc_r>
 8015108:	b160      	cbz	r0, 8015124 <_Balloc+0x64>
 801510a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801510e:	e00e      	b.n	801512e <_Balloc+0x6e>
 8015110:	2221      	movs	r2, #33	@ 0x21
 8015112:	2104      	movs	r1, #4
 8015114:	4620      	mov	r0, r4
 8015116:	f001 f896 	bl	8016246 <_calloc_r>
 801511a:	69e3      	ldr	r3, [r4, #28]
 801511c:	60f0      	str	r0, [r6, #12]
 801511e:	68db      	ldr	r3, [r3, #12]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d1e4      	bne.n	80150ee <_Balloc+0x2e>
 8015124:	2000      	movs	r0, #0
 8015126:	bd70      	pop	{r4, r5, r6, pc}
 8015128:	6802      	ldr	r2, [r0, #0]
 801512a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801512e:	2300      	movs	r3, #0
 8015130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015134:	e7f7      	b.n	8015126 <_Balloc+0x66>
 8015136:	bf00      	nop
 8015138:	080167be 	.word	0x080167be
 801513c:	08016949 	.word	0x08016949

08015140 <_Bfree>:
 8015140:	b570      	push	{r4, r5, r6, lr}
 8015142:	69c6      	ldr	r6, [r0, #28]
 8015144:	4605      	mov	r5, r0
 8015146:	460c      	mov	r4, r1
 8015148:	b976      	cbnz	r6, 8015168 <_Bfree+0x28>
 801514a:	2010      	movs	r0, #16
 801514c:	f7ff fef0 	bl	8014f30 <malloc>
 8015150:	4602      	mov	r2, r0
 8015152:	61e8      	str	r0, [r5, #28]
 8015154:	b920      	cbnz	r0, 8015160 <_Bfree+0x20>
 8015156:	4b09      	ldr	r3, [pc, #36]	@ (801517c <_Bfree+0x3c>)
 8015158:	4809      	ldr	r0, [pc, #36]	@ (8015180 <_Bfree+0x40>)
 801515a:	218f      	movs	r1, #143	@ 0x8f
 801515c:	f7fe fcee 	bl	8013b3c <__assert_func>
 8015160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015164:	6006      	str	r6, [r0, #0]
 8015166:	60c6      	str	r6, [r0, #12]
 8015168:	b13c      	cbz	r4, 801517a <_Bfree+0x3a>
 801516a:	69eb      	ldr	r3, [r5, #28]
 801516c:	6862      	ldr	r2, [r4, #4]
 801516e:	68db      	ldr	r3, [r3, #12]
 8015170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015174:	6021      	str	r1, [r4, #0]
 8015176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801517a:	bd70      	pop	{r4, r5, r6, pc}
 801517c:	080167be 	.word	0x080167be
 8015180:	08016949 	.word	0x08016949

08015184 <__multadd>:
 8015184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015188:	690d      	ldr	r5, [r1, #16]
 801518a:	4607      	mov	r7, r0
 801518c:	460c      	mov	r4, r1
 801518e:	461e      	mov	r6, r3
 8015190:	f101 0c14 	add.w	ip, r1, #20
 8015194:	2000      	movs	r0, #0
 8015196:	f8dc 3000 	ldr.w	r3, [ip]
 801519a:	b299      	uxth	r1, r3
 801519c:	fb02 6101 	mla	r1, r2, r1, r6
 80151a0:	0c1e      	lsrs	r6, r3, #16
 80151a2:	0c0b      	lsrs	r3, r1, #16
 80151a4:	fb02 3306 	mla	r3, r2, r6, r3
 80151a8:	b289      	uxth	r1, r1
 80151aa:	3001      	adds	r0, #1
 80151ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80151b0:	4285      	cmp	r5, r0
 80151b2:	f84c 1b04 	str.w	r1, [ip], #4
 80151b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80151ba:	dcec      	bgt.n	8015196 <__multadd+0x12>
 80151bc:	b30e      	cbz	r6, 8015202 <__multadd+0x7e>
 80151be:	68a3      	ldr	r3, [r4, #8]
 80151c0:	42ab      	cmp	r3, r5
 80151c2:	dc19      	bgt.n	80151f8 <__multadd+0x74>
 80151c4:	6861      	ldr	r1, [r4, #4]
 80151c6:	4638      	mov	r0, r7
 80151c8:	3101      	adds	r1, #1
 80151ca:	f7ff ff79 	bl	80150c0 <_Balloc>
 80151ce:	4680      	mov	r8, r0
 80151d0:	b928      	cbnz	r0, 80151de <__multadd+0x5a>
 80151d2:	4602      	mov	r2, r0
 80151d4:	4b0c      	ldr	r3, [pc, #48]	@ (8015208 <__multadd+0x84>)
 80151d6:	480d      	ldr	r0, [pc, #52]	@ (801520c <__multadd+0x88>)
 80151d8:	21ba      	movs	r1, #186	@ 0xba
 80151da:	f7fe fcaf 	bl	8013b3c <__assert_func>
 80151de:	6922      	ldr	r2, [r4, #16]
 80151e0:	3202      	adds	r2, #2
 80151e2:	f104 010c 	add.w	r1, r4, #12
 80151e6:	0092      	lsls	r2, r2, #2
 80151e8:	300c      	adds	r0, #12
 80151ea:	f7fe fc88 	bl	8013afe <memcpy>
 80151ee:	4621      	mov	r1, r4
 80151f0:	4638      	mov	r0, r7
 80151f2:	f7ff ffa5 	bl	8015140 <_Bfree>
 80151f6:	4644      	mov	r4, r8
 80151f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80151fc:	3501      	adds	r5, #1
 80151fe:	615e      	str	r6, [r3, #20]
 8015200:	6125      	str	r5, [r4, #16]
 8015202:	4620      	mov	r0, r4
 8015204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015208:	080168d8 	.word	0x080168d8
 801520c:	08016949 	.word	0x08016949

08015210 <__s2b>:
 8015210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015214:	460c      	mov	r4, r1
 8015216:	4615      	mov	r5, r2
 8015218:	461f      	mov	r7, r3
 801521a:	2209      	movs	r2, #9
 801521c:	3308      	adds	r3, #8
 801521e:	4606      	mov	r6, r0
 8015220:	fb93 f3f2 	sdiv	r3, r3, r2
 8015224:	2100      	movs	r1, #0
 8015226:	2201      	movs	r2, #1
 8015228:	429a      	cmp	r2, r3
 801522a:	db09      	blt.n	8015240 <__s2b+0x30>
 801522c:	4630      	mov	r0, r6
 801522e:	f7ff ff47 	bl	80150c0 <_Balloc>
 8015232:	b940      	cbnz	r0, 8015246 <__s2b+0x36>
 8015234:	4602      	mov	r2, r0
 8015236:	4b19      	ldr	r3, [pc, #100]	@ (801529c <__s2b+0x8c>)
 8015238:	4819      	ldr	r0, [pc, #100]	@ (80152a0 <__s2b+0x90>)
 801523a:	21d3      	movs	r1, #211	@ 0xd3
 801523c:	f7fe fc7e 	bl	8013b3c <__assert_func>
 8015240:	0052      	lsls	r2, r2, #1
 8015242:	3101      	adds	r1, #1
 8015244:	e7f0      	b.n	8015228 <__s2b+0x18>
 8015246:	9b08      	ldr	r3, [sp, #32]
 8015248:	6143      	str	r3, [r0, #20]
 801524a:	2d09      	cmp	r5, #9
 801524c:	f04f 0301 	mov.w	r3, #1
 8015250:	6103      	str	r3, [r0, #16]
 8015252:	dd16      	ble.n	8015282 <__s2b+0x72>
 8015254:	f104 0909 	add.w	r9, r4, #9
 8015258:	46c8      	mov	r8, r9
 801525a:	442c      	add	r4, r5
 801525c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015260:	4601      	mov	r1, r0
 8015262:	3b30      	subs	r3, #48	@ 0x30
 8015264:	220a      	movs	r2, #10
 8015266:	4630      	mov	r0, r6
 8015268:	f7ff ff8c 	bl	8015184 <__multadd>
 801526c:	45a0      	cmp	r8, r4
 801526e:	d1f5      	bne.n	801525c <__s2b+0x4c>
 8015270:	f1a5 0408 	sub.w	r4, r5, #8
 8015274:	444c      	add	r4, r9
 8015276:	1b2d      	subs	r5, r5, r4
 8015278:	1963      	adds	r3, r4, r5
 801527a:	42bb      	cmp	r3, r7
 801527c:	db04      	blt.n	8015288 <__s2b+0x78>
 801527e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015282:	340a      	adds	r4, #10
 8015284:	2509      	movs	r5, #9
 8015286:	e7f6      	b.n	8015276 <__s2b+0x66>
 8015288:	f814 3b01 	ldrb.w	r3, [r4], #1
 801528c:	4601      	mov	r1, r0
 801528e:	3b30      	subs	r3, #48	@ 0x30
 8015290:	220a      	movs	r2, #10
 8015292:	4630      	mov	r0, r6
 8015294:	f7ff ff76 	bl	8015184 <__multadd>
 8015298:	e7ee      	b.n	8015278 <__s2b+0x68>
 801529a:	bf00      	nop
 801529c:	080168d8 	.word	0x080168d8
 80152a0:	08016949 	.word	0x08016949

080152a4 <__hi0bits>:
 80152a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80152a8:	4603      	mov	r3, r0
 80152aa:	bf36      	itet	cc
 80152ac:	0403      	lslcc	r3, r0, #16
 80152ae:	2000      	movcs	r0, #0
 80152b0:	2010      	movcc	r0, #16
 80152b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80152b6:	bf3c      	itt	cc
 80152b8:	021b      	lslcc	r3, r3, #8
 80152ba:	3008      	addcc	r0, #8
 80152bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80152c0:	bf3c      	itt	cc
 80152c2:	011b      	lslcc	r3, r3, #4
 80152c4:	3004      	addcc	r0, #4
 80152c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80152ca:	bf3c      	itt	cc
 80152cc:	009b      	lslcc	r3, r3, #2
 80152ce:	3002      	addcc	r0, #2
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	db05      	blt.n	80152e0 <__hi0bits+0x3c>
 80152d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80152d8:	f100 0001 	add.w	r0, r0, #1
 80152dc:	bf08      	it	eq
 80152de:	2020      	moveq	r0, #32
 80152e0:	4770      	bx	lr

080152e2 <__lo0bits>:
 80152e2:	6803      	ldr	r3, [r0, #0]
 80152e4:	4602      	mov	r2, r0
 80152e6:	f013 0007 	ands.w	r0, r3, #7
 80152ea:	d00b      	beq.n	8015304 <__lo0bits+0x22>
 80152ec:	07d9      	lsls	r1, r3, #31
 80152ee:	d421      	bmi.n	8015334 <__lo0bits+0x52>
 80152f0:	0798      	lsls	r0, r3, #30
 80152f2:	bf49      	itett	mi
 80152f4:	085b      	lsrmi	r3, r3, #1
 80152f6:	089b      	lsrpl	r3, r3, #2
 80152f8:	2001      	movmi	r0, #1
 80152fa:	6013      	strmi	r3, [r2, #0]
 80152fc:	bf5c      	itt	pl
 80152fe:	6013      	strpl	r3, [r2, #0]
 8015300:	2002      	movpl	r0, #2
 8015302:	4770      	bx	lr
 8015304:	b299      	uxth	r1, r3
 8015306:	b909      	cbnz	r1, 801530c <__lo0bits+0x2a>
 8015308:	0c1b      	lsrs	r3, r3, #16
 801530a:	2010      	movs	r0, #16
 801530c:	b2d9      	uxtb	r1, r3
 801530e:	b909      	cbnz	r1, 8015314 <__lo0bits+0x32>
 8015310:	3008      	adds	r0, #8
 8015312:	0a1b      	lsrs	r3, r3, #8
 8015314:	0719      	lsls	r1, r3, #28
 8015316:	bf04      	itt	eq
 8015318:	091b      	lsreq	r3, r3, #4
 801531a:	3004      	addeq	r0, #4
 801531c:	0799      	lsls	r1, r3, #30
 801531e:	bf04      	itt	eq
 8015320:	089b      	lsreq	r3, r3, #2
 8015322:	3002      	addeq	r0, #2
 8015324:	07d9      	lsls	r1, r3, #31
 8015326:	d403      	bmi.n	8015330 <__lo0bits+0x4e>
 8015328:	085b      	lsrs	r3, r3, #1
 801532a:	f100 0001 	add.w	r0, r0, #1
 801532e:	d003      	beq.n	8015338 <__lo0bits+0x56>
 8015330:	6013      	str	r3, [r2, #0]
 8015332:	4770      	bx	lr
 8015334:	2000      	movs	r0, #0
 8015336:	4770      	bx	lr
 8015338:	2020      	movs	r0, #32
 801533a:	4770      	bx	lr

0801533c <__i2b>:
 801533c:	b510      	push	{r4, lr}
 801533e:	460c      	mov	r4, r1
 8015340:	2101      	movs	r1, #1
 8015342:	f7ff febd 	bl	80150c0 <_Balloc>
 8015346:	4602      	mov	r2, r0
 8015348:	b928      	cbnz	r0, 8015356 <__i2b+0x1a>
 801534a:	4b05      	ldr	r3, [pc, #20]	@ (8015360 <__i2b+0x24>)
 801534c:	4805      	ldr	r0, [pc, #20]	@ (8015364 <__i2b+0x28>)
 801534e:	f240 1145 	movw	r1, #325	@ 0x145
 8015352:	f7fe fbf3 	bl	8013b3c <__assert_func>
 8015356:	2301      	movs	r3, #1
 8015358:	6144      	str	r4, [r0, #20]
 801535a:	6103      	str	r3, [r0, #16]
 801535c:	bd10      	pop	{r4, pc}
 801535e:	bf00      	nop
 8015360:	080168d8 	.word	0x080168d8
 8015364:	08016949 	.word	0x08016949

08015368 <__multiply>:
 8015368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801536c:	4617      	mov	r7, r2
 801536e:	690a      	ldr	r2, [r1, #16]
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	429a      	cmp	r2, r3
 8015374:	bfa8      	it	ge
 8015376:	463b      	movge	r3, r7
 8015378:	4689      	mov	r9, r1
 801537a:	bfa4      	itt	ge
 801537c:	460f      	movge	r7, r1
 801537e:	4699      	movge	r9, r3
 8015380:	693d      	ldr	r5, [r7, #16]
 8015382:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	6879      	ldr	r1, [r7, #4]
 801538a:	eb05 060a 	add.w	r6, r5, sl
 801538e:	42b3      	cmp	r3, r6
 8015390:	b085      	sub	sp, #20
 8015392:	bfb8      	it	lt
 8015394:	3101      	addlt	r1, #1
 8015396:	f7ff fe93 	bl	80150c0 <_Balloc>
 801539a:	b930      	cbnz	r0, 80153aa <__multiply+0x42>
 801539c:	4602      	mov	r2, r0
 801539e:	4b41      	ldr	r3, [pc, #260]	@ (80154a4 <__multiply+0x13c>)
 80153a0:	4841      	ldr	r0, [pc, #260]	@ (80154a8 <__multiply+0x140>)
 80153a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80153a6:	f7fe fbc9 	bl	8013b3c <__assert_func>
 80153aa:	f100 0414 	add.w	r4, r0, #20
 80153ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80153b2:	4623      	mov	r3, r4
 80153b4:	2200      	movs	r2, #0
 80153b6:	4573      	cmp	r3, lr
 80153b8:	d320      	bcc.n	80153fc <__multiply+0x94>
 80153ba:	f107 0814 	add.w	r8, r7, #20
 80153be:	f109 0114 	add.w	r1, r9, #20
 80153c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80153c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80153ca:	9302      	str	r3, [sp, #8]
 80153cc:	1beb      	subs	r3, r5, r7
 80153ce:	3b15      	subs	r3, #21
 80153d0:	f023 0303 	bic.w	r3, r3, #3
 80153d4:	3304      	adds	r3, #4
 80153d6:	3715      	adds	r7, #21
 80153d8:	42bd      	cmp	r5, r7
 80153da:	bf38      	it	cc
 80153dc:	2304      	movcc	r3, #4
 80153de:	9301      	str	r3, [sp, #4]
 80153e0:	9b02      	ldr	r3, [sp, #8]
 80153e2:	9103      	str	r1, [sp, #12]
 80153e4:	428b      	cmp	r3, r1
 80153e6:	d80c      	bhi.n	8015402 <__multiply+0x9a>
 80153e8:	2e00      	cmp	r6, #0
 80153ea:	dd03      	ble.n	80153f4 <__multiply+0x8c>
 80153ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d055      	beq.n	80154a0 <__multiply+0x138>
 80153f4:	6106      	str	r6, [r0, #16]
 80153f6:	b005      	add	sp, #20
 80153f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153fc:	f843 2b04 	str.w	r2, [r3], #4
 8015400:	e7d9      	b.n	80153b6 <__multiply+0x4e>
 8015402:	f8b1 a000 	ldrh.w	sl, [r1]
 8015406:	f1ba 0f00 	cmp.w	sl, #0
 801540a:	d01f      	beq.n	801544c <__multiply+0xe4>
 801540c:	46c4      	mov	ip, r8
 801540e:	46a1      	mov	r9, r4
 8015410:	2700      	movs	r7, #0
 8015412:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015416:	f8d9 3000 	ldr.w	r3, [r9]
 801541a:	fa1f fb82 	uxth.w	fp, r2
 801541e:	b29b      	uxth	r3, r3
 8015420:	fb0a 330b 	mla	r3, sl, fp, r3
 8015424:	443b      	add	r3, r7
 8015426:	f8d9 7000 	ldr.w	r7, [r9]
 801542a:	0c12      	lsrs	r2, r2, #16
 801542c:	0c3f      	lsrs	r7, r7, #16
 801542e:	fb0a 7202 	mla	r2, sl, r2, r7
 8015432:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015436:	b29b      	uxth	r3, r3
 8015438:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801543c:	4565      	cmp	r5, ip
 801543e:	f849 3b04 	str.w	r3, [r9], #4
 8015442:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015446:	d8e4      	bhi.n	8015412 <__multiply+0xaa>
 8015448:	9b01      	ldr	r3, [sp, #4]
 801544a:	50e7      	str	r7, [r4, r3]
 801544c:	9b03      	ldr	r3, [sp, #12]
 801544e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015452:	3104      	adds	r1, #4
 8015454:	f1b9 0f00 	cmp.w	r9, #0
 8015458:	d020      	beq.n	801549c <__multiply+0x134>
 801545a:	6823      	ldr	r3, [r4, #0]
 801545c:	4647      	mov	r7, r8
 801545e:	46a4      	mov	ip, r4
 8015460:	f04f 0a00 	mov.w	sl, #0
 8015464:	f8b7 b000 	ldrh.w	fp, [r7]
 8015468:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801546c:	fb09 220b 	mla	r2, r9, fp, r2
 8015470:	4452      	add	r2, sl
 8015472:	b29b      	uxth	r3, r3
 8015474:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015478:	f84c 3b04 	str.w	r3, [ip], #4
 801547c:	f857 3b04 	ldr.w	r3, [r7], #4
 8015480:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015484:	f8bc 3000 	ldrh.w	r3, [ip]
 8015488:	fb09 330a 	mla	r3, r9, sl, r3
 801548c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015490:	42bd      	cmp	r5, r7
 8015492:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015496:	d8e5      	bhi.n	8015464 <__multiply+0xfc>
 8015498:	9a01      	ldr	r2, [sp, #4]
 801549a:	50a3      	str	r3, [r4, r2]
 801549c:	3404      	adds	r4, #4
 801549e:	e79f      	b.n	80153e0 <__multiply+0x78>
 80154a0:	3e01      	subs	r6, #1
 80154a2:	e7a1      	b.n	80153e8 <__multiply+0x80>
 80154a4:	080168d8 	.word	0x080168d8
 80154a8:	08016949 	.word	0x08016949

080154ac <__pow5mult>:
 80154ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154b0:	4615      	mov	r5, r2
 80154b2:	f012 0203 	ands.w	r2, r2, #3
 80154b6:	4607      	mov	r7, r0
 80154b8:	460e      	mov	r6, r1
 80154ba:	d007      	beq.n	80154cc <__pow5mult+0x20>
 80154bc:	4c25      	ldr	r4, [pc, #148]	@ (8015554 <__pow5mult+0xa8>)
 80154be:	3a01      	subs	r2, #1
 80154c0:	2300      	movs	r3, #0
 80154c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80154c6:	f7ff fe5d 	bl	8015184 <__multadd>
 80154ca:	4606      	mov	r6, r0
 80154cc:	10ad      	asrs	r5, r5, #2
 80154ce:	d03d      	beq.n	801554c <__pow5mult+0xa0>
 80154d0:	69fc      	ldr	r4, [r7, #28]
 80154d2:	b97c      	cbnz	r4, 80154f4 <__pow5mult+0x48>
 80154d4:	2010      	movs	r0, #16
 80154d6:	f7ff fd2b 	bl	8014f30 <malloc>
 80154da:	4602      	mov	r2, r0
 80154dc:	61f8      	str	r0, [r7, #28]
 80154de:	b928      	cbnz	r0, 80154ec <__pow5mult+0x40>
 80154e0:	4b1d      	ldr	r3, [pc, #116]	@ (8015558 <__pow5mult+0xac>)
 80154e2:	481e      	ldr	r0, [pc, #120]	@ (801555c <__pow5mult+0xb0>)
 80154e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80154e8:	f7fe fb28 	bl	8013b3c <__assert_func>
 80154ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80154f0:	6004      	str	r4, [r0, #0]
 80154f2:	60c4      	str	r4, [r0, #12]
 80154f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80154f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80154fc:	b94c      	cbnz	r4, 8015512 <__pow5mult+0x66>
 80154fe:	f240 2171 	movw	r1, #625	@ 0x271
 8015502:	4638      	mov	r0, r7
 8015504:	f7ff ff1a 	bl	801533c <__i2b>
 8015508:	2300      	movs	r3, #0
 801550a:	f8c8 0008 	str.w	r0, [r8, #8]
 801550e:	4604      	mov	r4, r0
 8015510:	6003      	str	r3, [r0, #0]
 8015512:	f04f 0900 	mov.w	r9, #0
 8015516:	07eb      	lsls	r3, r5, #31
 8015518:	d50a      	bpl.n	8015530 <__pow5mult+0x84>
 801551a:	4631      	mov	r1, r6
 801551c:	4622      	mov	r2, r4
 801551e:	4638      	mov	r0, r7
 8015520:	f7ff ff22 	bl	8015368 <__multiply>
 8015524:	4631      	mov	r1, r6
 8015526:	4680      	mov	r8, r0
 8015528:	4638      	mov	r0, r7
 801552a:	f7ff fe09 	bl	8015140 <_Bfree>
 801552e:	4646      	mov	r6, r8
 8015530:	106d      	asrs	r5, r5, #1
 8015532:	d00b      	beq.n	801554c <__pow5mult+0xa0>
 8015534:	6820      	ldr	r0, [r4, #0]
 8015536:	b938      	cbnz	r0, 8015548 <__pow5mult+0x9c>
 8015538:	4622      	mov	r2, r4
 801553a:	4621      	mov	r1, r4
 801553c:	4638      	mov	r0, r7
 801553e:	f7ff ff13 	bl	8015368 <__multiply>
 8015542:	6020      	str	r0, [r4, #0]
 8015544:	f8c0 9000 	str.w	r9, [r0]
 8015548:	4604      	mov	r4, r0
 801554a:	e7e4      	b.n	8015516 <__pow5mult+0x6a>
 801554c:	4630      	mov	r0, r6
 801554e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015552:	bf00      	nop
 8015554:	08016b0c 	.word	0x08016b0c
 8015558:	080167be 	.word	0x080167be
 801555c:	08016949 	.word	0x08016949

08015560 <__lshift>:
 8015560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015564:	460c      	mov	r4, r1
 8015566:	6849      	ldr	r1, [r1, #4]
 8015568:	6923      	ldr	r3, [r4, #16]
 801556a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801556e:	68a3      	ldr	r3, [r4, #8]
 8015570:	4607      	mov	r7, r0
 8015572:	4691      	mov	r9, r2
 8015574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015578:	f108 0601 	add.w	r6, r8, #1
 801557c:	42b3      	cmp	r3, r6
 801557e:	db0b      	blt.n	8015598 <__lshift+0x38>
 8015580:	4638      	mov	r0, r7
 8015582:	f7ff fd9d 	bl	80150c0 <_Balloc>
 8015586:	4605      	mov	r5, r0
 8015588:	b948      	cbnz	r0, 801559e <__lshift+0x3e>
 801558a:	4602      	mov	r2, r0
 801558c:	4b28      	ldr	r3, [pc, #160]	@ (8015630 <__lshift+0xd0>)
 801558e:	4829      	ldr	r0, [pc, #164]	@ (8015634 <__lshift+0xd4>)
 8015590:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015594:	f7fe fad2 	bl	8013b3c <__assert_func>
 8015598:	3101      	adds	r1, #1
 801559a:	005b      	lsls	r3, r3, #1
 801559c:	e7ee      	b.n	801557c <__lshift+0x1c>
 801559e:	2300      	movs	r3, #0
 80155a0:	f100 0114 	add.w	r1, r0, #20
 80155a4:	f100 0210 	add.w	r2, r0, #16
 80155a8:	4618      	mov	r0, r3
 80155aa:	4553      	cmp	r3, sl
 80155ac:	db33      	blt.n	8015616 <__lshift+0xb6>
 80155ae:	6920      	ldr	r0, [r4, #16]
 80155b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80155b4:	f104 0314 	add.w	r3, r4, #20
 80155b8:	f019 091f 	ands.w	r9, r9, #31
 80155bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80155c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80155c4:	d02b      	beq.n	801561e <__lshift+0xbe>
 80155c6:	f1c9 0e20 	rsb	lr, r9, #32
 80155ca:	468a      	mov	sl, r1
 80155cc:	2200      	movs	r2, #0
 80155ce:	6818      	ldr	r0, [r3, #0]
 80155d0:	fa00 f009 	lsl.w	r0, r0, r9
 80155d4:	4310      	orrs	r0, r2
 80155d6:	f84a 0b04 	str.w	r0, [sl], #4
 80155da:	f853 2b04 	ldr.w	r2, [r3], #4
 80155de:	459c      	cmp	ip, r3
 80155e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80155e4:	d8f3      	bhi.n	80155ce <__lshift+0x6e>
 80155e6:	ebac 0304 	sub.w	r3, ip, r4
 80155ea:	3b15      	subs	r3, #21
 80155ec:	f023 0303 	bic.w	r3, r3, #3
 80155f0:	3304      	adds	r3, #4
 80155f2:	f104 0015 	add.w	r0, r4, #21
 80155f6:	4560      	cmp	r0, ip
 80155f8:	bf88      	it	hi
 80155fa:	2304      	movhi	r3, #4
 80155fc:	50ca      	str	r2, [r1, r3]
 80155fe:	b10a      	cbz	r2, 8015604 <__lshift+0xa4>
 8015600:	f108 0602 	add.w	r6, r8, #2
 8015604:	3e01      	subs	r6, #1
 8015606:	4638      	mov	r0, r7
 8015608:	612e      	str	r6, [r5, #16]
 801560a:	4621      	mov	r1, r4
 801560c:	f7ff fd98 	bl	8015140 <_Bfree>
 8015610:	4628      	mov	r0, r5
 8015612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015616:	f842 0f04 	str.w	r0, [r2, #4]!
 801561a:	3301      	adds	r3, #1
 801561c:	e7c5      	b.n	80155aa <__lshift+0x4a>
 801561e:	3904      	subs	r1, #4
 8015620:	f853 2b04 	ldr.w	r2, [r3], #4
 8015624:	f841 2f04 	str.w	r2, [r1, #4]!
 8015628:	459c      	cmp	ip, r3
 801562a:	d8f9      	bhi.n	8015620 <__lshift+0xc0>
 801562c:	e7ea      	b.n	8015604 <__lshift+0xa4>
 801562e:	bf00      	nop
 8015630:	080168d8 	.word	0x080168d8
 8015634:	08016949 	.word	0x08016949

08015638 <__mcmp>:
 8015638:	690a      	ldr	r2, [r1, #16]
 801563a:	4603      	mov	r3, r0
 801563c:	6900      	ldr	r0, [r0, #16]
 801563e:	1a80      	subs	r0, r0, r2
 8015640:	b530      	push	{r4, r5, lr}
 8015642:	d10e      	bne.n	8015662 <__mcmp+0x2a>
 8015644:	3314      	adds	r3, #20
 8015646:	3114      	adds	r1, #20
 8015648:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801564c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015650:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015654:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015658:	4295      	cmp	r5, r2
 801565a:	d003      	beq.n	8015664 <__mcmp+0x2c>
 801565c:	d205      	bcs.n	801566a <__mcmp+0x32>
 801565e:	f04f 30ff 	mov.w	r0, #4294967295
 8015662:	bd30      	pop	{r4, r5, pc}
 8015664:	42a3      	cmp	r3, r4
 8015666:	d3f3      	bcc.n	8015650 <__mcmp+0x18>
 8015668:	e7fb      	b.n	8015662 <__mcmp+0x2a>
 801566a:	2001      	movs	r0, #1
 801566c:	e7f9      	b.n	8015662 <__mcmp+0x2a>
	...

08015670 <__mdiff>:
 8015670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015674:	4689      	mov	r9, r1
 8015676:	4606      	mov	r6, r0
 8015678:	4611      	mov	r1, r2
 801567a:	4648      	mov	r0, r9
 801567c:	4614      	mov	r4, r2
 801567e:	f7ff ffdb 	bl	8015638 <__mcmp>
 8015682:	1e05      	subs	r5, r0, #0
 8015684:	d112      	bne.n	80156ac <__mdiff+0x3c>
 8015686:	4629      	mov	r1, r5
 8015688:	4630      	mov	r0, r6
 801568a:	f7ff fd19 	bl	80150c0 <_Balloc>
 801568e:	4602      	mov	r2, r0
 8015690:	b928      	cbnz	r0, 801569e <__mdiff+0x2e>
 8015692:	4b3f      	ldr	r3, [pc, #252]	@ (8015790 <__mdiff+0x120>)
 8015694:	f240 2137 	movw	r1, #567	@ 0x237
 8015698:	483e      	ldr	r0, [pc, #248]	@ (8015794 <__mdiff+0x124>)
 801569a:	f7fe fa4f 	bl	8013b3c <__assert_func>
 801569e:	2301      	movs	r3, #1
 80156a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80156a4:	4610      	mov	r0, r2
 80156a6:	b003      	add	sp, #12
 80156a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ac:	bfbc      	itt	lt
 80156ae:	464b      	movlt	r3, r9
 80156b0:	46a1      	movlt	r9, r4
 80156b2:	4630      	mov	r0, r6
 80156b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80156b8:	bfba      	itte	lt
 80156ba:	461c      	movlt	r4, r3
 80156bc:	2501      	movlt	r5, #1
 80156be:	2500      	movge	r5, #0
 80156c0:	f7ff fcfe 	bl	80150c0 <_Balloc>
 80156c4:	4602      	mov	r2, r0
 80156c6:	b918      	cbnz	r0, 80156d0 <__mdiff+0x60>
 80156c8:	4b31      	ldr	r3, [pc, #196]	@ (8015790 <__mdiff+0x120>)
 80156ca:	f240 2145 	movw	r1, #581	@ 0x245
 80156ce:	e7e3      	b.n	8015698 <__mdiff+0x28>
 80156d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80156d4:	6926      	ldr	r6, [r4, #16]
 80156d6:	60c5      	str	r5, [r0, #12]
 80156d8:	f109 0310 	add.w	r3, r9, #16
 80156dc:	f109 0514 	add.w	r5, r9, #20
 80156e0:	f104 0e14 	add.w	lr, r4, #20
 80156e4:	f100 0b14 	add.w	fp, r0, #20
 80156e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80156ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80156f0:	9301      	str	r3, [sp, #4]
 80156f2:	46d9      	mov	r9, fp
 80156f4:	f04f 0c00 	mov.w	ip, #0
 80156f8:	9b01      	ldr	r3, [sp, #4]
 80156fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80156fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015702:	9301      	str	r3, [sp, #4]
 8015704:	fa1f f38a 	uxth.w	r3, sl
 8015708:	4619      	mov	r1, r3
 801570a:	b283      	uxth	r3, r0
 801570c:	1acb      	subs	r3, r1, r3
 801570e:	0c00      	lsrs	r0, r0, #16
 8015710:	4463      	add	r3, ip
 8015712:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015716:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801571a:	b29b      	uxth	r3, r3
 801571c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015720:	4576      	cmp	r6, lr
 8015722:	f849 3b04 	str.w	r3, [r9], #4
 8015726:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801572a:	d8e5      	bhi.n	80156f8 <__mdiff+0x88>
 801572c:	1b33      	subs	r3, r6, r4
 801572e:	3b15      	subs	r3, #21
 8015730:	f023 0303 	bic.w	r3, r3, #3
 8015734:	3415      	adds	r4, #21
 8015736:	3304      	adds	r3, #4
 8015738:	42a6      	cmp	r6, r4
 801573a:	bf38      	it	cc
 801573c:	2304      	movcc	r3, #4
 801573e:	441d      	add	r5, r3
 8015740:	445b      	add	r3, fp
 8015742:	461e      	mov	r6, r3
 8015744:	462c      	mov	r4, r5
 8015746:	4544      	cmp	r4, r8
 8015748:	d30e      	bcc.n	8015768 <__mdiff+0xf8>
 801574a:	f108 0103 	add.w	r1, r8, #3
 801574e:	1b49      	subs	r1, r1, r5
 8015750:	f021 0103 	bic.w	r1, r1, #3
 8015754:	3d03      	subs	r5, #3
 8015756:	45a8      	cmp	r8, r5
 8015758:	bf38      	it	cc
 801575a:	2100      	movcc	r1, #0
 801575c:	440b      	add	r3, r1
 801575e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015762:	b191      	cbz	r1, 801578a <__mdiff+0x11a>
 8015764:	6117      	str	r7, [r2, #16]
 8015766:	e79d      	b.n	80156a4 <__mdiff+0x34>
 8015768:	f854 1b04 	ldr.w	r1, [r4], #4
 801576c:	46e6      	mov	lr, ip
 801576e:	0c08      	lsrs	r0, r1, #16
 8015770:	fa1c fc81 	uxtah	ip, ip, r1
 8015774:	4471      	add	r1, lr
 8015776:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801577a:	b289      	uxth	r1, r1
 801577c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015780:	f846 1b04 	str.w	r1, [r6], #4
 8015784:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015788:	e7dd      	b.n	8015746 <__mdiff+0xd6>
 801578a:	3f01      	subs	r7, #1
 801578c:	e7e7      	b.n	801575e <__mdiff+0xee>
 801578e:	bf00      	nop
 8015790:	080168d8 	.word	0x080168d8
 8015794:	08016949 	.word	0x08016949

08015798 <__ulp>:
 8015798:	b082      	sub	sp, #8
 801579a:	ed8d 0b00 	vstr	d0, [sp]
 801579e:	9a01      	ldr	r2, [sp, #4]
 80157a0:	4b0f      	ldr	r3, [pc, #60]	@ (80157e0 <__ulp+0x48>)
 80157a2:	4013      	ands	r3, r2
 80157a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	dc08      	bgt.n	80157be <__ulp+0x26>
 80157ac:	425b      	negs	r3, r3
 80157ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80157b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80157b6:	da04      	bge.n	80157c2 <__ulp+0x2a>
 80157b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80157bc:	4113      	asrs	r3, r2
 80157be:	2200      	movs	r2, #0
 80157c0:	e008      	b.n	80157d4 <__ulp+0x3c>
 80157c2:	f1a2 0314 	sub.w	r3, r2, #20
 80157c6:	2b1e      	cmp	r3, #30
 80157c8:	bfda      	itte	le
 80157ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80157ce:	40da      	lsrle	r2, r3
 80157d0:	2201      	movgt	r2, #1
 80157d2:	2300      	movs	r3, #0
 80157d4:	4619      	mov	r1, r3
 80157d6:	4610      	mov	r0, r2
 80157d8:	ec41 0b10 	vmov	d0, r0, r1
 80157dc:	b002      	add	sp, #8
 80157de:	4770      	bx	lr
 80157e0:	7ff00000 	.word	0x7ff00000

080157e4 <__b2d>:
 80157e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157e8:	6906      	ldr	r6, [r0, #16]
 80157ea:	f100 0814 	add.w	r8, r0, #20
 80157ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80157f2:	1f37      	subs	r7, r6, #4
 80157f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80157f8:	4610      	mov	r0, r2
 80157fa:	f7ff fd53 	bl	80152a4 <__hi0bits>
 80157fe:	f1c0 0320 	rsb	r3, r0, #32
 8015802:	280a      	cmp	r0, #10
 8015804:	600b      	str	r3, [r1, #0]
 8015806:	491b      	ldr	r1, [pc, #108]	@ (8015874 <__b2d+0x90>)
 8015808:	dc15      	bgt.n	8015836 <__b2d+0x52>
 801580a:	f1c0 0c0b 	rsb	ip, r0, #11
 801580e:	fa22 f30c 	lsr.w	r3, r2, ip
 8015812:	45b8      	cmp	r8, r7
 8015814:	ea43 0501 	orr.w	r5, r3, r1
 8015818:	bf34      	ite	cc
 801581a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801581e:	2300      	movcs	r3, #0
 8015820:	3015      	adds	r0, #21
 8015822:	fa02 f000 	lsl.w	r0, r2, r0
 8015826:	fa23 f30c 	lsr.w	r3, r3, ip
 801582a:	4303      	orrs	r3, r0
 801582c:	461c      	mov	r4, r3
 801582e:	ec45 4b10 	vmov	d0, r4, r5
 8015832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015836:	45b8      	cmp	r8, r7
 8015838:	bf3a      	itte	cc
 801583a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801583e:	f1a6 0708 	subcc.w	r7, r6, #8
 8015842:	2300      	movcs	r3, #0
 8015844:	380b      	subs	r0, #11
 8015846:	d012      	beq.n	801586e <__b2d+0x8a>
 8015848:	f1c0 0120 	rsb	r1, r0, #32
 801584c:	fa23 f401 	lsr.w	r4, r3, r1
 8015850:	4082      	lsls	r2, r0
 8015852:	4322      	orrs	r2, r4
 8015854:	4547      	cmp	r7, r8
 8015856:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801585a:	bf8c      	ite	hi
 801585c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015860:	2200      	movls	r2, #0
 8015862:	4083      	lsls	r3, r0
 8015864:	40ca      	lsrs	r2, r1
 8015866:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801586a:	4313      	orrs	r3, r2
 801586c:	e7de      	b.n	801582c <__b2d+0x48>
 801586e:	ea42 0501 	orr.w	r5, r2, r1
 8015872:	e7db      	b.n	801582c <__b2d+0x48>
 8015874:	3ff00000 	.word	0x3ff00000

08015878 <__d2b>:
 8015878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801587c:	460f      	mov	r7, r1
 801587e:	2101      	movs	r1, #1
 8015880:	ec59 8b10 	vmov	r8, r9, d0
 8015884:	4616      	mov	r6, r2
 8015886:	f7ff fc1b 	bl	80150c0 <_Balloc>
 801588a:	4604      	mov	r4, r0
 801588c:	b930      	cbnz	r0, 801589c <__d2b+0x24>
 801588e:	4602      	mov	r2, r0
 8015890:	4b23      	ldr	r3, [pc, #140]	@ (8015920 <__d2b+0xa8>)
 8015892:	4824      	ldr	r0, [pc, #144]	@ (8015924 <__d2b+0xac>)
 8015894:	f240 310f 	movw	r1, #783	@ 0x30f
 8015898:	f7fe f950 	bl	8013b3c <__assert_func>
 801589c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80158a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80158a4:	b10d      	cbz	r5, 80158aa <__d2b+0x32>
 80158a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80158aa:	9301      	str	r3, [sp, #4]
 80158ac:	f1b8 0300 	subs.w	r3, r8, #0
 80158b0:	d023      	beq.n	80158fa <__d2b+0x82>
 80158b2:	4668      	mov	r0, sp
 80158b4:	9300      	str	r3, [sp, #0]
 80158b6:	f7ff fd14 	bl	80152e2 <__lo0bits>
 80158ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80158be:	b1d0      	cbz	r0, 80158f6 <__d2b+0x7e>
 80158c0:	f1c0 0320 	rsb	r3, r0, #32
 80158c4:	fa02 f303 	lsl.w	r3, r2, r3
 80158c8:	430b      	orrs	r3, r1
 80158ca:	40c2      	lsrs	r2, r0
 80158cc:	6163      	str	r3, [r4, #20]
 80158ce:	9201      	str	r2, [sp, #4]
 80158d0:	9b01      	ldr	r3, [sp, #4]
 80158d2:	61a3      	str	r3, [r4, #24]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	bf0c      	ite	eq
 80158d8:	2201      	moveq	r2, #1
 80158da:	2202      	movne	r2, #2
 80158dc:	6122      	str	r2, [r4, #16]
 80158de:	b1a5      	cbz	r5, 801590a <__d2b+0x92>
 80158e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80158e4:	4405      	add	r5, r0
 80158e6:	603d      	str	r5, [r7, #0]
 80158e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80158ec:	6030      	str	r0, [r6, #0]
 80158ee:	4620      	mov	r0, r4
 80158f0:	b003      	add	sp, #12
 80158f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158f6:	6161      	str	r1, [r4, #20]
 80158f8:	e7ea      	b.n	80158d0 <__d2b+0x58>
 80158fa:	a801      	add	r0, sp, #4
 80158fc:	f7ff fcf1 	bl	80152e2 <__lo0bits>
 8015900:	9b01      	ldr	r3, [sp, #4]
 8015902:	6163      	str	r3, [r4, #20]
 8015904:	3020      	adds	r0, #32
 8015906:	2201      	movs	r2, #1
 8015908:	e7e8      	b.n	80158dc <__d2b+0x64>
 801590a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801590e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015912:	6038      	str	r0, [r7, #0]
 8015914:	6918      	ldr	r0, [r3, #16]
 8015916:	f7ff fcc5 	bl	80152a4 <__hi0bits>
 801591a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801591e:	e7e5      	b.n	80158ec <__d2b+0x74>
 8015920:	080168d8 	.word	0x080168d8
 8015924:	08016949 	.word	0x08016949

08015928 <__ratio>:
 8015928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801592c:	b085      	sub	sp, #20
 801592e:	e9cd 1000 	strd	r1, r0, [sp]
 8015932:	a902      	add	r1, sp, #8
 8015934:	f7ff ff56 	bl	80157e4 <__b2d>
 8015938:	9800      	ldr	r0, [sp, #0]
 801593a:	a903      	add	r1, sp, #12
 801593c:	ec55 4b10 	vmov	r4, r5, d0
 8015940:	f7ff ff50 	bl	80157e4 <__b2d>
 8015944:	9b01      	ldr	r3, [sp, #4]
 8015946:	6919      	ldr	r1, [r3, #16]
 8015948:	9b00      	ldr	r3, [sp, #0]
 801594a:	691b      	ldr	r3, [r3, #16]
 801594c:	1ac9      	subs	r1, r1, r3
 801594e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8015952:	1a9b      	subs	r3, r3, r2
 8015954:	ec5b ab10 	vmov	sl, fp, d0
 8015958:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801595c:	2b00      	cmp	r3, #0
 801595e:	bfce      	itee	gt
 8015960:	462a      	movgt	r2, r5
 8015962:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015966:	465a      	movle	r2, fp
 8015968:	462f      	mov	r7, r5
 801596a:	46d9      	mov	r9, fp
 801596c:	bfcc      	ite	gt
 801596e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015972:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8015976:	464b      	mov	r3, r9
 8015978:	4652      	mov	r2, sl
 801597a:	4620      	mov	r0, r4
 801597c:	4639      	mov	r1, r7
 801597e:	f7ea ff85 	bl	800088c <__aeabi_ddiv>
 8015982:	ec41 0b10 	vmov	d0, r0, r1
 8015986:	b005      	add	sp, #20
 8015988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801598c <__copybits>:
 801598c:	3901      	subs	r1, #1
 801598e:	b570      	push	{r4, r5, r6, lr}
 8015990:	1149      	asrs	r1, r1, #5
 8015992:	6914      	ldr	r4, [r2, #16]
 8015994:	3101      	adds	r1, #1
 8015996:	f102 0314 	add.w	r3, r2, #20
 801599a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801599e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80159a2:	1f05      	subs	r5, r0, #4
 80159a4:	42a3      	cmp	r3, r4
 80159a6:	d30c      	bcc.n	80159c2 <__copybits+0x36>
 80159a8:	1aa3      	subs	r3, r4, r2
 80159aa:	3b11      	subs	r3, #17
 80159ac:	f023 0303 	bic.w	r3, r3, #3
 80159b0:	3211      	adds	r2, #17
 80159b2:	42a2      	cmp	r2, r4
 80159b4:	bf88      	it	hi
 80159b6:	2300      	movhi	r3, #0
 80159b8:	4418      	add	r0, r3
 80159ba:	2300      	movs	r3, #0
 80159bc:	4288      	cmp	r0, r1
 80159be:	d305      	bcc.n	80159cc <__copybits+0x40>
 80159c0:	bd70      	pop	{r4, r5, r6, pc}
 80159c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80159c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80159ca:	e7eb      	b.n	80159a4 <__copybits+0x18>
 80159cc:	f840 3b04 	str.w	r3, [r0], #4
 80159d0:	e7f4      	b.n	80159bc <__copybits+0x30>

080159d2 <__any_on>:
 80159d2:	f100 0214 	add.w	r2, r0, #20
 80159d6:	6900      	ldr	r0, [r0, #16]
 80159d8:	114b      	asrs	r3, r1, #5
 80159da:	4298      	cmp	r0, r3
 80159dc:	b510      	push	{r4, lr}
 80159de:	db11      	blt.n	8015a04 <__any_on+0x32>
 80159e0:	dd0a      	ble.n	80159f8 <__any_on+0x26>
 80159e2:	f011 011f 	ands.w	r1, r1, #31
 80159e6:	d007      	beq.n	80159f8 <__any_on+0x26>
 80159e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80159ec:	fa24 f001 	lsr.w	r0, r4, r1
 80159f0:	fa00 f101 	lsl.w	r1, r0, r1
 80159f4:	428c      	cmp	r4, r1
 80159f6:	d10b      	bne.n	8015a10 <__any_on+0x3e>
 80159f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80159fc:	4293      	cmp	r3, r2
 80159fe:	d803      	bhi.n	8015a08 <__any_on+0x36>
 8015a00:	2000      	movs	r0, #0
 8015a02:	bd10      	pop	{r4, pc}
 8015a04:	4603      	mov	r3, r0
 8015a06:	e7f7      	b.n	80159f8 <__any_on+0x26>
 8015a08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015a0c:	2900      	cmp	r1, #0
 8015a0e:	d0f5      	beq.n	80159fc <__any_on+0x2a>
 8015a10:	2001      	movs	r0, #1
 8015a12:	e7f6      	b.n	8015a02 <__any_on+0x30>

08015a14 <__ascii_wctomb>:
 8015a14:	4603      	mov	r3, r0
 8015a16:	4608      	mov	r0, r1
 8015a18:	b141      	cbz	r1, 8015a2c <__ascii_wctomb+0x18>
 8015a1a:	2aff      	cmp	r2, #255	@ 0xff
 8015a1c:	d904      	bls.n	8015a28 <__ascii_wctomb+0x14>
 8015a1e:	228a      	movs	r2, #138	@ 0x8a
 8015a20:	601a      	str	r2, [r3, #0]
 8015a22:	f04f 30ff 	mov.w	r0, #4294967295
 8015a26:	4770      	bx	lr
 8015a28:	700a      	strb	r2, [r1, #0]
 8015a2a:	2001      	movs	r0, #1
 8015a2c:	4770      	bx	lr

08015a2e <__ssputs_r>:
 8015a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a32:	688e      	ldr	r6, [r1, #8]
 8015a34:	461f      	mov	r7, r3
 8015a36:	42be      	cmp	r6, r7
 8015a38:	680b      	ldr	r3, [r1, #0]
 8015a3a:	4682      	mov	sl, r0
 8015a3c:	460c      	mov	r4, r1
 8015a3e:	4690      	mov	r8, r2
 8015a40:	d82d      	bhi.n	8015a9e <__ssputs_r+0x70>
 8015a42:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015a46:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015a4a:	d026      	beq.n	8015a9a <__ssputs_r+0x6c>
 8015a4c:	6965      	ldr	r5, [r4, #20]
 8015a4e:	6909      	ldr	r1, [r1, #16]
 8015a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a54:	eba3 0901 	sub.w	r9, r3, r1
 8015a58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015a5c:	1c7b      	adds	r3, r7, #1
 8015a5e:	444b      	add	r3, r9
 8015a60:	106d      	asrs	r5, r5, #1
 8015a62:	429d      	cmp	r5, r3
 8015a64:	bf38      	it	cc
 8015a66:	461d      	movcc	r5, r3
 8015a68:	0553      	lsls	r3, r2, #21
 8015a6a:	d527      	bpl.n	8015abc <__ssputs_r+0x8e>
 8015a6c:	4629      	mov	r1, r5
 8015a6e:	f7ff fa89 	bl	8014f84 <_malloc_r>
 8015a72:	4606      	mov	r6, r0
 8015a74:	b360      	cbz	r0, 8015ad0 <__ssputs_r+0xa2>
 8015a76:	6921      	ldr	r1, [r4, #16]
 8015a78:	464a      	mov	r2, r9
 8015a7a:	f7fe f840 	bl	8013afe <memcpy>
 8015a7e:	89a3      	ldrh	r3, [r4, #12]
 8015a80:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015a88:	81a3      	strh	r3, [r4, #12]
 8015a8a:	6126      	str	r6, [r4, #16]
 8015a8c:	6165      	str	r5, [r4, #20]
 8015a8e:	444e      	add	r6, r9
 8015a90:	eba5 0509 	sub.w	r5, r5, r9
 8015a94:	6026      	str	r6, [r4, #0]
 8015a96:	60a5      	str	r5, [r4, #8]
 8015a98:	463e      	mov	r6, r7
 8015a9a:	42be      	cmp	r6, r7
 8015a9c:	d900      	bls.n	8015aa0 <__ssputs_r+0x72>
 8015a9e:	463e      	mov	r6, r7
 8015aa0:	6820      	ldr	r0, [r4, #0]
 8015aa2:	4632      	mov	r2, r6
 8015aa4:	4641      	mov	r1, r8
 8015aa6:	f000 fb7b 	bl	80161a0 <memmove>
 8015aaa:	68a3      	ldr	r3, [r4, #8]
 8015aac:	1b9b      	subs	r3, r3, r6
 8015aae:	60a3      	str	r3, [r4, #8]
 8015ab0:	6823      	ldr	r3, [r4, #0]
 8015ab2:	4433      	add	r3, r6
 8015ab4:	6023      	str	r3, [r4, #0]
 8015ab6:	2000      	movs	r0, #0
 8015ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015abc:	462a      	mov	r2, r5
 8015abe:	f000 fbd6 	bl	801626e <_realloc_r>
 8015ac2:	4606      	mov	r6, r0
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	d1e0      	bne.n	8015a8a <__ssputs_r+0x5c>
 8015ac8:	6921      	ldr	r1, [r4, #16]
 8015aca:	4650      	mov	r0, sl
 8015acc:	f7fe feac 	bl	8014828 <_free_r>
 8015ad0:	230c      	movs	r3, #12
 8015ad2:	f8ca 3000 	str.w	r3, [sl]
 8015ad6:	89a3      	ldrh	r3, [r4, #12]
 8015ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015adc:	81a3      	strh	r3, [r4, #12]
 8015ade:	f04f 30ff 	mov.w	r0, #4294967295
 8015ae2:	e7e9      	b.n	8015ab8 <__ssputs_r+0x8a>

08015ae4 <_svfiprintf_r>:
 8015ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ae8:	4698      	mov	r8, r3
 8015aea:	898b      	ldrh	r3, [r1, #12]
 8015aec:	061b      	lsls	r3, r3, #24
 8015aee:	b09d      	sub	sp, #116	@ 0x74
 8015af0:	4607      	mov	r7, r0
 8015af2:	460d      	mov	r5, r1
 8015af4:	4614      	mov	r4, r2
 8015af6:	d510      	bpl.n	8015b1a <_svfiprintf_r+0x36>
 8015af8:	690b      	ldr	r3, [r1, #16]
 8015afa:	b973      	cbnz	r3, 8015b1a <_svfiprintf_r+0x36>
 8015afc:	2140      	movs	r1, #64	@ 0x40
 8015afe:	f7ff fa41 	bl	8014f84 <_malloc_r>
 8015b02:	6028      	str	r0, [r5, #0]
 8015b04:	6128      	str	r0, [r5, #16]
 8015b06:	b930      	cbnz	r0, 8015b16 <_svfiprintf_r+0x32>
 8015b08:	230c      	movs	r3, #12
 8015b0a:	603b      	str	r3, [r7, #0]
 8015b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b10:	b01d      	add	sp, #116	@ 0x74
 8015b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b16:	2340      	movs	r3, #64	@ 0x40
 8015b18:	616b      	str	r3, [r5, #20]
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b1e:	2320      	movs	r3, #32
 8015b20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b28:	2330      	movs	r3, #48	@ 0x30
 8015b2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015cc8 <_svfiprintf_r+0x1e4>
 8015b2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015b32:	f04f 0901 	mov.w	r9, #1
 8015b36:	4623      	mov	r3, r4
 8015b38:	469a      	mov	sl, r3
 8015b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b3e:	b10a      	cbz	r2, 8015b44 <_svfiprintf_r+0x60>
 8015b40:	2a25      	cmp	r2, #37	@ 0x25
 8015b42:	d1f9      	bne.n	8015b38 <_svfiprintf_r+0x54>
 8015b44:	ebba 0b04 	subs.w	fp, sl, r4
 8015b48:	d00b      	beq.n	8015b62 <_svfiprintf_r+0x7e>
 8015b4a:	465b      	mov	r3, fp
 8015b4c:	4622      	mov	r2, r4
 8015b4e:	4629      	mov	r1, r5
 8015b50:	4638      	mov	r0, r7
 8015b52:	f7ff ff6c 	bl	8015a2e <__ssputs_r>
 8015b56:	3001      	adds	r0, #1
 8015b58:	f000 80a7 	beq.w	8015caa <_svfiprintf_r+0x1c6>
 8015b5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015b5e:	445a      	add	r2, fp
 8015b60:	9209      	str	r2, [sp, #36]	@ 0x24
 8015b62:	f89a 3000 	ldrb.w	r3, [sl]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	f000 809f 	beq.w	8015caa <_svfiprintf_r+0x1c6>
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8015b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b76:	f10a 0a01 	add.w	sl, sl, #1
 8015b7a:	9304      	str	r3, [sp, #16]
 8015b7c:	9307      	str	r3, [sp, #28]
 8015b7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015b82:	931a      	str	r3, [sp, #104]	@ 0x68
 8015b84:	4654      	mov	r4, sl
 8015b86:	2205      	movs	r2, #5
 8015b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b8c:	484e      	ldr	r0, [pc, #312]	@ (8015cc8 <_svfiprintf_r+0x1e4>)
 8015b8e:	f7ea fb3f 	bl	8000210 <memchr>
 8015b92:	9a04      	ldr	r2, [sp, #16]
 8015b94:	b9d8      	cbnz	r0, 8015bce <_svfiprintf_r+0xea>
 8015b96:	06d0      	lsls	r0, r2, #27
 8015b98:	bf44      	itt	mi
 8015b9a:	2320      	movmi	r3, #32
 8015b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ba0:	0711      	lsls	r1, r2, #28
 8015ba2:	bf44      	itt	mi
 8015ba4:	232b      	movmi	r3, #43	@ 0x2b
 8015ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015baa:	f89a 3000 	ldrb.w	r3, [sl]
 8015bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8015bb0:	d015      	beq.n	8015bde <_svfiprintf_r+0xfa>
 8015bb2:	9a07      	ldr	r2, [sp, #28]
 8015bb4:	4654      	mov	r4, sl
 8015bb6:	2000      	movs	r0, #0
 8015bb8:	f04f 0c0a 	mov.w	ip, #10
 8015bbc:	4621      	mov	r1, r4
 8015bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015bc2:	3b30      	subs	r3, #48	@ 0x30
 8015bc4:	2b09      	cmp	r3, #9
 8015bc6:	d94b      	bls.n	8015c60 <_svfiprintf_r+0x17c>
 8015bc8:	b1b0      	cbz	r0, 8015bf8 <_svfiprintf_r+0x114>
 8015bca:	9207      	str	r2, [sp, #28]
 8015bcc:	e014      	b.n	8015bf8 <_svfiprintf_r+0x114>
 8015bce:	eba0 0308 	sub.w	r3, r0, r8
 8015bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8015bd6:	4313      	orrs	r3, r2
 8015bd8:	9304      	str	r3, [sp, #16]
 8015bda:	46a2      	mov	sl, r4
 8015bdc:	e7d2      	b.n	8015b84 <_svfiprintf_r+0xa0>
 8015bde:	9b03      	ldr	r3, [sp, #12]
 8015be0:	1d19      	adds	r1, r3, #4
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	9103      	str	r1, [sp, #12]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	bfbb      	ittet	lt
 8015bea:	425b      	neglt	r3, r3
 8015bec:	f042 0202 	orrlt.w	r2, r2, #2
 8015bf0:	9307      	strge	r3, [sp, #28]
 8015bf2:	9307      	strlt	r3, [sp, #28]
 8015bf4:	bfb8      	it	lt
 8015bf6:	9204      	strlt	r2, [sp, #16]
 8015bf8:	7823      	ldrb	r3, [r4, #0]
 8015bfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8015bfc:	d10a      	bne.n	8015c14 <_svfiprintf_r+0x130>
 8015bfe:	7863      	ldrb	r3, [r4, #1]
 8015c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c02:	d132      	bne.n	8015c6a <_svfiprintf_r+0x186>
 8015c04:	9b03      	ldr	r3, [sp, #12]
 8015c06:	1d1a      	adds	r2, r3, #4
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	9203      	str	r2, [sp, #12]
 8015c0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015c10:	3402      	adds	r4, #2
 8015c12:	9305      	str	r3, [sp, #20]
 8015c14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015cd8 <_svfiprintf_r+0x1f4>
 8015c18:	7821      	ldrb	r1, [r4, #0]
 8015c1a:	2203      	movs	r2, #3
 8015c1c:	4650      	mov	r0, sl
 8015c1e:	f7ea faf7 	bl	8000210 <memchr>
 8015c22:	b138      	cbz	r0, 8015c34 <_svfiprintf_r+0x150>
 8015c24:	9b04      	ldr	r3, [sp, #16]
 8015c26:	eba0 000a 	sub.w	r0, r0, sl
 8015c2a:	2240      	movs	r2, #64	@ 0x40
 8015c2c:	4082      	lsls	r2, r0
 8015c2e:	4313      	orrs	r3, r2
 8015c30:	3401      	adds	r4, #1
 8015c32:	9304      	str	r3, [sp, #16]
 8015c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c38:	4824      	ldr	r0, [pc, #144]	@ (8015ccc <_svfiprintf_r+0x1e8>)
 8015c3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015c3e:	2206      	movs	r2, #6
 8015c40:	f7ea fae6 	bl	8000210 <memchr>
 8015c44:	2800      	cmp	r0, #0
 8015c46:	d036      	beq.n	8015cb6 <_svfiprintf_r+0x1d2>
 8015c48:	4b21      	ldr	r3, [pc, #132]	@ (8015cd0 <_svfiprintf_r+0x1ec>)
 8015c4a:	bb1b      	cbnz	r3, 8015c94 <_svfiprintf_r+0x1b0>
 8015c4c:	9b03      	ldr	r3, [sp, #12]
 8015c4e:	3307      	adds	r3, #7
 8015c50:	f023 0307 	bic.w	r3, r3, #7
 8015c54:	3308      	adds	r3, #8
 8015c56:	9303      	str	r3, [sp, #12]
 8015c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c5a:	4433      	add	r3, r6
 8015c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c5e:	e76a      	b.n	8015b36 <_svfiprintf_r+0x52>
 8015c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c64:	460c      	mov	r4, r1
 8015c66:	2001      	movs	r0, #1
 8015c68:	e7a8      	b.n	8015bbc <_svfiprintf_r+0xd8>
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	3401      	adds	r4, #1
 8015c6e:	9305      	str	r3, [sp, #20]
 8015c70:	4619      	mov	r1, r3
 8015c72:	f04f 0c0a 	mov.w	ip, #10
 8015c76:	4620      	mov	r0, r4
 8015c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c7c:	3a30      	subs	r2, #48	@ 0x30
 8015c7e:	2a09      	cmp	r2, #9
 8015c80:	d903      	bls.n	8015c8a <_svfiprintf_r+0x1a6>
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d0c6      	beq.n	8015c14 <_svfiprintf_r+0x130>
 8015c86:	9105      	str	r1, [sp, #20]
 8015c88:	e7c4      	b.n	8015c14 <_svfiprintf_r+0x130>
 8015c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c8e:	4604      	mov	r4, r0
 8015c90:	2301      	movs	r3, #1
 8015c92:	e7f0      	b.n	8015c76 <_svfiprintf_r+0x192>
 8015c94:	ab03      	add	r3, sp, #12
 8015c96:	9300      	str	r3, [sp, #0]
 8015c98:	462a      	mov	r2, r5
 8015c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8015cd4 <_svfiprintf_r+0x1f0>)
 8015c9c:	a904      	add	r1, sp, #16
 8015c9e:	4638      	mov	r0, r7
 8015ca0:	f7fc ffde 	bl	8012c60 <_printf_float>
 8015ca4:	1c42      	adds	r2, r0, #1
 8015ca6:	4606      	mov	r6, r0
 8015ca8:	d1d6      	bne.n	8015c58 <_svfiprintf_r+0x174>
 8015caa:	89ab      	ldrh	r3, [r5, #12]
 8015cac:	065b      	lsls	r3, r3, #25
 8015cae:	f53f af2d 	bmi.w	8015b0c <_svfiprintf_r+0x28>
 8015cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015cb4:	e72c      	b.n	8015b10 <_svfiprintf_r+0x2c>
 8015cb6:	ab03      	add	r3, sp, #12
 8015cb8:	9300      	str	r3, [sp, #0]
 8015cba:	462a      	mov	r2, r5
 8015cbc:	4b05      	ldr	r3, [pc, #20]	@ (8015cd4 <_svfiprintf_r+0x1f0>)
 8015cbe:	a904      	add	r1, sp, #16
 8015cc0:	4638      	mov	r0, r7
 8015cc2:	f7fd fa65 	bl	8013190 <_printf_i>
 8015cc6:	e7ed      	b.n	8015ca4 <_svfiprintf_r+0x1c0>
 8015cc8:	080169a2 	.word	0x080169a2
 8015ccc:	080169ac 	.word	0x080169ac
 8015cd0:	08012c61 	.word	0x08012c61
 8015cd4:	08015a2f 	.word	0x08015a2f
 8015cd8:	080169a8 	.word	0x080169a8

08015cdc <__sfputc_r>:
 8015cdc:	6893      	ldr	r3, [r2, #8]
 8015cde:	3b01      	subs	r3, #1
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	b410      	push	{r4}
 8015ce4:	6093      	str	r3, [r2, #8]
 8015ce6:	da08      	bge.n	8015cfa <__sfputc_r+0x1e>
 8015ce8:	6994      	ldr	r4, [r2, #24]
 8015cea:	42a3      	cmp	r3, r4
 8015cec:	db01      	blt.n	8015cf2 <__sfputc_r+0x16>
 8015cee:	290a      	cmp	r1, #10
 8015cf0:	d103      	bne.n	8015cfa <__sfputc_r+0x1e>
 8015cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cf6:	f7fd bd14 	b.w	8013722 <__swbuf_r>
 8015cfa:	6813      	ldr	r3, [r2, #0]
 8015cfc:	1c58      	adds	r0, r3, #1
 8015cfe:	6010      	str	r0, [r2, #0]
 8015d00:	7019      	strb	r1, [r3, #0]
 8015d02:	4608      	mov	r0, r1
 8015d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d08:	4770      	bx	lr

08015d0a <__sfputs_r>:
 8015d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d0c:	4606      	mov	r6, r0
 8015d0e:	460f      	mov	r7, r1
 8015d10:	4614      	mov	r4, r2
 8015d12:	18d5      	adds	r5, r2, r3
 8015d14:	42ac      	cmp	r4, r5
 8015d16:	d101      	bne.n	8015d1c <__sfputs_r+0x12>
 8015d18:	2000      	movs	r0, #0
 8015d1a:	e007      	b.n	8015d2c <__sfputs_r+0x22>
 8015d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d20:	463a      	mov	r2, r7
 8015d22:	4630      	mov	r0, r6
 8015d24:	f7ff ffda 	bl	8015cdc <__sfputc_r>
 8015d28:	1c43      	adds	r3, r0, #1
 8015d2a:	d1f3      	bne.n	8015d14 <__sfputs_r+0xa>
 8015d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015d30 <_vfiprintf_r>:
 8015d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d34:	460d      	mov	r5, r1
 8015d36:	b09d      	sub	sp, #116	@ 0x74
 8015d38:	4614      	mov	r4, r2
 8015d3a:	4698      	mov	r8, r3
 8015d3c:	4606      	mov	r6, r0
 8015d3e:	b118      	cbz	r0, 8015d48 <_vfiprintf_r+0x18>
 8015d40:	6a03      	ldr	r3, [r0, #32]
 8015d42:	b90b      	cbnz	r3, 8015d48 <_vfiprintf_r+0x18>
 8015d44:	f7fd fbce 	bl	80134e4 <__sinit>
 8015d48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015d4a:	07d9      	lsls	r1, r3, #31
 8015d4c:	d405      	bmi.n	8015d5a <_vfiprintf_r+0x2a>
 8015d4e:	89ab      	ldrh	r3, [r5, #12]
 8015d50:	059a      	lsls	r2, r3, #22
 8015d52:	d402      	bmi.n	8015d5a <_vfiprintf_r+0x2a>
 8015d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015d56:	f7fd fed0 	bl	8013afa <__retarget_lock_acquire_recursive>
 8015d5a:	89ab      	ldrh	r3, [r5, #12]
 8015d5c:	071b      	lsls	r3, r3, #28
 8015d5e:	d501      	bpl.n	8015d64 <_vfiprintf_r+0x34>
 8015d60:	692b      	ldr	r3, [r5, #16]
 8015d62:	b99b      	cbnz	r3, 8015d8c <_vfiprintf_r+0x5c>
 8015d64:	4629      	mov	r1, r5
 8015d66:	4630      	mov	r0, r6
 8015d68:	f7fd fd1a 	bl	80137a0 <__swsetup_r>
 8015d6c:	b170      	cbz	r0, 8015d8c <_vfiprintf_r+0x5c>
 8015d6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015d70:	07dc      	lsls	r4, r3, #31
 8015d72:	d504      	bpl.n	8015d7e <_vfiprintf_r+0x4e>
 8015d74:	f04f 30ff 	mov.w	r0, #4294967295
 8015d78:	b01d      	add	sp, #116	@ 0x74
 8015d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d7e:	89ab      	ldrh	r3, [r5, #12]
 8015d80:	0598      	lsls	r0, r3, #22
 8015d82:	d4f7      	bmi.n	8015d74 <_vfiprintf_r+0x44>
 8015d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015d86:	f7fd feb9 	bl	8013afc <__retarget_lock_release_recursive>
 8015d8a:	e7f3      	b.n	8015d74 <_vfiprintf_r+0x44>
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d90:	2320      	movs	r3, #32
 8015d92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d9a:	2330      	movs	r3, #48	@ 0x30
 8015d9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015f4c <_vfiprintf_r+0x21c>
 8015da0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015da4:	f04f 0901 	mov.w	r9, #1
 8015da8:	4623      	mov	r3, r4
 8015daa:	469a      	mov	sl, r3
 8015dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015db0:	b10a      	cbz	r2, 8015db6 <_vfiprintf_r+0x86>
 8015db2:	2a25      	cmp	r2, #37	@ 0x25
 8015db4:	d1f9      	bne.n	8015daa <_vfiprintf_r+0x7a>
 8015db6:	ebba 0b04 	subs.w	fp, sl, r4
 8015dba:	d00b      	beq.n	8015dd4 <_vfiprintf_r+0xa4>
 8015dbc:	465b      	mov	r3, fp
 8015dbe:	4622      	mov	r2, r4
 8015dc0:	4629      	mov	r1, r5
 8015dc2:	4630      	mov	r0, r6
 8015dc4:	f7ff ffa1 	bl	8015d0a <__sfputs_r>
 8015dc8:	3001      	adds	r0, #1
 8015dca:	f000 80a7 	beq.w	8015f1c <_vfiprintf_r+0x1ec>
 8015dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015dd0:	445a      	add	r2, fp
 8015dd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8015dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	f000 809f 	beq.w	8015f1c <_vfiprintf_r+0x1ec>
 8015dde:	2300      	movs	r3, #0
 8015de0:	f04f 32ff 	mov.w	r2, #4294967295
 8015de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015de8:	f10a 0a01 	add.w	sl, sl, #1
 8015dec:	9304      	str	r3, [sp, #16]
 8015dee:	9307      	str	r3, [sp, #28]
 8015df0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015df4:	931a      	str	r3, [sp, #104]	@ 0x68
 8015df6:	4654      	mov	r4, sl
 8015df8:	2205      	movs	r2, #5
 8015dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dfe:	4853      	ldr	r0, [pc, #332]	@ (8015f4c <_vfiprintf_r+0x21c>)
 8015e00:	f7ea fa06 	bl	8000210 <memchr>
 8015e04:	9a04      	ldr	r2, [sp, #16]
 8015e06:	b9d8      	cbnz	r0, 8015e40 <_vfiprintf_r+0x110>
 8015e08:	06d1      	lsls	r1, r2, #27
 8015e0a:	bf44      	itt	mi
 8015e0c:	2320      	movmi	r3, #32
 8015e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e12:	0713      	lsls	r3, r2, #28
 8015e14:	bf44      	itt	mi
 8015e16:	232b      	movmi	r3, #43	@ 0x2b
 8015e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8015e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8015e22:	d015      	beq.n	8015e50 <_vfiprintf_r+0x120>
 8015e24:	9a07      	ldr	r2, [sp, #28]
 8015e26:	4654      	mov	r4, sl
 8015e28:	2000      	movs	r0, #0
 8015e2a:	f04f 0c0a 	mov.w	ip, #10
 8015e2e:	4621      	mov	r1, r4
 8015e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e34:	3b30      	subs	r3, #48	@ 0x30
 8015e36:	2b09      	cmp	r3, #9
 8015e38:	d94b      	bls.n	8015ed2 <_vfiprintf_r+0x1a2>
 8015e3a:	b1b0      	cbz	r0, 8015e6a <_vfiprintf_r+0x13a>
 8015e3c:	9207      	str	r2, [sp, #28]
 8015e3e:	e014      	b.n	8015e6a <_vfiprintf_r+0x13a>
 8015e40:	eba0 0308 	sub.w	r3, r0, r8
 8015e44:	fa09 f303 	lsl.w	r3, r9, r3
 8015e48:	4313      	orrs	r3, r2
 8015e4a:	9304      	str	r3, [sp, #16]
 8015e4c:	46a2      	mov	sl, r4
 8015e4e:	e7d2      	b.n	8015df6 <_vfiprintf_r+0xc6>
 8015e50:	9b03      	ldr	r3, [sp, #12]
 8015e52:	1d19      	adds	r1, r3, #4
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	9103      	str	r1, [sp, #12]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	bfbb      	ittet	lt
 8015e5c:	425b      	neglt	r3, r3
 8015e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8015e62:	9307      	strge	r3, [sp, #28]
 8015e64:	9307      	strlt	r3, [sp, #28]
 8015e66:	bfb8      	it	lt
 8015e68:	9204      	strlt	r2, [sp, #16]
 8015e6a:	7823      	ldrb	r3, [r4, #0]
 8015e6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8015e6e:	d10a      	bne.n	8015e86 <_vfiprintf_r+0x156>
 8015e70:	7863      	ldrb	r3, [r4, #1]
 8015e72:	2b2a      	cmp	r3, #42	@ 0x2a
 8015e74:	d132      	bne.n	8015edc <_vfiprintf_r+0x1ac>
 8015e76:	9b03      	ldr	r3, [sp, #12]
 8015e78:	1d1a      	adds	r2, r3, #4
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	9203      	str	r2, [sp, #12]
 8015e7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015e82:	3402      	adds	r4, #2
 8015e84:	9305      	str	r3, [sp, #20]
 8015e86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015f5c <_vfiprintf_r+0x22c>
 8015e8a:	7821      	ldrb	r1, [r4, #0]
 8015e8c:	2203      	movs	r2, #3
 8015e8e:	4650      	mov	r0, sl
 8015e90:	f7ea f9be 	bl	8000210 <memchr>
 8015e94:	b138      	cbz	r0, 8015ea6 <_vfiprintf_r+0x176>
 8015e96:	9b04      	ldr	r3, [sp, #16]
 8015e98:	eba0 000a 	sub.w	r0, r0, sl
 8015e9c:	2240      	movs	r2, #64	@ 0x40
 8015e9e:	4082      	lsls	r2, r0
 8015ea0:	4313      	orrs	r3, r2
 8015ea2:	3401      	adds	r4, #1
 8015ea4:	9304      	str	r3, [sp, #16]
 8015ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eaa:	4829      	ldr	r0, [pc, #164]	@ (8015f50 <_vfiprintf_r+0x220>)
 8015eac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015eb0:	2206      	movs	r2, #6
 8015eb2:	f7ea f9ad 	bl	8000210 <memchr>
 8015eb6:	2800      	cmp	r0, #0
 8015eb8:	d03f      	beq.n	8015f3a <_vfiprintf_r+0x20a>
 8015eba:	4b26      	ldr	r3, [pc, #152]	@ (8015f54 <_vfiprintf_r+0x224>)
 8015ebc:	bb1b      	cbnz	r3, 8015f06 <_vfiprintf_r+0x1d6>
 8015ebe:	9b03      	ldr	r3, [sp, #12]
 8015ec0:	3307      	adds	r3, #7
 8015ec2:	f023 0307 	bic.w	r3, r3, #7
 8015ec6:	3308      	adds	r3, #8
 8015ec8:	9303      	str	r3, [sp, #12]
 8015eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ecc:	443b      	add	r3, r7
 8015ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ed0:	e76a      	b.n	8015da8 <_vfiprintf_r+0x78>
 8015ed2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ed6:	460c      	mov	r4, r1
 8015ed8:	2001      	movs	r0, #1
 8015eda:	e7a8      	b.n	8015e2e <_vfiprintf_r+0xfe>
 8015edc:	2300      	movs	r3, #0
 8015ede:	3401      	adds	r4, #1
 8015ee0:	9305      	str	r3, [sp, #20]
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	f04f 0c0a 	mov.w	ip, #10
 8015ee8:	4620      	mov	r0, r4
 8015eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015eee:	3a30      	subs	r2, #48	@ 0x30
 8015ef0:	2a09      	cmp	r2, #9
 8015ef2:	d903      	bls.n	8015efc <_vfiprintf_r+0x1cc>
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d0c6      	beq.n	8015e86 <_vfiprintf_r+0x156>
 8015ef8:	9105      	str	r1, [sp, #20]
 8015efa:	e7c4      	b.n	8015e86 <_vfiprintf_r+0x156>
 8015efc:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f00:	4604      	mov	r4, r0
 8015f02:	2301      	movs	r3, #1
 8015f04:	e7f0      	b.n	8015ee8 <_vfiprintf_r+0x1b8>
 8015f06:	ab03      	add	r3, sp, #12
 8015f08:	9300      	str	r3, [sp, #0]
 8015f0a:	462a      	mov	r2, r5
 8015f0c:	4b12      	ldr	r3, [pc, #72]	@ (8015f58 <_vfiprintf_r+0x228>)
 8015f0e:	a904      	add	r1, sp, #16
 8015f10:	4630      	mov	r0, r6
 8015f12:	f7fc fea5 	bl	8012c60 <_printf_float>
 8015f16:	4607      	mov	r7, r0
 8015f18:	1c78      	adds	r0, r7, #1
 8015f1a:	d1d6      	bne.n	8015eca <_vfiprintf_r+0x19a>
 8015f1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f1e:	07d9      	lsls	r1, r3, #31
 8015f20:	d405      	bmi.n	8015f2e <_vfiprintf_r+0x1fe>
 8015f22:	89ab      	ldrh	r3, [r5, #12]
 8015f24:	059a      	lsls	r2, r3, #22
 8015f26:	d402      	bmi.n	8015f2e <_vfiprintf_r+0x1fe>
 8015f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f2a:	f7fd fde7 	bl	8013afc <__retarget_lock_release_recursive>
 8015f2e:	89ab      	ldrh	r3, [r5, #12]
 8015f30:	065b      	lsls	r3, r3, #25
 8015f32:	f53f af1f 	bmi.w	8015d74 <_vfiprintf_r+0x44>
 8015f36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015f38:	e71e      	b.n	8015d78 <_vfiprintf_r+0x48>
 8015f3a:	ab03      	add	r3, sp, #12
 8015f3c:	9300      	str	r3, [sp, #0]
 8015f3e:	462a      	mov	r2, r5
 8015f40:	4b05      	ldr	r3, [pc, #20]	@ (8015f58 <_vfiprintf_r+0x228>)
 8015f42:	a904      	add	r1, sp, #16
 8015f44:	4630      	mov	r0, r6
 8015f46:	f7fd f923 	bl	8013190 <_printf_i>
 8015f4a:	e7e4      	b.n	8015f16 <_vfiprintf_r+0x1e6>
 8015f4c:	080169a2 	.word	0x080169a2
 8015f50:	080169ac 	.word	0x080169ac
 8015f54:	08012c61 	.word	0x08012c61
 8015f58:	08015d0b 	.word	0x08015d0b
 8015f5c:	080169a8 	.word	0x080169a8

08015f60 <__sflush_r>:
 8015f60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f68:	0716      	lsls	r6, r2, #28
 8015f6a:	4605      	mov	r5, r0
 8015f6c:	460c      	mov	r4, r1
 8015f6e:	d454      	bmi.n	801601a <__sflush_r+0xba>
 8015f70:	684b      	ldr	r3, [r1, #4]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	dc02      	bgt.n	8015f7c <__sflush_r+0x1c>
 8015f76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	dd48      	ble.n	801600e <__sflush_r+0xae>
 8015f7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015f7e:	2e00      	cmp	r6, #0
 8015f80:	d045      	beq.n	801600e <__sflush_r+0xae>
 8015f82:	2300      	movs	r3, #0
 8015f84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015f88:	682f      	ldr	r7, [r5, #0]
 8015f8a:	6a21      	ldr	r1, [r4, #32]
 8015f8c:	602b      	str	r3, [r5, #0]
 8015f8e:	d030      	beq.n	8015ff2 <__sflush_r+0x92>
 8015f90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015f92:	89a3      	ldrh	r3, [r4, #12]
 8015f94:	0759      	lsls	r1, r3, #29
 8015f96:	d505      	bpl.n	8015fa4 <__sflush_r+0x44>
 8015f98:	6863      	ldr	r3, [r4, #4]
 8015f9a:	1ad2      	subs	r2, r2, r3
 8015f9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015f9e:	b10b      	cbz	r3, 8015fa4 <__sflush_r+0x44>
 8015fa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015fa2:	1ad2      	subs	r2, r2, r3
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015fa8:	6a21      	ldr	r1, [r4, #32]
 8015faa:	4628      	mov	r0, r5
 8015fac:	47b0      	blx	r6
 8015fae:	1c43      	adds	r3, r0, #1
 8015fb0:	89a3      	ldrh	r3, [r4, #12]
 8015fb2:	d106      	bne.n	8015fc2 <__sflush_r+0x62>
 8015fb4:	6829      	ldr	r1, [r5, #0]
 8015fb6:	291d      	cmp	r1, #29
 8015fb8:	d82b      	bhi.n	8016012 <__sflush_r+0xb2>
 8015fba:	4a2a      	ldr	r2, [pc, #168]	@ (8016064 <__sflush_r+0x104>)
 8015fbc:	40ca      	lsrs	r2, r1
 8015fbe:	07d6      	lsls	r6, r2, #31
 8015fc0:	d527      	bpl.n	8016012 <__sflush_r+0xb2>
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	6062      	str	r2, [r4, #4]
 8015fc6:	04d9      	lsls	r1, r3, #19
 8015fc8:	6922      	ldr	r2, [r4, #16]
 8015fca:	6022      	str	r2, [r4, #0]
 8015fcc:	d504      	bpl.n	8015fd8 <__sflush_r+0x78>
 8015fce:	1c42      	adds	r2, r0, #1
 8015fd0:	d101      	bne.n	8015fd6 <__sflush_r+0x76>
 8015fd2:	682b      	ldr	r3, [r5, #0]
 8015fd4:	b903      	cbnz	r3, 8015fd8 <__sflush_r+0x78>
 8015fd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8015fd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015fda:	602f      	str	r7, [r5, #0]
 8015fdc:	b1b9      	cbz	r1, 801600e <__sflush_r+0xae>
 8015fde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015fe2:	4299      	cmp	r1, r3
 8015fe4:	d002      	beq.n	8015fec <__sflush_r+0x8c>
 8015fe6:	4628      	mov	r0, r5
 8015fe8:	f7fe fc1e 	bl	8014828 <_free_r>
 8015fec:	2300      	movs	r3, #0
 8015fee:	6363      	str	r3, [r4, #52]	@ 0x34
 8015ff0:	e00d      	b.n	801600e <__sflush_r+0xae>
 8015ff2:	2301      	movs	r3, #1
 8015ff4:	4628      	mov	r0, r5
 8015ff6:	47b0      	blx	r6
 8015ff8:	4602      	mov	r2, r0
 8015ffa:	1c50      	adds	r0, r2, #1
 8015ffc:	d1c9      	bne.n	8015f92 <__sflush_r+0x32>
 8015ffe:	682b      	ldr	r3, [r5, #0]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d0c6      	beq.n	8015f92 <__sflush_r+0x32>
 8016004:	2b1d      	cmp	r3, #29
 8016006:	d001      	beq.n	801600c <__sflush_r+0xac>
 8016008:	2b16      	cmp	r3, #22
 801600a:	d11e      	bne.n	801604a <__sflush_r+0xea>
 801600c:	602f      	str	r7, [r5, #0]
 801600e:	2000      	movs	r0, #0
 8016010:	e022      	b.n	8016058 <__sflush_r+0xf8>
 8016012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016016:	b21b      	sxth	r3, r3
 8016018:	e01b      	b.n	8016052 <__sflush_r+0xf2>
 801601a:	690f      	ldr	r7, [r1, #16]
 801601c:	2f00      	cmp	r7, #0
 801601e:	d0f6      	beq.n	801600e <__sflush_r+0xae>
 8016020:	0793      	lsls	r3, r2, #30
 8016022:	680e      	ldr	r6, [r1, #0]
 8016024:	bf08      	it	eq
 8016026:	694b      	ldreq	r3, [r1, #20]
 8016028:	600f      	str	r7, [r1, #0]
 801602a:	bf18      	it	ne
 801602c:	2300      	movne	r3, #0
 801602e:	eba6 0807 	sub.w	r8, r6, r7
 8016032:	608b      	str	r3, [r1, #8]
 8016034:	f1b8 0f00 	cmp.w	r8, #0
 8016038:	dde9      	ble.n	801600e <__sflush_r+0xae>
 801603a:	6a21      	ldr	r1, [r4, #32]
 801603c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801603e:	4643      	mov	r3, r8
 8016040:	463a      	mov	r2, r7
 8016042:	4628      	mov	r0, r5
 8016044:	47b0      	blx	r6
 8016046:	2800      	cmp	r0, #0
 8016048:	dc08      	bgt.n	801605c <__sflush_r+0xfc>
 801604a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801604e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016052:	81a3      	strh	r3, [r4, #12]
 8016054:	f04f 30ff 	mov.w	r0, #4294967295
 8016058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801605c:	4407      	add	r7, r0
 801605e:	eba8 0800 	sub.w	r8, r8, r0
 8016062:	e7e7      	b.n	8016034 <__sflush_r+0xd4>
 8016064:	20400001 	.word	0x20400001

08016068 <_fflush_r>:
 8016068:	b538      	push	{r3, r4, r5, lr}
 801606a:	690b      	ldr	r3, [r1, #16]
 801606c:	4605      	mov	r5, r0
 801606e:	460c      	mov	r4, r1
 8016070:	b913      	cbnz	r3, 8016078 <_fflush_r+0x10>
 8016072:	2500      	movs	r5, #0
 8016074:	4628      	mov	r0, r5
 8016076:	bd38      	pop	{r3, r4, r5, pc}
 8016078:	b118      	cbz	r0, 8016082 <_fflush_r+0x1a>
 801607a:	6a03      	ldr	r3, [r0, #32]
 801607c:	b90b      	cbnz	r3, 8016082 <_fflush_r+0x1a>
 801607e:	f7fd fa31 	bl	80134e4 <__sinit>
 8016082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d0f3      	beq.n	8016072 <_fflush_r+0xa>
 801608a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801608c:	07d0      	lsls	r0, r2, #31
 801608e:	d404      	bmi.n	801609a <_fflush_r+0x32>
 8016090:	0599      	lsls	r1, r3, #22
 8016092:	d402      	bmi.n	801609a <_fflush_r+0x32>
 8016094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016096:	f7fd fd30 	bl	8013afa <__retarget_lock_acquire_recursive>
 801609a:	4628      	mov	r0, r5
 801609c:	4621      	mov	r1, r4
 801609e:	f7ff ff5f 	bl	8015f60 <__sflush_r>
 80160a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80160a4:	07da      	lsls	r2, r3, #31
 80160a6:	4605      	mov	r5, r0
 80160a8:	d4e4      	bmi.n	8016074 <_fflush_r+0xc>
 80160aa:	89a3      	ldrh	r3, [r4, #12]
 80160ac:	059b      	lsls	r3, r3, #22
 80160ae:	d4e1      	bmi.n	8016074 <_fflush_r+0xc>
 80160b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80160b2:	f7fd fd23 	bl	8013afc <__retarget_lock_release_recursive>
 80160b6:	e7dd      	b.n	8016074 <_fflush_r+0xc>

080160b8 <fiprintf>:
 80160b8:	b40e      	push	{r1, r2, r3}
 80160ba:	b503      	push	{r0, r1, lr}
 80160bc:	4601      	mov	r1, r0
 80160be:	ab03      	add	r3, sp, #12
 80160c0:	4805      	ldr	r0, [pc, #20]	@ (80160d8 <fiprintf+0x20>)
 80160c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80160c6:	6800      	ldr	r0, [r0, #0]
 80160c8:	9301      	str	r3, [sp, #4]
 80160ca:	f7ff fe31 	bl	8015d30 <_vfiprintf_r>
 80160ce:	b002      	add	sp, #8
 80160d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80160d4:	b003      	add	sp, #12
 80160d6:	4770      	bx	lr
 80160d8:	2000018c 	.word	0x2000018c

080160dc <__swhatbuf_r>:
 80160dc:	b570      	push	{r4, r5, r6, lr}
 80160de:	460c      	mov	r4, r1
 80160e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160e4:	2900      	cmp	r1, #0
 80160e6:	b096      	sub	sp, #88	@ 0x58
 80160e8:	4615      	mov	r5, r2
 80160ea:	461e      	mov	r6, r3
 80160ec:	da0d      	bge.n	801610a <__swhatbuf_r+0x2e>
 80160ee:	89a3      	ldrh	r3, [r4, #12]
 80160f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80160f4:	f04f 0100 	mov.w	r1, #0
 80160f8:	bf14      	ite	ne
 80160fa:	2340      	movne	r3, #64	@ 0x40
 80160fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016100:	2000      	movs	r0, #0
 8016102:	6031      	str	r1, [r6, #0]
 8016104:	602b      	str	r3, [r5, #0]
 8016106:	b016      	add	sp, #88	@ 0x58
 8016108:	bd70      	pop	{r4, r5, r6, pc}
 801610a:	466a      	mov	r2, sp
 801610c:	f000 f862 	bl	80161d4 <_fstat_r>
 8016110:	2800      	cmp	r0, #0
 8016112:	dbec      	blt.n	80160ee <__swhatbuf_r+0x12>
 8016114:	9901      	ldr	r1, [sp, #4]
 8016116:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801611a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801611e:	4259      	negs	r1, r3
 8016120:	4159      	adcs	r1, r3
 8016122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016126:	e7eb      	b.n	8016100 <__swhatbuf_r+0x24>

08016128 <__smakebuf_r>:
 8016128:	898b      	ldrh	r3, [r1, #12]
 801612a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801612c:	079d      	lsls	r5, r3, #30
 801612e:	4606      	mov	r6, r0
 8016130:	460c      	mov	r4, r1
 8016132:	d507      	bpl.n	8016144 <__smakebuf_r+0x1c>
 8016134:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016138:	6023      	str	r3, [r4, #0]
 801613a:	6123      	str	r3, [r4, #16]
 801613c:	2301      	movs	r3, #1
 801613e:	6163      	str	r3, [r4, #20]
 8016140:	b003      	add	sp, #12
 8016142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016144:	ab01      	add	r3, sp, #4
 8016146:	466a      	mov	r2, sp
 8016148:	f7ff ffc8 	bl	80160dc <__swhatbuf_r>
 801614c:	9f00      	ldr	r7, [sp, #0]
 801614e:	4605      	mov	r5, r0
 8016150:	4639      	mov	r1, r7
 8016152:	4630      	mov	r0, r6
 8016154:	f7fe ff16 	bl	8014f84 <_malloc_r>
 8016158:	b948      	cbnz	r0, 801616e <__smakebuf_r+0x46>
 801615a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801615e:	059a      	lsls	r2, r3, #22
 8016160:	d4ee      	bmi.n	8016140 <__smakebuf_r+0x18>
 8016162:	f023 0303 	bic.w	r3, r3, #3
 8016166:	f043 0302 	orr.w	r3, r3, #2
 801616a:	81a3      	strh	r3, [r4, #12]
 801616c:	e7e2      	b.n	8016134 <__smakebuf_r+0xc>
 801616e:	89a3      	ldrh	r3, [r4, #12]
 8016170:	6020      	str	r0, [r4, #0]
 8016172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016176:	81a3      	strh	r3, [r4, #12]
 8016178:	9b01      	ldr	r3, [sp, #4]
 801617a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801617e:	b15b      	cbz	r3, 8016198 <__smakebuf_r+0x70>
 8016180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016184:	4630      	mov	r0, r6
 8016186:	f000 f837 	bl	80161f8 <_isatty_r>
 801618a:	b128      	cbz	r0, 8016198 <__smakebuf_r+0x70>
 801618c:	89a3      	ldrh	r3, [r4, #12]
 801618e:	f023 0303 	bic.w	r3, r3, #3
 8016192:	f043 0301 	orr.w	r3, r3, #1
 8016196:	81a3      	strh	r3, [r4, #12]
 8016198:	89a3      	ldrh	r3, [r4, #12]
 801619a:	431d      	orrs	r5, r3
 801619c:	81a5      	strh	r5, [r4, #12]
 801619e:	e7cf      	b.n	8016140 <__smakebuf_r+0x18>

080161a0 <memmove>:
 80161a0:	4288      	cmp	r0, r1
 80161a2:	b510      	push	{r4, lr}
 80161a4:	eb01 0402 	add.w	r4, r1, r2
 80161a8:	d902      	bls.n	80161b0 <memmove+0x10>
 80161aa:	4284      	cmp	r4, r0
 80161ac:	4623      	mov	r3, r4
 80161ae:	d807      	bhi.n	80161c0 <memmove+0x20>
 80161b0:	1e43      	subs	r3, r0, #1
 80161b2:	42a1      	cmp	r1, r4
 80161b4:	d008      	beq.n	80161c8 <memmove+0x28>
 80161b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80161ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80161be:	e7f8      	b.n	80161b2 <memmove+0x12>
 80161c0:	4402      	add	r2, r0
 80161c2:	4601      	mov	r1, r0
 80161c4:	428a      	cmp	r2, r1
 80161c6:	d100      	bne.n	80161ca <memmove+0x2a>
 80161c8:	bd10      	pop	{r4, pc}
 80161ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80161ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80161d2:	e7f7      	b.n	80161c4 <memmove+0x24>

080161d4 <_fstat_r>:
 80161d4:	b538      	push	{r3, r4, r5, lr}
 80161d6:	4d07      	ldr	r5, [pc, #28]	@ (80161f4 <_fstat_r+0x20>)
 80161d8:	2300      	movs	r3, #0
 80161da:	4604      	mov	r4, r0
 80161dc:	4608      	mov	r0, r1
 80161de:	4611      	mov	r1, r2
 80161e0:	602b      	str	r3, [r5, #0]
 80161e2:	f7ee f96b 	bl	80044bc <_fstat>
 80161e6:	1c43      	adds	r3, r0, #1
 80161e8:	d102      	bne.n	80161f0 <_fstat_r+0x1c>
 80161ea:	682b      	ldr	r3, [r5, #0]
 80161ec:	b103      	cbz	r3, 80161f0 <_fstat_r+0x1c>
 80161ee:	6023      	str	r3, [r4, #0]
 80161f0:	bd38      	pop	{r3, r4, r5, pc}
 80161f2:	bf00      	nop
 80161f4:	2000b4dc 	.word	0x2000b4dc

080161f8 <_isatty_r>:
 80161f8:	b538      	push	{r3, r4, r5, lr}
 80161fa:	4d06      	ldr	r5, [pc, #24]	@ (8016214 <_isatty_r+0x1c>)
 80161fc:	2300      	movs	r3, #0
 80161fe:	4604      	mov	r4, r0
 8016200:	4608      	mov	r0, r1
 8016202:	602b      	str	r3, [r5, #0]
 8016204:	f7ee f96a 	bl	80044dc <_isatty>
 8016208:	1c43      	adds	r3, r0, #1
 801620a:	d102      	bne.n	8016212 <_isatty_r+0x1a>
 801620c:	682b      	ldr	r3, [r5, #0]
 801620e:	b103      	cbz	r3, 8016212 <_isatty_r+0x1a>
 8016210:	6023      	str	r3, [r4, #0]
 8016212:	bd38      	pop	{r3, r4, r5, pc}
 8016214:	2000b4dc 	.word	0x2000b4dc

08016218 <_sbrk_r>:
 8016218:	b538      	push	{r3, r4, r5, lr}
 801621a:	4d06      	ldr	r5, [pc, #24]	@ (8016234 <_sbrk_r+0x1c>)
 801621c:	2300      	movs	r3, #0
 801621e:	4604      	mov	r4, r0
 8016220:	4608      	mov	r0, r1
 8016222:	602b      	str	r3, [r5, #0]
 8016224:	f7ee f972 	bl	800450c <_sbrk>
 8016228:	1c43      	adds	r3, r0, #1
 801622a:	d102      	bne.n	8016232 <_sbrk_r+0x1a>
 801622c:	682b      	ldr	r3, [r5, #0]
 801622e:	b103      	cbz	r3, 8016232 <_sbrk_r+0x1a>
 8016230:	6023      	str	r3, [r4, #0]
 8016232:	bd38      	pop	{r3, r4, r5, pc}
 8016234:	2000b4dc 	.word	0x2000b4dc

08016238 <abort>:
 8016238:	b508      	push	{r3, lr}
 801623a:	2006      	movs	r0, #6
 801623c:	f000 f86e 	bl	801631c <raise>
 8016240:	2001      	movs	r0, #1
 8016242:	f7ee f8eb 	bl	800441c <_exit>

08016246 <_calloc_r>:
 8016246:	b570      	push	{r4, r5, r6, lr}
 8016248:	fba1 5402 	umull	r5, r4, r1, r2
 801624c:	b934      	cbnz	r4, 801625c <_calloc_r+0x16>
 801624e:	4629      	mov	r1, r5
 8016250:	f7fe fe98 	bl	8014f84 <_malloc_r>
 8016254:	4606      	mov	r6, r0
 8016256:	b928      	cbnz	r0, 8016264 <_calloc_r+0x1e>
 8016258:	4630      	mov	r0, r6
 801625a:	bd70      	pop	{r4, r5, r6, pc}
 801625c:	220c      	movs	r2, #12
 801625e:	6002      	str	r2, [r0, #0]
 8016260:	2600      	movs	r6, #0
 8016262:	e7f9      	b.n	8016258 <_calloc_r+0x12>
 8016264:	462a      	mov	r2, r5
 8016266:	4621      	mov	r1, r4
 8016268:	f7fd faf0 	bl	801384c <memset>
 801626c:	e7f4      	b.n	8016258 <_calloc_r+0x12>

0801626e <_realloc_r>:
 801626e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016272:	4607      	mov	r7, r0
 8016274:	4614      	mov	r4, r2
 8016276:	460d      	mov	r5, r1
 8016278:	b921      	cbnz	r1, 8016284 <_realloc_r+0x16>
 801627a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801627e:	4611      	mov	r1, r2
 8016280:	f7fe be80 	b.w	8014f84 <_malloc_r>
 8016284:	b92a      	cbnz	r2, 8016292 <_realloc_r+0x24>
 8016286:	f7fe facf 	bl	8014828 <_free_r>
 801628a:	4625      	mov	r5, r4
 801628c:	4628      	mov	r0, r5
 801628e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016292:	f000 f85f 	bl	8016354 <_malloc_usable_size_r>
 8016296:	4284      	cmp	r4, r0
 8016298:	4606      	mov	r6, r0
 801629a:	d802      	bhi.n	80162a2 <_realloc_r+0x34>
 801629c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80162a0:	d8f4      	bhi.n	801628c <_realloc_r+0x1e>
 80162a2:	4621      	mov	r1, r4
 80162a4:	4638      	mov	r0, r7
 80162a6:	f7fe fe6d 	bl	8014f84 <_malloc_r>
 80162aa:	4680      	mov	r8, r0
 80162ac:	b908      	cbnz	r0, 80162b2 <_realloc_r+0x44>
 80162ae:	4645      	mov	r5, r8
 80162b0:	e7ec      	b.n	801628c <_realloc_r+0x1e>
 80162b2:	42b4      	cmp	r4, r6
 80162b4:	4622      	mov	r2, r4
 80162b6:	4629      	mov	r1, r5
 80162b8:	bf28      	it	cs
 80162ba:	4632      	movcs	r2, r6
 80162bc:	f7fd fc1f 	bl	8013afe <memcpy>
 80162c0:	4629      	mov	r1, r5
 80162c2:	4638      	mov	r0, r7
 80162c4:	f7fe fab0 	bl	8014828 <_free_r>
 80162c8:	e7f1      	b.n	80162ae <_realloc_r+0x40>

080162ca <_raise_r>:
 80162ca:	291f      	cmp	r1, #31
 80162cc:	b538      	push	{r3, r4, r5, lr}
 80162ce:	4605      	mov	r5, r0
 80162d0:	460c      	mov	r4, r1
 80162d2:	d904      	bls.n	80162de <_raise_r+0x14>
 80162d4:	2316      	movs	r3, #22
 80162d6:	6003      	str	r3, [r0, #0]
 80162d8:	f04f 30ff 	mov.w	r0, #4294967295
 80162dc:	bd38      	pop	{r3, r4, r5, pc}
 80162de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80162e0:	b112      	cbz	r2, 80162e8 <_raise_r+0x1e>
 80162e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80162e6:	b94b      	cbnz	r3, 80162fc <_raise_r+0x32>
 80162e8:	4628      	mov	r0, r5
 80162ea:	f000 f831 	bl	8016350 <_getpid_r>
 80162ee:	4622      	mov	r2, r4
 80162f0:	4601      	mov	r1, r0
 80162f2:	4628      	mov	r0, r5
 80162f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162f8:	f000 b818 	b.w	801632c <_kill_r>
 80162fc:	2b01      	cmp	r3, #1
 80162fe:	d00a      	beq.n	8016316 <_raise_r+0x4c>
 8016300:	1c59      	adds	r1, r3, #1
 8016302:	d103      	bne.n	801630c <_raise_r+0x42>
 8016304:	2316      	movs	r3, #22
 8016306:	6003      	str	r3, [r0, #0]
 8016308:	2001      	movs	r0, #1
 801630a:	e7e7      	b.n	80162dc <_raise_r+0x12>
 801630c:	2100      	movs	r1, #0
 801630e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016312:	4620      	mov	r0, r4
 8016314:	4798      	blx	r3
 8016316:	2000      	movs	r0, #0
 8016318:	e7e0      	b.n	80162dc <_raise_r+0x12>
	...

0801631c <raise>:
 801631c:	4b02      	ldr	r3, [pc, #8]	@ (8016328 <raise+0xc>)
 801631e:	4601      	mov	r1, r0
 8016320:	6818      	ldr	r0, [r3, #0]
 8016322:	f7ff bfd2 	b.w	80162ca <_raise_r>
 8016326:	bf00      	nop
 8016328:	2000018c 	.word	0x2000018c

0801632c <_kill_r>:
 801632c:	b538      	push	{r3, r4, r5, lr}
 801632e:	4d07      	ldr	r5, [pc, #28]	@ (801634c <_kill_r+0x20>)
 8016330:	2300      	movs	r3, #0
 8016332:	4604      	mov	r4, r0
 8016334:	4608      	mov	r0, r1
 8016336:	4611      	mov	r1, r2
 8016338:	602b      	str	r3, [r5, #0]
 801633a:	f7ee f85f 	bl	80043fc <_kill>
 801633e:	1c43      	adds	r3, r0, #1
 8016340:	d102      	bne.n	8016348 <_kill_r+0x1c>
 8016342:	682b      	ldr	r3, [r5, #0]
 8016344:	b103      	cbz	r3, 8016348 <_kill_r+0x1c>
 8016346:	6023      	str	r3, [r4, #0]
 8016348:	bd38      	pop	{r3, r4, r5, pc}
 801634a:	bf00      	nop
 801634c:	2000b4dc 	.word	0x2000b4dc

08016350 <_getpid_r>:
 8016350:	f7ee b84c 	b.w	80043ec <_getpid>

08016354 <_malloc_usable_size_r>:
 8016354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016358:	1f18      	subs	r0, r3, #4
 801635a:	2b00      	cmp	r3, #0
 801635c:	bfbc      	itt	lt
 801635e:	580b      	ldrlt	r3, [r1, r0]
 8016360:	18c0      	addlt	r0, r0, r3
 8016362:	4770      	bx	lr

08016364 <_init>:
 8016364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016366:	bf00      	nop
 8016368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801636a:	bc08      	pop	{r3}
 801636c:	469e      	mov	lr, r3
 801636e:	4770      	bx	lr

08016370 <_fini>:
 8016370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016372:	bf00      	nop
 8016374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016376:	bc08      	pop	{r3}
 8016378:	469e      	mov	lr, r3
 801637a:	4770      	bx	lr
