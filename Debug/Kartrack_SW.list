
Kartrack_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001648c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0801665c  0801665c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016984  08016984  000181cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016984  08016984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801698c  0801698c  000181cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801698c  0801698c  0001798c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016990  08016990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08016994  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08016a20  0001808c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08016ac0  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000e154  200001cc  08016b60  000181cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000e320  08016b60  00018320  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000181cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00047d05  00000000  00000000  000181fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000add7  00000000  00000000  0005ff01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003898  00000000  00000000  0006acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b70  00000000  00000000  0006e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001359c  00000000  00000000  000710e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005393a  00000000  00000000  0008467c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012e8e7  00000000  00000000  000d7fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020689d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f364  00000000  00000000  002068e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  00215c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016644 	.word	0x08016644

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08016644 	.word	0x08016644

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC3_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC3_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC3_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC3_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC3_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC3_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC3_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC3_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC3_Init+0x98>)
 800063e:	f002 ffbf 	bl	80035c0 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000648:	f001 fc66 	bl	8001f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800064c:	2304      	movs	r3, #4
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC3_Init+0x98>)
 800065e:	f002 fff3 	bl	8003648 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000668:	f001 fc56 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001e8 	.word	0x200001e8
 8000678:	40012200 	.word	0x40012200
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a15      	ldr	r2, [pc, #84]	@ (80006f4 <HAL_ADC_MspInit+0x74>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d123      	bne.n	80006ea <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <HAL_ADC_MspInit+0x78>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <HAL_ADC_MspInit+0x78>)
 80006a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <HAL_ADC_MspInit+0x78>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <HAL_ADC_MspInit+0x78>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <HAL_ADC_MspInit+0x78>)
 80006c0:	f043 0320 	orr.w	r3, r3, #32
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <HAL_ADC_MspInit+0x78>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0320 	and.w	r3, r3, #32
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF7     ------> ADC3_IN5
    PF6     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = BAT_LEVEL_Pin|GYRO_IT2_Pin;
 80006d2:	23c0      	movs	r3, #192	@ 0xc0
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <HAL_ADC_MspInit+0x7c>)
 80006e6:	f004 fa25 	bl	8004b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80006ea:	bf00      	nop
 80006ec:	3728      	adds	r7, #40	@ 0x28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40012200 	.word	0x40012200
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40021400 	.word	0x40021400

08000700 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000704:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <MX_CRC_Init+0x3c>)
 8000706:	4a0e      	ldr	r2, [pc, #56]	@ (8000740 <MX_CRC_Init+0x40>)
 8000708:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_CRC_Init+0x3c>)
 800070c:	2200      	movs	r2, #0
 800070e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_CRC_Init+0x3c>)
 8000712:	2200      	movs	r2, #0
 8000714:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_CRC_Init+0x3c>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <MX_CRC_Init+0x3c>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_CRC_Init+0x3c>)
 8000724:	2201      	movs	r2, #1
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_CRC_Init+0x3c>)
 800072a:	f003 fac3 	bl	8003cb4 <HAL_CRC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000734:	f001 fbf0 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000230 	.word	0x20000230
 8000740:	40023000 	.word	0x40023000

08000744 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <HAL_CRC_MspInit+0x38>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d10b      	bne.n	800076e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000756:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <HAL_CRC_MspInit+0x3c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a09      	ldr	r2, [pc, #36]	@ (8000780 <HAL_CRC_MspInit+0x3c>)
 800075c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <HAL_CRC_MspInit+0x3c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023000 	.word	0x40023000
 8000780:	40023800 	.word	0x40023800

08000784 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <MX_DCMI_Init+0x60>)
 800078a:	4a17      	ldr	r2, [pc, #92]	@ (80007e8 <MX_DCMI_Init+0x64>)
 800078c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_DCMI_Init+0x60>)
 8000790:	2200      	movs	r2, #0
 8000792:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_DCMI_Init+0x60>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800079a:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_DCMI_Init+0x60>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80007a0:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_DCMI_Init+0x60>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_DCMI_Init+0x60>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <MX_DCMI_Init+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_DCMI_Init+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_DCMI_Init+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_DCMI_Init+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <MX_DCMI_Init+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_DCMI_Init+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_DCMI_Init+0x60>)
 80007d2:	f003 fb61 	bl	8003e98 <HAL_DCMI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f001 fb9c 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000254 	.word	0x20000254
 80007e8:	50050000 	.word	0x50050000

080007ec <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	@ 0x38
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a50      	ldr	r2, [pc, #320]	@ (800094c <HAL_DCMI_MspInit+0x160>)
 800080a:	4293      	cmp	r3, r2
 800080c:	f040 809a 	bne.w	8000944 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000810:	4b4f      	ldr	r3, [pc, #316]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 8000812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000814:	4a4e      	ldr	r2, [pc, #312]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6353      	str	r3, [r2, #52]	@ 0x34
 800081c:	4b4c      	ldr	r3, [pc, #304]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 800081e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	623b      	str	r3, [r7, #32]
 8000826:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000828:	4b49      	ldr	r3, [pc, #292]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082c:	4a48      	ldr	r2, [pc, #288]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6313      	str	r3, [r2, #48]	@ 0x30
 8000834:	4b46      	ldr	r3, [pc, #280]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000838:	f003 0310 	and.w	r3, r3, #16
 800083c:	61fb      	str	r3, [r7, #28]
 800083e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000840:	4b43      	ldr	r3, [pc, #268]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000844:	4a42      	ldr	r2, [pc, #264]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6313      	str	r3, [r2, #48]	@ 0x30
 800084c:	4b40      	ldr	r3, [pc, #256]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000858:	4b3d      	ldr	r3, [pc, #244]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085c:	4a3c      	ldr	r2, [pc, #240]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 800085e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000862:	6313      	str	r3, [r2, #48]	@ 0x30
 8000864:	4b3a      	ldr	r3, [pc, #232]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000870:	4b37      	ldr	r3, [pc, #220]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000874:	4a36      	ldr	r2, [pc, #216]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800087a:	6313      	str	r3, [r2, #48]	@ 0x30
 800087c:	4b34      	ldr	r3, [pc, #208]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b31      	ldr	r3, [pc, #196]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088c:	4a30      	ldr	r2, [pc, #192]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6313      	str	r3, [r2, #48]	@ 0x30
 8000894:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <HAL_DCMI_MspInit+0x164>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008a0:	2360      	movs	r3, #96	@ 0x60
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008b0:	230d      	movs	r3, #13
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	4826      	ldr	r0, [pc, #152]	@ (8000954 <HAL_DCMI_MspInit+0x168>)
 80008bc:	f004 f93a 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80008c0:	2308      	movs	r3, #8
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008d0:	230d      	movs	r3, #13
 80008d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	481f      	ldr	r0, [pc, #124]	@ (8000958 <HAL_DCMI_MspInit+0x16c>)
 80008dc:	f004 f92a 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80008e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008f2:	230d      	movs	r3, #13
 80008f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fa:	4619      	mov	r1, r3
 80008fc:	4817      	ldr	r0, [pc, #92]	@ (800095c <HAL_DCMI_MspInit+0x170>)
 80008fe:	f004 f919 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000902:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000914:	230d      	movs	r3, #13
 8000916:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	4810      	ldr	r0, [pc, #64]	@ (8000960 <HAL_DCMI_MspInit+0x174>)
 8000920:	f004 f908 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000924:	2350      	movs	r3, #80	@ 0x50
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000934:	230d      	movs	r3, #13
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	4809      	ldr	r0, [pc, #36]	@ (8000964 <HAL_DCMI_MspInit+0x178>)
 8000940:	f004 f8f8 	bl	8004b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000944:	bf00      	nop
 8000946:	3738      	adds	r7, #56	@ 0x38
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	50050000 	.word	0x50050000
 8000950:	40023800 	.word	0x40023800
 8000954:	40021000 	.word	0x40021000
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40021800 	.word	0x40021800
 8000960:	40021c00 	.word	0x40021c00
 8000964:	40020000 	.word	0x40020000

08000968 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <MX_DMA2D_Init+0x5c>)
 800096e:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <MX_DMA2D_Init+0x60>)
 8000970:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_DMA2D_Init+0x5c>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_DMA2D_Init+0x5c>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_DMA2D_Init+0x5c>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_DMA2D_Init+0x5c>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_DMA2D_Init+0x5c>)
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_DMA2D_Init+0x5c>)
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_DMA2D_Init+0x5c>)
 8000998:	2200      	movs	r2, #0
 800099a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800099c:	4809      	ldr	r0, [pc, #36]	@ (80009c4 <MX_DMA2D_Init+0x5c>)
 800099e:	f003 fb8f 	bl	80040c0 <HAL_DMA2D_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009a8:	f001 fab6 	bl	8001f18 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009ac:	2101      	movs	r1, #1
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_DMA2D_Init+0x5c>)
 80009b0:	f003 fce0 	bl	8004374 <HAL_DMA2D_ConfigLayer>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009ba:	f001 faad 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200002a4 	.word	0x200002a4
 80009c8:	4002b000 	.word	0x4002b000

080009cc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <HAL_DMA2D_MspInit+0x44>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d113      	bne.n	8000a06 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_DMA2D_MspInit+0x48>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000a14 <HAL_DMA2D_MspInit+0x48>)
 80009e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <HAL_DMA2D_MspInit+0x48>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	205a      	movs	r0, #90	@ 0x5a
 80009fc:	f003 f930 	bl	8003c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a00:	205a      	movs	r0, #90	@ 0x5a
 8000a02:	f003 f949 	bl	8003c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	4002b000 	.word	0x4002b000
 8000a14:	40023800 	.word	0x40023800

08000a18 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <MX_ETH_Init+0x84>)
 8000a1e:	4a20      	ldr	r2, [pc, #128]	@ (8000aa0 <MX_ETH_Init+0x88>)
 8000a20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a22:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <MX_ETH_Init+0x8c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <MX_ETH_Init+0x8c>)
 8000a2a:	2280      	movs	r2, #128	@ 0x80
 8000a2c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_ETH_Init+0x8c>)
 8000a30:	22e1      	movs	r2, #225	@ 0xe1
 8000a32:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <MX_ETH_Init+0x8c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_ETH_Init+0x8c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_ETH_Init+0x8c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_ETH_Init+0x84>)
 8000a48:	4a16      	ldr	r2, [pc, #88]	@ (8000aa4 <MX_ETH_Init+0x8c>)
 8000a4a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_ETH_Init+0x84>)
 8000a4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a52:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_ETH_Init+0x84>)
 8000a56:	4a14      	ldr	r2, [pc, #80]	@ (8000aa8 <MX_ETH_Init+0x90>)
 8000a58:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_ETH_Init+0x84>)
 8000a5c:	4a13      	ldr	r2, [pc, #76]	@ (8000aac <MX_ETH_Init+0x94>)
 8000a5e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_ETH_Init+0x84>)
 8000a62:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a66:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <MX_ETH_Init+0x84>)
 8000a6a:	f003 fd15 	bl	8004498 <HAL_ETH_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a74:	f001 fa50 	bl	8001f18 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a78:	2238      	movs	r2, #56	@ 0x38
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <MX_ETH_Init+0x98>)
 8000a7e:	f015 f8a1 	bl	8015bc4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <MX_ETH_Init+0x98>)
 8000a84:	2221      	movs	r2, #33	@ 0x21
 8000a86:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_ETH_Init+0x98>)
 8000a8a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a8e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <MX_ETH_Init+0x98>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000031c 	.word	0x2000031c
 8000aa0:	40028000 	.word	0x40028000
 8000aa4:	200003cc 	.word	0x200003cc
 8000aa8:	2000012c 	.word	0x2000012c
 8000aac:	2000008c 	.word	0x2000008c
 8000ab0:	200002e4 	.word	0x200002e4

08000ab4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	@ 0x38
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a3f      	ldr	r2, [pc, #252]	@ (8000bd0 <HAL_ETH_MspInit+0x11c>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d178      	bne.n	8000bc8 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000adc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aea:	623b      	str	r3, [r7, #32]
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	4b39      	ldr	r3, [pc, #228]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a38      	ldr	r2, [pc, #224]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000af4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b36      	ldr	r3, [pc, #216]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	4b33      	ldr	r3, [pc, #204]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a32      	ldr	r2, [pc, #200]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b30      	ldr	r3, [pc, #192]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b1a:	61bb      	str	r3, [r7, #24]
 8000b1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b27      	ldr	r3, [pc, #156]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a26      	ldr	r2, [pc, #152]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a20      	ldr	r2, [pc, #128]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <HAL_ETH_MspInit+0x120>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000b66:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b78:	230b      	movs	r3, #11
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4815      	ldr	r0, [pc, #84]	@ (8000bd8 <HAL_ETH_MspInit+0x124>)
 8000b84:	f003 ffd6 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b88:	2332      	movs	r3, #50	@ 0x32
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b98:	230b      	movs	r3, #11
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <HAL_ETH_MspInit+0x128>)
 8000ba4:	f003 ffc6 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ba8:	2386      	movs	r3, #134	@ 0x86
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <HAL_ETH_MspInit+0x12c>)
 8000bc4:	f003 ffb6 	bl	8004b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	@ 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40028000 	.word	0x40028000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40021800 	.word	0x40021800
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020000 	.word	0x40020000

08000be4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000bfe:	4a20      	ldr	r2, [pc, #128]	@ (8000c80 <MX_FMC_Init+0x9c>)
 8000c00:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000c10:	2204      	movs	r2, #4
 8000c12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c14:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000c16:	2210      	movs	r2, #16
 8000c18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000c1c:	2240      	movs	r2, #64	@ 0x40
 8000c1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000c22:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000c30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c34:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000c38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c50:	2307      	movs	r3, #7
 8000c52:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c54:	2303      	movs	r3, #3
 8000c56:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_FMC_Init+0x98>)
 8000c66:	f00a fcdc 	bl	800b622 <HAL_SDRAM_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000c70:	f001 f952 	bl	8001f18 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c74:	bf00      	nop
 8000c76:	3720      	adds	r7, #32
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200003d4 	.word	0x200003d4
 8000c80:	a0000140 	.word	0xa0000140

08000c84 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c98:	4b3a      	ldr	r3, [pc, #232]	@ (8000d84 <HAL_FMC_MspInit+0x100>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d16d      	bne.n	8000d7c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000ca0:	4b38      	ldr	r3, [pc, #224]	@ (8000d84 <HAL_FMC_MspInit+0x100>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ca6:	4b38      	ldr	r3, [pc, #224]	@ (8000d88 <HAL_FMC_MspInit+0x104>)
 8000ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000caa:	4a37      	ldr	r2, [pc, #220]	@ (8000d88 <HAL_FMC_MspInit+0x104>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6393      	str	r3, [r2, #56]	@ 0x38
 8000cb2:	4b35      	ldr	r3, [pc, #212]	@ (8000d88 <HAL_FMC_MspInit+0x104>)
 8000cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000cbe:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000cc2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	482c      	ldr	r0, [pc, #176]	@ (8000d8c <HAL_FMC_MspInit+0x108>)
 8000cda:	f003 ff2b 	bl	8004b34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000cde:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000ce2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4825      	ldr	r0, [pc, #148]	@ (8000d90 <HAL_FMC_MspInit+0x10c>)
 8000cfa:	f003 ff1b 	bl	8004b34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000cfe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000d02:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d10:	230c      	movs	r3, #12
 8000d12:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	481e      	ldr	r0, [pc, #120]	@ (8000d94 <HAL_FMC_MspInit+0x110>)
 8000d1a:	f003 ff0b 	bl	8004b34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000d1e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000d22:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d30:	230c      	movs	r3, #12
 8000d32:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4817      	ldr	r0, [pc, #92]	@ (8000d98 <HAL_FMC_MspInit+0x114>)
 8000d3a:	f003 fefb 	bl	8004b34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d3e:	2328      	movs	r3, #40	@ 0x28
 8000d40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d4e:	230c      	movs	r3, #12
 8000d50:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4811      	ldr	r0, [pc, #68]	@ (8000d9c <HAL_FMC_MspInit+0x118>)
 8000d58:	f003 feec 	bl	8004b34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	4619      	mov	r1, r3
 8000d74:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <HAL_FMC_MspInit+0x11c>)
 8000d76:	f003 fedd 	bl	8004b34 <HAL_GPIO_Init>
 8000d7a:	e000      	b.n	8000d7e <HAL_FMC_MspInit+0xfa>
    return;
 8000d7c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000408 	.word	0x20000408
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40021800 	.word	0x40021800
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40021400 	.word	0x40021400
 8000d9c:	40021c00 	.word	0x40021c00
 8000da0:	40020800 	.word	0x40020800

08000da4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000dac:	f7ff ff6a 	bl	8000c84 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook(void) {
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask,
		signed char *pcTaskName) {
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void) {
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	 demo application. If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000df0:	4a08      	ldr	r2, [pc, #32]	@ (8000e14 <MX_FREERTOS_Init+0x28>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4808      	ldr	r0, [pc, #32]	@ (8000e18 <MX_FREERTOS_Init+0x2c>)
 8000df6:	f010 fffb 	bl	8011df0 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <MX_FREERTOS_Init+0x30>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of ICM45605_TASK */
  ICM45605_TASKHandle = osThreadNew(StartTask02, NULL, &ICM45605_TASK_attributes);
 8000e00:	4a07      	ldr	r2, [pc, #28]	@ (8000e20 <MX_FREERTOS_Init+0x34>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4807      	ldr	r0, [pc, #28]	@ (8000e24 <MX_FREERTOS_Init+0x38>)
 8000e06:	f010 fff3 	bl	8011df0 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a06      	ldr	r2, [pc, #24]	@ (8000e28 <MX_FREERTOS_Init+0x3c>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	080168dc 	.word	0x080168dc
 8000e18:	08000e2d 	.word	0x08000e2d
 8000e1c:	2000040c 	.word	0x2000040c
 8000e20:	08016900 	.word	0x08016900
 8000e24:	08000e41 	.word	0x08000e41
 8000e28:	20000410 	.word	0x20000410

08000e2c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000e34:	f014 f906 	bl	8015044 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f011 f887 	bl	8011f4c <osDelay>
 8000e3e:	e7fb      	b.n	8000e38 <StartDefaultTask+0xc>

08000e40 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	@ 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  HAL_StatusTypeDef status;
  ICM45605_Accel_t accel;
  ICM45605_Gyro_t gyro;
  ICM45605_Gyro_t gyro_offset; // For storing calibration values
  uint32_t counter = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  
  // Wait for system stabilization before initializing the sensor
  osDelay(500);
 8000e4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e50:	f011 f87c 	bl	8011f4c <osDelay>
  
  printf("Initializing ICM45605 sensor...\r\n");
 8000e54:	4855      	ldr	r0, [pc, #340]	@ (8000fac <StartTask02+0x16c>)
 8000e56:	f014 fdd5 	bl	8015a04 <puts>
  
  // Initialize the ICM45605 sensor
  status = ICM45605_Init();
 8000e5a:	f000 fb37 	bl	80014cc <ICM45605_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (status != HAL_OK) {
 8000e64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d007      	beq.n	8000e7c <StartTask02+0x3c>
    printf("Error initializing ICM45605 sensor (code: %d)\r\n", status);
 8000e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e70:	4619      	mov	r1, r3
 8000e72:	484f      	ldr	r0, [pc, #316]	@ (8000fb0 <StartTask02+0x170>)
 8000e74:	f014 fd5e 	bl	8015934 <iprintf>
    osThreadExit();
 8000e78:	f011 f860 	bl	8011f3c <osThreadExit>
  }
  
  printf("ICM45605 sensor initialized successfully!\r\n");
 8000e7c:	484d      	ldr	r0, [pc, #308]	@ (8000fb4 <StartTask02+0x174>)
 8000e7e:	f014 fdc1 	bl	8015a04 <puts>
  
  // Configure high-performance mode for kart tracking
  printf("Configuring kart tracking mode (high speed)...\r\n");
 8000e82:	484d      	ldr	r0, [pc, #308]	@ (8000fb8 <StartTask02+0x178>)
 8000e84:	f014 fdbe 	bl	8015a04 <puts>
  status = ICM45605_ConfigureKartTrackingMode();
 8000e88:	f000 fb88 	bl	800159c <ICM45605_ConfigureKartTrackingMode>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (status != HAL_OK) {
 8000e92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d007      	beq.n	8000eaa <StartTask02+0x6a>
    printf("Error configuring fast mode (code: %d)\r\n", status);
 8000e9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4846      	ldr	r0, [pc, #280]	@ (8000fbc <StartTask02+0x17c>)
 8000ea2:	f014 fd47 	bl	8015934 <iprintf>
    osThreadExit();
 8000ea6:	f011 f849 	bl	8011f3c <osThreadExit>
  }
  
  // Calibrate the gyroscope (remove bias)
  printf("Calibrating gyroscope, please keep the device still...\r\n");
 8000eaa:	4845      	ldr	r0, [pc, #276]	@ (8000fc0 <StartTask02+0x180>)
 8000eac:	f014 fdaa 	bl	8015a04 <puts>
  status = ICM45605_CalibrateGyro(&gyro_offset, 100); // 100 samples for calibration
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2164      	movs	r1, #100	@ 0x64
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fbd7 	bl	800166a <ICM45605_CalibrateGyro>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (status != HAL_OK) {
 8000ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <StartTask02+0x98>
    printf("Error during gyroscope calibration (code: %d)\r\n", status);
 8000eca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000ece:	4619      	mov	r1, r3
 8000ed0:	483c      	ldr	r0, [pc, #240]	@ (8000fc4 <StartTask02+0x184>)
 8000ed2:	f014 fd2f 	bl	8015934 <iprintf>
 8000ed6:	e00a      	b.n	8000eee <StartTask02+0xae>
    // Continue anyway, just with no calibration
  } else {
    printf("Gyro calibration complete. Offset X: %d, Y: %d, Z: %d\r\n", 
           gyro_offset.x, gyro_offset.y, gyro_offset.z);
 8000ed8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
    printf("Gyro calibration complete. Offset X: %d, Y: %d, Z: %d\r\n", 
 8000edc:	4619      	mov	r1, r3
           gyro_offset.x, gyro_offset.y, gyro_offset.z);
 8000ede:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    printf("Gyro calibration complete. Offset X: %d, Y: %d, Z: %d\r\n", 
 8000ee2:	461a      	mov	r2, r3
           gyro_offset.x, gyro_offset.y, gyro_offset.z);
 8000ee4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    printf("Gyro calibration complete. Offset X: %d, Y: %d, Z: %d\r\n", 
 8000ee8:	4837      	ldr	r0, [pc, #220]	@ (8000fc8 <StartTask02+0x188>)
 8000eea:	f014 fd23 	bl	8015934 <iprintf>
  }
  
  printf("High-speed mode active (6400Hz sampling)\r\n");
 8000eee:	4837      	ldr	r0, [pc, #220]	@ (8000fcc <StartTask02+0x18c>)
 8000ef0:	f014 fd88 	bl	8015a04 <puts>
  printf("----------------------------------\r\n");
 8000ef4:	4836      	ldr	r0, [pc, #216]	@ (8000fd0 <StartTask02+0x190>)
 8000ef6:	f014 fd85 	bl	8015a04 <puts>
  
  /* Infinite loop */
  for(;;)
  {
    // Read both accelerometer and gyroscope data in a single burst (faster)
    if (ICM45605_ReadMotionData(&accel, &gyro) == HAL_OK) {
 8000efa:	f107 0214 	add.w	r2, r7, #20
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fc01 	bl	800170c <ICM45605_ReadMotionData>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d145      	bne.n	8000f9c <StartTask02+0x15c>
      // Apply calibration values to the gyro readings
      gyro.x -= gyro_offset.x;
 8000f10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	82bb      	strh	r3, [r7, #20]
      gyro.y -= gyro_offset.y;
 8000f24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	82fb      	strh	r3, [r7, #22]
      gyro.z -= gyro_offset.z;
 8000f38:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	833b      	strh	r3, [r7, #24]
      
      // Only print every 50 readings to avoid flooding the console
      // but still process data at high speed
      if (counter % 50 == 0) {
 8000f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <StartTask02+0x194>)
 8000f50:	fba3 1302 	umull	r1, r3, r3, r2
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	2132      	movs	r1, #50	@ 0x32
 8000f58:	fb01 f303 	mul.w	r3, r1, r3
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d118      	bne.n	8000f94 <StartTask02+0x154>
        printf("Accel X: %6d, Y: %6d, Z: %6d\r\n", accel.x, accel.y, accel.z);
 8000f62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f66:	4619      	mov	r1, r3
 8000f68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000f72:	4819      	ldr	r0, [pc, #100]	@ (8000fd8 <StartTask02+0x198>)
 8000f74:	f014 fcde 	bl	8015934 <iprintf>
        printf("Gyro  X: %6d, Y: %6d, Z: %6d\r\n", gyro.x, gyro.y, gyro.z);
 8000f78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f82:	461a      	mov	r2, r3
 8000f84:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f88:	4814      	ldr	r0, [pc, #80]	@ (8000fdc <StartTask02+0x19c>)
 8000f8a:	f014 fcd3 	bl	8015934 <iprintf>
        printf("----------------------------------\r\n");
 8000f8e:	4810      	ldr	r0, [pc, #64]	@ (8000fd0 <StartTask02+0x190>)
 8000f90:	f014 fd38 	bl	8015a04 <puts>
      }
      
      // Process the high-speed data here
      // Example: Detect rapid changes, calculate orientation, etc.
      
      counter++;
 8000f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f96:	3301      	adds	r3, #1
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f9a:	e002      	b.n	8000fa2 <StartTask02+0x162>
    } else {
      printf("Error reading motion data\r\n");
 8000f9c:	4810      	ldr	r0, [pc, #64]	@ (8000fe0 <StartTask02+0x1a0>)
 8000f9e:	f014 fd31 	bl	8015a04 <puts>
    }
    
    // Very short delay to maximize sampling rate while still allowing other tasks to run
    // 5ms gives approximately 200Hz output rate, which is fast enough for most applications
    // while allowing FreeRTOS to schedule other tasks
    osDelay(500);
 8000fa2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fa6:	f010 ffd1 	bl	8011f4c <osDelay>
    if (ICM45605_ReadMotionData(&accel, &gyro) == HAL_OK) {
 8000faa:	e7a6      	b.n	8000efa <StartTask02+0xba>
 8000fac:	08016678 	.word	0x08016678
 8000fb0:	0801669c 	.word	0x0801669c
 8000fb4:	080166cc 	.word	0x080166cc
 8000fb8:	080166f8 	.word	0x080166f8
 8000fbc:	08016728 	.word	0x08016728
 8000fc0:	08016754 	.word	0x08016754
 8000fc4:	0801678c 	.word	0x0801678c
 8000fc8:	080167bc 	.word	0x080167bc
 8000fcc:	080167f4 	.word	0x080167f4
 8000fd0:	08016820 	.word	0x08016820
 8000fd4:	51eb851f 	.word	0x51eb851f
 8000fd8:	08016844 	.word	0x08016844
 8000fdc:	08016864 	.word	0x08016864
 8000fe0:	08016884 	.word	0x08016884

08000fe4 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b090      	sub	sp, #64	@ 0x40
 8000fe8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffa:	4bb0      	ldr	r3, [pc, #704]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4aaf      	ldr	r2, [pc, #700]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4bad      	ldr	r3, [pc, #692]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001012:	4baa      	ldr	r3, [pc, #680]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4aa9      	ldr	r2, [pc, #676]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4ba7      	ldr	r3, [pc, #668]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
 8001028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	4ba4      	ldr	r3, [pc, #656]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4aa3      	ldr	r2, [pc, #652]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4ba1      	ldr	r3, [pc, #644]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	4b9e      	ldr	r3, [pc, #632]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a9d      	ldr	r2, [pc, #628]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b9b      	ldr	r3, [pc, #620]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b98      	ldr	r3, [pc, #608]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a97      	ldr	r2, [pc, #604]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b95      	ldr	r3, [pc, #596]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b92      	ldr	r3, [pc, #584]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a91      	ldr	r2, [pc, #580]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b8f      	ldr	r3, [pc, #572]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800108a:	4b8c      	ldr	r3, [pc, #560]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a8b      	ldr	r2, [pc, #556]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001090:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b89      	ldr	r3, [pc, #548]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010a2:	4b86      	ldr	r3, [pc, #536]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a85      	ldr	r2, [pc, #532]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b83      	ldr	r3, [pc, #524]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80010ba:	4b80      	ldr	r3, [pc, #512]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a7f      	ldr	r2, [pc, #508]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b7d      	ldr	r3, [pc, #500]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d2:	4b7a      	ldr	r3, [pc, #488]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a79      	ldr	r2, [pc, #484]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010d8:	f043 0320 	orr.w	r3, r3, #32
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b77      	ldr	r3, [pc, #476]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ea:	4b74      	ldr	r3, [pc, #464]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a73      	ldr	r2, [pc, #460]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b71      	ldr	r3, [pc, #452]	@ (80012bc <MX_GPIO_Init+0x2d8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2120      	movs	r1, #32
 8001106:	486e      	ldr	r0, [pc, #440]	@ (80012c0 <MX_GPIO_Init+0x2dc>)
 8001108:	f003 fed8 	bl	8004ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LORA_DI0_Pin|LORA_DI1_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	210c      	movs	r1, #12
 8001110:	486c      	ldr	r0, [pc, #432]	@ (80012c4 <MX_GPIO_Init+0x2e0>)
 8001112:	f003 fed3 	bl	8004ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2108      	movs	r1, #8
 800111a:	486b      	ldr	r0, [pc, #428]	@ (80012c8 <MX_GPIO_Init+0x2e4>)
 800111c:	f003 fece 	bl	8004ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001126:	4867      	ldr	r0, [pc, #412]	@ (80012c4 <MX_GPIO_Init+0x2e0>)
 8001128:	f003 fec8 	bl	8004ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001132:	4866      	ldr	r0, [pc, #408]	@ (80012cc <MX_GPIO_Init+0x2e8>)
 8001134:	f003 fec2 	bl	8004ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GYRO_IT1_Pin|GPS_STDBY_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	21c8      	movs	r1, #200	@ 0xc8
 800113c:	4864      	ldr	r0, [pc, #400]	@ (80012d0 <MX_GPIO_Init+0x2ec>)
 800113e:	f003 febd 	bl	8004ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001148:	4862      	ldr	r0, [pc, #392]	@ (80012d4 <MX_GPIO_Init+0x2f0>)
 800114a:	f003 feb7 	bl	8004ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800114e:	2308      	movs	r3, #8
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800115e:	4619      	mov	r1, r3
 8001160:	485d      	ldr	r0, [pc, #372]	@ (80012d8 <MX_GPIO_Init+0x2f4>)
 8001162:	f003 fce7 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001166:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800116a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001178:	230a      	movs	r3, #10
 800117a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001180:	4619      	mov	r1, r3
 8001182:	4856      	ldr	r0, [pc, #344]	@ (80012dc <MX_GPIO_Init+0x2f8>)
 8001184:	f003 fcd6 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800119a:	4619      	mov	r1, r3
 800119c:	4850      	ldr	r0, [pc, #320]	@ (80012e0 <MX_GPIO_Init+0x2fc>)
 800119e:	f003 fcc9 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80011a2:	2340      	movs	r3, #64	@ 0x40
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011a6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80011aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011b4:	4619      	mov	r1, r3
 80011b6:	4842      	ldr	r0, [pc, #264]	@ (80012c0 <MX_GPIO_Init+0x2dc>)
 80011b8:	f003 fcbc 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011bc:	2320      	movs	r3, #32
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011d0:	4619      	mov	r1, r3
 80011d2:	483b      	ldr	r0, [pc, #236]	@ (80012c0 <MX_GPIO_Init+0x2dc>)
 80011d4:	f003 fcae 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DI0_Pin LORA_DI1_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LORA_DI0_Pin|LORA_DI1_Pin|LCD_DISP_Pin;
 80011d8:	f241 030c 	movw	r3, #4108	@ 0x100c
 80011dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ee:	4619      	mov	r1, r3
 80011f0:	4834      	ldr	r0, [pc, #208]	@ (80012c4 <MX_GPIO_Init+0x2e0>)
 80011f2:	f003 fc9f 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80011f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fc:	2300      	movs	r3, #0
 80011fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001208:	4619      	mov	r1, r3
 800120a:	4836      	ldr	r0, [pc, #216]	@ (80012e4 <MX_GPIO_Init+0x300>)
 800120c:	f003 fc92 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001210:	2308      	movs	r3, #8
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001224:	4619      	mov	r1, r3
 8001226:	4828      	ldr	r0, [pc, #160]	@ (80012c8 <MX_GPIO_Init+0x2e4>)
 8001228:	f003 fc84 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800122c:	2310      	movs	r3, #16
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800123c:	4619      	mov	r1, r3
 800123e:	4820      	ldr	r0, [pc, #128]	@ (80012c0 <MX_GPIO_Init+0x2dc>)
 8001240:	f003 fc78 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001244:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001252:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001256:	4619      	mov	r1, r3
 8001258:	481c      	ldr	r0, [pc, #112]	@ (80012cc <MX_GPIO_Init+0x2e8>)
 800125a:	f003 fc6b 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800125e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001274:	4619      	mov	r1, r3
 8001276:	4815      	ldr	r0, [pc, #84]	@ (80012cc <MX_GPIO_Init+0x2e8>)
 8001278:	f003 fc5c 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800127c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001282:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001286:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001290:	4619      	mov	r1, r3
 8001292:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <MX_GPIO_Init+0x2e0>)
 8001294:	f003 fc4e 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001298:	2310      	movs	r3, #16
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012a8:	230a      	movs	r3, #10
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	@ (80012cc <MX_GPIO_Init+0x2e8>)
 80012b4:	f003 fc3e 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_IT1_Pin GPS_STDBY_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = GYRO_IT1_Pin|GPS_STDBY_Pin|EXT_RST_Pin;
 80012b8:	23c8      	movs	r3, #200	@ 0xc8
 80012ba:	e015      	b.n	80012e8 <MX_GPIO_Init+0x304>
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40022000 	.word	0x40022000
 80012c8:	40022800 	.word	0x40022800
 80012cc:	40021c00 	.word	0x40021c00
 80012d0:	40021800 	.word	0x40021800
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40022400 	.word	0x40022400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012fa:	4619      	mov	r1, r3
 80012fc:	482d      	ldr	r0, [pc, #180]	@ (80013b4 <MX_GPIO_Init+0x3d0>)
 80012fe:	f003 fc19 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN3_Pin;
 8001302:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001310:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001314:	4619      	mov	r1, r3
 8001316:	4828      	ldr	r0, [pc, #160]	@ (80013b8 <MX_GPIO_Init+0x3d4>)
 8001318:	f003 fc0c 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RESET_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin;
 800131c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001320:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001326:	2301      	movs	r3, #1
 8001328:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LORA_RESET_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001332:	4619      	mov	r1, r3
 8001334:	4820      	ldr	r0, [pc, #128]	@ (80013b8 <MX_GPIO_Init+0x3d4>)
 8001336:	f003 fbfd 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800133a:	2305      	movs	r3, #5
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800134a:	230a      	movs	r3, #10
 800134c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001352:	4619      	mov	r1, r3
 8001354:	4819      	ldr	r0, [pc, #100]	@ (80013bc <MX_GPIO_Init+0x3d8>)
 8001356:	f003 fbed 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800135a:	2304      	movs	r3, #4
 800135c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800136a:	4619      	mov	r1, r3
 800136c:	4811      	ldr	r0, [pc, #68]	@ (80013b4 <MX_GPIO_Init+0x3d0>)
 800136e:	f003 fbe1 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001372:	2301      	movs	r3, #1
 8001374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001382:	4619      	mov	r1, r3
 8001384:	480e      	ldr	r0, [pc, #56]	@ (80013c0 <MX_GPIO_Init+0x3dc>)
 8001386:	f003 fbd5 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800138a:	2328      	movs	r3, #40	@ 0x28
 800138c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800139a:	230a      	movs	r3, #10
 800139c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a2:	4619      	mov	r1, r3
 80013a4:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <MX_GPIO_Init+0x3dc>)
 80013a6:	f003 fbc5 	bl	8004b34 <HAL_GPIO_Init>

}
 80013aa:	bf00      	nop
 80013ac:	3740      	adds	r7, #64	@ 0x40
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40021400 	.word	0x40021400
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020000 	.word	0x40020000

080013c4 <ICM45605_WriteRegister>:

// Global variables
extern I2C_HandleTypeDef hi2c1;    // Declare I2C instance (defined in the file generated by STM32CubeMX)

// Function to write to a sensor register
HAL_StatusTypeDef ICM45605_WriteRegister(uint8_t reg, uint8_t data) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af04      	add	r7, sp, #16
 80013ca:	4603      	mov	r3, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	4613      	mov	r3, r2
 80013d2:	71bb      	strb	r3, [r7, #6]
    // Using HAL_I2C_Mem_Write to write to a register
    return HAL_I2C_Mem_Write(&hi2c1, ICM45605_I2C_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_TIMEOUT);
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	2364      	movs	r3, #100	@ 0x64
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2301      	movs	r3, #1
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	1dbb      	adds	r3, r7, #6
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2301      	movs	r3, #1
 80013e6:	21d0      	movs	r1, #208	@ 0xd0
 80013e8:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <ICM45605_WriteRegister+0x34>)
 80013ea:	f005 ff51 	bl	8007290 <HAL_I2C_Mem_Write>
 80013ee:	4603      	mov	r3, r0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200044c0 	.word	0x200044c0

080013fc <ICM45605_ReadRegister>:

// Function to read a sensor register
HAL_StatusTypeDef ICM45605_ReadRegister(uint8_t reg, uint8_t *data) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af04      	add	r7, sp, #16
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
    // Using HAL_I2C_Mem_Read to read a register
    return HAL_I2C_Mem_Read(&hi2c1, ICM45605_I2C_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_TIMEOUT);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	b29a      	uxth	r2, r3
 800140c:	2364      	movs	r3, #100	@ 0x64
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	2301      	movs	r3, #1
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	21d0      	movs	r1, #208	@ 0xd0
 800141c:	4803      	ldr	r0, [pc, #12]	@ (800142c <ICM45605_ReadRegister+0x30>)
 800141e:	f006 f84b 	bl	80074b8 <HAL_I2C_Mem_Read>
 8001422:	4603      	mov	r3, r0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200044c0 	.word	0x200044c0

08001430 <ICM45605_ReadRegisters>:

// Function to read multiple consecutive registers
HAL_StatusTypeDef ICM45605_ReadRegisters(uint8_t regStart, uint8_t *buffer, uint8_t length) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af04      	add	r7, sp, #16
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	4613      	mov	r3, r2
 800143e:	71bb      	strb	r3, [r7, #6]
    // Using HAL_I2C_Mem_Read to read multiple consecutive registers
    return HAL_I2C_Mem_Read(&hi2c1, ICM45605_I2C_ADDRESS << 1, regStart, I2C_MEMADD_SIZE_8BIT, buffer, length, I2C_TIMEOUT);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	b29a      	uxth	r2, r3
 8001444:	79bb      	ldrb	r3, [r7, #6]
 8001446:	b29b      	uxth	r3, r3
 8001448:	2164      	movs	r1, #100	@ 0x64
 800144a:	9102      	str	r1, [sp, #8]
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	21d0      	movs	r1, #208	@ 0xd0
 8001456:	4804      	ldr	r0, [pc, #16]	@ (8001468 <ICM45605_ReadRegisters+0x38>)
 8001458:	f006 f82e 	bl	80074b8 <HAL_I2C_Mem_Read>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200044c0 	.word	0x200044c0

0800146c <ICM45605_WriteIndirect>:

// Function to write to an indirect register
HAL_StatusTypeDef ICM45605_WriteIndirect(uint16_t reg, uint8_t data) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	460a      	mov	r2, r1
 8001476:	80fb      	strh	r3, [r7, #6]
 8001478:	4613      	mov	r3, r2
 800147a:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    
    // Write the register address (16-bit) to the Bank and Register Select registers
    status = ICM45605_WriteRegister(0x7C, (uint8_t)(reg >> 8));    // Bank Select
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	b29b      	uxth	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4619      	mov	r1, r3
 8001486:	207c      	movs	r0, #124	@ 0x7c
 8001488:	f7ff ff9c 	bl	80013c4 <ICM45605_WriteRegister>
 800148c:	4603      	mov	r3, r0
 800148e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <ICM45605_WriteIndirect+0x2e>
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	e014      	b.n	80014c4 <ICM45605_WriteIndirect+0x58>
    
    status = ICM45605_WriteRegister(0x7D, (uint8_t)(reg & 0xFF));  // Register Select
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4619      	mov	r1, r3
 80014a0:	207d      	movs	r0, #125	@ 0x7d
 80014a2:	f7ff ff8f 	bl	80013c4 <ICM45605_WriteRegister>
 80014a6:	4603      	mov	r3, r0
 80014a8:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <ICM45605_WriteIndirect+0x48>
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	e007      	b.n	80014c4 <ICM45605_WriteIndirect+0x58>
    
    // Write the data to the Register Data register
    status = ICM45605_WriteRegister(0x7E, data);                   // Register Data
 80014b4:	797b      	ldrb	r3, [r7, #5]
 80014b6:	4619      	mov	r1, r3
 80014b8:	207e      	movs	r0, #126	@ 0x7e
 80014ba:	f7ff ff83 	bl	80013c4 <ICM45605_WriteRegister>
 80014be:	4603      	mov	r3, r0
 80014c0:	73fb      	strb	r3, [r7, #15]
    
    return status;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <ICM45605_Init>:

// Function to initialize the ICM45605 sensor
HAL_StatusTypeDef ICM45605_Init(void) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    uint8_t who_am_i = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	71bb      	strb	r3, [r7, #6]
    
    // Startup delay
    HAL_Delay(100);
 80014d6:	2064      	movs	r0, #100	@ 0x64
 80014d8:	f002 f84e 	bl	8003578 <HAL_Delay>

    // Read WHO_AM_I register to verify communication
    if (ICM45605_ReadRegister(ICM45605_WHO_AM_I, &who_am_i) != HAL_OK) {
 80014dc:	1dbb      	adds	r3, r7, #6
 80014de:	4619      	mov	r1, r3
 80014e0:	2072      	movs	r0, #114	@ 0x72
 80014e2:	f7ff ff8b 	bl	80013fc <ICM45605_ReadRegister>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <ICM45605_Init+0x24>
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e04e      	b.n	800158e <ICM45605_Init+0xc2>
    }
    printf("WHO_AM_I = 0x%02X\r\n", who_am_i);
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4828      	ldr	r0, [pc, #160]	@ (8001598 <ICM45605_Init+0xcc>)
 80014f6:	f014 fa1d 	bl	8015934 <iprintf>

    // Check if the sensor responds correctly
    if (who_am_i != ICM45605_DEVICE_ID) {
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	2be5      	cmp	r3, #229	@ 0xe5
 80014fe:	d001      	beq.n	8001504 <ICM45605_Init+0x38>
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e044      	b.n	800158e <ICM45605_Init+0xc2>
    }

    // Reset the sensor
    if (ICM45605_WriteRegister(ICM45605_REG_PWR_MGMT_1, ICM45605_RESET) != HAL_OK) {
 8001504:	2180      	movs	r1, #128	@ 0x80
 8001506:	206b      	movs	r0, #107	@ 0x6b
 8001508:	f7ff ff5c 	bl	80013c4 <ICM45605_WriteRegister>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <ICM45605_Init+0x4a>
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e03b      	b.n	800158e <ICM45605_Init+0xc2>
    }
    
    // Wait for reset to complete
    HAL_Delay(100);
 8001516:	2064      	movs	r0, #100	@ 0x64
 8001518:	f002 f82e 	bl	8003578 <HAL_Delay>
    
    // Exit sleep mode
    if (ICM45605_WriteRegister(ICM45605_REG_PWR_MGMT_1, 0x01) != HAL_OK) {
 800151c:	2101      	movs	r1, #1
 800151e:	206b      	movs	r0, #107	@ 0x6b
 8001520:	f7ff ff50 	bl	80013c4 <ICM45605_WriteRegister>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <ICM45605_Init+0x62>
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e02f      	b.n	800158e <ICM45605_Init+0xc2>
    }
    
    HAL_Delay(10);
 800152e:	200a      	movs	r0, #10
 8001530:	f002 f822 	bl	8003578 <HAL_Delay>
    
    // Sensor configuration
    // Accelerometer configuration (±2g by default)
    status = ICM45605_WriteRegister(ICM45605_REG_ACCEL_CONFIG, ICM45605_ACCEL_RANGE_2G);
 8001534:	2100      	movs	r1, #0
 8001536:	201c      	movs	r0, #28
 8001538:	f7ff ff44 	bl	80013c4 <ICM45605_WriteRegister>
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <ICM45605_Init+0x7e>
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	e021      	b.n	800158e <ICM45605_Init+0xc2>
    
    // Gyroscope configuration (±250 dps by default)
    status = ICM45605_WriteRegister(ICM45605_REG_GYRO_CONFIG, ICM45605_GYRO_RANGE_250DPS);
 800154a:	2100      	movs	r1, #0
 800154c:	201b      	movs	r0, #27
 800154e:	f7ff ff39 	bl	80013c4 <ICM45605_WriteRegister>
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <ICM45605_Init+0x94>
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	e016      	b.n	800158e <ICM45605_Init+0xc2>
    
    // Sampling frequency configuration (100 Hz by default)
    status = ICM45605_WriteRegister(ICM45605_REG_CONFIG, ICM45605_DLPF_BW_98HZ);
 8001560:	2102      	movs	r1, #2
 8001562:	201a      	movs	r0, #26
 8001564:	f7ff ff2e 	bl	80013c4 <ICM45605_WriteRegister>
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <ICM45605_Init+0xaa>
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	e00b      	b.n	800158e <ICM45605_Init+0xc2>
    
    // Division frequency configuration (100 Hz)
    status = ICM45605_WriteRegister(ICM45605_REG_SMPLRT_DIV, 0x09);
 8001576:	2109      	movs	r1, #9
 8001578:	2019      	movs	r0, #25
 800157a:	f7ff ff23 	bl	80013c4 <ICM45605_WriteRegister>
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <ICM45605_Init+0xc0>
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	e000      	b.n	800158e <ICM45605_Init+0xc2>

    return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	080168a0 	.word	0x080168a0

0800159c <ICM45605_ConfigureKartTrackingMode>:
    
    return HAL_OK;
}

// Function to configure the IMU for high-performance kart tracking
HAL_StatusTypeDef ICM45605_ConfigureKartTrackingMode(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    
    // Reset the sensor first to ensure clean configuration
    status = ICM45605_WriteRegister(ICM45605_REG_PWR_MGMT_1, ICM45605_RESET);
 80015a2:	2180      	movs	r1, #128	@ 0x80
 80015a4:	206b      	movs	r0, #107	@ 0x6b
 80015a6:	f7ff ff0d 	bl	80013c4 <ICM45605_WriteRegister>
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <ICM45605_ConfigureKartTrackingMode+0x1c>
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	e054      	b.n	8001662 <ICM45605_ConfigureKartTrackingMode+0xc6>
    
    // Wait for reset to complete
    HAL_Delay(100);
 80015b8:	2064      	movs	r0, #100	@ 0x64
 80015ba:	f001 ffdd 	bl	8003578 <HAL_Delay>
    
    // Exit sleep mode and select the best clock source
    status = ICM45605_WriteRegister(ICM45605_REG_PWR_MGMT_1, 0x01); // Auto-select best clock
 80015be:	2101      	movs	r1, #1
 80015c0:	206b      	movs	r0, #107	@ 0x6b
 80015c2:	f7ff feff 	bl	80013c4 <ICM45605_WriteRegister>
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <ICM45605_ConfigureKartTrackingMode+0x38>
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	e046      	b.n	8001662 <ICM45605_ConfigureKartTrackingMode+0xc6>
    
    HAL_Delay(10);
 80015d4:	200a      	movs	r0, #10
 80015d6:	f001 ffcf 	bl	8003578 <HAL_Delay>
    
    // 1. Enable both Gyro and Accel in Low Noise (LN) mode for maximum precision
    status = ICM45605_WriteIndirect(ICM45605_INDIRECT_PWR_CONFIG, ICM45605_PWR_MODE_LN_BOTH);
 80015da:	210f      	movs	r1, #15
 80015dc:	2010      	movs	r0, #16
 80015de:	f7ff ff45 	bl	800146c <ICM45605_WriteIndirect>
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <ICM45605_ConfigureKartTrackingMode+0x54>
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	e038      	b.n	8001662 <ICM45605_ConfigureKartTrackingMode+0xc6>
    
    // 2. Configure Gyroscope → ±2000dps @ 6400Hz (maximum rate for fast movements)
    status = ICM45605_WriteIndirect(ICM45605_INDIRECT_GYRO_CONFIG, ICM45605_GYRO_2000DPS_6400HZ);
 80015f0:	2113      	movs	r1, #19
 80015f2:	201c      	movs	r0, #28
 80015f4:	f7ff ff3a 	bl	800146c <ICM45605_WriteIndirect>
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <ICM45605_ConfigureKartTrackingMode+0x6a>
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	e02d      	b.n	8001662 <ICM45605_ConfigureKartTrackingMode+0xc6>
    
    // 3. Configure Accelerometer → ±16g @ 6400Hz (for high acceleration in karts)
    status = ICM45605_WriteIndirect(ICM45605_INDIRECT_ACCEL_CONFIG, ICM45605_ACCEL_16G_6400HZ);
 8001606:	2113      	movs	r1, #19
 8001608:	201b      	movs	r0, #27
 800160a:	f7ff ff2f 	bl	800146c <ICM45605_WriteIndirect>
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <ICM45605_ConfigureKartTrackingMode+0x80>
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	e022      	b.n	8001662 <ICM45605_ConfigureKartTrackingMode+0xc6>
    
    // 4. Bypass Gyro Low-Pass Filter for maximum response speed (may increase noise)
    status = ICM45605_WriteIndirect(ICM45605_INDIRECT_GYRO_LPF, ICM45605_LPF_BYPASS);
 800161c:	2100      	movs	r1, #0
 800161e:	20ac      	movs	r0, #172	@ 0xac
 8001620:	f7ff ff24 	bl	800146c <ICM45605_WriteIndirect>
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <ICM45605_ConfigureKartTrackingMode+0x96>
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	e017      	b.n	8001662 <ICM45605_ConfigureKartTrackingMode+0xc6>
    
    // 5. Bypass Accelerometer Low-Pass Filter for fastest response
    status = ICM45605_WriteIndirect(ICM45605_INDIRECT_ACCEL_LPF, ICM45605_LPF_BYPASS);
 8001632:	2100      	movs	r1, #0
 8001634:	f640 0031 	movw	r0, #2097	@ 0x831
 8001638:	f7ff ff18 	bl	800146c <ICM45605_WriteIndirect>
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <ICM45605_ConfigureKartTrackingMode+0xae>
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	e00b      	b.n	8001662 <ICM45605_ConfigureKartTrackingMode+0xc6>
    
    // 6. Disable FIFO to minimize latency (direct register reading)
    status = ICM45605_WriteRegister(ICM45605_REG_FIFO_EN, 0x00);
 800164a:	2100      	movs	r1, #0
 800164c:	2023      	movs	r0, #35	@ 0x23
 800164e:	f7ff feb9 	bl	80013c4 <ICM45605_WriteRegister>
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) return status;
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <ICM45605_ConfigureKartTrackingMode+0xc4>
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	e000      	b.n	8001662 <ICM45605_ConfigureKartTrackingMode+0xc6>
    
    return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <ICM45605_CalibrateGyro>:

// Function to perform gyroscope calibration (removes bias)
HAL_StatusTypeDef ICM45605_CalibrateGyro(ICM45605_Gyro_t *gyro_offset, uint16_t samples) {
 800166a:	b580      	push	{r7, lr}
 800166c:	b088      	sub	sp, #32
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    ICM45605_Gyro_t gyro;
    int32_t x_sum = 0, y_sum = 0, z_sum = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
    uint16_t i;
    
    // Make sure the sensor is stationary during calibration
    
    // Take multiple samples to average out noise
    for (i = 0; i < samples; i++) {
 8001682:	2300      	movs	r3, #0
 8001684:	827b      	strh	r3, [r7, #18]
 8001686:	e023      	b.n	80016d0 <ICM45605_CalibrateGyro+0x66>
        status = ICM45605_ReadGyro(&gyro);
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4618      	mov	r0, r3
 800168e:	f000 f891 	bl	80017b4 <ICM45605_ReadGyro>
 8001692:	4603      	mov	r3, r0
 8001694:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) return status;
 8001696:	7c7b      	ldrb	r3, [r7, #17]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <ICM45605_CalibrateGyro+0x36>
 800169c:	7c7b      	ldrb	r3, [r7, #17]
 800169e:	e031      	b.n	8001704 <ICM45605_CalibrateGyro+0x9a>
        
        x_sum += gyro.x;
 80016a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80016a4:	461a      	mov	r2, r3
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	61fb      	str	r3, [r7, #28]
        y_sum += gyro.y;
 80016ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016b0:	461a      	mov	r2, r3
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4413      	add	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        z_sum += gyro.z;
 80016b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016bc:	461a      	mov	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	4413      	add	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]
        
        HAL_Delay(5); // Small delay between samples
 80016c4:	2005      	movs	r0, #5
 80016c6:	f001 ff57 	bl	8003578 <HAL_Delay>
    for (i = 0; i < samples; i++) {
 80016ca:	8a7b      	ldrh	r3, [r7, #18]
 80016cc:	3301      	adds	r3, #1
 80016ce:	827b      	strh	r3, [r7, #18]
 80016d0:	8a7a      	ldrh	r2, [r7, #18]
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3d7      	bcc.n	8001688 <ICM45605_CalibrateGyro+0x1e>
    }
    
    // Calculate average offset values
    gyro_offset->x = (int16_t)(x_sum / samples);
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	801a      	strh	r2, [r3, #0]
    gyro_offset->y = (int16_t)(y_sum / samples);
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	805a      	strh	r2, [r3, #2]
    gyro_offset->z = (int16_t)(z_sum / samples);
 80016f4:	887b      	ldrh	r3, [r7, #2]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	809a      	strh	r2, [r3, #4]
    
    return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3720      	adds	r7, #32
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <ICM45605_ReadMotionData>:
    
    return HAL_OK;
}

// Function to read both accel and gyro in single burst (reduces I2C overhead)
HAL_StatusTypeDef ICM45605_ReadMotionData(ICM45605_Accel_t *accel, ICM45605_Gyro_t *gyro) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
    uint8_t buffer[14]; // Accel (6) + Temp (2) + Gyro (6)
    HAL_StatusTypeDef status;
    
    // Read all motion data in a single burst starting from ACCEL_XOUT_H
    status = ICM45605_ReadRegisters(ICM45605_REG_ACCEL_XOUT_H, buffer, 14);
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	220e      	movs	r2, #14
 800171c:	4619      	mov	r1, r3
 800171e:	203b      	movs	r0, #59	@ 0x3b
 8001720:	f7ff fe86 	bl	8001430 <ICM45605_ReadRegisters>
 8001724:	4603      	mov	r3, r0
 8001726:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <ICM45605_ReadMotionData+0x26>
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	e03c      	b.n	80017ac <ICM45605_ReadMotionData+0xa0>
    
    // Parse accelerometer data
    accel->x = (int16_t)(buffer[0] << 8 | buffer[1]);
 8001732:	7a3b      	ldrb	r3, [r7, #8]
 8001734:	b21b      	sxth	r3, r3
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b21a      	sxth	r2, r3
 800173a:	7a7b      	ldrb	r3, [r7, #9]
 800173c:	b21b      	sxth	r3, r3
 800173e:	4313      	orrs	r3, r2
 8001740:	b21a      	sxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	801a      	strh	r2, [r3, #0]
    accel->y = (int16_t)(buffer[2] << 8 | buffer[3]);
 8001746:	7abb      	ldrb	r3, [r7, #10]
 8001748:	b21b      	sxth	r3, r3
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	7afb      	ldrb	r3, [r7, #11]
 8001750:	b21b      	sxth	r3, r3
 8001752:	4313      	orrs	r3, r2
 8001754:	b21a      	sxth	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	805a      	strh	r2, [r3, #2]
    accel->z = (int16_t)(buffer[4] << 8 | buffer[5]);
 800175a:	7b3b      	ldrb	r3, [r7, #12]
 800175c:	b21b      	sxth	r3, r3
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	7b7b      	ldrb	r3, [r7, #13]
 8001764:	b21b      	sxth	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b21a      	sxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	809a      	strh	r2, [r3, #4]
    
    // Parse gyroscope data (skipping temperature bytes)
    gyro->x = (int16_t)(buffer[8] << 8 | buffer[9]);
 800176e:	7c3b      	ldrb	r3, [r7, #16]
 8001770:	b21b      	sxth	r3, r3
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b21a      	sxth	r2, r3
 8001776:	7c7b      	ldrb	r3, [r7, #17]
 8001778:	b21b      	sxth	r3, r3
 800177a:	4313      	orrs	r3, r2
 800177c:	b21a      	sxth	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	801a      	strh	r2, [r3, #0]
    gyro->y = (int16_t)(buffer[10] << 8 | buffer[11]);
 8001782:	7cbb      	ldrb	r3, [r7, #18]
 8001784:	b21b      	sxth	r3, r3
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b21a      	sxth	r2, r3
 800178a:	7cfb      	ldrb	r3, [r7, #19]
 800178c:	b21b      	sxth	r3, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	b21a      	sxth	r2, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	805a      	strh	r2, [r3, #2]
    gyro->z = (int16_t)(buffer[12] << 8 | buffer[13]);
 8001796:	7d3b      	ldrb	r3, [r7, #20]
 8001798:	b21b      	sxth	r3, r3
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	b21a      	sxth	r2, r3
 800179e:	7d7b      	ldrb	r3, [r7, #21]
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	809a      	strh	r2, [r3, #4]
    
    return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <ICM45605_ReadGyro>:
    
    return HAL_OK;
}

// Function to read gyroscope data
HAL_StatusTypeDef ICM45605_ReadGyro(ICM45605_Gyro_t *gyro) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    HAL_StatusTypeDef status;
    
    status = ICM45605_ReadRegisters(ICM45605_REG_GYRO_XOUT_H, buffer, 6);
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	2206      	movs	r2, #6
 80017c2:	4619      	mov	r1, r3
 80017c4:	2043      	movs	r0, #67	@ 0x43
 80017c6:	f7ff fe33 	bl	8001430 <ICM45605_ReadRegisters>
 80017ca:	4603      	mov	r3, r0
 80017cc:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <ICM45605_ReadGyro+0x24>
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	e01e      	b.n	8001816 <ICM45605_ReadGyro+0x62>
    
    // Convert to signed 16-bit values
    gyro->x = (int16_t)(buffer[0] << 8 | buffer[1]);
 80017d8:	7a3b      	ldrb	r3, [r7, #8]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	b21a      	sxth	r2, r3
 80017e0:	7a7b      	ldrb	r3, [r7, #9]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	801a      	strh	r2, [r3, #0]
    gyro->y = (int16_t)(buffer[2] << 8 | buffer[3]);
 80017ec:	7abb      	ldrb	r3, [r7, #10]
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	805a      	strh	r2, [r3, #2]
    gyro->z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8001800:	7b3b      	ldrb	r3, [r7, #12]
 8001802:	b21b      	sxth	r3, r3
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21a      	sxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	809a      	strh	r2, [r3, #4]
    
    return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <MX_I2C1_Init+0x74>)
 8001826:	4a1c      	ldr	r2, [pc, #112]	@ (8001898 <MX_I2C1_Init+0x78>)
 8001828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800182a:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <MX_I2C1_Init+0x74>)
 800182c:	4a1b      	ldr	r2, [pc, #108]	@ (800189c <MX_I2C1_Init+0x7c>)
 800182e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001830:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <MX_I2C1_Init+0x74>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001836:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <MX_I2C1_Init+0x74>)
 8001838:	2201      	movs	r2, #1
 800183a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800183c:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <MX_I2C1_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001842:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <MX_I2C1_Init+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <MX_I2C1_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_I2C1_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MX_I2C1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800185a:	480e      	ldr	r0, [pc, #56]	@ (8001894 <MX_I2C1_Init+0x74>)
 800185c:	f005 fc7c 	bl	8007158 <HAL_I2C_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001866:	f000 fb57 	bl	8001f18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800186a:	2100      	movs	r1, #0
 800186c:	4809      	ldr	r0, [pc, #36]	@ (8001894 <MX_I2C1_Init+0x74>)
 800186e:	f006 f9ff 	bl	8007c70 <HAL_I2CEx_ConfigAnalogFilter>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001878:	f000 fb4e 	bl	8001f18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800187c:	2100      	movs	r1, #0
 800187e:	4805      	ldr	r0, [pc, #20]	@ (8001894 <MX_I2C1_Init+0x74>)
 8001880:	f006 fa41 	bl	8007d06 <HAL_I2CEx_ConfigDigitalFilter>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800188a:	f000 fb45 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200044c0 	.word	0x200044c0
 8001898:	40005400 	.word	0x40005400
 800189c:	00c0eaff 	.word	0x00c0eaff

080018a0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <MX_I2C3_Init+0x74>)
 80018a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001918 <MX_I2C3_Init+0x78>)
 80018a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <MX_I2C3_Init+0x74>)
 80018ac:	4a1b      	ldr	r2, [pc, #108]	@ (800191c <MX_I2C3_Init+0x7c>)
 80018ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80018b0:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <MX_I2C3_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b6:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <MX_I2C3_Init+0x74>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018bc:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <MX_I2C3_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80018c2:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <MX_I2C3_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <MX_I2C3_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_I2C3_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_I2C3_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018da:	480e      	ldr	r0, [pc, #56]	@ (8001914 <MX_I2C3_Init+0x74>)
 80018dc:	f005 fc3c 	bl	8007158 <HAL_I2C_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018e6:	f000 fb17 	bl	8001f18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ea:	2100      	movs	r1, #0
 80018ec:	4809      	ldr	r0, [pc, #36]	@ (8001914 <MX_I2C3_Init+0x74>)
 80018ee:	f006 f9bf 	bl	8007c70 <HAL_I2CEx_ConfigAnalogFilter>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018f8:	f000 fb0e 	bl	8001f18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018fc:	2100      	movs	r1, #0
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_I2C3_Init+0x74>)
 8001900:	f006 fa01 	bl	8007d06 <HAL_I2CEx_ConfigDigitalFilter>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800190a:	f000 fb05 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20004514 	.word	0x20004514
 8001918:	40005c00 	.word	0x40005c00
 800191c:	00c0eaff 	.word	0x00c0eaff

08001920 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0ac      	sub	sp, #176	@ 0xb0
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001938:	f107 0318 	add.w	r3, r7, #24
 800193c:	2284      	movs	r2, #132	@ 0x84
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f014 f93f 	bl	8015bc4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a44      	ldr	r2, [pc, #272]	@ (8001a5c <HAL_I2C_MspInit+0x13c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d13d      	bne.n	80019cc <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001950:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001954:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001956:	2300      	movs	r3, #0
 8001958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800195a:	f107 0318 	add.w	r3, r7, #24
 800195e:	4618      	mov	r0, r3
 8001960:	f007 fb0e 	bl	8008f80 <HAL_RCCEx_PeriphCLKConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800196a:	f000 fad5 	bl	8001f18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a3b      	ldr	r2, [pc, #236]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 8001986:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800198a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198e:	2312      	movs	r3, #18
 8001990:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001994:	2301      	movs	r3, #1
 8001996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019a0:	2304      	movs	r3, #4
 80019a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019aa:	4619      	mov	r1, r3
 80019ac:	482d      	ldr	r0, [pc, #180]	@ (8001a64 <HAL_I2C_MspInit+0x144>)
 80019ae:	f003 f8c1 	bl	8004b34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 80019b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80019ca:	e042      	b.n	8001a52 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a25      	ldr	r2, [pc, #148]	@ (8001a68 <HAL_I2C_MspInit+0x148>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d13d      	bne.n	8001a52 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80019d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e2:	f107 0318 	add.w	r3, r7, #24
 80019e6:	4618      	mov	r0, r3
 80019e8:	f007 faca 	bl	8008f80 <HAL_RCCEx_PeriphCLKConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80019f2:	f000 fa91 	bl	8001f18 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80019f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a19      	ldr	r2, [pc, #100]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 80019fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001a0e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a16:	2312      	movs	r3, #18
 8001a18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a2e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a32:	4619      	mov	r1, r3
 8001a34:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <HAL_I2C_MspInit+0x14c>)
 8001a36:	f003 f87d 	bl	8004b34 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	4a08      	ldr	r2, [pc, #32]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 8001a40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_I2C_MspInit+0x140>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
}
 8001a52:	bf00      	nop
 8001a54:	37b0      	adds	r7, #176	@ 0xb0
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40005400 	.word	0x40005400
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40005c00 	.word	0x40005c00
 8001a6c:	40021c00 	.word	0x40021c00

08001a70 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	@ 0x38
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2234      	movs	r2, #52	@ 0x34
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f014 f8a1 	bl	8015bc4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a82:	4b3a      	ldr	r3, [pc, #232]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001a84:	4a3a      	ldr	r2, [pc, #232]	@ (8001b70 <MX_LTDC_Init+0x100>)
 8001a86:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a88:	4b38      	ldr	r3, [pc, #224]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a8e:	4b37      	ldr	r3, [pc, #220]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a94:	4b35      	ldr	r3, [pc, #212]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a9a:	4b34      	ldr	r3, [pc, #208]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001aa0:	4b32      	ldr	r3, [pc, #200]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001aa2:	2228      	movs	r2, #40	@ 0x28
 8001aa4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001aa6:	4b31      	ldr	r3, [pc, #196]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001aa8:	2209      	movs	r2, #9
 8001aaa:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001aae:	2235      	movs	r2, #53	@ 0x35
 8001ab0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001ab4:	220b      	movs	r2, #11
 8001ab6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001aba:	f240 2215 	movw	r2, #533	@ 0x215
 8001abe:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001ac2:	f240 121b 	movw	r2, #283	@ 0x11b
 8001ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001ac8:	4b28      	ldr	r3, [pc, #160]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001aca:	f240 2235 	movw	r2, #565	@ 0x235
 8001ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001ad0:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001ad2:	f240 121d 	movw	r2, #285	@ 0x11d
 8001ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001ad8:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ae8:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001af0:	481e      	ldr	r0, [pc, #120]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001af2:	f006 f954 	bl	8007d9e <HAL_LTDC_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001afc:	f000 fa0c 	bl	8001f18 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001b04:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001b08:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001b0e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001b12:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001b14:	2302      	movs	r3, #2
 8001b16:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001b18:	23ff      	movs	r3, #255	@ 0xff
 8001b1a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b20:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b24:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b26:	2307      	movs	r3, #7
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001b2a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001b30:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001b36:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2200      	movs	r2, #0
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <MX_LTDC_Init+0xfc>)
 8001b56:	f006 fa81 	bl	800805c <HAL_LTDC_ConfigLayer>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001b60:	f000 f9da 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3738      	adds	r7, #56	@ 0x38
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20004568 	.word	0x20004568
 8001b70:	40016800 	.word	0x40016800

08001b74 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	@ 0x38
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a55      	ldr	r2, [pc, #340]	@ (8001ce8 <HAL_LTDC_MspInit+0x174>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	f040 80a3 	bne.w	8001cde <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b98:	4b54      	ldr	r3, [pc, #336]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9c:	4a53      	ldr	r2, [pc, #332]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001b9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ba2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba4:	4b51      	ldr	r3, [pc, #324]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	4a4d      	ldr	r2, [pc, #308]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001bc8:	4b48      	ldr	r3, [pc, #288]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bcc:	4a47      	ldr	r2, [pc, #284]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd4:	4b45      	ldr	r3, [pc, #276]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001be0:	4b42      	ldr	r3, [pc, #264]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be4:	4a41      	ldr	r2, [pc, #260]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bea:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bec:	4b3f      	ldr	r3, [pc, #252]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bf8:	4b3c      	ldr	r3, [pc, #240]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfc:	4a3b      	ldr	r2, [pc, #236]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c04:	4b39      	ldr	r3, [pc, #228]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c14:	4a35      	ldr	r2, [pc, #212]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1c:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <HAL_LTDC_MspInit+0x178>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001c28:	2310      	movs	r3, #16
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c38:	230e      	movs	r3, #14
 8001c3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c40:	4619      	mov	r1, r3
 8001c42:	482b      	ldr	r0, [pc, #172]	@ (8001cf0 <HAL_LTDC_MspInit+0x17c>)
 8001c44:	f002 ff76 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001c48:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c5a:	230e      	movs	r3, #14
 8001c5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c62:	4619      	mov	r1, r3
 8001c64:	4823      	ldr	r0, [pc, #140]	@ (8001cf4 <HAL_LTDC_MspInit+0x180>)
 8001c66:	f002 ff65 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001c6a:	23f7      	movs	r3, #247	@ 0xf7
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c7a:	230e      	movs	r3, #14
 8001c7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c82:	4619      	mov	r1, r3
 8001c84:	481c      	ldr	r0, [pc, #112]	@ (8001cf8 <HAL_LTDC_MspInit+0x184>)
 8001c86:	f002 ff55 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001c8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c9c:	2309      	movs	r3, #9
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4815      	ldr	r0, [pc, #84]	@ (8001cfc <HAL_LTDC_MspInit+0x188>)
 8001ca8:	f002 ff44 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001cac:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cbe:	230e      	movs	r3, #14
 8001cc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480d      	ldr	r0, [pc, #52]	@ (8001d00 <HAL_LTDC_MspInit+0x18c>)
 8001cca:	f002 ff33 	bl	8004b34 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2105      	movs	r1, #5
 8001cd2:	2058      	movs	r0, #88	@ 0x58
 8001cd4:	f001 ffc4 	bl	8003c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001cd8:	2058      	movs	r0, #88	@ 0x58
 8001cda:	f001 ffdd 	bl	8003c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3738      	adds	r7, #56	@ 0x38
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40016800 	.word	0x40016800
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40022400 	.word	0x40022400
 8001cf8:	40022800 	.word	0x40022800
 8001cfc:	40021800 	.word	0x40021800
 8001d00:	40022000 	.word	0x40022000

08001d04 <__io_putchar>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int __io_putchar(int ch)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001d0c:	1d39      	adds	r1, r7, #4
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	2201      	movs	r2, #1
 8001d14:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <__io_putchar+0x20>)
 8001d16:	f00a ff09 	bl	800cb2c <HAL_UART_Transmit>
    return ch;
 8001d1a:	687b      	ldr	r3, [r7, #4]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20004ad4 	.word	0x20004ad4

08001d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d2c:	f001 fbf7 	bl	800351e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d30:	f000 f83c 	bl	8001dac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d34:	f000 f8ac 	bl	8001e90 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d38:	f7ff f954 	bl	8000fe4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001d3c:	f7fe fc4e 	bl	80005dc <MX_ADC3_Init>
  MX_CRC_Init();
 8001d40:	f7fe fcde 	bl	8000700 <MX_CRC_Init>
  MX_DCMI_Init();
 8001d44:	f7fe fd1e 	bl	8000784 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001d48:	f7fe fe0e 	bl	8000968 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001d4c:	f7fe fe64 	bl	8000a18 <MX_ETH_Init>
  MX_FMC_Init();
 8001d50:	f7fe ff48 	bl	8000be4 <MX_FMC_Init>
  MX_I2C1_Init();
 8001d54:	f7ff fd64 	bl	8001820 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001d58:	f7ff fda2 	bl	80018a0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001d5c:	f7ff fe88 	bl	8001a70 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001d60:	f000 f8e0 	bl	8001f24 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001d64:	f000 f99a 	bl	800209c <MX_RTC_Init>
  MX_SAI2_Init();
 8001d68:	f000 fa6a 	bl	8002240 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001d6c:	f000 fb7a 	bl	8002464 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001d70:	f000 fbfc 	bl	800256c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001d74:	f000 fc8e 	bl	8002694 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001d78:	f000 fec8 	bl	8002b0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d7c:	f000 ff72 	bl	8002c64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d80:	f000 ffe6 	bl	8002d50 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001d84:	f001 f85c 	bl	8002e40 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001d88:	f001 f8a8 	bl	8002edc <MX_TIM8_Init>
  MX_TIM12_Init();
 8001d8c:	f001 f8fa 	bl	8002f84 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001d90:	f001 fa74 	bl	800327c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001d94:	f001 faa2 	bl	80032dc <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001d98:	f00d fb0a 	bl	800f3b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d9c:	f00f ff74 	bl	8011c88 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001da0:	f7ff f824 	bl	8000dec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001da4:	f00f ffc6 	bl	8011d34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <main+0x80>

08001dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b094      	sub	sp, #80	@ 0x50
 8001db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db2:	f107 0320 	add.w	r3, r7, #32
 8001db6:	2230      	movs	r2, #48	@ 0x30
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f013 ff02 	bl	8015bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001dd0:	f006 faf8 	bl	80083c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <SystemClock_Config+0xdc>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e88 <SystemClock_Config+0xdc>)
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de0:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <SystemClock_Config+0xdc>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dec:	4b27      	ldr	r3, [pc, #156]	@ (8001e8c <SystemClock_Config+0xe0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a26      	ldr	r2, [pc, #152]	@ (8001e8c <SystemClock_Config+0xe0>)
 8001df2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <SystemClock_Config+0xe0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e04:	2309      	movs	r3, #9
 8001e06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e12:	2302      	movs	r3, #2
 8001e14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e1c:	2319      	movs	r3, #25
 8001e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001e20:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001e24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e26:	2302      	movs	r3, #2
 8001e28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001e2a:	2309      	movs	r3, #9
 8001e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e2e:	f107 0320 	add.w	r3, r7, #32
 8001e32:	4618      	mov	r0, r3
 8001e34:	f006 fbe8 	bl	8008608 <HAL_RCC_OscConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e3e:	f000 f86b 	bl	8001f18 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e42:	f006 facf 	bl	80083e4 <HAL_PWREx_EnableOverDrive>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001e4c:	f000 f864 	bl	8001f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e50:	230f      	movs	r3, #15
 8001e52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e54:	2302      	movs	r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e5c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2106      	movs	r1, #6
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f006 fe6e 	bl	8008b50 <HAL_RCC_ClockConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001e7a:	f000 f84d 	bl	8001f18 <Error_Handler>
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3750      	adds	r7, #80	@ 0x50
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40007000 	.word	0x40007000

08001e90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0a2      	sub	sp, #136	@ 0x88
 8001e94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	2284      	movs	r2, #132	@ 0x84
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f013 fe91 	bl	8015bc4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <PeriphCommonClock_Config+0x60>)
 8001ea4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001ea6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001eaa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001eac:	2305      	movs	r3, #5
 8001eae:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001ebc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001ec6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001eca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f007 f852 	bl	8008f80 <HAL_RCCEx_PeriphCLKConfig>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001ee2:	f000 f819 	bl	8001f18 <Error_Handler>
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	3788      	adds	r7, #136	@ 0x88
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	00b00008 	.word	0x00b00008

08001ef4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a04      	ldr	r2, [pc, #16]	@ (8001f14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001f06:	f001 fb17 	bl	8003538 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40001000 	.word	0x40001000

08001f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1c:	b672      	cpsid	i
}
 8001f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <Error_Handler+0x8>

08001f24 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001f28:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <MX_QUADSPI_Init+0x50>)
 8001f2a:	4a13      	ldr	r2, [pc, #76]	@ (8001f78 <MX_QUADSPI_Init+0x54>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <MX_QUADSPI_Init+0x50>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <MX_QUADSPI_Init+0x50>)
 8001f36:	2204      	movs	r2, #4
 8001f38:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <MX_QUADSPI_Init+0x50>)
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <MX_QUADSPI_Init+0x50>)
 8001f42:	2218      	movs	r2, #24
 8001f44:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <MX_QUADSPI_Init+0x50>)
 8001f48:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001f4c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <MX_QUADSPI_Init+0x50>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <MX_QUADSPI_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <MX_QUADSPI_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <MX_QUADSPI_Init+0x50>)
 8001f62:	f006 fa8f 	bl	8008484 <HAL_QSPI_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001f6c:	f7ff ffd4 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20004610 	.word	0x20004610
 8001f78:	a0001000 	.word	0xa0001000

08001f7c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	@ 0x30
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a3b      	ldr	r2, [pc, #236]	@ (8002088 <HAL_QSPI_MspInit+0x10c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d170      	bne.n	8002080 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa2:	4a3a      	ldr	r2, [pc, #232]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001faa:	4b38      	ldr	r3, [pc, #224]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb6:	4b35      	ldr	r3, [pc, #212]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a34      	ldr	r2, [pc, #208]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001fbc:	f043 0310 	orr.w	r3, r3, #16
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b32      	ldr	r3, [pc, #200]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b2c      	ldr	r3, [pc, #176]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe6:	4b29      	ldr	r3, [pc, #164]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a28      	ldr	r2, [pc, #160]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <HAL_QSPI_MspInit+0x110>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001ffe:	2304      	movs	r3, #4
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800200e:	2309      	movs	r3, #9
 8002010:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 031c 	add.w	r3, r7, #28
 8002016:	4619      	mov	r1, r3
 8002018:	481d      	ldr	r0, [pc, #116]	@ (8002090 <HAL_QSPI_MspInit+0x114>)
 800201a:	f002 fd8b 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800201e:	2340      	movs	r3, #64	@ 0x40
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800202e:	230a      	movs	r3, #10
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4816      	ldr	r0, [pc, #88]	@ (8002094 <HAL_QSPI_MspInit+0x118>)
 800203a:	f002 fd7b 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800203e:	2304      	movs	r3, #4
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800204e:	2309      	movs	r3, #9
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	480e      	ldr	r0, [pc, #56]	@ (8002094 <HAL_QSPI_MspInit+0x118>)
 800205a:	f002 fd6b 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800205e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002070:	2309      	movs	r3, #9
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4619      	mov	r1, r3
 800207a:	4807      	ldr	r0, [pc, #28]	@ (8002098 <HAL_QSPI_MspInit+0x11c>)
 800207c:	f002 fd5a 	bl	8004b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002080:	bf00      	nop
 8002082:	3730      	adds	r7, #48	@ 0x30
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	a0001000 	.word	0xa0001000
 800208c:	40023800 	.word	0x40023800
 8002090:	40021000 	.word	0x40021000
 8002094:	40020400 	.word	0x40020400
 8002098:	40020c00 	.word	0x40020c00

0800209c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b090      	sub	sp, #64	@ 0x40
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80020b2:	2300      	movs	r3, #0
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80020b6:	463b      	mov	r3, r7
 80020b8:	2228      	movs	r2, #40	@ 0x28
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f013 fd81 	bl	8015bc4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020c2:	4b46      	ldr	r3, [pc, #280]	@ (80021dc <MX_RTC_Init+0x140>)
 80020c4:	4a46      	ldr	r2, [pc, #280]	@ (80021e0 <MX_RTC_Init+0x144>)
 80020c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020c8:	4b44      	ldr	r3, [pc, #272]	@ (80021dc <MX_RTC_Init+0x140>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020ce:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <MX_RTC_Init+0x140>)
 80020d0:	227f      	movs	r2, #127	@ 0x7f
 80020d2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020d4:	4b41      	ldr	r3, [pc, #260]	@ (80021dc <MX_RTC_Init+0x140>)
 80020d6:	22ff      	movs	r2, #255	@ 0xff
 80020d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020da:	4b40      	ldr	r3, [pc, #256]	@ (80021dc <MX_RTC_Init+0x140>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020e0:	4b3e      	ldr	r3, [pc, #248]	@ (80021dc <MX_RTC_Init+0x140>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020e6:	4b3d      	ldr	r3, [pc, #244]	@ (80021dc <MX_RTC_Init+0x140>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020ec:	483b      	ldr	r0, [pc, #236]	@ (80021dc <MX_RTC_Init+0x140>)
 80020ee:	f007 fc77 	bl	80099e0 <HAL_RTC_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80020f8:	f7ff ff0e 	bl	8001f18 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002102:	2300      	movs	r3, #0
 8002104:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800210e:	2300      	movs	r3, #0
 8002110:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002116:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800211a:	2201      	movs	r2, #1
 800211c:	4619      	mov	r1, r3
 800211e:	482f      	ldr	r0, [pc, #188]	@ (80021dc <MX_RTC_Init+0x140>)
 8002120:	f007 fce0 	bl	8009ae4 <HAL_RTC_SetTime>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800212a:	f7ff fef5 	bl	8001f18 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800212e:	2301      	movs	r3, #1
 8002130:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002134:	2301      	movs	r3, #1
 8002136:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800213a:	2301      	movs	r3, #1
 800213c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002146:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800214a:	2201      	movs	r2, #1
 800214c:	4619      	mov	r1, r3
 800214e:	4823      	ldr	r0, [pc, #140]	@ (80021dc <MX_RTC_Init+0x140>)
 8002150:	f007 fd62 	bl	8009c18 <HAL_RTC_SetDate>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800215a:	f7ff fedd 	bl	8001f18 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800215e:	2300      	movs	r3, #0
 8002160:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002162:	2300      	movs	r3, #0
 8002164:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002166:	2300      	movs	r3, #0
 8002168:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002182:	2301      	movs	r3, #1
 8002184:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800218e:	463b      	mov	r3, r7
 8002190:	2201      	movs	r2, #1
 8002192:	4619      	mov	r1, r3
 8002194:	4811      	ldr	r0, [pc, #68]	@ (80021dc <MX_RTC_Init+0x140>)
 8002196:	f007 fdc3 	bl	8009d20 <HAL_RTC_SetAlarm>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80021a0:	f7ff feba 	bl	8001f18 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80021a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80021aa:	463b      	mov	r3, r7
 80021ac:	2201      	movs	r2, #1
 80021ae:	4619      	mov	r1, r3
 80021b0:	480a      	ldr	r0, [pc, #40]	@ (80021dc <MX_RTC_Init+0x140>)
 80021b2:	f007 fdb5 	bl	8009d20 <HAL_RTC_SetAlarm>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80021bc:	f7ff feac 	bl	8001f18 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80021c0:	2202      	movs	r2, #2
 80021c2:	2100      	movs	r1, #0
 80021c4:	4805      	ldr	r0, [pc, #20]	@ (80021dc <MX_RTC_Init+0x140>)
 80021c6:	f007 ff75 	bl	800a0b4 <HAL_RTCEx_SetTimeStamp>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80021d0:	f7ff fea2 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021d4:	bf00      	nop
 80021d6:	3740      	adds	r7, #64	@ 0x40
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	2000465c 	.word	0x2000465c
 80021e0:	40002800 	.word	0x40002800

080021e4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b0a4      	sub	sp, #144	@ 0x90
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	2284      	movs	r2, #132	@ 0x84
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f013 fce5 	bl	8015bc4 <memset>
  if(rtcHandle->Instance==RTC)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002238 <HAL_RTC_MspInit+0x54>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d114      	bne.n	800222e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002204:	2320      	movs	r3, #32
 8002206:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800220c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	4618      	mov	r0, r3
 8002214:	f006 feb4 	bl	8008f80 <HAL_RCCEx_PeriphCLKConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800221e:	f7ff fe7b 	bl	8001f18 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_RTC_MspInit+0x58>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <HAL_RTC_MspInit+0x58>)
 8002228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800222c:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800222e:	bf00      	nop
 8002230:	3790      	adds	r7, #144	@ 0x90
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40002800 	.word	0x40002800
 800223c:	40023800 	.word	0x40023800

08002240 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8002244:	4b4d      	ldr	r3, [pc, #308]	@ (800237c <MX_SAI2_Init+0x13c>)
 8002246:	4a4e      	ldr	r2, [pc, #312]	@ (8002380 <MX_SAI2_Init+0x140>)
 8002248:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800224a:	4b4c      	ldr	r3, [pc, #304]	@ (800237c <MX_SAI2_Init+0x13c>)
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002250:	4b4a      	ldr	r3, [pc, #296]	@ (800237c <MX_SAI2_Init+0x13c>)
 8002252:	2200      	movs	r2, #0
 8002254:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8002256:	4b49      	ldr	r3, [pc, #292]	@ (800237c <MX_SAI2_Init+0x13c>)
 8002258:	2240      	movs	r2, #64	@ 0x40
 800225a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800225c:	4b47      	ldr	r3, [pc, #284]	@ (800237c <MX_SAI2_Init+0x13c>)
 800225e:	2200      	movs	r2, #0
 8002260:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002262:	4b46      	ldr	r3, [pc, #280]	@ (800237c <MX_SAI2_Init+0x13c>)
 8002264:	2200      	movs	r2, #0
 8002266:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002268:	4b44      	ldr	r3, [pc, #272]	@ (800237c <MX_SAI2_Init+0x13c>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800226e:	4b43      	ldr	r3, [pc, #268]	@ (800237c <MX_SAI2_Init+0x13c>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002274:	4b41      	ldr	r3, [pc, #260]	@ (800237c <MX_SAI2_Init+0x13c>)
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800227a:	4b40      	ldr	r3, [pc, #256]	@ (800237c <MX_SAI2_Init+0x13c>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002280:	4b3e      	ldr	r3, [pc, #248]	@ (800237c <MX_SAI2_Init+0x13c>)
 8002282:	4a40      	ldr	r2, [pc, #256]	@ (8002384 <MX_SAI2_Init+0x144>)
 8002284:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002286:	4b3d      	ldr	r3, [pc, #244]	@ (800237c <MX_SAI2_Init+0x13c>)
 8002288:	2200      	movs	r2, #0
 800228a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800228c:	4b3b      	ldr	r3, [pc, #236]	@ (800237c <MX_SAI2_Init+0x13c>)
 800228e:	2200      	movs	r2, #0
 8002290:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002292:	4b3a      	ldr	r3, [pc, #232]	@ (800237c <MX_SAI2_Init+0x13c>)
 8002294:	2200      	movs	r2, #0
 8002296:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002298:	4b38      	ldr	r3, [pc, #224]	@ (800237c <MX_SAI2_Init+0x13c>)
 800229a:	2200      	movs	r2, #0
 800229c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800229e:	4b37      	ldr	r3, [pc, #220]	@ (800237c <MX_SAI2_Init+0x13c>)
 80022a0:	2208      	movs	r2, #8
 80022a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80022a4:	4b35      	ldr	r3, [pc, #212]	@ (800237c <MX_SAI2_Init+0x13c>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80022aa:	4b34      	ldr	r3, [pc, #208]	@ (800237c <MX_SAI2_Init+0x13c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80022b0:	4b32      	ldr	r3, [pc, #200]	@ (800237c <MX_SAI2_Init+0x13c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80022b6:	4b31      	ldr	r3, [pc, #196]	@ (800237c <MX_SAI2_Init+0x13c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80022bc:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <MX_SAI2_Init+0x13c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80022c2:	4b2e      	ldr	r3, [pc, #184]	@ (800237c <MX_SAI2_Init+0x13c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80022c8:	4b2c      	ldr	r3, [pc, #176]	@ (800237c <MX_SAI2_Init+0x13c>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80022ce:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <MX_SAI2_Init+0x13c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80022d4:	4829      	ldr	r0, [pc, #164]	@ (800237c <MX_SAI2_Init+0x13c>)
 80022d6:	f007 ff55 	bl	800a184 <HAL_SAI_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80022e0:	f7ff fe1a 	bl	8001f18 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80022e4:	4b28      	ldr	r3, [pc, #160]	@ (8002388 <MX_SAI2_Init+0x148>)
 80022e6:	4a29      	ldr	r2, [pc, #164]	@ (800238c <MX_SAI2_Init+0x14c>)
 80022e8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80022ea:	4b27      	ldr	r3, [pc, #156]	@ (8002388 <MX_SAI2_Init+0x148>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80022f0:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <MX_SAI2_Init+0x148>)
 80022f2:	2203      	movs	r2, #3
 80022f4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80022f6:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <MX_SAI2_Init+0x148>)
 80022f8:	2240      	movs	r2, #64	@ 0x40
 80022fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80022fc:	4b22      	ldr	r3, [pc, #136]	@ (8002388 <MX_SAI2_Init+0x148>)
 80022fe:	2200      	movs	r2, #0
 8002300:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002302:	4b21      	ldr	r3, [pc, #132]	@ (8002388 <MX_SAI2_Init+0x148>)
 8002304:	2200      	movs	r2, #0
 8002306:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002308:	4b1f      	ldr	r3, [pc, #124]	@ (8002388 <MX_SAI2_Init+0x148>)
 800230a:	2201      	movs	r2, #1
 800230c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800230e:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <MX_SAI2_Init+0x148>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002314:	4b1c      	ldr	r3, [pc, #112]	@ (8002388 <MX_SAI2_Init+0x148>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800231a:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <MX_SAI2_Init+0x148>)
 800231c:	2200      	movs	r2, #0
 800231e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002320:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <MX_SAI2_Init+0x148>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002326:	4b18      	ldr	r3, [pc, #96]	@ (8002388 <MX_SAI2_Init+0x148>)
 8002328:	2200      	movs	r2, #0
 800232a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800232c:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <MX_SAI2_Init+0x148>)
 800232e:	2200      	movs	r2, #0
 8002330:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002332:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <MX_SAI2_Init+0x148>)
 8002334:	2208      	movs	r2, #8
 8002336:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002338:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <MX_SAI2_Init+0x148>)
 800233a:	2201      	movs	r2, #1
 800233c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800233e:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <MX_SAI2_Init+0x148>)
 8002340:	2200      	movs	r2, #0
 8002342:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002344:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <MX_SAI2_Init+0x148>)
 8002346:	2200      	movs	r2, #0
 8002348:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800234a:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <MX_SAI2_Init+0x148>)
 800234c:	2200      	movs	r2, #0
 800234e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002350:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <MX_SAI2_Init+0x148>)
 8002352:	2200      	movs	r2, #0
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002356:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <MX_SAI2_Init+0x148>)
 8002358:	2200      	movs	r2, #0
 800235a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800235c:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <MX_SAI2_Init+0x148>)
 800235e:	2201      	movs	r2, #1
 8002360:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002362:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <MX_SAI2_Init+0x148>)
 8002364:	2200      	movs	r2, #0
 8002366:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002368:	4807      	ldr	r0, [pc, #28]	@ (8002388 <MX_SAI2_Init+0x148>)
 800236a:	f007 ff0b 	bl	800a184 <HAL_SAI_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002374:	f7ff fdd0 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000467c 	.word	0x2000467c
 8002380:	40015c04 	.word	0x40015c04
 8002384:	0002ee00 	.word	0x0002ee00
 8002388:	20004700 	.word	0x20004700
 800238c:	40015c24 	.word	0x40015c24

08002390 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	@ 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a2b      	ldr	r2, [pc, #172]	@ (800244c <HAL_SAI_MspInit+0xbc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d124      	bne.n	80023ec <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 80023a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002450 <HAL_SAI_MspInit+0xc0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80023aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002454 <HAL_SAI_MspInit+0xc4>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	4a29      	ldr	r2, [pc, #164]	@ (8002454 <HAL_SAI_MspInit+0xc4>)
 80023b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b6:	4b27      	ldr	r3, [pc, #156]	@ (8002454 <HAL_SAI_MspInit+0xc4>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80023c2:	4b23      	ldr	r3, [pc, #140]	@ (8002450 <HAL_SAI_MspInit+0xc0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3301      	adds	r3, #1
 80023c8:	4a21      	ldr	r2, [pc, #132]	@ (8002450 <HAL_SAI_MspInit+0xc0>)
 80023ca:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80023cc:	23f0      	movs	r3, #240	@ 0xf0
 80023ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80023dc:	230a      	movs	r3, #10
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4619      	mov	r1, r3
 80023e6:	481c      	ldr	r0, [pc, #112]	@ (8002458 <HAL_SAI_MspInit+0xc8>)
 80023e8:	f002 fba4 	bl	8004b34 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a1a      	ldr	r2, [pc, #104]	@ (800245c <HAL_SAI_MspInit+0xcc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d125      	bne.n	8002442 <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80023f6:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <HAL_SAI_MspInit+0xc0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10b      	bne.n	8002416 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_SAI_MspInit+0xc4>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <HAL_SAI_MspInit+0xc4>)
 8002404:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002408:	6453      	str	r3, [r2, #68]	@ 0x44
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_SAI_MspInit+0xc4>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002416:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <HAL_SAI_MspInit+0xc0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3301      	adds	r3, #1
 800241c:	4a0c      	ldr	r2, [pc, #48]	@ (8002450 <HAL_SAI_MspInit+0xc0>)
 800241e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002420:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002432:	230a      	movs	r3, #10
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	4808      	ldr	r0, [pc, #32]	@ (8002460 <HAL_SAI_MspInit+0xd0>)
 800243e:	f002 fb79 	bl	8004b34 <HAL_GPIO_Init>

    }
}
 8002442:	bf00      	nop
 8002444:	3728      	adds	r7, #40	@ 0x28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40015c04 	.word	0x40015c04
 8002450:	20004784 	.word	0x20004784
 8002454:	40023800 	.word	0x40023800
 8002458:	40022000 	.word	0x40022000
 800245c:	40015c24 	.word	0x40015c24
 8002460:	40021800 	.word	0x40021800

08002464 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002468:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <MX_SDMMC1_SD_Init+0x3c>)
 800246a:	4a0e      	ldr	r2, [pc, #56]	@ (80024a4 <MX_SDMMC1_SD_Init+0x40>)
 800246c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800246e:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <MX_SDMMC1_SD_Init+0x3c>)
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002474:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <MX_SDMMC1_SD_Init+0x3c>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <MX_SDMMC1_SD_Init+0x3c>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002480:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <MX_SDMMC1_SD_Init+0x3c>)
 8002482:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002486:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <MX_SDMMC1_SD_Init+0x3c>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800248e:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <MX_SDMMC1_SD_Init+0x3c>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20004788 	.word	0x20004788
 80024a4:	40012c00 	.word	0x40012c00

080024a8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a25      	ldr	r2, [pc, #148]	@ (800255c <HAL_SD_MspInit+0xb4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d144      	bne.n	8002554 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80024ca:	4b25      	ldr	r3, [pc, #148]	@ (8002560 <HAL_SD_MspInit+0xb8>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ce:	4a24      	ldr	r2, [pc, #144]	@ (8002560 <HAL_SD_MspInit+0xb8>)
 80024d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024d6:	4b22      	ldr	r3, [pc, #136]	@ (8002560 <HAL_SD_MspInit+0xb8>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <HAL_SD_MspInit+0xb8>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002560 <HAL_SD_MspInit+0xb8>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <HAL_SD_MspInit+0xb8>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024fa:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_SD_MspInit+0xb8>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	4a18      	ldr	r2, [pc, #96]	@ (8002560 <HAL_SD_MspInit+0xb8>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	6313      	str	r3, [r2, #48]	@ 0x30
 8002506:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <HAL_SD_MspInit+0xb8>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002512:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002516:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002524:	230c      	movs	r3, #12
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4619      	mov	r1, r3
 800252e:	480d      	ldr	r0, [pc, #52]	@ (8002564 <HAL_SD_MspInit+0xbc>)
 8002530:	f002 fb00 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002534:	2304      	movs	r3, #4
 8002536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002544:	230c      	movs	r3, #12
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	4806      	ldr	r0, [pc, #24]	@ (8002568 <HAL_SD_MspInit+0xc0>)
 8002550:	f002 faf0 	bl	8004b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	@ 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40012c00 	.word	0x40012c00
 8002560:	40023800 	.word	0x40023800
 8002564:	40020800 	.word	0x40020800
 8002568:	40020c00 	.word	0x40020c00

0800256c <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002570:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 8002572:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002576:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002578:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 800257a:	2200      	movs	r2, #0
 800257c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002584:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002590:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 8002592:	2200      	movs	r2, #0
 8002594:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80025a8:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80025b4:	4804      	ldr	r0, [pc, #16]	@ (80025c8 <MX_SPDIFRX_Init+0x5c>)
 80025b6:	f009 f869 	bl	800b68c <HAL_SPDIFRX_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80025c0:	f7ff fcaa 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	2000480c 	.word	0x2000480c

080025cc <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b0aa      	sub	sp, #168	@ 0xa8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025e4:	f107 0310 	add.w	r3, r7, #16
 80025e8:	2284      	movs	r2, #132	@ 0x84
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f013 fae9 	bl	8015bc4 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80025fa:	d143      	bne.n	8002684 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80025fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002600:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8002602:	2364      	movs	r3, #100	@ 0x64
 8002604:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8002606:	2302      	movs	r3, #2
 8002608:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800260a:	2302      	movs	r3, #2
 800260c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800260e:	2302      	movs	r3, #2
 8002610:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002616:	f107 0310 	add.w	r3, r7, #16
 800261a:	4618      	mov	r0, r3
 800261c:	f006 fcb0 	bl	8008f80 <HAL_RCCEx_PeriphCLKConfig>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8002626:	f7ff fc77 	bl	8001f18 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800262a:	4b18      	ldr	r3, [pc, #96]	@ (800268c <HAL_SPDIFRX_MspInit+0xc0>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	4a17      	ldr	r2, [pc, #92]	@ (800268c <HAL_SPDIFRX_MspInit+0xc0>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002634:	6413      	str	r3, [r2, #64]	@ 0x40
 8002636:	4b15      	ldr	r3, [pc, #84]	@ (800268c <HAL_SPDIFRX_MspInit+0xc0>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002642:	4b12      	ldr	r3, [pc, #72]	@ (800268c <HAL_SPDIFRX_MspInit+0xc0>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	4a11      	ldr	r2, [pc, #68]	@ (800268c <HAL_SPDIFRX_MspInit+0xc0>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	6313      	str	r3, [r2, #48]	@ 0x30
 800264e:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <HAL_SPDIFRX_MspInit+0xc0>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002672:	2308      	movs	r3, #8
 8002674:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800267c:	4619      	mov	r1, r3
 800267e:	4804      	ldr	r0, [pc, #16]	@ (8002690 <HAL_SPDIFRX_MspInit+0xc4>)
 8002680:	f002 fa58 	bl	8004b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8002684:	bf00      	nop
 8002686:	37a8      	adds	r7, #168	@ 0xa8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800
 8002690:	40020c00 	.word	0x40020c00

08002694 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002698:	4b1b      	ldr	r3, [pc, #108]	@ (8002708 <MX_SPI2_Init+0x74>)
 800269a:	4a1c      	ldr	r2, [pc, #112]	@ (800270c <MX_SPI2_Init+0x78>)
 800269c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800269e:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026a6:	4b18      	ldr	r3, [pc, #96]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80026ac:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026ae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80026b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b4:	4b14      	ldr	r3, [pc, #80]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026ba:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026c2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80026c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026da:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026dc:	2200      	movs	r2, #0
 80026de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026e2:	2207      	movs	r2, #7
 80026e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026e6:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026ee:	2208      	movs	r2, #8
 80026f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80026f2:	4805      	ldr	r0, [pc, #20]	@ (8002708 <MX_SPI2_Init+0x74>)
 80026f4:	f009 f826 	bl	800b744 <HAL_SPI_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80026fe:	f7ff fc0b 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20004858 	.word	0x20004858
 800270c:	40003800 	.word	0x40003800

08002710 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	@ 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a25      	ldr	r2, [pc, #148]	@ (80027c4 <HAL_SPI_MspInit+0xb4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d144      	bne.n	80027bc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002732:	4b25      	ldr	r3, [pc, #148]	@ (80027c8 <HAL_SPI_MspInit+0xb8>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	4a24      	ldr	r2, [pc, #144]	@ (80027c8 <HAL_SPI_MspInit+0xb8>)
 8002738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800273c:	6413      	str	r3, [r2, #64]	@ 0x40
 800273e:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <HAL_SPI_MspInit+0xb8>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800274a:	4b1f      	ldr	r3, [pc, #124]	@ (80027c8 <HAL_SPI_MspInit+0xb8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	4a1e      	ldr	r2, [pc, #120]	@ (80027c8 <HAL_SPI_MspInit+0xb8>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002754:	6313      	str	r3, [r2, #48]	@ 0x30
 8002756:	4b1c      	ldr	r3, [pc, #112]	@ (80027c8 <HAL_SPI_MspInit+0xb8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <HAL_SPI_MspInit+0xb8>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4a18      	ldr	r2, [pc, #96]	@ (80027c8 <HAL_SPI_MspInit+0xb8>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	6313      	str	r3, [r2, #48]	@ 0x30
 800276e:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <HAL_SPI_MspInit+0xb8>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LORA_SCK_Pin|LORA_NSS_Pin;
 800277a:	2303      	movs	r3, #3
 800277c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800278a:	2305      	movs	r3, #5
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4619      	mov	r1, r3
 8002794:	480d      	ldr	r0, [pc, #52]	@ (80027cc <HAL_SPI_MspInit+0xbc>)
 8002796:	f002 f9cd 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_MISO_Pin|LORA_MOSI_Pin;
 800279a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800279e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ac:	2305      	movs	r3, #5
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4806      	ldr	r0, [pc, #24]	@ (80027d0 <HAL_SPI_MspInit+0xc0>)
 80027b8:	f002 f9bc 	bl	8004b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80027bc:	bf00      	nop
 80027be:	3728      	adds	r7, #40	@ 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40003800 	.word	0x40003800
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40020400 	.word	0x40020400

080027d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <HAL_MspInit+0x4c>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	4a10      	ldr	r2, [pc, #64]	@ (8002820 <HAL_MspInit+0x4c>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <HAL_MspInit+0x4c>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_MspInit+0x4c>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <HAL_MspInit+0x4c>)
 80027f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027fe:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_MspInit+0x4c>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	210f      	movs	r1, #15
 800280e:	f06f 0001 	mvn.w	r0, #1
 8002812:	f001 fa25 	bl	8003c60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800

08002824 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08e      	sub	sp, #56	@ 0x38
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002834:	4b33      	ldr	r3, [pc, #204]	@ (8002904 <HAL_InitTick+0xe0>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	4a32      	ldr	r2, [pc, #200]	@ (8002904 <HAL_InitTick+0xe0>)
 800283a:	f043 0310 	orr.w	r3, r3, #16
 800283e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002840:	4b30      	ldr	r3, [pc, #192]	@ (8002904 <HAL_InitTick+0xe0>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800284c:	f107 0210 	add.w	r2, r7, #16
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f006 fb60 	bl	8008f1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002866:	f006 fb31 	bl	8008ecc <HAL_RCC_GetPCLK1Freq>
 800286a:	6378      	str	r0, [r7, #52]	@ 0x34
 800286c:	e004      	b.n	8002878 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800286e:	f006 fb2d 	bl	8008ecc <HAL_RCC_GetPCLK1Freq>
 8002872:	4603      	mov	r3, r0
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800287a:	4a23      	ldr	r2, [pc, #140]	@ (8002908 <HAL_InitTick+0xe4>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	0c9b      	lsrs	r3, r3, #18
 8002882:	3b01      	subs	r3, #1
 8002884:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002886:	4b21      	ldr	r3, [pc, #132]	@ (800290c <HAL_InitTick+0xe8>)
 8002888:	4a21      	ldr	r2, [pc, #132]	@ (8002910 <HAL_InitTick+0xec>)
 800288a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800288c:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <HAL_InitTick+0xe8>)
 800288e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002892:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002894:	4a1d      	ldr	r2, [pc, #116]	@ (800290c <HAL_InitTick+0xe8>)
 8002896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002898:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800289a:	4b1c      	ldr	r3, [pc, #112]	@ (800290c <HAL_InitTick+0xe8>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a0:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <HAL_InitTick+0xe8>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a6:	4b19      	ldr	r3, [pc, #100]	@ (800290c <HAL_InitTick+0xe8>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80028ac:	4817      	ldr	r0, [pc, #92]	@ (800290c <HAL_InitTick+0xe8>)
 80028ae:	f008 fff4 	bl	800b89a <HAL_TIM_Base_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80028b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d11b      	bne.n	80028f8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80028c0:	4812      	ldr	r0, [pc, #72]	@ (800290c <HAL_InitTick+0xe8>)
 80028c2:	f009 f841 	bl	800b948 <HAL_TIM_Base_Start_IT>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80028cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d111      	bne.n	80028f8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028d4:	2036      	movs	r0, #54	@ 0x36
 80028d6:	f001 f9df 	bl	8003c98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b0f      	cmp	r3, #15
 80028de:	d808      	bhi.n	80028f2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80028e0:	2200      	movs	r2, #0
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	2036      	movs	r0, #54	@ 0x36
 80028e6:	f001 f9bb 	bl	8003c60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002914 <HAL_InitTick+0xf0>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	e002      	b.n	80028f8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80028f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3738      	adds	r7, #56	@ 0x38
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40023800 	.word	0x40023800
 8002908:	431bde83 	.word	0x431bde83
 800290c:	200048bc 	.word	0x200048bc
 8002910:	40001000 	.word	0x40001000
 8002914:	20000004 	.word	0x20000004

08002918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <NMI_Handler+0x4>

08002920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <HardFault_Handler+0x4>

08002928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <MemManage_Handler+0x4>

08002930 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002934:	bf00      	nop
 8002936:	e7fd      	b.n	8002934 <BusFault_Handler+0x4>

08002938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <UsageFault_Handler+0x4>

08002940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002954:	4802      	ldr	r0, [pc, #8]	@ (8002960 <TIM6_DAC_IRQHandler+0x10>)
 8002956:	f009 f8c6 	bl	800bae6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200048bc 	.word	0x200048bc

08002964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002968:	4802      	ldr	r0, [pc, #8]	@ (8002974 <OTG_FS_IRQHandler+0x10>)
 800296a:	f002 fda1 	bl	80054b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000ddf4 	.word	0x2000ddf4

08002978 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800297c:	4802      	ldr	r0, [pc, #8]	@ (8002988 <LTDC_IRQHandler+0x10>)
 800297e:	f005 faab 	bl	8007ed8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20004568 	.word	0x20004568

0800298c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002990:	4802      	ldr	r0, [pc, #8]	@ (800299c <DMA2D_IRQHandler+0x10>)
 8002992:	f001 fbdf 	bl	8004154 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200002a4 	.word	0x200002a4

080029a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e00a      	b.n	80029c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029b2:	f3af 8000 	nop.w
 80029b6:	4601      	mov	r1, r0
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	60ba      	str	r2, [r7, #8]
 80029be:	b2ca      	uxtb	r2, r1
 80029c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3301      	adds	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	dbf0      	blt.n	80029b2 <_read+0x12>
  }

  return len;
 80029d0:	687b      	ldr	r3, [r7, #4]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	e009      	b.n	8002a00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	60ba      	str	r2, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff f985 	bl	8001d04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3301      	adds	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	dbf1      	blt.n	80029ec <_write+0x12>
  }
  return len;
 8002a08:	687b      	ldr	r3, [r7, #4]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <_close>:

int _close(int file)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a3a:	605a      	str	r2, [r3, #4]
  return 0;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <_isatty>:

int _isatty(int file)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a52:	2301      	movs	r3, #1
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a84:	4a14      	ldr	r2, [pc, #80]	@ (8002ad8 <_sbrk+0x5c>)
 8002a86:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <_sbrk+0x60>)
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a90:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <_sbrk+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a98:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <_sbrk+0x64>)
 8002a9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ae4 <_sbrk+0x68>)
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <_sbrk+0x64>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d207      	bcs.n	8002abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aac:	f013 f946 	bl	8015d3c <__errno>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aba:	e009      	b.n	8002ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002abc:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <_sbrk+0x64>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ac2:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <_sbrk+0x64>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	4a05      	ldr	r2, [pc, #20]	@ (8002ae0 <_sbrk+0x64>)
 8002acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ace:	68fb      	ldr	r3, [r7, #12]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20050000 	.word	0x20050000
 8002adc:	00000400 	.word	0x00000400
 8002ae0:	20004908 	.word	0x20004908
 8002ae4:	2000e320 	.word	0x2000e320

08002ae8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <SystemInit+0x20>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	4a05      	ldr	r2, [pc, #20]	@ (8002b08 <SystemInit+0x20>)
 8002af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b09a      	sub	sp, #104	@ 0x68
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b12:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
 8002b3c:	615a      	str	r2, [r3, #20]
 8002b3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	222c      	movs	r2, #44	@ 0x2c
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f013 f83c 	bl	8015bc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b4c:	4b43      	ldr	r3, [pc, #268]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002b4e:	4a44      	ldr	r2, [pc, #272]	@ (8002c60 <MX_TIM1_Init+0x154>)
 8002b50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b52:	4b42      	ldr	r3, [pc, #264]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b58:	4b40      	ldr	r3, [pc, #256]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002b60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b66:	4b3d      	ldr	r3, [pc, #244]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b72:	4b3a      	ldr	r3, [pc, #232]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b78:	4838      	ldr	r0, [pc, #224]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002b7a:	f008 fe8e 	bl	800b89a <HAL_TIM_Base_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002b84:	f7ff f9c8 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b92:	4619      	mov	r1, r3
 8002b94:	4831      	ldr	r0, [pc, #196]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002b96:	f009 f9c1 	bl	800bf1c <HAL_TIM_ConfigClockSource>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002ba0:	f7ff f9ba 	bl	8001f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ba4:	482d      	ldr	r0, [pc, #180]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002ba6:	f008 ff47 	bl	800ba38 <HAL_TIM_PWM_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002bb0:	f7ff f9b2 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4825      	ldr	r0, [pc, #148]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002bc8:	f009 fe38 	bl	800c83c <HAL_TIMEx_MasterConfigSynchronization>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002bd2:	f7ff f9a1 	bl	8001f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bd6:	2360      	movs	r3, #96	@ 0x60
 8002bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bde:	2300      	movs	r3, #0
 8002be0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002be2:	2300      	movs	r3, #0
 8002be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bf2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4818      	ldr	r0, [pc, #96]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002bfc:	f009 f87a 	bl	800bcf4 <HAL_TIM_PWM_ConfigChannel>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002c06:	f7ff f987 	bl	8001f18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4807      	ldr	r0, [pc, #28]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002c40:	f009 fe8a 	bl	800c958 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002c4a:	f7ff f965 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c4e:	4803      	ldr	r0, [pc, #12]	@ (8002c5c <MX_TIM1_Init+0x150>)
 8002c50:	f000 fa6c 	bl	800312c <HAL_TIM_MspPostInit>

}
 8002c54:	bf00      	nop
 8002c56:	3768      	adds	r7, #104	@ 0x68
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	2000490c 	.word	0x2000490c
 8002c60:	40010000 	.word	0x40010000

08002c64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	@ 0x38
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c84:	463b      	mov	r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	611a      	str	r2, [r3, #16]
 8002c92:	615a      	str	r2, [r3, #20]
 8002c94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c96:	4b2d      	ldr	r3, [pc, #180]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002c98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca4:	4b29      	ldr	r3, [pc, #164]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002caa:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb2:	4b26      	ldr	r3, [pc, #152]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb8:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cbe:	4823      	ldr	r0, [pc, #140]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002cc0:	f008 fdeb 	bl	800b89a <HAL_TIM_Base_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002cca:	f7ff f925 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cd8:	4619      	mov	r1, r3
 8002cda:	481c      	ldr	r0, [pc, #112]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002cdc:	f009 f91e 	bl	800bf1c <HAL_TIM_ConfigClockSource>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002ce6:	f7ff f917 	bl	8001f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002cea:	4818      	ldr	r0, [pc, #96]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002cec:	f008 fea4 	bl	800ba38 <HAL_TIM_PWM_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002cf6:	f7ff f90f 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d02:	f107 031c 	add.w	r3, r7, #28
 8002d06:	4619      	mov	r1, r3
 8002d08:	4810      	ldr	r0, [pc, #64]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002d0a:	f009 fd97 	bl	800c83c <HAL_TIMEx_MasterConfigSynchronization>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002d14:	f7ff f900 	bl	8001f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d18:	2360      	movs	r3, #96	@ 0x60
 8002d1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d28:	463b      	mov	r3, r7
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4807      	ldr	r0, [pc, #28]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002d30:	f008 ffe0 	bl	800bcf4 <HAL_TIM_PWM_ConfigChannel>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002d3a:	f7ff f8ed 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d3e:	4803      	ldr	r0, [pc, #12]	@ (8002d4c <MX_TIM2_Init+0xe8>)
 8002d40:	f000 f9f4 	bl	800312c <HAL_TIM_MspPostInit>

}
 8002d44:	bf00      	nop
 8002d46:	3738      	adds	r7, #56	@ 0x38
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20004958 	.word	0x20004958

08002d50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08e      	sub	sp, #56	@ 0x38
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d64:	f107 031c 	add.w	r3, r7, #28
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d70:	463b      	mov	r3, r7
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
 8002d7c:	611a      	str	r2, [r3, #16]
 8002d7e:	615a      	str	r2, [r3, #20]
 8002d80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d82:	4b2d      	ldr	r3, [pc, #180]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002d84:	4a2d      	ldr	r2, [pc, #180]	@ (8002e3c <MX_TIM3_Init+0xec>)
 8002d86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d88:	4b2b      	ldr	r3, [pc, #172]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d94:	4b28      	ldr	r3, [pc, #160]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002d96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d9c:	4b26      	ldr	r3, [pc, #152]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002da2:	4b25      	ldr	r3, [pc, #148]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002da8:	4823      	ldr	r0, [pc, #140]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002daa:	f008 fd76 	bl	800b89a <HAL_TIM_Base_Init>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002db4:	f7ff f8b0 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	481c      	ldr	r0, [pc, #112]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002dc6:	f009 f8a9 	bl	800bf1c <HAL_TIM_ConfigClockSource>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002dd0:	f7ff f8a2 	bl	8001f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002dd4:	4818      	ldr	r0, [pc, #96]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002dd6:	f008 fe2f 	bl	800ba38 <HAL_TIM_PWM_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002de0:	f7ff f89a 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dec:	f107 031c 	add.w	r3, r7, #28
 8002df0:	4619      	mov	r1, r3
 8002df2:	4811      	ldr	r0, [pc, #68]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002df4:	f009 fd22 	bl	800c83c <HAL_TIMEx_MasterConfigSynchronization>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002dfe:	f7ff f88b 	bl	8001f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e02:	2360      	movs	r3, #96	@ 0x60
 8002e04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e12:	463b      	mov	r3, r7
 8002e14:	2200      	movs	r2, #0
 8002e16:	4619      	mov	r1, r3
 8002e18:	4807      	ldr	r0, [pc, #28]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002e1a:	f008 ff6b 	bl	800bcf4 <HAL_TIM_PWM_ConfigChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002e24:	f7ff f878 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e28:	4803      	ldr	r0, [pc, #12]	@ (8002e38 <MX_TIM3_Init+0xe8>)
 8002e2a:	f000 f97f 	bl	800312c <HAL_TIM_MspPostInit>

}
 8002e2e:	bf00      	nop
 8002e30:	3738      	adds	r7, #56	@ 0x38
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200049a4 	.word	0x200049a4
 8002e3c:	40000400 	.word	0x40000400

08002e40 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e46:	f107 0310 	add.w	r3, r7, #16
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e54:	1d3b      	adds	r3, r7, #4
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed4 <MX_TIM5_Init+0x94>)
 8002e60:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed8 <MX_TIM5_Init+0x98>)
 8002e62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <MX_TIM5_Init+0x94>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ed4 <MX_TIM5_Init+0x94>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002e70:	4b18      	ldr	r3, [pc, #96]	@ (8002ed4 <MX_TIM5_Init+0x94>)
 8002e72:	f04f 32ff 	mov.w	r2, #4294967295
 8002e76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e78:	4b16      	ldr	r3, [pc, #88]	@ (8002ed4 <MX_TIM5_Init+0x94>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <MX_TIM5_Init+0x94>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e84:	4813      	ldr	r0, [pc, #76]	@ (8002ed4 <MX_TIM5_Init+0x94>)
 8002e86:	f008 fd08 	bl	800b89a <HAL_TIM_Base_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002e90:	f7ff f842 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e9a:	f107 0310 	add.w	r3, r7, #16
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	480c      	ldr	r0, [pc, #48]	@ (8002ed4 <MX_TIM5_Init+0x94>)
 8002ea2:	f009 f83b 	bl	800bf1c <HAL_TIM_ConfigClockSource>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002eac:	f7ff f834 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4805      	ldr	r0, [pc, #20]	@ (8002ed4 <MX_TIM5_Init+0x94>)
 8002ebe:	f009 fcbd 	bl	800c83c <HAL_TIMEx_MasterConfigSynchronization>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002ec8:	f7ff f826 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002ecc:	bf00      	nop
 8002ece:	3720      	adds	r7, #32
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	200049f0 	.word	0x200049f0
 8002ed8:	40000c00 	.word	0x40000c00

08002edc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee2:	f107 0310 	add.w	r3, r7, #16
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef0:	1d3b      	adds	r3, r7, #4
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002efa:	4b20      	ldr	r3, [pc, #128]	@ (8002f7c <MX_TIM8_Init+0xa0>)
 8002efc:	4a20      	ldr	r2, [pc, #128]	@ (8002f80 <MX_TIM8_Init+0xa4>)
 8002efe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002f00:	4b1e      	ldr	r3, [pc, #120]	@ (8002f7c <MX_TIM8_Init+0xa0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f06:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <MX_TIM8_Init+0xa0>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f7c <MX_TIM8_Init+0xa0>)
 8002f0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f12:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <MX_TIM8_Init+0xa0>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f1a:	4b18      	ldr	r3, [pc, #96]	@ (8002f7c <MX_TIM8_Init+0xa0>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f20:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <MX_TIM8_Init+0xa0>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002f26:	4815      	ldr	r0, [pc, #84]	@ (8002f7c <MX_TIM8_Init+0xa0>)
 8002f28:	f008 fcb7 	bl	800b89a <HAL_TIM_Base_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002f32:	f7fe fff1 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002f3c:	f107 0310 	add.w	r3, r7, #16
 8002f40:	4619      	mov	r1, r3
 8002f42:	480e      	ldr	r0, [pc, #56]	@ (8002f7c <MX_TIM8_Init+0xa0>)
 8002f44:	f008 ffea 	bl	800bf1c <HAL_TIM_ConfigClockSource>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002f4e:	f7fe ffe3 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	4619      	mov	r1, r3
 8002f62:	4806      	ldr	r0, [pc, #24]	@ (8002f7c <MX_TIM8_Init+0xa0>)
 8002f64:	f009 fc6a 	bl	800c83c <HAL_TIMEx_MasterConfigSynchronization>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002f6e:	f7fe ffd3 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002f72:	bf00      	nop
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20004a3c 	.word	0x20004a3c
 8002f80:	40010400 	.word	0x40010400

08002f84 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
 8002f98:	615a      	str	r2, [r3, #20]
 8002f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <MX_TIM12_Init+0x84>)
 8002f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800300c <MX_TIM12_Init+0x88>)
 8002fa0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002fa2:	4b19      	ldr	r3, [pc, #100]	@ (8003008 <MX_TIM12_Init+0x84>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa8:	4b17      	ldr	r3, [pc, #92]	@ (8003008 <MX_TIM12_Init+0x84>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002fae:	4b16      	ldr	r3, [pc, #88]	@ (8003008 <MX_TIM12_Init+0x84>)
 8002fb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fb4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb6:	4b14      	ldr	r3, [pc, #80]	@ (8003008 <MX_TIM12_Init+0x84>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fbc:	4b12      	ldr	r3, [pc, #72]	@ (8003008 <MX_TIM12_Init+0x84>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002fc2:	4811      	ldr	r0, [pc, #68]	@ (8003008 <MX_TIM12_Init+0x84>)
 8002fc4:	f008 fd38 	bl	800ba38 <HAL_TIM_PWM_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002fce:	f7fe ffa3 	bl	8001f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fd2:	2360      	movs	r3, #96	@ 0x60
 8002fd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4807      	ldr	r0, [pc, #28]	@ (8003008 <MX_TIM12_Init+0x84>)
 8002fea:	f008 fe83 	bl	800bcf4 <HAL_TIM_PWM_ConfigChannel>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002ff4:	f7fe ff90 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002ff8:	4803      	ldr	r0, [pc, #12]	@ (8003008 <MX_TIM12_Init+0x84>)
 8002ffa:	f000 f897 	bl	800312c <HAL_TIM_MspPostInit>

}
 8002ffe:	bf00      	nop
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20004a88 	.word	0x20004a88
 800300c:	40001800 	.word	0x40001800

08003010 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003010:	b480      	push	{r7}
 8003012:	b089      	sub	sp, #36	@ 0x24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a2e      	ldr	r2, [pc, #184]	@ (80030d8 <HAL_TIM_Base_MspInit+0xc8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d10c      	bne.n	800303c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003022:	4b2e      	ldr	r3, [pc, #184]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003026:	4a2d      	ldr	r2, [pc, #180]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6453      	str	r3, [r2, #68]	@ 0x44
 800302e:	4b2b      	ldr	r3, [pc, #172]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800303a:	e046      	b.n	80030ca <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003044:	d10c      	bne.n	8003060 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003046:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	4a24      	ldr	r2, [pc, #144]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6413      	str	r3, [r2, #64]	@ 0x40
 8003052:	4b22      	ldr	r3, [pc, #136]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	69bb      	ldr	r3, [r7, #24]
}
 800305e:	e034      	b.n	80030ca <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1e      	ldr	r2, [pc, #120]	@ (80030e0 <HAL_TIM_Base_MspInit+0xd0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10c      	bne.n	8003084 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800306a:	4b1c      	ldr	r3, [pc, #112]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	6413      	str	r3, [r2, #64]	@ 0x40
 8003076:	4b19      	ldr	r3, [pc, #100]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697b      	ldr	r3, [r7, #20]
}
 8003082:	e022      	b.n	80030ca <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a16      	ldr	r2, [pc, #88]	@ (80030e4 <HAL_TIM_Base_MspInit+0xd4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10c      	bne.n	80030a8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800308e:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	4a12      	ldr	r2, [pc, #72]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 8003094:	f043 0308 	orr.w	r3, r3, #8
 8003098:	6413      	str	r3, [r2, #64]	@ 0x40
 800309a:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
}
 80030a6:	e010      	b.n	80030ca <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0e      	ldr	r2, [pc, #56]	@ (80030e8 <HAL_TIM_Base_MspInit+0xd8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10b      	bne.n	80030ca <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030b2:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	4a09      	ldr	r2, [pc, #36]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030be:	4b07      	ldr	r3, [pc, #28]	@ (80030dc <HAL_TIM_Base_MspInit+0xcc>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
}
 80030ca:	bf00      	nop
 80030cc:	3724      	adds	r7, #36	@ 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40010000 	.word	0x40010000
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000c00 	.word	0x40000c00
 80030e8:	40010400 	.word	0x40010400

080030ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <HAL_TIM_PWM_MspInit+0x38>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d10b      	bne.n	8003116 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80030fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003128 <HAL_TIM_PWM_MspInit+0x3c>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	4a09      	ldr	r2, [pc, #36]	@ (8003128 <HAL_TIM_PWM_MspInit+0x3c>)
 8003104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003108:	6413      	str	r3, [r2, #64]	@ 0x40
 800310a:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <HAL_TIM_PWM_MspInit+0x3c>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40001800 	.word	0x40001800
 8003128:	40023800 	.word	0x40023800

0800312c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08c      	sub	sp, #48	@ 0x30
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 031c 	add.w	r3, r7, #28
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a45      	ldr	r2, [pc, #276]	@ (8003260 <HAL_TIM_MspPostInit+0x134>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d11d      	bne.n	800318a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	4b45      	ldr	r3, [pc, #276]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	4a44      	ldr	r2, [pc, #272]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6313      	str	r3, [r2, #48]	@ 0x30
 800315a:	4b42      	ldr	r3, [pc, #264]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LORA_DI3_Pin;
 8003166:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800316a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	2300      	movs	r3, #0
 8003176:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003178:	2301      	movs	r3, #1
 800317a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LORA_DI3_GPIO_Port, &GPIO_InitStruct);
 800317c:	f107 031c 	add.w	r3, r7, #28
 8003180:	4619      	mov	r1, r3
 8003182:	4839      	ldr	r0, [pc, #228]	@ (8003268 <HAL_TIM_MspPostInit+0x13c>)
 8003184:	f001 fcd6 	bl	8004b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003188:	e065      	b.n	8003256 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003192:	d11d      	bne.n	80031d0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003194:	4b33      	ldr	r3, [pc, #204]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003198:	4a32      	ldr	r2, [pc, #200]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6313      	str	r3, [r2, #48]	@ 0x30
 80031a0:	4b30      	ldr	r3, [pc, #192]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LORA_DI2_Pin;
 80031ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	2300      	movs	r3, #0
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031be:	2301      	movs	r3, #1
 80031c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LORA_DI2_GPIO_Port, &GPIO_InitStruct);
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	4619      	mov	r1, r3
 80031c8:	4827      	ldr	r0, [pc, #156]	@ (8003268 <HAL_TIM_MspPostInit+0x13c>)
 80031ca:	f001 fcb3 	bl	8004b34 <HAL_GPIO_Init>
}
 80031ce:	e042      	b.n	8003256 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM3)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a25      	ldr	r2, [pc, #148]	@ (800326c <HAL_TIM_MspPostInit+0x140>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d11c      	bne.n	8003214 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031da:	4b22      	ldr	r3, [pc, #136]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	4a21      	ldr	r2, [pc, #132]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LORA_DI4_Pin;
 80031f2:	2310      	movs	r3, #16
 80031f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f6:	2302      	movs	r3, #2
 80031f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fe:	2300      	movs	r3, #0
 8003200:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003202:	2302      	movs	r3, #2
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(LORA_DI4_GPIO_Port, &GPIO_InitStruct);
 8003206:	f107 031c 	add.w	r3, r7, #28
 800320a:	4619      	mov	r1, r3
 800320c:	4818      	ldr	r0, [pc, #96]	@ (8003270 <HAL_TIM_MspPostInit+0x144>)
 800320e:	f001 fc91 	bl	8004b34 <HAL_GPIO_Init>
}
 8003212:	e020      	b.n	8003256 <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM12)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a16      	ldr	r2, [pc, #88]	@ (8003274 <HAL_TIM_MspPostInit+0x148>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d11b      	bne.n	8003256 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800321e:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	4a10      	ldr	r2, [pc, #64]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 8003224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003228:	6313      	str	r3, [r2, #48]	@ 0x30
 800322a:	4b0e      	ldr	r3, [pc, #56]	@ (8003264 <HAL_TIM_MspPostInit+0x138>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003236:	2340      	movs	r3, #64	@ 0x40
 8003238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323a:	2302      	movs	r3, #2
 800323c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003242:	2300      	movs	r3, #0
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003246:	2309      	movs	r3, #9
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800324a:	f107 031c 	add.w	r3, r7, #28
 800324e:	4619      	mov	r1, r3
 8003250:	4809      	ldr	r0, [pc, #36]	@ (8003278 <HAL_TIM_MspPostInit+0x14c>)
 8003252:	f001 fc6f 	bl	8004b34 <HAL_GPIO_Init>
}
 8003256:	bf00      	nop
 8003258:	3730      	adds	r7, #48	@ 0x30
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40010000 	.word	0x40010000
 8003264:	40023800 	.word	0x40023800
 8003268:	40020000 	.word	0x40020000
 800326c:	40000400 	.word	0x40000400
 8003270:	40020400 	.word	0x40020400
 8003274:	40001800 	.word	0x40001800
 8003278:	40021c00 	.word	0x40021c00

0800327c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003280:	4b14      	ldr	r3, [pc, #80]	@ (80032d4 <MX_USART1_UART_Init+0x58>)
 8003282:	4a15      	ldr	r2, [pc, #84]	@ (80032d8 <MX_USART1_UART_Init+0x5c>)
 8003284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003286:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <MX_USART1_UART_Init+0x58>)
 8003288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800328c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800328e:	4b11      	ldr	r3, [pc, #68]	@ (80032d4 <MX_USART1_UART_Init+0x58>)
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003294:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <MX_USART1_UART_Init+0x58>)
 8003296:	2200      	movs	r2, #0
 8003298:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800329a:	4b0e      	ldr	r3, [pc, #56]	@ (80032d4 <MX_USART1_UART_Init+0x58>)
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032a0:	4b0c      	ldr	r3, [pc, #48]	@ (80032d4 <MX_USART1_UART_Init+0x58>)
 80032a2:	220c      	movs	r2, #12
 80032a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032a6:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <MX_USART1_UART_Init+0x58>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032ac:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <MX_USART1_UART_Init+0x58>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032b2:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <MX_USART1_UART_Init+0x58>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <MX_USART1_UART_Init+0x58>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032be:	4805      	ldr	r0, [pc, #20]	@ (80032d4 <MX_USART1_UART_Init+0x58>)
 80032c0:	f009 fbe6 	bl	800ca90 <HAL_UART_Init>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80032ca:	f7fe fe25 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20004ad4 	.word	0x20004ad4
 80032d8:	40011000 	.word	0x40011000

080032dc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80032e0:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <MX_USART6_UART_Init+0x58>)
 80032e2:	4a15      	ldr	r2, [pc, #84]	@ (8003338 <MX_USART6_UART_Init+0x5c>)
 80032e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80032e6:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <MX_USART6_UART_Init+0x58>)
 80032e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80032ee:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <MX_USART6_UART_Init+0x58>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80032f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003334 <MX_USART6_UART_Init+0x58>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <MX_USART6_UART_Init+0x58>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003300:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <MX_USART6_UART_Init+0x58>)
 8003302:	220c      	movs	r2, #12
 8003304:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003306:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <MX_USART6_UART_Init+0x58>)
 8003308:	2200      	movs	r2, #0
 800330a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800330c:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <MX_USART6_UART_Init+0x58>)
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003312:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <MX_USART6_UART_Init+0x58>)
 8003314:	2200      	movs	r2, #0
 8003316:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003318:	4b06      	ldr	r3, [pc, #24]	@ (8003334 <MX_USART6_UART_Init+0x58>)
 800331a:	2200      	movs	r2, #0
 800331c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800331e:	4805      	ldr	r0, [pc, #20]	@ (8003334 <MX_USART6_UART_Init+0x58>)
 8003320:	f009 fbb6 	bl	800ca90 <HAL_UART_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800332a:	f7fe fdf5 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20004b5c 	.word	0x20004b5c
 8003338:	40011400 	.word	0x40011400

0800333c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b0ae      	sub	sp, #184	@ 0xb8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003344:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003354:	f107 0320 	add.w	r3, r7, #32
 8003358:	2284      	movs	r2, #132	@ 0x84
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f012 fc31 	bl	8015bc4 <memset>
  if(uartHandle->Instance==USART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a53      	ldr	r2, [pc, #332]	@ (80034b4 <HAL_UART_MspInit+0x178>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d15d      	bne.n	8003428 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800336c:	2340      	movs	r3, #64	@ 0x40
 800336e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003370:	2300      	movs	r3, #0
 8003372:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003374:	f107 0320 	add.w	r3, r7, #32
 8003378:	4618      	mov	r0, r3
 800337a:	f005 fe01 	bl	8008f80 <HAL_RCCEx_PeriphCLKConfig>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003384:	f7fe fdc8 	bl	8001f18 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003388:	4b4b      	ldr	r3, [pc, #300]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 800338a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338c:	4a4a      	ldr	r2, [pc, #296]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 800338e:	f043 0310 	orr.w	r3, r3, #16
 8003392:	6453      	str	r3, [r2, #68]	@ 0x44
 8003394:	4b48      	ldr	r3, [pc, #288]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 8003396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a0:	4b45      	ldr	r3, [pc, #276]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a4:	4a44      	ldr	r2, [pc, #272]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ac:	4b42      	ldr	r3, [pc, #264]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b8:	4b3f      	ldr	r3, [pc, #252]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	4a3e      	ldr	r2, [pc, #248]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c4:	4b3c      	ldr	r3, [pc, #240]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80033d0:	2380      	movs	r3, #128	@ 0x80
 80033d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033e8:	2307      	movs	r3, #7
 80033ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80033ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80033f2:	4619      	mov	r1, r3
 80033f4:	4831      	ldr	r0, [pc, #196]	@ (80034bc <HAL_UART_MspInit+0x180>)
 80033f6:	f001 fb9d 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80033fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003414:	2307      	movs	r3, #7
 8003416:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800341a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800341e:	4619      	mov	r1, r3
 8003420:	4827      	ldr	r0, [pc, #156]	@ (80034c0 <HAL_UART_MspInit+0x184>)
 8003422:	f001 fb87 	bl	8004b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003426:	e040      	b.n	80034aa <HAL_UART_MspInit+0x16e>
  else if(uartHandle->Instance==USART6)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a25      	ldr	r2, [pc, #148]	@ (80034c4 <HAL_UART_MspInit+0x188>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d13b      	bne.n	80034aa <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003432:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003436:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003438:	2300      	movs	r3, #0
 800343a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800343c:	f107 0320 	add.w	r3, r7, #32
 8003440:	4618      	mov	r0, r3
 8003442:	f005 fd9d 	bl	8008f80 <HAL_RCCEx_PeriphCLKConfig>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_UART_MspInit+0x114>
      Error_Handler();
 800344c:	f7fe fd64 	bl	8001f18 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 8003452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003454:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 8003456:	f043 0320 	orr.w	r3, r3, #32
 800345a:	6453      	str	r3, [r2, #68]	@ 0x44
 800345c:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 800345e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003468:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346c:	4a12      	ldr	r2, [pc, #72]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 800346e:	f043 0304 	orr.w	r3, r3, #4
 8003472:	6313      	str	r3, [r2, #48]	@ 0x30
 8003474:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <HAL_UART_MspInit+0x17c>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8003480:	23c0      	movs	r3, #192	@ 0xc0
 8003482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003492:	2303      	movs	r3, #3
 8003494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003498:	2308      	movs	r3, #8
 800349a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800349e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4808      	ldr	r0, [pc, #32]	@ (80034c8 <HAL_UART_MspInit+0x18c>)
 80034a6:	f001 fb45 	bl	8004b34 <HAL_GPIO_Init>
}
 80034aa:	bf00      	nop
 80034ac:	37b8      	adds	r7, #184	@ 0xb8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40011000 	.word	0x40011000
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40020400 	.word	0x40020400
 80034c0:	40020000 	.word	0x40020000
 80034c4:	40011400 	.word	0x40011400
 80034c8:	40020800 	.word	0x40020800

080034cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003504 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034d0:	f7ff fb0a 	bl	8002ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034d4:	480c      	ldr	r0, [pc, #48]	@ (8003508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034d6:	490d      	ldr	r1, [pc, #52]	@ (800350c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034dc:	e002      	b.n	80034e4 <LoopCopyDataInit>

080034de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034e2:	3304      	adds	r3, #4

080034e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034e8:	d3f9      	bcc.n	80034de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f0:	e001      	b.n	80034f6 <LoopFillZerobss>

080034f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f4:	3204      	adds	r2, #4

080034f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034f8:	d3fb      	bcc.n	80034f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80034fa:	f012 fc25 	bl	8015d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034fe:	f7fe fc13 	bl	8001d28 <main>
  bx  lr    
 8003502:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003504:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800350c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003510:	08016994 	.word	0x08016994
  ldr r2, =_sbss
 8003514:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8003518:	2000e320 	.word	0x2000e320

0800351c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800351c:	e7fe      	b.n	800351c <ADC_IRQHandler>

0800351e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003522:	2003      	movs	r0, #3
 8003524:	f000 fb91 	bl	8003c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003528:	2000      	movs	r0, #0
 800352a:	f7ff f97b 	bl	8002824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800352e:	f7ff f951 	bl	80027d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800353c:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <HAL_IncTick+0x20>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <HAL_IncTick+0x24>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4413      	add	r3, r2
 8003548:	4a04      	ldr	r2, [pc, #16]	@ (800355c <HAL_IncTick+0x24>)
 800354a:	6013      	str	r3, [r2, #0]
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000008 	.word	0x20000008
 800355c:	20004be4 	.word	0x20004be4

08003560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return uwTick;
 8003564:	4b03      	ldr	r3, [pc, #12]	@ (8003574 <HAL_GetTick+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20004be4 	.word	0x20004be4

08003578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003580:	f7ff ffee 	bl	8003560 <HAL_GetTick>
 8003584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d005      	beq.n	800359e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003592:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <HAL_Delay+0x44>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800359e:	bf00      	nop
 80035a0:	f7ff ffde 	bl	8003560 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d8f7      	bhi.n	80035a0 <HAL_Delay+0x28>
  {
  }
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000008 	.word	0x20000008

080035c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e031      	b.n	800363a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd f84e 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d116      	bne.n	800362c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003602:	4b10      	ldr	r3, [pc, #64]	@ (8003644 <HAL_ADC_Init+0x84>)
 8003604:	4013      	ands	r3, r2
 8003606:	f043 0202 	orr.w	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f974 	bl	80038fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	f043 0201 	orr.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	641a      	str	r2, [r3, #64]	@ 0x40
 800362a:	e001      	b.n	8003630 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	ffffeefd 	.word	0xffffeefd

08003648 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x1c>
 8003660:	2302      	movs	r3, #2
 8003662:	e13a      	b.n	80038da <HAL_ADC_ConfigChannel+0x292>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b09      	cmp	r3, #9
 8003672:	d93a      	bls.n	80036ea <HAL_ADC_ConfigChannel+0xa2>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800367c:	d035      	beq.n	80036ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68d9      	ldr	r1, [r3, #12]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	3b1e      	subs	r3, #30
 8003694:	2207      	movs	r2, #7
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43da      	mvns	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	400a      	ands	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a8f      	ldr	r2, [pc, #572]	@ (80038e8 <HAL_ADC_ConfigChannel+0x2a0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10a      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68d9      	ldr	r1, [r3, #12]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	061a      	lsls	r2, r3, #24
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036c2:	e039      	b.n	8003738 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68d9      	ldr	r1, [r3, #12]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	4618      	mov	r0, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4403      	add	r3, r0
 80036dc:	3b1e      	subs	r3, #30
 80036de:	409a      	lsls	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036e8:	e026      	b.n	8003738 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6919      	ldr	r1, [r3, #16]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	2207      	movs	r2, #7
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43da      	mvns	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	400a      	ands	r2, r1
 8003710:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6919      	ldr	r1, [r3, #16]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	b29b      	uxth	r3, r3
 8003722:	4618      	mov	r0, r3
 8003724:	4603      	mov	r3, r0
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4403      	add	r3, r0
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	409a      	lsls	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b06      	cmp	r3, #6
 800373e:	d824      	bhi.n	800378a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	3b05      	subs	r3, #5
 8003752:	221f      	movs	r2, #31
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43da      	mvns	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	400a      	ands	r2, r1
 8003760:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	4618      	mov	r0, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	3b05      	subs	r3, #5
 800377c:	fa00 f203 	lsl.w	r2, r0, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	635a      	str	r2, [r3, #52]	@ 0x34
 8003788:	e04c      	b.n	8003824 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d824      	bhi.n	80037dc <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	3b23      	subs	r3, #35	@ 0x23
 80037a4:	221f      	movs	r2, #31
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43da      	mvns	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	400a      	ands	r2, r1
 80037b2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	4618      	mov	r0, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	3b23      	subs	r3, #35	@ 0x23
 80037ce:	fa00 f203 	lsl.w	r2, r0, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80037da:	e023      	b.n	8003824 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	3b41      	subs	r3, #65	@ 0x41
 80037ee:	221f      	movs	r2, #31
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43da      	mvns	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	400a      	ands	r2, r1
 80037fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	4618      	mov	r0, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	3b41      	subs	r3, #65	@ 0x41
 8003818:	fa00 f203 	lsl.w	r2, r0, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a30      	ldr	r2, [pc, #192]	@ (80038ec <HAL_ADC_ConfigChannel+0x2a4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d10a      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x1fc>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003836:	d105      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003838:	4b2d      	ldr	r3, [pc, #180]	@ (80038f0 <HAL_ADC_ConfigChannel+0x2a8>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a2c      	ldr	r2, [pc, #176]	@ (80038f0 <HAL_ADC_ConfigChannel+0x2a8>)
 800383e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003842:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a28      	ldr	r2, [pc, #160]	@ (80038ec <HAL_ADC_ConfigChannel+0x2a4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10f      	bne.n	800386e <HAL_ADC_ConfigChannel+0x226>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b12      	cmp	r3, #18
 8003854:	d10b      	bne.n	800386e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003856:	4b26      	ldr	r3, [pc, #152]	@ (80038f0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4a25      	ldr	r2, [pc, #148]	@ (80038f0 <HAL_ADC_ConfigChannel+0x2a8>)
 800385c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003860:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003862:	4b23      	ldr	r3, [pc, #140]	@ (80038f0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a22      	ldr	r2, [pc, #136]	@ (80038f0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003868:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800386c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1e      	ldr	r2, [pc, #120]	@ (80038ec <HAL_ADC_ConfigChannel+0x2a4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d12b      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x288>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1a      	ldr	r2, [pc, #104]	@ (80038e8 <HAL_ADC_ConfigChannel+0x2a0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <HAL_ADC_ConfigChannel+0x242>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b11      	cmp	r3, #17
 8003888:	d122      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800388a:	4b19      	ldr	r3, [pc, #100]	@ (80038f0 <HAL_ADC_ConfigChannel+0x2a8>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4a18      	ldr	r2, [pc, #96]	@ (80038f0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003890:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003894:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003896:	4b16      	ldr	r3, [pc, #88]	@ (80038f0 <HAL_ADC_ConfigChannel+0x2a8>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4a15      	ldr	r2, [pc, #84]	@ (80038f0 <HAL_ADC_ConfigChannel+0x2a8>)
 800389c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038a0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a10      	ldr	r2, [pc, #64]	@ (80038e8 <HAL_ADC_ConfigChannel+0x2a0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d111      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80038ac:	4b11      	ldr	r3, [pc, #68]	@ (80038f4 <HAL_ADC_ConfigChannel+0x2ac>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a11      	ldr	r2, [pc, #68]	@ (80038f8 <HAL_ADC_ConfigChannel+0x2b0>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	0c9a      	lsrs	r2, r3, #18
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038c2:	e002      	b.n	80038ca <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f9      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	10000012 	.word	0x10000012
 80038ec:	40012000 	.word	0x40012000
 80038f0:	40012300 	.word	0x40012300
 80038f4:	20000000 	.word	0x20000000
 80038f8:	431bde83 	.word	0x431bde83

080038fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003904:	4b78      	ldr	r3, [pc, #480]	@ (8003ae8 <ADC_Init+0x1ec>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a77      	ldr	r2, [pc, #476]	@ (8003ae8 <ADC_Init+0x1ec>)
 800390a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800390e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003910:	4b75      	ldr	r3, [pc, #468]	@ (8003ae8 <ADC_Init+0x1ec>)
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4973      	ldr	r1, [pc, #460]	@ (8003ae8 <ADC_Init+0x1ec>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800392c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	021a      	lsls	r2, r3, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6899      	ldr	r1, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398a:	4a58      	ldr	r2, [pc, #352]	@ (8003aec <ADC_Init+0x1f0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d022      	beq.n	80039d6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800399e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6899      	ldr	r1, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6899      	ldr	r1, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	e00f      	b.n	80039f6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80039e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0202 	bic.w	r2, r2, #2
 8003a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6899      	ldr	r1, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	005a      	lsls	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01b      	beq.n	8003a5c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003a42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	035a      	lsls	r2, r3, #13
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	e007      	b.n	8003a6c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	051a      	lsls	r2, r3, #20
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6899      	ldr	r1, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003aae:	025a      	lsls	r2, r3, #9
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6899      	ldr	r1, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	029a      	lsls	r2, r3, #10
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40012300 	.word	0x40012300
 8003aec:	0f000001 	.word	0x0f000001

08003af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b00:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <__NVIC_SetPriorityGrouping+0x40>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b18:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <__NVIC_SetPriorityGrouping+0x44>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b1e:	4a04      	ldr	r2, [pc, #16]	@ (8003b30 <__NVIC_SetPriorityGrouping+0x40>)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	60d3      	str	r3, [r2, #12]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000ed00 	.word	0xe000ed00
 8003b34:	05fa0000 	.word	0x05fa0000

08003b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b3c:	4b04      	ldr	r3, [pc, #16]	@ (8003b50 <__NVIC_GetPriorityGrouping+0x18>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f003 0307 	and.w	r3, r3, #7
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	db0b      	blt.n	8003b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	f003 021f 	and.w	r2, r3, #31
 8003b6c:	4907      	ldr	r1, [pc, #28]	@ (8003b8c <__NVIC_EnableIRQ+0x38>)
 8003b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	2001      	movs	r0, #1
 8003b76:	fa00 f202 	lsl.w	r2, r0, r2
 8003b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	e000e100 	.word	0xe000e100

08003b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	6039      	str	r1, [r7, #0]
 8003b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	db0a      	blt.n	8003bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	490c      	ldr	r1, [pc, #48]	@ (8003bdc <__NVIC_SetPriority+0x4c>)
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	0112      	lsls	r2, r2, #4
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bb8:	e00a      	b.n	8003bd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	4908      	ldr	r1, [pc, #32]	@ (8003be0 <__NVIC_SetPriority+0x50>)
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	3b04      	subs	r3, #4
 8003bc8:	0112      	lsls	r2, r2, #4
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	440b      	add	r3, r1
 8003bce:	761a      	strb	r2, [r3, #24]
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000e100 	.word	0xe000e100
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b089      	sub	sp, #36	@ 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f1c3 0307 	rsb	r3, r3, #7
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	bf28      	it	cs
 8003c02:	2304      	movcs	r3, #4
 8003c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2b06      	cmp	r3, #6
 8003c0c:	d902      	bls.n	8003c14 <NVIC_EncodePriority+0x30>
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3b03      	subs	r3, #3
 8003c12:	e000      	b.n	8003c16 <NVIC_EncodePriority+0x32>
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c18:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43da      	mvns	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	401a      	ands	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	fa01 f303 	lsl.w	r3, r1, r3
 8003c36:	43d9      	mvns	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c3c:	4313      	orrs	r3, r2
         );
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3724      	adds	r7, #36	@ 0x24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ff4c 	bl	8003af0 <__NVIC_SetPriorityGrouping>
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c72:	f7ff ff61 	bl	8003b38 <__NVIC_GetPriorityGrouping>
 8003c76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	6978      	ldr	r0, [r7, #20]
 8003c7e:	f7ff ffb1 	bl	8003be4 <NVIC_EncodePriority>
 8003c82:	4602      	mov	r2, r0
 8003c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff ff80 	bl	8003b90 <__NVIC_SetPriority>
}
 8003c90:	bf00      	nop
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff ff54 	bl	8003b54 <__NVIC_EnableIRQ>
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e054      	b.n	8003d70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	7f5b      	ldrb	r3, [r3, #29]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d105      	bne.n	8003cdc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fc fd34 	bl	8000744 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	791b      	ldrb	r3, [r3, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10c      	bne.n	8003d04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a22      	ldr	r2, [pc, #136]	@ (8003d78 <HAL_CRC_Init+0xc4>)
 8003cf0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0218 	bic.w	r2, r2, #24
 8003d00:	609a      	str	r2, [r3, #8]
 8003d02:	e00c      	b.n	8003d1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6899      	ldr	r1, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f834 	bl	8003d7c <HAL_CRCEx_Polynomial_Set>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e028      	b.n	8003d70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	795b      	ldrb	r3, [r3, #5]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d105      	bne.n	8003d32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2e:	611a      	str	r2, [r3, #16]
 8003d30:	e004      	b.n	8003d3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6912      	ldr	r2, [r2, #16]
 8003d3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	04c11db7 	.word	0x04c11db7

08003d7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003d8c:	231f      	movs	r3, #31
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	75fb      	strb	r3, [r7, #23]
 8003d9e:	e063      	b.n	8003e68 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003da0:	bf00      	nop
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1e5a      	subs	r2, r3, #1
 8003da6:	613a      	str	r2, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d009      	beq.n	8003dc0 <HAL_CRCEx_Polynomial_Set+0x44>
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b18      	cmp	r3, #24
 8003dc4:	d846      	bhi.n	8003e54 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <HAL_CRCEx_Polynomial_Set+0x50>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003e5b 	.word	0x08003e5b
 8003dd0:	08003e55 	.word	0x08003e55
 8003dd4:	08003e55 	.word	0x08003e55
 8003dd8:	08003e55 	.word	0x08003e55
 8003ddc:	08003e55 	.word	0x08003e55
 8003de0:	08003e55 	.word	0x08003e55
 8003de4:	08003e55 	.word	0x08003e55
 8003de8:	08003e55 	.word	0x08003e55
 8003dec:	08003e49 	.word	0x08003e49
 8003df0:	08003e55 	.word	0x08003e55
 8003df4:	08003e55 	.word	0x08003e55
 8003df8:	08003e55 	.word	0x08003e55
 8003dfc:	08003e55 	.word	0x08003e55
 8003e00:	08003e55 	.word	0x08003e55
 8003e04:	08003e55 	.word	0x08003e55
 8003e08:	08003e55 	.word	0x08003e55
 8003e0c:	08003e3d 	.word	0x08003e3d
 8003e10:	08003e55 	.word	0x08003e55
 8003e14:	08003e55 	.word	0x08003e55
 8003e18:	08003e55 	.word	0x08003e55
 8003e1c:	08003e55 	.word	0x08003e55
 8003e20:	08003e55 	.word	0x08003e55
 8003e24:	08003e55 	.word	0x08003e55
 8003e28:	08003e55 	.word	0x08003e55
 8003e2c:	08003e31 	.word	0x08003e31
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d913      	bls.n	8003e5e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e3a:	e010      	b.n	8003e5e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b07      	cmp	r3, #7
 8003e40:	d90f      	bls.n	8003e62 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e46:	e00c      	b.n	8003e62 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b0f      	cmp	r3, #15
 8003e4c:	d90b      	bls.n	8003e66 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003e52:	e008      	b.n	8003e66 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
        break;
 8003e58:	e006      	b.n	8003e68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e5a:	bf00      	nop
 8003e5c:	e004      	b.n	8003e68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e5e:	bf00      	nop
 8003e60:	e002      	b.n	8003e68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003e66:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10d      	bne.n	8003e8a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 0118 	bic.w	r1, r3, #24
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e069      	b.n	8003f7e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fc fc98 	bl	80007ec <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b2a      	ldr	r3, [pc, #168]	@ (8003f88 <HAL_DCMI_Init+0xf0>)
 8003ede:	400b      	ands	r3, r1
 8003ee0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6819      	ldr	r1, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003ef6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003f02:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003f0e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003f1a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f20:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003f26:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d112      	bne.n	8003f5e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	7f1b      	ldrb	r3, [r3, #28]
 8003f3c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	7f5b      	ldrb	r3, [r3, #29]
 8003f42:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f44:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7f9b      	ldrb	r3, [r3, #30]
 8003f4a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003f4c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7fdb      	ldrb	r3, [r3, #31]
 8003f54:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003f5a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003f5c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 021e 	orr.w	r2, r2, #30
 8003f6c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	ffe0f007 	.word	0xffe0f007

08003f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_Start_IT+0x26>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e048      	b.n	8004044 <HAL_DMA_Start_IT+0xb8>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d137      	bne.n	8004036 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f842 	bl	8004064 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe4:	223f      	movs	r2, #63	@ 0x3f
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0216 	orr.w	r2, r2, #22
 8003ffa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800400a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0208 	orr.w	r2, r2, #8
 8004022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e005      	b.n	8004042 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800403e:	2302      	movs	r3, #2
 8004040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004042:	7dfb      	ldrb	r3, [r7, #23]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004080:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b40      	cmp	r3, #64	@ 0x40
 8004090:	d108      	bne.n	80040a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040a2:	e007      	b.n	80040b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	60da      	str	r2, [r3, #12]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e039      	b.n	8004146 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fc fc70 	bl	80009cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004110:	f023 0107 	bic.w	r1, r3, #7
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004126:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <HAL_DMA2D_Init+0x90>)
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68d1      	ldr	r1, [r2, #12]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	430b      	orrs	r3, r1
 8004134:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	ffffc000 	.word	0xffffc000

08004154 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d026      	beq.n	80041c4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d021      	beq.n	80041c4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800418e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004194:	f043 0201 	orr.w	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2201      	movs	r2, #1
 80041a2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2204      	movs	r2, #4
 80041a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d026      	beq.n	800421c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d021      	beq.n	800421c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041e6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2220      	movs	r2, #32
 80041ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f4:	f043 0202 	orr.w	r2, r3, #2
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2204      	movs	r2, #4
 8004200:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d026      	beq.n	8004274 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800422c:	2b00      	cmp	r3, #0
 800422e:	d021      	beq.n	8004274 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800423e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2208      	movs	r2, #8
 8004246:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424c:	f043 0204 	orr.w	r2, r3, #4
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2204      	movs	r2, #4
 8004258:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d013      	beq.n	80042a6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00e      	beq.n	80042a6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004296:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2204      	movs	r2, #4
 800429e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f853 	bl	800434c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d024      	beq.n	80042fa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01f      	beq.n	80042fa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2202      	movs	r2, #2
 80042d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01f      	beq.n	8004344 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01a      	beq.n	8004344 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800431c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2210      	movs	r2, #16
 8004324:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f80e 	bl	8004360 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_DMA2D_ConfigLayer+0x20>
 8004390:	2302      	movs	r3, #2
 8004392:	e079      	b.n	8004488 <HAL_DMA2D_ConfigLayer+0x114>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	3318      	adds	r3, #24
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80043be:	4b35      	ldr	r3, [pc, #212]	@ (8004494 <HAL_DMA2D_ConfigLayer+0x120>)
 80043c0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b0a      	cmp	r3, #10
 80043c8:	d003      	beq.n	80043d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	d107      	bne.n	80043e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	e005      	b.n	80043ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d120      	bne.n	8004436 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	ea02 0103 	and.w	r1, r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	430a      	orrs	r2, r1
 800440a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b0a      	cmp	r3, #10
 800441c:	d003      	beq.n	8004426 <HAL_DMA2D_ConfigLayer+0xb2>
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b09      	cmp	r3, #9
 8004424:	d127      	bne.n	8004476 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004432:	629a      	str	r2, [r3, #40]	@ 0x28
 8004434:	e01f      	b.n	8004476 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	43db      	mvns	r3, r3
 8004440:	ea02 0103 	and.w	r1, r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	430a      	orrs	r2, r1
 800444c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b0a      	cmp	r3, #10
 800445e:	d003      	beq.n	8004468 <HAL_DMA2D_ConfigLayer+0xf4>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b09      	cmp	r3, #9
 8004466:	d106      	bne.n	8004476 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004474:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	ff03000f 	.word	0xff03000f

08004498 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e086      	b.n	80045b8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fc faf9 	bl	8000ab4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c2:	4b3f      	ldr	r3, [pc, #252]	@ (80045c0 <HAL_ETH_Init+0x128>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c6:	4a3e      	ldr	r2, [pc, #248]	@ (80045c0 <HAL_ETH_Init+0x128>)
 80044c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ce:	4b3c      	ldr	r3, [pc, #240]	@ (80045c0 <HAL_ETH_Init+0x128>)
 80044d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80044da:	4b3a      	ldr	r3, [pc, #232]	@ (80045c4 <HAL_ETH_Init+0x12c>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4a39      	ldr	r2, [pc, #228]	@ (80045c4 <HAL_ETH_Init+0x12c>)
 80044e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80044e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80044e6:	4b37      	ldr	r3, [pc, #220]	@ (80045c4 <HAL_ETH_Init+0x12c>)
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	4935      	ldr	r1, [pc, #212]	@ (80045c4 <HAL_ETH_Init+0x12c>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80044f4:	4b33      	ldr	r3, [pc, #204]	@ (80045c4 <HAL_ETH_Init+0x12c>)
 80044f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800450e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004510:	f7ff f826 	bl	8003560 <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004516:	e011      	b.n	800453c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004518:	f7ff f822 	bl	8003560 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004526:	d909      	bls.n	800453c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2204      	movs	r2, #4
 800452c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	22e0      	movs	r2, #224	@ 0xe0
 8004534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e03d      	b.n	80045b8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e4      	bne.n	8004518 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f97a 	bl	8004848 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fa25 	bl	80049a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa7b 	bl	8004a56 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	461a      	mov	r2, r3
 8004566:	2100      	movs	r1, #0
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f9e3 	bl	8004934 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800457c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b0f      	ldr	r3, [pc, #60]	@ (80045c8 <HAL_ETH_Init+0x130>)
 800458c:	430b      	orrs	r3, r1
 800458e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80045a2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2210      	movs	r2, #16
 80045b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40013800 	.word	0x40013800
 80045c8:	00020060 	.word	0x00020060

080045cc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4b53      	ldr	r3, [pc, #332]	@ (8004730 <ETH_SetMACConfig+0x164>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	7b9b      	ldrb	r3, [r3, #14]
 80045ea:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	7c12      	ldrb	r2, [r2, #16]
 80045f0:	2a00      	cmp	r2, #0
 80045f2:	d102      	bne.n	80045fa <ETH_SetMACConfig+0x2e>
 80045f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80045f8:	e000      	b.n	80045fc <ETH_SetMACConfig+0x30>
 80045fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80045fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	7c52      	ldrb	r2, [r2, #17]
 8004602:	2a00      	cmp	r2, #0
 8004604:	d102      	bne.n	800460c <ETH_SetMACConfig+0x40>
 8004606:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800460a:	e000      	b.n	800460e <ETH_SetMACConfig+0x42>
 800460c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800460e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004614:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	7fdb      	ldrb	r3, [r3, #31]
 800461a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800461c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004622:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	7f92      	ldrb	r2, [r2, #30]
 8004628:	2a00      	cmp	r2, #0
 800462a:	d102      	bne.n	8004632 <ETH_SetMACConfig+0x66>
 800462c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004630:	e000      	b.n	8004634 <ETH_SetMACConfig+0x68>
 8004632:	2200      	movs	r2, #0
                        macconf->Speed |
 8004634:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	7f1b      	ldrb	r3, [r3, #28]
 800463a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800463c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004642:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	791b      	ldrb	r3, [r3, #4]
 8004648:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800464a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004652:	2a00      	cmp	r2, #0
 8004654:	d102      	bne.n	800465c <ETH_SetMACConfig+0x90>
 8004656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800465a:	e000      	b.n	800465e <ETH_SetMACConfig+0x92>
 800465c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800465e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	7bdb      	ldrb	r3, [r3, #15]
 8004664:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004666:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800466c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004674:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004676:	4313      	orrs	r3, r2
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800468e:	2001      	movs	r0, #1
 8004690:	f7fe ff72 	bl	8003578 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80046aa:	4013      	ands	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	d101      	bne.n	80046c2 <ETH_SetMACConfig+0xf6>
 80046be:	2280      	movs	r2, #128	@ 0x80
 80046c0:	e000      	b.n	80046c4 <ETH_SetMACConfig+0xf8>
 80046c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80046c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80046ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80046d2:	2a01      	cmp	r2, #1
 80046d4:	d101      	bne.n	80046da <ETH_SetMACConfig+0x10e>
 80046d6:	2208      	movs	r2, #8
 80046d8:	e000      	b.n	80046dc <ETH_SetMACConfig+0x110>
 80046da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80046dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80046e4:	2a01      	cmp	r2, #1
 80046e6:	d101      	bne.n	80046ec <ETH_SetMACConfig+0x120>
 80046e8:	2204      	movs	r2, #4
 80046ea:	e000      	b.n	80046ee <ETH_SetMACConfig+0x122>
 80046ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80046ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80046f6:	2a01      	cmp	r2, #1
 80046f8:	d101      	bne.n	80046fe <ETH_SetMACConfig+0x132>
 80046fa:	2202      	movs	r2, #2
 80046fc:	e000      	b.n	8004700 <ETH_SetMACConfig+0x134>
 80046fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004700:	4313      	orrs	r3, r2
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004718:	2001      	movs	r0, #1
 800471a:	f7fe ff2d 	bl	8003578 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	619a      	str	r2, [r3, #24]
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	fd20810f 	.word	0xfd20810f

08004734 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4b3d      	ldr	r3, [pc, #244]	@ (8004844 <ETH_SetDMAConfig+0x110>)
 800474e:	4013      	ands	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	7b1b      	ldrb	r3, [r3, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d102      	bne.n	8004760 <ETH_SetDMAConfig+0x2c>
 800475a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800475e:	e000      	b.n	8004762 <ETH_SetDMAConfig+0x2e>
 8004760:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	7b5b      	ldrb	r3, [r3, #13]
 8004766:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004768:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	7f52      	ldrb	r2, [r2, #29]
 800476e:	2a00      	cmp	r2, #0
 8004770:	d102      	bne.n	8004778 <ETH_SetDMAConfig+0x44>
 8004772:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004776:	e000      	b.n	800477a <ETH_SetDMAConfig+0x46>
 8004778:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800477a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	7b9b      	ldrb	r3, [r3, #14]
 8004780:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004782:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004788:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	7f1b      	ldrb	r3, [r3, #28]
 800478e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004790:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	7f9b      	ldrb	r3, [r3, #30]
 8004796:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004798:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800479e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80047a8:	4313      	orrs	r3, r2
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047b8:	461a      	mov	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80047ca:	2001      	movs	r0, #1
 80047cc:	f7fe fed4 	bl	8003578 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047d8:	461a      	mov	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	791b      	ldrb	r3, [r3, #4]
 80047e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80047e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80047ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80047f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80047fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004804:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004806:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800480c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004816:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800481a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004828:	2001      	movs	r0, #1
 800482a:	f7fe fea5 	bl	8003578 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004836:	461a      	mov	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6013      	str	r3, [r2, #0]
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	f8de3f23 	.word	0xf8de3f23

08004848 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b0a6      	sub	sp, #152	@ 0x98
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004850:	2301      	movs	r3, #1
 8004852:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800485c:	2300      	movs	r3, #0
 800485e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004860:	2300      	movs	r3, #0
 8004862:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800487e:	2300      	movs	r3, #0
 8004880:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004884:	2300      	movs	r3, #0
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800488a:	2300      	movs	r3, #0
 800488c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004894:	2300      	movs	r3, #0
 8004896:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80048b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80048b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80048b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80048c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80048c6:	4619      	mov	r1, r3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff fe7f 	bl	80045cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80048ce:	2301      	movs	r3, #1
 80048d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80048dc:	2301      	movs	r3, #1
 80048de:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80048f0:	2300      	movs	r3, #0
 80048f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80048fa:	2301      	movs	r3, #1
 80048fc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80048fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004902:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004904:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004908:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800490a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800490e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004916:	2300      	movs	r3, #0
 8004918:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800491e:	f107 0308 	add.w	r3, r7, #8
 8004922:	4619      	mov	r1, r3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff ff05 	bl	8004734 <ETH_SetDMAConfig>
}
 800492a:	bf00      	nop
 800492c:	3798      	adds	r7, #152	@ 0x98
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3305      	adds	r3, #5
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	3204      	adds	r2, #4
 800494c:	7812      	ldrb	r2, [r2, #0]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4b11      	ldr	r3, [pc, #68]	@ (800499c <ETH_MACAddressConfig+0x68>)
 8004956:	4413      	add	r3, r2
 8004958:	461a      	mov	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3303      	adds	r3, #3
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	061a      	lsls	r2, r3, #24
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3302      	adds	r3, #2
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	041b      	lsls	r3, r3, #16
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3301      	adds	r3, #1
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	4313      	orrs	r3, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	7812      	ldrb	r2, [r2, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <ETH_MACAddressConfig+0x6c>)
 8004986:	4413      	add	r3, r2
 8004988:	461a      	mov	r2, r3
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	6013      	str	r3, [r2, #0]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40028040 	.word	0x40028040
 80049a0:	40028044 	.word	0x40028044

080049a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e03e      	b.n	8004a30 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68d9      	ldr	r1, [r3, #12]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	440b      	add	r3, r1
 80049c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2200      	movs	r2, #0
 80049ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2200      	movs	r2, #0
 80049d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2200      	movs	r2, #0
 80049da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	3206      	adds	r2, #6
 80049e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d80c      	bhi.n	8004a14 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68d9      	ldr	r1, [r3, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	440b      	add	r3, r1
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	e004      	b.n	8004a1e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d9bd      	bls.n	80049b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a48:	611a      	str	r2, [r3, #16]
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e048      	b.n	8004af6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6919      	ldr	r1, [r3, #16]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	440b      	add	r3, r1
 8004a74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2200      	movs	r2, #0
 8004a86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2200      	movs	r2, #0
 8004a92:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2200      	movs	r2, #0
 8004a98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004aa0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	3212      	adds	r2, #18
 8004ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d80c      	bhi.n	8004ae6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6919      	ldr	r1, [r3, #16]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	440b      	add	r3, r1
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	60da      	str	r2, [r3, #12]
 8004ae4:	e004      	b.n	8004af0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	461a      	mov	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3301      	adds	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d9b3      	bls.n	8004a64 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b26:	60da      	str	r2, [r3, #12]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b089      	sub	sp, #36	@ 0x24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	e175      	b.n	8004e40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004b54:	2201      	movs	r2, #1
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4013      	ands	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	f040 8164 	bne.w	8004e3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d005      	beq.n	8004b8a <HAL_GPIO_Init+0x56>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d130      	bne.n	8004bec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	2203      	movs	r2, #3
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	f003 0201 	and.w	r2, r3, #1
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d017      	beq.n	8004c28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	2203      	movs	r2, #3
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d123      	bne.n	8004c7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	08da      	lsrs	r2, r3, #3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3208      	adds	r2, #8
 8004c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	220f      	movs	r2, #15
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	08da      	lsrs	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3208      	adds	r2, #8
 8004c76:	69b9      	ldr	r1, [r7, #24]
 8004c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	2203      	movs	r2, #3
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0203 	and.w	r2, r3, #3
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80be 	beq.w	8004e3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cbe:	4b66      	ldr	r3, [pc, #408]	@ (8004e58 <HAL_GPIO_Init+0x324>)
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc2:	4a65      	ldr	r2, [pc, #404]	@ (8004e58 <HAL_GPIO_Init+0x324>)
 8004cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cca:	4b63      	ldr	r3, [pc, #396]	@ (8004e58 <HAL_GPIO_Init+0x324>)
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004cd6:	4a61      	ldr	r2, [pc, #388]	@ (8004e5c <HAL_GPIO_Init+0x328>)
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	089b      	lsrs	r3, r3, #2
 8004cdc:	3302      	adds	r3, #2
 8004cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	220f      	movs	r2, #15
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a58      	ldr	r2, [pc, #352]	@ (8004e60 <HAL_GPIO_Init+0x32c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d037      	beq.n	8004d72 <HAL_GPIO_Init+0x23e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a57      	ldr	r2, [pc, #348]	@ (8004e64 <HAL_GPIO_Init+0x330>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d031      	beq.n	8004d6e <HAL_GPIO_Init+0x23a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a56      	ldr	r2, [pc, #344]	@ (8004e68 <HAL_GPIO_Init+0x334>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d02b      	beq.n	8004d6a <HAL_GPIO_Init+0x236>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a55      	ldr	r2, [pc, #340]	@ (8004e6c <HAL_GPIO_Init+0x338>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d025      	beq.n	8004d66 <HAL_GPIO_Init+0x232>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a54      	ldr	r2, [pc, #336]	@ (8004e70 <HAL_GPIO_Init+0x33c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01f      	beq.n	8004d62 <HAL_GPIO_Init+0x22e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a53      	ldr	r2, [pc, #332]	@ (8004e74 <HAL_GPIO_Init+0x340>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d019      	beq.n	8004d5e <HAL_GPIO_Init+0x22a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a52      	ldr	r2, [pc, #328]	@ (8004e78 <HAL_GPIO_Init+0x344>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_GPIO_Init+0x226>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a51      	ldr	r2, [pc, #324]	@ (8004e7c <HAL_GPIO_Init+0x348>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00d      	beq.n	8004d56 <HAL_GPIO_Init+0x222>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a50      	ldr	r2, [pc, #320]	@ (8004e80 <HAL_GPIO_Init+0x34c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d007      	beq.n	8004d52 <HAL_GPIO_Init+0x21e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a4f      	ldr	r2, [pc, #316]	@ (8004e84 <HAL_GPIO_Init+0x350>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <HAL_GPIO_Init+0x21a>
 8004d4a:	2309      	movs	r3, #9
 8004d4c:	e012      	b.n	8004d74 <HAL_GPIO_Init+0x240>
 8004d4e:	230a      	movs	r3, #10
 8004d50:	e010      	b.n	8004d74 <HAL_GPIO_Init+0x240>
 8004d52:	2308      	movs	r3, #8
 8004d54:	e00e      	b.n	8004d74 <HAL_GPIO_Init+0x240>
 8004d56:	2307      	movs	r3, #7
 8004d58:	e00c      	b.n	8004d74 <HAL_GPIO_Init+0x240>
 8004d5a:	2306      	movs	r3, #6
 8004d5c:	e00a      	b.n	8004d74 <HAL_GPIO_Init+0x240>
 8004d5e:	2305      	movs	r3, #5
 8004d60:	e008      	b.n	8004d74 <HAL_GPIO_Init+0x240>
 8004d62:	2304      	movs	r3, #4
 8004d64:	e006      	b.n	8004d74 <HAL_GPIO_Init+0x240>
 8004d66:	2303      	movs	r3, #3
 8004d68:	e004      	b.n	8004d74 <HAL_GPIO_Init+0x240>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e002      	b.n	8004d74 <HAL_GPIO_Init+0x240>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <HAL_GPIO_Init+0x240>
 8004d72:	2300      	movs	r3, #0
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	f002 0203 	and.w	r2, r2, #3
 8004d7a:	0092      	lsls	r2, r2, #2
 8004d7c:	4093      	lsls	r3, r2
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004d84:	4935      	ldr	r1, [pc, #212]	@ (8004e5c <HAL_GPIO_Init+0x328>)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	089b      	lsrs	r3, r3, #2
 8004d8a:	3302      	adds	r3, #2
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d92:	4b3d      	ldr	r3, [pc, #244]	@ (8004e88 <HAL_GPIO_Init+0x354>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004db6:	4a34      	ldr	r2, [pc, #208]	@ (8004e88 <HAL_GPIO_Init+0x354>)
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004dbc:	4b32      	ldr	r3, [pc, #200]	@ (8004e88 <HAL_GPIO_Init+0x354>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004de0:	4a29      	ldr	r2, [pc, #164]	@ (8004e88 <HAL_GPIO_Init+0x354>)
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004de6:	4b28      	ldr	r3, [pc, #160]	@ (8004e88 <HAL_GPIO_Init+0x354>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004e88 <HAL_GPIO_Init+0x354>)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e10:	4b1d      	ldr	r3, [pc, #116]	@ (8004e88 <HAL_GPIO_Init+0x354>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e34:	4a14      	ldr	r2, [pc, #80]	@ (8004e88 <HAL_GPIO_Init+0x354>)
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	2b0f      	cmp	r3, #15
 8004e44:	f67f ae86 	bls.w	8004b54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	3724      	adds	r7, #36	@ 0x24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40013800 	.word	0x40013800
 8004e60:	40020000 	.word	0x40020000
 8004e64:	40020400 	.word	0x40020400
 8004e68:	40020800 	.word	0x40020800
 8004e6c:	40020c00 	.word	0x40020c00
 8004e70:	40021000 	.word	0x40021000
 8004e74:	40021400 	.word	0x40021400
 8004e78:	40021800 	.word	0x40021800
 8004e7c:	40021c00 	.word	0x40021c00
 8004e80:	40022000 	.word	0x40022000
 8004e84:	40022400 	.word	0x40022400
 8004e88:	40013c00 	.word	0x40013c00

08004e8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	887b      	ldrh	r3, [r7, #2]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
 8004ea8:	e001      	b.n	8004eae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	807b      	strh	r3, [r7, #2]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ecc:	787b      	ldrb	r3, [r7, #1]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ed2:	887a      	ldrh	r2, [r7, #2]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ed8:	e003      	b.n	8004ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004eda:	887b      	ldrh	r3, [r7, #2]
 8004edc:	041a      	lsls	r2, r3, #16
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	619a      	str	r2, [r3, #24]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b086      	sub	sp, #24
 8004ef2:	af02      	add	r7, sp, #8
 8004ef4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e059      	b.n	8004fb4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f010 f8e6 	bl	80150ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2203      	movs	r2, #3
 8004f24:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f2e:	d102      	bne.n	8004f36 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f009 f945 	bl	800e1ca <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	7c1a      	ldrb	r2, [r3, #16]
 8004f48:	f88d 2000 	strb.w	r2, [sp]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f50:	f009 f8d0 	bl	800e0f4 <USB_CoreInit>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e026      	b.n	8004fb4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f009 f93d 	bl	800e1ec <USB_SetCurrentMode>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e017      	b.n	8004fb4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	7c1a      	ldrb	r2, [r3, #16]
 8004f8c:	f88d 2000 	strb.w	r2, [sp]
 8004f90:	3304      	adds	r3, #4
 8004f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f94:	f009 fae6 	bl	800e564 <USB_HostInit>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e004      	b.n	8004fb4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b08b      	sub	sp, #44	@ 0x2c
 8004fc0:	af04      	add	r7, sp, #16
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	70fb      	strb	r3, [r7, #3]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	70bb      	strb	r3, [r7, #2]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004fd6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004fd8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_HCD_HC_Init+0x2c>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e09d      	b.n	8005124 <HAL_HCD_HC_Init+0x168>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	3319      	adds	r3, #25
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	3314      	adds	r3, #20
 8005014:	787a      	ldrb	r2, [r7, #1]
 8005016:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	3315      	adds	r3, #21
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	3326      	adds	r3, #38	@ 0x26
 800503c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005040:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	78bb      	ldrb	r3, [r7, #2]
 8005046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800504a:	b2d8      	uxtb	r0, r3
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	3316      	adds	r3, #22
 800505a:	4602      	mov	r2, r0
 800505c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	4619      	mov	r1, r3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fbc8 	bl	80057f8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005068:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800506c:	2b00      	cmp	r3, #0
 800506e:	da0a      	bge.n	8005086 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	3317      	adds	r3, #23
 8005080:	2201      	movs	r2, #1
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	e009      	b.n	800509a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	3317      	adds	r3, #23
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f009 fbb8 	bl	800e814 <USB_GetHostSpeed>
 80050a4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80050a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d10b      	bne.n	80050c6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80050ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d107      	bne.n	80050c6 <HAL_HCD_HC_Init+0x10a>
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2bbc      	cmp	r3, #188	@ 0xbc
 80050c0:	d901      	bls.n	80050c6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80050c2:	23bc      	movs	r3, #188	@ 0xbc
 80050c4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80050c6:	78fa      	ldrb	r2, [r7, #3]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3318      	adds	r3, #24
 80050d6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80050da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80050dc:	78fa      	ldrb	r2, [r7, #3]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	b298      	uxth	r0, r3
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	3328      	adds	r3, #40	@ 0x28
 80050f0:	4602      	mov	r2, r0
 80050f2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	787c      	ldrb	r4, [r7, #1]
 80050fe:	78ba      	ldrb	r2, [r7, #2]
 8005100:	78f9      	ldrb	r1, [r7, #3]
 8005102:	9302      	str	r3, [sp, #8]
 8005104:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	4623      	mov	r3, r4
 8005112:	f009 fba7 	bl	800e864 <USB_HC_Init>
 8005116:	4603      	mov	r3, r0
 8005118:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	bd90      	pop	{r4, r7, pc}

0800512c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_HCD_HC_Halt+0x1e>
 8005146:	2302      	movs	r3, #2
 8005148:	e00f      	b.n	800516a <HAL_HCD_HC_Halt+0x3e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f009 ff39 	bl	800efd2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	4608      	mov	r0, r1
 800517e:	4611      	mov	r1, r2
 8005180:	461a      	mov	r2, r3
 8005182:	4603      	mov	r3, r0
 8005184:	70fb      	strb	r3, [r7, #3]
 8005186:	460b      	mov	r3, r1
 8005188:	70bb      	strb	r3, [r7, #2]
 800518a:	4613      	mov	r3, r2
 800518c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	3317      	adds	r3, #23
 800519e:	78ba      	ldrb	r2, [r7, #2]
 80051a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80051a2:	78fa      	ldrb	r2, [r7, #3]
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	3326      	adds	r3, #38	@ 0x26
 80051b2:	787a      	ldrb	r2, [r7, #1]
 80051b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80051b6:	7c3b      	ldrb	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d114      	bne.n	80051e6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80051bc:	78fa      	ldrb	r2, [r7, #3]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	332a      	adds	r3, #42	@ 0x2a
 80051cc:	2203      	movs	r2, #3
 80051ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80051d0:	78fa      	ldrb	r2, [r7, #3]
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	3319      	adds	r3, #25
 80051e0:	7f3a      	ldrb	r2, [r7, #28]
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e009      	b.n	80051fa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	332a      	adds	r3, #42	@ 0x2a
 80051f6:	2202      	movs	r2, #2
 80051f8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80051fa:	787b      	ldrb	r3, [r7, #1]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	f200 8102 	bhi.w	8005406 <HAL_HCD_HC_SubmitRequest+0x292>
 8005202:	a201      	add	r2, pc, #4	@ (adr r2, 8005208 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	08005219 	.word	0x08005219
 800520c:	080053f1 	.word	0x080053f1
 8005210:	080052dd 	.word	0x080052dd
 8005214:	08005367 	.word	0x08005367
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8005218:	7c3b      	ldrb	r3, [r7, #16]
 800521a:	2b01      	cmp	r3, #1
 800521c:	f040 80f5 	bne.w	800540a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8005220:	78bb      	ldrb	r3, [r7, #2]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d12d      	bne.n	8005282 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8005226:	8b3b      	ldrh	r3, [r7, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	333d      	adds	r3, #61	@ 0x3d
 800523c:	2201      	movs	r2, #1
 800523e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	333d      	adds	r3, #61	@ 0x3d
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10a      	bne.n	800526c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	332a      	adds	r3, #42	@ 0x2a
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800526a:	e0ce      	b.n	800540a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800526c:	78fa      	ldrb	r2, [r7, #3]
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	332a      	adds	r3, #42	@ 0x2a
 800527c:	2202      	movs	r2, #2
 800527e:	701a      	strb	r2, [r3, #0]
      break;
 8005280:	e0c3      	b.n	800540a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005282:	78fa      	ldrb	r2, [r7, #3]
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	1a9b      	subs	r3, r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	440b      	add	r3, r1
 8005290:	331a      	adds	r3, #26
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	f040 80b8 	bne.w	800540a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800529a:	78fa      	ldrb	r2, [r7, #3]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	333c      	adds	r3, #60	@ 0x3c
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80052b0:	78fa      	ldrb	r2, [r7, #3]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	332a      	adds	r3, #42	@ 0x2a
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
      break;
 80052c4:	e0a1      	b.n	800540a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	332a      	adds	r3, #42	@ 0x2a
 80052d6:	2202      	movs	r2, #2
 80052d8:	701a      	strb	r2, [r3, #0]
      break;
 80052da:	e096      	b.n	800540a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80052dc:	78bb      	ldrb	r3, [r7, #2]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d120      	bne.n	8005324 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80052e2:	78fa      	ldrb	r2, [r7, #3]
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	333d      	adds	r3, #61	@ 0x3d
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80052f8:	78fa      	ldrb	r2, [r7, #3]
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	4613      	mov	r3, r2
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	332a      	adds	r3, #42	@ 0x2a
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800530c:	e07e      	b.n	800540c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	4613      	mov	r3, r2
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	332a      	adds	r3, #42	@ 0x2a
 800531e:	2202      	movs	r2, #2
 8005320:	701a      	strb	r2, [r3, #0]
      break;
 8005322:	e073      	b.n	800540c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	333c      	adds	r3, #60	@ 0x3c
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	332a      	adds	r3, #42	@ 0x2a
 800534a:	2200      	movs	r2, #0
 800534c:	701a      	strb	r2, [r3, #0]
      break;
 800534e:	e05d      	b.n	800540c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	332a      	adds	r3, #42	@ 0x2a
 8005360:	2202      	movs	r2, #2
 8005362:	701a      	strb	r2, [r3, #0]
      break;
 8005364:	e052      	b.n	800540c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005366:	78bb      	ldrb	r3, [r7, #2]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d120      	bne.n	80053ae <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800536c:	78fa      	ldrb	r2, [r7, #3]
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	4613      	mov	r3, r2
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	333d      	adds	r3, #61	@ 0x3d
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	332a      	adds	r3, #42	@ 0x2a
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005396:	e039      	b.n	800540c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005398:	78fa      	ldrb	r2, [r7, #3]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	332a      	adds	r3, #42	@ 0x2a
 80053a8:	2202      	movs	r2, #2
 80053aa:	701a      	strb	r2, [r3, #0]
      break;
 80053ac:	e02e      	b.n	800540c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80053ae:	78fa      	ldrb	r2, [r7, #3]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	333c      	adds	r3, #60	@ 0x3c
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	332a      	adds	r3, #42	@ 0x2a
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
      break;
 80053d8:	e018      	b.n	800540c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	332a      	adds	r3, #42	@ 0x2a
 80053ea:	2202      	movs	r2, #2
 80053ec:	701a      	strb	r2, [r3, #0]
      break;
 80053ee:	e00d      	b.n	800540c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053f0:	78fa      	ldrb	r2, [r7, #3]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	332a      	adds	r3, #42	@ 0x2a
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
      break;
 8005404:	e002      	b.n	800540c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8005406:	bf00      	nop
 8005408:	e000      	b.n	800540c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800540a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	332c      	adds	r3, #44	@ 0x2c
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	8b39      	ldrh	r1, [r7, #24]
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4403      	add	r3, r0
 8005430:	3334      	adds	r3, #52	@ 0x34
 8005432:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005434:	78fa      	ldrb	r2, [r7, #3]
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	334c      	adds	r3, #76	@ 0x4c
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	3338      	adds	r3, #56	@ 0x38
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	3315      	adds	r3, #21
 800546c:	78fa      	ldrb	r2, [r7, #3]
 800546e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	334d      	adds	r3, #77	@ 0x4d
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	78fa      	ldrb	r2, [r7, #3]
 800548a:	4613      	mov	r3, r2
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	3310      	adds	r3, #16
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	4413      	add	r3, r2
 8005498:	1d19      	adds	r1, r3, #4
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	799b      	ldrb	r3, [r3, #6]
 800549e:	461a      	mov	r2, r3
 80054a0:	f009 fb0c 	bl	800eabc <USB_HC_StartXfer>
 80054a4:	4603      	mov	r3, r0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop

080054b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f009 f806 	bl	800e4d8 <USB_GetMode>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	f040 80fb 	bne.w	80056ca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f008 ffc9 	bl	800e470 <USB_ReadInterrupts>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80f1 	beq.w	80056c8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f008 ffc0 	bl	800e470 <USB_ReadInterrupts>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054fa:	d104      	bne.n	8005506 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005504:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f008 ffb0 	bl	800e470 <USB_ReadInterrupts>
 8005510:	4603      	mov	r3, r0
 8005512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800551a:	d104      	bne.n	8005526 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005524:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f008 ffa0 	bl	800e470 <USB_ReadInterrupts>
 8005530:	4603      	mov	r3, r0
 8005532:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005536:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800553a:	d104      	bne.n	8005546 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005544:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f008 ff90 	bl	800e470 <USB_ReadInterrupts>
 8005550:	4603      	mov	r3, r0
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b02      	cmp	r3, #2
 8005558:	d103      	bne.n	8005562 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2202      	movs	r2, #2
 8005560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f008 ff82 	bl	800e470 <USB_ReadInterrupts>
 800556c:	4603      	mov	r3, r0
 800556e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005576:	d120      	bne.n	80055ba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005580:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d113      	bne.n	80055ba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005592:	2110      	movs	r1, #16
 8005594:	6938      	ldr	r0, [r7, #16]
 8005596:	f008 fe75 	bl	800e284 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800559a:	6938      	ldr	r0, [r7, #16]
 800559c:	f008 fea4 	bl	800e2e8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	7a5b      	ldrb	r3, [r3, #9]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d105      	bne.n	80055b4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2101      	movs	r1, #1
 80055ae:	4618      	mov	r0, r3
 80055b0:	f009 f890 	bl	800e6d4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f00f fe0b 	bl	80151d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f008 ff56 	bl	800e470 <USB_ReadInterrupts>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055ce:	d102      	bne.n	80055d6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 fd4d 	bl	8007070 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f008 ff48 	bl	800e470 <USB_ReadInterrupts>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d106      	bne.n	80055f8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f00f fdd4 	bl	8015198 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2208      	movs	r2, #8
 80055f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f008 ff37 	bl	800e470 <USB_ReadInterrupts>
 8005602:	4603      	mov	r3, r0
 8005604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005608:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800560c:	d139      	bne.n	8005682 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f009 fccc 	bl	800efb0 <USB_HC_ReadInterrupt>
 8005618:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e025      	b.n	800566c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	fa22 f303 	lsr.w	r3, r2, r3
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d018      	beq.n	8005666 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800564a:	d106      	bne.n	800565a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f905 	bl	8005862 <HCD_HC_IN_IRQHandler>
 8005658:	e005      	b.n	8005666 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 ff67 	bl	8006534 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	3301      	adds	r3, #1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	795b      	ldrb	r3, [r3, #5]
 8005670:	461a      	mov	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	4293      	cmp	r3, r2
 8005676:	d3d3      	bcc.n	8005620 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f008 fef2 	bl	800e470 <USB_ReadInterrupts>
 800568c:	4603      	mov	r3, r0
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b10      	cmp	r3, #16
 8005694:	d101      	bne.n	800569a <HAL_HCD_IRQHandler+0x1ea>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <HAL_HCD_IRQHandler+0x1ec>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d014      	beq.n	80056ca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0210 	bic.w	r2, r2, #16
 80056ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f001 fbfe 	bl	8006eb2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	699a      	ldr	r2, [r3, #24]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0210 	orr.w	r2, r2, #16
 80056c4:	619a      	str	r2, [r3, #24]
 80056c6:	e000      	b.n	80056ca <HAL_HCD_IRQHandler+0x21a>
      return;
 80056c8:	bf00      	nop
    }
  }
}
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_HCD_Start+0x16>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e013      	b.n	800570e <HAL_HCD_Start+0x3e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2101      	movs	r1, #1
 80056f4:	4618      	mov	r0, r3
 80056f6:	f009 f854 	bl	800e7a2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f008 fd52 	bl	800e1a8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_HCD_Stop+0x16>
 8005728:	2302      	movs	r3, #2
 800572a:	e00d      	b.n	8005748 <HAL_HCD_Stop+0x32>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f009 fda7 	bl	800f28c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f008 fff6 	bl	800e74e <USB_ResetPort>
 8005762:	4603      	mov	r3, r0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005778:	78fa      	ldrb	r2, [r7, #3]
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	1a9b      	subs	r3, r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	334c      	adds	r3, #76	@ 0x4c
 8005788:	781b      	ldrb	r3, [r3, #0]
}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	3338      	adds	r3, #56	@ 0x38
 80057b2:	681b      	ldr	r3, [r3, #0]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f009 f838 	bl	800e842 <USB_GetCurrentFrame>
 80057d2:	4603      	mov	r3, r0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f009 f813 	bl	800e814 <USB_GetHostSpeed>
 80057ee:	4603      	mov	r3, r0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	331a      	adds	r3, #26
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	331b      	adds	r3, #27
 8005828:	2200      	movs	r2, #0
 800582a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800582c:	78fa      	ldrb	r2, [r7, #3]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	4613      	mov	r3, r2
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	3325      	adds	r3, #37	@ 0x25
 800583c:	2200      	movs	r2, #0
 800583e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	3324      	adds	r3, #36	@ 0x24
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	460b      	mov	r3, r1
 800586c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f008 fe08 	bl	800e496 <USB_ReadChInterrupts>
 8005886:	4603      	mov	r3, r0
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b04      	cmp	r3, #4
 800588e:	d11a      	bne.n	80058c6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4413      	add	r3, r2
 8005898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800589c:	461a      	mov	r2, r3
 800589e:	2304      	movs	r3, #4
 80058a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80058a2:	78fa      	ldrb	r2, [r7, #3]
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	334d      	adds	r3, #77	@ 0x4d
 80058b2:	2207      	movs	r2, #7
 80058b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	78fa      	ldrb	r2, [r7, #3]
 80058bc:	4611      	mov	r1, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f009 fb87 	bl	800efd2 <USB_HC_Halt>
 80058c4:	e09e      	b.n	8005a04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	78fa      	ldrb	r2, [r7, #3]
 80058cc:	4611      	mov	r1, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f008 fde1 	bl	800e496 <USB_ReadChInterrupts>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058de:	d11b      	bne.n	8005918 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058ec:	461a      	mov	r2, r3
 80058ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	334d      	adds	r3, #77	@ 0x4d
 8005904:	2208      	movs	r2, #8
 8005906:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f009 fb5e 	bl	800efd2 <USB_HC_Halt>
 8005916:	e075      	b.n	8005a04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	78fa      	ldrb	r2, [r7, #3]
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f008 fdb8 	bl	800e496 <USB_ReadChInterrupts>
 8005926:	4603      	mov	r3, r0
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b08      	cmp	r3, #8
 800592e:	d11a      	bne.n	8005966 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4413      	add	r3, r2
 8005938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800593c:	461a      	mov	r2, r3
 800593e:	2308      	movs	r3, #8
 8005940:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005942:	78fa      	ldrb	r2, [r7, #3]
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	440b      	add	r3, r1
 8005950:	334d      	adds	r3, #77	@ 0x4d
 8005952:	2206      	movs	r2, #6
 8005954:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	78fa      	ldrb	r2, [r7, #3]
 800595c:	4611      	mov	r1, r2
 800595e:	4618      	mov	r0, r3
 8005960:	f009 fb37 	bl	800efd2 <USB_HC_Halt>
 8005964:	e04e      	b.n	8005a04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	78fa      	ldrb	r2, [r7, #3]
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f008 fd91 	bl	800e496 <USB_ReadChInterrupts>
 8005974:	4603      	mov	r3, r0
 8005976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800597a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800597e:	d11b      	bne.n	80059b8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800598c:	461a      	mov	r2, r3
 800598e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005992:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	334d      	adds	r3, #77	@ 0x4d
 80059a4:	2209      	movs	r2, #9
 80059a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f009 fb0e 	bl	800efd2 <USB_HC_Halt>
 80059b6:	e025      	b.n	8005a04 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	78fa      	ldrb	r2, [r7, #3]
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f008 fd68 	bl	800e496 <USB_ReadChInterrupts>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059cc:	2b80      	cmp	r3, #128	@ 0x80
 80059ce:	d119      	bne.n	8005a04 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80059d0:	78fb      	ldrb	r3, [r7, #3]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059dc:	461a      	mov	r2, r3
 80059de:	2380      	movs	r3, #128	@ 0x80
 80059e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80059e2:	78fa      	ldrb	r2, [r7, #3]
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	440b      	add	r3, r1
 80059f0:	334d      	adds	r3, #77	@ 0x4d
 80059f2:	2207      	movs	r2, #7
 80059f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	78fa      	ldrb	r2, [r7, #3]
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f009 fae7 	bl	800efd2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	78fa      	ldrb	r2, [r7, #3]
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f008 fd42 	bl	800e496 <USB_ReadChInterrupts>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a1c:	d112      	bne.n	8005a44 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	78fa      	ldrb	r2, [r7, #3]
 8005a24:	4611      	mov	r1, r2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f009 fad3 	bl	800efd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a3e:	6093      	str	r3, [r2, #8]
 8005a40:	f000 bd75 	b.w	800652e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	78fa      	ldrb	r2, [r7, #3]
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f008 fd22 	bl	800e496 <USB_ReadChInterrupts>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	f040 8128 	bne.w	8005cae <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005a70:	78fa      	ldrb	r2, [r7, #3]
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	331b      	adds	r3, #27
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d119      	bne.n	8005aba <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005a86:	78fa      	ldrb	r2, [r7, #3]
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	331b      	adds	r3, #27
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	0151      	lsls	r1, r2, #5
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	440a      	add	r2, r1
 8005ab0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ab4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ab8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	799b      	ldrb	r3, [r3, #6]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01b      	beq.n	8005afa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	1a9b      	subs	r3, r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	3330      	adds	r3, #48	@ 0x30
 8005ad2:	6819      	ldr	r1, [r3, #0]
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	1ac9      	subs	r1, r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	1a9b      	subs	r3, r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4403      	add	r3, r0
 8005af6:	3338      	adds	r3, #56	@ 0x38
 8005af8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	334d      	adds	r3, #77	@ 0x4d
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3344      	adds	r3, #68	@ 0x44
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2301      	movs	r3, #1
 8005b32:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b34:	78fa      	ldrb	r2, [r7, #3]
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	3326      	adds	r3, #38	@ 0x26
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b4a:	78fa      	ldrb	r2, [r7, #3]
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	440b      	add	r3, r1
 8005b58:	3326      	adds	r3, #38	@ 0x26
 8005b5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d110      	bne.n	8005b82 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	4611      	mov	r1, r2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f009 fa32 	bl	800efd2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	6093      	str	r3, [r2, #8]
 8005b80:	e03d      	b.n	8005bfe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005b82:	78fa      	ldrb	r2, [r7, #3]
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	3326      	adds	r3, #38	@ 0x26
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d00a      	beq.n	8005bae <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3326      	adds	r3, #38	@ 0x26
 8005ba8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d127      	bne.n	8005bfe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	78fa      	ldrb	r2, [r7, #3]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bc8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bcc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005bce:	78fa      	ldrb	r2, [r7, #3]
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	334c      	adds	r3, #76	@ 0x4c
 8005bde:	2201      	movs	r2, #1
 8005be0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005be2:	78fa      	ldrb	r2, [r7, #3]
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	334c      	adds	r3, #76	@ 0x4c
 8005bf2:	781a      	ldrb	r2, [r3, #0]
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f00f faf7 	bl	80151ec <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	799b      	ldrb	r3, [r3, #6]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d13b      	bne.n	8005c7e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005c06:	78fa      	ldrb	r2, [r7, #3]
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	440b      	add	r3, r1
 8005c14:	3338      	adds	r3, #56	@ 0x38
 8005c16:	6819      	ldr	r1, [r3, #0]
 8005c18:	78fa      	ldrb	r2, [r7, #3]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4403      	add	r3, r0
 8005c26:	3328      	adds	r3, #40	@ 0x28
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	440b      	add	r3, r1
 8005c2c:	1e59      	subs	r1, r3, #1
 8005c2e:	78fa      	ldrb	r2, [r7, #3]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4403      	add	r3, r0
 8005c3c:	3328      	adds	r3, #40	@ 0x28
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8470 	beq.w	800652e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005c4e:	78fa      	ldrb	r2, [r7, #3]
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	333c      	adds	r3, #60	@ 0x3c
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	78fa      	ldrb	r2, [r7, #3]
 8005c62:	f083 0301 	eor.w	r3, r3, #1
 8005c66:	b2d8      	uxtb	r0, r3
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	333c      	adds	r3, #60	@ 0x3c
 8005c76:	4602      	mov	r2, r0
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	f000 bc58 	b.w	800652e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005c7e:	78fa      	ldrb	r2, [r7, #3]
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	333c      	adds	r3, #60	@ 0x3c
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	78fa      	ldrb	r2, [r7, #3]
 8005c92:	f083 0301 	eor.w	r3, r3, #1
 8005c96:	b2d8      	uxtb	r0, r3
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	333c      	adds	r3, #60	@ 0x3c
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	f000 bc40 	b.w	800652e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f008 fbed 	bl	800e496 <USB_ReadChInterrupts>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d131      	bne.n	8005d2a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2320      	movs	r3, #32
 8005cd6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005cd8:	78fa      	ldrb	r2, [r7, #3]
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	331a      	adds	r3, #26
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	f040 841f 	bne.w	800652e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005cf0:	78fa      	ldrb	r2, [r7, #3]
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	1a9b      	subs	r3, r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	331b      	adds	r3, #27
 8005d00:	2201      	movs	r2, #1
 8005d02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005d04:	78fa      	ldrb	r2, [r7, #3]
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	334d      	adds	r3, #77	@ 0x4d
 8005d14:	2203      	movs	r2, #3
 8005d16:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	78fa      	ldrb	r2, [r7, #3]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4618      	mov	r0, r3
 8005d22:	f009 f956 	bl	800efd2 <USB_HC_Halt>
 8005d26:	f000 bc02 	b.w	800652e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	78fa      	ldrb	r2, [r7, #3]
 8005d30:	4611      	mov	r1, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f008 fbaf 	bl	800e496 <USB_ReadChInterrupts>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	f040 8305 	bne.w	800634e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d50:	461a      	mov	r2, r3
 8005d52:	2302      	movs	r3, #2
 8005d54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005d56:	78fa      	ldrb	r2, [r7, #3]
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	440b      	add	r3, r1
 8005d64:	334d      	adds	r3, #77	@ 0x4d
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d114      	bne.n	8005d96 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	334d      	adds	r3, #77	@ 0x4d
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005d80:	78fa      	ldrb	r2, [r7, #3]
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	4613      	mov	r3, r2
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	1a9b      	subs	r3, r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	334c      	adds	r3, #76	@ 0x4c
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	e2cc      	b.n	8006330 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005d96:	78fa      	ldrb	r2, [r7, #3]
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	440b      	add	r3, r1
 8005da4:	334d      	adds	r3, #77	@ 0x4d
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b06      	cmp	r3, #6
 8005daa:	d114      	bne.n	8005dd6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	334d      	adds	r3, #77	@ 0x4d
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005dc0:	78fa      	ldrb	r2, [r7, #3]
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	334c      	adds	r3, #76	@ 0x4c
 8005dd0:	2205      	movs	r2, #5
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	e2ac      	b.n	8006330 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	334d      	adds	r3, #77	@ 0x4d
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b07      	cmp	r3, #7
 8005dea:	d00b      	beq.n	8005e04 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005dec:	78fa      	ldrb	r2, [r7, #3]
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	334d      	adds	r3, #77	@ 0x4d
 8005dfc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005dfe:	2b09      	cmp	r3, #9
 8005e00:	f040 80a6 	bne.w	8005f50 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	334d      	adds	r3, #77	@ 0x4d
 8005e14:	2202      	movs	r2, #2
 8005e16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	3344      	adds	r3, #68	@ 0x44
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	1c59      	adds	r1, r3, #1
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4403      	add	r3, r0
 8005e38:	3344      	adds	r3, #68	@ 0x44
 8005e3a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005e3c:	78fa      	ldrb	r2, [r7, #3]
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	3344      	adds	r3, #68	@ 0x44
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d943      	bls.n	8005eda <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	440b      	add	r3, r1
 8005e60:	3344      	adds	r3, #68	@ 0x44
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005e66:	78fa      	ldrb	r2, [r7, #3]
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	1a9b      	subs	r3, r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	331a      	adds	r3, #26
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d123      	bne.n	8005ec4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005e7c:	78fa      	ldrb	r2, [r7, #3]
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	4613      	mov	r3, r2
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	1a9b      	subs	r3, r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	331b      	adds	r3, #27
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005e90:	78fa      	ldrb	r2, [r7, #3]
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	4613      	mov	r3, r2
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	1a9b      	subs	r3, r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	331c      	adds	r3, #28
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ec2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005ec4:	78fa      	ldrb	r2, [r7, #3]
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	1a9b      	subs	r3, r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	334c      	adds	r3, #76	@ 0x4c
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005ed8:	e229      	b.n	800632e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	334c      	adds	r3, #76	@ 0x4c
 8005eea:	2202      	movs	r2, #2
 8005eec:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005eee:	78fa      	ldrb	r2, [r7, #3]
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	3326      	adds	r3, #38	@ 0x26
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	3326      	adds	r3, #38	@ 0x26
 8005f14:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	f040 8209 	bne.w	800632e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f32:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f3a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005f4e:	e1ee      	b.n	800632e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	334d      	adds	r3, #77	@ 0x4d
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b05      	cmp	r3, #5
 8005f64:	f040 80c8 	bne.w	80060f8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	334d      	adds	r3, #77	@ 0x4d
 8005f78:	2202      	movs	r2, #2
 8005f7a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005f7c:	78fa      	ldrb	r2, [r7, #3]
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	4613      	mov	r3, r2
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	331b      	adds	r3, #27
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	f040 81ce 	bne.w	8006330 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3326      	adds	r3, #38	@ 0x26
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d16b      	bne.n	8006082 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	3348      	adds	r3, #72	@ 0x48
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	1c59      	adds	r1, r3, #1
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4403      	add	r3, r0
 8005fca:	3348      	adds	r3, #72	@ 0x48
 8005fcc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005fce:	78fa      	ldrb	r2, [r7, #3]
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	1a9b      	subs	r3, r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	440b      	add	r3, r1
 8005fdc:	3348      	adds	r3, #72	@ 0x48
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d943      	bls.n	800606c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005fe4:	78fa      	ldrb	r2, [r7, #3]
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	3348      	adds	r3, #72	@ 0x48
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	331b      	adds	r3, #27
 8006008:	2200      	movs	r2, #0
 800600a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800600c:	78fa      	ldrb	r2, [r7, #3]
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	4613      	mov	r3, r2
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	3344      	adds	r3, #68	@ 0x44
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d809      	bhi.n	8006036 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	331c      	adds	r3, #28
 8006032:	2201      	movs	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	4413      	add	r3, r2
 800603e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	78fa      	ldrb	r2, [r7, #3]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	440a      	add	r2, r1
 800604c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006054:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	334c      	adds	r3, #76	@ 0x4c
 8006066:	2204      	movs	r2, #4
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e014      	b.n	8006096 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4613      	mov	r3, r2
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	334c      	adds	r3, #76	@ 0x4c
 800607c:	2202      	movs	r2, #2
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e009      	b.n	8006096 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	334c      	adds	r3, #76	@ 0x4c
 8006092:	2202      	movs	r2, #2
 8006094:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006096:	78fa      	ldrb	r2, [r7, #3]
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	4613      	mov	r3, r2
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	1a9b      	subs	r3, r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	3326      	adds	r3, #38	@ 0x26
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	4613      	mov	r3, r2
 80060b2:	011b      	lsls	r3, r3, #4
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	3326      	adds	r3, #38	@ 0x26
 80060bc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060be:	2b02      	cmp	r3, #2
 80060c0:	f040 8136 	bne.w	8006330 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060da:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060e2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f0:	461a      	mov	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	e11b      	b.n	8006330 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80060f8:	78fa      	ldrb	r2, [r7, #3]
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	334d      	adds	r3, #77	@ 0x4d
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b03      	cmp	r3, #3
 800610c:	f040 8081 	bne.w	8006212 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006110:	78fa      	ldrb	r2, [r7, #3]
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	1a9b      	subs	r3, r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	334d      	adds	r3, #77	@ 0x4d
 8006120:	2202      	movs	r2, #2
 8006122:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006124:	78fa      	ldrb	r2, [r7, #3]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	331b      	adds	r3, #27
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b01      	cmp	r3, #1
 8006138:	f040 80fa 	bne.w	8006330 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	4613      	mov	r3, r2
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	1a9b      	subs	r3, r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	334c      	adds	r3, #76	@ 0x4c
 800614c:	2202      	movs	r2, #2
 800614e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	78fa      	ldrb	r2, [r7, #3]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	440a      	add	r2, r1
 8006166:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800616a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800616e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	78fa      	ldrb	r2, [r7, #3]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	440a      	add	r2, r1
 8006186:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800618a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800618e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4413      	add	r3, r2
 8006198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	78fa      	ldrb	r2, [r7, #3]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061aa:	f023 0320 	bic.w	r3, r3, #32
 80061ae:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80061b0:	78fa      	ldrb	r2, [r7, #3]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	3326      	adds	r3, #38	@ 0x26
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00b      	beq.n	80061de <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80061c6:	78fa      	ldrb	r2, [r7, #3]
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	1a9b      	subs	r3, r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	3326      	adds	r3, #38	@ 0x26
 80061d6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80061d8:	2b02      	cmp	r3, #2
 80061da:	f040 80a9 	bne.w	8006330 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800620a:	461a      	mov	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	e08e      	b.n	8006330 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006212:	78fa      	ldrb	r2, [r7, #3]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	334d      	adds	r3, #77	@ 0x4d
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b04      	cmp	r3, #4
 8006226:	d143      	bne.n	80062b0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	1a9b      	subs	r3, r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	334d      	adds	r3, #77	@ 0x4d
 8006238:	2202      	movs	r2, #2
 800623a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800623c:	78fa      	ldrb	r2, [r7, #3]
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	334c      	adds	r3, #76	@ 0x4c
 800624c:	2202      	movs	r2, #2
 800624e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	3326      	adds	r3, #38	@ 0x26
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	3326      	adds	r3, #38	@ 0x26
 8006276:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006278:	2b02      	cmp	r3, #2
 800627a:	d159      	bne.n	8006330 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4413      	add	r3, r2
 8006284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006292:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800629a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062a8:	461a      	mov	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	e03f      	b.n	8006330 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80062b0:	78fa      	ldrb	r2, [r7, #3]
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	4613      	mov	r3, r2
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	1a9b      	subs	r3, r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	334d      	adds	r3, #77	@ 0x4d
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	d126      	bne.n	8006314 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	440b      	add	r3, r1
 80062d4:	334d      	adds	r3, #77	@ 0x4d
 80062d6:	2202      	movs	r2, #2
 80062d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80062da:	78fa      	ldrb	r2, [r7, #3]
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	3344      	adds	r3, #68	@ 0x44
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	1c59      	adds	r1, r3, #1
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4613      	mov	r3, r2
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4403      	add	r3, r0
 80062fa:	3344      	adds	r3, #68	@ 0x44
 80062fc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80062fe:	78fa      	ldrb	r2, [r7, #3]
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	1a9b      	subs	r3, r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	440b      	add	r3, r1
 800630c:	334c      	adds	r3, #76	@ 0x4c
 800630e:	2204      	movs	r2, #4
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	e00d      	b.n	8006330 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	4613      	mov	r3, r2
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	1a9b      	subs	r3, r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	440b      	add	r3, r1
 8006322:	334d      	adds	r3, #77	@ 0x4d
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b02      	cmp	r3, #2
 8006328:	f000 8100 	beq.w	800652c <HCD_HC_IN_IRQHandler+0xcca>
 800632c:	e000      	b.n	8006330 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800632e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006330:	78fa      	ldrb	r2, [r7, #3]
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	334c      	adds	r3, #76	@ 0x4c
 8006340:	781a      	ldrb	r2, [r3, #0]
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f00e ff50 	bl	80151ec <HAL_HCD_HC_NotifyURBChange_Callback>
 800634c:	e0ef      	b.n	800652e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	78fa      	ldrb	r2, [r7, #3]
 8006354:	4611      	mov	r1, r2
 8006356:	4618      	mov	r0, r3
 8006358:	f008 f89d 	bl	800e496 <USB_ReadChInterrupts>
 800635c:	4603      	mov	r3, r0
 800635e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006362:	2b40      	cmp	r3, #64	@ 0x40
 8006364:	d12f      	bne.n	80063c6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006366:	78fb      	ldrb	r3, [r7, #3]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	4413      	add	r3, r2
 800636e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006372:	461a      	mov	r2, r3
 8006374:	2340      	movs	r3, #64	@ 0x40
 8006376:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006378:	78fa      	ldrb	r2, [r7, #3]
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	334d      	adds	r3, #77	@ 0x4d
 8006388:	2205      	movs	r2, #5
 800638a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	4613      	mov	r3, r2
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	1a9b      	subs	r3, r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	440b      	add	r3, r1
 800639a:	331a      	adds	r3, #26
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80063a2:	78fa      	ldrb	r2, [r7, #3]
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	3344      	adds	r3, #68	@ 0x44
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	78fa      	ldrb	r2, [r7, #3]
 80063bc:	4611      	mov	r1, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	f008 fe07 	bl	800efd2 <USB_HC_Halt>
 80063c4:	e0b3      	b.n	800652e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	78fa      	ldrb	r2, [r7, #3]
 80063cc:	4611      	mov	r1, r2
 80063ce:	4618      	mov	r0, r3
 80063d0:	f008 f861 	bl	800e496 <USB_ReadChInterrupts>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f003 0310 	and.w	r3, r3, #16
 80063da:	2b10      	cmp	r3, #16
 80063dc:	f040 80a7 	bne.w	800652e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80063e0:	78fa      	ldrb	r2, [r7, #3]
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	3326      	adds	r3, #38	@ 0x26
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d11b      	bne.n	800642e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	3344      	adds	r3, #68	@ 0x44
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800640a:	78fa      	ldrb	r2, [r7, #3]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	1a9b      	subs	r3, r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	334d      	adds	r3, #77	@ 0x4d
 800641a:	2204      	movs	r2, #4
 800641c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	78fa      	ldrb	r2, [r7, #3]
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f008 fdd3 	bl	800efd2 <USB_HC_Halt>
 800642c:	e03f      	b.n	80064ae <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800642e:	78fa      	ldrb	r2, [r7, #3]
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	4613      	mov	r3, r2
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	1a9b      	subs	r3, r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	440b      	add	r3, r1
 800643c:	3326      	adds	r3, #38	@ 0x26
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	3326      	adds	r3, #38	@ 0x26
 8006454:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006456:	2b02      	cmp	r3, #2
 8006458:	d129      	bne.n	80064ae <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	3344      	adds	r3, #68	@ 0x44
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	799b      	ldrb	r3, [r3, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <HCD_HC_IN_IRQHandler+0xc2a>
 8006476:	78fa      	ldrb	r2, [r7, #3]
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	4613      	mov	r3, r2
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	1a9b      	subs	r3, r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	440b      	add	r3, r1
 8006484:	331b      	adds	r3, #27
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d110      	bne.n	80064ae <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800648c:	78fa      	ldrb	r2, [r7, #3]
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	4613      	mov	r3, r2
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	1a9b      	subs	r3, r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	334d      	adds	r3, #77	@ 0x4d
 800649c:	2204      	movs	r2, #4
 800649e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	78fa      	ldrb	r2, [r7, #3]
 80064a6:	4611      	mov	r1, r2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f008 fd92 	bl	800efd2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	1a9b      	subs	r3, r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	440b      	add	r3, r1
 80064bc:	331b      	adds	r3, #27
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d129      	bne.n	8006518 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80064c4:	78fa      	ldrb	r2, [r7, #3]
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	4613      	mov	r3, r2
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	1a9b      	subs	r3, r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	440b      	add	r3, r1
 80064d2:	331b      	adds	r3, #27
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80064d8:	78fb      	ldrb	r3, [r7, #3]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	78fa      	ldrb	r2, [r7, #3]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064f6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	440a      	add	r2, r1
 800650e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006512:	f043 0320 	orr.w	r3, r3, #32
 8006516:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4413      	add	r3, r2
 8006520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006524:	461a      	mov	r2, r3
 8006526:	2310      	movs	r3, #16
 8006528:	6093      	str	r3, [r2, #8]
 800652a:	e000      	b.n	800652e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800652c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	4611      	mov	r1, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f007 ff9f 	bl	800e496 <USB_ReadChInterrupts>
 8006558:	4603      	mov	r3, r0
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b04      	cmp	r3, #4
 8006560:	d11b      	bne.n	800659a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4413      	add	r3, r2
 800656a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800656e:	461a      	mov	r2, r3
 8006570:	2304      	movs	r3, #4
 8006572:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006574:	78fa      	ldrb	r2, [r7, #3]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	1a9b      	subs	r3, r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	334d      	adds	r3, #77	@ 0x4d
 8006584:	2207      	movs	r2, #7
 8006586:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	78fa      	ldrb	r2, [r7, #3]
 800658e:	4611      	mov	r1, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f008 fd1e 	bl	800efd2 <USB_HC_Halt>
 8006596:	f000 bc89 	b.w	8006eac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	78fa      	ldrb	r2, [r7, #3]
 80065a0:	4611      	mov	r1, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f007 ff77 	bl	800e496 <USB_ReadChInterrupts>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	f040 8082 	bne.w	80066b8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c0:	461a      	mov	r2, r3
 80065c2:	2320      	movs	r3, #32
 80065c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80065c6:	78fa      	ldrb	r2, [r7, #3]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	3319      	adds	r3, #25
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d124      	bne.n	8006626 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	3319      	adds	r3, #25
 80065ec:	2200      	movs	r2, #0
 80065ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80065f0:	78fa      	ldrb	r2, [r7, #3]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	334c      	adds	r3, #76	@ 0x4c
 8006600:	2202      	movs	r2, #2
 8006602:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006604:	78fa      	ldrb	r2, [r7, #3]
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	4613      	mov	r3, r2
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	334d      	adds	r3, #77	@ 0x4d
 8006614:	2203      	movs	r2, #3
 8006616:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	78fa      	ldrb	r2, [r7, #3]
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f008 fcd6 	bl	800efd2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8006626:	78fa      	ldrb	r2, [r7, #3]
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	1a9b      	subs	r3, r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	440b      	add	r3, r1
 8006634:	331a      	adds	r3, #26
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b01      	cmp	r3, #1
 800663a:	f040 8437 	bne.w	8006eac <HCD_HC_OUT_IRQHandler+0x978>
 800663e:	78fa      	ldrb	r2, [r7, #3]
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	1a9b      	subs	r3, r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	331b      	adds	r3, #27
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 842b 	bne.w	8006eac <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8006656:	78fa      	ldrb	r2, [r7, #3]
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	4613      	mov	r3, r2
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	1a9b      	subs	r3, r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	440b      	add	r3, r1
 8006664:	3326      	adds	r3, #38	@ 0x26
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d009      	beq.n	8006680 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800666c:	78fa      	ldrb	r2, [r7, #3]
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4613      	mov	r3, r2
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	331b      	adds	r3, #27
 800667c:	2201      	movs	r2, #1
 800667e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006680:	78fa      	ldrb	r2, [r7, #3]
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	4613      	mov	r3, r2
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	1a9b      	subs	r3, r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	334d      	adds	r3, #77	@ 0x4d
 8006690:	2203      	movs	r2, #3
 8006692:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	78fa      	ldrb	r2, [r7, #3]
 800669a:	4611      	mov	r1, r2
 800669c:	4618      	mov	r0, r3
 800669e:	f008 fc98 	bl	800efd2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80066a2:	78fa      	ldrb	r2, [r7, #3]
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	3344      	adds	r3, #68	@ 0x44
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	e3f9      	b.n	8006eac <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	78fa      	ldrb	r2, [r7, #3]
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f007 fee8 	bl	800e496 <USB_ReadChInterrupts>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066d0:	d111      	bne.n	80066f6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066de:	461a      	mov	r2, r3
 80066e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	78fa      	ldrb	r2, [r7, #3]
 80066ec:	4611      	mov	r1, r2
 80066ee:	4618      	mov	r0, r3
 80066f0:	f008 fc6f 	bl	800efd2 <USB_HC_Halt>
 80066f4:	e3da      	b.n	8006eac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	4611      	mov	r1, r2
 80066fe:	4618      	mov	r0, r3
 8006700:	f007 fec9 	bl	800e496 <USB_ReadChInterrupts>
 8006704:	4603      	mov	r3, r0
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b01      	cmp	r3, #1
 800670c:	d168      	bne.n	80067e0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800670e:	78fa      	ldrb	r2, [r7, #3]
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	3344      	adds	r3, #68	@ 0x44
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	78fa      	ldrb	r2, [r7, #3]
 8006728:	4611      	mov	r1, r2
 800672a:	4618      	mov	r0, r3
 800672c:	f007 feb3 	bl	800e496 <USB_ReadChInterrupts>
 8006730:	4603      	mov	r3, r0
 8006732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006736:	2b40      	cmp	r3, #64	@ 0x40
 8006738:	d112      	bne.n	8006760 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800673a:	78fa      	ldrb	r2, [r7, #3]
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	1a9b      	subs	r3, r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	3319      	adds	r3, #25
 800674a:	2201      	movs	r2, #1
 800674c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	4413      	add	r3, r2
 8006756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675a:	461a      	mov	r2, r3
 800675c:	2340      	movs	r3, #64	@ 0x40
 800675e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006760:	78fa      	ldrb	r2, [r7, #3]
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	4613      	mov	r3, r2
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	331b      	adds	r3, #27
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d019      	beq.n	80067aa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006776:	78fa      	ldrb	r2, [r7, #3]
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	1a9b      	subs	r3, r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	331b      	adds	r3, #27
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	4413      	add	r3, r2
 8006792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	78fa      	ldrb	r2, [r7, #3]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067a8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b6:	461a      	mov	r2, r3
 80067b8:	2301      	movs	r3, #1
 80067ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80067bc:	78fa      	ldrb	r2, [r7, #3]
 80067be:	6879      	ldr	r1, [r7, #4]
 80067c0:	4613      	mov	r3, r2
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	440b      	add	r3, r1
 80067ca:	334d      	adds	r3, #77	@ 0x4d
 80067cc:	2201      	movs	r2, #1
 80067ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f008 fbfa 	bl	800efd2 <USB_HC_Halt>
 80067de:	e365      	b.n	8006eac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f007 fe54 	bl	800e496 <USB_ReadChInterrupts>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f4:	2b40      	cmp	r3, #64	@ 0x40
 80067f6:	d139      	bne.n	800686c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80067f8:	78fa      	ldrb	r2, [r7, #3]
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	4613      	mov	r3, r2
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	334d      	adds	r3, #77	@ 0x4d
 8006808:	2205      	movs	r2, #5
 800680a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800680c:	78fa      	ldrb	r2, [r7, #3]
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	4613      	mov	r3, r2
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	331a      	adds	r3, #26
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	3319      	adds	r3, #25
 8006832:	2201      	movs	r2, #1
 8006834:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006836:	78fa      	ldrb	r2, [r7, #3]
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	4613      	mov	r3, r2
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	440b      	add	r3, r1
 8006844:	3344      	adds	r3, #68	@ 0x44
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f008 fbbd 	bl	800efd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	4413      	add	r3, r2
 8006860:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006864:	461a      	mov	r2, r3
 8006866:	2340      	movs	r3, #64	@ 0x40
 8006868:	6093      	str	r3, [r2, #8]
 800686a:	e31f      	b.n	8006eac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	78fa      	ldrb	r2, [r7, #3]
 8006872:	4611      	mov	r1, r2
 8006874:	4618      	mov	r0, r3
 8006876:	f007 fe0e 	bl	800e496 <USB_ReadChInterrupts>
 800687a:	4603      	mov	r3, r0
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b08      	cmp	r3, #8
 8006882:	d11a      	bne.n	80068ba <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	4413      	add	r3, r2
 800688c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006890:	461a      	mov	r2, r3
 8006892:	2308      	movs	r3, #8
 8006894:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	011b      	lsls	r3, r3, #4
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	334d      	adds	r3, #77	@ 0x4d
 80068a6:	2206      	movs	r2, #6
 80068a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	78fa      	ldrb	r2, [r7, #3]
 80068b0:	4611      	mov	r1, r2
 80068b2:	4618      	mov	r0, r3
 80068b4:	f008 fb8d 	bl	800efd2 <USB_HC_Halt>
 80068b8:	e2f8      	b.n	8006eac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	4611      	mov	r1, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f007 fde7 	bl	800e496 <USB_ReadChInterrupts>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f003 0310 	and.w	r3, r3, #16
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d144      	bne.n	800695c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80068d2:	78fa      	ldrb	r2, [r7, #3]
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	4613      	mov	r3, r2
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	3344      	adds	r3, #68	@ 0x44
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80068e6:	78fa      	ldrb	r2, [r7, #3]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	334d      	adds	r3, #77	@ 0x4d
 80068f6:	2204      	movs	r2, #4
 80068f8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	1a9b      	subs	r3, r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	3319      	adds	r3, #25
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d114      	bne.n	800693a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	1a9b      	subs	r3, r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	3318      	adds	r3, #24
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d109      	bne.n	800693a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	3319      	adds	r3, #25
 8006936:	2201      	movs	r2, #1
 8006938:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	78fa      	ldrb	r2, [r7, #3]
 8006940:	4611      	mov	r1, r2
 8006942:	4618      	mov	r0, r3
 8006944:	f008 fb45 	bl	800efd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	4413      	add	r3, r2
 8006950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006954:	461a      	mov	r2, r3
 8006956:	2310      	movs	r3, #16
 8006958:	6093      	str	r3, [r2, #8]
 800695a:	e2a7      	b.n	8006eac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	78fa      	ldrb	r2, [r7, #3]
 8006962:	4611      	mov	r1, r2
 8006964:	4618      	mov	r0, r3
 8006966:	f007 fd96 	bl	800e496 <USB_ReadChInterrupts>
 800696a:	4603      	mov	r3, r0
 800696c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006970:	2b80      	cmp	r3, #128	@ 0x80
 8006972:	f040 8083 	bne.w	8006a7c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	799b      	ldrb	r3, [r3, #6]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d111      	bne.n	80069a2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800697e:	78fa      	ldrb	r2, [r7, #3]
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	334d      	adds	r3, #77	@ 0x4d
 800698e:	2207      	movs	r2, #7
 8006990:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	78fa      	ldrb	r2, [r7, #3]
 8006998:	4611      	mov	r1, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f008 fb19 	bl	800efd2 <USB_HC_Halt>
 80069a0:	e062      	b.n	8006a68 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80069a2:	78fa      	ldrb	r2, [r7, #3]
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	1a9b      	subs	r3, r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	3344      	adds	r3, #68	@ 0x44
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	1c59      	adds	r1, r3, #1
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	1a9b      	subs	r3, r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4403      	add	r3, r0
 80069c2:	3344      	adds	r3, #68	@ 0x44
 80069c4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	3344      	adds	r3, #68	@ 0x44
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d922      	bls.n	8006a22 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	3344      	adds	r3, #68	@ 0x44
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80069f0:	78fa      	ldrb	r2, [r7, #3]
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4613      	mov	r3, r2
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	1a9b      	subs	r3, r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	334c      	adds	r3, #76	@ 0x4c
 8006a00:	2204      	movs	r2, #4
 8006a02:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006a04:	78fa      	ldrb	r2, [r7, #3]
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	334c      	adds	r3, #76	@ 0x4c
 8006a14:	781a      	ldrb	r2, [r3, #0]
 8006a16:	78fb      	ldrb	r3, [r7, #3]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f00e fbe6 	bl	80151ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8006a20:	e022      	b.n	8006a68 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006a22:	78fa      	ldrb	r2, [r7, #3]
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	440b      	add	r3, r1
 8006a30:	334c      	adds	r3, #76	@ 0x4c
 8006a32:	2202      	movs	r2, #2
 8006a34:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a4c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a54:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a62:	461a      	mov	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a74:	461a      	mov	r2, r3
 8006a76:	2380      	movs	r3, #128	@ 0x80
 8006a78:	6093      	str	r3, [r2, #8]
 8006a7a:	e217      	b.n	8006eac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	78fa      	ldrb	r2, [r7, #3]
 8006a82:	4611      	mov	r1, r2
 8006a84:	4618      	mov	r0, r3
 8006a86:	f007 fd06 	bl	800e496 <USB_ReadChInterrupts>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a94:	d11b      	bne.n	8006ace <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006a96:	78fa      	ldrb	r2, [r7, #3]
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	334d      	adds	r3, #77	@ 0x4d
 8006aa6:	2209      	movs	r2, #9
 8006aa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	78fa      	ldrb	r2, [r7, #3]
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f008 fa8d 	bl	800efd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006aca:	6093      	str	r3, [r2, #8]
 8006acc:	e1ee      	b.n	8006eac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	78fa      	ldrb	r2, [r7, #3]
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f007 fcdd 	bl	800e496 <USB_ReadChInterrupts>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	f040 81df 	bne.w	8006ea6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	015a      	lsls	r2, r3, #5
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006af4:	461a      	mov	r2, r3
 8006af6:	2302      	movs	r3, #2
 8006af8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006afa:	78fa      	ldrb	r2, [r7, #3]
 8006afc:	6879      	ldr	r1, [r7, #4]
 8006afe:	4613      	mov	r3, r2
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	440b      	add	r3, r1
 8006b08:	334d      	adds	r3, #77	@ 0x4d
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	f040 8093 	bne.w	8006c38 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	4613      	mov	r3, r2
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	1a9b      	subs	r3, r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	334d      	adds	r3, #77	@ 0x4d
 8006b22:	2202      	movs	r2, #2
 8006b24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006b26:	78fa      	ldrb	r2, [r7, #3]
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	334c      	adds	r3, #76	@ 0x4c
 8006b36:	2201      	movs	r2, #1
 8006b38:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	1a9b      	subs	r3, r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	3326      	adds	r3, #38	@ 0x26
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d00b      	beq.n	8006b68 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006b50:	78fa      	ldrb	r2, [r7, #3]
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4613      	mov	r3, r2
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	1a9b      	subs	r3, r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	3326      	adds	r3, #38	@ 0x26
 8006b60:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	f040 8190 	bne.w	8006e88 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	799b      	ldrb	r3, [r3, #6]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d115      	bne.n	8006b9c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	333d      	adds	r3, #61	@ 0x3d
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	78fa      	ldrb	r2, [r7, #3]
 8006b84:	f083 0301 	eor.w	r3, r3, #1
 8006b88:	b2d8      	uxtb	r0, r3
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	1a9b      	subs	r3, r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	440b      	add	r3, r1
 8006b96:	333d      	adds	r3, #61	@ 0x3d
 8006b98:	4602      	mov	r2, r0
 8006b9a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	799b      	ldrb	r3, [r3, #6]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	f040 8171 	bne.w	8006e88 <HCD_HC_OUT_IRQHandler+0x954>
 8006ba6:	78fa      	ldrb	r2, [r7, #3]
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	4613      	mov	r3, r2
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	1a9b      	subs	r3, r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	3334      	adds	r3, #52	@ 0x34
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 8165 	beq.w	8006e88 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006bbe:	78fa      	ldrb	r2, [r7, #3]
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	3334      	adds	r3, #52	@ 0x34
 8006bce:	6819      	ldr	r1, [r3, #0]
 8006bd0:	78fa      	ldrb	r2, [r7, #3]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	1a9b      	subs	r3, r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4403      	add	r3, r0
 8006bde:	3328      	adds	r3, #40	@ 0x28
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	440b      	add	r3, r1
 8006be4:	1e59      	subs	r1, r3, #1
 8006be6:	78fa      	ldrb	r2, [r7, #3]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	011b      	lsls	r3, r3, #4
 8006bee:	1a9b      	subs	r3, r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4403      	add	r3, r0
 8006bf4:	3328      	adds	r3, #40	@ 0x28
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bfc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 813f 	beq.w	8006e88 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006c0a:	78fa      	ldrb	r2, [r7, #3]
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	333d      	adds	r3, #61	@ 0x3d
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	78fa      	ldrb	r2, [r7, #3]
 8006c1e:	f083 0301 	eor.w	r3, r3, #1
 8006c22:	b2d8      	uxtb	r0, r3
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	4613      	mov	r3, r2
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	1a9b      	subs	r3, r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	440b      	add	r3, r1
 8006c30:	333d      	adds	r3, #61	@ 0x3d
 8006c32:	4602      	mov	r2, r0
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e127      	b.n	8006e88 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006c38:	78fa      	ldrb	r2, [r7, #3]
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	1a9b      	subs	r3, r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	440b      	add	r3, r1
 8006c46:	334d      	adds	r3, #77	@ 0x4d
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d120      	bne.n	8006c90 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006c4e:	78fa      	ldrb	r2, [r7, #3]
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	334d      	adds	r3, #77	@ 0x4d
 8006c5e:	2202      	movs	r2, #2
 8006c60:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006c62:	78fa      	ldrb	r2, [r7, #3]
 8006c64:	6879      	ldr	r1, [r7, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	011b      	lsls	r3, r3, #4
 8006c6a:	1a9b      	subs	r3, r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	331b      	adds	r3, #27
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	f040 8107 	bne.w	8006e88 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	440b      	add	r3, r1
 8006c88:	334c      	adds	r3, #76	@ 0x4c
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	e0fb      	b.n	8006e88 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006c90:	78fa      	ldrb	r2, [r7, #3]
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	4613      	mov	r3, r2
 8006c96:	011b      	lsls	r3, r3, #4
 8006c98:	1a9b      	subs	r3, r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	334d      	adds	r3, #77	@ 0x4d
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d13a      	bne.n	8006d1c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006ca6:	78fa      	ldrb	r2, [r7, #3]
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	4613      	mov	r3, r2
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	1a9b      	subs	r3, r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	334d      	adds	r3, #77	@ 0x4d
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006cba:	78fa      	ldrb	r2, [r7, #3]
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	1a9b      	subs	r3, r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	334c      	adds	r3, #76	@ 0x4c
 8006cca:	2202      	movs	r2, #2
 8006ccc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006cce:	78fa      	ldrb	r2, [r7, #3]
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	331b      	adds	r3, #27
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	f040 80d1 	bne.w	8006e88 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006ce6:	78fa      	ldrb	r2, [r7, #3]
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	011b      	lsls	r3, r3, #4
 8006cee:	1a9b      	subs	r3, r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	331b      	adds	r3, #27
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	78fa      	ldrb	r2, [r7, #3]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d18:	6053      	str	r3, [r2, #4]
 8006d1a:	e0b5      	b.n	8006e88 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006d1c:	78fa      	ldrb	r2, [r7, #3]
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	4613      	mov	r3, r2
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	334d      	adds	r3, #77	@ 0x4d
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b05      	cmp	r3, #5
 8006d30:	d114      	bne.n	8006d5c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	1a9b      	subs	r3, r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	334d      	adds	r3, #77	@ 0x4d
 8006d42:	2202      	movs	r2, #2
 8006d44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	334c      	adds	r3, #76	@ 0x4c
 8006d56:	2202      	movs	r2, #2
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	e095      	b.n	8006e88 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006d5c:	78fa      	ldrb	r2, [r7, #3]
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	4613      	mov	r3, r2
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	334d      	adds	r3, #77	@ 0x4d
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b06      	cmp	r3, #6
 8006d70:	d114      	bne.n	8006d9c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	4613      	mov	r3, r2
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	1a9b      	subs	r3, r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	440b      	add	r3, r1
 8006d80:	334d      	adds	r3, #77	@ 0x4d
 8006d82:	2202      	movs	r2, #2
 8006d84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006d86:	78fa      	ldrb	r2, [r7, #3]
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	334c      	adds	r3, #76	@ 0x4c
 8006d96:	2205      	movs	r2, #5
 8006d98:	701a      	strb	r2, [r3, #0]
 8006d9a:	e075      	b.n	8006e88 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006d9c:	78fa      	ldrb	r2, [r7, #3]
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	334d      	adds	r3, #77	@ 0x4d
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b07      	cmp	r3, #7
 8006db0:	d00a      	beq.n	8006dc8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	011b      	lsls	r3, r3, #4
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	334d      	adds	r3, #77	@ 0x4d
 8006dc2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006dc4:	2b09      	cmp	r3, #9
 8006dc6:	d170      	bne.n	8006eaa <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006dc8:	78fa      	ldrb	r2, [r7, #3]
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	334d      	adds	r3, #77	@ 0x4d
 8006dd8:	2202      	movs	r2, #2
 8006dda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006ddc:	78fa      	ldrb	r2, [r7, #3]
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	4613      	mov	r3, r2
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	440b      	add	r3, r1
 8006dea:	3344      	adds	r3, #68	@ 0x44
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	1c59      	adds	r1, r3, #1
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4613      	mov	r3, r2
 8006df4:	011b      	lsls	r3, r3, #4
 8006df6:	1a9b      	subs	r3, r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4403      	add	r3, r0
 8006dfc:	3344      	adds	r3, #68	@ 0x44
 8006dfe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006e00:	78fa      	ldrb	r2, [r7, #3]
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	4613      	mov	r3, r2
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	1a9b      	subs	r3, r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3344      	adds	r3, #68	@ 0x44
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d914      	bls.n	8006e40 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	3344      	adds	r3, #68	@ 0x44
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006e2a:	78fa      	ldrb	r2, [r7, #3]
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	1a9b      	subs	r3, r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	440b      	add	r3, r1
 8006e38:	334c      	adds	r3, #76	@ 0x4c
 8006e3a:	2204      	movs	r2, #4
 8006e3c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006e3e:	e022      	b.n	8006e86 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e40:	78fa      	ldrb	r2, [r7, #3]
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	4613      	mov	r3, r2
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	1a9b      	subs	r3, r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	334c      	adds	r3, #76	@ 0x4c
 8006e50:	2202      	movs	r2, #2
 8006e52:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e54:	78fb      	ldrb	r3, [r7, #3]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e6a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e72:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e74:	78fb      	ldrb	r3, [r7, #3]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e80:	461a      	mov	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006e86:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006e88:	78fa      	ldrb	r2, [r7, #3]
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	334c      	adds	r3, #76	@ 0x4c
 8006e98:	781a      	ldrb	r2, [r3, #0]
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f00e f9a4 	bl	80151ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8006ea4:	e002      	b.n	8006eac <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006ea6:	bf00      	nop
 8006ea8:	e000      	b.n	8006eac <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8006eaa:	bf00      	nop
  }
}
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b08a      	sub	sp, #40	@ 0x28
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	0c5b      	lsrs	r3, r3, #17
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	091b      	lsrs	r3, r3, #4
 8006ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ee6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d004      	beq.n	8006ef8 <HCD_RXQLVL_IRQHandler+0x46>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b05      	cmp	r3, #5
 8006ef2:	f000 80b6 	beq.w	8007062 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006ef6:	e0b7      	b.n	8007068 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 80b3 	beq.w	8007066 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	4613      	mov	r3, r2
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	332c      	adds	r3, #44	@ 0x2c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 80a7 	beq.w	8007066 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	1a9b      	subs	r3, r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	3338      	adds	r3, #56	@ 0x38
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	18d1      	adds	r1, r2, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	4613      	mov	r3, r2
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	1a9b      	subs	r3, r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4403      	add	r3, r0
 8006f3c:	3334      	adds	r3, #52	@ 0x34
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4299      	cmp	r1, r3
 8006f42:	f200 8083 	bhi.w	800704c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	1a9b      	subs	r3, r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	332c      	adds	r3, #44	@ 0x2c
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	b292      	uxth	r2, r2
 8006f60:	4619      	mov	r1, r3
 8006f62:	f007 fa2d 	bl	800e3c0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	1a9b      	subs	r3, r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	332c      	adds	r3, #44	@ 0x2c
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	18d1      	adds	r1, r2, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4613      	mov	r3, r2
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	1a9b      	subs	r3, r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4403      	add	r3, r0
 8006f8a:	332c      	adds	r3, #44	@ 0x2c
 8006f8c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	4613      	mov	r3, r2
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	3338      	adds	r3, #56	@ 0x38
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	18d1      	adds	r1, r2, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4403      	add	r3, r0
 8006fb2:	3338      	adds	r3, #56	@ 0x38
 8006fb4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	0cdb      	lsrs	r3, r3, #19
 8006fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	1a9b      	subs	r3, r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	3328      	adds	r3, #40	@ 0x28
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d13f      	bne.n	8007066 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d03c      	beq.n	8007066 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007002:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800700a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	4413      	add	r3, r2
 8007014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007018:	461a      	mov	r2, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	4613      	mov	r3, r2
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	1a9b      	subs	r3, r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	440b      	add	r3, r1
 800702c:	333c      	adds	r3, #60	@ 0x3c
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	f083 0301 	eor.w	r3, r3, #1
 8007034:	b2d8      	uxtb	r0, r3
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	4613      	mov	r3, r2
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	1a9b      	subs	r3, r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	333c      	adds	r3, #60	@ 0x3c
 8007046:	4602      	mov	r2, r0
 8007048:	701a      	strb	r2, [r3, #0]
      break;
 800704a:	e00c      	b.n	8007066 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	4613      	mov	r3, r2
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	1a9b      	subs	r3, r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	334c      	adds	r3, #76	@ 0x4c
 800705c:	2204      	movs	r2, #4
 800705e:	701a      	strb	r2, [r3, #0]
      break;
 8007060:	e001      	b.n	8007066 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007062:	bf00      	nop
 8007064:	e000      	b.n	8007068 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007066:	bf00      	nop
  }
}
 8007068:	bf00      	nop
 800706a:	3728      	adds	r7, #40	@ 0x28
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800709c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d10b      	bne.n	80070c0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d102      	bne.n	80070b8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f00e f87e 	bl	80151b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f043 0302 	orr.w	r3, r3, #2
 80070be:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d132      	bne.n	8007130 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	f043 0308 	orr.w	r3, r3, #8
 80070d0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d126      	bne.n	800712a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7a5b      	ldrb	r3, [r3, #9]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d113      	bne.n	800710c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80070ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070ee:	d106      	bne.n	80070fe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2102      	movs	r1, #2
 80070f6:	4618      	mov	r0, r3
 80070f8:	f007 faec 	bl	800e6d4 <USB_InitFSLSPClkSel>
 80070fc:	e011      	b.n	8007122 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2101      	movs	r1, #1
 8007104:	4618      	mov	r0, r3
 8007106:	f007 fae5 	bl	800e6d4 <USB_InitFSLSPClkSel>
 800710a:	e00a      	b.n	8007122 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	79db      	ldrb	r3, [r3, #7]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d106      	bne.n	8007122 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800711a:	461a      	mov	r2, r3
 800711c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8007120:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f00e f874 	bl	8015210 <HAL_HCD_PortEnabled_Callback>
 8007128:	e002      	b.n	8007130 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f00e f87e 	bl	801522c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b20      	cmp	r3, #32
 8007138:	d103      	bne.n	8007142 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f043 0320 	orr.w	r3, r3, #32
 8007140:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007148:	461a      	mov	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6013      	str	r3, [r2, #0]
}
 800714e:	bf00      	nop
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e08b      	b.n	8007282 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fa fbce 	bl	8001920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2224      	movs	r2, #36	@ 0x24
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0201 	bic.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80071a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d107      	bne.n	80071d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071ce:	609a      	str	r2, [r3, #8]
 80071d0:	e006      	b.n	80071e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80071de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d108      	bne.n	80071fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071f6:	605a      	str	r2, [r3, #4]
 80071f8:	e007      	b.n	800720a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007208:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6859      	ldr	r1, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4b1d      	ldr	r3, [pc, #116]	@ (800728c <HAL_I2C_Init+0x134>)
 8007216:	430b      	orrs	r3, r1
 8007218:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007228:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691a      	ldr	r2, [r3, #16]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	69d9      	ldr	r1, [r3, #28]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1a      	ldr	r2, [r3, #32]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0201 	orr.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	02008000 	.word	0x02008000

08007290 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af02      	add	r7, sp, #8
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	4608      	mov	r0, r1
 800729a:	4611      	mov	r1, r2
 800729c:	461a      	mov	r2, r3
 800729e:	4603      	mov	r3, r0
 80072a0:	817b      	strh	r3, [r7, #10]
 80072a2:	460b      	mov	r3, r1
 80072a4:	813b      	strh	r3, [r7, #8]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	f040 80f9 	bne.w	80074aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <HAL_I2C_Mem_Write+0x34>
 80072be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d105      	bne.n	80072d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072ca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0ed      	b.n	80074ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_I2C_Mem_Write+0x4e>
 80072da:	2302      	movs	r3, #2
 80072dc:	e0e6      	b.n	80074ac <HAL_I2C_Mem_Write+0x21c>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072e6:	f7fc f93b 	bl	8003560 <HAL_GetTick>
 80072ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	2319      	movs	r3, #25
 80072f2:	2201      	movs	r2, #1
 80072f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 fac3 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e0d1      	b.n	80074ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2221      	movs	r2, #33	@ 0x21
 800730c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2240      	movs	r2, #64	@ 0x40
 8007314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6a3a      	ldr	r2, [r7, #32]
 8007322:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007330:	88f8      	ldrh	r0, [r7, #6]
 8007332:	893a      	ldrh	r2, [r7, #8]
 8007334:	8979      	ldrh	r1, [r7, #10]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	4603      	mov	r3, r0
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f9d3 	bl	80076ec <I2C_RequestMemoryWrite>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e0a9      	b.n	80074ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800735c:	b29b      	uxth	r3, r3
 800735e:	2bff      	cmp	r3, #255	@ 0xff
 8007360:	d90e      	bls.n	8007380 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	22ff      	movs	r2, #255	@ 0xff
 8007366:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800736c:	b2da      	uxtb	r2, r3
 800736e:	8979      	ldrh	r1, [r7, #10]
 8007370:	2300      	movs	r3, #0
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fc47 	bl	8007c0c <I2C_TransferConfig>
 800737e:	e00f      	b.n	80073a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007384:	b29a      	uxth	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800738e:	b2da      	uxtb	r2, r3
 8007390:	8979      	ldrh	r1, [r7, #10]
 8007392:	2300      	movs	r3, #0
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fc36 	bl	8007c0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fac6 	bl	8007936 <I2C_WaitOnTXISFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e07b      	b.n	80074ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b8:	781a      	ldrb	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073dc:	3b01      	subs	r3, #1
 80073de:	b29a      	uxth	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d034      	beq.n	8007458 <HAL_I2C_Mem_Write+0x1c8>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d130      	bne.n	8007458 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fc:	2200      	movs	r2, #0
 80073fe:	2180      	movs	r1, #128	@ 0x80
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 fa3f 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e04d      	b.n	80074ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007414:	b29b      	uxth	r3, r3
 8007416:	2bff      	cmp	r3, #255	@ 0xff
 8007418:	d90e      	bls.n	8007438 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	22ff      	movs	r2, #255	@ 0xff
 800741e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007424:	b2da      	uxtb	r2, r3
 8007426:	8979      	ldrh	r1, [r7, #10]
 8007428:	2300      	movs	r3, #0
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 fbeb 	bl	8007c0c <I2C_TransferConfig>
 8007436:	e00f      	b.n	8007458 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800743c:	b29a      	uxth	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007446:	b2da      	uxtb	r2, r3
 8007448:	8979      	ldrh	r1, [r7, #10]
 800744a:	2300      	movs	r3, #0
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fbda 	bl	8007c0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d19e      	bne.n	80073a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 faac 	bl	80079c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e01a      	b.n	80074ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2220      	movs	r2, #32
 800747c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6859      	ldr	r1, [r3, #4]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	4b0a      	ldr	r3, [pc, #40]	@ (80074b4 <HAL_I2C_Mem_Write+0x224>)
 800748a:	400b      	ands	r3, r1
 800748c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	e000      	b.n	80074ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80074aa:	2302      	movs	r3, #2
  }
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	fe00e800 	.word	0xfe00e800

080074b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af02      	add	r7, sp, #8
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	4608      	mov	r0, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	4603      	mov	r3, r0
 80074c8:	817b      	strh	r3, [r7, #10]
 80074ca:	460b      	mov	r3, r1
 80074cc:	813b      	strh	r3, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b20      	cmp	r3, #32
 80074dc:	f040 80fd 	bne.w	80076da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <HAL_I2C_Mem_Read+0x34>
 80074e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d105      	bne.n	80074f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e0f1      	b.n	80076dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_I2C_Mem_Read+0x4e>
 8007502:	2302      	movs	r3, #2
 8007504:	e0ea      	b.n	80076dc <HAL_I2C_Mem_Read+0x224>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800750e:	f7fc f827 	bl	8003560 <HAL_GetTick>
 8007512:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	2319      	movs	r3, #25
 800751a:	2201      	movs	r2, #1
 800751c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 f9af 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0d5      	b.n	80076dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2222      	movs	r2, #34	@ 0x22
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2240      	movs	r2, #64	@ 0x40
 800753c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a3a      	ldr	r2, [r7, #32]
 800754a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007558:	88f8      	ldrh	r0, [r7, #6]
 800755a:	893a      	ldrh	r2, [r7, #8]
 800755c:	8979      	ldrh	r1, [r7, #10]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	4603      	mov	r3, r0
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 f913 	bl	8007794 <I2C_RequestMemoryRead>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d005      	beq.n	8007580 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e0ad      	b.n	80076dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	2bff      	cmp	r3, #255	@ 0xff
 8007588:	d90e      	bls.n	80075a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007594:	b2da      	uxtb	r2, r3
 8007596:	8979      	ldrh	r1, [r7, #10]
 8007598:	4b52      	ldr	r3, [pc, #328]	@ (80076e4 <HAL_I2C_Mem_Read+0x22c>)
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 fb33 	bl	8007c0c <I2C_TransferConfig>
 80075a6:	e00f      	b.n	80075c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	8979      	ldrh	r1, [r7, #10]
 80075ba:	4b4a      	ldr	r3, [pc, #296]	@ (80076e4 <HAL_I2C_Mem_Read+0x22c>)
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fb22 	bl	8007c0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ce:	2200      	movs	r2, #0
 80075d0:	2104      	movs	r1, #4
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 f956 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e07c      	b.n	80076dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ec:	b2d2      	uxtb	r2, r2
 80075ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d034      	beq.n	8007688 <HAL_I2C_Mem_Read+0x1d0>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d130      	bne.n	8007688 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762c:	2200      	movs	r2, #0
 800762e:	2180      	movs	r1, #128	@ 0x80
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 f927 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e04d      	b.n	80076dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007644:	b29b      	uxth	r3, r3
 8007646:	2bff      	cmp	r3, #255	@ 0xff
 8007648:	d90e      	bls.n	8007668 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007654:	b2da      	uxtb	r2, r3
 8007656:	8979      	ldrh	r1, [r7, #10]
 8007658:	2300      	movs	r3, #0
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fad3 	bl	8007c0c <I2C_TransferConfig>
 8007666:	e00f      	b.n	8007688 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007676:	b2da      	uxtb	r2, r3
 8007678:	8979      	ldrh	r1, [r7, #10]
 800767a:	2300      	movs	r3, #0
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fac2 	bl	8007c0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d19a      	bne.n	80075c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f994 	bl	80079c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e01a      	b.n	80076dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2220      	movs	r2, #32
 80076ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6859      	ldr	r1, [r3, #4]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <HAL_I2C_Mem_Read+0x230>)
 80076ba:	400b      	ands	r3, r1
 80076bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	e000      	b.n	80076dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80076da:	2302      	movs	r3, #2
  }
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	80002400 	.word	0x80002400
 80076e8:	fe00e800 	.word	0xfe00e800

080076ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	4608      	mov	r0, r1
 80076f6:	4611      	mov	r1, r2
 80076f8:	461a      	mov	r2, r3
 80076fa:	4603      	mov	r3, r0
 80076fc:	817b      	strh	r3, [r7, #10]
 80076fe:	460b      	mov	r3, r1
 8007700:	813b      	strh	r3, [r7, #8]
 8007702:	4613      	mov	r3, r2
 8007704:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	b2da      	uxtb	r2, r3
 800770a:	8979      	ldrh	r1, [r7, #10]
 800770c:	4b20      	ldr	r3, [pc, #128]	@ (8007790 <I2C_RequestMemoryWrite+0xa4>)
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fa79 	bl	8007c0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	69b9      	ldr	r1, [r7, #24]
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 f909 	bl	8007936 <I2C_WaitOnTXISFlagUntilTimeout>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e02c      	b.n	8007788 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d105      	bne.n	8007740 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007734:	893b      	ldrh	r3, [r7, #8]
 8007736:	b2da      	uxtb	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	629a      	str	r2, [r3, #40]	@ 0x28
 800773e:	e015      	b.n	800776c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007740:	893b      	ldrh	r3, [r7, #8]
 8007742:	0a1b      	lsrs	r3, r3, #8
 8007744:	b29b      	uxth	r3, r3
 8007746:	b2da      	uxtb	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	69b9      	ldr	r1, [r7, #24]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 f8ef 	bl	8007936 <I2C_WaitOnTXISFlagUntilTimeout>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e012      	b.n	8007788 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007762:	893b      	ldrh	r3, [r7, #8]
 8007764:	b2da      	uxtb	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2200      	movs	r2, #0
 8007774:	2180      	movs	r1, #128	@ 0x80
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 f884 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	80002000 	.word	0x80002000

08007794 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af02      	add	r7, sp, #8
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	4608      	mov	r0, r1
 800779e:	4611      	mov	r1, r2
 80077a0:	461a      	mov	r2, r3
 80077a2:	4603      	mov	r3, r0
 80077a4:	817b      	strh	r3, [r7, #10]
 80077a6:	460b      	mov	r3, r1
 80077a8:	813b      	strh	r3, [r7, #8]
 80077aa:	4613      	mov	r3, r2
 80077ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80077ae:	88fb      	ldrh	r3, [r7, #6]
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	8979      	ldrh	r1, [r7, #10]
 80077b4:	4b20      	ldr	r3, [pc, #128]	@ (8007838 <I2C_RequestMemoryRead+0xa4>)
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	2300      	movs	r3, #0
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 fa26 	bl	8007c0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	69b9      	ldr	r1, [r7, #24]
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 f8b6 	bl	8007936 <I2C_WaitOnTXISFlagUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e02c      	b.n	800782e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077d4:	88fb      	ldrh	r3, [r7, #6]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d105      	bne.n	80077e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077da:	893b      	ldrh	r3, [r7, #8]
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80077e4:	e015      	b.n	8007812 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077e6:	893b      	ldrh	r3, [r7, #8]
 80077e8:	0a1b      	lsrs	r3, r3, #8
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077f4:	69fa      	ldr	r2, [r7, #28]
 80077f6:	69b9      	ldr	r1, [r7, #24]
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f89c 	bl	8007936 <I2C_WaitOnTXISFlagUntilTimeout>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e012      	b.n	800782e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007808:	893b      	ldrh	r3, [r7, #8]
 800780a:	b2da      	uxtb	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	2200      	movs	r2, #0
 800781a:	2140      	movs	r1, #64	@ 0x40
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f831 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	80002000 	.word	0x80002000

0800783c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b02      	cmp	r3, #2
 8007850:	d103      	bne.n	800785a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2200      	movs	r2, #0
 8007858:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b01      	cmp	r3, #1
 8007866:	d007      	beq.n	8007878 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699a      	ldr	r2, [r3, #24]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0201 	orr.w	r2, r2, #1
 8007876:	619a      	str	r2, [r3, #24]
  }
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007894:	e03b      	b.n	800790e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 f8d6 	bl	8007a4c <I2C_IsErrorOccurred>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e041      	b.n	800792e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d02d      	beq.n	800790e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b2:	f7fb fe55 	bl	8003560 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d302      	bcc.n	80078c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d122      	bne.n	800790e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	699a      	ldr	r2, [r3, #24]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	4013      	ands	r3, r2
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	bf0c      	ite	eq
 80078d8:	2301      	moveq	r3, #1
 80078da:	2300      	movne	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	461a      	mov	r2, r3
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d113      	bne.n	800790e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ea:	f043 0220 	orr.w	r2, r3, #32
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e00f      	b.n	800792e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	699a      	ldr	r2, [r3, #24]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4013      	ands	r3, r2
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	429a      	cmp	r2, r3
 800791c:	bf0c      	ite	eq
 800791e:	2301      	moveq	r3, #1
 8007920:	2300      	movne	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	461a      	mov	r2, r3
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	429a      	cmp	r2, r3
 800792a:	d0b4      	beq.n	8007896 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007942:	e033      	b.n	80079ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	68b9      	ldr	r1, [r7, #8]
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 f87f 	bl	8007a4c <I2C_IsErrorOccurred>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e031      	b.n	80079bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795e:	d025      	beq.n	80079ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007960:	f7fb fdfe 	bl	8003560 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	429a      	cmp	r2, r3
 800796e:	d302      	bcc.n	8007976 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d11a      	bne.n	80079ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b02      	cmp	r3, #2
 8007982:	d013      	beq.n	80079ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007988:	f043 0220 	orr.w	r2, r3, #32
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e007      	b.n	80079bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d1c4      	bne.n	8007944 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079d0:	e02f      	b.n	8007a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f838 	bl	8007a4c <I2C_IsErrorOccurred>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e02d      	b.n	8007a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e6:	f7fb fdbb 	bl	8003560 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d302      	bcc.n	80079fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d11a      	bne.n	8007a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d013      	beq.n	8007a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a0e:	f043 0220 	orr.w	r2, r3, #32
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e007      	b.n	8007a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d1c8      	bne.n	80079d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	@ 0x28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f003 0310 	and.w	r3, r3, #16
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d068      	beq.n	8007b4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2210      	movs	r2, #16
 8007a7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a80:	e049      	b.n	8007b16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d045      	beq.n	8007b16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a8a:	f7fb fd69 	bl	8003560 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d302      	bcc.n	8007aa0 <I2C_IsErrorOccurred+0x54>
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d13a      	bne.n	8007b16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007aaa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ab2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007abe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ac2:	d121      	bne.n	8007b08 <I2C_IsErrorOccurred+0xbc>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007aca:	d01d      	beq.n	8007b08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007acc:	7cfb      	ldrb	r3, [r7, #19]
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d01a      	beq.n	8007b08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ae0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007ae2:	f7fb fd3d 	bl	8003560 <HAL_GetTick>
 8007ae6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ae8:	e00e      	b.n	8007b08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007aea:	f7fb fd39 	bl	8003560 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b19      	cmp	r3, #25
 8007af6:	d907      	bls.n	8007b08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	f043 0320 	orr.w	r3, r3, #32
 8007afe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007b06:	e006      	b.n	8007b16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b20      	cmp	r3, #32
 8007b14:	d1e9      	bne.n	8007aea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d003      	beq.n	8007b2c <I2C_IsErrorOccurred+0xe0>
 8007b24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d0aa      	beq.n	8007a82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d103      	bne.n	8007b3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	f043 0304 	orr.w	r3, r3, #4
 8007b42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00b      	beq.n	8007b74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	f043 0301 	orr.w	r3, r3, #1
 8007b62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	f043 0308 	orr.w	r3, r3, #8
 8007b84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007b8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	f043 0302 	orr.w	r3, r3, #2
 8007ba6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d01c      	beq.n	8007bfa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f7ff fe3b 	bl	800783c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6859      	ldr	r1, [r3, #4]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8007c08 <I2C_IsErrorOccurred+0x1bc>)
 8007bd2:	400b      	ands	r3, r1
 8007bd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3728      	adds	r7, #40	@ 0x28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	fe00e800 	.word	0xfe00e800

08007c0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	607b      	str	r3, [r7, #4]
 8007c16:	460b      	mov	r3, r1
 8007c18:	817b      	strh	r3, [r7, #10]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c1e:	897b      	ldrh	r3, [r7, #10]
 8007c20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c24:	7a7b      	ldrb	r3, [r7, #9]
 8007c26:	041b      	lsls	r3, r3, #16
 8007c28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c2c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c3a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	0d5b      	lsrs	r3, r3, #21
 8007c46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007c4a:	4b08      	ldr	r3, [pc, #32]	@ (8007c6c <I2C_TransferConfig+0x60>)
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	43db      	mvns	r3, r3
 8007c50:	ea02 0103 	and.w	r1, r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007c5e:	bf00      	nop
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	03ff63ff 	.word	0x03ff63ff

08007c70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d138      	bne.n	8007cf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d101      	bne.n	8007c94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c90:	2302      	movs	r3, #2
 8007c92:	e032      	b.n	8007cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2224      	movs	r2, #36	@ 0x24
 8007ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0201 	bic.w	r2, r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007cc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6819      	ldr	r1, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0201 	orr.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	e000      	b.n	8007cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cf8:	2302      	movs	r3, #2
  }
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d139      	bne.n	8007d90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d101      	bne.n	8007d2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d26:	2302      	movs	r3, #2
 8007d28:	e033      	b.n	8007d92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2224      	movs	r2, #36	@ 0x24
 8007d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0201 	bic.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	021b      	lsls	r3, r3, #8
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0201 	orr.w	r2, r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	e000      	b.n	8007d92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d90:	2302      	movs	r3, #2
  }
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e08f      	b.n	8007ed0 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7f9 fed5 	bl	8001b74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	699a      	ldr	r2, [r3, #24]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007de0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6999      	ldr	r1, [r3, #24]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007df6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	041b      	lsls	r3, r3, #16
 8007e0c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6999      	ldr	r1, [r3, #24]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	041b      	lsls	r3, r3, #16
 8007e22:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a19      	ldr	r1, [r3, #32]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e36:	041b      	lsls	r3, r3, #16
 8007e38:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	430a      	orrs	r2, r1
 8007e46:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4c:	041b      	lsls	r3, r3, #16
 8007e4e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007e6e:	041b      	lsls	r3, r3, #16
 8007e70:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007e80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007e94:	431a      	orrs	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f042 0206 	orr.w	r2, r2, #6
 8007eac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 0201 	orr.w	r2, r2, #1
 8007ebc:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f003 0304 	and.w	r3, r3, #4
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d023      	beq.n	8007f42 <HAL_LTDC_IRQHandler+0x6a>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d01e      	beq.n	8007f42 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0204 	bic.w	r2, r2, #4
 8007f12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2204      	movs	r2, #4
 8007f1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f22:	f043 0201 	orr.w	r2, r3, #1
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2204      	movs	r2, #4
 8007f30:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f86f 	bl	8008020 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d023      	beq.n	8007f94 <HAL_LTDC_IRQHandler+0xbc>
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d01e      	beq.n	8007f94 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0202 	bic.w	r2, r2, #2
 8007f64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f74:	f043 0202 	orr.w	r2, r3, #2
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2204      	movs	r2, #4
 8007f82:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f846 	bl	8008020 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d01b      	beq.n	8007fd6 <HAL_LTDC_IRQHandler+0xfe>
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d016      	beq.n	8007fd6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0201 	bic.w	r2, r2, #1
 8007fb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f82f 	bl	8008034 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d01b      	beq.n	8008018 <HAL_LTDC_IRQHandler+0x140>
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f003 0308 	and.w	r3, r3, #8
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d016      	beq.n	8008018 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0208 	bic.w	r2, r2, #8
 8007ff8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2208      	movs	r2, #8
 8008000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f818 	bl	8008048 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008018:	bf00      	nop
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800805c:	b5b0      	push	{r4, r5, r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800806e:	2b01      	cmp	r3, #1
 8008070:	d101      	bne.n	8008076 <HAL_LTDC_ConfigLayer+0x1a>
 8008072:	2302      	movs	r3, #2
 8008074:	e02c      	b.n	80080d0 <HAL_LTDC_ConfigLayer+0x74>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2134      	movs	r1, #52	@ 0x34
 800808c:	fb01 f303 	mul.w	r3, r1, r3
 8008090:	4413      	add	r3, r2
 8008092:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	4614      	mov	r4, r2
 800809a:	461d      	mov	r5, r3
 800809c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800809e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	68b9      	ldr	r1, [r7, #8]
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 f811 	bl	80080d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2201      	movs	r2, #1
 80080bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bdb0      	pop	{r4, r5, r7, pc}

080080d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80080d8:	b480      	push	{r7}
 80080da:	b089      	sub	sp, #36	@ 0x24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	0c1b      	lsrs	r3, r3, #16
 80080f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080f4:	4413      	add	r3, r2
 80080f6:	041b      	lsls	r3, r3, #16
 80080f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	01db      	lsls	r3, r3, #7
 8008104:	4413      	add	r3, r2
 8008106:	3384      	adds	r3, #132	@ 0x84
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	6812      	ldr	r2, [r2, #0]
 800810e:	4611      	mov	r1, r2
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	01d2      	lsls	r2, r2, #7
 8008114:	440a      	add	r2, r1
 8008116:	3284      	adds	r2, #132	@ 0x84
 8008118:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800811c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	0c1b      	lsrs	r3, r3, #16
 800812a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800812e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008130:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	01db      	lsls	r3, r3, #7
 800813c:	440b      	add	r3, r1
 800813e:	3384      	adds	r3, #132	@ 0x84
 8008140:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008146:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008156:	4413      	add	r3, r2
 8008158:	041b      	lsls	r3, r3, #16
 800815a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	461a      	mov	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	01db      	lsls	r3, r3, #7
 8008166:	4413      	add	r3, r2
 8008168:	3384      	adds	r3, #132	@ 0x84
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	6812      	ldr	r2, [r2, #0]
 8008170:	4611      	mov	r1, r2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	01d2      	lsls	r2, r2, #7
 8008176:	440a      	add	r2, r1
 8008178:	3284      	adds	r2, #132	@ 0x84
 800817a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800817e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800818e:	4413      	add	r3, r2
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4619      	mov	r1, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	01db      	lsls	r3, r3, #7
 800819c:	440b      	add	r3, r1
 800819e:	3384      	adds	r3, #132	@ 0x84
 80081a0:	4619      	mov	r1, r3
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	01db      	lsls	r3, r3, #7
 80081b2:	4413      	add	r3, r2
 80081b4:	3384      	adds	r3, #132	@ 0x84
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	4611      	mov	r1, r2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	01d2      	lsls	r2, r2, #7
 80081c2:	440a      	add	r2, r1
 80081c4:	3284      	adds	r2, #132	@ 0x84
 80081c6:	f023 0307 	bic.w	r3, r3, #7
 80081ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	01db      	lsls	r3, r3, #7
 80081d6:	4413      	add	r3, r2
 80081d8:	3384      	adds	r3, #132	@ 0x84
 80081da:	461a      	mov	r2, r3
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80081f2:	041b      	lsls	r3, r3, #16
 80081f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	061b      	lsls	r3, r3, #24
 80081fc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008204:	461a      	mov	r2, r3
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	431a      	orrs	r2, r3
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	431a      	orrs	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4619      	mov	r1, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	01db      	lsls	r3, r3, #7
 8008218:	440b      	add	r3, r1
 800821a:	3384      	adds	r3, #132	@ 0x84
 800821c:	4619      	mov	r1, r3
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	4313      	orrs	r3, r2
 8008222:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	461a      	mov	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	01db      	lsls	r3, r3, #7
 800822e:	4413      	add	r3, r2
 8008230:	3384      	adds	r3, #132	@ 0x84
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	6812      	ldr	r2, [r2, #0]
 8008238:	4611      	mov	r1, r2
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	01d2      	lsls	r2, r2, #7
 800823e:	440a      	add	r2, r1
 8008240:	3284      	adds	r2, #132	@ 0x84
 8008242:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008246:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	461a      	mov	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	01db      	lsls	r3, r3, #7
 8008252:	4413      	add	r3, r2
 8008254:	3384      	adds	r3, #132	@ 0x84
 8008256:	461a      	mov	r2, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	01db      	lsls	r3, r3, #7
 8008268:	4413      	add	r3, r2
 800826a:	3384      	adds	r3, #132	@ 0x84
 800826c:	69da      	ldr	r2, [r3, #28]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4619      	mov	r1, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	01db      	lsls	r3, r3, #7
 8008278:	440b      	add	r3, r1
 800827a:	3384      	adds	r3, #132	@ 0x84
 800827c:	4619      	mov	r1, r3
 800827e:	4b4f      	ldr	r3, [pc, #316]	@ (80083bc <LTDC_SetConfig+0x2e4>)
 8008280:	4013      	ands	r3, r2
 8008282:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	69da      	ldr	r2, [r3, #28]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	68f9      	ldr	r1, [r7, #12]
 800828e:	6809      	ldr	r1, [r1, #0]
 8008290:	4608      	mov	r0, r1
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	01c9      	lsls	r1, r1, #7
 8008296:	4401      	add	r1, r0
 8008298:	3184      	adds	r1, #132	@ 0x84
 800829a:	4313      	orrs	r3, r2
 800829c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	01db      	lsls	r3, r3, #7
 80082a8:	4413      	add	r3, r2
 80082aa:	3384      	adds	r3, #132	@ 0x84
 80082ac:	461a      	mov	r2, r3
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d102      	bne.n	80082c2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 80082bc:	2304      	movs	r3, #4
 80082be:	61fb      	str	r3, [r7, #28]
 80082c0:	e01b      	b.n	80082fa <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d102      	bne.n	80082d0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 80082ca:	2303      	movs	r3, #3
 80082cc:	61fb      	str	r3, [r7, #28]
 80082ce:	e014      	b.n	80082fa <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d00b      	beq.n	80082f0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d007      	beq.n	80082f0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d003      	beq.n	80082f0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80082ec:	2b07      	cmp	r3, #7
 80082ee:	d102      	bne.n	80082f6 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 80082f0:	2302      	movs	r3, #2
 80082f2:	61fb      	str	r3, [r7, #28]
 80082f4:	e001      	b.n	80082fa <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 80082f6:	2301      	movs	r3, #1
 80082f8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	01db      	lsls	r3, r3, #7
 8008304:	4413      	add	r3, r2
 8008306:	3384      	adds	r3, #132	@ 0x84
 8008308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	6812      	ldr	r2, [r2, #0]
 800830e:	4611      	mov	r1, r2
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	01d2      	lsls	r2, r2, #7
 8008314:	440a      	add	r2, r1
 8008316:	3284      	adds	r2, #132	@ 0x84
 8008318:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800831c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	fb02 f303 	mul.w	r3, r2, r3
 8008328:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	6859      	ldr	r1, [r3, #4]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	1acb      	subs	r3, r1, r3
 8008334:	69f9      	ldr	r1, [r7, #28]
 8008336:	fb01 f303 	mul.w	r3, r1, r3
 800833a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800833c:	68f9      	ldr	r1, [r7, #12]
 800833e:	6809      	ldr	r1, [r1, #0]
 8008340:	4608      	mov	r0, r1
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	01c9      	lsls	r1, r1, #7
 8008346:	4401      	add	r1, r0
 8008348:	3184      	adds	r1, #132	@ 0x84
 800834a:	4313      	orrs	r3, r2
 800834c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	01db      	lsls	r3, r3, #7
 8008358:	4413      	add	r3, r2
 800835a:	3384      	adds	r3, #132	@ 0x84
 800835c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4619      	mov	r1, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	01db      	lsls	r3, r3, #7
 8008368:	440b      	add	r3, r1
 800836a:	3384      	adds	r3, #132	@ 0x84
 800836c:	4619      	mov	r1, r3
 800836e:	4b14      	ldr	r3, [pc, #80]	@ (80083c0 <LTDC_SetConfig+0x2e8>)
 8008370:	4013      	ands	r3, r2
 8008372:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	461a      	mov	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	01db      	lsls	r3, r3, #7
 800837e:	4413      	add	r3, r2
 8008380:	3384      	adds	r3, #132	@ 0x84
 8008382:	461a      	mov	r2, r3
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008388:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	01db      	lsls	r3, r3, #7
 8008394:	4413      	add	r3, r2
 8008396:	3384      	adds	r3, #132	@ 0x84
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	6812      	ldr	r2, [r2, #0]
 800839e:	4611      	mov	r1, r2
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	01d2      	lsls	r2, r2, #7
 80083a4:	440a      	add	r2, r1
 80083a6:	3284      	adds	r2, #132	@ 0x84
 80083a8:	f043 0301 	orr.w	r3, r3, #1
 80083ac:	6013      	str	r3, [r2, #0]
}
 80083ae:	bf00      	nop
 80083b0:	3724      	adds	r7, #36	@ 0x24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	fffff8f8 	.word	0xfffff8f8
 80083c0:	fffff800 	.word	0xfffff800

080083c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80083c4:	b480      	push	{r7}
 80083c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083c8:	4b05      	ldr	r3, [pc, #20]	@ (80083e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a04      	ldr	r2, [pc, #16]	@ (80083e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083d2:	6013      	str	r3, [r2, #0]
}
 80083d4:	bf00      	nop
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	40007000 	.word	0x40007000

080083e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80083ee:	4b23      	ldr	r3, [pc, #140]	@ (800847c <HAL_PWREx_EnableOverDrive+0x98>)
 80083f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f2:	4a22      	ldr	r2, [pc, #136]	@ (800847c <HAL_PWREx_EnableOverDrive+0x98>)
 80083f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80083fa:	4b20      	ldr	r3, [pc, #128]	@ (800847c <HAL_PWREx_EnableOverDrive+0x98>)
 80083fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008406:	4b1e      	ldr	r3, [pc, #120]	@ (8008480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1d      	ldr	r2, [pc, #116]	@ (8008480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800840c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008410:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008412:	f7fb f8a5 	bl	8003560 <HAL_GetTick>
 8008416:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008418:	e009      	b.n	800842e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800841a:	f7fb f8a1 	bl	8003560 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008428:	d901      	bls.n	800842e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e022      	b.n	8008474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800842e:	4b14      	ldr	r3, [pc, #80]	@ (8008480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800843a:	d1ee      	bne.n	800841a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800843c:	4b10      	ldr	r3, [pc, #64]	@ (8008480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a0f      	ldr	r2, [pc, #60]	@ (8008480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008446:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008448:	f7fb f88a 	bl	8003560 <HAL_GetTick>
 800844c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800844e:	e009      	b.n	8008464 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008450:	f7fb f886 	bl	8003560 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800845e:	d901      	bls.n	8008464 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e007      	b.n	8008474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008464:	4b06      	ldr	r3, [pc, #24]	@ (8008480 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008470:	d1ee      	bne.n	8008450 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	40023800 	.word	0x40023800
 8008480:	40007000 	.word	0x40007000

08008484 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af02      	add	r7, sp, #8
 800848a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800848c:	f7fb f868 	bl	8003560 <HAL_GetTick>
 8008490:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e067      	b.n	800856c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10b      	bne.n	80084c0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7f9 fd63 	bl	8001f7c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80084b6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f85e 	bl	800857c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	021a      	lsls	r2, r3, #8
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	2120      	movs	r1, #32
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f856 	bl	8008598 <QSPI_WaitFlagStateUntilTimeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80084f0:	7afb      	ldrb	r3, [r7, #11]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d135      	bne.n	8008562 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008574 <HAL_QSPI_Init+0xf0>)
 80084fe:	4013      	ands	r3, r2
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6852      	ldr	r2, [r2, #4]
 8008504:	0611      	lsls	r1, r2, #24
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	68d2      	ldr	r2, [r2, #12]
 800850a:	4311      	orrs	r1, r2
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	69d2      	ldr	r2, [r2, #28]
 8008510:	4311      	orrs	r1, r2
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	6a12      	ldr	r2, [r2, #32]
 8008516:	4311      	orrs	r1, r2
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6812      	ldr	r2, [r2, #0]
 800851c:	430b      	orrs	r3, r1
 800851e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	4b14      	ldr	r3, [pc, #80]	@ (8008578 <HAL_QSPI_Init+0xf4>)
 8008528:	4013      	ands	r3, r2
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	6912      	ldr	r2, [r2, #16]
 800852e:	0411      	lsls	r1, r2, #16
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	6952      	ldr	r2, [r2, #20]
 8008534:	4311      	orrs	r1, r2
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6992      	ldr	r2, [r2, #24]
 800853a:	4311      	orrs	r1, r2
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6812      	ldr	r2, [r2, #0]
 8008540:	430b      	orrs	r3, r1
 8008542:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 0201 	orr.w	r2, r2, #1
 8008552:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800856a:	7afb      	ldrb	r3, [r7, #11]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	00ffff2f 	.word	0x00ffff2f
 8008578:	ffe0f8fe 	.word	0xffe0f8fe

0800857c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	4613      	mov	r3, r2
 80085a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80085a8:	e01a      	b.n	80085e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b0:	d016      	beq.n	80085e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085b2:	f7fa ffd5 	bl	8003560 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d302      	bcc.n	80085c8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10b      	bne.n	80085e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2204      	movs	r2, #4
 80085cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085d4:	f043 0201 	orr.w	r2, r3, #1
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e00e      	b.n	80085fe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	4013      	ands	r3, r2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	bf14      	ite	ne
 80085ee:	2301      	movne	r3, #1
 80085f0:	2300      	moveq	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d1d6      	bne.n	80085aa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008610:	2300      	movs	r3, #0
 8008612:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e291      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 8087 	beq.w	800873a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800862c:	4b96      	ldr	r3, [pc, #600]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f003 030c 	and.w	r3, r3, #12
 8008634:	2b04      	cmp	r3, #4
 8008636:	d00c      	beq.n	8008652 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008638:	4b93      	ldr	r3, [pc, #588]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f003 030c 	and.w	r3, r3, #12
 8008640:	2b08      	cmp	r3, #8
 8008642:	d112      	bne.n	800866a <HAL_RCC_OscConfig+0x62>
 8008644:	4b90      	ldr	r3, [pc, #576]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800864c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008650:	d10b      	bne.n	800866a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008652:	4b8d      	ldr	r3, [pc, #564]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d06c      	beq.n	8008738 <HAL_RCC_OscConfig+0x130>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d168      	bne.n	8008738 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e26b      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008672:	d106      	bne.n	8008682 <HAL_RCC_OscConfig+0x7a>
 8008674:	4b84      	ldr	r3, [pc, #528]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a83      	ldr	r2, [pc, #524]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 800867a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	e02e      	b.n	80086e0 <HAL_RCC_OscConfig+0xd8>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10c      	bne.n	80086a4 <HAL_RCC_OscConfig+0x9c>
 800868a:	4b7f      	ldr	r3, [pc, #508]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a7e      	ldr	r2, [pc, #504]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	4b7c      	ldr	r3, [pc, #496]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a7b      	ldr	r2, [pc, #492]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 800869c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	e01d      	b.n	80086e0 <HAL_RCC_OscConfig+0xd8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086ac:	d10c      	bne.n	80086c8 <HAL_RCC_OscConfig+0xc0>
 80086ae:	4b76      	ldr	r3, [pc, #472]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a75      	ldr	r2, [pc, #468]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80086b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	4b73      	ldr	r3, [pc, #460]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a72      	ldr	r2, [pc, #456]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80086c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	e00b      	b.n	80086e0 <HAL_RCC_OscConfig+0xd8>
 80086c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a6e      	ldr	r2, [pc, #440]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80086ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	4b6c      	ldr	r3, [pc, #432]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a6b      	ldr	r2, [pc, #428]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80086da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d013      	beq.n	8008710 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e8:	f7fa ff3a 	bl	8003560 <HAL_GetTick>
 80086ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086f0:	f7fa ff36 	bl	8003560 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b64      	cmp	r3, #100	@ 0x64
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e21f      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008702:	4b61      	ldr	r3, [pc, #388]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0f0      	beq.n	80086f0 <HAL_RCC_OscConfig+0xe8>
 800870e:	e014      	b.n	800873a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008710:	f7fa ff26 	bl	8003560 <HAL_GetTick>
 8008714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008716:	e008      	b.n	800872a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008718:	f7fa ff22 	bl	8003560 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b64      	cmp	r3, #100	@ 0x64
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e20b      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800872a:	4b57      	ldr	r3, [pc, #348]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1f0      	bne.n	8008718 <HAL_RCC_OscConfig+0x110>
 8008736:	e000      	b.n	800873a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d069      	beq.n	800881a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008746:	4b50      	ldr	r3, [pc, #320]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 030c 	and.w	r3, r3, #12
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00b      	beq.n	800876a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008752:	4b4d      	ldr	r3, [pc, #308]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f003 030c 	and.w	r3, r3, #12
 800875a:	2b08      	cmp	r3, #8
 800875c:	d11c      	bne.n	8008798 <HAL_RCC_OscConfig+0x190>
 800875e:	4b4a      	ldr	r3, [pc, #296]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d116      	bne.n	8008798 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800876a:	4b47      	ldr	r3, [pc, #284]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d005      	beq.n	8008782 <HAL_RCC_OscConfig+0x17a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d001      	beq.n	8008782 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e1df      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008782:	4b41      	ldr	r3, [pc, #260]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	493d      	ldr	r1, [pc, #244]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008792:	4313      	orrs	r3, r2
 8008794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008796:	e040      	b.n	800881a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d023      	beq.n	80087e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087a0:	4b39      	ldr	r3, [pc, #228]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a38      	ldr	r2, [pc, #224]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80087a6:	f043 0301 	orr.w	r3, r3, #1
 80087aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ac:	f7fa fed8 	bl	8003560 <HAL_GetTick>
 80087b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087b2:	e008      	b.n	80087c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087b4:	f7fa fed4 	bl	8003560 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e1bd      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087c6:	4b30      	ldr	r3, [pc, #192]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0f0      	beq.n	80087b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087d2:	4b2d      	ldr	r3, [pc, #180]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	4929      	ldr	r1, [pc, #164]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	600b      	str	r3, [r1, #0]
 80087e6:	e018      	b.n	800881a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087e8:	4b27      	ldr	r3, [pc, #156]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a26      	ldr	r2, [pc, #152]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 80087ee:	f023 0301 	bic.w	r3, r3, #1
 80087f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f4:	f7fa feb4 	bl	8003560 <HAL_GetTick>
 80087f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087fc:	f7fa feb0 	bl	8003560 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e199      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800880e:	4b1e      	ldr	r3, [pc, #120]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1f0      	bne.n	80087fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0308 	and.w	r3, r3, #8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d038      	beq.n	8008898 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d019      	beq.n	8008862 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800882e:	4b16      	ldr	r3, [pc, #88]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008832:	4a15      	ldr	r2, [pc, #84]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008834:	f043 0301 	orr.w	r3, r3, #1
 8008838:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800883a:	f7fa fe91 	bl	8003560 <HAL_GetTick>
 800883e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008840:	e008      	b.n	8008854 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008842:	f7fa fe8d 	bl	8003560 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	2b02      	cmp	r3, #2
 800884e:	d901      	bls.n	8008854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e176      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008854:	4b0c      	ldr	r3, [pc, #48]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0f0      	beq.n	8008842 <HAL_RCC_OscConfig+0x23a>
 8008860:	e01a      	b.n	8008898 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008862:	4b09      	ldr	r3, [pc, #36]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008866:	4a08      	ldr	r2, [pc, #32]	@ (8008888 <HAL_RCC_OscConfig+0x280>)
 8008868:	f023 0301 	bic.w	r3, r3, #1
 800886c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800886e:	f7fa fe77 	bl	8003560 <HAL_GetTick>
 8008872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008874:	e00a      	b.n	800888c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008876:	f7fa fe73 	bl	8003560 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b02      	cmp	r3, #2
 8008882:	d903      	bls.n	800888c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e15c      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
 8008888:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800888c:	4b91      	ldr	r3, [pc, #580]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 800888e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1ee      	bne.n	8008876 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 80a4 	beq.w	80089ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088a6:	4b8b      	ldr	r3, [pc, #556]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 80088a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10d      	bne.n	80088ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80088b2:	4b88      	ldr	r3, [pc, #544]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 80088b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b6:	4a87      	ldr	r2, [pc, #540]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 80088b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80088be:	4b85      	ldr	r3, [pc, #532]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 80088c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088c6:	60bb      	str	r3, [r7, #8]
 80088c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088ca:	2301      	movs	r3, #1
 80088cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088ce:	4b82      	ldr	r3, [pc, #520]	@ (8008ad8 <HAL_RCC_OscConfig+0x4d0>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d118      	bne.n	800890c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80088da:	4b7f      	ldr	r3, [pc, #508]	@ (8008ad8 <HAL_RCC_OscConfig+0x4d0>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a7e      	ldr	r2, [pc, #504]	@ (8008ad8 <HAL_RCC_OscConfig+0x4d0>)
 80088e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088e6:	f7fa fe3b 	bl	8003560 <HAL_GetTick>
 80088ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088ec:	e008      	b.n	8008900 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088ee:	f7fa fe37 	bl	8003560 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b64      	cmp	r3, #100	@ 0x64
 80088fa:	d901      	bls.n	8008900 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e120      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008900:	4b75      	ldr	r3, [pc, #468]	@ (8008ad8 <HAL_RCC_OscConfig+0x4d0>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0f0      	beq.n	80088ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d106      	bne.n	8008922 <HAL_RCC_OscConfig+0x31a>
 8008914:	4b6f      	ldr	r3, [pc, #444]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008918:	4a6e      	ldr	r2, [pc, #440]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 800891a:	f043 0301 	orr.w	r3, r3, #1
 800891e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008920:	e02d      	b.n	800897e <HAL_RCC_OscConfig+0x376>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10c      	bne.n	8008944 <HAL_RCC_OscConfig+0x33c>
 800892a:	4b6a      	ldr	r3, [pc, #424]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 800892c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800892e:	4a69      	ldr	r2, [pc, #420]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	6713      	str	r3, [r2, #112]	@ 0x70
 8008936:	4b67      	ldr	r3, [pc, #412]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800893a:	4a66      	ldr	r2, [pc, #408]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 800893c:	f023 0304 	bic.w	r3, r3, #4
 8008940:	6713      	str	r3, [r2, #112]	@ 0x70
 8008942:	e01c      	b.n	800897e <HAL_RCC_OscConfig+0x376>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	2b05      	cmp	r3, #5
 800894a:	d10c      	bne.n	8008966 <HAL_RCC_OscConfig+0x35e>
 800894c:	4b61      	ldr	r3, [pc, #388]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 800894e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008950:	4a60      	ldr	r2, [pc, #384]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008952:	f043 0304 	orr.w	r3, r3, #4
 8008956:	6713      	str	r3, [r2, #112]	@ 0x70
 8008958:	4b5e      	ldr	r3, [pc, #376]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 800895a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800895c:	4a5d      	ldr	r2, [pc, #372]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 800895e:	f043 0301 	orr.w	r3, r3, #1
 8008962:	6713      	str	r3, [r2, #112]	@ 0x70
 8008964:	e00b      	b.n	800897e <HAL_RCC_OscConfig+0x376>
 8008966:	4b5b      	ldr	r3, [pc, #364]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800896a:	4a5a      	ldr	r2, [pc, #360]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 800896c:	f023 0301 	bic.w	r3, r3, #1
 8008970:	6713      	str	r3, [r2, #112]	@ 0x70
 8008972:	4b58      	ldr	r3, [pc, #352]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008976:	4a57      	ldr	r2, [pc, #348]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008978:	f023 0304 	bic.w	r3, r3, #4
 800897c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d015      	beq.n	80089b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008986:	f7fa fdeb 	bl	8003560 <HAL_GetTick>
 800898a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800898c:	e00a      	b.n	80089a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800898e:	f7fa fde7 	bl	8003560 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800899c:	4293      	cmp	r3, r2
 800899e:	d901      	bls.n	80089a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e0ce      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089a4:	4b4b      	ldr	r3, [pc, #300]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0ee      	beq.n	800898e <HAL_RCC_OscConfig+0x386>
 80089b0:	e014      	b.n	80089dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b2:	f7fa fdd5 	bl	8003560 <HAL_GetTick>
 80089b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089b8:	e00a      	b.n	80089d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ba:	f7fa fdd1 	bl	8003560 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d901      	bls.n	80089d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e0b8      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089d0:	4b40      	ldr	r3, [pc, #256]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 80089d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1ee      	bne.n	80089ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d105      	bne.n	80089ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089e2:	4b3c      	ldr	r3, [pc, #240]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 80089e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e6:	4a3b      	ldr	r2, [pc, #236]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 80089e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 80a4 	beq.w	8008b40 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089f8:	4b36      	ldr	r3, [pc, #216]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 030c 	and.w	r3, r3, #12
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d06b      	beq.n	8008adc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d149      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a0c:	4b31      	ldr	r3, [pc, #196]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a30      	ldr	r2, [pc, #192]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a18:	f7fa fda2 	bl	8003560 <HAL_GetTick>
 8008a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a1e:	e008      	b.n	8008a32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a20:	f7fa fd9e 	bl	8003560 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e087      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a32:	4b28      	ldr	r3, [pc, #160]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f0      	bne.n	8008a20 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69da      	ldr	r2, [r3, #28]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	431a      	orrs	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a4c:	019b      	lsls	r3, r3, #6
 8008a4e:	431a      	orrs	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a54:	085b      	lsrs	r3, r3, #1
 8008a56:	3b01      	subs	r3, #1
 8008a58:	041b      	lsls	r3, r3, #16
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a60:	061b      	lsls	r3, r3, #24
 8008a62:	4313      	orrs	r3, r2
 8008a64:	4a1b      	ldr	r2, [pc, #108]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008a66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a6a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a6c:	4b19      	ldr	r3, [pc, #100]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a18      	ldr	r2, [pc, #96]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a78:	f7fa fd72 	bl	8003560 <HAL_GetTick>
 8008a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a7e:	e008      	b.n	8008a92 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a80:	f7fa fd6e 	bl	8003560 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e057      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a92:	4b10      	ldr	r3, [pc, #64]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0f0      	beq.n	8008a80 <HAL_RCC_OscConfig+0x478>
 8008a9e:	e04f      	b.n	8008b40 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aac:	f7fa fd58 	bl	8003560 <HAL_GetTick>
 8008ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ab2:	e008      	b.n	8008ac6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ab4:	f7fa fd54 	bl	8003560 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e03d      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ac6:	4b03      	ldr	r3, [pc, #12]	@ (8008ad4 <HAL_RCC_OscConfig+0x4cc>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1f0      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x4ac>
 8008ad2:	e035      	b.n	8008b40 <HAL_RCC_OscConfig+0x538>
 8008ad4:	40023800 	.word	0x40023800
 8008ad8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008adc:	4b1b      	ldr	r3, [pc, #108]	@ (8008b4c <HAL_RCC_OscConfig+0x544>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d028      	beq.n	8008b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d121      	bne.n	8008b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d11a      	bne.n	8008b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d111      	bne.n	8008b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b22:	085b      	lsrs	r3, r3, #1
 8008b24:	3b01      	subs	r3, #1
 8008b26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d107      	bne.n	8008b3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d001      	beq.n	8008b40 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e000      	b.n	8008b42 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	40023800 	.word	0x40023800

08008b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e0d0      	b.n	8008d0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b68:	4b6a      	ldr	r3, [pc, #424]	@ (8008d14 <HAL_RCC_ClockConfig+0x1c4>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 030f 	and.w	r3, r3, #15
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d910      	bls.n	8008b98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b76:	4b67      	ldr	r3, [pc, #412]	@ (8008d14 <HAL_RCC_ClockConfig+0x1c4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f023 020f 	bic.w	r2, r3, #15
 8008b7e:	4965      	ldr	r1, [pc, #404]	@ (8008d14 <HAL_RCC_ClockConfig+0x1c4>)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b86:	4b63      	ldr	r3, [pc, #396]	@ (8008d14 <HAL_RCC_ClockConfig+0x1c4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d001      	beq.n	8008b98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e0b8      	b.n	8008d0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d020      	beq.n	8008be6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0304 	and.w	r3, r3, #4
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bb0:	4b59      	ldr	r3, [pc, #356]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	4a58      	ldr	r2, [pc, #352]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008bb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008bba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0308 	and.w	r3, r3, #8
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d005      	beq.n	8008bd4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bc8:	4b53      	ldr	r3, [pc, #332]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	4a52      	ldr	r2, [pc, #328]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008bce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008bd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bd4:	4b50      	ldr	r3, [pc, #320]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	494d      	ldr	r1, [pc, #308]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d040      	beq.n	8008c74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d107      	bne.n	8008c0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bfa:	4b47      	ldr	r3, [pc, #284]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d115      	bne.n	8008c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e07f      	b.n	8008d0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d107      	bne.n	8008c22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c12:	4b41      	ldr	r3, [pc, #260]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d109      	bne.n	8008c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e073      	b.n	8008d0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c22:	4b3d      	ldr	r3, [pc, #244]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0302 	and.w	r3, r3, #2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e06b      	b.n	8008d0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c32:	4b39      	ldr	r3, [pc, #228]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f023 0203 	bic.w	r2, r3, #3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	4936      	ldr	r1, [pc, #216]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008c40:	4313      	orrs	r3, r2
 8008c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c44:	f7fa fc8c 	bl	8003560 <HAL_GetTick>
 8008c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c4a:	e00a      	b.n	8008c62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c4c:	f7fa fc88 	bl	8003560 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e053      	b.n	8008d0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c62:	4b2d      	ldr	r3, [pc, #180]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 020c 	and.w	r2, r3, #12
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d1eb      	bne.n	8008c4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c74:	4b27      	ldr	r3, [pc, #156]	@ (8008d14 <HAL_RCC_ClockConfig+0x1c4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 030f 	and.w	r3, r3, #15
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d210      	bcs.n	8008ca4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c82:	4b24      	ldr	r3, [pc, #144]	@ (8008d14 <HAL_RCC_ClockConfig+0x1c4>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f023 020f 	bic.w	r2, r3, #15
 8008c8a:	4922      	ldr	r1, [pc, #136]	@ (8008d14 <HAL_RCC_ClockConfig+0x1c4>)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c92:	4b20      	ldr	r3, [pc, #128]	@ (8008d14 <HAL_RCC_ClockConfig+0x1c4>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 030f 	and.w	r3, r3, #15
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d001      	beq.n	8008ca4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e032      	b.n	8008d0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d008      	beq.n	8008cc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cb0:	4b19      	ldr	r3, [pc, #100]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	4916      	ldr	r1, [pc, #88]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0308 	and.w	r3, r3, #8
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d009      	beq.n	8008ce2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008cce:	4b12      	ldr	r3, [pc, #72]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	490e      	ldr	r1, [pc, #56]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ce2:	f000 f821 	bl	8008d28 <HAL_RCC_GetSysClockFreq>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8008d18 <HAL_RCC_ClockConfig+0x1c8>)
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	091b      	lsrs	r3, r3, #4
 8008cee:	f003 030f 	and.w	r3, r3, #15
 8008cf2:	490a      	ldr	r1, [pc, #40]	@ (8008d1c <HAL_RCC_ClockConfig+0x1cc>)
 8008cf4:	5ccb      	ldrb	r3, [r1, r3]
 8008cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfa:	4a09      	ldr	r2, [pc, #36]	@ (8008d20 <HAL_RCC_ClockConfig+0x1d0>)
 8008cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008cfe:	4b09      	ldr	r3, [pc, #36]	@ (8008d24 <HAL_RCC_ClockConfig+0x1d4>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f9 fd8e 	bl	8002824 <HAL_InitTick>

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	40023c00 	.word	0x40023c00
 8008d18:	40023800 	.word	0x40023800
 8008d1c:	08016924 	.word	0x08016924
 8008d20:	20000000 	.word	0x20000000
 8008d24:	20000004 	.word	0x20000004

08008d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d2c:	b090      	sub	sp, #64	@ 0x40
 8008d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d34:	2300      	movs	r3, #0
 8008d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d38:	2300      	movs	r3, #0
 8008d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d40:	4b59      	ldr	r3, [pc, #356]	@ (8008ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	f003 030c 	and.w	r3, r3, #12
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d00d      	beq.n	8008d68 <HAL_RCC_GetSysClockFreq+0x40>
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	f200 80a1 	bhi.w	8008e94 <HAL_RCC_GetSysClockFreq+0x16c>
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <HAL_RCC_GetSysClockFreq+0x34>
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d003      	beq.n	8008d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8008d5a:	e09b      	b.n	8008e94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d5c:	4b53      	ldr	r3, [pc, #332]	@ (8008eac <HAL_RCC_GetSysClockFreq+0x184>)
 8008d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d60:	e09b      	b.n	8008e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d62:	4b53      	ldr	r3, [pc, #332]	@ (8008eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008d64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008d66:	e098      	b.n	8008e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d68:	4b4f      	ldr	r3, [pc, #316]	@ (8008ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008d72:	4b4d      	ldr	r3, [pc, #308]	@ (8008ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d028      	beq.n	8008dd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8008ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	099b      	lsrs	r3, r3, #6
 8008d84:	2200      	movs	r2, #0
 8008d86:	623b      	str	r3, [r7, #32]
 8008d88:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008d90:	2100      	movs	r1, #0
 8008d92:	4b47      	ldr	r3, [pc, #284]	@ (8008eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008d94:	fb03 f201 	mul.w	r2, r3, r1
 8008d98:	2300      	movs	r3, #0
 8008d9a:	fb00 f303 	mul.w	r3, r0, r3
 8008d9e:	4413      	add	r3, r2
 8008da0:	4a43      	ldr	r2, [pc, #268]	@ (8008eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008da2:	fba0 1202 	umull	r1, r2, r0, r2
 8008da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008da8:	460a      	mov	r2, r1
 8008daa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dae:	4413      	add	r3, r2
 8008db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db4:	2200      	movs	r2, #0
 8008db6:	61bb      	str	r3, [r7, #24]
 8008db8:	61fa      	str	r2, [r7, #28]
 8008dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008dc2:	f7f7 fa75 	bl	80002b0 <__aeabi_uldivmod>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4613      	mov	r3, r2
 8008dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dce:	e053      	b.n	8008e78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dd0:	4b35      	ldr	r3, [pc, #212]	@ (8008ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	099b      	lsrs	r3, r3, #6
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	613b      	str	r3, [r7, #16]
 8008dda:	617a      	str	r2, [r7, #20]
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008de2:	f04f 0b00 	mov.w	fp, #0
 8008de6:	4652      	mov	r2, sl
 8008de8:	465b      	mov	r3, fp
 8008dea:	f04f 0000 	mov.w	r0, #0
 8008dee:	f04f 0100 	mov.w	r1, #0
 8008df2:	0159      	lsls	r1, r3, #5
 8008df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008df8:	0150      	lsls	r0, r2, #5
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	ebb2 080a 	subs.w	r8, r2, sl
 8008e02:	eb63 090b 	sbc.w	r9, r3, fp
 8008e06:	f04f 0200 	mov.w	r2, #0
 8008e0a:	f04f 0300 	mov.w	r3, #0
 8008e0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008e12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008e16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008e1a:	ebb2 0408 	subs.w	r4, r2, r8
 8008e1e:	eb63 0509 	sbc.w	r5, r3, r9
 8008e22:	f04f 0200 	mov.w	r2, #0
 8008e26:	f04f 0300 	mov.w	r3, #0
 8008e2a:	00eb      	lsls	r3, r5, #3
 8008e2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e30:	00e2      	lsls	r2, r4, #3
 8008e32:	4614      	mov	r4, r2
 8008e34:	461d      	mov	r5, r3
 8008e36:	eb14 030a 	adds.w	r3, r4, sl
 8008e3a:	603b      	str	r3, [r7, #0]
 8008e3c:	eb45 030b 	adc.w	r3, r5, fp
 8008e40:	607b      	str	r3, [r7, #4]
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	f04f 0300 	mov.w	r3, #0
 8008e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e4e:	4629      	mov	r1, r5
 8008e50:	028b      	lsls	r3, r1, #10
 8008e52:	4621      	mov	r1, r4
 8008e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e58:	4621      	mov	r1, r4
 8008e5a:	028a      	lsls	r2, r1, #10
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e62:	2200      	movs	r2, #0
 8008e64:	60bb      	str	r3, [r7, #8]
 8008e66:	60fa      	str	r2, [r7, #12]
 8008e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e6c:	f7f7 fa20 	bl	80002b0 <__aeabi_uldivmod>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4613      	mov	r3, r2
 8008e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008e78:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	0c1b      	lsrs	r3, r3, #16
 8008e7e:	f003 0303 	and.w	r3, r3, #3
 8008e82:	3301      	adds	r3, #1
 8008e84:	005b      	lsls	r3, r3, #1
 8008e86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008e88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008e92:	e002      	b.n	8008e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e94:	4b05      	ldr	r3, [pc, #20]	@ (8008eac <HAL_RCC_GetSysClockFreq+0x184>)
 8008e96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3740      	adds	r7, #64	@ 0x40
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ea6:	bf00      	nop
 8008ea8:	40023800 	.word	0x40023800
 8008eac:	00f42400 	.word	0x00f42400
 8008eb0:	017d7840 	.word	0x017d7840

08008eb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008eb8:	4b03      	ldr	r3, [pc, #12]	@ (8008ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008eba:	681b      	ldr	r3, [r3, #0]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	20000000 	.word	0x20000000

08008ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008ed0:	f7ff fff0 	bl	8008eb4 <HAL_RCC_GetHCLKFreq>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	4b05      	ldr	r3, [pc, #20]	@ (8008eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	0a9b      	lsrs	r3, r3, #10
 8008edc:	f003 0307 	and.w	r3, r3, #7
 8008ee0:	4903      	ldr	r1, [pc, #12]	@ (8008ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ee2:	5ccb      	ldrb	r3, [r1, r3]
 8008ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	40023800 	.word	0x40023800
 8008ef0:	08016934 	.word	0x08016934

08008ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ef8:	f7ff ffdc 	bl	8008eb4 <HAL_RCC_GetHCLKFreq>
 8008efc:	4602      	mov	r2, r0
 8008efe:	4b05      	ldr	r3, [pc, #20]	@ (8008f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	0b5b      	lsrs	r3, r3, #13
 8008f04:	f003 0307 	and.w	r3, r3, #7
 8008f08:	4903      	ldr	r1, [pc, #12]	@ (8008f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f0a:	5ccb      	ldrb	r3, [r1, r3]
 8008f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40023800 	.word	0x40023800
 8008f18:	08016934 	.word	0x08016934

08008f1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	220f      	movs	r2, #15
 8008f2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008f2c:	4b12      	ldr	r3, [pc, #72]	@ (8008f78 <HAL_RCC_GetClockConfig+0x5c>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 0203 	and.w	r2, r3, #3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008f38:	4b0f      	ldr	r3, [pc, #60]	@ (8008f78 <HAL_RCC_GetClockConfig+0x5c>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008f44:	4b0c      	ldr	r3, [pc, #48]	@ (8008f78 <HAL_RCC_GetClockConfig+0x5c>)
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008f50:	4b09      	ldr	r3, [pc, #36]	@ (8008f78 <HAL_RCC_GetClockConfig+0x5c>)
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	08db      	lsrs	r3, r3, #3
 8008f56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f5e:	4b07      	ldr	r3, [pc, #28]	@ (8008f7c <HAL_RCC_GetClockConfig+0x60>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 020f 	and.w	r2, r3, #15
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	601a      	str	r2, [r3, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	40023800 	.word	0x40023800
 8008f7c:	40023c00 	.word	0x40023c00

08008f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d012      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008fa8:	4b69      	ldr	r3, [pc, #420]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	4a68      	ldr	r2, [pc, #416]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008fb2:	6093      	str	r3, [r2, #8]
 8008fb4:	4b66      	ldr	r3, [pc, #408]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fbc:	4964      	ldr	r1, [pc, #400]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d017      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fda:	4b5d      	ldr	r3, [pc, #372]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fe0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe8:	4959      	ldr	r1, [pc, #356]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ff8:	d101      	bne.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009006:	2301      	movs	r3, #1
 8009008:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d017      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009016:	4b4e      	ldr	r3, [pc, #312]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800901c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009024:	494a      	ldr	r1, [pc, #296]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009026:	4313      	orrs	r3, r2
 8009028:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009030:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009034:	d101      	bne.n	800903a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009036:	2301      	movs	r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009042:	2301      	movs	r3, #1
 8009044:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009052:	2301      	movs	r3, #1
 8009054:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0320 	and.w	r3, r3, #32
 800905e:	2b00      	cmp	r3, #0
 8009060:	f000 808b 	beq.w	800917a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009064:	4b3a      	ldr	r3, [pc, #232]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009068:	4a39      	ldr	r2, [pc, #228]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800906a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800906e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009070:	4b37      	ldr	r3, [pc, #220]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009078:	60bb      	str	r3, [r7, #8]
 800907a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800907c:	4b35      	ldr	r3, [pc, #212]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a34      	ldr	r2, [pc, #208]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009088:	f7fa fa6a 	bl	8003560 <HAL_GetTick>
 800908c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800908e:	e008      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009090:	f7fa fa66 	bl	8003560 <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	2b64      	cmp	r3, #100	@ 0x64
 800909c:	d901      	bls.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e357      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80090a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0f0      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80090ae:	4b28      	ldr	r3, [pc, #160]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d035      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d02e      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090cc:	4b20      	ldr	r3, [pc, #128]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80090d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090da:	4a1d      	ldr	r2, [pc, #116]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090e0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80090e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090e6:	4a1a      	ldr	r2, [pc, #104]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80090ee:	4a18      	ldr	r2, [pc, #96]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80090f4:	4b16      	ldr	r3, [pc, #88]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d114      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009100:	f7fa fa2e 	bl	8003560 <HAL_GetTick>
 8009104:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009106:	e00a      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009108:	f7fa fa2a 	bl	8003560 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009116:	4293      	cmp	r3, r2
 8009118:	d901      	bls.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e319      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800911e:	4b0c      	ldr	r3, [pc, #48]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009122:	f003 0302 	and.w	r3, r3, #2
 8009126:	2b00      	cmp	r3, #0
 8009128:	d0ee      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009136:	d111      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009138:	4b05      	ldr	r3, [pc, #20]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009144:	4b04      	ldr	r3, [pc, #16]	@ (8009158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009146:	400b      	ands	r3, r1
 8009148:	4901      	ldr	r1, [pc, #4]	@ (8009150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800914a:	4313      	orrs	r3, r2
 800914c:	608b      	str	r3, [r1, #8]
 800914e:	e00b      	b.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009150:	40023800 	.word	0x40023800
 8009154:	40007000 	.word	0x40007000
 8009158:	0ffffcff 	.word	0x0ffffcff
 800915c:	4baa      	ldr	r3, [pc, #680]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	4aa9      	ldr	r2, [pc, #676]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009162:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009166:	6093      	str	r3, [r2, #8]
 8009168:	4ba7      	ldr	r3, [pc, #668]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009174:	49a4      	ldr	r1, [pc, #656]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009176:	4313      	orrs	r3, r2
 8009178:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0310 	and.w	r3, r3, #16
 8009182:	2b00      	cmp	r3, #0
 8009184:	d010      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009186:	4ba0      	ldr	r3, [pc, #640]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800918c:	4a9e      	ldr	r2, [pc, #632]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800918e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009192:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009196:	4b9c      	ldr	r3, [pc, #624]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009198:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a0:	4999      	ldr	r1, [pc, #612]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00a      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091b4:	4b94      	ldr	r3, [pc, #592]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091c2:	4991      	ldr	r1, [pc, #580]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00a      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80091d6:	4b8c      	ldr	r3, [pc, #560]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091e4:	4988      	ldr	r1, [pc, #544]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00a      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80091f8:	4b83      	ldr	r3, [pc, #524]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009206:	4980      	ldr	r1, [pc, #512]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009208:	4313      	orrs	r3, r2
 800920a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800921a:	4b7b      	ldr	r3, [pc, #492]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800921c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009220:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009228:	4977      	ldr	r1, [pc, #476]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800922a:	4313      	orrs	r3, r2
 800922c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00a      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800923c:	4b72      	ldr	r3, [pc, #456]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800923e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009242:	f023 0203 	bic.w	r2, r3, #3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800924a:	496f      	ldr	r1, [pc, #444]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800924c:	4313      	orrs	r3, r2
 800924e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00a      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800925e:	4b6a      	ldr	r3, [pc, #424]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009264:	f023 020c 	bic.w	r2, r3, #12
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800926c:	4966      	ldr	r1, [pc, #408]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800926e:	4313      	orrs	r3, r2
 8009270:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00a      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009280:	4b61      	ldr	r3, [pc, #388]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009286:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800928e:	495e      	ldr	r1, [pc, #376]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009290:	4313      	orrs	r3, r2
 8009292:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80092a2:	4b59      	ldr	r3, [pc, #356]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092b0:	4955      	ldr	r1, [pc, #340]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80092c4:	4b50      	ldr	r3, [pc, #320]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d2:	494d      	ldr	r1, [pc, #308]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80092e6:	4b48      	ldr	r3, [pc, #288]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f4:	4944      	ldr	r1, [pc, #272]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009308:	4b3f      	ldr	r3, [pc, #252]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800930a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800930e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009316:	493c      	ldr	r1, [pc, #240]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800932a:	4b37      	ldr	r3, [pc, #220]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800932c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009330:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009338:	4933      	ldr	r1, [pc, #204]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800933a:	4313      	orrs	r3, r2
 800933c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00a      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800934c:	4b2e      	ldr	r3, [pc, #184]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800934e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009352:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800935a:	492b      	ldr	r1, [pc, #172]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d011      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800936e:	4b26      	ldr	r3, [pc, #152]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009374:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800937c:	4922      	ldr	r1, [pc, #136]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800937e:	4313      	orrs	r3, r2
 8009380:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800938c:	d101      	bne.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800938e:	2301      	movs	r3, #1
 8009390:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800939e:	2301      	movs	r3, #1
 80093a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093ae:	4b16      	ldr	r3, [pc, #88]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093bc:	4912      	ldr	r1, [pc, #72]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80093d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093e0:	4909      	ldr	r1, [pc, #36]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d006      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 80d9 	beq.w	80095ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80093fc:	4b02      	ldr	r3, [pc, #8]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a01      	ldr	r2, [pc, #4]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009402:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009406:	e001      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009408:	40023800 	.word	0x40023800
 800940c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800940e:	f7fa f8a7 	bl	8003560 <HAL_GetTick>
 8009412:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009414:	e008      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009416:	f7fa f8a3 	bl	8003560 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	2b64      	cmp	r3, #100	@ 0x64
 8009422:	d901      	bls.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e194      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009428:	4b6c      	ldr	r3, [pc, #432]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1f0      	bne.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b00      	cmp	r3, #0
 800943e:	d021      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009444:	2b00      	cmp	r3, #0
 8009446:	d11d      	bne.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009448:	4b64      	ldr	r3, [pc, #400]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800944a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800944e:	0c1b      	lsrs	r3, r3, #16
 8009450:	f003 0303 	and.w	r3, r3, #3
 8009454:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009456:	4b61      	ldr	r3, [pc, #388]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800945c:	0e1b      	lsrs	r3, r3, #24
 800945e:	f003 030f 	and.w	r3, r3, #15
 8009462:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	019a      	lsls	r2, r3, #6
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	041b      	lsls	r3, r3, #16
 800946e:	431a      	orrs	r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	061b      	lsls	r3, r3, #24
 8009474:	431a      	orrs	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	071b      	lsls	r3, r3, #28
 800947c:	4957      	ldr	r1, [pc, #348]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800947e:	4313      	orrs	r3, r2
 8009480:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009494:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009498:	d00a      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d02e      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094ae:	d129      	bne.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80094b0:	4b4a      	ldr	r3, [pc, #296]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094b6:	0c1b      	lsrs	r3, r3, #16
 80094b8:	f003 0303 	and.w	r3, r3, #3
 80094bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80094be:	4b47      	ldr	r3, [pc, #284]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094c4:	0f1b      	lsrs	r3, r3, #28
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	019a      	lsls	r2, r3, #6
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	041b      	lsls	r3, r3, #16
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	061b      	lsls	r3, r3, #24
 80094de:	431a      	orrs	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	071b      	lsls	r3, r3, #28
 80094e4:	493d      	ldr	r1, [pc, #244]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80094ec:	4b3b      	ldr	r3, [pc, #236]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094f2:	f023 021f 	bic.w	r2, r3, #31
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fa:	3b01      	subs	r3, #1
 80094fc:	4937      	ldr	r1, [pc, #220]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d01d      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009510:	4b32      	ldr	r3, [pc, #200]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009516:	0e1b      	lsrs	r3, r3, #24
 8009518:	f003 030f 	and.w	r3, r3, #15
 800951c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800951e:	4b2f      	ldr	r3, [pc, #188]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009524:	0f1b      	lsrs	r3, r3, #28
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	019a      	lsls	r2, r3, #6
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	041b      	lsls	r3, r3, #16
 8009538:	431a      	orrs	r2, r3
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	061b      	lsls	r3, r3, #24
 800953e:	431a      	orrs	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	071b      	lsls	r3, r3, #28
 8009544:	4925      	ldr	r1, [pc, #148]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009546:	4313      	orrs	r3, r2
 8009548:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d011      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	019a      	lsls	r2, r3, #6
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	041b      	lsls	r3, r3, #16
 8009564:	431a      	orrs	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	061b      	lsls	r3, r3, #24
 800956c:	431a      	orrs	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	071b      	lsls	r3, r3, #28
 8009574:	4919      	ldr	r1, [pc, #100]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009576:	4313      	orrs	r3, r2
 8009578:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800957c:	4b17      	ldr	r3, [pc, #92]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a16      	ldr	r2, [pc, #88]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009582:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009588:	f7f9 ffea 	bl	8003560 <HAL_GetTick>
 800958c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800958e:	e008      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009590:	f7f9 ffe6 	bl	8003560 <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	2b64      	cmp	r3, #100	@ 0x64
 800959c:	d901      	bls.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e0d7      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80095a2:	4b0e      	ldr	r3, [pc, #56]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0f0      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	f040 80cd 	bne.w	8009750 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80095b6:	4b09      	ldr	r3, [pc, #36]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a08      	ldr	r2, [pc, #32]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095c2:	f7f9 ffcd 	bl	8003560 <HAL_GetTick>
 80095c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80095c8:	e00a      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80095ca:	f7f9 ffc9 	bl	8003560 <HAL_GetTick>
 80095ce:	4602      	mov	r2, r0
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	2b64      	cmp	r3, #100	@ 0x64
 80095d6:	d903      	bls.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e0ba      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80095dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80095e0:	4b5e      	ldr	r3, [pc, #376]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ec:	d0ed      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d009      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800960a:	2b00      	cmp	r3, #0
 800960c:	d02e      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009612:	2b00      	cmp	r3, #0
 8009614:	d12a      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009616:	4b51      	ldr	r3, [pc, #324]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800961c:	0c1b      	lsrs	r3, r3, #16
 800961e:	f003 0303 	and.w	r3, r3, #3
 8009622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009624:	4b4d      	ldr	r3, [pc, #308]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962a:	0f1b      	lsrs	r3, r3, #28
 800962c:	f003 0307 	and.w	r3, r3, #7
 8009630:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	019a      	lsls	r2, r3, #6
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	041b      	lsls	r3, r3, #16
 800963c:	431a      	orrs	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	061b      	lsls	r3, r3, #24
 8009644:	431a      	orrs	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	071b      	lsls	r3, r3, #28
 800964a:	4944      	ldr	r1, [pc, #272]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800964c:	4313      	orrs	r3, r2
 800964e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009652:	4b42      	ldr	r3, [pc, #264]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009658:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009660:	3b01      	subs	r3, #1
 8009662:	021b      	lsls	r3, r3, #8
 8009664:	493d      	ldr	r1, [pc, #244]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009666:	4313      	orrs	r3, r2
 8009668:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d022      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800967c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009680:	d11d      	bne.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009682:	4b36      	ldr	r3, [pc, #216]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009688:	0e1b      	lsrs	r3, r3, #24
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009690:	4b32      	ldr	r3, [pc, #200]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009696:	0f1b      	lsrs	r3, r3, #28
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	019a      	lsls	r2, r3, #6
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a1b      	ldr	r3, [r3, #32]
 80096a8:	041b      	lsls	r3, r3, #16
 80096aa:	431a      	orrs	r2, r3
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	061b      	lsls	r3, r3, #24
 80096b0:	431a      	orrs	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	071b      	lsls	r3, r3, #28
 80096b6:	4929      	ldr	r1, [pc, #164]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096b8:	4313      	orrs	r3, r2
 80096ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0308 	and.w	r3, r3, #8
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d028      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80096ca:	4b24      	ldr	r3, [pc, #144]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d0:	0e1b      	lsrs	r3, r3, #24
 80096d2:	f003 030f 	and.w	r3, r3, #15
 80096d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80096d8:	4b20      	ldr	r3, [pc, #128]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096de:	0c1b      	lsrs	r3, r3, #16
 80096e0:	f003 0303 	and.w	r3, r3, #3
 80096e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	019a      	lsls	r2, r3, #6
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	041b      	lsls	r3, r3, #16
 80096f0:	431a      	orrs	r2, r3
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	061b      	lsls	r3, r3, #24
 80096f6:	431a      	orrs	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	071b      	lsls	r3, r3, #28
 80096fe:	4917      	ldr	r1, [pc, #92]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009700:	4313      	orrs	r3, r2
 8009702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009706:	4b15      	ldr	r3, [pc, #84]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800970c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009714:	4911      	ldr	r1, [pc, #68]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009716:	4313      	orrs	r3, r2
 8009718:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800971c:	4b0f      	ldr	r3, [pc, #60]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a0e      	ldr	r2, [pc, #56]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009728:	f7f9 ff1a 	bl	8003560 <HAL_GetTick>
 800972c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800972e:	e008      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009730:	f7f9 ff16 	bl	8003560 <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	2b64      	cmp	r3, #100	@ 0x64
 800973c:	d901      	bls.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	e007      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009742:	4b06      	ldr	r3, [pc, #24]	@ (800975c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800974a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800974e:	d1ef      	bne.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3720      	adds	r7, #32
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	40023800 	.word	0x40023800

08009760 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009770:	2300      	movs	r3, #0
 8009772:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800977e:	f040 808d 	bne.w	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009782:	4b93      	ldr	r3, [pc, #588]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009788:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009790:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009798:	d07c      	beq.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097a0:	d87b      	bhi.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d004      	beq.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097ae:	d039      	beq.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80097b0:	e073      	b.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80097b2:	4b87      	ldr	r3, [pc, #540]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d108      	bne.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80097be:	4b84      	ldr	r3, [pc, #528]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097c6:	4a83      	ldr	r2, [pc, #524]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80097c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097cc:	613b      	str	r3, [r7, #16]
 80097ce:	e007      	b.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80097d0:	4b7f      	ldr	r3, [pc, #508]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097d8:	4a7f      	ldr	r2, [pc, #508]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097da:	fbb2 f3f3 	udiv	r3, r2, r3
 80097de:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80097e0:	4b7b      	ldr	r3, [pc, #492]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80097e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097e6:	0e1b      	lsrs	r3, r3, #24
 80097e8:	f003 030f 	and.w	r3, r3, #15
 80097ec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80097ee:	4b78      	ldr	r3, [pc, #480]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80097f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097f4:	099b      	lsrs	r3, r3, #6
 80097f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	fb03 f202 	mul.w	r2, r3, r2
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	fbb2 f3f3 	udiv	r3, r2, r3
 8009806:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009808:	4b71      	ldr	r3, [pc, #452]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800980a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	f003 031f 	and.w	r3, r3, #31
 8009814:	3301      	adds	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009820:	617b      	str	r3, [r7, #20]
        break;
 8009822:	e03b      	b.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009824:	4b6a      	ldr	r3, [pc, #424]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d108      	bne.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009830:	4b67      	ldr	r3, [pc, #412]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009838:	4a66      	ldr	r2, [pc, #408]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800983a:	fbb2 f3f3 	udiv	r3, r2, r3
 800983e:	613b      	str	r3, [r7, #16]
 8009840:	e007      	b.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009842:	4b63      	ldr	r3, [pc, #396]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800984a:	4a63      	ldr	r2, [pc, #396]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800984c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009850:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009852:	4b5f      	ldr	r3, [pc, #380]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009858:	0e1b      	lsrs	r3, r3, #24
 800985a:	f003 030f 	and.w	r3, r3, #15
 800985e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009860:	4b5b      	ldr	r3, [pc, #364]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009866:	099b      	lsrs	r3, r3, #6
 8009868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	fb03 f202 	mul.w	r2, r3, r2
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	fbb2 f3f3 	udiv	r3, r2, r3
 8009878:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800987a:	4b55      	ldr	r3, [pc, #340]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800987c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009880:	f003 031f 	and.w	r3, r3, #31
 8009884:	3301      	adds	r3, #1
 8009886:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009890:	617b      	str	r3, [r7, #20]
        break;
 8009892:	e003      	b.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009894:	4b51      	ldr	r3, [pc, #324]	@ (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009896:	617b      	str	r3, [r7, #20]
        break;
 8009898:	e000      	b.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800989a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098a2:	f040 808d 	bne.w	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 80098a6:	4b4a      	ldr	r3, [pc, #296]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80098a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098ac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80098b4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80098bc:	d07c      	beq.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80098c4:	d87b      	bhi.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d004      	beq.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80098d2:	d039      	beq.n	8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80098d4:	e073      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80098d6:	4b3e      	ldr	r3, [pc, #248]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d108      	bne.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80098e2:	4b3b      	ldr	r3, [pc, #236]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098ea:	4a3a      	ldr	r2, [pc, #232]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80098ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f0:	613b      	str	r3, [r7, #16]
 80098f2:	e007      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80098f4:	4b36      	ldr	r3, [pc, #216]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098fc:	4a36      	ldr	r2, [pc, #216]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80098fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009902:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009904:	4b32      	ldr	r3, [pc, #200]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800990a:	0e1b      	lsrs	r3, r3, #24
 800990c:	f003 030f 	and.w	r3, r3, #15
 8009910:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009912:	4b2f      	ldr	r3, [pc, #188]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009918:	099b      	lsrs	r3, r3, #6
 800991a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	fb03 f202 	mul.w	r2, r3, r2
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	fbb2 f3f3 	udiv	r3, r2, r3
 800992a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800992c:	4b28      	ldr	r3, [pc, #160]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800992e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009932:	0a1b      	lsrs	r3, r3, #8
 8009934:	f003 031f 	and.w	r3, r3, #31
 8009938:	3301      	adds	r3, #1
 800993a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	fbb2 f3f3 	udiv	r3, r2, r3
 8009944:	617b      	str	r3, [r7, #20]
        break;
 8009946:	e03b      	b.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009948:	4b21      	ldr	r3, [pc, #132]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d108      	bne.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009954:	4b1e      	ldr	r3, [pc, #120]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800995c:	4a1d      	ldr	r2, [pc, #116]	@ (80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800995e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	e007      	b.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009966:	4b1a      	ldr	r3, [pc, #104]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800996e:	4a1a      	ldr	r2, [pc, #104]	@ (80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009970:	fbb2 f3f3 	udiv	r3, r2, r3
 8009974:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009976:	4b16      	ldr	r3, [pc, #88]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800997c:	0e1b      	lsrs	r3, r3, #24
 800997e:	f003 030f 	and.w	r3, r3, #15
 8009982:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009984:	4b12      	ldr	r3, [pc, #72]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800998a:	099b      	lsrs	r3, r3, #6
 800998c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	fb03 f202 	mul.w	r2, r3, r2
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	fbb2 f3f3 	udiv	r3, r2, r3
 800999c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800999e:	4b0c      	ldr	r3, [pc, #48]	@ (80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80099a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099a4:	f003 031f 	and.w	r3, r3, #31
 80099a8:	3301      	adds	r3, #1
 80099aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b4:	617b      	str	r3, [r7, #20]
        break;
 80099b6:	e003      	b.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80099b8:	4b08      	ldr	r3, [pc, #32]	@ (80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80099ba:	617b      	str	r3, [r7, #20]
        break;
 80099bc:	e000      	b.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 80099be:	bf00      	nop
      }
    }
  }

  return frequency;
 80099c0:	697b      	ldr	r3, [r7, #20]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	40023800 	.word	0x40023800
 80099d4:	00f42400 	.word	0x00f42400
 80099d8:	017d7840 	.word	0x017d7840
 80099dc:	00bb8000 	.word	0x00bb8000

080099e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e071      	b.n	8009ad6 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	7f5b      	ldrb	r3, [r3, #29]
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d105      	bne.n	8009a08 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7f8 fbee 	bl	80021e4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f003 0310 	and.w	r3, r3, #16
 8009a18:	2b10      	cmp	r3, #16
 8009a1a:	d053      	beq.n	8009ac4 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	22ca      	movs	r2, #202	@ 0xca
 8009a22:	625a      	str	r2, [r3, #36]	@ 0x24
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2253      	movs	r2, #83	@ 0x53
 8009a2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fac7 	bl	8009fc0 <RTC_EnterInitMode>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d12a      	bne.n	8009a92 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6899      	ldr	r1, [r3, #8]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	4b26      	ldr	r3, [pc, #152]	@ (8009ae0 <HAL_RTC_Init+0x100>)
 8009a48:	400b      	ands	r3, r1
 8009a4a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6899      	ldr	r1, [r3, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	431a      	orrs	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	431a      	orrs	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	68d2      	ldr	r2, [r2, #12]
 8009a72:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6919      	ldr	r1, [r3, #16]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	041a      	lsls	r2, r3, #16
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fad0 	bl	800a02e <RTC_ExitInitMode>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d110      	bne.n	8009aba <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 0208 	bic.w	r2, r2, #8
 8009aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	699a      	ldr	r2, [r3, #24]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	22ff      	movs	r2, #255	@ 0xff
 8009ac0:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ac2:	e001      	b.n	8009ac8 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d102      	bne.n	8009ad4 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	ff8fffbf 	.word	0xff8fffbf

08009ae4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009ae4:	b590      	push	{r4, r7, lr}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009af0:	2300      	movs	r3, #0
 8009af2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	7f1b      	ldrb	r3, [r3, #28]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_RTC_SetTime+0x1c>
 8009afc:	2302      	movs	r3, #2
 8009afe:	e085      	b.n	8009c0c <HAL_RTC_SetTime+0x128>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2202      	movs	r2, #2
 8009b0a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d126      	bne.n	8009b60 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d102      	bne.n	8009b26 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2200      	movs	r2, #0
 8009b24:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 faa4 	bl	800a078 <RTC_ByteToBcd2>
 8009b30:	4603      	mov	r3, r0
 8009b32:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	785b      	ldrb	r3, [r3, #1]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 fa9d 	bl	800a078 <RTC_ByteToBcd2>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009b42:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	789b      	ldrb	r3, [r3, #2]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 fa95 	bl	800a078 <RTC_ByteToBcd2>
 8009b4e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009b50:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	78db      	ldrb	r3, [r3, #3]
 8009b58:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	617b      	str	r3, [r7, #20]
 8009b5e:	e018      	b.n	8009b92 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d102      	bne.n	8009b74 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2200      	movs	r2, #0
 8009b72:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	785b      	ldrb	r3, [r3, #1]
 8009b7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009b80:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009b86:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	78db      	ldrb	r3, [r3, #3]
 8009b8c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	22ca      	movs	r2, #202	@ 0xca
 8009b98:	625a      	str	r2, [r3, #36]	@ 0x24
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2253      	movs	r2, #83	@ 0x53
 8009ba0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 fa0c 	bl	8009fc0 <RTC_EnterInitMode>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009bac:	7cfb      	ldrb	r3, [r7, #19]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d11e      	bne.n	8009bf0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	6979      	ldr	r1, [r7, #20]
 8009bb8:	4b16      	ldr	r3, [pc, #88]	@ (8009c14 <HAL_RTC_SetTime+0x130>)
 8009bba:	400b      	ands	r3, r1
 8009bbc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689a      	ldr	r2, [r3, #8]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009bcc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6899      	ldr	r1, [r3, #8]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	68da      	ldr	r2, [r3, #12]
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 fa21 	bl	800a02e <RTC_ExitInitMode>
 8009bec:	4603      	mov	r3, r0
 8009bee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009bf0:	7cfb      	ldrb	r3, [r7, #19]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d102      	bne.n	8009bfc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	22ff      	movs	r2, #255	@ 0xff
 8009c02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	771a      	strb	r2, [r3, #28]

  return status;
 8009c0a:	7cfb      	ldrb	r3, [r7, #19]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	371c      	adds	r7, #28
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd90      	pop	{r4, r7, pc}
 8009c14:	007f7f7f 	.word	0x007f7f7f

08009c18 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009c18:	b590      	push	{r4, r7, lr}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	7f1b      	ldrb	r3, [r3, #28]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d101      	bne.n	8009c34 <HAL_RTC_SetDate+0x1c>
 8009c30:	2302      	movs	r3, #2
 8009c32:	e06f      	b.n	8009d14 <HAL_RTC_SetDate+0xfc>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2201      	movs	r2, #1
 8009c38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10e      	bne.n	8009c64 <HAL_RTC_SetDate+0x4c>
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	785b      	ldrb	r3, [r3, #1]
 8009c4a:	f003 0310 	and.w	r3, r3, #16
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d008      	beq.n	8009c64 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	785b      	ldrb	r3, [r3, #1]
 8009c56:	f023 0310 	bic.w	r3, r3, #16
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	330a      	adds	r3, #10
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d11c      	bne.n	8009ca4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	78db      	ldrb	r3, [r3, #3]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fa02 	bl	800a078 <RTC_ByteToBcd2>
 8009c74:	4603      	mov	r3, r0
 8009c76:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	785b      	ldrb	r3, [r3, #1]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 f9fb 	bl	800a078 <RTC_ByteToBcd2>
 8009c82:	4603      	mov	r3, r0
 8009c84:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009c86:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	789b      	ldrb	r3, [r3, #2]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 f9f3 	bl	800a078 <RTC_ByteToBcd2>
 8009c92:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009c94:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	617b      	str	r3, [r7, #20]
 8009ca2:	e00e      	b.n	8009cc2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	78db      	ldrb	r3, [r3, #3]
 8009ca8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	785b      	ldrb	r3, [r3, #1]
 8009cae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009cb0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009cb6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	22ca      	movs	r2, #202	@ 0xca
 8009cc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2253      	movs	r2, #83	@ 0x53
 8009cd0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 f974 	bl	8009fc0 <RTC_EnterInitMode>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009cdc:	7cfb      	ldrb	r3, [r7, #19]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10a      	bne.n	8009cf8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	6979      	ldr	r1, [r7, #20]
 8009ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8009d1c <HAL_RTC_SetDate+0x104>)
 8009cea:	400b      	ands	r3, r1
 8009cec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f000 f99d 	bl	800a02e <RTC_ExitInitMode>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009cf8:	7cfb      	ldrb	r3, [r7, #19]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d102      	bne.n	8009d04 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2201      	movs	r2, #1
 8009d02:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	22ff      	movs	r2, #255	@ 0xff
 8009d0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	771a      	strb	r2, [r3, #28]

  return status;
 8009d12:	7cfb      	ldrb	r3, [r7, #19]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	371c      	adds	r7, #28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd90      	pop	{r4, r7, pc}
 8009d1c:	00ffff3f 	.word	0x00ffff3f

08009d20 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009d20:	b590      	push	{r4, r7, lr}
 8009d22:	b089      	sub	sp, #36	@ 0x24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009d30:	2300      	movs	r3, #0
 8009d32:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	7f1b      	ldrb	r3, [r3, #28]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d101      	bne.n	8009d44 <HAL_RTC_SetAlarm+0x24>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e113      	b.n	8009f6c <HAL_RTC_SetAlarm+0x24c>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2201      	movs	r2, #1
 8009d48:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d137      	bne.n	8009dc6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d102      	bne.n	8009d6a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2200      	movs	r2, #0
 8009d68:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 f982 	bl	800a078 <RTC_ByteToBcd2>
 8009d74:	4603      	mov	r3, r0
 8009d76:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	785b      	ldrb	r3, [r3, #1]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 f97b 	bl	800a078 <RTC_ByteToBcd2>
 8009d82:	4603      	mov	r3, r0
 8009d84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009d86:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	789b      	ldrb	r3, [r3, #2]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 f973 	bl	800a078 <RTC_ByteToBcd2>
 8009d92:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009d94:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	78db      	ldrb	r3, [r3, #3]
 8009d9c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009d9e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 f965 	bl	800a078 <RTC_ByteToBcd2>
 8009dae:	4603      	mov	r3, r0
 8009db0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8009db2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009dba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	e023      	b.n	8009e0e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d102      	bne.n	8009dda <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	785b      	ldrb	r3, [r3, #1]
 8009de4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009de6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009dec:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	78db      	ldrb	r3, [r3, #3]
 8009df2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009df4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dfc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8009dfe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009e04:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009e16:	4313      	orrs	r3, r2
 8009e18:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	22ca      	movs	r2, #202	@ 0xca
 8009e20:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2253      	movs	r2, #83	@ 0x53
 8009e28:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e32:	d148      	bne.n	8009ec6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	689a      	ldr	r2, [r3, #8]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e42:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009e52:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009e64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e66:	f7f9 fb7b 	bl	8003560 <HAL_GetTick>
 8009e6a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009e6c:	e013      	b.n	8009e96 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e6e:	f7f9 fb77 	bl	8003560 <HAL_GetTick>
 8009e72:	4602      	mov	r2, r0
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e7c:	d90b      	bls.n	8009e96 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	22ff      	movs	r2, #255	@ 0xff
 8009e84:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2203      	movs	r2, #3
 8009e8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e06a      	b.n	8009f6c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0e4      	beq.n	8009e6e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	69fa      	ldr	r2, [r7, #28]
 8009eaa:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689a      	ldr	r2, [r3, #8]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ec2:	609a      	str	r2, [r3, #8]
 8009ec4:	e047      	b.n	8009f56 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689a      	ldr	r2, [r3, #8]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009ed4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ee4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009ef6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ef8:	f7f9 fb32 	bl	8003560 <HAL_GetTick>
 8009efc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009efe:	e013      	b.n	8009f28 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f00:	f7f9 fb2e 	bl	8003560 <HAL_GetTick>
 8009f04:	4602      	mov	r2, r0
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f0e:	d90b      	bls.n	8009f28 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	22ff      	movs	r2, #255	@ 0xff
 8009f16:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2203      	movs	r2, #3
 8009f1c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e021      	b.n	8009f6c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0e4      	beq.n	8009f00 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	69fa      	ldr	r2, [r7, #28]
 8009f3c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	689a      	ldr	r2, [r3, #8]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f54:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	22ff      	movs	r2, #255	@ 0xff
 8009f5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2201      	movs	r2, #1
 8009f62:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3724      	adds	r7, #36	@ 0x24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd90      	pop	{r4, r7, pc}

08009f74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a0d      	ldr	r2, [pc, #52]	@ (8009fbc <HAL_RTC_WaitForSynchro+0x48>)
 8009f86:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f88:	f7f9 faea 	bl	8003560 <HAL_GetTick>
 8009f8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f8e:	e009      	b.n	8009fa4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f90:	f7f9 fae6 	bl	8003560 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f9e:	d901      	bls.n	8009fa4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e007      	b.n	8009fb4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	f003 0320 	and.w	r3, r3, #32
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d0ee      	beq.n	8009f90 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	0001ff5f 	.word	0x0001ff5f

08009fc0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d122      	bne.n	800a024 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009fec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009fee:	f7f9 fab7 	bl	8003560 <HAL_GetTick>
 8009ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009ff4:	e00c      	b.n	800a010 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009ff6:	f7f9 fab3 	bl	8003560 <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a004:	d904      	bls.n	800a010 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2204      	movs	r2, #4
 800a00a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a00c:	2301      	movs	r3, #1
 800a00e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d102      	bne.n	800a024 <RTC_EnterInitMode+0x64>
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d1e8      	bne.n	8009ff6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a024:	7bfb      	ldrb	r3, [r7, #15]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a048:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f003 0320 	and.w	r3, r3, #32
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7ff ff8b 	bl	8009f74 <HAL_RTC_WaitForSynchro>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2204      	movs	r2, #4
 800a068:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a086:	e005      	b.n	800a094 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3301      	adds	r3, #1
 800a08c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	3b0a      	subs	r3, #10
 800a092:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	2b09      	cmp	r3, #9
 800a098:	d8f6      	bhi.n	800a088 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	011b      	lsls	r3, r3, #4
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	b2db      	uxtb	r3, r3
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3714      	adds	r7, #20
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b087      	sub	sp, #28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	7f1b      	ldrb	r3, [r3, #28]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d101      	bne.n	800a0d0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e050      	b.n	800a172 <HAL_RTCEx_SetTimeStamp+0xbe>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2202      	movs	r2, #2
 800a0da:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f022 0206 	bic.w	r2, r2, #6
 800a0ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	689a      	ldr	r2, [r3, #8]
 800a102:	4b1f      	ldr	r3, [pc, #124]	@ (800a180 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a104:	4013      	ands	r3, r2
 800a106:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a108:	697a      	ldr	r2, [r7, #20]
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	22ca      	movs	r2, #202	@ 0xca
 800a116:	625a      	str	r2, [r3, #36]	@ 0x24
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2253      	movs	r2, #83	@ 0x53
 800a11e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800a138:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	b2da      	uxtb	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800a14a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689a      	ldr	r2, [r3, #8]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a15a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	22ff      	movs	r2, #255	@ 0xff
 800a162:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2201      	movs	r2, #1
 800a168:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	371c      	adds	r7, #28
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	fffff7f7 	.word	0xfffff7f7

0800a184 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e156      	b.n	800a450 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d106      	bne.n	800a1bc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7f8 f8ea 	bl	8002390 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f95b 	bl	800a480 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d00c      	beq.n	800a1ec <HAL_SAI_Init+0x68>
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d80d      	bhi.n	800a1f2 <HAL_SAI_Init+0x6e>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <HAL_SAI_Init+0x5c>
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d003      	beq.n	800a1e6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a1de:	e008      	b.n	800a1f2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61fb      	str	r3, [r7, #28]
      break;
 800a1e4:	e006      	b.n	800a1f4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a1e6:	2310      	movs	r3, #16
 800a1e8:	61fb      	str	r3, [r7, #28]
      break;
 800a1ea:	e003      	b.n	800a1f4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a1ec:	2320      	movs	r3, #32
 800a1ee:	61fb      	str	r3, [r7, #28]
      break;
 800a1f0:	e000      	b.n	800a1f4 <HAL_SAI_Init+0x70>
      break;
 800a1f2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	2b03      	cmp	r3, #3
 800a1fa:	d81e      	bhi.n	800a23a <HAL_SAI_Init+0xb6>
 800a1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a204 <HAL_SAI_Init+0x80>)
 800a1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a202:	bf00      	nop
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a21b 	.word	0x0800a21b
 800a20c:	0800a223 	.word	0x0800a223
 800a210:	0800a22b 	.word	0x0800a22b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	617b      	str	r3, [r7, #20]
    }
    break;
 800a218:	e010      	b.n	800a23c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a21a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a21e:	617b      	str	r3, [r7, #20]
    }
    break;
 800a220:	e00c      	b.n	800a23c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a222:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a226:	617b      	str	r3, [r7, #20]
    }
    break;
 800a228:	e008      	b.n	800a23c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a22a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a22e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	f043 0301 	orr.w	r3, r3, #1
 800a236:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a238:	e000      	b.n	800a23c <HAL_SAI_Init+0xb8>
    default:
      break;
 800a23a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a85      	ldr	r2, [pc, #532]	@ (800a458 <HAL_SAI_Init+0x2d4>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d004      	beq.n	800a250 <HAL_SAI_Init+0xcc>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a84      	ldr	r2, [pc, #528]	@ (800a45c <HAL_SAI_Init+0x2d8>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d103      	bne.n	800a258 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800a250:	4a83      	ldr	r2, [pc, #524]	@ (800a460 <HAL_SAI_Init+0x2dc>)
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	e002      	b.n	800a25e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a258:	4a82      	ldr	r2, [pc, #520]	@ (800a464 <HAL_SAI_Init+0x2e0>)
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	69db      	ldr	r3, [r3, #28]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d04c      	beq.n	800a300 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a7a      	ldr	r2, [pc, #488]	@ (800a458 <HAL_SAI_Init+0x2d4>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d004      	beq.n	800a27e <HAL_SAI_Init+0xfa>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a78      	ldr	r2, [pc, #480]	@ (800a45c <HAL_SAI_Init+0x2d8>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d104      	bne.n	800a288 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a27e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800a282:	f7ff fa6d 	bl	8009760 <HAL_RCCEx_GetPeriphCLKFreq>
 800a286:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a76      	ldr	r2, [pc, #472]	@ (800a468 <HAL_SAI_Init+0x2e4>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d004      	beq.n	800a29c <HAL_SAI_Init+0x118>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a75      	ldr	r2, [pc, #468]	@ (800a46c <HAL_SAI_Init+0x2e8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d104      	bne.n	800a2a6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a29c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a2a0:	f7ff fa5e 	bl	8009760 <HAL_RCCEx_GetPeriphCLKFreq>
 800a2a4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	005b      	lsls	r3, r3, #1
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	025b      	lsls	r3, r3, #9
 800a2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2bc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	4a6b      	ldr	r2, [pc, #428]	@ (800a470 <HAL_SAI_Init+0x2ec>)
 800a2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c6:	08da      	lsrs	r2, r3, #3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a2cc:	68f9      	ldr	r1, [r7, #12]
 800a2ce:	4b68      	ldr	r3, [pc, #416]	@ (800a470 <HAL_SAI_Init+0x2ec>)
 800a2d0:	fba3 2301 	umull	r2, r3, r3, r1
 800a2d4:	08da      	lsrs	r2, r3, #3
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	1aca      	subs	r2, r1, r3
 800a2e0:	2a08      	cmp	r2, #8
 800a2e2:	d904      	bls.n	800a2ee <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	d104      	bne.n	800a300 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	085a      	lsrs	r2, r3, #1
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d003      	beq.n	800a310 <HAL_SAI_Init+0x18c>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d109      	bne.n	800a324 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a314:	2b01      	cmp	r3, #1
 800a316:	d101      	bne.n	800a31c <HAL_SAI_Init+0x198>
 800a318:	2300      	movs	r3, #0
 800a31a:	e001      	b.n	800a320 <HAL_SAI_Init+0x19c>
 800a31c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a320:	61bb      	str	r3, [r7, #24]
 800a322:	e008      	b.n	800a336 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d102      	bne.n	800a332 <HAL_SAI_Init+0x1ae>
 800a32c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a330:	e000      	b.n	800a334 <HAL_SAI_Init+0x1b0>
 800a332:	2300      	movs	r3, #0
 800a334:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	6819      	ldr	r1, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	4b4c      	ldr	r3, [pc, #304]	@ (800a474 <HAL_SAI_Init+0x2f0>)
 800a342:	400b      	ands	r3, r1
 800a344:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6819      	ldr	r1, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a354:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a35a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a360:	431a      	orrs	r2, r3
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800a36e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a37a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a1b      	ldr	r3, [r3, #32]
 800a380:	051b      	lsls	r3, r3, #20
 800a382:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	430a      	orrs	r2, r1
 800a38a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6859      	ldr	r1, [r3, #4]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	4b38      	ldr	r3, [pc, #224]	@ (800a478 <HAL_SAI_Init+0x2f4>)
 800a398:	400b      	ands	r3, r1
 800a39a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6859      	ldr	r1, [r3, #4]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b0:	431a      	orrs	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6899      	ldr	r1, [r3, #8]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	4b2d      	ldr	r3, [pc, #180]	@ (800a47c <HAL_SAI_Init+0x2f8>)
 800a3c6:	400b      	ands	r3, r1
 800a3c8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	6899      	ldr	r1, [r3, #8]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a3da:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800a3e0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800a3e6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a3f0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68d9      	ldr	r1, [r3, #12]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800a408:	400b      	ands	r3, r1
 800a40a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68d9      	ldr	r1, [r3, #12]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a41a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a420:	041b      	lsls	r3, r3, #16
 800a422:	431a      	orrs	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a428:	3b01      	subs	r3, #1
 800a42a:	021b      	lsls	r3, r3, #8
 800a42c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3720      	adds	r7, #32
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	40015804 	.word	0x40015804
 800a45c:	40015824 	.word	0x40015824
 800a460:	40015800 	.word	0x40015800
 800a464:	40015c00 	.word	0x40015c00
 800a468:	40015c04 	.word	0x40015c04
 800a46c:	40015c24 	.word	0x40015c24
 800a470:	cccccccd 	.word	0xcccccccd
 800a474:	ff05c010 	.word	0xff05c010
 800a478:	ffff1ff0 	.word	0xffff1ff0
 800a47c:	fff88000 	.word	0xfff88000

0800a480 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a488:	4b17      	ldr	r3, [pc, #92]	@ (800a4e8 <SAI_Disable+0x68>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a17      	ldr	r2, [pc, #92]	@ (800a4ec <SAI_Disable+0x6c>)
 800a48e:	fba2 2303 	umull	r2, r3, r2, r3
 800a492:	0b1b      	lsrs	r3, r3, #12
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a4aa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	1e5a      	subs	r2, r3, #1
 800a4b0:	60fa      	str	r2, [r7, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10a      	bne.n	800a4cc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	72fb      	strb	r3, [r7, #11]
      break;
 800a4ca:	e006      	b.n	800a4da <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e8      	bne.n	800a4ac <SAI_Disable+0x2c>

  return status;
 800a4da:	7afb      	ldrb	r3, [r7, #11]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	20000000 	.word	0x20000000
 800a4ec:	95cbec1b 	.word	0x95cbec1b

0800a4f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e022      	b.n	800a548 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d105      	bne.n	800a51a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7f7 ffc7 	bl	80024a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2203      	movs	r2, #3
 800a51e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f814 	bl	800a550 <HAL_SD_InitCard>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e00a      	b.n	800a548 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a550:	b5b0      	push	{r4, r5, r7, lr}
 800a552:	b08e      	sub	sp, #56	@ 0x38
 800a554:	af04      	add	r7, sp, #16
 800a556:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a558:	2300      	movs	r3, #0
 800a55a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a55c:	2300      	movs	r3, #0
 800a55e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a560:	2300      	movs	r3, #0
 800a562:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a564:	2300      	movs	r3, #0
 800a566:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a568:	2300      	movs	r3, #0
 800a56a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a56c:	2376      	movs	r3, #118	@ 0x76
 800a56e:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681d      	ldr	r5, [r3, #0]
 800a574:	466c      	mov	r4, sp
 800a576:	f107 0318 	add.w	r3, r7, #24
 800a57a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a57e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a582:	f107 030c 	add.w	r3, r7, #12
 800a586:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a588:	4628      	mov	r0, r5
 800a58a:	f003 f84d 	bl	800d628 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a59c:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f003 f879 	bl	800d69a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a5b6:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a5b8:	2002      	movs	r0, #2
 800a5ba:	f7f8 ffdd 	bl	8003578 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fe10 	bl	800b1e4 <SD_PowerON>
 800a5c4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00b      	beq.n	800a5e4 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5da:	431a      	orrs	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e02e      	b.n	800a642 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fd2f 	bl	800b048 <SD_InitCard>
 800a5ea:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00b      	beq.n	800a60a <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a600:	431a      	orrs	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e01b      	b.n	800a642 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a612:	4618      	mov	r0, r3
 800a614:	f003 f8d4 	bl	800d7c0 <SDMMC_CmdBlockLength>
 800a618:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800a61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00f      	beq.n	800a640 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a09      	ldr	r2, [pc, #36]	@ (800a64c <HAL_SD_InitCard+0xfc>)
 800a626:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62e:	431a      	orrs	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e000      	b.n	800a642 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3728      	adds	r7, #40	@ 0x28
 800a646:	46bd      	mov	sp, r7
 800a648:	bdb0      	pop	{r4, r5, r7, pc}
 800a64a:	bf00      	nop
 800a64c:	004005ff 	.word	0x004005ff

0800a650 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08c      	sub	sp, #48	@ 0x30
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d107      	bne.n	800a678 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a66c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e0c3      	b.n	800a800 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b01      	cmp	r3, #1
 800a682:	f040 80bc 	bne.w	800a7fe <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a68c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	441a      	add	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a696:	429a      	cmp	r2, r3
 800a698:	d907      	bls.n	800a6aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a69e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e0aa      	b.n	800a800 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2203      	movs	r2, #3
 800a6ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a6c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ce:	4a4e      	ldr	r2, [pc, #312]	@ (800a808 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a6d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6d6:	4a4d      	ldr	r2, [pc, #308]	@ (800a80c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a6d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6de:	2200      	movs	r2, #0
 800a6e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	430a      	orrs	r2, r1
 800a704:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3380      	adds	r3, #128	@ 0x80
 800a710:	4619      	mov	r1, r3
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	025b      	lsls	r3, r3, #9
 800a718:	089b      	lsrs	r3, r3, #2
 800a71a:	f7f9 fc37 	bl	8003f8c <HAL_DMA_Start_IT>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d017      	beq.n	800a754 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800a732:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a35      	ldr	r2, [pc, #212]	@ (800a810 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a73a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a740:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e055      	b.n	800a800 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f042 0208 	orr.w	r2, r2, #8
 800a762:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d002      	beq.n	800a772 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76e:	025b      	lsls	r3, r3, #9
 800a770:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a772:	f04f 33ff 	mov.w	r3, #4294967295
 800a776:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	025b      	lsls	r3, r3, #9
 800a77c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a77e:	2390      	movs	r3, #144	@ 0x90
 800a780:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a782:	2302      	movs	r3, #2
 800a784:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a786:	2300      	movs	r3, #0
 800a788:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a78a:	2301      	movs	r3, #1
 800a78c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f107 0210 	add.w	r2, r7, #16
 800a796:	4611      	mov	r1, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f002 ffe5 	bl	800d768 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d90a      	bls.n	800a7ba <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2282      	movs	r2, #130	@ 0x82
 800a7a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f003 f849 	bl	800d848 <SDMMC_CmdReadMultiBlock>
 800a7b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a7b8:	e009      	b.n	800a7ce <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2281      	movs	r2, #129	@ 0x81
 800a7be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f003 f81c 	bl	800d804 <SDMMC_CmdReadSingleBlock>
 800a7cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d012      	beq.n	800a7fa <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a0d      	ldr	r2, [pc, #52]	@ (800a810 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a7da:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e002      	b.n	800a800 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	e000      	b.n	800a800 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a7fe:	2302      	movs	r3, #2
  }
}
 800a800:	4618      	mov	r0, r3
 800a802:	3730      	adds	r7, #48	@ 0x30
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	0800af33 	.word	0x0800af33
 800a80c:	0800afa5 	.word	0x0800afa5
 800a810:	004005ff 	.word	0x004005ff

0800a814 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08c      	sub	sp, #48	@ 0x30
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d107      	bne.n	800a83c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a830:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e0c6      	b.n	800a9ca <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b01      	cmp	r3, #1
 800a846:	f040 80bf 	bne.w	800a9c8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a850:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	441a      	add	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d907      	bls.n	800a86e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a862:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e0ad      	b.n	800a9ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2203      	movs	r2, #3
 800a872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2200      	movs	r2, #0
 800a87c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f042 021a 	orr.w	r2, r2, #26
 800a88c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a892:	4a50      	ldr	r2, [pc, #320]	@ (800a9d4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a894:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a89a:	4a4f      	ldr	r2, [pc, #316]	@ (800a9d8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a89c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d002      	beq.n	800a8b4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b0:	025b      	lsls	r3, r3, #9
 800a8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d90a      	bls.n	800a8d0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	22a0      	movs	r2, #160	@ 0xa0
 800a8be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f003 f802 	bl	800d8d0 <SDMMC_CmdWriteMultiBlock>
 800a8cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a8ce:	e009      	b.n	800a8e4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2290      	movs	r2, #144	@ 0x90
 800a8d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f002 ffd5 	bl	800d88c <SDMMC_CmdWriteSingleBlock>
 800a8e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d012      	beq.n	800a910 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a3b      	ldr	r2, [pc, #236]	@ (800a9dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a8f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f8:	431a      	orrs	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2200      	movs	r2, #0
 800a90a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e05c      	b.n	800a9ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 0208 	orr.w	r2, r2, #8
 800a91e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a924:	2240      	movs	r2, #64	@ 0x40
 800a926:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a938:	689a      	ldr	r2, [r3, #8]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	430a      	orrs	r2, r1
 800a942:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3380      	adds	r3, #128	@ 0x80
 800a950:	461a      	mov	r2, r3
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	025b      	lsls	r3, r3, #9
 800a956:	089b      	lsrs	r3, r3, #2
 800a958:	f7f9 fb18 	bl	8003f8c <HAL_DMA_Start_IT>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d01a      	beq.n	800a998 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 021a 	bic.w	r2, r2, #26
 800a970:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a19      	ldr	r2, [pc, #100]	@ (800a9dc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a978:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a97e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	e018      	b.n	800a9ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a998:	f04f 33ff 	mov.w	r3, #4294967295
 800a99c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	025b      	lsls	r3, r3, #9
 800a9a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a9a4:	2390      	movs	r3, #144	@ 0x90
 800a9a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f107 0210 	add.w	r2, r7, #16
 800a9bc:	4611      	mov	r1, r2
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f002 fed2 	bl	800d768 <SDMMC_ConfigData>

      return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e000      	b.n	800a9ca <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a9c8:	2302      	movs	r3, #2
  }
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3730      	adds	r7, #48	@ 0x30
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	0800af09 	.word	0x0800af09
 800a9d8:	0800afa5 	.word	0x0800afa5
 800a9dc:	004005ff 	.word	0x004005ff

0800a9e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa02:	0f9b      	lsrs	r3, r3, #30
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa0e:	0e9b      	lsrs	r3, r3, #26
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	f003 030f 	and.w	r3, r3, #15
 800aa16:	b2da      	uxtb	r2, r3
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa20:	0e1b      	lsrs	r3, r3, #24
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f003 0303 	and.w	r3, r3, #3
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa32:	0c1b      	lsrs	r3, r3, #16
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa3e:	0a1b      	lsrs	r3, r3, #8
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa54:	0d1b      	lsrs	r3, r3, #20
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa60:	0c1b      	lsrs	r3, r3, #16
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 030f 	and.w	r3, r3, #15
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa72:	0bdb      	lsrs	r3, r3, #15
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa84:	0b9b      	lsrs	r3, r3, #14
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa96:	0b5b      	lsrs	r3, r3, #13
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aaa8:	0b1b      	lsrs	r3, r3, #12
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	2200      	movs	r2, #0
 800aaba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d163      	bne.n	800ab8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aac8:	009a      	lsls	r2, r3, #2
 800aaca:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aace:	4013      	ands	r3, r2
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800aad4:	0f92      	lsrs	r2, r2, #30
 800aad6:	431a      	orrs	r2, r3
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aae0:	0edb      	lsrs	r3, r3, #27
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	f003 0307 	and.w	r3, r3, #7
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaf2:	0e1b      	lsrs	r3, r3, #24
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	f003 0307 	and.w	r3, r3, #7
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab04:	0d5b      	lsrs	r3, r3, #21
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab16:	0c9b      	lsrs	r3, r3, #18
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab28:	0bdb      	lsrs	r3, r3, #15
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	f003 0307 	and.w	r3, r3, #7
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	1c5a      	adds	r2, r3, #1
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	7e1b      	ldrb	r3, [r3, #24]
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	f003 0307 	and.w	r3, r3, #7
 800ab4a:	3302      	adds	r3, #2
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ab56:	fb03 f202 	mul.w	r2, r3, r2
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	7a1b      	ldrb	r3, [r3, #8]
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	f003 030f 	and.w	r3, r3, #15
 800ab68:	2201      	movs	r2, #1
 800ab6a:	409a      	lsls	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800ab78:	0a52      	lsrs	r2, r2, #9
 800ab7a:	fb03 f202 	mul.w	r2, r3, r2
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab88:	661a      	str	r2, [r3, #96]	@ 0x60
 800ab8a:	e031      	b.n	800abf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d11d      	bne.n	800abd0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab98:	041b      	lsls	r3, r3, #16
 800ab9a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aba2:	0c1b      	lsrs	r3, r3, #16
 800aba4:	431a      	orrs	r2, r3
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	3301      	adds	r3, #1
 800abb0:	029a      	lsls	r2, r3, #10
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abc4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	661a      	str	r2, [r3, #96]	@ 0x60
 800abce:	e00f      	b.n	800abf0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a58      	ldr	r2, [pc, #352]	@ (800ad38 <HAL_SD_GetCardCSD+0x344>)
 800abd6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abdc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e09d      	b.n	800ad2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abf4:	0b9b      	lsrs	r3, r3, #14
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	f003 0301 	and.w	r3, r3, #1
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac06:	09db      	lsrs	r3, r3, #7
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac28:	0fdb      	lsrs	r3, r3, #31
 800ac2a:	b2da      	uxtb	r2, r3
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac34:	0f5b      	lsrs	r3, r3, #29
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	f003 0303 	and.w	r3, r3, #3
 800ac3c:	b2da      	uxtb	r2, r3
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac46:	0e9b      	lsrs	r3, r3, #26
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	f003 0307 	and.w	r3, r3, #7
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac58:	0d9b      	lsrs	r3, r3, #22
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	f003 030f 	and.w	r3, r3, #15
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac6a:	0d5b      	lsrs	r3, r3, #21
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	f003 0301 	and.w	r3, r3, #1
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac86:	0c1b      	lsrs	r3, r3, #16
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	f003 0301 	and.w	r3, r3, #1
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac9a:	0bdb      	lsrs	r3, r3, #15
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acae:	0b9b      	lsrs	r3, r3, #14
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acc2:	0b5b      	lsrs	r3, r3, #13
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	b2da      	uxtb	r2, r3
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acd6:	0b1b      	lsrs	r3, r3, #12
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acea:	0a9b      	lsrs	r3, r3, #10
 800acec:	b2db      	uxtb	r3, r3
 800acee:	f003 0303 	and.w	r3, r3, #3
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acfe:	0a1b      	lsrs	r3, r3, #8
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	f003 0303 	and.w	r3, r3, #3
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad12:	085b      	lsrs	r3, r3, #1
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr
 800ad38:	004005ff 	.word	0x004005ff

0800ad3c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ad94:	b5b0      	push	{r4, r5, r7, lr}
 800ad96:	b08e      	sub	sp, #56	@ 0x38
 800ad98:	af04      	add	r7, sp, #16
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2203      	movs	r2, #3
 800ada8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adb0:	2b03      	cmp	r3, #3
 800adb2:	d02e      	beq.n	800ae12 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adba:	d106      	bne.n	800adca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	639a      	str	r2, [r3, #56]	@ 0x38
 800adc8:	e029      	b.n	800ae1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800add0:	d10a      	bne.n	800ade8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fabc 	bl	800b350 <SD_WideBus_Enable>
 800add8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	431a      	orrs	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	639a      	str	r2, [r3, #56]	@ 0x38
 800ade6:	e01a      	b.n	800ae1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10a      	bne.n	800ae04 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 faf9 	bl	800b3e6 <SD_WideBus_Disable>
 800adf4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	431a      	orrs	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	639a      	str	r2, [r3, #56]	@ 0x38
 800ae02:	e00c      	b.n	800ae1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae08:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ae10:	e005      	b.n	800ae1e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae16:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00b      	beq.n	800ae3e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a26      	ldr	r2, [pc, #152]	@ (800aec4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ae2c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae3c:	e01f      	b.n	800ae7e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	699b      	ldr	r3, [r3, #24]
 800ae5e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681d      	ldr	r5, [r3, #0]
 800ae64:	466c      	mov	r4, sp
 800ae66:	f107 0314 	add.w	r3, r7, #20
 800ae6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae72:	f107 0308 	add.w	r3, r7, #8
 800ae76:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae78:	4628      	mov	r0, r5
 800ae7a:	f002 fbd5 	bl	800d628 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ae86:	4618      	mov	r0, r3
 800ae88:	f002 fc9a 	bl	800d7c0 <SDMMC_CmdBlockLength>
 800ae8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00c      	beq.n	800aeae <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a0a      	ldr	r2, [pc, #40]	@ (800aec4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ae9a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	431a      	orrs	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800aeb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3728      	adds	r7, #40	@ 0x28
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bdb0      	pop	{r4, r5, r7, pc}
 800aec2:	bf00      	nop
 800aec4:	004005ff 	.word	0x004005ff

0800aec8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aed4:	f107 030c 	add.w	r3, r7, #12
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fa10 	bl	800b300 <SD_SendStatus>
 800aee0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d005      	beq.n	800aef4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	431a      	orrs	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	0a5b      	lsrs	r3, r3, #9
 800aef8:	f003 030f 	and.w	r3, r3, #15
 800aefc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800aefe:	693b      	ldr	r3, [r7, #16]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af14:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af24:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800af26:	bf00      	nop
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af3e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af44:	2b82      	cmp	r3, #130	@ 0x82
 800af46:	d111      	bne.n	800af6c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f002 fce1 	bl	800d914 <SDMMC_CmdStopTransfer>
 800af52:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d008      	beq.n	800af6c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	431a      	orrs	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f7ff fd3a 	bl	800a9e0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f022 0208 	bic.w	r2, r2, #8
 800af7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f240 523a 	movw	r2, #1338	@ 0x53a
 800af84:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f004 fa95 	bl	800f4c4 <HAL_SD_RxCpltCallback>
#endif
}
 800af9a:	bf00      	nop
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7f9 f84a 	bl	800404c <HAL_DMA_GetError>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b02      	cmp	r3, #2
 800afbc:	d03e      	beq.n	800b03c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afc4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afcc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d002      	beq.n	800afda <SD_DMAError+0x36>
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d12d      	bne.n	800b036 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a19      	ldr	r2, [pc, #100]	@ (800b044 <SD_DMAError+0xa0>)
 800afe0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800aff0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aff6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800affe:	6978      	ldr	r0, [r7, #20]
 800b000:	f7ff ff62 	bl	800aec8 <HAL_SD_GetCardState>
 800b004:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b06      	cmp	r3, #6
 800b00a:	d002      	beq.n	800b012 <SD_DMAError+0x6e>
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	2b05      	cmp	r3, #5
 800b010:	d10a      	bne.n	800b028 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4618      	mov	r0, r3
 800b018:	f002 fc7c 	bl	800d914 <SDMMC_CmdStopTransfer>
 800b01c:	4602      	mov	r2, r0
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b022:	431a      	orrs	r2, r3
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	2200      	movs	r2, #0
 800b034:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b036:	6978      	ldr	r0, [r7, #20]
 800b038:	f7ff fcd2 	bl	800a9e0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b03c:	bf00      	nop
 800b03e:	3718      	adds	r7, #24
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	004005ff 	.word	0x004005ff

0800b048 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b048:	b5b0      	push	{r4, r5, r7, lr}
 800b04a:	b094      	sub	sp, #80	@ 0x50
 800b04c:	af04      	add	r7, sp, #16
 800b04e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b050:	2301      	movs	r3, #1
 800b052:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4618      	mov	r0, r3
 800b05a:	f002 fb2c 	bl	800d6b6 <SDMMC_GetPowerState>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d102      	bne.n	800b06a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b064:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b068:	e0b8      	b.n	800b1dc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b06e:	2b03      	cmp	r3, #3
 800b070:	d02f      	beq.n	800b0d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4618      	mov	r0, r3
 800b078:	f002 fd57 	bl	800db2a <SDMMC_CmdSendCID>
 800b07c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b07e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <SD_InitCard+0x40>
    {
      return errorstate;
 800b084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b086:	e0a9      	b.n	800b1dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2100      	movs	r1, #0
 800b08e:	4618      	mov	r0, r3
 800b090:	f002 fb57 	bl	800d742 <SDMMC_GetResponse>
 800b094:	4602      	mov	r2, r0
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2104      	movs	r1, #4
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f002 fb4e 	bl	800d742 <SDMMC_GetResponse>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2108      	movs	r1, #8
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f002 fb45 	bl	800d742 <SDMMC_GetResponse>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	210c      	movs	r1, #12
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f002 fb3c 	bl	800d742 <SDMMC_GetResponse>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	d00d      	beq.n	800b0f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f107 020e 	add.w	r2, r7, #14
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f002 fd5d 	bl	800dba4 <SDMMC_CmdSetRelAdd>
 800b0ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d001      	beq.n	800b0f6 <SD_InitCard+0xae>
    {
      return errorstate;
 800b0f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0f4:	e072      	b.n	800b1dc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d036      	beq.n	800b16c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b0fe:	89fb      	ldrh	r3, [r7, #14]
 800b100:	461a      	mov	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b10e:	041b      	lsls	r3, r3, #16
 800b110:	4619      	mov	r1, r3
 800b112:	4610      	mov	r0, r2
 800b114:	f002 fd27 	bl	800db66 <SDMMC_CmdSendCSD>
 800b118:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b11a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b122:	e05b      	b.n	800b1dc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2100      	movs	r1, #0
 800b12a:	4618      	mov	r0, r3
 800b12c:	f002 fb09 	bl	800d742 <SDMMC_GetResponse>
 800b130:	4602      	mov	r2, r0
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2104      	movs	r1, #4
 800b13c:	4618      	mov	r0, r3
 800b13e:	f002 fb00 	bl	800d742 <SDMMC_GetResponse>
 800b142:	4602      	mov	r2, r0
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2108      	movs	r1, #8
 800b14e:	4618      	mov	r0, r3
 800b150:	f002 faf7 	bl	800d742 <SDMMC_GetResponse>
 800b154:	4602      	mov	r2, r0
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	210c      	movs	r1, #12
 800b160:	4618      	mov	r0, r3
 800b162:	f002 faee 	bl	800d742 <SDMMC_GetResponse>
 800b166:	4602      	mov	r2, r0
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2104      	movs	r1, #4
 800b172:	4618      	mov	r0, r3
 800b174:	f002 fae5 	bl	800d742 <SDMMC_GetResponse>
 800b178:	4603      	mov	r3, r0
 800b17a:	0d1a      	lsrs	r2, r3, #20
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b180:	f107 0310 	add.w	r3, r7, #16
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff fc34 	bl	800a9f4 <HAL_SD_GetCardCSD>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d002      	beq.n	800b198 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b192:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b196:	e021      	b.n	800b1dc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6819      	ldr	r1, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1a0:	041b      	lsls	r3, r3, #16
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	461c      	mov	r4, r3
 800b1a6:	4615      	mov	r5, r2
 800b1a8:	4622      	mov	r2, r4
 800b1aa:	462b      	mov	r3, r5
 800b1ac:	4608      	mov	r0, r1
 800b1ae:	f002 fbd3 	bl	800d958 <SDMMC_CmdSelDesel>
 800b1b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <SD_InitCard+0x176>
  {
    return errorstate;
 800b1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1bc:	e00e      	b.n	800b1dc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681d      	ldr	r5, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	466c      	mov	r4, sp
 800b1c6:	f103 0210 	add.w	r2, r3, #16
 800b1ca:	ca07      	ldmia	r2, {r0, r1, r2}
 800b1cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	f002 fa27 	bl	800d628 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3740      	adds	r7, #64	@ 0x40
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bdb0      	pop	{r4, r5, r7, pc}

0800b1e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f002 fbce 	bl	800d99e <SDMMC_CmdGoIdleState>
 800b202:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <SD_PowerON+0x2a>
  {
    return errorstate;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	e072      	b.n	800b2f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4618      	mov	r0, r3
 800b214:	f002 fbe1 	bl	800d9da <SDMMC_CmdOperCond>
 800b218:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00d      	beq.n	800b23c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f002 fbb7 	bl	800d99e <SDMMC_CmdGoIdleState>
 800b230:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d004      	beq.n	800b242 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	e05b      	b.n	800b2f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b246:	2b01      	cmp	r3, #1
 800b248:	d137      	bne.n	800b2ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2100      	movs	r1, #0
 800b250:	4618      	mov	r0, r3
 800b252:	f002 fbe1 	bl	800da18 <SDMMC_CmdAppCommand>
 800b256:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d02d      	beq.n	800b2ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b25e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b262:	e047      	b.n	800b2f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2100      	movs	r1, #0
 800b26a:	4618      	mov	r0, r3
 800b26c:	f002 fbd4 	bl	800da18 <SDMMC_CmdAppCommand>
 800b270:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <SD_PowerON+0x98>
    {
      return errorstate;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	e03b      	b.n	800b2f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	491e      	ldr	r1, [pc, #120]	@ (800b2fc <SD_PowerON+0x118>)
 800b282:	4618      	mov	r0, r3
 800b284:	f002 fbea 	bl	800da5c <SDMMC_CmdAppOperCommand>
 800b288:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b290:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b294:	e02e      	b.n	800b2f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2100      	movs	r1, #0
 800b29c:	4618      	mov	r0, r3
 800b29e:	f002 fa50 	bl	800d742 <SDMMC_GetResponse>
 800b2a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	0fdb      	lsrs	r3, r3, #31
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d101      	bne.n	800b2b0 <SD_PowerON+0xcc>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e000      	b.n	800b2b2 <SD_PowerON+0xce>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	613b      	str	r3, [r7, #16]

    count++;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d802      	bhi.n	800b2ca <SD_PowerON+0xe6>
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d0cc      	beq.n	800b264 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d902      	bls.n	800b2da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b2d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b2d8:	e00c      	b.n	800b2f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d003      	beq.n	800b2ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	645a      	str	r2, [r3, #68]	@ 0x44
 800b2ea:	e002      	b.n	800b2f2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	c1100000 	.word	0xc1100000

0800b300 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d102      	bne.n	800b316 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b310:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b314:	e018      	b.n	800b348 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b31e:	041b      	lsls	r3, r3, #16
 800b320:	4619      	mov	r1, r3
 800b322:	4610      	mov	r0, r2
 800b324:	f002 fc5f 	bl	800dbe6 <SDMMC_CmdSendStatus>
 800b328:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	e009      	b.n	800b348 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2100      	movs	r1, #0
 800b33a:	4618      	mov	r0, r3
 800b33c:	f002 fa01 	bl	800d742 <SDMMC_GetResponse>
 800b340:	4602      	mov	r2, r0
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b358:	2300      	movs	r3, #0
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	2300      	movs	r3, #0
 800b35e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2100      	movs	r1, #0
 800b366:	4618      	mov	r0, r3
 800b368:	f002 f9eb 	bl	800d742 <SDMMC_GetResponse>
 800b36c:	4603      	mov	r3, r0
 800b36e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b372:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b376:	d102      	bne.n	800b37e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b378:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b37c:	e02f      	b.n	800b3de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b37e:	f107 030c 	add.w	r3, r7, #12
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 f879 	bl	800b47c <SD_FindSCR>
 800b38a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	e023      	b.n	800b3de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d01c      	beq.n	800b3da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3a8:	041b      	lsls	r3, r3, #16
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	f002 fb33 	bl	800da18 <SDMMC_CmdAppCommand>
 800b3b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d001      	beq.n	800b3be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	e00f      	b.n	800b3de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2102      	movs	r1, #2
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f002 fb6d 	bl	800daa4 <SDMMC_CmdBusWidth>
 800b3ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	e003      	b.n	800b3de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e001      	b.n	800b3de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b3da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b086      	sub	sp, #24
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f002 f9a0 	bl	800d742 <SDMMC_GetResponse>
 800b402:	4603      	mov	r3, r0
 800b404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b408:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b40c:	d102      	bne.n	800b414 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b40e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b412:	e02f      	b.n	800b474 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b414:	f107 030c 	add.w	r3, r7, #12
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f82e 	bl	800b47c <SD_FindSCR>
 800b420:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	e023      	b.n	800b474 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b432:	2b00      	cmp	r3, #0
 800b434:	d01c      	beq.n	800b470 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b43e:	041b      	lsls	r3, r3, #16
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f002 fae8 	bl	800da18 <SDMMC_CmdAppCommand>
 800b448:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	e00f      	b.n	800b474 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2100      	movs	r1, #0
 800b45a:	4618      	mov	r0, r3
 800b45c:	f002 fb22 	bl	800daa4 <SDMMC_CmdBusWidth>
 800b460:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d001      	beq.n	800b46c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	e003      	b.n	800b474 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	e001      	b.n	800b474 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b470:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b474:	4618      	mov	r0, r3
 800b476:	3718      	adds	r7, #24
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b08f      	sub	sp, #60	@ 0x3c
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b486:	f7f8 f86b 	bl	8003560 <HAL_GetTick>
 800b48a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b48c:	2300      	movs	r3, #0
 800b48e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b490:	2300      	movs	r3, #0
 800b492:	60bb      	str	r3, [r7, #8]
 800b494:	2300      	movs	r3, #0
 800b496:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2108      	movs	r1, #8
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f002 f98c 	bl	800d7c0 <SDMMC_CmdBlockLength>
 800b4a8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d001      	beq.n	800b4b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b2:	e0b2      	b.n	800b61a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4bc:	041b      	lsls	r3, r3, #16
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	f002 faa9 	bl	800da18 <SDMMC_CmdAppCommand>
 800b4c6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d0:	e0a3      	b.n	800b61a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b4d8:	2308      	movs	r3, #8
 800b4da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b4dc:	2330      	movs	r3, #48	@ 0x30
 800b4de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f107 0210 	add.w	r2, r7, #16
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f002 f936 	bl	800d768 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4618      	mov	r0, r3
 800b502:	f002 faf1 	bl	800dae8 <SDMMC_CmdSendSCR>
 800b506:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d02a      	beq.n	800b564 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b510:	e083      	b.n	800b61a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00f      	beq.n	800b540 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6819      	ldr	r1, [r3, #0]
 800b524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	f107 0208 	add.w	r2, r7, #8
 800b52c:	18d4      	adds	r4, r2, r3
 800b52e:	4608      	mov	r0, r1
 800b530:	f002 f8a6 	bl	800d680 <SDMMC_ReadFIFO>
 800b534:	4603      	mov	r3, r0
 800b536:	6023      	str	r3, [r4, #0]
      index++;
 800b538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b53a:	3301      	adds	r3, #1
 800b53c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b53e:	e006      	b.n	800b54e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d012      	beq.n	800b574 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b54e:	f7f8 f807 	bl	8003560 <HAL_GetTick>
 800b552:	4602      	mov	r2, r0
 800b554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55c:	d102      	bne.n	800b564 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b55e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b562:	e05a      	b.n	800b61a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b56a:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0cf      	beq.n	800b512 <SD_FindSCR+0x96>
 800b572:	e000      	b.n	800b576 <SD_FindSCR+0xfa>
      break;
 800b574:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b57c:	f003 0308 	and.w	r3, r3, #8
 800b580:	2b00      	cmp	r3, #0
 800b582:	d005      	beq.n	800b590 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2208      	movs	r2, #8
 800b58a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b58c:	2308      	movs	r3, #8
 800b58e:	e044      	b.n	800b61a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b596:	f003 0302 	and.w	r3, r3, #2
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d005      	beq.n	800b5aa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e037      	b.n	800b61a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5b0:	f003 0320 	and.w	r3, r3, #32
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d005      	beq.n	800b5c4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b5c0:	2320      	movs	r3, #32
 800b5c2:	e02a      	b.n	800b61a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b5cc:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	061a      	lsls	r2, r3, #24
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	021b      	lsls	r3, r3, #8
 800b5d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b5da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	0a1b      	lsrs	r3, r3, #8
 800b5e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b5e4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	0e1b      	lsrs	r3, r3, #24
 800b5ea:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ee:	601a      	str	r2, [r3, #0]
    scr++;
 800b5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	061a      	lsls	r2, r3, #24
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	021b      	lsls	r3, r3, #8
 800b5fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b602:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	0a1b      	lsrs	r3, r3, #8
 800b608:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b60c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	0e1b      	lsrs	r3, r3, #24
 800b612:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b616:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	373c      	adds	r7, #60	@ 0x3c
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd90      	pop	{r4, r7, pc}

0800b622 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e025      	b.n	800b682 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d106      	bne.n	800b650 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7f5 fbaa 	bl	8000da4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2202      	movs	r2, #2
 800b654:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	3304      	adds	r3, #4
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	f001 ff1a 	bl	800d49c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6818      	ldr	r0, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	461a      	mov	r2, r3
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	f001 ff6e 	bl	800d554 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
	...

0800b68c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d101      	bne.n	800b69e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e04c      	b.n	800b738 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7f6 ff8a 	bl	80025cc <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f022 0203 	bic.w	r2, r2, #3
 800b6ce:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	4b19      	ldr	r3, [pc, #100]	@ (800b740 <HAL_SPDIFRX_Init+0xb4>)
 800b6dc:	4013      	ands	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800b6e8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800b6ee:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800b6f4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800b6fa:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800b700:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800b706:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800b70c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800b712:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800b718:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	fff88407 	.word	0xfff88407

0800b744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d101      	bne.n	800b756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	e09d      	b.n	800b892 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d108      	bne.n	800b770 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b766:	d009      	beq.n	800b77c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	61da      	str	r2, [r3, #28]
 800b76e:	e005      	b.n	800b77c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d106      	bne.n	800b79c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7f6 ffba 	bl	8002710 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2202      	movs	r2, #2
 800b7a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b7b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b7bc:	d902      	bls.n	800b7c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	60fb      	str	r3, [r7, #12]
 800b7c2:	e002      	b.n	800b7ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b7c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800b7d2:	d007      	beq.n	800b7e4 <HAL_SPI_Init+0xa0>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b7dc:	d002      	beq.n	800b7e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b7f4:	431a      	orrs	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	f003 0302 	and.w	r3, r3, #2
 800b7fe:	431a      	orrs	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	695b      	ldr	r3, [r3, #20]
 800b804:	f003 0301 	and.w	r3, r3, #1
 800b808:	431a      	orrs	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b812:	431a      	orrs	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b81c:	431a      	orrs	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a1b      	ldr	r3, [r3, #32]
 800b822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b826:	ea42 0103 	orr.w	r1, r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b82e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	430a      	orrs	r2, r1
 800b838:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	0c1b      	lsrs	r3, r3, #16
 800b840:	f003 0204 	and.w	r2, r3, #4
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b848:	f003 0310 	and.w	r3, r3, #16
 800b84c:	431a      	orrs	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b852:	f003 0308 	and.w	r3, r3, #8
 800b856:	431a      	orrs	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b860:	ea42 0103 	orr.w	r1, r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	430a      	orrs	r2, r1
 800b870:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69da      	ldr	r2, [r3, #28]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b880:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b082      	sub	sp, #8
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e049      	b.n	800b940 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d106      	bne.n	800b8c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7f7 fba5 	bl	8003010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4610      	mov	r0, r2
 800b8da:	f000 fc11 	bl	800c100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b956:	b2db      	uxtb	r3, r3
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d001      	beq.n	800b960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e054      	b.n	800ba0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68da      	ldr	r2, [r3, #12]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f042 0201 	orr.w	r2, r2, #1
 800b976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a26      	ldr	r2, [pc, #152]	@ (800ba18 <HAL_TIM_Base_Start_IT+0xd0>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d022      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b98a:	d01d      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a22      	ldr	r2, [pc, #136]	@ (800ba1c <HAL_TIM_Base_Start_IT+0xd4>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d018      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a21      	ldr	r2, [pc, #132]	@ (800ba20 <HAL_TIM_Base_Start_IT+0xd8>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d013      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a1f      	ldr	r2, [pc, #124]	@ (800ba24 <HAL_TIM_Base_Start_IT+0xdc>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d00e      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a1e      	ldr	r2, [pc, #120]	@ (800ba28 <HAL_TIM_Base_Start_IT+0xe0>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d009      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a1c      	ldr	r2, [pc, #112]	@ (800ba2c <HAL_TIM_Base_Start_IT+0xe4>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d004      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x80>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a1b      	ldr	r2, [pc, #108]	@ (800ba30 <HAL_TIM_Base_Start_IT+0xe8>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d115      	bne.n	800b9f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	689a      	ldr	r2, [r3, #8]
 800b9ce:	4b19      	ldr	r3, [pc, #100]	@ (800ba34 <HAL_TIM_Base_Start_IT+0xec>)
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b06      	cmp	r3, #6
 800b9d8:	d015      	beq.n	800ba06 <HAL_TIM_Base_Start_IT+0xbe>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9e0:	d011      	beq.n	800ba06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f042 0201 	orr.w	r2, r2, #1
 800b9f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9f2:	e008      	b.n	800ba06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f042 0201 	orr.w	r2, r2, #1
 800ba02:	601a      	str	r2, [r3, #0]
 800ba04:	e000      	b.n	800ba08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	40010000 	.word	0x40010000
 800ba1c:	40000400 	.word	0x40000400
 800ba20:	40000800 	.word	0x40000800
 800ba24:	40000c00 	.word	0x40000c00
 800ba28:	40010400 	.word	0x40010400
 800ba2c:	40014000 	.word	0x40014000
 800ba30:	40001800 	.word	0x40001800
 800ba34:	00010007 	.word	0x00010007

0800ba38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d101      	bne.n	800ba4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e049      	b.n	800bade <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d106      	bne.n	800ba64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7f7 fb44 	bl	80030ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2202      	movs	r2, #2
 800ba68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3304      	adds	r3, #4
 800ba74:	4619      	mov	r1, r3
 800ba76:	4610      	mov	r0, r2
 800ba78:	f000 fb42 	bl	800c100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	f003 0302 	and.w	r3, r3, #2
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d020      	beq.n	800bb4a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f003 0302 	and.w	r3, r3, #2
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d01b      	beq.n	800bb4a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f06f 0202 	mvn.w	r2, #2
 800bb1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	f003 0303 	and.w	r3, r3, #3
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 fac7 	bl	800c0c4 <HAL_TIM_IC_CaptureCallback>
 800bb36:	e005      	b.n	800bb44 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fab9 	bl	800c0b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 faca 	bl	800c0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	f003 0304 	and.w	r3, r3, #4
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d020      	beq.n	800bb96 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f003 0304 	and.w	r3, r3, #4
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d01b      	beq.n	800bb96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f06f 0204 	mvn.w	r2, #4
 800bb66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2202      	movs	r2, #2
 800bb6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d003      	beq.n	800bb84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 faa1 	bl	800c0c4 <HAL_TIM_IC_CaptureCallback>
 800bb82:	e005      	b.n	800bb90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fa93 	bl	800c0b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 faa4 	bl	800c0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	f003 0308 	and.w	r3, r3, #8
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d020      	beq.n	800bbe2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d01b      	beq.n	800bbe2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f06f 0208 	mvn.w	r2, #8
 800bbb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2204      	movs	r2, #4
 800bbb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	f003 0303 	and.w	r3, r3, #3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d003      	beq.n	800bbd0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fa7b 	bl	800c0c4 <HAL_TIM_IC_CaptureCallback>
 800bbce:	e005      	b.n	800bbdc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fa6d 	bl	800c0b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 fa7e 	bl	800c0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	f003 0310 	and.w	r3, r3, #16
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d020      	beq.n	800bc2e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f003 0310 	and.w	r3, r3, #16
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d01b      	beq.n	800bc2e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f06f 0210 	mvn.w	r2, #16
 800bbfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2208      	movs	r2, #8
 800bc04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	69db      	ldr	r3, [r3, #28]
 800bc0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d003      	beq.n	800bc1c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fa55 	bl	800c0c4 <HAL_TIM_IC_CaptureCallback>
 800bc1a:	e005      	b.n	800bc28 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 fa47 	bl	800c0b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fa58 	bl	800c0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00c      	beq.n	800bc52 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d007      	beq.n	800bc52 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f06f 0201 	mvn.w	r2, #1
 800bc4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7f6 f951 	bl	8001ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d104      	bne.n	800bc66 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00c      	beq.n	800bc80 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d007      	beq.n	800bc80 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bc78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 fef4 	bl	800ca68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00c      	beq.n	800bca4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d007      	beq.n	800bca4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bc9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 feec 	bl	800ca7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00c      	beq.n	800bcc8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d007      	beq.n	800bcc8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bcc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fa12 	bl	800c0ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f003 0320 	and.w	r3, r3, #32
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00c      	beq.n	800bcec <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f003 0320 	and.w	r3, r3, #32
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d007      	beq.n	800bcec <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f06f 0220 	mvn.w	r2, #32
 800bce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 feb4 	bl	800ca54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcec:	bf00      	nop
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d101      	bne.n	800bd12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd0e:	2302      	movs	r3, #2
 800bd10:	e0ff      	b.n	800bf12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2201      	movs	r2, #1
 800bd16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2b14      	cmp	r3, #20
 800bd1e:	f200 80f0 	bhi.w	800bf02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd22:	a201      	add	r2, pc, #4	@ (adr r2, 800bd28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd28:	0800bd7d 	.word	0x0800bd7d
 800bd2c:	0800bf03 	.word	0x0800bf03
 800bd30:	0800bf03 	.word	0x0800bf03
 800bd34:	0800bf03 	.word	0x0800bf03
 800bd38:	0800bdbd 	.word	0x0800bdbd
 800bd3c:	0800bf03 	.word	0x0800bf03
 800bd40:	0800bf03 	.word	0x0800bf03
 800bd44:	0800bf03 	.word	0x0800bf03
 800bd48:	0800bdff 	.word	0x0800bdff
 800bd4c:	0800bf03 	.word	0x0800bf03
 800bd50:	0800bf03 	.word	0x0800bf03
 800bd54:	0800bf03 	.word	0x0800bf03
 800bd58:	0800be3f 	.word	0x0800be3f
 800bd5c:	0800bf03 	.word	0x0800bf03
 800bd60:	0800bf03 	.word	0x0800bf03
 800bd64:	0800bf03 	.word	0x0800bf03
 800bd68:	0800be81 	.word	0x0800be81
 800bd6c:	0800bf03 	.word	0x0800bf03
 800bd70:	0800bf03 	.word	0x0800bf03
 800bd74:	0800bf03 	.word	0x0800bf03
 800bd78:	0800bec1 	.word	0x0800bec1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68b9      	ldr	r1, [r7, #8]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 fa62 	bl	800c24c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	699a      	ldr	r2, [r3, #24]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f042 0208 	orr.w	r2, r2, #8
 800bd96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	699a      	ldr	r2, [r3, #24]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f022 0204 	bic.w	r2, r2, #4
 800bda6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6999      	ldr	r1, [r3, #24]
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	691a      	ldr	r2, [r3, #16]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	619a      	str	r2, [r3, #24]
      break;
 800bdba:	e0a5      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68b9      	ldr	r1, [r7, #8]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 fab4 	bl	800c330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	699a      	ldr	r2, [r3, #24]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bdd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	699a      	ldr	r2, [r3, #24]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bde6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6999      	ldr	r1, [r3, #24]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	021a      	lsls	r2, r3, #8
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	430a      	orrs	r2, r1
 800bdfa:	619a      	str	r2, [r3, #24]
      break;
 800bdfc:	e084      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	68b9      	ldr	r1, [r7, #8]
 800be04:	4618      	mov	r0, r3
 800be06:	f000 fb0b 	bl	800c420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	69da      	ldr	r2, [r3, #28]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f042 0208 	orr.w	r2, r2, #8
 800be18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	69da      	ldr	r2, [r3, #28]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f022 0204 	bic.w	r2, r2, #4
 800be28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	69d9      	ldr	r1, [r3, #28]
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	691a      	ldr	r2, [r3, #16]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	430a      	orrs	r2, r1
 800be3a:	61da      	str	r2, [r3, #28]
      break;
 800be3c:	e064      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68b9      	ldr	r1, [r7, #8]
 800be44:	4618      	mov	r0, r3
 800be46:	f000 fb61 	bl	800c50c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	69da      	ldr	r2, [r3, #28]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	69da      	ldr	r2, [r3, #28]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	69d9      	ldr	r1, [r3, #28]
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	021a      	lsls	r2, r3, #8
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	430a      	orrs	r2, r1
 800be7c:	61da      	str	r2, [r3, #28]
      break;
 800be7e:	e043      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68b9      	ldr	r1, [r7, #8]
 800be86:	4618      	mov	r0, r3
 800be88:	f000 fb98 	bl	800c5bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f042 0208 	orr.w	r2, r2, #8
 800be9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f022 0204 	bic.w	r2, r2, #4
 800beaa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	691a      	ldr	r2, [r3, #16]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	430a      	orrs	r2, r1
 800bebc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bebe:	e023      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68b9      	ldr	r1, [r7, #8]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 fbca 	bl	800c660 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800beda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800beea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	021a      	lsls	r2, r3, #8
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	430a      	orrs	r2, r1
 800befe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bf00:	e002      	b.n	800bf08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf02:	2301      	movs	r3, #1
 800bf04:	75fb      	strb	r3, [r7, #23]
      break;
 800bf06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3718      	adds	r7, #24
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop

0800bf1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d101      	bne.n	800bf38 <HAL_TIM_ConfigClockSource+0x1c>
 800bf34:	2302      	movs	r3, #2
 800bf36:	e0b4      	b.n	800c0a2 <HAL_TIM_ConfigClockSource+0x186>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2202      	movs	r2, #2
 800bf44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf50:	68ba      	ldr	r2, [r7, #8]
 800bf52:	4b56      	ldr	r3, [pc, #344]	@ (800c0ac <HAL_TIM_ConfigClockSource+0x190>)
 800bf54:	4013      	ands	r3, r2
 800bf56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf70:	d03e      	beq.n	800bff0 <HAL_TIM_ConfigClockSource+0xd4>
 800bf72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf76:	f200 8087 	bhi.w	800c088 <HAL_TIM_ConfigClockSource+0x16c>
 800bf7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf7e:	f000 8086 	beq.w	800c08e <HAL_TIM_ConfigClockSource+0x172>
 800bf82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf86:	d87f      	bhi.n	800c088 <HAL_TIM_ConfigClockSource+0x16c>
 800bf88:	2b70      	cmp	r3, #112	@ 0x70
 800bf8a:	d01a      	beq.n	800bfc2 <HAL_TIM_ConfigClockSource+0xa6>
 800bf8c:	2b70      	cmp	r3, #112	@ 0x70
 800bf8e:	d87b      	bhi.n	800c088 <HAL_TIM_ConfigClockSource+0x16c>
 800bf90:	2b60      	cmp	r3, #96	@ 0x60
 800bf92:	d050      	beq.n	800c036 <HAL_TIM_ConfigClockSource+0x11a>
 800bf94:	2b60      	cmp	r3, #96	@ 0x60
 800bf96:	d877      	bhi.n	800c088 <HAL_TIM_ConfigClockSource+0x16c>
 800bf98:	2b50      	cmp	r3, #80	@ 0x50
 800bf9a:	d03c      	beq.n	800c016 <HAL_TIM_ConfigClockSource+0xfa>
 800bf9c:	2b50      	cmp	r3, #80	@ 0x50
 800bf9e:	d873      	bhi.n	800c088 <HAL_TIM_ConfigClockSource+0x16c>
 800bfa0:	2b40      	cmp	r3, #64	@ 0x40
 800bfa2:	d058      	beq.n	800c056 <HAL_TIM_ConfigClockSource+0x13a>
 800bfa4:	2b40      	cmp	r3, #64	@ 0x40
 800bfa6:	d86f      	bhi.n	800c088 <HAL_TIM_ConfigClockSource+0x16c>
 800bfa8:	2b30      	cmp	r3, #48	@ 0x30
 800bfaa:	d064      	beq.n	800c076 <HAL_TIM_ConfigClockSource+0x15a>
 800bfac:	2b30      	cmp	r3, #48	@ 0x30
 800bfae:	d86b      	bhi.n	800c088 <HAL_TIM_ConfigClockSource+0x16c>
 800bfb0:	2b20      	cmp	r3, #32
 800bfb2:	d060      	beq.n	800c076 <HAL_TIM_ConfigClockSource+0x15a>
 800bfb4:	2b20      	cmp	r3, #32
 800bfb6:	d867      	bhi.n	800c088 <HAL_TIM_ConfigClockSource+0x16c>
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d05c      	beq.n	800c076 <HAL_TIM_ConfigClockSource+0x15a>
 800bfbc:	2b10      	cmp	r3, #16
 800bfbe:	d05a      	beq.n	800c076 <HAL_TIM_ConfigClockSource+0x15a>
 800bfc0:	e062      	b.n	800c088 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bfd2:	f000 fc13 	bl	800c7fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bfe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68ba      	ldr	r2, [r7, #8]
 800bfec:	609a      	str	r2, [r3, #8]
      break;
 800bfee:	e04f      	b.n	800c090 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c000:	f000 fbfc 	bl	800c7fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	689a      	ldr	r2, [r3, #8]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c012:	609a      	str	r2, [r3, #8]
      break;
 800c014:	e03c      	b.n	800c090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c022:	461a      	mov	r2, r3
 800c024:	f000 fb70 	bl	800c708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2150      	movs	r1, #80	@ 0x50
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 fbc9 	bl	800c7c6 <TIM_ITRx_SetConfig>
      break;
 800c034:	e02c      	b.n	800c090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c042:	461a      	mov	r2, r3
 800c044:	f000 fb8f 	bl	800c766 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2160      	movs	r1, #96	@ 0x60
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 fbb9 	bl	800c7c6 <TIM_ITRx_SetConfig>
      break;
 800c054:	e01c      	b.n	800c090 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c062:	461a      	mov	r2, r3
 800c064:	f000 fb50 	bl	800c708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2140      	movs	r1, #64	@ 0x40
 800c06e:	4618      	mov	r0, r3
 800c070:	f000 fba9 	bl	800c7c6 <TIM_ITRx_SetConfig>
      break;
 800c074:	e00c      	b.n	800c090 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4619      	mov	r1, r3
 800c080:	4610      	mov	r0, r2
 800c082:	f000 fba0 	bl	800c7c6 <TIM_ITRx_SetConfig>
      break;
 800c086:	e003      	b.n	800c090 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	73fb      	strb	r3, [r7, #15]
      break;
 800c08c:	e000      	b.n	800c090 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c08e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	fffeff88 	.word	0xfffeff88

0800c0b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0b8:	bf00      	nop
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0e0:	bf00      	nop
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c100:	b480      	push	{r7}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a43      	ldr	r2, [pc, #268]	@ (800c220 <TIM_Base_SetConfig+0x120>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d013      	beq.n	800c140 <TIM_Base_SetConfig+0x40>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c11e:	d00f      	beq.n	800c140 <TIM_Base_SetConfig+0x40>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a40      	ldr	r2, [pc, #256]	@ (800c224 <TIM_Base_SetConfig+0x124>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d00b      	beq.n	800c140 <TIM_Base_SetConfig+0x40>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a3f      	ldr	r2, [pc, #252]	@ (800c228 <TIM_Base_SetConfig+0x128>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d007      	beq.n	800c140 <TIM_Base_SetConfig+0x40>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a3e      	ldr	r2, [pc, #248]	@ (800c22c <TIM_Base_SetConfig+0x12c>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d003      	beq.n	800c140 <TIM_Base_SetConfig+0x40>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a3d      	ldr	r2, [pc, #244]	@ (800c230 <TIM_Base_SetConfig+0x130>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d108      	bne.n	800c152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	4313      	orrs	r3, r2
 800c150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4a32      	ldr	r2, [pc, #200]	@ (800c220 <TIM_Base_SetConfig+0x120>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d02b      	beq.n	800c1b2 <TIM_Base_SetConfig+0xb2>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c160:	d027      	beq.n	800c1b2 <TIM_Base_SetConfig+0xb2>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a2f      	ldr	r2, [pc, #188]	@ (800c224 <TIM_Base_SetConfig+0x124>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d023      	beq.n	800c1b2 <TIM_Base_SetConfig+0xb2>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a2e      	ldr	r2, [pc, #184]	@ (800c228 <TIM_Base_SetConfig+0x128>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d01f      	beq.n	800c1b2 <TIM_Base_SetConfig+0xb2>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a2d      	ldr	r2, [pc, #180]	@ (800c22c <TIM_Base_SetConfig+0x12c>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d01b      	beq.n	800c1b2 <TIM_Base_SetConfig+0xb2>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a2c      	ldr	r2, [pc, #176]	@ (800c230 <TIM_Base_SetConfig+0x130>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d017      	beq.n	800c1b2 <TIM_Base_SetConfig+0xb2>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a2b      	ldr	r2, [pc, #172]	@ (800c234 <TIM_Base_SetConfig+0x134>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d013      	beq.n	800c1b2 <TIM_Base_SetConfig+0xb2>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a2a      	ldr	r2, [pc, #168]	@ (800c238 <TIM_Base_SetConfig+0x138>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d00f      	beq.n	800c1b2 <TIM_Base_SetConfig+0xb2>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a29      	ldr	r2, [pc, #164]	@ (800c23c <TIM_Base_SetConfig+0x13c>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d00b      	beq.n	800c1b2 <TIM_Base_SetConfig+0xb2>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a28      	ldr	r2, [pc, #160]	@ (800c240 <TIM_Base_SetConfig+0x140>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d007      	beq.n	800c1b2 <TIM_Base_SetConfig+0xb2>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a27      	ldr	r2, [pc, #156]	@ (800c244 <TIM_Base_SetConfig+0x144>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d003      	beq.n	800c1b2 <TIM_Base_SetConfig+0xb2>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a26      	ldr	r2, [pc, #152]	@ (800c248 <TIM_Base_SetConfig+0x148>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d108      	bne.n	800c1c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	689a      	ldr	r2, [r3, #8]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4a0e      	ldr	r2, [pc, #56]	@ (800c220 <TIM_Base_SetConfig+0x120>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d003      	beq.n	800c1f2 <TIM_Base_SetConfig+0xf2>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4a10      	ldr	r2, [pc, #64]	@ (800c230 <TIM_Base_SetConfig+0x130>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d103      	bne.n	800c1fa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	691a      	ldr	r2, [r3, #16]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f043 0204 	orr.w	r2, r3, #4
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2201      	movs	r2, #1
 800c20a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	601a      	str	r2, [r3, #0]
}
 800c212:	bf00      	nop
 800c214:	3714      	adds	r7, #20
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	40010000 	.word	0x40010000
 800c224:	40000400 	.word	0x40000400
 800c228:	40000800 	.word	0x40000800
 800c22c:	40000c00 	.word	0x40000c00
 800c230:	40010400 	.word	0x40010400
 800c234:	40014000 	.word	0x40014000
 800c238:	40014400 	.word	0x40014400
 800c23c:	40014800 	.word	0x40014800
 800c240:	40001800 	.word	0x40001800
 800c244:	40001c00 	.word	0x40001c00
 800c248:	40002000 	.word	0x40002000

0800c24c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b087      	sub	sp, #28
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a1b      	ldr	r3, [r3, #32]
 800c260:	f023 0201 	bic.w	r2, r3, #1
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	4b2b      	ldr	r3, [pc, #172]	@ (800c324 <TIM_OC1_SetConfig+0xd8>)
 800c278:	4013      	ands	r3, r2
 800c27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f023 0303 	bic.w	r3, r3, #3
 800c282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f023 0302 	bic.w	r3, r3, #2
 800c294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a21      	ldr	r2, [pc, #132]	@ (800c328 <TIM_OC1_SetConfig+0xdc>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d003      	beq.n	800c2b0 <TIM_OC1_SetConfig+0x64>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a20      	ldr	r2, [pc, #128]	@ (800c32c <TIM_OC1_SetConfig+0xe0>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d10c      	bne.n	800c2ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f023 0308 	bic.w	r3, r3, #8
 800c2b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f023 0304 	bic.w	r3, r3, #4
 800c2c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4a16      	ldr	r2, [pc, #88]	@ (800c328 <TIM_OC1_SetConfig+0xdc>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d003      	beq.n	800c2da <TIM_OC1_SetConfig+0x8e>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a15      	ldr	r2, [pc, #84]	@ (800c32c <TIM_OC1_SetConfig+0xe0>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d111      	bne.n	800c2fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	695b      	ldr	r3, [r3, #20]
 800c2ee:	693a      	ldr	r2, [r7, #16]
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	697a      	ldr	r2, [r7, #20]
 800c316:	621a      	str	r2, [r3, #32]
}
 800c318:	bf00      	nop
 800c31a:	371c      	adds	r7, #28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	fffeff8f 	.word	0xfffeff8f
 800c328:	40010000 	.word	0x40010000
 800c32c:	40010400 	.word	0x40010400

0800c330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c330:	b480      	push	{r7}
 800c332:	b087      	sub	sp, #28
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6a1b      	ldr	r3, [r3, #32]
 800c33e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6a1b      	ldr	r3, [r3, #32]
 800c344:	f023 0210 	bic.w	r2, r3, #16
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	699b      	ldr	r3, [r3, #24]
 800c356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	4b2e      	ldr	r3, [pc, #184]	@ (800c414 <TIM_OC2_SetConfig+0xe4>)
 800c35c:	4013      	ands	r3, r2
 800c35e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	021b      	lsls	r3, r3, #8
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	4313      	orrs	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f023 0320 	bic.w	r3, r3, #32
 800c37a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	011b      	lsls	r3, r3, #4
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	4313      	orrs	r3, r2
 800c386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a23      	ldr	r2, [pc, #140]	@ (800c418 <TIM_OC2_SetConfig+0xe8>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d003      	beq.n	800c398 <TIM_OC2_SetConfig+0x68>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a22      	ldr	r2, [pc, #136]	@ (800c41c <TIM_OC2_SetConfig+0xec>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d10d      	bne.n	800c3b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c39e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	011b      	lsls	r3, r3, #4
 800c3a6:	697a      	ldr	r2, [r7, #20]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a18      	ldr	r2, [pc, #96]	@ (800c418 <TIM_OC2_SetConfig+0xe8>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d003      	beq.n	800c3c4 <TIM_OC2_SetConfig+0x94>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a17      	ldr	r2, [pc, #92]	@ (800c41c <TIM_OC2_SetConfig+0xec>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d113      	bne.n	800c3ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c3ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c3d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	695b      	ldr	r3, [r3, #20]
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	693a      	ldr	r2, [r7, #16]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	693a      	ldr	r2, [r7, #16]
 800c3f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	685a      	ldr	r2, [r3, #4]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	621a      	str	r2, [r3, #32]
}
 800c406:	bf00      	nop
 800c408:	371c      	adds	r7, #28
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	feff8fff 	.word	0xfeff8fff
 800c418:	40010000 	.word	0x40010000
 800c41c:	40010400 	.word	0x40010400

0800c420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c420:	b480      	push	{r7}
 800c422:	b087      	sub	sp, #28
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6a1b      	ldr	r3, [r3, #32]
 800c434:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	69db      	ldr	r3, [r3, #28]
 800c446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	4b2d      	ldr	r3, [pc, #180]	@ (800c500 <TIM_OC3_SetConfig+0xe0>)
 800c44c:	4013      	ands	r3, r2
 800c44e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f023 0303 	bic.w	r3, r3, #3
 800c456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	4313      	orrs	r3, r2
 800c460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	021b      	lsls	r3, r3, #8
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	4313      	orrs	r3, r2
 800c474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a22      	ldr	r2, [pc, #136]	@ (800c504 <TIM_OC3_SetConfig+0xe4>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d003      	beq.n	800c486 <TIM_OC3_SetConfig+0x66>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a21      	ldr	r2, [pc, #132]	@ (800c508 <TIM_OC3_SetConfig+0xe8>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d10d      	bne.n	800c4a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c48c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	021b      	lsls	r3, r3, #8
 800c494:	697a      	ldr	r2, [r7, #20]
 800c496:	4313      	orrs	r3, r2
 800c498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c4a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a17      	ldr	r2, [pc, #92]	@ (800c504 <TIM_OC3_SetConfig+0xe4>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d003      	beq.n	800c4b2 <TIM_OC3_SetConfig+0x92>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a16      	ldr	r2, [pc, #88]	@ (800c508 <TIM_OC3_SetConfig+0xe8>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d113      	bne.n	800c4da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c4b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c4c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	011b      	lsls	r3, r3, #4
 800c4c8:	693a      	ldr	r2, [r7, #16]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	699b      	ldr	r3, [r3, #24]
 800c4d2:	011b      	lsls	r3, r3, #4
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	685a      	ldr	r2, [r3, #4]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	697a      	ldr	r2, [r7, #20]
 800c4f2:	621a      	str	r2, [r3, #32]
}
 800c4f4:	bf00      	nop
 800c4f6:	371c      	adds	r7, #28
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	fffeff8f 	.word	0xfffeff8f
 800c504:	40010000 	.word	0x40010000
 800c508:	40010400 	.word	0x40010400

0800c50c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b087      	sub	sp, #28
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a1b      	ldr	r3, [r3, #32]
 800c520:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	69db      	ldr	r3, [r3, #28]
 800c532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	4b1e      	ldr	r3, [pc, #120]	@ (800c5b0 <TIM_OC4_SetConfig+0xa4>)
 800c538:	4013      	ands	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	021b      	lsls	r3, r3, #8
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	031b      	lsls	r3, r3, #12
 800c55e:	693a      	ldr	r2, [r7, #16]
 800c560:	4313      	orrs	r3, r2
 800c562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a13      	ldr	r2, [pc, #76]	@ (800c5b4 <TIM_OC4_SetConfig+0xa8>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d003      	beq.n	800c574 <TIM_OC4_SetConfig+0x68>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a12      	ldr	r2, [pc, #72]	@ (800c5b8 <TIM_OC4_SetConfig+0xac>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d109      	bne.n	800c588 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c57a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	695b      	ldr	r3, [r3, #20]
 800c580:	019b      	lsls	r3, r3, #6
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	4313      	orrs	r3, r2
 800c586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	697a      	ldr	r2, [r7, #20]
 800c58c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	685a      	ldr	r2, [r3, #4]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	693a      	ldr	r2, [r7, #16]
 800c5a0:	621a      	str	r2, [r3, #32]
}
 800c5a2:	bf00      	nop
 800c5a4:	371c      	adds	r7, #28
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	feff8fff 	.word	0xfeff8fff
 800c5b4:	40010000 	.word	0x40010000
 800c5b8:	40010400 	.word	0x40010400

0800c5bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b087      	sub	sp, #28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6a1b      	ldr	r3, [r3, #32]
 800c5d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	4b1b      	ldr	r3, [pc, #108]	@ (800c654 <TIM_OC5_SetConfig+0x98>)
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c5fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	041b      	lsls	r3, r3, #16
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	4313      	orrs	r3, r2
 800c608:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a12      	ldr	r2, [pc, #72]	@ (800c658 <TIM_OC5_SetConfig+0x9c>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d003      	beq.n	800c61a <TIM_OC5_SetConfig+0x5e>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a11      	ldr	r2, [pc, #68]	@ (800c65c <TIM_OC5_SetConfig+0xa0>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d109      	bne.n	800c62e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c620:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	021b      	lsls	r3, r3, #8
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	697a      	ldr	r2, [r7, #20]
 800c632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	621a      	str	r2, [r3, #32]
}
 800c648:	bf00      	nop
 800c64a:	371c      	adds	r7, #28
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr
 800c654:	fffeff8f 	.word	0xfffeff8f
 800c658:	40010000 	.word	0x40010000
 800c65c:	40010400 	.word	0x40010400

0800c660 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c660:	b480      	push	{r7}
 800c662:	b087      	sub	sp, #28
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a1b      	ldr	r3, [r3, #32]
 800c66e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6a1b      	ldr	r3, [r3, #32]
 800c674:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	4b1c      	ldr	r3, [pc, #112]	@ (800c6fc <TIM_OC6_SetConfig+0x9c>)
 800c68c:	4013      	ands	r3, r2
 800c68e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	021b      	lsls	r3, r3, #8
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	4313      	orrs	r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c6a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	051b      	lsls	r3, r3, #20
 800c6aa:	693a      	ldr	r2, [r7, #16]
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a13      	ldr	r2, [pc, #76]	@ (800c700 <TIM_OC6_SetConfig+0xa0>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d003      	beq.n	800c6c0 <TIM_OC6_SetConfig+0x60>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a12      	ldr	r2, [pc, #72]	@ (800c704 <TIM_OC6_SetConfig+0xa4>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d109      	bne.n	800c6d4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c6c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	029b      	lsls	r3, r3, #10
 800c6ce:	697a      	ldr	r2, [r7, #20]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	685a      	ldr	r2, [r3, #4]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	693a      	ldr	r2, [r7, #16]
 800c6ec:	621a      	str	r2, [r3, #32]
}
 800c6ee:	bf00      	nop
 800c6f0:	371c      	adds	r7, #28
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	feff8fff 	.word	0xfeff8fff
 800c700:	40010000 	.word	0x40010000
 800c704:	40010400 	.word	0x40010400

0800c708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c708:	b480      	push	{r7}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6a1b      	ldr	r3, [r3, #32]
 800c718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6a1b      	ldr	r3, [r3, #32]
 800c71e:	f023 0201 	bic.w	r2, r3, #1
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	011b      	lsls	r3, r3, #4
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f023 030a 	bic.w	r3, r3, #10
 800c744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	621a      	str	r2, [r3, #32]
}
 800c75a:	bf00      	nop
 800c75c:	371c      	adds	r7, #28
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr

0800c766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c766:	b480      	push	{r7}
 800c768:	b087      	sub	sp, #28
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	60f8      	str	r0, [r7, #12]
 800c76e:	60b9      	str	r1, [r7, #8]
 800c770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6a1b      	ldr	r3, [r3, #32]
 800c77c:	f023 0210 	bic.w	r2, r3, #16
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	699b      	ldr	r3, [r3, #24]
 800c788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	031b      	lsls	r3, r3, #12
 800c796:	693a      	ldr	r2, [r7, #16]
 800c798:	4313      	orrs	r3, r2
 800c79a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c7a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	011b      	lsls	r3, r3, #4
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	693a      	ldr	r2, [r7, #16]
 800c7b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	621a      	str	r2, [r3, #32]
}
 800c7ba:	bf00      	nop
 800c7bc:	371c      	adds	r7, #28
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b085      	sub	sp, #20
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	f043 0307 	orr.w	r3, r3, #7
 800c7e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	609a      	str	r2, [r3, #8]
}
 800c7f0:	bf00      	nop
 800c7f2:	3714      	adds	r7, #20
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b087      	sub	sp, #28
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
 800c808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	021a      	lsls	r2, r3, #8
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	431a      	orrs	r2, r3
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	4313      	orrs	r3, r2
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	4313      	orrs	r3, r2
 800c828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	697a      	ldr	r2, [r7, #20]
 800c82e:	609a      	str	r2, [r3, #8]
}
 800c830:	bf00      	nop
 800c832:	371c      	adds	r7, #28
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b085      	sub	sp, #20
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d101      	bne.n	800c854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c850:	2302      	movs	r3, #2
 800c852:	e06d      	b.n	800c930 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2201      	movs	r2, #1
 800c858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2202      	movs	r2, #2
 800c860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a30      	ldr	r2, [pc, #192]	@ (800c93c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d004      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a2f      	ldr	r2, [pc, #188]	@ (800c940 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d108      	bne.n	800c89a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c88e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	4313      	orrs	r3, r2
 800c898:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a20      	ldr	r2, [pc, #128]	@ (800c93c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d022      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8c6:	d01d      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c944 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d018      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a1c      	ldr	r2, [pc, #112]	@ (800c948 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d013      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a1a      	ldr	r2, [pc, #104]	@ (800c94c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d00e      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a15      	ldr	r2, [pc, #84]	@ (800c940 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d009      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a16      	ldr	r2, [pc, #88]	@ (800c950 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d004      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a15      	ldr	r2, [pc, #84]	@ (800c954 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d10c      	bne.n	800c91e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c90a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	4313      	orrs	r3, r2
 800c914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	40010000 	.word	0x40010000
 800c940:	40010400 	.word	0x40010400
 800c944:	40000400 	.word	0x40000400
 800c948:	40000800 	.word	0x40000800
 800c94c:	40000c00 	.word	0x40000c00
 800c950:	40014000 	.word	0x40014000
 800c954:	40001800 	.word	0x40001800

0800c958 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c962:	2300      	movs	r3, #0
 800c964:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d101      	bne.n	800c974 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c970:	2302      	movs	r3, #2
 800c972:	e065      	b.n	800ca40 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	4313      	orrs	r3, r2
 800c988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	4313      	orrs	r3, r2
 800c996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	691b      	ldr	r3, [r3, #16]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	695b      	ldr	r3, [r3, #20]
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	699b      	ldr	r3, [r3, #24]
 800c9e8:	041b      	lsls	r3, r3, #16
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a16      	ldr	r2, [pc, #88]	@ (800ca4c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d004      	beq.n	800ca02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a14      	ldr	r2, [pc, #80]	@ (800ca50 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d115      	bne.n	800ca2e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca0c:	051b      	lsls	r3, r3, #20
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	69db      	ldr	r3, [r3, #28]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	6a1b      	ldr	r3, [r3, #32]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3714      	adds	r7, #20
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	40010000 	.word	0x40010000
 800ca50:	40010400 	.word	0x40010400

0800ca54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca5c:	bf00      	nop
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca70:	bf00      	nop
 800ca72:	370c      	adds	r7, #12
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d101      	bne.n	800caa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e040      	b.n	800cb24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d106      	bne.n	800cab8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7f6 fc42 	bl	800333c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2224      	movs	r2, #36	@ 0x24
 800cabc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f022 0201 	bic.w	r2, r2, #1
 800cacc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d002      	beq.n	800cadc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fb16 	bl	800d108 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f8af 	bl	800cc40 <UART_SetConfig>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d101      	bne.n	800caec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800cae8:	2301      	movs	r3, #1
 800caea:	e01b      	b.n	800cb24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	685a      	ldr	r2, [r3, #4]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cafa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	689a      	ldr	r2, [r3, #8]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cb0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f042 0201 	orr.w	r2, r2, #1
 800cb1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fb95 	bl	800d24c <UART_CheckIdleState>
 800cb22:	4603      	mov	r3, r0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b08a      	sub	sp, #40	@ 0x28
 800cb30:	af02      	add	r7, sp, #8
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	603b      	str	r3, [r7, #0]
 800cb38:	4613      	mov	r3, r2
 800cb3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cb40:	2b20      	cmp	r3, #32
 800cb42:	d177      	bne.n	800cc34 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d002      	beq.n	800cb50 <HAL_UART_Transmit+0x24>
 800cb4a:	88fb      	ldrh	r3, [r7, #6]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d101      	bne.n	800cb54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e070      	b.n	800cc36 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2221      	movs	r2, #33	@ 0x21
 800cb60:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cb62:	f7f6 fcfd 	bl	8003560 <HAL_GetTick>
 800cb66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	88fa      	ldrh	r2, [r7, #6]
 800cb6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	88fa      	ldrh	r2, [r7, #6]
 800cb74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb80:	d108      	bne.n	800cb94 <HAL_UART_Transmit+0x68>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d104      	bne.n	800cb94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	61bb      	str	r3, [r7, #24]
 800cb92:	e003      	b.n	800cb9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cb9c:	e02f      	b.n	800cbfe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	2200      	movs	r2, #0
 800cba6:	2180      	movs	r1, #128	@ 0x80
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f000 fba6 	bl	800d2fa <UART_WaitOnFlagUntilTimeout>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d004      	beq.n	800cbbe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2220      	movs	r2, #32
 800cbb8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	e03b      	b.n	800cc36 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10b      	bne.n	800cbdc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	881b      	ldrh	r3, [r3, #0]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	3302      	adds	r3, #2
 800cbd8:	61bb      	str	r3, [r7, #24]
 800cbda:	e007      	b.n	800cbec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	781a      	ldrb	r2, [r3, #0]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1c9      	bne.n	800cb9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2200      	movs	r2, #0
 800cc12:	2140      	movs	r1, #64	@ 0x40
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 fb70 	bl	800d2fa <UART_WaitOnFlagUntilTimeout>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d004      	beq.n	800cc2a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2220      	movs	r2, #32
 800cc24:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800cc26:	2303      	movs	r3, #3
 800cc28:	e005      	b.n	800cc36 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2220      	movs	r2, #32
 800cc2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800cc30:	2300      	movs	r3, #0
 800cc32:	e000      	b.n	800cc36 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800cc34:	2302      	movs	r3, #2
  }
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3720      	adds	r7, #32
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
	...

0800cc40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b088      	sub	sp, #32
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	689a      	ldr	r2, [r3, #8]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	431a      	orrs	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	695b      	ldr	r3, [r3, #20]
 800cc5a:	431a      	orrs	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	69db      	ldr	r3, [r3, #28]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	4ba6      	ldr	r3, [pc, #664]	@ (800cf04 <UART_SetConfig+0x2c4>)
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	6812      	ldr	r2, [r2, #0]
 800cc72:	6979      	ldr	r1, [r7, #20]
 800cc74:	430b      	orrs	r3, r1
 800cc76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	68da      	ldr	r2, [r3, #12]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	430a      	orrs	r2, r1
 800cc8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	699b      	ldr	r3, [r3, #24]
 800cc92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6a1b      	ldr	r3, [r3, #32]
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	697a      	ldr	r2, [r7, #20]
 800ccae:	430a      	orrs	r2, r1
 800ccb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a94      	ldr	r2, [pc, #592]	@ (800cf08 <UART_SetConfig+0x2c8>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d120      	bne.n	800ccfe <UART_SetConfig+0xbe>
 800ccbc:	4b93      	ldr	r3, [pc, #588]	@ (800cf0c <UART_SetConfig+0x2cc>)
 800ccbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccc2:	f003 0303 	and.w	r3, r3, #3
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	d816      	bhi.n	800ccf8 <UART_SetConfig+0xb8>
 800ccca:	a201      	add	r2, pc, #4	@ (adr r2, 800ccd0 <UART_SetConfig+0x90>)
 800cccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd0:	0800cce1 	.word	0x0800cce1
 800ccd4:	0800cced 	.word	0x0800cced
 800ccd8:	0800cce7 	.word	0x0800cce7
 800ccdc:	0800ccf3 	.word	0x0800ccf3
 800cce0:	2301      	movs	r3, #1
 800cce2:	77fb      	strb	r3, [r7, #31]
 800cce4:	e150      	b.n	800cf88 <UART_SetConfig+0x348>
 800cce6:	2302      	movs	r3, #2
 800cce8:	77fb      	strb	r3, [r7, #31]
 800ccea:	e14d      	b.n	800cf88 <UART_SetConfig+0x348>
 800ccec:	2304      	movs	r3, #4
 800ccee:	77fb      	strb	r3, [r7, #31]
 800ccf0:	e14a      	b.n	800cf88 <UART_SetConfig+0x348>
 800ccf2:	2308      	movs	r3, #8
 800ccf4:	77fb      	strb	r3, [r7, #31]
 800ccf6:	e147      	b.n	800cf88 <UART_SetConfig+0x348>
 800ccf8:	2310      	movs	r3, #16
 800ccfa:	77fb      	strb	r3, [r7, #31]
 800ccfc:	e144      	b.n	800cf88 <UART_SetConfig+0x348>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a83      	ldr	r2, [pc, #524]	@ (800cf10 <UART_SetConfig+0x2d0>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d132      	bne.n	800cd6e <UART_SetConfig+0x12e>
 800cd08:	4b80      	ldr	r3, [pc, #512]	@ (800cf0c <UART_SetConfig+0x2cc>)
 800cd0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd0e:	f003 030c 	and.w	r3, r3, #12
 800cd12:	2b0c      	cmp	r3, #12
 800cd14:	d828      	bhi.n	800cd68 <UART_SetConfig+0x128>
 800cd16:	a201      	add	r2, pc, #4	@ (adr r2, 800cd1c <UART_SetConfig+0xdc>)
 800cd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd1c:	0800cd51 	.word	0x0800cd51
 800cd20:	0800cd69 	.word	0x0800cd69
 800cd24:	0800cd69 	.word	0x0800cd69
 800cd28:	0800cd69 	.word	0x0800cd69
 800cd2c:	0800cd5d 	.word	0x0800cd5d
 800cd30:	0800cd69 	.word	0x0800cd69
 800cd34:	0800cd69 	.word	0x0800cd69
 800cd38:	0800cd69 	.word	0x0800cd69
 800cd3c:	0800cd57 	.word	0x0800cd57
 800cd40:	0800cd69 	.word	0x0800cd69
 800cd44:	0800cd69 	.word	0x0800cd69
 800cd48:	0800cd69 	.word	0x0800cd69
 800cd4c:	0800cd63 	.word	0x0800cd63
 800cd50:	2300      	movs	r3, #0
 800cd52:	77fb      	strb	r3, [r7, #31]
 800cd54:	e118      	b.n	800cf88 <UART_SetConfig+0x348>
 800cd56:	2302      	movs	r3, #2
 800cd58:	77fb      	strb	r3, [r7, #31]
 800cd5a:	e115      	b.n	800cf88 <UART_SetConfig+0x348>
 800cd5c:	2304      	movs	r3, #4
 800cd5e:	77fb      	strb	r3, [r7, #31]
 800cd60:	e112      	b.n	800cf88 <UART_SetConfig+0x348>
 800cd62:	2308      	movs	r3, #8
 800cd64:	77fb      	strb	r3, [r7, #31]
 800cd66:	e10f      	b.n	800cf88 <UART_SetConfig+0x348>
 800cd68:	2310      	movs	r3, #16
 800cd6a:	77fb      	strb	r3, [r7, #31]
 800cd6c:	e10c      	b.n	800cf88 <UART_SetConfig+0x348>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a68      	ldr	r2, [pc, #416]	@ (800cf14 <UART_SetConfig+0x2d4>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d120      	bne.n	800cdba <UART_SetConfig+0x17a>
 800cd78:	4b64      	ldr	r3, [pc, #400]	@ (800cf0c <UART_SetConfig+0x2cc>)
 800cd7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cd82:	2b30      	cmp	r3, #48	@ 0x30
 800cd84:	d013      	beq.n	800cdae <UART_SetConfig+0x16e>
 800cd86:	2b30      	cmp	r3, #48	@ 0x30
 800cd88:	d814      	bhi.n	800cdb4 <UART_SetConfig+0x174>
 800cd8a:	2b20      	cmp	r3, #32
 800cd8c:	d009      	beq.n	800cda2 <UART_SetConfig+0x162>
 800cd8e:	2b20      	cmp	r3, #32
 800cd90:	d810      	bhi.n	800cdb4 <UART_SetConfig+0x174>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d002      	beq.n	800cd9c <UART_SetConfig+0x15c>
 800cd96:	2b10      	cmp	r3, #16
 800cd98:	d006      	beq.n	800cda8 <UART_SetConfig+0x168>
 800cd9a:	e00b      	b.n	800cdb4 <UART_SetConfig+0x174>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	77fb      	strb	r3, [r7, #31]
 800cda0:	e0f2      	b.n	800cf88 <UART_SetConfig+0x348>
 800cda2:	2302      	movs	r3, #2
 800cda4:	77fb      	strb	r3, [r7, #31]
 800cda6:	e0ef      	b.n	800cf88 <UART_SetConfig+0x348>
 800cda8:	2304      	movs	r3, #4
 800cdaa:	77fb      	strb	r3, [r7, #31]
 800cdac:	e0ec      	b.n	800cf88 <UART_SetConfig+0x348>
 800cdae:	2308      	movs	r3, #8
 800cdb0:	77fb      	strb	r3, [r7, #31]
 800cdb2:	e0e9      	b.n	800cf88 <UART_SetConfig+0x348>
 800cdb4:	2310      	movs	r3, #16
 800cdb6:	77fb      	strb	r3, [r7, #31]
 800cdb8:	e0e6      	b.n	800cf88 <UART_SetConfig+0x348>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a56      	ldr	r2, [pc, #344]	@ (800cf18 <UART_SetConfig+0x2d8>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d120      	bne.n	800ce06 <UART_SetConfig+0x1c6>
 800cdc4:	4b51      	ldr	r3, [pc, #324]	@ (800cf0c <UART_SetConfig+0x2cc>)
 800cdc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cdce:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdd0:	d013      	beq.n	800cdfa <UART_SetConfig+0x1ba>
 800cdd2:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdd4:	d814      	bhi.n	800ce00 <UART_SetConfig+0x1c0>
 800cdd6:	2b80      	cmp	r3, #128	@ 0x80
 800cdd8:	d009      	beq.n	800cdee <UART_SetConfig+0x1ae>
 800cdda:	2b80      	cmp	r3, #128	@ 0x80
 800cddc:	d810      	bhi.n	800ce00 <UART_SetConfig+0x1c0>
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d002      	beq.n	800cde8 <UART_SetConfig+0x1a8>
 800cde2:	2b40      	cmp	r3, #64	@ 0x40
 800cde4:	d006      	beq.n	800cdf4 <UART_SetConfig+0x1b4>
 800cde6:	e00b      	b.n	800ce00 <UART_SetConfig+0x1c0>
 800cde8:	2300      	movs	r3, #0
 800cdea:	77fb      	strb	r3, [r7, #31]
 800cdec:	e0cc      	b.n	800cf88 <UART_SetConfig+0x348>
 800cdee:	2302      	movs	r3, #2
 800cdf0:	77fb      	strb	r3, [r7, #31]
 800cdf2:	e0c9      	b.n	800cf88 <UART_SetConfig+0x348>
 800cdf4:	2304      	movs	r3, #4
 800cdf6:	77fb      	strb	r3, [r7, #31]
 800cdf8:	e0c6      	b.n	800cf88 <UART_SetConfig+0x348>
 800cdfa:	2308      	movs	r3, #8
 800cdfc:	77fb      	strb	r3, [r7, #31]
 800cdfe:	e0c3      	b.n	800cf88 <UART_SetConfig+0x348>
 800ce00:	2310      	movs	r3, #16
 800ce02:	77fb      	strb	r3, [r7, #31]
 800ce04:	e0c0      	b.n	800cf88 <UART_SetConfig+0x348>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a44      	ldr	r2, [pc, #272]	@ (800cf1c <UART_SetConfig+0x2dc>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d125      	bne.n	800ce5c <UART_SetConfig+0x21c>
 800ce10:	4b3e      	ldr	r3, [pc, #248]	@ (800cf0c <UART_SetConfig+0x2cc>)
 800ce12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce1e:	d017      	beq.n	800ce50 <UART_SetConfig+0x210>
 800ce20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce24:	d817      	bhi.n	800ce56 <UART_SetConfig+0x216>
 800ce26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce2a:	d00b      	beq.n	800ce44 <UART_SetConfig+0x204>
 800ce2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce30:	d811      	bhi.n	800ce56 <UART_SetConfig+0x216>
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d003      	beq.n	800ce3e <UART_SetConfig+0x1fe>
 800ce36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce3a:	d006      	beq.n	800ce4a <UART_SetConfig+0x20a>
 800ce3c:	e00b      	b.n	800ce56 <UART_SetConfig+0x216>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	77fb      	strb	r3, [r7, #31]
 800ce42:	e0a1      	b.n	800cf88 <UART_SetConfig+0x348>
 800ce44:	2302      	movs	r3, #2
 800ce46:	77fb      	strb	r3, [r7, #31]
 800ce48:	e09e      	b.n	800cf88 <UART_SetConfig+0x348>
 800ce4a:	2304      	movs	r3, #4
 800ce4c:	77fb      	strb	r3, [r7, #31]
 800ce4e:	e09b      	b.n	800cf88 <UART_SetConfig+0x348>
 800ce50:	2308      	movs	r3, #8
 800ce52:	77fb      	strb	r3, [r7, #31]
 800ce54:	e098      	b.n	800cf88 <UART_SetConfig+0x348>
 800ce56:	2310      	movs	r3, #16
 800ce58:	77fb      	strb	r3, [r7, #31]
 800ce5a:	e095      	b.n	800cf88 <UART_SetConfig+0x348>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a2f      	ldr	r2, [pc, #188]	@ (800cf20 <UART_SetConfig+0x2e0>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d125      	bne.n	800ceb2 <UART_SetConfig+0x272>
 800ce66:	4b29      	ldr	r3, [pc, #164]	@ (800cf0c <UART_SetConfig+0x2cc>)
 800ce68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ce70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce74:	d017      	beq.n	800cea6 <UART_SetConfig+0x266>
 800ce76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce7a:	d817      	bhi.n	800ceac <UART_SetConfig+0x26c>
 800ce7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce80:	d00b      	beq.n	800ce9a <UART_SetConfig+0x25a>
 800ce82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce86:	d811      	bhi.n	800ceac <UART_SetConfig+0x26c>
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <UART_SetConfig+0x254>
 800ce8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce90:	d006      	beq.n	800cea0 <UART_SetConfig+0x260>
 800ce92:	e00b      	b.n	800ceac <UART_SetConfig+0x26c>
 800ce94:	2301      	movs	r3, #1
 800ce96:	77fb      	strb	r3, [r7, #31]
 800ce98:	e076      	b.n	800cf88 <UART_SetConfig+0x348>
 800ce9a:	2302      	movs	r3, #2
 800ce9c:	77fb      	strb	r3, [r7, #31]
 800ce9e:	e073      	b.n	800cf88 <UART_SetConfig+0x348>
 800cea0:	2304      	movs	r3, #4
 800cea2:	77fb      	strb	r3, [r7, #31]
 800cea4:	e070      	b.n	800cf88 <UART_SetConfig+0x348>
 800cea6:	2308      	movs	r3, #8
 800cea8:	77fb      	strb	r3, [r7, #31]
 800ceaa:	e06d      	b.n	800cf88 <UART_SetConfig+0x348>
 800ceac:	2310      	movs	r3, #16
 800ceae:	77fb      	strb	r3, [r7, #31]
 800ceb0:	e06a      	b.n	800cf88 <UART_SetConfig+0x348>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a1b      	ldr	r2, [pc, #108]	@ (800cf24 <UART_SetConfig+0x2e4>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d138      	bne.n	800cf2e <UART_SetConfig+0x2ee>
 800cebc:	4b13      	ldr	r3, [pc, #76]	@ (800cf0c <UART_SetConfig+0x2cc>)
 800cebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cec2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cec6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ceca:	d017      	beq.n	800cefc <UART_SetConfig+0x2bc>
 800cecc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ced0:	d82a      	bhi.n	800cf28 <UART_SetConfig+0x2e8>
 800ced2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ced6:	d00b      	beq.n	800cef0 <UART_SetConfig+0x2b0>
 800ced8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cedc:	d824      	bhi.n	800cf28 <UART_SetConfig+0x2e8>
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d003      	beq.n	800ceea <UART_SetConfig+0x2aa>
 800cee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cee6:	d006      	beq.n	800cef6 <UART_SetConfig+0x2b6>
 800cee8:	e01e      	b.n	800cf28 <UART_SetConfig+0x2e8>
 800ceea:	2300      	movs	r3, #0
 800ceec:	77fb      	strb	r3, [r7, #31]
 800ceee:	e04b      	b.n	800cf88 <UART_SetConfig+0x348>
 800cef0:	2302      	movs	r3, #2
 800cef2:	77fb      	strb	r3, [r7, #31]
 800cef4:	e048      	b.n	800cf88 <UART_SetConfig+0x348>
 800cef6:	2304      	movs	r3, #4
 800cef8:	77fb      	strb	r3, [r7, #31]
 800cefa:	e045      	b.n	800cf88 <UART_SetConfig+0x348>
 800cefc:	2308      	movs	r3, #8
 800cefe:	77fb      	strb	r3, [r7, #31]
 800cf00:	e042      	b.n	800cf88 <UART_SetConfig+0x348>
 800cf02:	bf00      	nop
 800cf04:	efff69f3 	.word	0xefff69f3
 800cf08:	40011000 	.word	0x40011000
 800cf0c:	40023800 	.word	0x40023800
 800cf10:	40004400 	.word	0x40004400
 800cf14:	40004800 	.word	0x40004800
 800cf18:	40004c00 	.word	0x40004c00
 800cf1c:	40005000 	.word	0x40005000
 800cf20:	40011400 	.word	0x40011400
 800cf24:	40007800 	.word	0x40007800
 800cf28:	2310      	movs	r3, #16
 800cf2a:	77fb      	strb	r3, [r7, #31]
 800cf2c:	e02c      	b.n	800cf88 <UART_SetConfig+0x348>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a72      	ldr	r2, [pc, #456]	@ (800d0fc <UART_SetConfig+0x4bc>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d125      	bne.n	800cf84 <UART_SetConfig+0x344>
 800cf38:	4b71      	ldr	r3, [pc, #452]	@ (800d100 <UART_SetConfig+0x4c0>)
 800cf3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cf42:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cf46:	d017      	beq.n	800cf78 <UART_SetConfig+0x338>
 800cf48:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cf4c:	d817      	bhi.n	800cf7e <UART_SetConfig+0x33e>
 800cf4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf52:	d00b      	beq.n	800cf6c <UART_SetConfig+0x32c>
 800cf54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf58:	d811      	bhi.n	800cf7e <UART_SetConfig+0x33e>
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d003      	beq.n	800cf66 <UART_SetConfig+0x326>
 800cf5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf62:	d006      	beq.n	800cf72 <UART_SetConfig+0x332>
 800cf64:	e00b      	b.n	800cf7e <UART_SetConfig+0x33e>
 800cf66:	2300      	movs	r3, #0
 800cf68:	77fb      	strb	r3, [r7, #31]
 800cf6a:	e00d      	b.n	800cf88 <UART_SetConfig+0x348>
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	77fb      	strb	r3, [r7, #31]
 800cf70:	e00a      	b.n	800cf88 <UART_SetConfig+0x348>
 800cf72:	2304      	movs	r3, #4
 800cf74:	77fb      	strb	r3, [r7, #31]
 800cf76:	e007      	b.n	800cf88 <UART_SetConfig+0x348>
 800cf78:	2308      	movs	r3, #8
 800cf7a:	77fb      	strb	r3, [r7, #31]
 800cf7c:	e004      	b.n	800cf88 <UART_SetConfig+0x348>
 800cf7e:	2310      	movs	r3, #16
 800cf80:	77fb      	strb	r3, [r7, #31]
 800cf82:	e001      	b.n	800cf88 <UART_SetConfig+0x348>
 800cf84:	2310      	movs	r3, #16
 800cf86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	69db      	ldr	r3, [r3, #28]
 800cf8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf90:	d15b      	bne.n	800d04a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800cf92:	7ffb      	ldrb	r3, [r7, #31]
 800cf94:	2b08      	cmp	r3, #8
 800cf96:	d828      	bhi.n	800cfea <UART_SetConfig+0x3aa>
 800cf98:	a201      	add	r2, pc, #4	@ (adr r2, 800cfa0 <UART_SetConfig+0x360>)
 800cf9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf9e:	bf00      	nop
 800cfa0:	0800cfc5 	.word	0x0800cfc5
 800cfa4:	0800cfcd 	.word	0x0800cfcd
 800cfa8:	0800cfd5 	.word	0x0800cfd5
 800cfac:	0800cfeb 	.word	0x0800cfeb
 800cfb0:	0800cfdb 	.word	0x0800cfdb
 800cfb4:	0800cfeb 	.word	0x0800cfeb
 800cfb8:	0800cfeb 	.word	0x0800cfeb
 800cfbc:	0800cfeb 	.word	0x0800cfeb
 800cfc0:	0800cfe3 	.word	0x0800cfe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfc4:	f7fb ff82 	bl	8008ecc <HAL_RCC_GetPCLK1Freq>
 800cfc8:	61b8      	str	r0, [r7, #24]
        break;
 800cfca:	e013      	b.n	800cff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfcc:	f7fb ff92 	bl	8008ef4 <HAL_RCC_GetPCLK2Freq>
 800cfd0:	61b8      	str	r0, [r7, #24]
        break;
 800cfd2:	e00f      	b.n	800cff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cfd4:	4b4b      	ldr	r3, [pc, #300]	@ (800d104 <UART_SetConfig+0x4c4>)
 800cfd6:	61bb      	str	r3, [r7, #24]
        break;
 800cfd8:	e00c      	b.n	800cff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfda:	f7fb fea5 	bl	8008d28 <HAL_RCC_GetSysClockFreq>
 800cfde:	61b8      	str	r0, [r7, #24]
        break;
 800cfe0:	e008      	b.n	800cff4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfe6:	61bb      	str	r3, [r7, #24]
        break;
 800cfe8:	e004      	b.n	800cff4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800cfea:	2300      	movs	r3, #0
 800cfec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	77bb      	strb	r3, [r7, #30]
        break;
 800cff2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d074      	beq.n	800d0e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	005a      	lsls	r2, r3, #1
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	085b      	lsrs	r3, r3, #1
 800d004:	441a      	add	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d00e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	2b0f      	cmp	r3, #15
 800d014:	d916      	bls.n	800d044 <UART_SetConfig+0x404>
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d01c:	d212      	bcs.n	800d044 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	b29b      	uxth	r3, r3
 800d022:	f023 030f 	bic.w	r3, r3, #15
 800d026:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	085b      	lsrs	r3, r3, #1
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	f003 0307 	and.w	r3, r3, #7
 800d032:	b29a      	uxth	r2, r3
 800d034:	89fb      	ldrh	r3, [r7, #14]
 800d036:	4313      	orrs	r3, r2
 800d038:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	89fa      	ldrh	r2, [r7, #14]
 800d040:	60da      	str	r2, [r3, #12]
 800d042:	e04f      	b.n	800d0e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d044:	2301      	movs	r3, #1
 800d046:	77bb      	strb	r3, [r7, #30]
 800d048:	e04c      	b.n	800d0e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d04a:	7ffb      	ldrb	r3, [r7, #31]
 800d04c:	2b08      	cmp	r3, #8
 800d04e:	d828      	bhi.n	800d0a2 <UART_SetConfig+0x462>
 800d050:	a201      	add	r2, pc, #4	@ (adr r2, 800d058 <UART_SetConfig+0x418>)
 800d052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d056:	bf00      	nop
 800d058:	0800d07d 	.word	0x0800d07d
 800d05c:	0800d085 	.word	0x0800d085
 800d060:	0800d08d 	.word	0x0800d08d
 800d064:	0800d0a3 	.word	0x0800d0a3
 800d068:	0800d093 	.word	0x0800d093
 800d06c:	0800d0a3 	.word	0x0800d0a3
 800d070:	0800d0a3 	.word	0x0800d0a3
 800d074:	0800d0a3 	.word	0x0800d0a3
 800d078:	0800d09b 	.word	0x0800d09b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d07c:	f7fb ff26 	bl	8008ecc <HAL_RCC_GetPCLK1Freq>
 800d080:	61b8      	str	r0, [r7, #24]
        break;
 800d082:	e013      	b.n	800d0ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d084:	f7fb ff36 	bl	8008ef4 <HAL_RCC_GetPCLK2Freq>
 800d088:	61b8      	str	r0, [r7, #24]
        break;
 800d08a:	e00f      	b.n	800d0ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d08c:	4b1d      	ldr	r3, [pc, #116]	@ (800d104 <UART_SetConfig+0x4c4>)
 800d08e:	61bb      	str	r3, [r7, #24]
        break;
 800d090:	e00c      	b.n	800d0ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d092:	f7fb fe49 	bl	8008d28 <HAL_RCC_GetSysClockFreq>
 800d096:	61b8      	str	r0, [r7, #24]
        break;
 800d098:	e008      	b.n	800d0ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d09a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d09e:	61bb      	str	r3, [r7, #24]
        break;
 800d0a0:	e004      	b.n	800d0ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	77bb      	strb	r3, [r7, #30]
        break;
 800d0aa:	bf00      	nop
    }

    if (pclk != 0U)
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d018      	beq.n	800d0e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	085a      	lsrs	r2, r3, #1
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	441a      	add	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	2b0f      	cmp	r3, #15
 800d0ca:	d909      	bls.n	800d0e0 <UART_SetConfig+0x4a0>
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0d2:	d205      	bcs.n	800d0e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	60da      	str	r2, [r3, #12]
 800d0de:	e001      	b.n	800d0e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d0f0:	7fbb      	ldrb	r3, [r7, #30]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3720      	adds	r7, #32
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	40007c00 	.word	0x40007c00
 800d100:	40023800 	.word	0x40023800
 800d104:	00f42400 	.word	0x00f42400

0800d108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d114:	f003 0308 	and.w	r3, r3, #8
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00a      	beq.n	800d132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	430a      	orrs	r2, r1
 800d130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00a      	beq.n	800d154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	430a      	orrs	r2, r1
 800d152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d158:	f003 0302 	and.w	r3, r3, #2
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00a      	beq.n	800d176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	430a      	orrs	r2, r1
 800d174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d17a:	f003 0304 	and.w	r3, r3, #4
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d00a      	beq.n	800d198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	430a      	orrs	r2, r1
 800d196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d19c:	f003 0310 	and.w	r3, r3, #16
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d00a      	beq.n	800d1ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	430a      	orrs	r2, r1
 800d1b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1be:	f003 0320 	and.w	r3, r3, #32
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00a      	beq.n	800d1dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	430a      	orrs	r2, r1
 800d1da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d01a      	beq.n	800d21e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	430a      	orrs	r2, r1
 800d1fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d206:	d10a      	bne.n	800d21e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	430a      	orrs	r2, r1
 800d21c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00a      	beq.n	800d240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	430a      	orrs	r2, r1
 800d23e:	605a      	str	r2, [r3, #4]
  }
}
 800d240:	bf00      	nop
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08c      	sub	sp, #48	@ 0x30
 800d250:	af02      	add	r7, sp, #8
 800d252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d25c:	f7f6 f980 	bl	8003560 <HAL_GetTick>
 800d260:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f003 0308 	and.w	r3, r3, #8
 800d26c:	2b08      	cmp	r3, #8
 800d26e:	d12e      	bne.n	800d2ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d270:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d278:	2200      	movs	r2, #0
 800d27a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 f83b 	bl	800d2fa <UART_WaitOnFlagUntilTimeout>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d021      	beq.n	800d2ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	e853 3f00 	ldrex	r3, [r3]
 800d296:	60fb      	str	r3, [r7, #12]
   return(result);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d29e:	623b      	str	r3, [r7, #32]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
 800d2a8:	61fb      	str	r3, [r7, #28]
 800d2aa:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ac:	69b9      	ldr	r1, [r7, #24]
 800d2ae:	69fa      	ldr	r2, [r7, #28]
 800d2b0:	e841 2300 	strex	r3, r2, [r1]
 800d2b4:	617b      	str	r3, [r7, #20]
   return(result);
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1e6      	bne.n	800d28a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2220      	movs	r2, #32
 800d2c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d2ca:	2303      	movs	r3, #3
 800d2cc:	e011      	b.n	800d2f2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2220      	movs	r2, #32
 800d2d2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2220      	movs	r2, #32
 800d2d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3728      	adds	r7, #40	@ 0x28
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b084      	sub	sp, #16
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	60f8      	str	r0, [r7, #12]
 800d302:	60b9      	str	r1, [r7, #8]
 800d304:	603b      	str	r3, [r7, #0]
 800d306:	4613      	mov	r3, r2
 800d308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d30a:	e04f      	b.n	800d3ac <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d312:	d04b      	beq.n	800d3ac <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d314:	f7f6 f924 	bl	8003560 <HAL_GetTick>
 800d318:	4602      	mov	r2, r0
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	69ba      	ldr	r2, [r7, #24]
 800d320:	429a      	cmp	r2, r3
 800d322:	d302      	bcc.n	800d32a <UART_WaitOnFlagUntilTimeout+0x30>
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d32a:	2303      	movs	r3, #3
 800d32c:	e04e      	b.n	800d3cc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f003 0304 	and.w	r3, r3, #4
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d037      	beq.n	800d3ac <UART_WaitOnFlagUntilTimeout+0xb2>
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	2b80      	cmp	r3, #128	@ 0x80
 800d340:	d034      	beq.n	800d3ac <UART_WaitOnFlagUntilTimeout+0xb2>
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	2b40      	cmp	r3, #64	@ 0x40
 800d346:	d031      	beq.n	800d3ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	69db      	ldr	r3, [r3, #28]
 800d34e:	f003 0308 	and.w	r3, r3, #8
 800d352:	2b08      	cmp	r3, #8
 800d354:	d110      	bne.n	800d378 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2208      	movs	r2, #8
 800d35c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	f000 f838 	bl	800d3d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2208      	movs	r2, #8
 800d368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2200      	movs	r2, #0
 800d370:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	e029      	b.n	800d3cc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	69db      	ldr	r3, [r3, #28]
 800d37e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d386:	d111      	bne.n	800d3ac <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d390:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f000 f81e 	bl	800d3d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2220      	movs	r2, #32
 800d39c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	e00f      	b.n	800d3cc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	69da      	ldr	r2, [r3, #28]
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	4013      	ands	r3, r2
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	bf0c      	ite	eq
 800d3bc:	2301      	moveq	r3, #1
 800d3be:	2300      	movne	r3, #0
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	79fb      	ldrb	r3, [r7, #7]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d0a0      	beq.n	800d30c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b095      	sub	sp, #84	@ 0x54
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3e4:	e853 3f00 	ldrex	r3, [r3]
 800d3e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d3f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d402:	e841 2300 	strex	r3, r2, [r1]
 800d406:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1e6      	bne.n	800d3dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	3308      	adds	r3, #8
 800d414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	e853 3f00 	ldrex	r3, [r3]
 800d41c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	f023 0301 	bic.w	r3, r3, #1
 800d424:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	3308      	adds	r3, #8
 800d42c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d42e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d436:	e841 2300 	strex	r3, r2, [r1]
 800d43a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1e5      	bne.n	800d40e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d446:	2b01      	cmp	r3, #1
 800d448:	d118      	bne.n	800d47c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	e853 3f00 	ldrex	r3, [r3]
 800d456:	60bb      	str	r3, [r7, #8]
   return(result);
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f023 0310 	bic.w	r3, r3, #16
 800d45e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	461a      	mov	r2, r3
 800d466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d468:	61bb      	str	r3, [r7, #24]
 800d46a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46c:	6979      	ldr	r1, [r7, #20]
 800d46e:	69ba      	ldr	r2, [r7, #24]
 800d470:	e841 2300 	strex	r3, r2, [r1]
 800d474:	613b      	str	r3, [r7, #16]
   return(result);
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1e6      	bne.n	800d44a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2220      	movs	r2, #32
 800d480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d490:	bf00      	nop
 800d492:	3754      	adds	r7, #84	@ 0x54
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d121      	bne.n	800d4f2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	4b27      	ldr	r3, [pc, #156]	@ (800d550 <FMC_SDRAM_Init+0xb4>)
 800d4b4:	4013      	ands	r3, r2
 800d4b6:	683a      	ldr	r2, [r7, #0]
 800d4b8:	6851      	ldr	r1, [r2, #4]
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	6892      	ldr	r2, [r2, #8]
 800d4be:	4311      	orrs	r1, r2
 800d4c0:	683a      	ldr	r2, [r7, #0]
 800d4c2:	68d2      	ldr	r2, [r2, #12]
 800d4c4:	4311      	orrs	r1, r2
 800d4c6:	683a      	ldr	r2, [r7, #0]
 800d4c8:	6912      	ldr	r2, [r2, #16]
 800d4ca:	4311      	orrs	r1, r2
 800d4cc:	683a      	ldr	r2, [r7, #0]
 800d4ce:	6952      	ldr	r2, [r2, #20]
 800d4d0:	4311      	orrs	r1, r2
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	6992      	ldr	r2, [r2, #24]
 800d4d6:	4311      	orrs	r1, r2
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	69d2      	ldr	r2, [r2, #28]
 800d4dc:	4311      	orrs	r1, r2
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	6a12      	ldr	r2, [r2, #32]
 800d4e2:	4311      	orrs	r1, r2
 800d4e4:	683a      	ldr	r2, [r7, #0]
 800d4e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d4e8:	430a      	orrs	r2, r1
 800d4ea:	431a      	orrs	r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	601a      	str	r2, [r3, #0]
 800d4f0:	e026      	b.n	800d540 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	69d9      	ldr	r1, [r3, #28]
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	6a1b      	ldr	r3, [r3, #32]
 800d502:	4319      	orrs	r1, r3
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d508:	430b      	orrs	r3, r1
 800d50a:	431a      	orrs	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	685a      	ldr	r2, [r3, #4]
 800d514:	4b0e      	ldr	r3, [pc, #56]	@ (800d550 <FMC_SDRAM_Init+0xb4>)
 800d516:	4013      	ands	r3, r2
 800d518:	683a      	ldr	r2, [r7, #0]
 800d51a:	6851      	ldr	r1, [r2, #4]
 800d51c:	683a      	ldr	r2, [r7, #0]
 800d51e:	6892      	ldr	r2, [r2, #8]
 800d520:	4311      	orrs	r1, r2
 800d522:	683a      	ldr	r2, [r7, #0]
 800d524:	68d2      	ldr	r2, [r2, #12]
 800d526:	4311      	orrs	r1, r2
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	6912      	ldr	r2, [r2, #16]
 800d52c:	4311      	orrs	r1, r2
 800d52e:	683a      	ldr	r2, [r7, #0]
 800d530:	6952      	ldr	r2, [r2, #20]
 800d532:	4311      	orrs	r1, r2
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	6992      	ldr	r2, [r2, #24]
 800d538:	430a      	orrs	r2, r1
 800d53a:	431a      	orrs	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d540:	2300      	movs	r3, #0
}
 800d542:	4618      	mov	r0, r3
 800d544:	370c      	adds	r7, #12
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	ffff8000 	.word	0xffff8000

0800d554 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d128      	bne.n	800d5b8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	1e59      	subs	r1, r3, #1
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	3b01      	subs	r3, #1
 800d57a:	011b      	lsls	r3, r3, #4
 800d57c:	4319      	orrs	r1, r3
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	689b      	ldr	r3, [r3, #8]
 800d582:	3b01      	subs	r3, #1
 800d584:	021b      	lsls	r3, r3, #8
 800d586:	4319      	orrs	r1, r3
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	3b01      	subs	r3, #1
 800d58e:	031b      	lsls	r3, r3, #12
 800d590:	4319      	orrs	r1, r3
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	3b01      	subs	r3, #1
 800d598:	041b      	lsls	r3, r3, #16
 800d59a:	4319      	orrs	r1, r3
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	695b      	ldr	r3, [r3, #20]
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	051b      	lsls	r3, r3, #20
 800d5a4:	4319      	orrs	r1, r3
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	061b      	lsls	r3, r3, #24
 800d5ae:	430b      	orrs	r3, r1
 800d5b0:	431a      	orrs	r2, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	609a      	str	r2, [r3, #8]
 800d5b6:	e02d      	b.n	800d614 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	689a      	ldr	r2, [r3, #8]
 800d5bc:	4b19      	ldr	r3, [pc, #100]	@ (800d624 <FMC_SDRAM_Timing_Init+0xd0>)
 800d5be:	4013      	ands	r3, r2
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	68d2      	ldr	r2, [r2, #12]
 800d5c4:	3a01      	subs	r2, #1
 800d5c6:	0311      	lsls	r1, r2, #12
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	6952      	ldr	r2, [r2, #20]
 800d5cc:	3a01      	subs	r2, #1
 800d5ce:	0512      	lsls	r2, r2, #20
 800d5d0:	430a      	orrs	r2, r1
 800d5d2:	431a      	orrs	r2, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	1e59      	subs	r1, r3, #1
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	011b      	lsls	r3, r3, #4
 800d5ee:	4319      	orrs	r1, r3
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	021b      	lsls	r3, r3, #8
 800d5f8:	4319      	orrs	r1, r3
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	691b      	ldr	r3, [r3, #16]
 800d5fe:	3b01      	subs	r3, #1
 800d600:	041b      	lsls	r3, r3, #16
 800d602:	4319      	orrs	r1, r3
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	699b      	ldr	r3, [r3, #24]
 800d608:	3b01      	subs	r3, #1
 800d60a:	061b      	lsls	r3, r3, #24
 800d60c:	430b      	orrs	r3, r1
 800d60e:	431a      	orrs	r2, r3
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d614:	2300      	movs	r3, #0
}
 800d616:	4618      	mov	r0, r3
 800d618:	3714      	adds	r7, #20
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop
 800d624:	ff0f0fff 	.word	0xff0f0fff

0800d628 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d628:	b084      	sub	sp, #16
 800d62a:	b480      	push	{r7}
 800d62c:	b085      	sub	sp, #20
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	f107 001c 	add.w	r0, r7, #28
 800d636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d63a:	2300      	movs	r3, #0
 800d63c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d63e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d640:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d642:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d646:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d64a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d64e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d652:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	4313      	orrs	r3, r2
 800d658:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	685a      	ldr	r2, [r3, #4]
 800d65e:	4b07      	ldr	r3, [pc, #28]	@ (800d67c <SDMMC_Init+0x54>)
 800d660:	4013      	ands	r3, r2
 800d662:	68fa      	ldr	r2, [r7, #12]
 800d664:	431a      	orrs	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d66a:	2300      	movs	r3, #0
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3714      	adds	r7, #20
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	b004      	add	sp, #16
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	ffff8100 	.word	0xffff8100

0800d680 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d68e:	4618      	mov	r0, r3
 800d690:	370c      	adds	r7, #12
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr

0800d69a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d69a:	b480      	push	{r7}
 800d69c:	b083      	sub	sp, #12
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2203      	movs	r2, #3
 800d6a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d6b6:	b480      	push	{r7}
 800d6b8:	b083      	sub	sp, #12
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f003 0303 	and.w	r3, r3, #3
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	370c      	adds	r7, #12
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
	...

0800d6d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d6f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d6f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d6fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	4313      	orrs	r3, r2
 800d704:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	68da      	ldr	r2, [r3, #12]
 800d70a:	4b06      	ldr	r3, [pc, #24]	@ (800d724 <SDMMC_SendCommand+0x50>)
 800d70c:	4013      	ands	r3, r2
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	431a      	orrs	r2, r3
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d716:	2300      	movs	r3, #0
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3714      	adds	r7, #20
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr
 800d724:	fffff000 	.word	0xfffff000

0800d728 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	691b      	ldr	r3, [r3, #16]
 800d734:	b2db      	uxtb	r3, r3
}
 800d736:	4618      	mov	r0, r3
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d742:	b480      	push	{r7}
 800d744:	b085      	sub	sp, #20
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	3314      	adds	r3, #20
 800d750:	461a      	mov	r2, r3
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	4413      	add	r3, r2
 800d756:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
}  
 800d75c:	4618      	mov	r0, r3
 800d75e:	3714      	adds	r7, #20
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d772:	2300      	movs	r3, #0
 800d774:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	685a      	ldr	r2, [r3, #4]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d78e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d794:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d79a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7a6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	431a      	orrs	r2, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d7b2:	2300      	movs	r3, #0

}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3714      	adds	r7, #20
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b088      	sub	sp, #32
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d7ce:	2310      	movs	r3, #16
 800d7d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7d2:	2340      	movs	r3, #64	@ 0x40
 800d7d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7e0:	f107 0308 	add.w	r3, r7, #8
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7ff ff74 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d7ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7f0:	2110      	movs	r1, #16
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fa1a 	bl	800dc2c <SDMMC_GetCmdResp1>
 800d7f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7fa:	69fb      	ldr	r3, [r7, #28]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3720      	adds	r7, #32
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d812:	2311      	movs	r3, #17
 800d814:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d816:	2340      	movs	r3, #64	@ 0x40
 800d818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d81a:	2300      	movs	r3, #0
 800d81c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d81e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d824:	f107 0308 	add.w	r3, r7, #8
 800d828:	4619      	mov	r1, r3
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7ff ff52 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d830:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d834:	2111      	movs	r1, #17
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 f9f8 	bl	800dc2c <SDMMC_GetCmdResp1>
 800d83c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d83e:	69fb      	ldr	r3, [r7, #28]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3720      	adds	r7, #32
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d856:	2312      	movs	r3, #18
 800d858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d85a:	2340      	movs	r3, #64	@ 0x40
 800d85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d85e:	2300      	movs	r3, #0
 800d860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d866:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d868:	f107 0308 	add.w	r3, r7, #8
 800d86c:	4619      	mov	r1, r3
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f7ff ff30 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d874:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d878:	2112      	movs	r1, #18
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f9d6 	bl	800dc2c <SDMMC_GetCmdResp1>
 800d880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d882:	69fb      	ldr	r3, [r7, #28]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3720      	adds	r7, #32
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b088      	sub	sp, #32
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d89a:	2318      	movs	r3, #24
 800d89c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d89e:	2340      	movs	r3, #64	@ 0x40
 800d8a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8ac:	f107 0308 	add.w	r3, r7, #8
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff ff0e 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d8b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d8bc:	2118      	movs	r1, #24
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 f9b4 	bl	800dc2c <SDMMC_GetCmdResp1>
 800d8c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8c6:	69fb      	ldr	r3, [r7, #28]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3720      	adds	r7, #32
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b088      	sub	sp, #32
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d8de:	2319      	movs	r3, #25
 800d8e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8e2:	2340      	movs	r3, #64	@ 0x40
 800d8e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8f0:	f107 0308 	add.w	r3, r7, #8
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7ff feec 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d8fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d900:	2119      	movs	r1, #25
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f992 	bl	800dc2c <SDMMC_GetCmdResp1>
 800d908:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d90a:	69fb      	ldr	r3, [r7, #28]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3720      	adds	r7, #32
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b088      	sub	sp, #32
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d91c:	2300      	movs	r3, #0
 800d91e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d920:	230c      	movs	r3, #12
 800d922:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d924:	2340      	movs	r3, #64	@ 0x40
 800d926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d928:	2300      	movs	r3, #0
 800d92a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d92c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d930:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d932:	f107 0308 	add.w	r3, r7, #8
 800d936:	4619      	mov	r1, r3
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f7ff fecb 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d93e:	4a05      	ldr	r2, [pc, #20]	@ (800d954 <SDMMC_CmdStopTransfer+0x40>)
 800d940:	210c      	movs	r1, #12
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 f972 	bl	800dc2c <SDMMC_GetCmdResp1>
 800d948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d94a:	69fb      	ldr	r3, [r7, #28]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3720      	adds	r7, #32
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	05f5e100 	.word	0x05f5e100

0800d958 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08a      	sub	sp, #40	@ 0x28
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d968:	2307      	movs	r3, #7
 800d96a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d96c:	2340      	movs	r3, #64	@ 0x40
 800d96e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d970:	2300      	movs	r3, #0
 800d972:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d978:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d97a:	f107 0310 	add.w	r3, r7, #16
 800d97e:	4619      	mov	r1, r3
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f7ff fea7 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d98a:	2107      	movs	r1, #7
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f000 f94d 	bl	800dc2c <SDMMC_GetCmdResp1>
 800d992:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d996:	4618      	mov	r0, r3
 800d998:	3728      	adds	r7, #40	@ 0x28
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b088      	sub	sp, #32
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9bc:	f107 0308 	add.w	r3, r7, #8
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff fe86 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 fb67 	bl	800e09c <SDMMC_GetCmdError>
 800d9ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9d0:	69fb      	ldr	r3, [r7, #28]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3720      	adds	r7, #32
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b088      	sub	sp, #32
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d9e2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d9e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d9e8:	2308      	movs	r3, #8
 800d9ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d9ec:	2340      	movs	r3, #64	@ 0x40
 800d9ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9fa:	f107 0308 	add.w	r3, r7, #8
 800d9fe:	4619      	mov	r1, r3
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f7ff fe67 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 fafa 	bl	800e000 <SDMMC_GetCmdResp7>
 800da0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da0e:	69fb      	ldr	r3, [r7, #28]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3720      	adds	r7, #32
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b088      	sub	sp, #32
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800da26:	2337      	movs	r3, #55	@ 0x37
 800da28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da2a:	2340      	movs	r3, #64	@ 0x40
 800da2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da2e:	2300      	movs	r3, #0
 800da30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da38:	f107 0308 	add.w	r3, r7, #8
 800da3c:	4619      	mov	r1, r3
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f7ff fe48 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800da44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da48:	2137      	movs	r1, #55	@ 0x37
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 f8ee 	bl	800dc2c <SDMMC_GetCmdResp1>
 800da50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da52:	69fb      	ldr	r3, [r7, #28]
}
 800da54:	4618      	mov	r0, r3
 800da56:	3720      	adds	r7, #32
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b088      	sub	sp, #32
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	4b0d      	ldr	r3, [pc, #52]	@ (800daa0 <SDMMC_CmdAppOperCommand+0x44>)
 800da6a:	4313      	orrs	r3, r2
 800da6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800da6e:	2329      	movs	r3, #41	@ 0x29
 800da70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800da72:	2340      	movs	r3, #64	@ 0x40
 800da74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800da76:	2300      	movs	r3, #0
 800da78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800da7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800da80:	f107 0308 	add.w	r3, r7, #8
 800da84:	4619      	mov	r1, r3
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7ff fe24 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 fa03 	bl	800de98 <SDMMC_GetCmdResp3>
 800da92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800da94:	69fb      	ldr	r3, [r7, #28]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3720      	adds	r7, #32
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	80100000 	.word	0x80100000

0800daa4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b088      	sub	sp, #32
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dab2:	2306      	movs	r3, #6
 800dab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dab6:	2340      	movs	r3, #64	@ 0x40
 800dab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800daba:	2300      	movs	r3, #0
 800dabc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dabe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dac2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dac4:	f107 0308 	add.w	r3, r7, #8
 800dac8:	4619      	mov	r1, r3
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f7ff fe02 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dad4:	2106      	movs	r1, #6
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 f8a8 	bl	800dc2c <SDMMC_GetCmdResp1>
 800dadc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dade:	69fb      	ldr	r3, [r7, #28]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3720      	adds	r7, #32
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b088      	sub	sp, #32
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800daf0:	2300      	movs	r3, #0
 800daf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800daf4:	2333      	movs	r3, #51	@ 0x33
 800daf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800daf8:	2340      	movs	r3, #64	@ 0x40
 800dafa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dafc:	2300      	movs	r3, #0
 800dafe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db06:	f107 0308 	add.w	r3, r7, #8
 800db0a:	4619      	mov	r1, r3
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f7ff fde1 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800db12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db16:	2133      	movs	r1, #51	@ 0x33
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f000 f887 	bl	800dc2c <SDMMC_GetCmdResp1>
 800db1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db20:	69fb      	ldr	r3, [r7, #28]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3720      	adds	r7, #32
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b088      	sub	sp, #32
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800db32:	2300      	movs	r3, #0
 800db34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800db36:	2302      	movs	r3, #2
 800db38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800db3a:	23c0      	movs	r3, #192	@ 0xc0
 800db3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db3e:	2300      	movs	r3, #0
 800db40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db48:	f107 0308 	add.w	r3, r7, #8
 800db4c:	4619      	mov	r1, r3
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff fdc0 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 f957 	bl	800de08 <SDMMC_GetCmdResp2>
 800db5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db5c:	69fb      	ldr	r3, [r7, #28]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3720      	adds	r7, #32
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b088      	sub	sp, #32
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800db74:	2309      	movs	r3, #9
 800db76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800db78:	23c0      	movs	r3, #192	@ 0xc0
 800db7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db7c:	2300      	movs	r3, #0
 800db7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db86:	f107 0308 	add.w	r3, r7, #8
 800db8a:	4619      	mov	r1, r3
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f7ff fda1 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f938 	bl	800de08 <SDMMC_GetCmdResp2>
 800db98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db9a:	69fb      	ldr	r3, [r7, #28]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3720      	adds	r7, #32
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800dbb2:	2303      	movs	r3, #3
 800dbb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbb6:	2340      	movs	r3, #64	@ 0x40
 800dbb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbc4:	f107 0308 	add.w	r3, r7, #8
 800dbc8:	4619      	mov	r1, r3
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7ff fd82 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800dbd0:	683a      	ldr	r2, [r7, #0]
 800dbd2:	2103      	movs	r1, #3
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 f99d 	bl	800df14 <SDMMC_GetCmdResp6>
 800dbda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbdc:	69fb      	ldr	r3, [r7, #28]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3720      	adds	r7, #32
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b088      	sub	sp, #32
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800dbf4:	230d      	movs	r3, #13
 800dbf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbf8:	2340      	movs	r3, #64	@ 0x40
 800dbfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc06:	f107 0308 	add.w	r3, r7, #8
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7ff fd61 	bl	800d6d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dc12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc16:	210d      	movs	r1, #13
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 f807 	bl	800dc2c <SDMMC_GetCmdResp1>
 800dc1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc20:	69fb      	ldr	r3, [r7, #28]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3720      	adds	r7, #32
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
	...

0800dc2c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b088      	sub	sp, #32
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	460b      	mov	r3, r1
 800dc36:	607a      	str	r2, [r7, #4]
 800dc38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800dc3a:	4b70      	ldr	r3, [pc, #448]	@ (800ddfc <SDMMC_GetCmdResp1+0x1d0>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4a70      	ldr	r2, [pc, #448]	@ (800de00 <SDMMC_GetCmdResp1+0x1d4>)
 800dc40:	fba2 2303 	umull	r2, r3, r2, r3
 800dc44:	0a5a      	lsrs	r2, r3, #9
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	fb02 f303 	mul.w	r3, r2, r3
 800dc4c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	1e5a      	subs	r2, r3, #1
 800dc52:	61fa      	str	r2, [r7, #28]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d102      	bne.n	800dc5e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc5c:	e0c9      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc62:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d0ef      	beq.n	800dc4e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dc6e:	69bb      	ldr	r3, [r7, #24]
 800dc70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1ea      	bne.n	800dc4e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc7c:	f003 0304 	and.w	r3, r3, #4
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d004      	beq.n	800dc8e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2204      	movs	r2, #4
 800dc88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc8a:	2304      	movs	r3, #4
 800dc8c:	e0b1      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc92:	f003 0301 	and.w	r3, r3, #1
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d004      	beq.n	800dca4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e0a6      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	22c5      	movs	r2, #197	@ 0xc5
 800dca8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f7ff fd3c 	bl	800d728 <SDMMC_GetCommandResponse>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	7afb      	ldrb	r3, [r7, #11]
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d001      	beq.n	800dcbe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e099      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f7ff fd3e 	bl	800d742 <SDMMC_GetResponse>
 800dcc6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dcc8:	697a      	ldr	r2, [r7, #20]
 800dcca:	4b4e      	ldr	r3, [pc, #312]	@ (800de04 <SDMMC_GetCmdResp1+0x1d8>)
 800dccc:	4013      	ands	r3, r2
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	e08d      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	da02      	bge.n	800dce2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dcdc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dce0:	e087      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dcec:	2340      	movs	r3, #64	@ 0x40
 800dcee:	e080      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d001      	beq.n	800dcfe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dcfa:	2380      	movs	r3, #128	@ 0x80
 800dcfc:	e079      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dd08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dd0c:	e071      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dd18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dd1c:	e069      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d002      	beq.n	800dd2e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dd28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd2c:	e061      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d002      	beq.n	800dd3e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dd38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dd3c:	e059      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d002      	beq.n	800dd4e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dd48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd4c:	e051      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dd58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dd5c:	e049      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d002      	beq.n	800dd6e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dd68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800dd6c:	e041      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d002      	beq.n	800dd7e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800dd78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd7c:	e039      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dd88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800dd8c:	e031      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d002      	beq.n	800dd9e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dd98:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800dd9c:	e029      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dda8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ddac:	e021      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d002      	beq.n	800ddbe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ddb8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ddbc:	e019      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ddc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ddcc:	e011      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ddd8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800dddc:	e009      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	f003 0308 	and.w	r3, r3, #8
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d002      	beq.n	800ddee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dde8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ddec:	e001      	b.n	800ddf2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ddee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3720      	adds	r7, #32
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	20000000 	.word	0x20000000
 800de00:	10624dd3 	.word	0x10624dd3
 800de04:	fdffe008 	.word	0xfdffe008

0800de08 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800de08:	b480      	push	{r7}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800de10:	4b1f      	ldr	r3, [pc, #124]	@ (800de90 <SDMMC_GetCmdResp2+0x88>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4a1f      	ldr	r2, [pc, #124]	@ (800de94 <SDMMC_GetCmdResp2+0x8c>)
 800de16:	fba2 2303 	umull	r2, r3, r2, r3
 800de1a:	0a5b      	lsrs	r3, r3, #9
 800de1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de20:	fb02 f303 	mul.w	r3, r2, r3
 800de24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	1e5a      	subs	r2, r3, #1
 800de2a:	60fa      	str	r2, [r7, #12]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d102      	bne.n	800de36 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800de34:	e026      	b.n	800de84 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800de42:	2b00      	cmp	r3, #0
 800de44:	d0ef      	beq.n	800de26 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1ea      	bne.n	800de26 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de54:	f003 0304 	and.w	r3, r3, #4
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d004      	beq.n	800de66 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2204      	movs	r2, #4
 800de60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de62:	2304      	movs	r3, #4
 800de64:	e00e      	b.n	800de84 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de6a:	f003 0301 	and.w	r3, r3, #1
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d004      	beq.n	800de7c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2201      	movs	r2, #1
 800de76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de78:	2301      	movs	r3, #1
 800de7a:	e003      	b.n	800de84 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	22c5      	movs	r2, #197	@ 0xc5
 800de80:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3714      	adds	r7, #20
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr
 800de90:	20000000 	.word	0x20000000
 800de94:	10624dd3 	.word	0x10624dd3

0800de98 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800de98:	b480      	push	{r7}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dea0:	4b1a      	ldr	r3, [pc, #104]	@ (800df0c <SDMMC_GetCmdResp3+0x74>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a1a      	ldr	r2, [pc, #104]	@ (800df10 <SDMMC_GetCmdResp3+0x78>)
 800dea6:	fba2 2303 	umull	r2, r3, r2, r3
 800deaa:	0a5b      	lsrs	r3, r3, #9
 800deac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800deb0:	fb02 f303 	mul.w	r3, r2, r3
 800deb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	1e5a      	subs	r2, r3, #1
 800deba:	60fa      	str	r2, [r7, #12]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d102      	bne.n	800dec6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dec0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dec4:	e01b      	b.n	800defe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d0ef      	beq.n	800deb6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1ea      	bne.n	800deb6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dee4:	f003 0304 	and.w	r3, r3, #4
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d004      	beq.n	800def6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2204      	movs	r2, #4
 800def0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800def2:	2304      	movs	r3, #4
 800def4:	e003      	b.n	800defe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	22c5      	movs	r2, #197	@ 0xc5
 800defa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800defc:	2300      	movs	r3, #0
}
 800defe:	4618      	mov	r0, r3
 800df00:	3714      	adds	r7, #20
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop
 800df0c:	20000000 	.word	0x20000000
 800df10:	10624dd3 	.word	0x10624dd3

0800df14 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b088      	sub	sp, #32
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	460b      	mov	r3, r1
 800df1e:	607a      	str	r2, [r7, #4]
 800df20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800df22:	4b35      	ldr	r3, [pc, #212]	@ (800dff8 <SDMMC_GetCmdResp6+0xe4>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a35      	ldr	r2, [pc, #212]	@ (800dffc <SDMMC_GetCmdResp6+0xe8>)
 800df28:	fba2 2303 	umull	r2, r3, r2, r3
 800df2c:	0a5b      	lsrs	r3, r3, #9
 800df2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df32:	fb02 f303 	mul.w	r3, r2, r3
 800df36:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	1e5a      	subs	r2, r3, #1
 800df3c:	61fa      	str	r2, [r7, #28]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d102      	bne.n	800df48 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df42:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800df46:	e052      	b.n	800dfee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df4c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800df54:	2b00      	cmp	r3, #0
 800df56:	d0ef      	beq.n	800df38 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1ea      	bne.n	800df38 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df66:	f003 0304 	and.w	r3, r3, #4
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d004      	beq.n	800df78 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2204      	movs	r2, #4
 800df72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df74:	2304      	movs	r3, #4
 800df76:	e03a      	b.n	800dfee <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df7c:	f003 0301 	and.w	r3, r3, #1
 800df80:	2b00      	cmp	r3, #0
 800df82:	d004      	beq.n	800df8e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2201      	movs	r2, #1
 800df88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df8a:	2301      	movs	r3, #1
 800df8c:	e02f      	b.n	800dfee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f7ff fbca 	bl	800d728 <SDMMC_GetCommandResponse>
 800df94:	4603      	mov	r3, r0
 800df96:	461a      	mov	r2, r3
 800df98:	7afb      	ldrb	r3, [r7, #11]
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d001      	beq.n	800dfa2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e025      	b.n	800dfee <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	22c5      	movs	r2, #197	@ 0xc5
 800dfa6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dfa8:	2100      	movs	r1, #0
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f7ff fbc9 	bl	800d742 <SDMMC_GetResponse>
 800dfb0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d106      	bne.n	800dfca <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	0c1b      	lsrs	r3, r3, #16
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	e011      	b.n	800dfee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d002      	beq.n	800dfda <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dfd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dfd8:	e009      	b.n	800dfee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d002      	beq.n	800dfea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dfe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dfe8:	e001      	b.n	800dfee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dfea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3720      	adds	r7, #32
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	20000000 	.word	0x20000000
 800dffc:	10624dd3 	.word	0x10624dd3

0800e000 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e000:	b480      	push	{r7}
 800e002:	b085      	sub	sp, #20
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e008:	4b22      	ldr	r3, [pc, #136]	@ (800e094 <SDMMC_GetCmdResp7+0x94>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4a22      	ldr	r2, [pc, #136]	@ (800e098 <SDMMC_GetCmdResp7+0x98>)
 800e00e:	fba2 2303 	umull	r2, r3, r2, r3
 800e012:	0a5b      	lsrs	r3, r3, #9
 800e014:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e018:	fb02 f303 	mul.w	r3, r2, r3
 800e01c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	1e5a      	subs	r2, r3, #1
 800e022:	60fa      	str	r2, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d102      	bne.n	800e02e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e028:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e02c:	e02c      	b.n	800e088 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e032:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d0ef      	beq.n	800e01e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1ea      	bne.n	800e01e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e04c:	f003 0304 	and.w	r3, r3, #4
 800e050:	2b00      	cmp	r3, #0
 800e052:	d004      	beq.n	800e05e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2204      	movs	r2, #4
 800e058:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e05a:	2304      	movs	r3, #4
 800e05c:	e014      	b.n	800e088 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e062:	f003 0301 	and.w	r3, r3, #1
 800e066:	2b00      	cmp	r3, #0
 800e068:	d004      	beq.n	800e074 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2201      	movs	r2, #1
 800e06e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e070:	2301      	movs	r3, #1
 800e072:	e009      	b.n	800e088 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d002      	beq.n	800e086 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2240      	movs	r2, #64	@ 0x40
 800e084:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e086:	2300      	movs	r3, #0
  
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3714      	adds	r7, #20
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr
 800e094:	20000000 	.word	0x20000000
 800e098:	10624dd3 	.word	0x10624dd3

0800e09c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e0a4:	4b11      	ldr	r3, [pc, #68]	@ (800e0ec <SDMMC_GetCmdError+0x50>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a11      	ldr	r2, [pc, #68]	@ (800e0f0 <SDMMC_GetCmdError+0x54>)
 800e0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ae:	0a5b      	lsrs	r3, r3, #9
 800e0b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e0b4:	fb02 f303 	mul.w	r3, r2, r3
 800e0b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	1e5a      	subs	r2, r3, #1
 800e0be:	60fa      	str	r2, [r7, #12]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d102      	bne.n	800e0ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e0c8:	e009      	b.n	800e0de <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0f1      	beq.n	800e0ba <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	22c5      	movs	r2, #197	@ 0xc5
 800e0da:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800e0dc:	2300      	movs	r3, #0
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3714      	adds	r7, #20
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	20000000 	.word	0x20000000
 800e0f0:	10624dd3 	.word	0x10624dd3

0800e0f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
 800e0fe:	f107 001c 	add.w	r0, r7, #28
 800e102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e106:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d121      	bne.n	800e152 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e112:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	68da      	ldr	r2, [r3, #12]
 800e11e:	4b21      	ldr	r3, [pc, #132]	@ (800e1a4 <USB_CoreInit+0xb0>)
 800e120:	4013      	ands	r3, r2
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e132:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e136:	2b01      	cmp	r3, #1
 800e138:	d105      	bne.n	800e146 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 f9d4 	bl	800e4f4 <USB_CoreReset>
 800e14c:	4603      	mov	r3, r0
 800e14e:	73fb      	strb	r3, [r7, #15]
 800e150:	e010      	b.n	800e174 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f9c8 	bl	800e4f4 <USB_CoreReset>
 800e164:	4603      	mov	r3, r0
 800e166:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e16c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800e174:	7fbb      	ldrb	r3, [r7, #30]
 800e176:	2b01      	cmp	r3, #1
 800e178:	d10b      	bne.n	800e192 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	689b      	ldr	r3, [r3, #8]
 800e17e:	f043 0206 	orr.w	r2, r3, #6
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	f043 0220 	orr.w	r2, r3, #32
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e192:	7bfb      	ldrb	r3, [r7, #15]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e19e:	b004      	add	sp, #16
 800e1a0:	4770      	bx	lr
 800e1a2:	bf00      	nop
 800e1a4:	ffbdffbf 	.word	0xffbdffbf

0800e1a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	f043 0201 	orr.w	r2, r3, #1
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	370c      	adds	r7, #12
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr

0800e1ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e1ca:	b480      	push	{r7}
 800e1cc:	b083      	sub	sp, #12
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	f023 0201 	bic.w	r2, r3, #1
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e208:	78fb      	ldrb	r3, [r7, #3]
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d115      	bne.n	800e23a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	68db      	ldr	r3, [r3, #12]
 800e212:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e21a:	200a      	movs	r0, #10
 800e21c:	f7f5 f9ac 	bl	8003578 <HAL_Delay>
      ms += 10U;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	330a      	adds	r3, #10
 800e224:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 f956 	bl	800e4d8 <USB_GetMode>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d01e      	beq.n	800e270 <USB_SetCurrentMode+0x84>
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2bc7      	cmp	r3, #199	@ 0xc7
 800e236:	d9f0      	bls.n	800e21a <USB_SetCurrentMode+0x2e>
 800e238:	e01a      	b.n	800e270 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e23a:	78fb      	ldrb	r3, [r7, #3]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d115      	bne.n	800e26c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e24c:	200a      	movs	r0, #10
 800e24e:	f7f5 f993 	bl	8003578 <HAL_Delay>
      ms += 10U;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	330a      	adds	r3, #10
 800e256:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 f93d 	bl	800e4d8 <USB_GetMode>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d005      	beq.n	800e270 <USB_SetCurrentMode+0x84>
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2bc7      	cmp	r3, #199	@ 0xc7
 800e268:	d9f0      	bls.n	800e24c <USB_SetCurrentMode+0x60>
 800e26a:	e001      	b.n	800e270 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e005      	b.n	800e27c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2bc8      	cmp	r3, #200	@ 0xc8
 800e274:	d101      	bne.n	800e27a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e276:	2301      	movs	r3, #1
 800e278:	e000      	b.n	800e27c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e28e:	2300      	movs	r3, #0
 800e290:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	3301      	adds	r3, #1
 800e296:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e29e:	d901      	bls.n	800e2a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e2a0:	2303      	movs	r3, #3
 800e2a2:	e01b      	b.n	800e2dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	691b      	ldr	r3, [r3, #16]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	daf2      	bge.n	800e292 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	019b      	lsls	r3, r3, #6
 800e2b4:	f043 0220 	orr.w	r2, r3, #32
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	3301      	adds	r3, #1
 800e2c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2c8:	d901      	bls.n	800e2ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e2ca:	2303      	movs	r3, #3
 800e2cc:	e006      	b.n	800e2dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	691b      	ldr	r3, [r3, #16]
 800e2d2:	f003 0320 	and.w	r3, r3, #32
 800e2d6:	2b20      	cmp	r3, #32
 800e2d8:	d0f0      	beq.n	800e2bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e2da:	2300      	movs	r3, #0
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3714      	adds	r7, #20
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e300:	d901      	bls.n	800e306 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e302:	2303      	movs	r3, #3
 800e304:	e018      	b.n	800e338 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	691b      	ldr	r3, [r3, #16]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	daf2      	bge.n	800e2f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e30e:	2300      	movs	r3, #0
 800e310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2210      	movs	r2, #16
 800e316:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	3301      	adds	r3, #1
 800e31c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e324:	d901      	bls.n	800e32a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e326:	2303      	movs	r3, #3
 800e328:	e006      	b.n	800e338 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	f003 0310 	and.w	r3, r3, #16
 800e332:	2b10      	cmp	r3, #16
 800e334:	d0f0      	beq.n	800e318 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3714      	adds	r7, #20
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e344:	b480      	push	{r7}
 800e346:	b089      	sub	sp, #36	@ 0x24
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	4611      	mov	r1, r2
 800e350:	461a      	mov	r2, r3
 800e352:	460b      	mov	r3, r1
 800e354:	71fb      	strb	r3, [r7, #7]
 800e356:	4613      	mov	r3, r2
 800e358:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e362:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e366:	2b00      	cmp	r3, #0
 800e368:	d123      	bne.n	800e3b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e36a:	88bb      	ldrh	r3, [r7, #4]
 800e36c:	3303      	adds	r3, #3
 800e36e:	089b      	lsrs	r3, r3, #2
 800e370:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e372:	2300      	movs	r3, #0
 800e374:	61bb      	str	r3, [r7, #24]
 800e376:	e018      	b.n	800e3aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	031a      	lsls	r2, r3, #12
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	4413      	add	r3, r2
 800e380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e384:	461a      	mov	r2, r3
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	3301      	adds	r3, #1
 800e390:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	3301      	adds	r3, #1
 800e396:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	3301      	adds	r3, #1
 800e39c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	61bb      	str	r3, [r7, #24]
 800e3aa:	69ba      	ldr	r2, [r7, #24]
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d3e2      	bcc.n	800e378 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3724      	adds	r7, #36	@ 0x24
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b08b      	sub	sp, #44	@ 0x2c
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e3d6:	88fb      	ldrh	r3, [r7, #6]
 800e3d8:	089b      	lsrs	r3, r3, #2
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e3de:	88fb      	ldrh	r3, [r7, #6]
 800e3e0:	f003 0303 	and.w	r3, r3, #3
 800e3e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	623b      	str	r3, [r7, #32]
 800e3ea:	e014      	b.n	800e416 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f6:	601a      	str	r2, [r3, #0]
    pDest++;
 800e3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e400:	3301      	adds	r3, #1
 800e402:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e406:	3301      	adds	r3, #1
 800e408:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e40c:	3301      	adds	r3, #1
 800e40e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e410:	6a3b      	ldr	r3, [r7, #32]
 800e412:	3301      	adds	r3, #1
 800e414:	623b      	str	r3, [r7, #32]
 800e416:	6a3a      	ldr	r2, [r7, #32]
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d3e6      	bcc.n	800e3ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e41e:	8bfb      	ldrh	r3, [r7, #30]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d01e      	beq.n	800e462 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e424:	2300      	movs	r3, #0
 800e426:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e42e:	461a      	mov	r2, r3
 800e430:	f107 0310 	add.w	r3, r7, #16
 800e434:	6812      	ldr	r2, [r2, #0]
 800e436:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e438:	693a      	ldr	r2, [r7, #16]
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	b2db      	uxtb	r3, r3
 800e43e:	00db      	lsls	r3, r3, #3
 800e440:	fa22 f303 	lsr.w	r3, r2, r3
 800e444:	b2da      	uxtb	r2, r3
 800e446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e448:	701a      	strb	r2, [r3, #0]
      i++;
 800e44a:	6a3b      	ldr	r3, [r7, #32]
 800e44c:	3301      	adds	r3, #1
 800e44e:	623b      	str	r3, [r7, #32]
      pDest++;
 800e450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e452:	3301      	adds	r3, #1
 800e454:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e456:	8bfb      	ldrh	r3, [r7, #30]
 800e458:	3b01      	subs	r3, #1
 800e45a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e45c:	8bfb      	ldrh	r3, [r7, #30]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1ea      	bne.n	800e438 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e464:	4618      	mov	r0, r3
 800e466:	372c      	adds	r7, #44	@ 0x2c
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e470:	b480      	push	{r7}
 800e472:	b085      	sub	sp, #20
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	695b      	ldr	r3, [r3, #20]
 800e47c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	699b      	ldr	r3, [r3, #24]
 800e482:	68fa      	ldr	r2, [r7, #12]
 800e484:	4013      	ands	r3, r2
 800e486:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e488:	68fb      	ldr	r3, [r7, #12]
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3714      	adds	r7, #20
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800e496:	b480      	push	{r7}
 800e498:	b085      	sub	sp, #20
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
 800e49e:	460b      	mov	r3, r1
 800e4a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800e4a6:	78fb      	ldrb	r3, [r7, #3]
 800e4a8:	015a      	lsls	r2, r3, #5
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800e4b6:	78fb      	ldrb	r3, [r7, #3]
 800e4b8:	015a      	lsls	r2, r3, #5
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	4413      	add	r3, r2
 800e4be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e4ca:	68bb      	ldr	r3, [r7, #8]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3714      	adds	r7, #20
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	695b      	ldr	r3, [r3, #20]
 800e4e4:	f003 0301 	and.w	r3, r3, #1
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	370c      	adds	r7, #12
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f2:	4770      	bx	lr

0800e4f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e4f4:	b480      	push	{r7}
 800e4f6:	b085      	sub	sp, #20
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	3301      	adds	r3, #1
 800e504:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e50c:	d901      	bls.n	800e512 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e50e:	2303      	movs	r3, #3
 800e510:	e022      	b.n	800e558 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	691b      	ldr	r3, [r3, #16]
 800e516:	2b00      	cmp	r3, #0
 800e518:	daf2      	bge.n	800e500 <USB_CoreReset+0xc>

  count = 10U;
 800e51a:	230a      	movs	r3, #10
 800e51c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800e51e:	e002      	b.n	800e526 <USB_CoreReset+0x32>
  {
    count--;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	3b01      	subs	r3, #1
 800e524:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1f9      	bne.n	800e520 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	691b      	ldr	r3, [r3, #16]
 800e530:	f043 0201 	orr.w	r2, r3, #1
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	3301      	adds	r3, #1
 800e53c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e544:	d901      	bls.n	800e54a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800e546:	2303      	movs	r3, #3
 800e548:	e006      	b.n	800e558 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	f003 0301 	and.w	r3, r3, #1
 800e552:	2b01      	cmp	r3, #1
 800e554:	d0f0      	beq.n	800e538 <USB_CoreReset+0x44>

  return HAL_OK;
 800e556:	2300      	movs	r3, #0
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3714      	adds	r7, #20
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e564:	b084      	sub	sp, #16
 800e566:	b580      	push	{r7, lr}
 800e568:	b086      	sub	sp, #24
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
 800e56e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e576:	2300      	movs	r3, #0
 800e578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e584:	461a      	mov	r2, r3
 800e586:	2300      	movs	r3, #0
 800e588:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e58e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d119      	bne.n	800e5d6 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e5a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d10a      	bne.n	800e5c0 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e5b8:	f043 0304 	orr.w	r3, r3, #4
 800e5bc:	6013      	str	r3, [r2, #0]
 800e5be:	e014      	b.n	800e5ea <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	68fa      	ldr	r2, [r7, #12]
 800e5ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e5ce:	f023 0304 	bic.w	r3, r3, #4
 800e5d2:	6013      	str	r3, [r2, #0]
 800e5d4:	e009      	b.n	800e5ea <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68fa      	ldr	r2, [r7, #12]
 800e5e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e5e4:	f023 0304 	bic.w	r3, r3, #4
 800e5e8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e5ea:	2110      	movs	r1, #16
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f7ff fe49 	bl	800e284 <USB_FlushTxFifo>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d001      	beq.n	800e5fc <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7ff fe73 	bl	800e2e8 <USB_FlushRxFifo>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d001      	beq.n	800e60c <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800e608:	2301      	movs	r3, #1
 800e60a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e60c:	2300      	movs	r3, #0
 800e60e:	613b      	str	r3, [r7, #16]
 800e610:	e015      	b.n	800e63e <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	015a      	lsls	r2, r3, #5
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	4413      	add	r3, r2
 800e61a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e61e:	461a      	mov	r2, r3
 800e620:	f04f 33ff 	mov.w	r3, #4294967295
 800e624:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	015a      	lsls	r2, r3, #5
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	4413      	add	r3, r2
 800e62e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e632:	461a      	mov	r2, r3
 800e634:	2300      	movs	r3, #0
 800e636:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	3301      	adds	r3, #1
 800e63c:	613b      	str	r3, [r7, #16]
 800e63e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e642:	461a      	mov	r2, r3
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	4293      	cmp	r3, r2
 800e648:	d3e3      	bcc.n	800e612 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2200      	movs	r2, #0
 800e64e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f04f 32ff 	mov.w	r2, #4294967295
 800e656:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4a18      	ldr	r2, [pc, #96]	@ (800e6bc <USB_HostInit+0x158>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d10b      	bne.n	800e678 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e666:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	4a15      	ldr	r2, [pc, #84]	@ (800e6c0 <USB_HostInit+0x15c>)
 800e66c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a14      	ldr	r2, [pc, #80]	@ (800e6c4 <USB_HostInit+0x160>)
 800e672:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800e676:	e009      	b.n	800e68c <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2280      	movs	r2, #128	@ 0x80
 800e67c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a11      	ldr	r2, [pc, #68]	@ (800e6c8 <USB_HostInit+0x164>)
 800e682:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	4a11      	ldr	r2, [pc, #68]	@ (800e6cc <USB_HostInit+0x168>)
 800e688:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e68c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e690:	2b00      	cmp	r3, #0
 800e692:	d105      	bne.n	800e6a0 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	f043 0210 	orr.w	r2, r3, #16
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	699a      	ldr	r2, [r3, #24]
 800e6a4:	4b0a      	ldr	r3, [pc, #40]	@ (800e6d0 <USB_HostInit+0x16c>)
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800e6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3718      	adds	r7, #24
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e6b8:	b004      	add	sp, #16
 800e6ba:	4770      	bx	lr
 800e6bc:	40040000 	.word	0x40040000
 800e6c0:	01000200 	.word	0x01000200
 800e6c4:	00e00300 	.word	0x00e00300
 800e6c8:	00600080 	.word	0x00600080
 800e6cc:	004000e0 	.word	0x004000e0
 800e6d0:	a3200008 	.word	0xa3200008

0800e6d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e6f2:	f023 0303 	bic.w	r3, r3, #3
 800e6f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	78fb      	ldrb	r3, [r7, #3]
 800e702:	f003 0303 	and.w	r3, r3, #3
 800e706:	68f9      	ldr	r1, [r7, #12]
 800e708:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e70c:	4313      	orrs	r3, r2
 800e70e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e710:	78fb      	ldrb	r3, [r7, #3]
 800e712:	2b01      	cmp	r3, #1
 800e714:	d107      	bne.n	800e726 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e71c:	461a      	mov	r2, r3
 800e71e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e722:	6053      	str	r3, [r2, #4]
 800e724:	e00c      	b.n	800e740 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800e726:	78fb      	ldrb	r3, [r7, #3]
 800e728:	2b02      	cmp	r3, #2
 800e72a:	d107      	bne.n	800e73c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e732:	461a      	mov	r2, r3
 800e734:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e738:	6053      	str	r3, [r2, #4]
 800e73a:	e001      	b.n	800e740 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800e73c:	2301      	movs	r3, #1
 800e73e:	e000      	b.n	800e742 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3714      	adds	r7, #20
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr

0800e74e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800e74e:	b580      	push	{r7, lr}
 800e750:	b084      	sub	sp, #16
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800e75a:	2300      	movs	r3, #0
 800e75c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e76e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e77c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800e77e:	2064      	movs	r0, #100	@ 0x64
 800e780:	f7f4 fefa 	bl	8003578 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	68fa      	ldr	r2, [r7, #12]
 800e788:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e78c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e790:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800e792:	200a      	movs	r0, #10
 800e794:	f7f4 fef0 	bl	8003578 <HAL_Delay>

  return HAL_OK;
 800e798:	2300      	movs	r3, #0
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}

0800e7a2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e7a2:	b480      	push	{r7}
 800e7a4:	b085      	sub	sp, #20
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e7c6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d109      	bne.n	800e7e6 <USB_DriveVbus+0x44>
 800e7d2:	78fb      	ldrb	r3, [r7, #3]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d106      	bne.n	800e7e6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	68fa      	ldr	r2, [r7, #12]
 800e7dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e7e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e7e4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e7ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7f0:	d109      	bne.n	800e806 <USB_DriveVbus+0x64>
 800e7f2:	78fb      	ldrb	r3, [r7, #3]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d106      	bne.n	800e806 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	68fa      	ldr	r2, [r7, #12]
 800e7fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e804:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3714      	adds	r7, #20
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e820:	2300      	movs	r3, #0
 800e822:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	0c5b      	lsrs	r3, r3, #17
 800e832:	f003 0303 	and.w	r3, r3, #3
}
 800e836:	4618      	mov	r0, r3
 800e838:	3714      	adds	r7, #20
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr

0800e842 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800e842:	b480      	push	{r7}
 800e844:	b085      	sub	sp, #20
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	b29b      	uxth	r3, r3
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3714      	adds	r7, #20
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b088      	sub	sp, #32
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	4608      	mov	r0, r1
 800e86e:	4611      	mov	r1, r2
 800e870:	461a      	mov	r2, r3
 800e872:	4603      	mov	r3, r0
 800e874:	70fb      	strb	r3, [r7, #3]
 800e876:	460b      	mov	r3, r1
 800e878:	70bb      	strb	r3, [r7, #2]
 800e87a:	4613      	mov	r3, r2
 800e87c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800e87e:	2300      	movs	r3, #0
 800e880:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800e886:	78fb      	ldrb	r3, [r7, #3]
 800e888:	015a      	lsls	r2, r3, #5
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	4413      	add	r3, r2
 800e88e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e892:	461a      	mov	r2, r3
 800e894:	f04f 33ff 	mov.w	r3, #4294967295
 800e898:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e89a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e89e:	2b03      	cmp	r3, #3
 800e8a0:	d87c      	bhi.n	800e99c <USB_HC_Init+0x138>
 800e8a2:	a201      	add	r2, pc, #4	@ (adr r2, 800e8a8 <USB_HC_Init+0x44>)
 800e8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a8:	0800e8b9 	.word	0x0800e8b9
 800e8ac:	0800e95f 	.word	0x0800e95f
 800e8b0:	0800e8b9 	.word	0x0800e8b9
 800e8b4:	0800e921 	.word	0x0800e921
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e8b8:	78fb      	ldrb	r3, [r7, #3]
 800e8ba:	015a      	lsls	r2, r3, #5
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	4413      	add	r3, r2
 800e8c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	f240 439d 	movw	r3, #1181	@ 0x49d
 800e8ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e8cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	da10      	bge.n	800e8f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e8d4:	78fb      	ldrb	r3, [r7, #3]
 800e8d6:	015a      	lsls	r2, r3, #5
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	4413      	add	r3, r2
 800e8dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	78fa      	ldrb	r2, [r7, #3]
 800e8e4:	0151      	lsls	r1, r2, #5
 800e8e6:	693a      	ldr	r2, [r7, #16]
 800e8e8:	440a      	add	r2, r1
 800e8ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e8ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e8f2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800e8f4:	e055      	b.n	800e9a2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	4a6f      	ldr	r2, [pc, #444]	@ (800eab8 <USB_HC_Init+0x254>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d151      	bne.n	800e9a2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800e8fe:	78fb      	ldrb	r3, [r7, #3]
 800e900:	015a      	lsls	r2, r3, #5
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	4413      	add	r3, r2
 800e906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	78fa      	ldrb	r2, [r7, #3]
 800e90e:	0151      	lsls	r1, r2, #5
 800e910:	693a      	ldr	r2, [r7, #16]
 800e912:	440a      	add	r2, r1
 800e914:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e918:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e91c:	60d3      	str	r3, [r2, #12]
      break;
 800e91e:	e040      	b.n	800e9a2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e920:	78fb      	ldrb	r3, [r7, #3]
 800e922:	015a      	lsls	r2, r3, #5
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	4413      	add	r3, r2
 800e928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e92c:	461a      	mov	r2, r3
 800e92e:	f240 639d 	movw	r3, #1693	@ 0x69d
 800e932:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e934:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	da34      	bge.n	800e9a6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e93c:	78fb      	ldrb	r3, [r7, #3]
 800e93e:	015a      	lsls	r2, r3, #5
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	4413      	add	r3, r2
 800e944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	78fa      	ldrb	r2, [r7, #3]
 800e94c:	0151      	lsls	r1, r2, #5
 800e94e:	693a      	ldr	r2, [r7, #16]
 800e950:	440a      	add	r2, r1
 800e952:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e95a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e95c:	e023      	b.n	800e9a6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e95e:	78fb      	ldrb	r3, [r7, #3]
 800e960:	015a      	lsls	r2, r3, #5
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	4413      	add	r3, r2
 800e966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e96a:	461a      	mov	r2, r3
 800e96c:	f240 2325 	movw	r3, #549	@ 0x225
 800e970:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e972:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e976:	2b00      	cmp	r3, #0
 800e978:	da17      	bge.n	800e9aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e97a:	78fb      	ldrb	r3, [r7, #3]
 800e97c:	015a      	lsls	r2, r3, #5
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	4413      	add	r3, r2
 800e982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	78fa      	ldrb	r2, [r7, #3]
 800e98a:	0151      	lsls	r1, r2, #5
 800e98c:	693a      	ldr	r2, [r7, #16]
 800e98e:	440a      	add	r2, r1
 800e990:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e994:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800e998:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e99a:	e006      	b.n	800e9aa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	77fb      	strb	r3, [r7, #31]
      break;
 800e9a0:	e004      	b.n	800e9ac <USB_HC_Init+0x148>
      break;
 800e9a2:	bf00      	nop
 800e9a4:	e002      	b.n	800e9ac <USB_HC_Init+0x148>
      break;
 800e9a6:	bf00      	nop
 800e9a8:	e000      	b.n	800e9ac <USB_HC_Init+0x148>
      break;
 800e9aa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e9ac:	78fb      	ldrb	r3, [r7, #3]
 800e9ae:	015a      	lsls	r2, r3, #5
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800e9be:	78fb      	ldrb	r3, [r7, #3]
 800e9c0:	015a      	lsls	r2, r3, #5
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	78fa      	ldrb	r2, [r7, #3]
 800e9ce:	0151      	lsls	r1, r2, #5
 800e9d0:	693a      	ldr	r2, [r7, #16]
 800e9d2:	440a      	add	r2, r1
 800e9d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e9d8:	f043 0302 	orr.w	r3, r3, #2
 800e9dc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e9e4:	699a      	ldr	r2, [r3, #24]
 800e9e6:	78fb      	ldrb	r3, [r7, #3]
 800e9e8:	f003 030f 	and.w	r3, r3, #15
 800e9ec:	2101      	movs	r1, #1
 800e9ee:	fa01 f303 	lsl.w	r3, r1, r3
 800e9f2:	6939      	ldr	r1, [r7, #16]
 800e9f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	699b      	ldr	r3, [r3, #24]
 800ea00:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ea08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	da03      	bge.n	800ea18 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ea10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea14:	61bb      	str	r3, [r7, #24]
 800ea16:	e001      	b.n	800ea1c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f7ff fef9 	bl	800e814 <USB_GetHostSpeed>
 800ea22:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ea24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ea28:	2b02      	cmp	r3, #2
 800ea2a:	d106      	bne.n	800ea3a <USB_HC_Init+0x1d6>
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	d003      	beq.n	800ea3a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ea32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ea36:	617b      	str	r3, [r7, #20]
 800ea38:	e001      	b.n	800ea3e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ea3e:	787b      	ldrb	r3, [r7, #1]
 800ea40:	059b      	lsls	r3, r3, #22
 800ea42:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ea46:	78bb      	ldrb	r3, [r7, #2]
 800ea48:	02db      	lsls	r3, r3, #11
 800ea4a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ea4e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ea50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ea54:	049b      	lsls	r3, r3, #18
 800ea56:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ea5a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800ea5c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ea5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ea62:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	431a      	orrs	r2, r3
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ea6c:	78fa      	ldrb	r2, [r7, #3]
 800ea6e:	0151      	lsls	r1, r2, #5
 800ea70:	693a      	ldr	r2, [r7, #16]
 800ea72:	440a      	add	r2, r1
 800ea74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ea78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ea7c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ea7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ea82:	2b03      	cmp	r3, #3
 800ea84:	d003      	beq.n	800ea8e <USB_HC_Init+0x22a>
 800ea86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d10f      	bne.n	800eaae <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ea8e:	78fb      	ldrb	r3, [r7, #3]
 800ea90:	015a      	lsls	r2, r3, #5
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	4413      	add	r3, r2
 800ea96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	78fa      	ldrb	r2, [r7, #3]
 800ea9e:	0151      	lsls	r1, r2, #5
 800eaa0:	693a      	ldr	r2, [r7, #16]
 800eaa2:	440a      	add	r2, r1
 800eaa4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eaa8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eaac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800eaae:	7ffb      	ldrb	r3, [r7, #31]
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3720      	adds	r7, #32
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	40040000 	.word	0x40040000

0800eabc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b08c      	sub	sp, #48	@ 0x30
 800eac0:	af02      	add	r7, sp, #8
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	4613      	mov	r3, r2
 800eac8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	785b      	ldrb	r3, [r3, #1]
 800ead2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ead4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ead8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	4a5d      	ldr	r2, [pc, #372]	@ (800ec54 <USB_HC_StartXfer+0x198>)
 800eade:	4293      	cmp	r3, r2
 800eae0:	d12f      	bne.n	800eb42 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800eae2:	79fb      	ldrb	r3, [r7, #7]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d11c      	bne.n	800eb22 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	7c9b      	ldrb	r3, [r3, #18]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d003      	beq.n	800eaf8 <USB_HC_StartXfer+0x3c>
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	7c9b      	ldrb	r3, [r3, #18]
 800eaf4:	2b02      	cmp	r3, #2
 800eaf6:	d124      	bne.n	800eb42 <USB_HC_StartXfer+0x86>
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	799b      	ldrb	r3, [r3, #6]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d120      	bne.n	800eb42 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	015a      	lsls	r2, r3, #5
 800eb04:	6a3b      	ldr	r3, [r7, #32]
 800eb06:	4413      	add	r3, r2
 800eb08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb0c:	68db      	ldr	r3, [r3, #12]
 800eb0e:	69fa      	ldr	r2, [r7, #28]
 800eb10:	0151      	lsls	r1, r2, #5
 800eb12:	6a3a      	ldr	r2, [r7, #32]
 800eb14:	440a      	add	r2, r1
 800eb16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eb1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb1e:	60d3      	str	r3, [r2, #12]
 800eb20:	e00f      	b.n	800eb42 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	791b      	ldrb	r3, [r3, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10b      	bne.n	800eb42 <USB_HC_StartXfer+0x86>
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	795b      	ldrb	r3, [r3, #5]
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d107      	bne.n	800eb42 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	785b      	ldrb	r3, [r3, #1]
 800eb36:	4619      	mov	r1, r3
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f000 fb6b 	bl	800f214 <USB_DoPing>
        return HAL_OK;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e232      	b.n	800efa8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	799b      	ldrb	r3, [r3, #6]
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d158      	bne.n	800ebfc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	78db      	ldrb	r3, [r3, #3]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d007      	beq.n	800eb66 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800eb56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eb58:	68ba      	ldr	r2, [r7, #8]
 800eb5a:	8a92      	ldrh	r2, [r2, #20]
 800eb5c:	fb03 f202 	mul.w	r2, r3, r2
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	61da      	str	r2, [r3, #28]
 800eb64:	e07c      	b.n	800ec60 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	7c9b      	ldrb	r3, [r3, #18]
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d130      	bne.n	800ebd0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	6a1b      	ldr	r3, [r3, #32]
 800eb72:	2bbc      	cmp	r3, #188	@ 0xbc
 800eb74:	d918      	bls.n	800eba8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	8a9b      	ldrh	r3, [r3, #20]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	69da      	ldr	r2, [r3, #28]
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	68db      	ldr	r3, [r3, #12]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d003      	beq.n	800eb98 <USB_HC_StartXfer+0xdc>
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d103      	bne.n	800eba0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	60da      	str	r2, [r3, #12]
 800eb9e:	e05f      	b.n	800ec60 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	2201      	movs	r2, #1
 800eba4:	60da      	str	r2, [r3, #12]
 800eba6:	e05b      	b.n	800ec60 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	6a1a      	ldr	r2, [r3, #32]
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d007      	beq.n	800ebc8 <USB_HC_StartXfer+0x10c>
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	d003      	beq.n	800ebc8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	2204      	movs	r2, #4
 800ebc4:	60da      	str	r2, [r3, #12]
 800ebc6:	e04b      	b.n	800ec60 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	2203      	movs	r2, #3
 800ebcc:	60da      	str	r2, [r3, #12]
 800ebce:	e047      	b.n	800ec60 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800ebd0:	79fb      	ldrb	r3, [r7, #7]
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d10d      	bne.n	800ebf2 <USB_HC_StartXfer+0x136>
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	6a1b      	ldr	r3, [r3, #32]
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	8a92      	ldrh	r2, [r2, #20]
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d907      	bls.n	800ebf2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ebe2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	8a92      	ldrh	r2, [r2, #20]
 800ebe8:	fb03 f202 	mul.w	r2, r3, r2
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	61da      	str	r2, [r3, #28]
 800ebf0:	e036      	b.n	800ec60 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	6a1a      	ldr	r2, [r3, #32]
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	61da      	str	r2, [r3, #28]
 800ebfa:	e031      	b.n	800ec60 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	6a1b      	ldr	r3, [r3, #32]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d018      	beq.n	800ec36 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	6a1b      	ldr	r3, [r3, #32]
 800ec08:	68ba      	ldr	r2, [r7, #8]
 800ec0a:	8a92      	ldrh	r2, [r2, #20]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	3b01      	subs	r3, #1
 800ec10:	68ba      	ldr	r2, [r7, #8]
 800ec12:	8a92      	ldrh	r2, [r2, #20]
 800ec14:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec18:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800ec1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ec1c:	8b7b      	ldrh	r3, [r7, #26]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d90b      	bls.n	800ec3a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800ec22:	8b7b      	ldrh	r3, [r7, #26]
 800ec24:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ec26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	8a92      	ldrh	r2, [r2, #20]
 800ec2c:	fb03 f202 	mul.w	r2, r3, r2
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	61da      	str	r2, [r3, #28]
 800ec34:	e001      	b.n	800ec3a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800ec36:	2301      	movs	r3, #1
 800ec38:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	78db      	ldrb	r3, [r3, #3]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00a      	beq.n	800ec58 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ec42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec44:	68ba      	ldr	r2, [r7, #8]
 800ec46:	8a92      	ldrh	r2, [r2, #20]
 800ec48:	fb03 f202 	mul.w	r2, r3, r2
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	61da      	str	r2, [r3, #28]
 800ec50:	e006      	b.n	800ec60 <USB_HC_StartXfer+0x1a4>
 800ec52:	bf00      	nop
 800ec54:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	6a1a      	ldr	r2, [r3, #32]
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	69db      	ldr	r3, [r3, #28]
 800ec64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ec68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec6a:	04d9      	lsls	r1, r3, #19
 800ec6c:	4ba3      	ldr	r3, [pc, #652]	@ (800eefc <USB_HC_StartXfer+0x440>)
 800ec6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ec70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	7d9b      	ldrb	r3, [r3, #22]
 800ec76:	075b      	lsls	r3, r3, #29
 800ec78:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ec7c:	69f9      	ldr	r1, [r7, #28]
 800ec7e:	0148      	lsls	r0, r1, #5
 800ec80:	6a39      	ldr	r1, [r7, #32]
 800ec82:	4401      	add	r1, r0
 800ec84:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ec88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ec8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ec8c:	79fb      	ldrb	r3, [r7, #7]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d009      	beq.n	800eca6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	6999      	ldr	r1, [r3, #24]
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	015a      	lsls	r2, r3, #5
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eca2:	460a      	mov	r2, r1
 800eca4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800eca6:	6a3b      	ldr	r3, [r7, #32]
 800eca8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	f003 0301 	and.w	r3, r3, #1
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	bf0c      	ite	eq
 800ecb6:	2301      	moveq	r3, #1
 800ecb8:	2300      	movne	r3, #0
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	015a      	lsls	r2, r3, #5
 800ecc2:	6a3b      	ldr	r3, [r7, #32]
 800ecc4:	4413      	add	r3, r2
 800ecc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	69fa      	ldr	r2, [r7, #28]
 800ecce:	0151      	lsls	r1, r2, #5
 800ecd0:	6a3a      	ldr	r2, [r7, #32]
 800ecd2:	440a      	add	r2, r1
 800ecd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ecd8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ecdc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	015a      	lsls	r2, r3, #5
 800ece2:	6a3b      	ldr	r3, [r7, #32]
 800ece4:	4413      	add	r3, r2
 800ece6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	7e7b      	ldrb	r3, [r7, #25]
 800ecee:	075b      	lsls	r3, r3, #29
 800ecf0:	69f9      	ldr	r1, [r7, #28]
 800ecf2:	0148      	lsls	r0, r1, #5
 800ecf4:	6a39      	ldr	r1, [r7, #32]
 800ecf6:	4401      	add	r1, r0
 800ecf8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	799b      	ldrb	r3, [r3, #6]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	f040 80c3 	bne.w	800ee90 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	7c5b      	ldrb	r3, [r3, #17]
 800ed0e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ed10:	68ba      	ldr	r2, [r7, #8]
 800ed12:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ed14:	4313      	orrs	r3, r2
 800ed16:	69fa      	ldr	r2, [r7, #28]
 800ed18:	0151      	lsls	r1, r2, #5
 800ed1a:	6a3a      	ldr	r2, [r7, #32]
 800ed1c:	440a      	add	r2, r1
 800ed1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ed22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ed26:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	015a      	lsls	r2, r3, #5
 800ed2c:	6a3b      	ldr	r3, [r7, #32]
 800ed2e:	4413      	add	r3, r2
 800ed30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed34:	68db      	ldr	r3, [r3, #12]
 800ed36:	69fa      	ldr	r2, [r7, #28]
 800ed38:	0151      	lsls	r1, r2, #5
 800ed3a:	6a3a      	ldr	r2, [r7, #32]
 800ed3c:	440a      	add	r2, r1
 800ed3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed42:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ed46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	79db      	ldrb	r3, [r3, #7]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d123      	bne.n	800ed98 <USB_HC_StartXfer+0x2dc>
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	78db      	ldrb	r3, [r3, #3]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d11f      	bne.n	800ed98 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	015a      	lsls	r2, r3, #5
 800ed5c:	6a3b      	ldr	r3, [r7, #32]
 800ed5e:	4413      	add	r3, r2
 800ed60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	69fa      	ldr	r2, [r7, #28]
 800ed68:	0151      	lsls	r1, r2, #5
 800ed6a:	6a3a      	ldr	r2, [r7, #32]
 800ed6c:	440a      	add	r2, r1
 800ed6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ed76:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	015a      	lsls	r2, r3, #5
 800ed7c:	6a3b      	ldr	r3, [r7, #32]
 800ed7e:	4413      	add	r3, r2
 800ed80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	69fa      	ldr	r2, [r7, #28]
 800ed88:	0151      	lsls	r1, r2, #5
 800ed8a:	6a3a      	ldr	r2, [r7, #32]
 800ed8c:	440a      	add	r2, r1
 800ed8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed96:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	7c9b      	ldrb	r3, [r3, #18]
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d003      	beq.n	800eda8 <USB_HC_StartXfer+0x2ec>
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	7c9b      	ldrb	r3, [r3, #18]
 800eda4:	2b03      	cmp	r3, #3
 800eda6:	d117      	bne.n	800edd8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800edac:	2b01      	cmp	r3, #1
 800edae:	d113      	bne.n	800edd8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	78db      	ldrb	r3, [r3, #3]
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d10f      	bne.n	800edd8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	015a      	lsls	r2, r3, #5
 800edbc:	6a3b      	ldr	r3, [r7, #32]
 800edbe:	4413      	add	r3, r2
 800edc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	69fa      	ldr	r2, [r7, #28]
 800edc8:	0151      	lsls	r1, r2, #5
 800edca:	6a3a      	ldr	r2, [r7, #32]
 800edcc:	440a      	add	r2, r1
 800edce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800edd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800edd6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	7c9b      	ldrb	r3, [r3, #18]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d162      	bne.n	800eea6 <USB_HC_StartXfer+0x3ea>
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	78db      	ldrb	r3, [r3, #3]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d15e      	bne.n	800eea6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	68db      	ldr	r3, [r3, #12]
 800edec:	3b01      	subs	r3, #1
 800edee:	2b03      	cmp	r3, #3
 800edf0:	d858      	bhi.n	800eea4 <USB_HC_StartXfer+0x3e8>
 800edf2:	a201      	add	r2, pc, #4	@ (adr r2, 800edf8 <USB_HC_StartXfer+0x33c>)
 800edf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf8:	0800ee09 	.word	0x0800ee09
 800edfc:	0800ee2b 	.word	0x0800ee2b
 800ee00:	0800ee4d 	.word	0x0800ee4d
 800ee04:	0800ee6f 	.word	0x0800ee6f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	015a      	lsls	r2, r3, #5
 800ee0c:	6a3b      	ldr	r3, [r7, #32]
 800ee0e:	4413      	add	r3, r2
 800ee10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	69fa      	ldr	r2, [r7, #28]
 800ee18:	0151      	lsls	r1, r2, #5
 800ee1a:	6a3a      	ldr	r2, [r7, #32]
 800ee1c:	440a      	add	r2, r1
 800ee1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee26:	6053      	str	r3, [r2, #4]
          break;
 800ee28:	e03d      	b.n	800eea6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800ee2a:	69fb      	ldr	r3, [r7, #28]
 800ee2c:	015a      	lsls	r2, r3, #5
 800ee2e:	6a3b      	ldr	r3, [r7, #32]
 800ee30:	4413      	add	r3, r2
 800ee32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	69fa      	ldr	r2, [r7, #28]
 800ee3a:	0151      	lsls	r1, r2, #5
 800ee3c:	6a3a      	ldr	r2, [r7, #32]
 800ee3e:	440a      	add	r2, r1
 800ee40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee44:	f043 030e 	orr.w	r3, r3, #14
 800ee48:	6053      	str	r3, [r2, #4]
          break;
 800ee4a:	e02c      	b.n	800eea6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	015a      	lsls	r2, r3, #5
 800ee50:	6a3b      	ldr	r3, [r7, #32]
 800ee52:	4413      	add	r3, r2
 800ee54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	69fa      	ldr	r2, [r7, #28]
 800ee5c:	0151      	lsls	r1, r2, #5
 800ee5e:	6a3a      	ldr	r2, [r7, #32]
 800ee60:	440a      	add	r2, r1
 800ee62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ee6a:	6053      	str	r3, [r2, #4]
          break;
 800ee6c:	e01b      	b.n	800eea6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	015a      	lsls	r2, r3, #5
 800ee72:	6a3b      	ldr	r3, [r7, #32]
 800ee74:	4413      	add	r3, r2
 800ee76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	69fa      	ldr	r2, [r7, #28]
 800ee7e:	0151      	lsls	r1, r2, #5
 800ee80:	6a3a      	ldr	r2, [r7, #32]
 800ee82:	440a      	add	r2, r1
 800ee84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ee8c:	6053      	str	r3, [r2, #4]
          break;
 800ee8e:	e00a      	b.n	800eea6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	015a      	lsls	r2, r3, #5
 800ee94:	6a3b      	ldr	r3, [r7, #32]
 800ee96:	4413      	add	r3, r2
 800ee98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	2300      	movs	r3, #0
 800eea0:	6053      	str	r3, [r2, #4]
 800eea2:	e000      	b.n	800eea6 <USB_HC_StartXfer+0x3ea>
          break;
 800eea4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	015a      	lsls	r2, r3, #5
 800eeaa:	6a3b      	ldr	r3, [r7, #32]
 800eeac:	4413      	add	r3, r2
 800eeae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eebc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	78db      	ldrb	r3, [r3, #3]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d004      	beq.n	800eed0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eecc:	613b      	str	r3, [r7, #16]
 800eece:	e003      	b.n	800eed8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eed6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eede:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	015a      	lsls	r2, r3, #5
 800eee4:	6a3b      	ldr	r3, [r7, #32]
 800eee6:	4413      	add	r3, r2
 800eee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eeec:	461a      	mov	r2, r3
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800eef2:	79fb      	ldrb	r3, [r7, #7]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d003      	beq.n	800ef00 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800eef8:	2300      	movs	r3, #0
 800eefa:	e055      	b.n	800efa8 <USB_HC_StartXfer+0x4ec>
 800eefc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	78db      	ldrb	r3, [r3, #3]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d14e      	bne.n	800efa6 <USB_HC_StartXfer+0x4ea>
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	6a1b      	ldr	r3, [r3, #32]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d04a      	beq.n	800efa6 <USB_HC_StartXfer+0x4ea>
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	79db      	ldrb	r3, [r3, #7]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d146      	bne.n	800efa6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	7c9b      	ldrb	r3, [r3, #18]
 800ef1c:	2b03      	cmp	r3, #3
 800ef1e:	d831      	bhi.n	800ef84 <USB_HC_StartXfer+0x4c8>
 800ef20:	a201      	add	r2, pc, #4	@ (adr r2, 800ef28 <USB_HC_StartXfer+0x46c>)
 800ef22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef26:	bf00      	nop
 800ef28:	0800ef39 	.word	0x0800ef39
 800ef2c:	0800ef5d 	.word	0x0800ef5d
 800ef30:	0800ef39 	.word	0x0800ef39
 800ef34:	0800ef5d 	.word	0x0800ef5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	6a1b      	ldr	r3, [r3, #32]
 800ef3c:	3303      	adds	r3, #3
 800ef3e:	089b      	lsrs	r3, r3, #2
 800ef40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ef42:	8afa      	ldrh	r2, [r7, #22]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d91c      	bls.n	800ef88 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	699b      	ldr	r3, [r3, #24]
 800ef52:	f043 0220 	orr.w	r2, r3, #32
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	619a      	str	r2, [r3, #24]
        }
        break;
 800ef5a:	e015      	b.n	800ef88 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	6a1b      	ldr	r3, [r3, #32]
 800ef60:	3303      	adds	r3, #3
 800ef62:	089b      	lsrs	r3, r3, #2
 800ef64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ef66:	8afa      	ldrh	r2, [r7, #22]
 800ef68:	6a3b      	ldr	r3, [r7, #32]
 800ef6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ef6e:	691b      	ldr	r3, [r3, #16]
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d90a      	bls.n	800ef8c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	699b      	ldr	r3, [r3, #24]
 800ef7a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	619a      	str	r2, [r3, #24]
        }
        break;
 800ef82:	e003      	b.n	800ef8c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800ef84:	bf00      	nop
 800ef86:	e002      	b.n	800ef8e <USB_HC_StartXfer+0x4d2>
        break;
 800ef88:	bf00      	nop
 800ef8a:	e000      	b.n	800ef8e <USB_HC_StartXfer+0x4d2>
        break;
 800ef8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	6999      	ldr	r1, [r3, #24]
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	785a      	ldrb	r2, [r3, #1]
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	6a1b      	ldr	r3, [r3, #32]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	9000      	str	r0, [sp, #0]
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f7ff f9cf 	bl	800e344 <USB_WritePacket>
  }

  return HAL_OK;
 800efa6:	2300      	movs	r3, #0
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3728      	adds	r7, #40	@ 0x28
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b085      	sub	sp, #20
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800efc2:	695b      	ldr	r3, [r3, #20]
 800efc4:	b29b      	uxth	r3, r3
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3714      	adds	r7, #20
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800efd2:	b480      	push	{r7}
 800efd4:	b089      	sub	sp, #36	@ 0x24
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	460b      	mov	r3, r1
 800efdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800efe2:	78fb      	ldrb	r3, [r7, #3]
 800efe4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800efe6:	2300      	movs	r3, #0
 800efe8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	015a      	lsls	r2, r3, #5
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	4413      	add	r3, r2
 800eff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	0c9b      	lsrs	r3, r3, #18
 800effa:	f003 0303 	and.w	r3, r3, #3
 800effe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	015a      	lsls	r2, r3, #5
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	4413      	add	r3, r2
 800f008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	0fdb      	lsrs	r3, r3, #31
 800f010:	f003 0301 	and.w	r3, r3, #1
 800f014:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	015a      	lsls	r2, r3, #5
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	4413      	add	r3, r2
 800f01e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	0fdb      	lsrs	r3, r3, #31
 800f026:	f003 0301 	and.w	r3, r3, #1
 800f02a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	689b      	ldr	r3, [r3, #8]
 800f030:	f003 0320 	and.w	r3, r3, #32
 800f034:	2b20      	cmp	r3, #32
 800f036:	d10d      	bne.n	800f054 <USB_HC_Halt+0x82>
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d10a      	bne.n	800f054 <USB_HC_Halt+0x82>
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d005      	beq.n	800f050 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	2b01      	cmp	r3, #1
 800f048:	d002      	beq.n	800f050 <USB_HC_Halt+0x7e>
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	2b03      	cmp	r3, #3
 800f04e:	d101      	bne.n	800f054 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	e0d8      	b.n	800f206 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d002      	beq.n	800f060 <USB_HC_Halt+0x8e>
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	2b02      	cmp	r3, #2
 800f05e:	d173      	bne.n	800f148 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	015a      	lsls	r2, r3, #5
 800f064:	69fb      	ldr	r3, [r7, #28]
 800f066:	4413      	add	r3, r2
 800f068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	69ba      	ldr	r2, [r7, #24]
 800f070:	0151      	lsls	r1, r2, #5
 800f072:	69fa      	ldr	r2, [r7, #28]
 800f074:	440a      	add	r2, r1
 800f076:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f07a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f07e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	f003 0320 	and.w	r3, r3, #32
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d14a      	bne.n	800f122 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f090:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f094:	2b00      	cmp	r3, #0
 800f096:	d133      	bne.n	800f100 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	015a      	lsls	r2, r3, #5
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	4413      	add	r3, r2
 800f0a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	69ba      	ldr	r2, [r7, #24]
 800f0a8:	0151      	lsls	r1, r2, #5
 800f0aa:	69fa      	ldr	r2, [r7, #28]
 800f0ac:	440a      	add	r2, r1
 800f0ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f0b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f0b6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	015a      	lsls	r2, r3, #5
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	4413      	add	r3, r2
 800f0c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	69ba      	ldr	r2, [r7, #24]
 800f0c8:	0151      	lsls	r1, r2, #5
 800f0ca:	69fa      	ldr	r2, [r7, #28]
 800f0cc:	440a      	add	r2, r1
 800f0ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f0d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f0d6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f0e4:	d82e      	bhi.n	800f144 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	015a      	lsls	r2, r3, #5
 800f0ea:	69fb      	ldr	r3, [r7, #28]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f0f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f0fc:	d0ec      	beq.n	800f0d8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f0fe:	e081      	b.n	800f204 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	015a      	lsls	r2, r3, #5
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	4413      	add	r3, r2
 800f108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	69ba      	ldr	r2, [r7, #24]
 800f110:	0151      	lsls	r1, r2, #5
 800f112:	69fa      	ldr	r2, [r7, #28]
 800f114:	440a      	add	r2, r1
 800f116:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f11a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f11e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f120:	e070      	b.n	800f204 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f122:	69bb      	ldr	r3, [r7, #24]
 800f124:	015a      	lsls	r2, r3, #5
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	4413      	add	r3, r2
 800f12a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	69ba      	ldr	r2, [r7, #24]
 800f132:	0151      	lsls	r1, r2, #5
 800f134:	69fa      	ldr	r2, [r7, #28]
 800f136:	440a      	add	r2, r1
 800f138:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f13c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f140:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f142:	e05f      	b.n	800f204 <USB_HC_Halt+0x232>
            break;
 800f144:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800f146:	e05d      	b.n	800f204 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	015a      	lsls	r2, r3, #5
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	4413      	add	r3, r2
 800f150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	69ba      	ldr	r2, [r7, #24]
 800f158:	0151      	lsls	r1, r2, #5
 800f15a:	69fa      	ldr	r2, [r7, #28]
 800f15c:	440a      	add	r2, r1
 800f15e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f162:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f166:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f16e:	691b      	ldr	r3, [r3, #16]
 800f170:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f174:	2b00      	cmp	r3, #0
 800f176:	d133      	bne.n	800f1e0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800f178:	69bb      	ldr	r3, [r7, #24]
 800f17a:	015a      	lsls	r2, r3, #5
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	4413      	add	r3, r2
 800f180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	69ba      	ldr	r2, [r7, #24]
 800f188:	0151      	lsls	r1, r2, #5
 800f18a:	69fa      	ldr	r2, [r7, #28]
 800f18c:	440a      	add	r2, r1
 800f18e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f192:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f196:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	015a      	lsls	r2, r3, #5
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	4413      	add	r3, r2
 800f1a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	69ba      	ldr	r2, [r7, #24]
 800f1a8:	0151      	lsls	r1, r2, #5
 800f1aa:	69fa      	ldr	r2, [r7, #28]
 800f1ac:	440a      	add	r2, r1
 800f1ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f1b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f1b6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f1c4:	d81d      	bhi.n	800f202 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	015a      	lsls	r2, r3, #5
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f1d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f1dc:	d0ec      	beq.n	800f1b8 <USB_HC_Halt+0x1e6>
 800f1de:	e011      	b.n	800f204 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800f1e0:	69bb      	ldr	r3, [r7, #24]
 800f1e2:	015a      	lsls	r2, r3, #5
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	4413      	add	r3, r2
 800f1e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	69ba      	ldr	r2, [r7, #24]
 800f1f0:	0151      	lsls	r1, r2, #5
 800f1f2:	69fa      	ldr	r2, [r7, #28]
 800f1f4:	440a      	add	r2, r1
 800f1f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f1fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f1fe:	6013      	str	r3, [r2, #0]
 800f200:	e000      	b.n	800f204 <USB_HC_Halt+0x232>
          break;
 800f202:	bf00      	nop
    }
  }

  return HAL_OK;
 800f204:	2300      	movs	r3, #0
}
 800f206:	4618      	mov	r0, r3
 800f208:	3724      	adds	r7, #36	@ 0x24
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr
	...

0800f214 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800f214:	b480      	push	{r7}
 800f216:	b087      	sub	sp, #28
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	460b      	mov	r3, r1
 800f21e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800f224:	78fb      	ldrb	r3, [r7, #3]
 800f226:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800f228:	2301      	movs	r3, #1
 800f22a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	04da      	lsls	r2, r3, #19
 800f230:	4b15      	ldr	r3, [pc, #84]	@ (800f288 <USB_DoPing+0x74>)
 800f232:	4013      	ands	r3, r2
 800f234:	693a      	ldr	r2, [r7, #16]
 800f236:	0151      	lsls	r1, r2, #5
 800f238:	697a      	ldr	r2, [r7, #20]
 800f23a:	440a      	add	r2, r1
 800f23c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f240:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f244:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	015a      	lsls	r2, r3, #5
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	4413      	add	r3, r2
 800f24e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f25c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f264:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	015a      	lsls	r2, r3, #5
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	4413      	add	r3, r2
 800f26e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f272:	461a      	mov	r2, r3
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	371c      	adds	r7, #28
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	1ff80000 	.word	0x1ff80000

0800f28c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b088      	sub	sp, #32
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800f294:	2300      	movs	r3, #0
 800f296:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800f29c:	2300      	movs	r3, #0
 800f29e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7fe ff92 	bl	800e1ca <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f2a6:	2110      	movs	r1, #16
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7fe ffeb 	bl	800e284 <USB_FlushTxFifo>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d001      	beq.n	800f2b8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7ff f815 	bl	800e2e8 <USB_FlushRxFifo>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	61bb      	str	r3, [r7, #24]
 800f2cc:	e01f      	b.n	800f30e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	015a      	lsls	r2, r3, #5
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f2e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f2ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f2f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800f2f6:	69bb      	ldr	r3, [r7, #24]
 800f2f8:	015a      	lsls	r2, r3, #5
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f302:	461a      	mov	r2, r3
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	3301      	adds	r3, #1
 800f30c:	61bb      	str	r3, [r7, #24]
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	2b0f      	cmp	r3, #15
 800f312:	d9dc      	bls.n	800f2ce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800f314:	2300      	movs	r3, #0
 800f316:	61bb      	str	r3, [r7, #24]
 800f318:	e034      	b.n	800f384 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	015a      	lsls	r2, r3, #5
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	4413      	add	r3, r2
 800f322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f330:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f338:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f340:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	015a      	lsls	r2, r3, #5
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	4413      	add	r3, r2
 800f34a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f34e:	461a      	mov	r2, r3
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	3301      	adds	r3, #1
 800f358:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f360:	d80c      	bhi.n	800f37c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800f362:	69bb      	ldr	r3, [r7, #24]
 800f364:	015a      	lsls	r2, r3, #5
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	4413      	add	r3, r2
 800f36a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f378:	d0ec      	beq.n	800f354 <USB_StopHost+0xc8>
 800f37a:	e000      	b.n	800f37e <USB_StopHost+0xf2>
        break;
 800f37c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800f37e:	69bb      	ldr	r3, [r7, #24]
 800f380:	3301      	adds	r3, #1
 800f382:	61bb      	str	r3, [r7, #24]
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	2b0f      	cmp	r3, #15
 800f388:	d9c7      	bls.n	800f31a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f390:	461a      	mov	r2, r3
 800f392:	f04f 33ff 	mov.w	r3, #4294967295
 800f396:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f04f 32ff 	mov.w	r2, #4294967295
 800f39e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f7fe ff01 	bl	800e1a8 <USB_EnableGlobalInt>

  return ret;
 800f3a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3720      	adds	r7, #32
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f3b4:	4904      	ldr	r1, [pc, #16]	@ (800f3c8 <MX_FATFS_Init+0x18>)
 800f3b6:	4805      	ldr	r0, [pc, #20]	@ (800f3cc <MX_FATFS_Init+0x1c>)
 800f3b8:	f002 fc50 	bl	8011c5c <FATFS_LinkDriver>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	461a      	mov	r2, r3
 800f3c0:	4b03      	ldr	r3, [pc, #12]	@ (800f3d0 <MX_FATFS_Init+0x20>)
 800f3c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f3c4:	bf00      	nop
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	20004bec 	.word	0x20004bec
 800f3cc:	0801693c 	.word	0x0801693c
 800f3d0:	20004be8 	.word	0x20004be8

0800f3d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f3de:	f000 f87b 	bl	800f4d8 <BSP_SD_IsDetected>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	d001      	beq.n	800f3ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f3e8:	2302      	movs	r3, #2
 800f3ea:	e012      	b.n	800f412 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f3ec:	480b      	ldr	r0, [pc, #44]	@ (800f41c <BSP_SD_Init+0x48>)
 800f3ee:	f7fb f87f 	bl	800a4f0 <HAL_SD_Init>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f3f6:	79fb      	ldrb	r3, [r7, #7]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d109      	bne.n	800f410 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f3fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800f400:	4806      	ldr	r0, [pc, #24]	@ (800f41c <BSP_SD_Init+0x48>)
 800f402:	f7fb fcc7 	bl	800ad94 <HAL_SD_ConfigWideBusOperation>
 800f406:	4603      	mov	r3, r0
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d001      	beq.n	800f410 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f40c:	2301      	movs	r3, #1
 800f40e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f410:	79fb      	ldrb	r3, [r7, #7]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3708      	adds	r7, #8
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	20004788 	.word	0x20004788

0800f420 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b086      	sub	sp, #24
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f42c:	2300      	movs	r3, #0
 800f42e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	68f9      	ldr	r1, [r7, #12]
 800f436:	4806      	ldr	r0, [pc, #24]	@ (800f450 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f438:	f7fb f90a 	bl	800a650 <HAL_SD_ReadBlocks_DMA>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d001      	beq.n	800f446 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f442:	2301      	movs	r3, #1
 800f444:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f446:	7dfb      	ldrb	r3, [r7, #23]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3718      	adds	r7, #24
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}
 800f450:	20004788 	.word	0x20004788

0800f454 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b086      	sub	sp, #24
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f460:	2300      	movs	r3, #0
 800f462:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	68ba      	ldr	r2, [r7, #8]
 800f468:	68f9      	ldr	r1, [r7, #12]
 800f46a:	4806      	ldr	r0, [pc, #24]	@ (800f484 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f46c:	f7fb f9d2 	bl	800a814 <HAL_SD_WriteBlocks_DMA>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d001      	beq.n	800f47a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f476:	2301      	movs	r3, #1
 800f478:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f47a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3718      	adds	r7, #24
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	20004788 	.word	0x20004788

0800f488 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f48c:	4805      	ldr	r0, [pc, #20]	@ (800f4a4 <BSP_SD_GetCardState+0x1c>)
 800f48e:	f7fb fd1b 	bl	800aec8 <HAL_SD_GetCardState>
 800f492:	4603      	mov	r3, r0
 800f494:	2b04      	cmp	r3, #4
 800f496:	bf14      	ite	ne
 800f498:	2301      	movne	r3, #1
 800f49a:	2300      	moveq	r3, #0
 800f49c:	b2db      	uxtb	r3, r3
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	20004788 	.word	0x20004788

0800f4a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b082      	sub	sp, #8
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f4b0:	6879      	ldr	r1, [r7, #4]
 800f4b2:	4803      	ldr	r0, [pc, #12]	@ (800f4c0 <BSP_SD_GetCardInfo+0x18>)
 800f4b4:	f7fb fc42 	bl	800ad3c <HAL_SD_GetCardInfo>
}
 800f4b8:	bf00      	nop
 800f4ba:	3708      	adds	r7, #8
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	20004788 	.word	0x20004788

0800f4c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f4cc:	f000 f9a2 	bl	800f814 <BSP_SD_ReadCpltCallback>
}
 800f4d0:	bf00      	nop
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f4e2:	f000 f80b 	bl	800f4fc <BSP_PlatformIsDetected>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d101      	bne.n	800f4f0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f4f0:	79fb      	ldrb	r3, [r7, #7]
 800f4f2:	b2db      	uxtb	r3, r3
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3708      	adds	r7, #8
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f502:	2301      	movs	r3, #1
 800f504:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f50a:	4806      	ldr	r0, [pc, #24]	@ (800f524 <BSP_PlatformIsDetected+0x28>)
 800f50c:	f7f5 fcbe 	bl	8004e8c <HAL_GPIO_ReadPin>
 800f510:	4603      	mov	r3, r0
 800f512:	2b00      	cmp	r3, #0
 800f514:	d001      	beq.n	800f51a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f516:	2300      	movs	r3, #0
 800f518:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f51a:	79fb      	ldrb	r3, [r7, #7]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	40020800 	.word	0x40020800

0800f528 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800f530:	f002 fc36 	bl	8011da0 <osKernelGetTickCount>
 800f534:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800f536:	e006      	b.n	800f546 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f538:	f7ff ffa6 	bl	800f488 <BSP_SD_GetCardState>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d101      	bne.n	800f546 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f542:	2300      	movs	r3, #0
 800f544:	e009      	b.n	800f55a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800f546:	f002 fc2b 	bl	8011da0 <osKernelGetTickCount>
 800f54a:	4602      	mov	r2, r0
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	1ad3      	subs	r3, r2, r3
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	429a      	cmp	r2, r3
 800f554:	d8f0      	bhi.n	800f538 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3710      	adds	r7, #16
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
	...

0800f564 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	4603      	mov	r3, r0
 800f56c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f56e:	4b0b      	ldr	r3, [pc, #44]	@ (800f59c <SD_CheckStatus+0x38>)
 800f570:	2201      	movs	r2, #1
 800f572:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f574:	f7ff ff88 	bl	800f488 <BSP_SD_GetCardState>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d107      	bne.n	800f58e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f57e:	4b07      	ldr	r3, [pc, #28]	@ (800f59c <SD_CheckStatus+0x38>)
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	b2db      	uxtb	r3, r3
 800f584:	f023 0301 	bic.w	r3, r3, #1
 800f588:	b2da      	uxtb	r2, r3
 800f58a:	4b04      	ldr	r3, [pc, #16]	@ (800f59c <SD_CheckStatus+0x38>)
 800f58c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f58e:	4b03      	ldr	r3, [pc, #12]	@ (800f59c <SD_CheckStatus+0x38>)
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	b2db      	uxtb	r3, r3
}
 800f594:	4618      	mov	r0, r3
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	20000009 	.word	0x20000009

0800f5a0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f5aa:	4b1c      	ldr	r3, [pc, #112]	@ (800f61c <SD_initialize+0x7c>)
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800f5b0:	f002 fb9e 	bl	8011cf0 <osKernelGetState>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b02      	cmp	r3, #2
 800f5b8:	d129      	bne.n	800f60e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f5ba:	f7ff ff0b 	bl	800f3d4 <BSP_SD_Init>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d107      	bne.n	800f5d4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f5c4:	79fb      	ldrb	r3, [r7, #7]
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7ff ffcc 	bl	800f564 <SD_CheckStatus>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	4b12      	ldr	r3, [pc, #72]	@ (800f61c <SD_initialize+0x7c>)
 800f5d2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f5d4:	4b11      	ldr	r3, [pc, #68]	@ (800f61c <SD_initialize+0x7c>)
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d017      	beq.n	800f60e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800f5de:	4b10      	ldr	r3, [pc, #64]	@ (800f620 <SD_initialize+0x80>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d107      	bne.n	800f5f6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	2102      	movs	r1, #2
 800f5ea:	200a      	movs	r0, #10
 800f5ec:	f002 fcdc 	bl	8011fa8 <osMessageQueueNew>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	4a0b      	ldr	r2, [pc, #44]	@ (800f620 <SD_initialize+0x80>)
 800f5f4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800f5f6:	4b0a      	ldr	r3, [pc, #40]	@ (800f620 <SD_initialize+0x80>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d107      	bne.n	800f60e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800f5fe:	4b07      	ldr	r3, [pc, #28]	@ (800f61c <SD_initialize+0x7c>)
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	b2db      	uxtb	r3, r3
 800f604:	f043 0301 	orr.w	r3, r3, #1
 800f608:	b2da      	uxtb	r2, r3
 800f60a:	4b04      	ldr	r3, [pc, #16]	@ (800f61c <SD_initialize+0x7c>)
 800f60c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f60e:	4b03      	ldr	r3, [pc, #12]	@ (800f61c <SD_initialize+0x7c>)
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	b2db      	uxtb	r3, r3
}
 800f614:	4618      	mov	r0, r3
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	20000009 	.word	0x20000009
 800f620:	20004bf0 	.word	0x20004bf0

0800f624 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b082      	sub	sp, #8
 800f628:	af00      	add	r7, sp, #0
 800f62a:	4603      	mov	r3, r0
 800f62c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f62e:	79fb      	ldrb	r3, [r7, #7]
 800f630:	4618      	mov	r0, r3
 800f632:	f7ff ff97 	bl	800f564 <SD_CheckStatus>
 800f636:	4603      	mov	r3, r0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b088      	sub	sp, #32
 800f644:	af00      	add	r7, sp, #0
 800f646:	60b9      	str	r1, [r7, #8]
 800f648:	607a      	str	r2, [r7, #4]
 800f64a:	603b      	str	r3, [r7, #0]
 800f64c:	4603      	mov	r3, r0
 800f64e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f650:	2301      	movs	r3, #1
 800f652:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f654:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f658:	f7ff ff66 	bl	800f528 <SD_CheckStatusWithTimeout>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	da01      	bge.n	800f666 <SD_read+0x26>
  {
    return res;
 800f662:	7ffb      	ldrb	r3, [r7, #31]
 800f664:	e02f      	b.n	800f6c6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f666:	683a      	ldr	r2, [r7, #0]
 800f668:	6879      	ldr	r1, [r7, #4]
 800f66a:	68b8      	ldr	r0, [r7, #8]
 800f66c:	f7ff fed8 	bl	800f420 <BSP_SD_ReadBlocks_DMA>
 800f670:	4603      	mov	r3, r0
 800f672:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800f674:	7fbb      	ldrb	r3, [r7, #30]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d124      	bne.n	800f6c4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f67a:	4b15      	ldr	r3, [pc, #84]	@ (800f6d0 <SD_read+0x90>)
 800f67c:	6818      	ldr	r0, [r3, #0]
 800f67e:	f107 0112 	add.w	r1, r7, #18
 800f682:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f686:	2200      	movs	r2, #0
 800f688:	f002 fd88 	bl	801219c <osMessageQueueGet>
 800f68c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d117      	bne.n	800f6c4 <SD_read+0x84>
 800f694:	8a7b      	ldrh	r3, [r7, #18]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d114      	bne.n	800f6c4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800f69a:	f002 fb81 	bl	8011da0 <osKernelGetTickCount>
 800f69e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f6a0:	e007      	b.n	800f6b2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f6a2:	f7ff fef1 	bl	800f488 <BSP_SD_GetCardState>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d102      	bne.n	800f6b2 <SD_read+0x72>
              {
                res = RES_OK;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f6b0:	e008      	b.n	800f6c4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f6b2:	f002 fb75 	bl	8011da0 <osKernelGetTickCount>
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	1ad3      	subs	r3, r2, r3
 800f6bc:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d9ee      	bls.n	800f6a2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f6c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3720      	adds	r7, #32
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	20004bf0 	.word	0x20004bf0

0800f6d4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b088      	sub	sp, #32
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60b9      	str	r1, [r7, #8]
 800f6dc:	607a      	str	r2, [r7, #4]
 800f6de:	603b      	str	r3, [r7, #0]
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f6e8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f6ec:	f7ff ff1c 	bl	800f528 <SD_CheckStatusWithTimeout>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	da01      	bge.n	800f6fa <SD_write+0x26>
  {
    return res;
 800f6f6:	7ffb      	ldrb	r3, [r7, #31]
 800f6f8:	e02d      	b.n	800f756 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f6fa:	683a      	ldr	r2, [r7, #0]
 800f6fc:	6879      	ldr	r1, [r7, #4]
 800f6fe:	68b8      	ldr	r0, [r7, #8]
 800f700:	f7ff fea8 	bl	800f454 <BSP_SD_WriteBlocks_DMA>
 800f704:	4603      	mov	r3, r0
 800f706:	2b00      	cmp	r3, #0
 800f708:	d124      	bne.n	800f754 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f70a:	4b15      	ldr	r3, [pc, #84]	@ (800f760 <SD_write+0x8c>)
 800f70c:	6818      	ldr	r0, [r3, #0]
 800f70e:	f107 0112 	add.w	r1, r7, #18
 800f712:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f716:	2200      	movs	r2, #0
 800f718:	f002 fd40 	bl	801219c <osMessageQueueGet>
 800f71c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800f71e:	69bb      	ldr	r3, [r7, #24]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d117      	bne.n	800f754 <SD_write+0x80>
 800f724:	8a7b      	ldrh	r3, [r7, #18]
 800f726:	2b02      	cmp	r3, #2
 800f728:	d114      	bne.n	800f754 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800f72a:	f002 fb39 	bl	8011da0 <osKernelGetTickCount>
 800f72e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f730:	e007      	b.n	800f742 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f732:	f7ff fea9 	bl	800f488 <BSP_SD_GetCardState>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d102      	bne.n	800f742 <SD_write+0x6e>
          {
            res = RES_OK;
 800f73c:	2300      	movs	r3, #0
 800f73e:	77fb      	strb	r3, [r7, #31]
            break;
 800f740:	e008      	b.n	800f754 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f742:	f002 fb2d 	bl	8011da0 <osKernelGetTickCount>
 800f746:	4602      	mov	r2, r0
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	1ad3      	subs	r3, r2, r3
 800f74c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f750:	4293      	cmp	r3, r2
 800f752:	d9ee      	bls.n	800f732 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800f754:	7ffb      	ldrb	r3, [r7, #31]
}
 800f756:	4618      	mov	r0, r3
 800f758:	3720      	adds	r7, #32
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	20004bf0 	.word	0x20004bf0

0800f764 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b08c      	sub	sp, #48	@ 0x30
 800f768:	af00      	add	r7, sp, #0
 800f76a:	4603      	mov	r3, r0
 800f76c:	603a      	str	r2, [r7, #0]
 800f76e:	71fb      	strb	r3, [r7, #7]
 800f770:	460b      	mov	r3, r1
 800f772:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f774:	2301      	movs	r3, #1
 800f776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f77a:	4b25      	ldr	r3, [pc, #148]	@ (800f810 <SD_ioctl+0xac>)
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	f003 0301 	and.w	r3, r3, #1
 800f784:	2b00      	cmp	r3, #0
 800f786:	d001      	beq.n	800f78c <SD_ioctl+0x28>
 800f788:	2303      	movs	r3, #3
 800f78a:	e03c      	b.n	800f806 <SD_ioctl+0xa2>

  switch (cmd)
 800f78c:	79bb      	ldrb	r3, [r7, #6]
 800f78e:	2b03      	cmp	r3, #3
 800f790:	d834      	bhi.n	800f7fc <SD_ioctl+0x98>
 800f792:	a201      	add	r2, pc, #4	@ (adr r2, 800f798 <SD_ioctl+0x34>)
 800f794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f798:	0800f7a9 	.word	0x0800f7a9
 800f79c:	0800f7b1 	.word	0x0800f7b1
 800f7a0:	0800f7c9 	.word	0x0800f7c9
 800f7a4:	0800f7e3 	.word	0x0800f7e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f7ae:	e028      	b.n	800f802 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f7b0:	f107 030c 	add.w	r3, r7, #12
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7ff fe77 	bl	800f4a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f7ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f7c6:	e01c      	b.n	800f802 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f7c8:	f107 030c 	add.w	r3, r7, #12
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7ff fe6b 	bl	800f4a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d4:	b29a      	uxth	r2, r3
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f7e0:	e00f      	b.n	800f802 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f7e2:	f107 030c 	add.w	r3, r7, #12
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7ff fe5e 	bl	800f4a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ee:	0a5a      	lsrs	r2, r3, #9
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f7fa:	e002      	b.n	800f802 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f7fc:	2304      	movs	r3, #4
 800f7fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f806:	4618      	mov	r0, r3
 800f808:	3730      	adds	r7, #48	@ 0x30
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	20000009 	.word	0x20000009

0800f814 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800f81a:	2301      	movs	r3, #1
 800f81c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800f81e:	4b05      	ldr	r3, [pc, #20]	@ (800f834 <BSP_SD_ReadCpltCallback+0x20>)
 800f820:	6818      	ldr	r0, [r3, #0]
 800f822:	1db9      	adds	r1, r7, #6
 800f824:	2300      	movs	r3, #0
 800f826:	2200      	movs	r2, #0
 800f828:	f002 fc44 	bl	80120b4 <osMessageQueuePut>
#endif
}
 800f82c:	bf00      	nop
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	20004bf0 	.word	0x20004bf0

0800f838 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800f838:	b590      	push	{r4, r7, lr}
 800f83a:	b089      	sub	sp, #36	@ 0x24
 800f83c:	af04      	add	r7, sp, #16
 800f83e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800f840:	2301      	movs	r3, #1
 800f842:	2202      	movs	r2, #2
 800f844:	2102      	movs	r1, #2
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 fcb7 	bl	80101ba <USBH_FindInterface>
 800f84c:	4603      	mov	r3, r0
 800f84e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f850:	7bfb      	ldrb	r3, [r7, #15]
 800f852:	2bff      	cmp	r3, #255	@ 0xff
 800f854:	d002      	beq.n	800f85c <USBH_CDC_InterfaceInit+0x24>
 800f856:	7bfb      	ldrb	r3, [r7, #15]
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d901      	bls.n	800f860 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f85c:	2302      	movs	r3, #2
 800f85e:	e13d      	b.n	800fadc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800f860:	7bfb      	ldrb	r3, [r7, #15]
 800f862:	4619      	mov	r1, r3
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f000 fc8c 	bl	8010182 <USBH_SelectInterface>
 800f86a:	4603      	mov	r3, r0
 800f86c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800f86e:	7bbb      	ldrb	r3, [r7, #14]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d001      	beq.n	800f878 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800f874:	2302      	movs	r3, #2
 800f876:	e131      	b.n	800fadc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800f87e:	2050      	movs	r0, #80	@ 0x50
 800f880:	f005 fed8 	bl	8015634 <malloc>
 800f884:	4603      	mov	r3, r0
 800f886:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f88e:	69db      	ldr	r3, [r3, #28]
 800f890:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d101      	bne.n	800f89c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800f898:	2302      	movs	r3, #2
 800f89a:	e11f      	b.n	800fadc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800f89c:	2250      	movs	r2, #80	@ 0x50
 800f89e:	2100      	movs	r1, #0
 800f8a0:	68b8      	ldr	r0, [r7, #8]
 800f8a2:	f006 f98f 	bl	8015bc4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f8a6:	7bfb      	ldrb	r3, [r7, #15]
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	211a      	movs	r1, #26
 800f8ac:	fb01 f303 	mul.w	r3, r1, r3
 800f8b0:	4413      	add	r3, r2
 800f8b2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	b25b      	sxtb	r3, r3
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	da15      	bge.n	800f8ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f8be:	7bfb      	ldrb	r3, [r7, #15]
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	211a      	movs	r1, #26
 800f8c4:	fb01 f303 	mul.w	r3, r1, r3
 800f8c8:	4413      	add	r3, r2
 800f8ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f8ce:	781a      	ldrb	r2, [r3, #0]
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f8d4:	7bfb      	ldrb	r3, [r7, #15]
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	211a      	movs	r1, #26
 800f8da:	fb01 f303 	mul.w	r3, r1, r3
 800f8de:	4413      	add	r3, r2
 800f8e0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f8e4:	881a      	ldrh	r2, [r3, #0]
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	785b      	ldrb	r3, [r3, #1]
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f002 f904 	bl	8011afe <USBH_AllocPipe>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	7819      	ldrb	r1, [r3, #0]
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	7858      	ldrb	r0, [r3, #1]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f912:	68ba      	ldr	r2, [r7, #8]
 800f914:	8952      	ldrh	r2, [r2, #10]
 800f916:	9202      	str	r2, [sp, #8]
 800f918:	2203      	movs	r2, #3
 800f91a:	9201      	str	r2, [sp, #4]
 800f91c:	9300      	str	r3, [sp, #0]
 800f91e:	4623      	mov	r3, r4
 800f920:	4602      	mov	r2, r0
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f002 f8bc 	bl	8011aa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	2200      	movs	r2, #0
 800f92e:	4619      	mov	r1, r3
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f005 fdf9 	bl	8015528 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f936:	2300      	movs	r3, #0
 800f938:	2200      	movs	r2, #0
 800f93a:	210a      	movs	r1, #10
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f000 fc3c 	bl	80101ba <USBH_FindInterface>
 800f942:	4603      	mov	r3, r0
 800f944:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f946:	7bfb      	ldrb	r3, [r7, #15]
 800f948:	2bff      	cmp	r3, #255	@ 0xff
 800f94a:	d002      	beq.n	800f952 <USBH_CDC_InterfaceInit+0x11a>
 800f94c:	7bfb      	ldrb	r3, [r7, #15]
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d901      	bls.n	800f956 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f952:	2302      	movs	r3, #2
 800f954:	e0c2      	b.n	800fadc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f956:	7bfb      	ldrb	r3, [r7, #15]
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	211a      	movs	r1, #26
 800f95c:	fb01 f303 	mul.w	r3, r1, r3
 800f960:	4413      	add	r3, r2
 800f962:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	b25b      	sxtb	r3, r3
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	da16      	bge.n	800f99c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f96e:	7bfb      	ldrb	r3, [r7, #15]
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	211a      	movs	r1, #26
 800f974:	fb01 f303 	mul.w	r3, r1, r3
 800f978:	4413      	add	r3, r2
 800f97a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f97e:	781a      	ldrb	r2, [r3, #0]
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f984:	7bfb      	ldrb	r3, [r7, #15]
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	211a      	movs	r1, #26
 800f98a:	fb01 f303 	mul.w	r3, r1, r3
 800f98e:	4413      	add	r3, r2
 800f990:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f994:	881a      	ldrh	r2, [r3, #0]
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	835a      	strh	r2, [r3, #26]
 800f99a:	e015      	b.n	800f9c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f99c:	7bfb      	ldrb	r3, [r7, #15]
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	211a      	movs	r1, #26
 800f9a2:	fb01 f303 	mul.w	r3, r1, r3
 800f9a6:	4413      	add	r3, r2
 800f9a8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f9ac:	781a      	ldrb	r2, [r3, #0]
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f9b2:	7bfb      	ldrb	r3, [r7, #15]
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	211a      	movs	r1, #26
 800f9b8:	fb01 f303 	mul.w	r3, r1, r3
 800f9bc:	4413      	add	r3, r2
 800f9be:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f9c2:	881a      	ldrh	r2, [r3, #0]
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800f9c8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	211a      	movs	r1, #26
 800f9ce:	fb01 f303 	mul.w	r3, r1, r3
 800f9d2:	4413      	add	r3, r2
 800f9d4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	b25b      	sxtb	r3, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	da16      	bge.n	800fa0e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f9e0:	7bfb      	ldrb	r3, [r7, #15]
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	211a      	movs	r1, #26
 800f9e6:	fb01 f303 	mul.w	r3, r1, r3
 800f9ea:	4413      	add	r3, r2
 800f9ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f9f0:	781a      	ldrb	r2, [r3, #0]
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f9f6:	7bfb      	ldrb	r3, [r7, #15]
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	211a      	movs	r1, #26
 800f9fc:	fb01 f303 	mul.w	r3, r1, r3
 800fa00:	4413      	add	r3, r2
 800fa02:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800fa06:	881a      	ldrh	r2, [r3, #0]
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	835a      	strh	r2, [r3, #26]
 800fa0c:	e015      	b.n	800fa3a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800fa0e:	7bfb      	ldrb	r3, [r7, #15]
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	211a      	movs	r1, #26
 800fa14:	fb01 f303 	mul.w	r3, r1, r3
 800fa18:	4413      	add	r3, r2
 800fa1a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800fa1e:	781a      	ldrb	r2, [r3, #0]
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	211a      	movs	r1, #26
 800fa2a:	fb01 f303 	mul.w	r3, r1, r3
 800fa2e:	4413      	add	r3, r2
 800fa30:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800fa34:	881a      	ldrh	r2, [r3, #0]
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	7b9b      	ldrb	r3, [r3, #14]
 800fa3e:	4619      	mov	r1, r3
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f002 f85c 	bl	8011afe <USBH_AllocPipe>
 800fa46:	4603      	mov	r3, r0
 800fa48:	461a      	mov	r2, r3
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	7bdb      	ldrb	r3, [r3, #15]
 800fa52:	4619      	mov	r1, r3
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f002 f852 	bl	8011afe <USBH_AllocPipe>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	7b59      	ldrb	r1, [r3, #13]
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	7b98      	ldrb	r0, [r3, #14]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fa76:	68ba      	ldr	r2, [r7, #8]
 800fa78:	8b12      	ldrh	r2, [r2, #24]
 800fa7a:	9202      	str	r2, [sp, #8]
 800fa7c:	2202      	movs	r2, #2
 800fa7e:	9201      	str	r2, [sp, #4]
 800fa80:	9300      	str	r3, [sp, #0]
 800fa82:	4623      	mov	r3, r4
 800fa84:	4602      	mov	r2, r0
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f002 f80a 	bl	8011aa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	7b19      	ldrb	r1, [r3, #12]
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	7bd8      	ldrb	r0, [r3, #15]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	8b52      	ldrh	r2, [r2, #26]
 800faa4:	9202      	str	r2, [sp, #8]
 800faa6:	2202      	movs	r2, #2
 800faa8:	9201      	str	r2, [sp, #4]
 800faaa:	9300      	str	r3, [sp, #0]
 800faac:	4623      	mov	r3, r4
 800faae:	4602      	mov	r2, r0
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f001 fff5 	bl	8011aa0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	2200      	movs	r2, #0
 800faba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	7b5b      	ldrb	r3, [r3, #13]
 800fac2:	2200      	movs	r2, #0
 800fac4:	4619      	mov	r1, r3
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f005 fd2e 	bl	8015528 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	7b1b      	ldrb	r3, [r3, #12]
 800fad0:	2200      	movs	r2, #0
 800fad2:	4619      	mov	r1, r3
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f005 fd27 	bl	8015528 <USBH_LL_SetToggle>

  return USBH_OK;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3714      	adds	r7, #20
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd90      	pop	{r4, r7, pc}

0800fae4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800faf2:	69db      	ldr	r3, [r3, #28]
 800faf4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00e      	beq.n	800fb1c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	4619      	mov	r1, r3
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f001 ffea 	bl	8011ade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	4619      	mov	r1, r3
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f002 f815 	bl	8011b40 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	7b1b      	ldrb	r3, [r3, #12]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00e      	beq.n	800fb42 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	7b1b      	ldrb	r3, [r3, #12]
 800fb28:	4619      	mov	r1, r3
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f001 ffd7 	bl	8011ade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	7b1b      	ldrb	r3, [r3, #12]
 800fb34:	4619      	mov	r1, r3
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f002 f802 	bl	8011b40 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	7b5b      	ldrb	r3, [r3, #13]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00e      	beq.n	800fb68 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	7b5b      	ldrb	r3, [r3, #13]
 800fb4e:	4619      	mov	r1, r3
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f001 ffc4 	bl	8011ade <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	7b5b      	ldrb	r3, [r3, #13]
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f001 ffef 	bl	8011b40 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2200      	movs	r2, #0
 800fb66:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fb6e:	69db      	ldr	r3, [r3, #28]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d00b      	beq.n	800fb8c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fb7a:	69db      	ldr	r3, [r3, #28]
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f005 fd61 	bl	8015644 <free>
    phost->pActiveClass->pData = 0U;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fb88:	2200      	movs	r2, #0
 800fb8a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800fb8c:	2300      	movs	r3, #0
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3710      	adds	r7, #16
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b084      	sub	sp, #16
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fba4:	69db      	ldr	r3, [r3, #28]
 800fba6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	3340      	adds	r3, #64	@ 0x40
 800fbac:	4619      	mov	r1, r3
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 f8b1 	bl	800fd16 <GetLineCoding>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800fbb8:	7afb      	ldrb	r3, [r7, #11]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d105      	bne.n	800fbca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fbc4:	2102      	movs	r1, #2
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800fbca:	7afb      	ldrb	r3, [r7, #11]
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3710      	adds	r7, #16
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b084      	sub	sp, #16
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fbea:	69db      	ldr	r3, [r3, #28]
 800fbec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800fbf4:	2b04      	cmp	r3, #4
 800fbf6:	d877      	bhi.n	800fce8 <USBH_CDC_Process+0x114>
 800fbf8:	a201      	add	r2, pc, #4	@ (adr r2, 800fc00 <USBH_CDC_Process+0x2c>)
 800fbfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbfe:	bf00      	nop
 800fc00:	0800fc15 	.word	0x0800fc15
 800fc04:	0800fc1b 	.word	0x0800fc1b
 800fc08:	0800fc4b 	.word	0x0800fc4b
 800fc0c:	0800fcbf 	.word	0x0800fcbf
 800fc10:	0800fccd 	.word	0x0800fccd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800fc14:	2300      	movs	r3, #0
 800fc16:	73fb      	strb	r3, [r7, #15]
      break;
 800fc18:	e06d      	b.n	800fcf6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fc1e:	4619      	mov	r1, r3
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 f897 	bl	800fd54 <SetLineCoding>
 800fc26:	4603      	mov	r3, r0
 800fc28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fc2a:	7bbb      	ldrb	r3, [r7, #14]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d104      	bne.n	800fc3a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	2202      	movs	r2, #2
 800fc34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800fc38:	e058      	b.n	800fcec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800fc3a:	7bbb      	ldrb	r3, [r7, #14]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d055      	beq.n	800fcec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	2204      	movs	r2, #4
 800fc44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800fc48:	e050      	b.n	800fcec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	3340      	adds	r3, #64	@ 0x40
 800fc4e:	4619      	mov	r1, r3
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 f860 	bl	800fd16 <GetLineCoding>
 800fc56:	4603      	mov	r3, r0
 800fc58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fc5a:	7bbb      	ldrb	r3, [r7, #14]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d126      	bne.n	800fcae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fc72:	791b      	ldrb	r3, [r3, #4]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d13b      	bne.n	800fcf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fc82:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d133      	bne.n	800fcf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fc92:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d12b      	bne.n	800fcf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fca0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d124      	bne.n	800fcf0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 f96a 	bl	800ff80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800fcac:	e020      	b.n	800fcf0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800fcae:	7bbb      	ldrb	r3, [r7, #14]
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d01d      	beq.n	800fcf0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	2204      	movs	r2, #4
 800fcb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800fcbc:	e018      	b.n	800fcf0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f000 f867 	bl	800fd92 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f000 f8e6 	bl	800fe96 <CDC_ProcessReception>
      break;
 800fcca:	e014      	b.n	800fcf6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800fccc:	2100      	movs	r1, #0
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f001 f8f8 	bl	8010ec4 <USBH_ClrFeature>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fcd8:	7bbb      	ldrb	r3, [r7, #14]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d10a      	bne.n	800fcf4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2200      	movs	r2, #0
 800fce2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800fce6:	e005      	b.n	800fcf4 <USBH_CDC_Process+0x120>

    default:
      break;
 800fce8:	bf00      	nop
 800fcea:	e004      	b.n	800fcf6 <USBH_CDC_Process+0x122>
      break;
 800fcec:	bf00      	nop
 800fcee:	e002      	b.n	800fcf6 <USBH_CDC_Process+0x122>
      break;
 800fcf0:	bf00      	nop
 800fcf2:	e000      	b.n	800fcf6 <USBH_CDC_Process+0x122>
      break;
 800fcf4:	bf00      	nop

  }

  return status;
 800fcf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3710      	adds	r7, #16
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b083      	sub	sp, #12
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr

0800fd16 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b082      	sub	sp, #8
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
 800fd1e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	22a1      	movs	r2, #161	@ 0xa1
 800fd24:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2221      	movs	r2, #33	@ 0x21
 800fd2a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2207      	movs	r2, #7
 800fd3c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	2207      	movs	r2, #7
 800fd42:	4619      	mov	r1, r3
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f001 fbf1 	bl	801152c <USBH_CtlReq>
 800fd4a:	4603      	mov	r3, r0
}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3708      	adds	r7, #8
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2221      	movs	r2, #33	@ 0x21
 800fd62:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2220      	movs	r2, #32
 800fd68:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2207      	movs	r2, #7
 800fd7a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	2207      	movs	r2, #7
 800fd80:	4619      	mov	r1, r3
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f001 fbd2 	bl	801152c <USBH_CtlReq>
 800fd88:	4603      	mov	r3, r0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3708      	adds	r7, #8
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}

0800fd92 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800fd92:	b580      	push	{r7, lr}
 800fd94:	b086      	sub	sp, #24
 800fd96:	af02      	add	r7, sp, #8
 800fd98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fda0:	69db      	ldr	r3, [r3, #28]
 800fda2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fda4:	2300      	movs	r3, #0
 800fda6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d002      	beq.n	800fdb8 <CDC_ProcessTransmission+0x26>
 800fdb2:	2b02      	cmp	r3, #2
 800fdb4:	d023      	beq.n	800fdfe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800fdb6:	e06a      	b.n	800fe8e <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	8b12      	ldrh	r2, [r2, #24]
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d90b      	bls.n	800fddc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	69d9      	ldr	r1, [r3, #28]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	8b1a      	ldrh	r2, [r3, #24]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	7b5b      	ldrb	r3, [r3, #13]
 800fdd0:	2001      	movs	r0, #1
 800fdd2:	9000      	str	r0, [sp, #0]
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f001 fe20 	bl	8011a1a <USBH_BulkSendData>
 800fdda:	e00b      	b.n	800fdf4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	7b5b      	ldrb	r3, [r3, #13]
 800fdea:	2001      	movs	r0, #1
 800fdec:	9000      	str	r0, [sp, #0]
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f001 fe13 	bl	8011a1a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2202      	movs	r2, #2
 800fdf8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800fdfc:	e047      	b.n	800fe8e <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	7b5b      	ldrb	r3, [r3, #13]
 800fe02:	4619      	mov	r1, r3
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f005 fb65 	bl	80154d4 <USBH_LL_GetURBState>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800fe0e:	7afb      	ldrb	r3, [r7, #11]
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d12e      	bne.n	800fe72 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	8b12      	ldrh	r2, [r2, #24]
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	d90e      	bls.n	800fe3e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	8b12      	ldrh	r2, [r2, #24]
 800fe28:	1a9a      	subs	r2, r3, r2
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	69db      	ldr	r3, [r3, #28]
 800fe32:	68fa      	ldr	r2, [r7, #12]
 800fe34:	8b12      	ldrh	r2, [r2, #24]
 800fe36:	441a      	add	r2, r3
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	61da      	str	r2, [r3, #28]
 800fe3c:	e002      	b.n	800fe44 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	2200      	movs	r2, #0
 800fe42:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d004      	beq.n	800fe56 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800fe54:	e006      	b.n	800fe64 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f000 f87a 	bl	800ff58 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800fe64:	2300      	movs	r3, #0
 800fe66:	2200      	movs	r2, #0
 800fe68:	2104      	movs	r1, #4
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f000 feb6 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 800fe70:	e00c      	b.n	800fe8c <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 800fe72:	7afb      	ldrb	r3, [r7, #11]
 800fe74:	2b02      	cmp	r3, #2
 800fe76:	d109      	bne.n	800fe8c <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800fe80:	2300      	movs	r3, #0
 800fe82:	2200      	movs	r2, #0
 800fe84:	2104      	movs	r1, #4
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 fea8 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 800fe8c:	bf00      	nop
  }
}
 800fe8e:	bf00      	nop
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b086      	sub	sp, #24
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fea4:	69db      	ldr	r3, [r3, #28]
 800fea6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fea8:	2300      	movs	r3, #0
 800feaa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800feb2:	2b03      	cmp	r3, #3
 800feb4:	d002      	beq.n	800febc <CDC_ProcessReception+0x26>
 800feb6:	2b04      	cmp	r3, #4
 800feb8:	d00e      	beq.n	800fed8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800feba:	e049      	b.n	800ff50 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	6a19      	ldr	r1, [r3, #32]
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	8b5a      	ldrh	r2, [r3, #26]
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	7b1b      	ldrb	r3, [r3, #12]
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f001 fdcb 	bl	8011a64 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	2204      	movs	r2, #4
 800fed2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800fed6:	e03b      	b.n	800ff50 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	7b1b      	ldrb	r3, [r3, #12]
 800fedc:	4619      	mov	r1, r3
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f005 faf8 	bl	80154d4 <USBH_LL_GetURBState>
 800fee4:	4603      	mov	r3, r0
 800fee6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800fee8:	7cfb      	ldrb	r3, [r7, #19]
 800feea:	2b01      	cmp	r3, #1
 800feec:	d12f      	bne.n	800ff4e <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	7b1b      	ldrb	r3, [r3, #12]
 800fef2:	4619      	mov	r1, r3
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f005 fa5b 	bl	80153b0 <USBH_LL_GetLastXferSize>
 800fefa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff00:	68fa      	ldr	r2, [r7, #12]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d016      	beq.n	800ff34 <CDC_ProcessReception+0x9e>
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	8b5b      	ldrh	r3, [r3, #26]
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d110      	bne.n	800ff34 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	1ad2      	subs	r2, r2, r3
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	6a1a      	ldr	r2, [r3, #32]
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	441a      	add	r2, r3
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	2203      	movs	r2, #3
 800ff2e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800ff32:	e006      	b.n	800ff42 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	2200      	movs	r2, #0
 800ff38:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f000 f815 	bl	800ff6c <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ff42:	2300      	movs	r3, #0
 800ff44:	2200      	movs	r2, #0
 800ff46:	2104      	movs	r1, #4
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 fe47 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 800ff4e:	bf00      	nop
  }
}
 800ff50:	bf00      	nop
 800ff52:	3718      	adds	r7, #24
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ff60:	bf00      	nop
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ff74:	bf00      	nop
 800ff76:	370c      	adds	r7, #12
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ff88:	bf00      	nop
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d101      	bne.n	800ffac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ffa8:	2302      	movs	r3, #2
 800ffaa:	e044      	b.n	8010036 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	79fa      	ldrb	r2, [r7, #7]
 800ffb0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ffc4:	68f8      	ldr	r0, [r7, #12]
 800ffc6:	f000 f841 	bl	801004c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d003      	beq.n	800fff8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	68ba      	ldr	r2, [r7, #8]
 800fff4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800fff8:	2200      	movs	r2, #0
 800fffa:	2104      	movs	r1, #4
 800fffc:	2010      	movs	r0, #16
 800fffe:	f001 ffd3 	bl	8011fa8 <osMessageQueueNew>
 8010002:	4602      	mov	r2, r0
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 801000a:	4b0d      	ldr	r3, [pc, #52]	@ (8010040 <USBH_Init+0xac>)
 801000c:	4a0d      	ldr	r2, [pc, #52]	@ (8010044 <USBH_Init+0xb0>)
 801000e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8010010:	4b0b      	ldr	r3, [pc, #44]	@ (8010040 <USBH_Init+0xac>)
 8010012:	2280      	movs	r2, #128	@ 0x80
 8010014:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8010016:	4b0a      	ldr	r3, [pc, #40]	@ (8010040 <USBH_Init+0xac>)
 8010018:	2218      	movs	r2, #24
 801001a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 801001c:	4a08      	ldr	r2, [pc, #32]	@ (8010040 <USBH_Init+0xac>)
 801001e:	68f9      	ldr	r1, [r7, #12]
 8010020:	4809      	ldr	r0, [pc, #36]	@ (8010048 <USBH_Init+0xb4>)
 8010022:	f001 fee5 	bl	8011df0 <osThreadNew>
 8010026:	4602      	mov	r2, r0
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 801002e:	68f8      	ldr	r0, [r7, #12]
 8010030:	f005 f90a 	bl	8015248 <USBH_LL_Init>

  return USBH_OK;
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3710      	adds	r7, #16
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	20004bf4 	.word	0x20004bf4
 8010044:	080168b8 	.word	0x080168b8
 8010048:	08010c25 	.word	0x08010c25

0801004c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010054:	2300      	movs	r3, #0
 8010056:	60fb      	str	r3, [r7, #12]
 8010058:	e009      	b.n	801006e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	33e0      	adds	r3, #224	@ 0xe0
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	4413      	add	r3, r2
 8010064:	2200      	movs	r2, #0
 8010066:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	3301      	adds	r3, #1
 801006c:	60fb      	str	r3, [r7, #12]
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2b0f      	cmp	r3, #15
 8010072:	d9f2      	bls.n	801005a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010074:	2300      	movs	r3, #0
 8010076:	60fb      	str	r3, [r7, #12]
 8010078:	e009      	b.n	801008e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	4413      	add	r3, r2
 8010080:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010084:	2200      	movs	r2, #0
 8010086:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	3301      	adds	r3, #1
 801008c:	60fb      	str	r3, [r7, #12]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010094:	d3f1      	bcc.n	801007a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2201      	movs	r2, #1
 80100a6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2200      	movs	r2, #0
 80100ac:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2201      	movs	r2, #1
 80100b4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2240      	movs	r2, #64	@ 0x40
 80100ba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2200      	movs	r2, #0
 80100c0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2201      	movs	r2, #1
 80100ce:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2200      	movs	r2, #0
 80100d6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2200      	movs	r2, #0
 80100de:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	331c      	adds	r3, #28
 80100e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80100ea:	2100      	movs	r1, #0
 80100ec:	4618      	mov	r0, r3
 80100ee:	f005 fd69 	bl	8015bc4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80100f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100fc:	2100      	movs	r1, #0
 80100fe:	4618      	mov	r0, r3
 8010100:	f005 fd60 	bl	8015bc4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f203 3326 	addw	r3, r3, #806	@ 0x326
 801010a:	2212      	movs	r2, #18
 801010c:	2100      	movs	r1, #0
 801010e:	4618      	mov	r0, r3
 8010110:	f005 fd58 	bl	8015bc4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 801011a:	223e      	movs	r2, #62	@ 0x3e
 801011c:	2100      	movs	r1, #0
 801011e:	4618      	mov	r0, r3
 8010120:	f005 fd50 	bl	8015bc4 <memset>

  return USBH_OK;
 8010124:	2300      	movs	r3, #0
}
 8010126:	4618      	mov	r0, r3
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 801012e:	b480      	push	{r7}
 8010130:	b085      	sub	sp, #20
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010138:	2300      	movs	r3, #0
 801013a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d016      	beq.n	8010170 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010148:	2b00      	cmp	r3, #0
 801014a:	d10e      	bne.n	801016a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010152:	1c59      	adds	r1, r3, #1
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	33de      	adds	r3, #222	@ 0xde
 801015e:	6839      	ldr	r1, [r7, #0]
 8010160:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010164:	2300      	movs	r3, #0
 8010166:	73fb      	strb	r3, [r7, #15]
 8010168:	e004      	b.n	8010174 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 801016a:	2302      	movs	r3, #2
 801016c:	73fb      	strb	r3, [r7, #15]
 801016e:	e001      	b.n	8010174 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010170:	2302      	movs	r3, #2
 8010172:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010174:	7bfb      	ldrb	r3, [r7, #15]
}
 8010176:	4618      	mov	r0, r3
 8010178:	3714      	adds	r7, #20
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr

08010182 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010182:	b480      	push	{r7}
 8010184:	b085      	sub	sp, #20
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
 801018a:	460b      	mov	r3, r1
 801018c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 801018e:	2300      	movs	r3, #0
 8010190:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8010198:	78fa      	ldrb	r2, [r7, #3]
 801019a:	429a      	cmp	r2, r3
 801019c:	d204      	bcs.n	80101a8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	78fa      	ldrb	r2, [r7, #3]
 80101a2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80101a6:	e001      	b.n	80101ac <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80101a8:	2302      	movs	r3, #2
 80101aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80101ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3714      	adds	r7, #20
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr

080101ba <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80101ba:	b480      	push	{r7}
 80101bc:	b087      	sub	sp, #28
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
 80101c2:	4608      	mov	r0, r1
 80101c4:	4611      	mov	r1, r2
 80101c6:	461a      	mov	r2, r3
 80101c8:	4603      	mov	r3, r0
 80101ca:	70fb      	strb	r3, [r7, #3]
 80101cc:	460b      	mov	r3, r1
 80101ce:	70bb      	strb	r3, [r7, #2]
 80101d0:	4613      	mov	r3, r2
 80101d2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80101d4:	2300      	movs	r3, #0
 80101d6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80101d8:	2300      	movs	r3, #0
 80101da:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80101e2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80101e4:	e025      	b.n	8010232 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80101e6:	7dfb      	ldrb	r3, [r7, #23]
 80101e8:	221a      	movs	r2, #26
 80101ea:	fb02 f303 	mul.w	r3, r2, r3
 80101ee:	3308      	adds	r3, #8
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	4413      	add	r3, r2
 80101f4:	3302      	adds	r3, #2
 80101f6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	795b      	ldrb	r3, [r3, #5]
 80101fc:	78fa      	ldrb	r2, [r7, #3]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d002      	beq.n	8010208 <USBH_FindInterface+0x4e>
 8010202:	78fb      	ldrb	r3, [r7, #3]
 8010204:	2bff      	cmp	r3, #255	@ 0xff
 8010206:	d111      	bne.n	801022c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801020c:	78ba      	ldrb	r2, [r7, #2]
 801020e:	429a      	cmp	r2, r3
 8010210:	d002      	beq.n	8010218 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010212:	78bb      	ldrb	r3, [r7, #2]
 8010214:	2bff      	cmp	r3, #255	@ 0xff
 8010216:	d109      	bne.n	801022c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801021c:	787a      	ldrb	r2, [r7, #1]
 801021e:	429a      	cmp	r2, r3
 8010220:	d002      	beq.n	8010228 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010222:	787b      	ldrb	r3, [r7, #1]
 8010224:	2bff      	cmp	r3, #255	@ 0xff
 8010226:	d101      	bne.n	801022c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010228:	7dfb      	ldrb	r3, [r7, #23]
 801022a:	e006      	b.n	801023a <USBH_FindInterface+0x80>
    }
    if_ix++;
 801022c:	7dfb      	ldrb	r3, [r7, #23]
 801022e:	3301      	adds	r3, #1
 8010230:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010232:	7dfb      	ldrb	r3, [r7, #23]
 8010234:	2b01      	cmp	r3, #1
 8010236:	d9d6      	bls.n	80101e6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010238:	23ff      	movs	r3, #255	@ 0xff
}
 801023a:	4618      	mov	r0, r3
 801023c:	371c      	adds	r7, #28
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr

08010246 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8010246:	b580      	push	{r7, lr}
 8010248:	b082      	sub	sp, #8
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f005 f836 	bl	80152c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8010254:	2101      	movs	r1, #1
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f005 f94f 	bl	80154fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 801025c:	2300      	movs	r3, #0
}
 801025e:	4618      	mov	r0, r3
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
	...

08010268 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b088      	sub	sp, #32
 801026c:	af04      	add	r7, sp, #16
 801026e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8010270:	2302      	movs	r3, #2
 8010272:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8010274:	2300      	movs	r3, #0
 8010276:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 801027e:	b2db      	uxtb	r3, r3
 8010280:	2b01      	cmp	r3, #1
 8010282:	d102      	bne.n	801028a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2203      	movs	r2, #3
 8010288:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	b2db      	uxtb	r3, r3
 8010290:	2b0b      	cmp	r3, #11
 8010292:	f200 81f5 	bhi.w	8010680 <USBH_Process+0x418>
 8010296:	a201      	add	r2, pc, #4	@ (adr r2, 801029c <USBH_Process+0x34>)
 8010298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029c:	080102cd 	.word	0x080102cd
 80102a0:	0801030b 	.word	0x0801030b
 80102a4:	08010381 	.word	0x08010381
 80102a8:	0801060f 	.word	0x0801060f
 80102ac:	08010681 	.word	0x08010681
 80102b0:	0801042d 	.word	0x0801042d
 80102b4:	080105a9 	.word	0x080105a9
 80102b8:	0801046f 	.word	0x0801046f
 80102bc:	0801049b 	.word	0x0801049b
 80102c0:	080104c3 	.word	0x080104c3
 80102c4:	08010511 	.word	0x08010511
 80102c8:	080105f7 	.word	0x080105f7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80102d2:	b2db      	uxtb	r3, r3
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f000 81d5 	beq.w	8010684 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2201      	movs	r2, #1
 80102de:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80102e0:	20c8      	movs	r0, #200	@ 0xc8
 80102e2:	f005 f954 	bl	801558e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f005 f847 	bl	801537a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80102fc:	2300      	movs	r3, #0
 80102fe:	2200      	movs	r2, #0
 8010300:	2101      	movs	r1, #1
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 fc6a 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8010308:	e1bc      	b.n	8010684 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8010310:	b2db      	uxtb	r3, r3
 8010312:	2b01      	cmp	r3, #1
 8010314:	d107      	bne.n	8010326 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2200      	movs	r2, #0
 801031a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2202      	movs	r2, #2
 8010322:	701a      	strb	r2, [r3, #0]
 8010324:	e025      	b.n	8010372 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 801032c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010330:	d914      	bls.n	801035c <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010338:	3301      	adds	r3, #1
 801033a:	b2da      	uxtb	r2, r3
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010348:	2b03      	cmp	r3, #3
 801034a:	d903      	bls.n	8010354 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	220d      	movs	r2, #13
 8010350:	701a      	strb	r2, [r3, #0]
 8010352:	e00e      	b.n	8010372 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	701a      	strb	r2, [r3, #0]
 801035a:	e00a      	b.n	8010372 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8010362:	f103 020a 	add.w	r2, r3, #10
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 801036c:	200a      	movs	r0, #10
 801036e:	f005 f90e 	bl	801558e <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010372:	2300      	movs	r3, #0
 8010374:	2200      	movs	r2, #0
 8010376:	2101      	movs	r1, #1
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 fc2f 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801037e:	e188      	b.n	8010692 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010386:	2b00      	cmp	r3, #0
 8010388:	d005      	beq.n	8010396 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010390:	2104      	movs	r1, #4
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8010396:	2064      	movs	r0, #100	@ 0x64
 8010398:	f005 f8f9 	bl	801558e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f004 ffc5 	bl	801532c <USBH_LL_GetSpeed>
 80103a2:	4603      	mov	r3, r0
 80103a4:	461a      	mov	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2205      	movs	r2, #5
 80103b0:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80103b2:	2100      	movs	r1, #0
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f001 fba2 	bl	8011afe <USBH_AllocPipe>
 80103ba:	4603      	mov	r3, r0
 80103bc:	461a      	mov	r2, r3
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80103c2:	2180      	movs	r1, #128	@ 0x80
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f001 fb9a 	bl	8011afe <USBH_AllocPipe>
 80103ca:	4603      	mov	r3, r0
 80103cc:	461a      	mov	r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	7919      	ldrb	r1, [r3, #4]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80103e6:	9202      	str	r2, [sp, #8]
 80103e8:	2200      	movs	r2, #0
 80103ea:	9201      	str	r2, [sp, #4]
 80103ec:	9300      	str	r3, [sp, #0]
 80103ee:	4603      	mov	r3, r0
 80103f0:	2280      	movs	r2, #128	@ 0x80
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f001 fb54 	bl	8011aa0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	7959      	ldrb	r1, [r3, #5]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801040c:	9202      	str	r2, [sp, #8]
 801040e:	2200      	movs	r2, #0
 8010410:	9201      	str	r2, [sp, #4]
 8010412:	9300      	str	r3, [sp, #0]
 8010414:	4603      	mov	r3, r0
 8010416:	2200      	movs	r2, #0
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f001 fb41 	bl	8011aa0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801041e:	2300      	movs	r3, #0
 8010420:	2200      	movs	r2, #0
 8010422:	2101      	movs	r1, #1
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f000 fbd9 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801042a:	e132      	b.n	8010692 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 f935 	bl	801069c <USBH_HandleEnum>
 8010432:	4603      	mov	r3, r0
 8010434:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8010436:	7bbb      	ldrb	r3, [r7, #14]
 8010438:	b2db      	uxtb	r3, r3
 801043a:	2b00      	cmp	r3, #0
 801043c:	f040 8124 	bne.w	8010688 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2200      	movs	r2, #0
 8010444:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 801044e:	2b01      	cmp	r3, #1
 8010450:	d103      	bne.n	801045a <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2208      	movs	r2, #8
 8010456:	701a      	strb	r2, [r3, #0]
 8010458:	e002      	b.n	8010460 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2207      	movs	r2, #7
 801045e:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010460:	2300      	movs	r3, #0
 8010462:	2200      	movs	r2, #0
 8010464:	2105      	movs	r1, #5
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 fbb8 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 801046c:	e10c      	b.n	8010688 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010474:	2b00      	cmp	r3, #0
 8010476:	f000 8109 	beq.w	801068c <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010480:	2101      	movs	r1, #1
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	2208      	movs	r2, #8
 801048a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801048c:	2300      	movs	r3, #0
 801048e:	2200      	movs	r2, #0
 8010490:	2105      	movs	r1, #5
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f000 fba2 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8010498:	e0f8      	b.n	801068c <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80104a0:	4619      	mov	r1, r3
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 fcc7 	bl	8010e36 <USBH_SetCfg>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d102      	bne.n	80104b4 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2209      	movs	r2, #9
 80104b2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80104b4:	2300      	movs	r3, #0
 80104b6:	2200      	movs	r2, #0
 80104b8:	2101      	movs	r1, #1
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f000 fb8e 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80104c0:	e0e7      	b.n	8010692 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80104c8:	f003 0320 	and.w	r3, r3, #32
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d015      	beq.n	80104fc <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80104d0:	2101      	movs	r1, #1
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f000 fcd2 	bl	8010e7c <USBH_SetFeature>
 80104d8:	4603      	mov	r3, r0
 80104da:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80104dc:	7bbb      	ldrb	r3, [r7, #14]
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d103      	bne.n	80104ec <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	220a      	movs	r2, #10
 80104e8:	701a      	strb	r2, [r3, #0]
 80104ea:	e00a      	b.n	8010502 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80104ec:	7bbb      	ldrb	r3, [r7, #14]
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	2b03      	cmp	r3, #3
 80104f2:	d106      	bne.n	8010502 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	220a      	movs	r2, #10
 80104f8:	701a      	strb	r2, [r3, #0]
 80104fa:	e002      	b.n	8010502 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	220a      	movs	r2, #10
 8010500:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010502:	2300      	movs	r3, #0
 8010504:	2200      	movs	r2, #0
 8010506:	2101      	movs	r1, #1
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 fb67 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801050e:	e0c0      	b.n	8010692 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010516:	2b00      	cmp	r3, #0
 8010518:	d03f      	beq.n	801059a <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2200      	movs	r2, #0
 801051e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010522:	2300      	movs	r3, #0
 8010524:	73fb      	strb	r3, [r7, #15]
 8010526:	e016      	b.n	8010556 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8010528:	7bfa      	ldrb	r2, [r7, #15]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	32de      	adds	r2, #222	@ 0xde
 801052e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010532:	791a      	ldrb	r2, [r3, #4]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 801053a:	429a      	cmp	r2, r3
 801053c:	d108      	bne.n	8010550 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 801053e:	7bfa      	ldrb	r2, [r7, #15]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	32de      	adds	r2, #222	@ 0xde
 8010544:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 801054e:	e005      	b.n	801055c <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010550:	7bfb      	ldrb	r3, [r7, #15]
 8010552:	3301      	adds	r3, #1
 8010554:	73fb      	strb	r3, [r7, #15]
 8010556:	7bfb      	ldrb	r3, [r7, #15]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d0e5      	beq.n	8010528 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010562:	2b00      	cmp	r3, #0
 8010564:	d016      	beq.n	8010594 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801056c:	689b      	ldr	r3, [r3, #8]
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	4798      	blx	r3
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d109      	bne.n	801058c <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2206      	movs	r2, #6
 801057c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010584:	2103      	movs	r1, #3
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	4798      	blx	r3
 801058a:	e006      	b.n	801059a <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	220d      	movs	r2, #13
 8010590:	701a      	strb	r2, [r3, #0]
 8010592:	e002      	b.n	801059a <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	220d      	movs	r2, #13
 8010598:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801059a:	2300      	movs	r3, #0
 801059c:	2200      	movs	r2, #0
 801059e:	2105      	movs	r1, #5
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 fb1b 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80105a6:	e074      	b.n	8010692 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d017      	beq.n	80105e2 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80105b8:	691b      	ldr	r3, [r3, #16]
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	4798      	blx	r3
 80105be:	4603      	mov	r3, r0
 80105c0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80105c2:	7bbb      	ldrb	r3, [r7, #14]
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d103      	bne.n	80105d2 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	220b      	movs	r2, #11
 80105ce:	701a      	strb	r2, [r3, #0]
 80105d0:	e00a      	b.n	80105e8 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 80105d2:	7bbb      	ldrb	r3, [r7, #14]
 80105d4:	b2db      	uxtb	r3, r3
 80105d6:	2b02      	cmp	r3, #2
 80105d8:	d106      	bne.n	80105e8 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	220d      	movs	r2, #13
 80105de:	701a      	strb	r2, [r3, #0]
 80105e0:	e002      	b.n	80105e8 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	220d      	movs	r2, #13
 80105e6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80105e8:	2300      	movs	r3, #0
 80105ea:	2200      	movs	r2, #0
 80105ec:	2105      	movs	r1, #5
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f000 faf4 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80105f4:	e04d      	b.n	8010692 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d047      	beq.n	8010690 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010606:	695b      	ldr	r3, [r3, #20]
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	4798      	blx	r3
      }
      break;
 801060c:	e040      	b.n	8010690 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2200      	movs	r2, #0
 8010612:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7ff fd18 	bl	801004c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010622:	2b00      	cmp	r3, #0
 8010624:	d009      	beq.n	801063a <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010640:	2b00      	cmp	r3, #0
 8010642:	d005      	beq.n	8010650 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801064a:	2105      	movs	r1, #5
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8010656:	b2db      	uxtb	r3, r3
 8010658:	2b01      	cmp	r3, #1
 801065a:	d107      	bne.n	801066c <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2200      	movs	r2, #0
 8010660:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f7ff fdee 	bl	8010246 <USBH_Start>
 801066a:	e002      	b.n	8010672 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f004 fe27 	bl	80152c0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010672:	2300      	movs	r3, #0
 8010674:	2200      	movs	r2, #0
 8010676:	2101      	movs	r1, #1
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f000 faaf 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801067e:	e008      	b.n	8010692 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 8010680:	bf00      	nop
 8010682:	e006      	b.n	8010692 <USBH_Process+0x42a>
      break;
 8010684:	bf00      	nop
 8010686:	e004      	b.n	8010692 <USBH_Process+0x42a>
      break;
 8010688:	bf00      	nop
 801068a:	e002      	b.n	8010692 <USBH_Process+0x42a>
    break;
 801068c:	bf00      	nop
 801068e:	e000      	b.n	8010692 <USBH_Process+0x42a>
      break;
 8010690:	bf00      	nop
  }
  return USBH_OK;
 8010692:	2300      	movs	r3, #0
}
 8010694:	4618      	mov	r0, r3
 8010696:	3710      	adds	r7, #16
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b088      	sub	sp, #32
 80106a0:	af04      	add	r7, sp, #16
 80106a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80106a4:	2301      	movs	r3, #1
 80106a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80106a8:	2301      	movs	r3, #1
 80106aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	785b      	ldrb	r3, [r3, #1]
 80106b0:	2b07      	cmp	r3, #7
 80106b2:	f200 81db 	bhi.w	8010a6c <USBH_HandleEnum+0x3d0>
 80106b6:	a201      	add	r2, pc, #4	@ (adr r2, 80106bc <USBH_HandleEnum+0x20>)
 80106b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106bc:	080106dd 	.word	0x080106dd
 80106c0:	08010797 	.word	0x08010797
 80106c4:	08010801 	.word	0x08010801
 80106c8:	0801088b 	.word	0x0801088b
 80106cc:	080108f5 	.word	0x080108f5
 80106d0:	08010965 	.word	0x08010965
 80106d4:	080109cf 	.word	0x080109cf
 80106d8:	08010a2d 	.word	0x08010a2d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80106dc:	2108      	movs	r1, #8
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f000 fac6 	bl	8010c70 <USBH_Get_DevDesc>
 80106e4:	4603      	mov	r3, r0
 80106e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80106e8:	7bbb      	ldrb	r3, [r7, #14]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d12e      	bne.n	801074c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2201      	movs	r2, #1
 80106fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	7919      	ldrb	r1, [r3, #4]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010712:	9202      	str	r2, [sp, #8]
 8010714:	2200      	movs	r2, #0
 8010716:	9201      	str	r2, [sp, #4]
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	4603      	mov	r3, r0
 801071c:	2280      	movs	r2, #128	@ 0x80
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f001 f9be 	bl	8011aa0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	7959      	ldrb	r1, [r3, #5]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010734:	687a      	ldr	r2, [r7, #4]
 8010736:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010738:	9202      	str	r2, [sp, #8]
 801073a:	2200      	movs	r2, #0
 801073c:	9201      	str	r2, [sp, #4]
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	4603      	mov	r3, r0
 8010742:	2200      	movs	r2, #0
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f001 f9ab 	bl	8011aa0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801074a:	e191      	b.n	8010a70 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801074c:	7bbb      	ldrb	r3, [r7, #14]
 801074e:	2b03      	cmp	r3, #3
 8010750:	f040 818e 	bne.w	8010a70 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801075a:	3301      	adds	r3, #1
 801075c:	b2da      	uxtb	r2, r3
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801076a:	2b03      	cmp	r3, #3
 801076c:	d903      	bls.n	8010776 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	220d      	movs	r2, #13
 8010772:	701a      	strb	r2, [r3, #0]
      break;
 8010774:	e17c      	b.n	8010a70 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	795b      	ldrb	r3, [r3, #5]
 801077a:	4619      	mov	r1, r3
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f001 f9df 	bl	8011b40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	791b      	ldrb	r3, [r3, #4]
 8010786:	4619      	mov	r1, r3
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f001 f9d9 	bl	8011b40 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2200      	movs	r2, #0
 8010792:	701a      	strb	r2, [r3, #0]
      break;
 8010794:	e16c      	b.n	8010a70 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8010796:	2112      	movs	r1, #18
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f000 fa69 	bl	8010c70 <USBH_Get_DevDesc>
 801079e:	4603      	mov	r3, r0
 80107a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80107a2:	7bbb      	ldrb	r3, [r7, #14]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d103      	bne.n	80107b0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2202      	movs	r2, #2
 80107ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80107ae:	e161      	b.n	8010a74 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80107b0:	7bbb      	ldrb	r3, [r7, #14]
 80107b2:	2b03      	cmp	r3, #3
 80107b4:	f040 815e 	bne.w	8010a74 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80107be:	3301      	adds	r3, #1
 80107c0:	b2da      	uxtb	r2, r3
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80107ce:	2b03      	cmp	r3, #3
 80107d0:	d903      	bls.n	80107da <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	220d      	movs	r2, #13
 80107d6:	701a      	strb	r2, [r3, #0]
      break;
 80107d8:	e14c      	b.n	8010a74 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	795b      	ldrb	r3, [r3, #5]
 80107de:	4619      	mov	r1, r3
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f001 f9ad 	bl	8011b40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	791b      	ldrb	r3, [r3, #4]
 80107ea:	4619      	mov	r1, r3
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f001 f9a7 	bl	8011b40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2200      	movs	r2, #0
 80107fc:	701a      	strb	r2, [r3, #0]
      break;
 80107fe:	e139      	b.n	8010a74 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8010800:	2101      	movs	r1, #1
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 faf3 	bl	8010dee <USBH_SetAddress>
 8010808:	4603      	mov	r3, r0
 801080a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801080c:	7bbb      	ldrb	r3, [r7, #14]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d130      	bne.n	8010874 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8010812:	2002      	movs	r0, #2
 8010814:	f004 febb 	bl	801558e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2201      	movs	r2, #1
 801081c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2203      	movs	r2, #3
 8010824:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	7919      	ldrb	r1, [r3, #4]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801083a:	9202      	str	r2, [sp, #8]
 801083c:	2200      	movs	r2, #0
 801083e:	9201      	str	r2, [sp, #4]
 8010840:	9300      	str	r3, [sp, #0]
 8010842:	4603      	mov	r3, r0
 8010844:	2280      	movs	r2, #128	@ 0x80
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f001 f92a 	bl	8011aa0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	7959      	ldrb	r1, [r3, #5]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010860:	9202      	str	r2, [sp, #8]
 8010862:	2200      	movs	r2, #0
 8010864:	9201      	str	r2, [sp, #4]
 8010866:	9300      	str	r3, [sp, #0]
 8010868:	4603      	mov	r3, r0
 801086a:	2200      	movs	r2, #0
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f001 f917 	bl	8011aa0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010872:	e101      	b.n	8010a78 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010874:	7bbb      	ldrb	r3, [r7, #14]
 8010876:	2b03      	cmp	r3, #3
 8010878:	f040 80fe 	bne.w	8010a78 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	220d      	movs	r2, #13
 8010880:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	705a      	strb	r2, [r3, #1]
      break;
 8010888:	e0f6      	b.n	8010a78 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 801088a:	2109      	movs	r1, #9
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f000 fa1b 	bl	8010cc8 <USBH_Get_CfgDesc>
 8010892:	4603      	mov	r3, r0
 8010894:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010896:	7bbb      	ldrb	r3, [r7, #14]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d103      	bne.n	80108a4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2204      	movs	r2, #4
 80108a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80108a2:	e0eb      	b.n	8010a7c <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80108a4:	7bbb      	ldrb	r3, [r7, #14]
 80108a6:	2b03      	cmp	r3, #3
 80108a8:	f040 80e8 	bne.w	8010a7c <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80108b2:	3301      	adds	r3, #1
 80108b4:	b2da      	uxtb	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80108c2:	2b03      	cmp	r3, #3
 80108c4:	d903      	bls.n	80108ce <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	220d      	movs	r2, #13
 80108ca:	701a      	strb	r2, [r3, #0]
      break;
 80108cc:	e0d6      	b.n	8010a7c <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	795b      	ldrb	r3, [r3, #5]
 80108d2:	4619      	mov	r1, r3
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f001 f933 	bl	8011b40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	791b      	ldrb	r3, [r3, #4]
 80108de:	4619      	mov	r1, r3
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f001 f92d 	bl	8011b40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2200      	movs	r2, #0
 80108ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2200      	movs	r2, #0
 80108f0:	701a      	strb	r2, [r3, #0]
      break;
 80108f2:	e0c3      	b.n	8010a7c <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80108fa:	4619      	mov	r1, r3
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f000 f9e3 	bl	8010cc8 <USBH_Get_CfgDesc>
 8010902:	4603      	mov	r3, r0
 8010904:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010906:	7bbb      	ldrb	r3, [r7, #14]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d103      	bne.n	8010914 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2205      	movs	r2, #5
 8010910:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010912:	e0b5      	b.n	8010a80 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010914:	7bbb      	ldrb	r3, [r7, #14]
 8010916:	2b03      	cmp	r3, #3
 8010918:	f040 80b2 	bne.w	8010a80 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010922:	3301      	adds	r3, #1
 8010924:	b2da      	uxtb	r2, r3
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010932:	2b03      	cmp	r3, #3
 8010934:	d903      	bls.n	801093e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	220d      	movs	r2, #13
 801093a:	701a      	strb	r2, [r3, #0]
      break;
 801093c:	e0a0      	b.n	8010a80 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	795b      	ldrb	r3, [r3, #5]
 8010942:	4619      	mov	r1, r3
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f001 f8fb 	bl	8011b40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	791b      	ldrb	r3, [r3, #4]
 801094e:	4619      	mov	r1, r3
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f001 f8f5 	bl	8011b40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2200      	movs	r2, #0
 801095a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2200      	movs	r2, #0
 8010960:	701a      	strb	r2, [r3, #0]
      break;
 8010962:	e08d      	b.n	8010a80 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 801096a:	2b00      	cmp	r3, #0
 801096c:	d025      	beq.n	80109ba <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801097a:	23ff      	movs	r3, #255	@ 0xff
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f000 f9cd 	bl	8010d1c <USBH_Get_StringDesc>
 8010982:	4603      	mov	r3, r0
 8010984:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010986:	7bbb      	ldrb	r3, [r7, #14]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d109      	bne.n	80109a0 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2206      	movs	r2, #6
 8010990:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010992:	2300      	movs	r3, #0
 8010994:	2200      	movs	r2, #0
 8010996:	2105      	movs	r1, #5
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 f91f 	bl	8010bdc <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 801099e:	e071      	b.n	8010a84 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80109a0:	7bbb      	ldrb	r3, [r7, #14]
 80109a2:	2b03      	cmp	r3, #3
 80109a4:	d16e      	bne.n	8010a84 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	2206      	movs	r2, #6
 80109aa:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80109ac:	2300      	movs	r3, #0
 80109ae:	2200      	movs	r2, #0
 80109b0:	2105      	movs	r1, #5
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f000 f912 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 80109b8:	e064      	b.n	8010a84 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2206      	movs	r2, #6
 80109be:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80109c0:	2300      	movs	r3, #0
 80109c2:	2200      	movs	r2, #0
 80109c4:	2105      	movs	r1, #5
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 f908 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 80109cc:	e05a      	b.n	8010a84 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d01f      	beq.n	8010a18 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80109e4:	23ff      	movs	r3, #255	@ 0xff
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f000 f998 	bl	8010d1c <USBH_Get_StringDesc>
 80109ec:	4603      	mov	r3, r0
 80109ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80109f0:	7bbb      	ldrb	r3, [r7, #14]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d103      	bne.n	80109fe <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2207      	movs	r2, #7
 80109fa:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80109fc:	e044      	b.n	8010a88 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80109fe:	7bbb      	ldrb	r3, [r7, #14]
 8010a00:	2b03      	cmp	r3, #3
 8010a02:	d141      	bne.n	8010a88 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2207      	movs	r2, #7
 8010a08:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	2105      	movs	r1, #5
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 f8e3 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 8010a16:	e037      	b.n	8010a88 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2207      	movs	r2, #7
 8010a1c:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010a1e:	2300      	movs	r3, #0
 8010a20:	2200      	movs	r2, #0
 8010a22:	2105      	movs	r1, #5
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 f8d9 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 8010a2a:	e02d      	b.n	8010a88 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d017      	beq.n	8010a66 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010a42:	23ff      	movs	r3, #255	@ 0xff
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f000 f969 	bl	8010d1c <USBH_Get_StringDesc>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010a4e:	7bbb      	ldrb	r3, [r7, #14]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d102      	bne.n	8010a5a <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8010a54:	2300      	movs	r3, #0
 8010a56:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010a58:	e018      	b.n	8010a8c <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010a5a:	7bbb      	ldrb	r3, [r7, #14]
 8010a5c:	2b03      	cmp	r3, #3
 8010a5e:	d115      	bne.n	8010a8c <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 8010a60:	2300      	movs	r3, #0
 8010a62:	73fb      	strb	r3, [r7, #15]
      break;
 8010a64:	e012      	b.n	8010a8c <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8010a66:	2300      	movs	r3, #0
 8010a68:	73fb      	strb	r3, [r7, #15]
      break;
 8010a6a:	e00f      	b.n	8010a8c <USBH_HandleEnum+0x3f0>

    default:
      break;
 8010a6c:	bf00      	nop
 8010a6e:	e00e      	b.n	8010a8e <USBH_HandleEnum+0x3f2>
      break;
 8010a70:	bf00      	nop
 8010a72:	e00c      	b.n	8010a8e <USBH_HandleEnum+0x3f2>
      break;
 8010a74:	bf00      	nop
 8010a76:	e00a      	b.n	8010a8e <USBH_HandleEnum+0x3f2>
      break;
 8010a78:	bf00      	nop
 8010a7a:	e008      	b.n	8010a8e <USBH_HandleEnum+0x3f2>
      break;
 8010a7c:	bf00      	nop
 8010a7e:	e006      	b.n	8010a8e <USBH_HandleEnum+0x3f2>
      break;
 8010a80:	bf00      	nop
 8010a82:	e004      	b.n	8010a8e <USBH_HandleEnum+0x3f2>
      break;
 8010a84:	bf00      	nop
 8010a86:	e002      	b.n	8010a8e <USBH_HandleEnum+0x3f2>
      break;
 8010a88:	bf00      	nop
 8010a8a:	e000      	b.n	8010a8e <USBH_HandleEnum+0x3f2>
      break;
 8010a8c:	bf00      	nop
  }
  return Status;
 8010a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3710      	adds	r7, #16
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	683a      	ldr	r2, [r7, #0]
 8010aa6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8010aaa:	bf00      	nop
 8010aac:	370c      	adds	r7, #12
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab4:	4770      	bx	lr

08010ab6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b082      	sub	sp, #8
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010ac4:	1c5a      	adds	r2, r3, #1
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f000 f804 	bl	8010ada <USBH_HandleSof>
}
 8010ad2:	bf00      	nop
 8010ad4:	3708      	adds	r7, #8
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010ada:	b580      	push	{r7, lr}
 8010adc:	b082      	sub	sp, #8
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	2b0b      	cmp	r3, #11
 8010aea:	d10a      	bne.n	8010b02 <USBH_HandleSof+0x28>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d005      	beq.n	8010b02 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010afc:	699b      	ldr	r3, [r3, #24]
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	4798      	blx	r3
  }
}
 8010b02:	bf00      	nop
 8010b04:	3708      	adds	r7, #8
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8010b0a:	b580      	push	{r7, lr}
 8010b0c:	b082      	sub	sp, #8
 8010b0e:	af00      	add	r7, sp, #0
 8010b10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2201      	movs	r2, #1
 8010b16:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	2101      	movs	r1, #1
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f000 f85b 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8010b26:	bf00      	nop
}
 8010b28:	3708      	adds	r7, #8
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010b2e:	b480      	push	{r7}
 8010b30:	b083      	sub	sp, #12
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2201      	movs	r2, #1
 8010b42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8010b46:	bf00      	nop
}
 8010b48:	370c      	adds	r7, #12
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr

08010b52 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010b52:	b580      	push	{r7, lr}
 8010b54:	b082      	sub	sp, #8
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010b72:	2300      	movs	r3, #0
 8010b74:	2200      	movs	r2, #0
 8010b76:	2101      	movs	r1, #1
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f000 f82f 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8010b7e:	2300      	movs	r3, #0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3708      	adds	r7, #8
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2201      	movs	r2, #1
 8010b94:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f004 fba4 	bl	80152f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	791b      	ldrb	r3, [r3, #4]
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 ffc3 	bl	8011b40 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	795b      	ldrb	r3, [r3, #5]
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 ffbd 	bl	8011b40 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	2200      	movs	r2, #0
 8010bca:	2101      	movs	r1, #1
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 f805 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8010bd2:	2300      	movs	r3, #0
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	60f8      	str	r0, [r7, #12]
 8010be4:	607a      	str	r2, [r7, #4]
 8010be6:	603b      	str	r3, [r7, #0]
 8010be8:	460b      	mov	r3, r1
 8010bea:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8010bec:	7afa      	ldrb	r2, [r7, #11]
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f001 fb40 	bl	8012280 <osMessageQueueGetSpace>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d00a      	beq.n	8010c1c <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	b2da      	uxtb	r2, r3
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f001 fa4c 	bl	80120b4 <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8010c1c:	bf00      	nop
 8010c1e:	3710      	adds	r7, #16
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8010c38:	f04f 33ff 	mov.w	r3, #4294967295
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	f001 faad 	bl	801219c <osMessageQueueGet>
 8010c42:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d1f0      	bne.n	8010c2c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f7ff fb0c 	bl	8010268 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8010c50:	e7ec      	b.n	8010c2c <USBH_Process_OS+0x8>

08010c52 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b082      	sub	sp, #8
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	2101      	movs	r1, #1
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f7ff ffbb 	bl	8010bdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8010c66:	2300      	movs	r3, #0
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b086      	sub	sp, #24
 8010c74:	af02      	add	r7, sp, #8
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8010c7c:	887b      	ldrh	r3, [r7, #2]
 8010c7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010c82:	d901      	bls.n	8010c88 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010c84:	2303      	movs	r3, #3
 8010c86:	e01b      	b.n	8010cc0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010c8e:	887b      	ldrh	r3, [r7, #2]
 8010c90:	9300      	str	r3, [sp, #0]
 8010c92:	4613      	mov	r3, r2
 8010c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010c98:	2100      	movs	r1, #0
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 f872 	bl	8010d84 <USBH_GetDescriptor>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8010ca4:	7bfb      	ldrb	r3, [r7, #15]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d109      	bne.n	8010cbe <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010cb0:	887a      	ldrh	r2, [r7, #2]
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 f929 	bl	8010f0c <USBH_ParseDevDesc>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3710      	adds	r7, #16
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b086      	sub	sp, #24
 8010ccc:	af02      	add	r7, sp, #8
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	331c      	adds	r3, #28
 8010cd8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8010cda:	887b      	ldrh	r3, [r7, #2]
 8010cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010ce0:	d901      	bls.n	8010ce6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010ce2:	2303      	movs	r3, #3
 8010ce4:	e016      	b.n	8010d14 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8010ce6:	887b      	ldrh	r3, [r7, #2]
 8010ce8:	9300      	str	r3, [sp, #0]
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010cf0:	2100      	movs	r1, #0
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f000 f846 	bl	8010d84 <USBH_GetDescriptor>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8010cfc:	7bfb      	ldrb	r3, [r7, #15]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d107      	bne.n	8010d12 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8010d02:	887b      	ldrh	r3, [r7, #2]
 8010d04:	461a      	mov	r2, r3
 8010d06:	68b9      	ldr	r1, [r7, #8]
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f000 f9af 	bl	801106c <USBH_ParseCfgDesc>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3710      	adds	r7, #16
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b088      	sub	sp, #32
 8010d20:	af02      	add	r7, sp, #8
 8010d22:	60f8      	str	r0, [r7, #12]
 8010d24:	607a      	str	r2, [r7, #4]
 8010d26:	461a      	mov	r2, r3
 8010d28:	460b      	mov	r3, r1
 8010d2a:	72fb      	strb	r3, [r7, #11]
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8010d30:	893b      	ldrh	r3, [r7, #8]
 8010d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d36:	d802      	bhi.n	8010d3e <USBH_Get_StringDesc+0x22>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d101      	bne.n	8010d42 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010d3e:	2303      	movs	r3, #3
 8010d40:	e01c      	b.n	8010d7c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8010d42:	7afb      	ldrb	r3, [r7, #11]
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8010d4a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010d52:	893b      	ldrh	r3, [r7, #8]
 8010d54:	9300      	str	r3, [sp, #0]
 8010d56:	460b      	mov	r3, r1
 8010d58:	2100      	movs	r1, #0
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f000 f812 	bl	8010d84 <USBH_GetDescriptor>
 8010d60:	4603      	mov	r3, r0
 8010d62:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8010d64:	7dfb      	ldrb	r3, [r7, #23]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d107      	bne.n	8010d7a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010d70:	893a      	ldrh	r2, [r7, #8]
 8010d72:	6879      	ldr	r1, [r7, #4]
 8010d74:	4618      	mov	r0, r3
 8010d76:	f000 fb8c 	bl	8011492 <USBH_ParseStringDesc>
  }

  return status;
 8010d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3718      	adds	r7, #24
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	607b      	str	r3, [r7, #4]
 8010d8e:	460b      	mov	r3, r1
 8010d90:	72fb      	strb	r3, [r7, #11]
 8010d92:	4613      	mov	r3, r2
 8010d94:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	789b      	ldrb	r3, [r3, #2]
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d11c      	bne.n	8010dd8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8010d9e:	7afb      	ldrb	r3, [r7, #11]
 8010da0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010da4:	b2da      	uxtb	r2, r3
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	2206      	movs	r2, #6
 8010dae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	893a      	ldrh	r2, [r7, #8]
 8010db4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010db6:	893b      	ldrh	r3, [r7, #8]
 8010db8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010dbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010dc0:	d104      	bne.n	8010dcc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f240 4209 	movw	r2, #1033	@ 0x409
 8010dc8:	829a      	strh	r2, [r3, #20]
 8010dca:	e002      	b.n	8010dd2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	8b3a      	ldrh	r2, [r7, #24]
 8010dd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010dd8:	8b3b      	ldrh	r3, [r7, #24]
 8010dda:	461a      	mov	r2, r3
 8010ddc:	6879      	ldr	r1, [r7, #4]
 8010dde:	68f8      	ldr	r0, [r7, #12]
 8010de0:	f000 fba4 	bl	801152c <USBH_CtlReq>
 8010de4:	4603      	mov	r3, r0
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b082      	sub	sp, #8
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	6078      	str	r0, [r7, #4]
 8010df6:	460b      	mov	r3, r1
 8010df8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	789b      	ldrb	r3, [r3, #2]
 8010dfe:	2b01      	cmp	r3, #1
 8010e00:	d10f      	bne.n	8010e22 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2200      	movs	r2, #0
 8010e06:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2205      	movs	r2, #5
 8010e0c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010e0e:	78fb      	ldrb	r3, [r7, #3]
 8010e10:	b29a      	uxth	r2, r3
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010e22:	2200      	movs	r2, #0
 8010e24:	2100      	movs	r1, #0
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 fb80 	bl	801152c <USBH_CtlReq>
 8010e2c:	4603      	mov	r3, r0
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3708      	adds	r7, #8
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}

08010e36 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b082      	sub	sp, #8
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
 8010e3e:	460b      	mov	r3, r1
 8010e40:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	789b      	ldrb	r3, [r3, #2]
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d10e      	bne.n	8010e68 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2209      	movs	r2, #9
 8010e54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	887a      	ldrh	r2, [r7, #2]
 8010e5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2200      	movs	r2, #0
 8010e66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010e68:	2200      	movs	r2, #0
 8010e6a:	2100      	movs	r1, #0
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f000 fb5d 	bl	801152c <USBH_CtlReq>
 8010e72:	4603      	mov	r3, r0
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	460b      	mov	r3, r1
 8010e86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	789b      	ldrb	r3, [r3, #2]
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d10f      	bne.n	8010eb0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2203      	movs	r2, #3
 8010e9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010e9c:	78fb      	ldrb	r3, [r7, #3]
 8010e9e:	b29a      	uxth	r2, r3
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2200      	movs	r2, #0
 8010eae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	2100      	movs	r1, #0
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 fb39 	bl	801152c <USBH_CtlReq>
 8010eba:	4603      	mov	r3, r0
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3708      	adds	r7, #8
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	789b      	ldrb	r3, [r3, #2]
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d10f      	bne.n	8010ef8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2202      	movs	r2, #2
 8010edc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2201      	movs	r2, #1
 8010ee2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8010eea:	78fb      	ldrb	r3, [r7, #3]
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010ef8:	2200      	movs	r2, #0
 8010efa:	2100      	movs	r1, #0
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 fb15 	bl	801152c <USBH_CtlReq>
 8010f02:	4603      	mov	r3, r0
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b087      	sub	sp, #28
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	60f8      	str	r0, [r7, #12]
 8010f14:	60b9      	str	r1, [r7, #8]
 8010f16:	4613      	mov	r3, r2
 8010f18:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010f20:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8010f22:	2300      	movs	r3, #0
 8010f24:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d101      	bne.n	8010f30 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8010f2c:	2302      	movs	r3, #2
 8010f2e:	e094      	b.n	801105a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	781a      	ldrb	r2, [r3, #0]
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	785a      	ldrb	r2, [r3, #1]
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	3302      	adds	r3, #2
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	461a      	mov	r2, r3
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	3303      	adds	r3, #3
 8010f4c:	781b      	ldrb	r3, [r3, #0]
 8010f4e:	021b      	lsls	r3, r3, #8
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	4313      	orrs	r3, r2
 8010f54:	b29a      	uxth	r2, r3
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	791a      	ldrb	r2, [r3, #4]
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	795a      	ldrb	r2, [r3, #5]
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	799a      	ldrb	r2, [r3, #6]
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	79da      	ldrb	r2, [r3, #7]
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d004      	beq.n	8010f8e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d11b      	bne.n	8010fc6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	79db      	ldrb	r3, [r3, #7]
 8010f92:	2b20      	cmp	r3, #32
 8010f94:	dc0f      	bgt.n	8010fb6 <USBH_ParseDevDesc+0xaa>
 8010f96:	2b08      	cmp	r3, #8
 8010f98:	db0f      	blt.n	8010fba <USBH_ParseDevDesc+0xae>
 8010f9a:	3b08      	subs	r3, #8
 8010f9c:	4a32      	ldr	r2, [pc, #200]	@ (8011068 <USBH_ParseDevDesc+0x15c>)
 8010f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8010fa2:	f003 0301 	and.w	r3, r3, #1
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	bf14      	ite	ne
 8010faa:	2301      	movne	r3, #1
 8010fac:	2300      	moveq	r3, #0
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d106      	bne.n	8010fc2 <USBH_ParseDevDesc+0xb6>
 8010fb4:	e001      	b.n	8010fba <USBH_ParseDevDesc+0xae>
 8010fb6:	2b40      	cmp	r3, #64	@ 0x40
 8010fb8:	d003      	beq.n	8010fc2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	2208      	movs	r2, #8
 8010fbe:	71da      	strb	r2, [r3, #7]
        break;
 8010fc0:	e000      	b.n	8010fc4 <USBH_ParseDevDesc+0xb8>
        break;
 8010fc2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8010fc4:	e00e      	b.n	8010fe4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010fcc:	2b02      	cmp	r3, #2
 8010fce:	d107      	bne.n	8010fe0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	79db      	ldrb	r3, [r3, #7]
 8010fd4:	2b08      	cmp	r3, #8
 8010fd6:	d005      	beq.n	8010fe4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	2208      	movs	r2, #8
 8010fdc:	71da      	strb	r2, [r3, #7]
 8010fde:	e001      	b.n	8010fe4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010fe0:	2303      	movs	r3, #3
 8010fe2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8010fe4:	88fb      	ldrh	r3, [r7, #6]
 8010fe6:	2b08      	cmp	r3, #8
 8010fe8:	d936      	bls.n	8011058 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	3308      	adds	r3, #8
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	3309      	adds	r3, #9
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	021b      	lsls	r3, r3, #8
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	4313      	orrs	r3, r2
 8010ffe:	b29a      	uxth	r2, r3
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	330a      	adds	r3, #10
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	461a      	mov	r2, r3
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	330b      	adds	r3, #11
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	021b      	lsls	r3, r3, #8
 8011014:	b29b      	uxth	r3, r3
 8011016:	4313      	orrs	r3, r2
 8011018:	b29a      	uxth	r2, r3
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	330c      	adds	r3, #12
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	461a      	mov	r2, r3
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	330d      	adds	r3, #13
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	021b      	lsls	r3, r3, #8
 801102e:	b29b      	uxth	r3, r3
 8011030:	4313      	orrs	r3, r2
 8011032:	b29a      	uxth	r2, r3
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	7b9a      	ldrb	r2, [r3, #14]
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	7bda      	ldrb	r2, [r3, #15]
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	7c1a      	ldrb	r2, [r3, #16]
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	7c5a      	ldrb	r2, [r3, #17]
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8011058:	7dfb      	ldrb	r3, [r7, #23]
}
 801105a:	4618      	mov	r0, r3
 801105c:	371c      	adds	r7, #28
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr
 8011066:	bf00      	nop
 8011068:	01000101 	.word	0x01000101

0801106c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b08c      	sub	sp, #48	@ 0x30
 8011070:	af00      	add	r7, sp, #0
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	60b9      	str	r1, [r7, #8]
 8011076:	4613      	mov	r3, r2
 8011078:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8011080:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011082:	2300      	movs	r3, #0
 8011084:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011088:	2300      	movs	r3, #0
 801108a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 801108e:	2300      	movs	r3, #0
 8011090:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d101      	bne.n	801109e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 801109a:	2302      	movs	r3, #2
 801109c:	e0de      	b.n	801125c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80110a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	2b09      	cmp	r3, #9
 80110a8:	d002      	beq.n	80110b0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80110aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ac:	2209      	movs	r2, #9
 80110ae:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	781a      	ldrb	r2, [r3, #0]
 80110b4:	6a3b      	ldr	r3, [r7, #32]
 80110b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	785a      	ldrb	r2, [r3, #1]
 80110bc:	6a3b      	ldr	r3, [r7, #32]
 80110be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	3302      	adds	r3, #2
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	461a      	mov	r2, r3
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	3303      	adds	r3, #3
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	021b      	lsls	r3, r3, #8
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	4313      	orrs	r3, r2
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110da:	bf28      	it	cs
 80110dc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80110e0:	b29a      	uxth	r2, r3
 80110e2:	6a3b      	ldr	r3, [r7, #32]
 80110e4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	791a      	ldrb	r2, [r3, #4]
 80110ea:	6a3b      	ldr	r3, [r7, #32]
 80110ec:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	795a      	ldrb	r2, [r3, #5]
 80110f2:	6a3b      	ldr	r3, [r7, #32]
 80110f4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	799a      	ldrb	r2, [r3, #6]
 80110fa:	6a3b      	ldr	r3, [r7, #32]
 80110fc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	79da      	ldrb	r2, [r3, #7]
 8011102:	6a3b      	ldr	r3, [r7, #32]
 8011104:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	7a1a      	ldrb	r2, [r3, #8]
 801110a:	6a3b      	ldr	r3, [r7, #32]
 801110c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801110e:	88fb      	ldrh	r3, [r7, #6]
 8011110:	2b09      	cmp	r3, #9
 8011112:	f240 80a1 	bls.w	8011258 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8011116:	2309      	movs	r3, #9
 8011118:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 801111a:	2300      	movs	r3, #0
 801111c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801111e:	e085      	b.n	801122c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011120:	f107 0316 	add.w	r3, r7, #22
 8011124:	4619      	mov	r1, r3
 8011126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011128:	f000 f9e6 	bl	80114f8 <USBH_GetNextDesc>
 801112c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 801112e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011130:	785b      	ldrb	r3, [r3, #1]
 8011132:	2b04      	cmp	r3, #4
 8011134:	d17a      	bne.n	801122c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	2b09      	cmp	r3, #9
 801113c:	d002      	beq.n	8011144 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 801113e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011140:	2209      	movs	r2, #9
 8011142:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011148:	221a      	movs	r2, #26
 801114a:	fb02 f303 	mul.w	r3, r2, r3
 801114e:	3308      	adds	r3, #8
 8011150:	6a3a      	ldr	r2, [r7, #32]
 8011152:	4413      	add	r3, r2
 8011154:	3302      	adds	r3, #2
 8011156:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801115a:	69f8      	ldr	r0, [r7, #28]
 801115c:	f000 f882 	bl	8011264 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011160:	2300      	movs	r3, #0
 8011162:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011166:	2300      	movs	r3, #0
 8011168:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801116a:	e043      	b.n	80111f4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801116c:	f107 0316 	add.w	r3, r7, #22
 8011170:	4619      	mov	r1, r3
 8011172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011174:	f000 f9c0 	bl	80114f8 <USBH_GetNextDesc>
 8011178:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801117c:	785b      	ldrb	r3, [r3, #1]
 801117e:	2b05      	cmp	r3, #5
 8011180:	d138      	bne.n	80111f4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	795b      	ldrb	r3, [r3, #5]
 8011186:	2b01      	cmp	r3, #1
 8011188:	d113      	bne.n	80111b2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801118a:	69fb      	ldr	r3, [r7, #28]
 801118c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 801118e:	2b02      	cmp	r3, #2
 8011190:	d003      	beq.n	801119a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011192:	69fb      	ldr	r3, [r7, #28]
 8011194:	799b      	ldrb	r3, [r3, #6]
 8011196:	2b03      	cmp	r3, #3
 8011198:	d10b      	bne.n	80111b2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	79db      	ldrb	r3, [r3, #7]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d10b      	bne.n	80111ba <USBH_ParseCfgDesc+0x14e>
 80111a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	2b09      	cmp	r3, #9
 80111a8:	d007      	beq.n	80111ba <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80111aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ac:	2209      	movs	r2, #9
 80111ae:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80111b0:	e003      	b.n	80111ba <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80111b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111b4:	2207      	movs	r2, #7
 80111b6:	701a      	strb	r2, [r3, #0]
 80111b8:	e000      	b.n	80111bc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80111ba:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80111bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80111c4:	3201      	adds	r2, #1
 80111c6:	00d2      	lsls	r2, r2, #3
 80111c8:	211a      	movs	r1, #26
 80111ca:	fb01 f303 	mul.w	r3, r1, r3
 80111ce:	4413      	add	r3, r2
 80111d0:	3308      	adds	r3, #8
 80111d2:	6a3a      	ldr	r2, [r7, #32]
 80111d4:	4413      	add	r3, r2
 80111d6:	3304      	adds	r3, #4
 80111d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80111da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80111dc:	69b9      	ldr	r1, [r7, #24]
 80111de:	68f8      	ldr	r0, [r7, #12]
 80111e0:	f000 f86f 	bl	80112c2 <USBH_ParseEPDesc>
 80111e4:	4603      	mov	r3, r0
 80111e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80111ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80111ee:	3301      	adds	r3, #1
 80111f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80111f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80111f8:	2b01      	cmp	r3, #1
 80111fa:	d80a      	bhi.n	8011212 <USBH_ParseCfgDesc+0x1a6>
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	791b      	ldrb	r3, [r3, #4]
 8011200:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011204:	429a      	cmp	r2, r3
 8011206:	d204      	bcs.n	8011212 <USBH_ParseCfgDesc+0x1a6>
 8011208:	6a3b      	ldr	r3, [r7, #32]
 801120a:	885a      	ldrh	r2, [r3, #2]
 801120c:	8afb      	ldrh	r3, [r7, #22]
 801120e:	429a      	cmp	r2, r3
 8011210:	d8ac      	bhi.n	801116c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8011212:	69fb      	ldr	r3, [r7, #28]
 8011214:	791b      	ldrb	r3, [r3, #4]
 8011216:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801121a:	429a      	cmp	r2, r3
 801121c:	d201      	bcs.n	8011222 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 801121e:	2303      	movs	r3, #3
 8011220:	e01c      	b.n	801125c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8011222:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011226:	3301      	adds	r3, #1
 8011228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801122c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011230:	2b01      	cmp	r3, #1
 8011232:	d805      	bhi.n	8011240 <USBH_ParseCfgDesc+0x1d4>
 8011234:	6a3b      	ldr	r3, [r7, #32]
 8011236:	885a      	ldrh	r2, [r3, #2]
 8011238:	8afb      	ldrh	r3, [r7, #22]
 801123a:	429a      	cmp	r2, r3
 801123c:	f63f af70 	bhi.w	8011120 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8011240:	6a3b      	ldr	r3, [r7, #32]
 8011242:	791b      	ldrb	r3, [r3, #4]
 8011244:	2b02      	cmp	r3, #2
 8011246:	bf28      	it	cs
 8011248:	2302      	movcs	r3, #2
 801124a:	b2db      	uxtb	r3, r3
 801124c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011250:	429a      	cmp	r2, r3
 8011252:	d201      	bcs.n	8011258 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8011254:	2303      	movs	r3, #3
 8011256:	e001      	b.n	801125c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8011258:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801125c:	4618      	mov	r0, r3
 801125e:	3730      	adds	r7, #48	@ 0x30
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	781a      	ldrb	r2, [r3, #0]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	785a      	ldrb	r2, [r3, #1]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	789a      	ldrb	r2, [r3, #2]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	78da      	ldrb	r2, [r3, #3]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	791a      	ldrb	r2, [r3, #4]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	795a      	ldrb	r2, [r3, #5]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	799a      	ldrb	r2, [r3, #6]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	79da      	ldrb	r2, [r3, #7]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	7a1a      	ldrb	r2, [r3, #8]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	721a      	strb	r2, [r3, #8]
}
 80112b6:	bf00      	nop
 80112b8:	370c      	adds	r7, #12
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr

080112c2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80112c2:	b480      	push	{r7}
 80112c4:	b087      	sub	sp, #28
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	60f8      	str	r0, [r7, #12]
 80112ca:	60b9      	str	r1, [r7, #8]
 80112cc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80112ce:	2300      	movs	r3, #0
 80112d0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	781a      	ldrb	r2, [r3, #0]
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	785a      	ldrb	r2, [r3, #1]
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	789a      	ldrb	r2, [r3, #2]
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	78da      	ldrb	r2, [r3, #3]
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	3304      	adds	r3, #4
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	461a      	mov	r2, r3
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	3305      	adds	r3, #5
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	021b      	lsls	r3, r3, #8
 8011302:	b29b      	uxth	r3, r3
 8011304:	4313      	orrs	r3, r2
 8011306:	b29a      	uxth	r2, r3
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	799a      	ldrb	r2, [r3, #6]
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	889b      	ldrh	r3, [r3, #4]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d009      	beq.n	8011330 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8011320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011324:	d804      	bhi.n	8011330 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 801132a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801132e:	d901      	bls.n	8011334 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8011330:	2303      	movs	r3, #3
 8011332:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801133a:	2b00      	cmp	r3, #0
 801133c:	d136      	bne.n	80113ac <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	78db      	ldrb	r3, [r3, #3]
 8011342:	f003 0303 	and.w	r3, r3, #3
 8011346:	2b02      	cmp	r3, #2
 8011348:	d108      	bne.n	801135c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	889b      	ldrh	r3, [r3, #4]
 801134e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011352:	f240 8097 	bls.w	8011484 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011356:	2303      	movs	r3, #3
 8011358:	75fb      	strb	r3, [r7, #23]
 801135a:	e093      	b.n	8011484 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	78db      	ldrb	r3, [r3, #3]
 8011360:	f003 0303 	and.w	r3, r3, #3
 8011364:	2b00      	cmp	r3, #0
 8011366:	d107      	bne.n	8011378 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	889b      	ldrh	r3, [r3, #4]
 801136c:	2b40      	cmp	r3, #64	@ 0x40
 801136e:	f240 8089 	bls.w	8011484 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011372:	2303      	movs	r3, #3
 8011374:	75fb      	strb	r3, [r7, #23]
 8011376:	e085      	b.n	8011484 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011378:	68bb      	ldr	r3, [r7, #8]
 801137a:	78db      	ldrb	r3, [r3, #3]
 801137c:	f003 0303 	and.w	r3, r3, #3
 8011380:	2b01      	cmp	r3, #1
 8011382:	d005      	beq.n	8011390 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	78db      	ldrb	r3, [r3, #3]
 8011388:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801138c:	2b03      	cmp	r3, #3
 801138e:	d10a      	bne.n	80113a6 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	799b      	ldrb	r3, [r3, #6]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d003      	beq.n	80113a0 <USBH_ParseEPDesc+0xde>
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	799b      	ldrb	r3, [r3, #6]
 801139c:	2b10      	cmp	r3, #16
 801139e:	d970      	bls.n	8011482 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80113a0:	2303      	movs	r3, #3
 80113a2:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80113a4:	e06d      	b.n	8011482 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80113a6:	2303      	movs	r3, #3
 80113a8:	75fb      	strb	r3, [r7, #23]
 80113aa:	e06b      	b.n	8011484 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	d13c      	bne.n	8011430 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	78db      	ldrb	r3, [r3, #3]
 80113ba:	f003 0303 	and.w	r3, r3, #3
 80113be:	2b02      	cmp	r3, #2
 80113c0:	d005      	beq.n	80113ce <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	78db      	ldrb	r3, [r3, #3]
 80113c6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d106      	bne.n	80113dc <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	889b      	ldrh	r3, [r3, #4]
 80113d2:	2b40      	cmp	r3, #64	@ 0x40
 80113d4:	d956      	bls.n	8011484 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80113d6:	2303      	movs	r3, #3
 80113d8:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80113da:	e053      	b.n	8011484 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	78db      	ldrb	r3, [r3, #3]
 80113e0:	f003 0303 	and.w	r3, r3, #3
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d10e      	bne.n	8011406 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	799b      	ldrb	r3, [r3, #6]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d007      	beq.n	8011400 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80113f4:	2b10      	cmp	r3, #16
 80113f6:	d803      	bhi.n	8011400 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80113fc:	2b40      	cmp	r3, #64	@ 0x40
 80113fe:	d941      	bls.n	8011484 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011400:	2303      	movs	r3, #3
 8011402:	75fb      	strb	r3, [r7, #23]
 8011404:	e03e      	b.n	8011484 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	78db      	ldrb	r3, [r3, #3]
 801140a:	f003 0303 	and.w	r3, r3, #3
 801140e:	2b03      	cmp	r3, #3
 8011410:	d10b      	bne.n	801142a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	799b      	ldrb	r3, [r3, #6]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d004      	beq.n	8011424 <USBH_ParseEPDesc+0x162>
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	889b      	ldrh	r3, [r3, #4]
 801141e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011422:	d32f      	bcc.n	8011484 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011424:	2303      	movs	r3, #3
 8011426:	75fb      	strb	r3, [r7, #23]
 8011428:	e02c      	b.n	8011484 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801142a:	2303      	movs	r3, #3
 801142c:	75fb      	strb	r3, [r7, #23]
 801142e:	e029      	b.n	8011484 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011436:	2b02      	cmp	r3, #2
 8011438:	d120      	bne.n	801147c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	78db      	ldrb	r3, [r3, #3]
 801143e:	f003 0303 	and.w	r3, r3, #3
 8011442:	2b00      	cmp	r3, #0
 8011444:	d106      	bne.n	8011454 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	889b      	ldrh	r3, [r3, #4]
 801144a:	2b08      	cmp	r3, #8
 801144c:	d01a      	beq.n	8011484 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801144e:	2303      	movs	r3, #3
 8011450:	75fb      	strb	r3, [r7, #23]
 8011452:	e017      	b.n	8011484 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	78db      	ldrb	r3, [r3, #3]
 8011458:	f003 0303 	and.w	r3, r3, #3
 801145c:	2b03      	cmp	r3, #3
 801145e:	d10a      	bne.n	8011476 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	799b      	ldrb	r3, [r3, #6]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d003      	beq.n	8011470 <USBH_ParseEPDesc+0x1ae>
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	889b      	ldrh	r3, [r3, #4]
 801146c:	2b08      	cmp	r3, #8
 801146e:	d909      	bls.n	8011484 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011470:	2303      	movs	r3, #3
 8011472:	75fb      	strb	r3, [r7, #23]
 8011474:	e006      	b.n	8011484 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011476:	2303      	movs	r3, #3
 8011478:	75fb      	strb	r3, [r7, #23]
 801147a:	e003      	b.n	8011484 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 801147c:	2303      	movs	r3, #3
 801147e:	75fb      	strb	r3, [r7, #23]
 8011480:	e000      	b.n	8011484 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011482:	bf00      	nop
  }

  return status;
 8011484:	7dfb      	ldrb	r3, [r7, #23]
}
 8011486:	4618      	mov	r0, r3
 8011488:	371c      	adds	r7, #28
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr

08011492 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8011492:	b480      	push	{r7}
 8011494:	b087      	sub	sp, #28
 8011496:	af00      	add	r7, sp, #0
 8011498:	60f8      	str	r0, [r7, #12]
 801149a:	60b9      	str	r1, [r7, #8]
 801149c:	4613      	mov	r3, r2
 801149e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	3301      	adds	r3, #1
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	2b03      	cmp	r3, #3
 80114a8:	d120      	bne.n	80114ec <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	1e9a      	subs	r2, r3, #2
 80114b0:	88fb      	ldrh	r3, [r7, #6]
 80114b2:	4293      	cmp	r3, r2
 80114b4:	bf28      	it	cs
 80114b6:	4613      	movcs	r3, r2
 80114b8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	3302      	adds	r3, #2
 80114be:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80114c0:	2300      	movs	r3, #0
 80114c2:	82fb      	strh	r3, [r7, #22]
 80114c4:	e00b      	b.n	80114de <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80114c6:	8afb      	ldrh	r3, [r7, #22]
 80114c8:	68fa      	ldr	r2, [r7, #12]
 80114ca:	4413      	add	r3, r2
 80114cc:	781a      	ldrb	r2, [r3, #0]
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	3301      	adds	r3, #1
 80114d6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80114d8:	8afb      	ldrh	r3, [r7, #22]
 80114da:	3302      	adds	r3, #2
 80114dc:	82fb      	strh	r3, [r7, #22]
 80114de:	8afa      	ldrh	r2, [r7, #22]
 80114e0:	8abb      	ldrh	r3, [r7, #20]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d3ef      	bcc.n	80114c6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	2200      	movs	r2, #0
 80114ea:	701a      	strb	r2, [r3, #0]
  }
}
 80114ec:	bf00      	nop
 80114ee:	371c      	adds	r7, #28
 80114f0:	46bd      	mov	sp, r7
 80114f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f6:	4770      	bx	lr

080114f8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b085      	sub	sp, #20
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	7812      	ldrb	r2, [r2, #0]
 801150a:	4413      	add	r3, r2
 801150c:	b29a      	uxth	r2, r3
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	4413      	add	r3, r2
 801151c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801151e:	68fb      	ldr	r3, [r7, #12]
}
 8011520:	4618      	mov	r0, r3
 8011522:	3714      	adds	r7, #20
 8011524:	46bd      	mov	sp, r7
 8011526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152a:	4770      	bx	lr

0801152c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b086      	sub	sp, #24
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	60b9      	str	r1, [r7, #8]
 8011536:	4613      	mov	r3, r2
 8011538:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801153a:	2301      	movs	r3, #1
 801153c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	789b      	ldrb	r3, [r3, #2]
 8011542:	2b01      	cmp	r3, #1
 8011544:	d002      	beq.n	801154c <USBH_CtlReq+0x20>
 8011546:	2b02      	cmp	r3, #2
 8011548:	d015      	beq.n	8011576 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 801154a:	e033      	b.n	80115b4 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	68ba      	ldr	r2, [r7, #8]
 8011550:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	88fa      	ldrh	r2, [r7, #6]
 8011556:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	2201      	movs	r2, #1
 801155c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2202      	movs	r2, #2
 8011562:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8011564:	2301      	movs	r3, #1
 8011566:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011568:	2300      	movs	r3, #0
 801156a:	2200      	movs	r2, #0
 801156c:	2103      	movs	r1, #3
 801156e:	68f8      	ldr	r0, [r7, #12]
 8011570:	f7ff fb34 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 8011574:	e01e      	b.n	80115b4 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 8011576:	68f8      	ldr	r0, [r7, #12]
 8011578:	f000 f822 	bl	80115c0 <USBH_HandleControl>
 801157c:	4603      	mov	r3, r0
 801157e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8011580:	7dfb      	ldrb	r3, [r7, #23]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d002      	beq.n	801158c <USBH_CtlReq+0x60>
 8011586:	7dfb      	ldrb	r3, [r7, #23]
 8011588:	2b03      	cmp	r3, #3
 801158a:	d106      	bne.n	801159a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	2201      	movs	r2, #1
 8011590:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	2200      	movs	r2, #0
 8011596:	761a      	strb	r2, [r3, #24]
 8011598:	e005      	b.n	80115a6 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 801159a:	7dfb      	ldrb	r3, [r7, #23]
 801159c:	2b02      	cmp	r3, #2
 801159e:	d102      	bne.n	80115a6 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2201      	movs	r2, #1
 80115a4:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80115a6:	2300      	movs	r3, #0
 80115a8:	2200      	movs	r2, #0
 80115aa:	2103      	movs	r1, #3
 80115ac:	68f8      	ldr	r0, [r7, #12]
 80115ae:	f7ff fb15 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 80115b2:	bf00      	nop
  }
  return status;
 80115b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3718      	adds	r7, #24
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
	...

080115c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b086      	sub	sp, #24
 80115c4:	af02      	add	r7, sp, #8
 80115c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80115c8:	2301      	movs	r3, #1
 80115ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80115cc:	2300      	movs	r3, #0
 80115ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	7e1b      	ldrb	r3, [r3, #24]
 80115d4:	3b01      	subs	r3, #1
 80115d6:	2b0a      	cmp	r3, #10
 80115d8:	f200 81b2 	bhi.w	8011940 <USBH_HandleControl+0x380>
 80115dc:	a201      	add	r2, pc, #4	@ (adr r2, 80115e4 <USBH_HandleControl+0x24>)
 80115de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e2:	bf00      	nop
 80115e4:	08011611 	.word	0x08011611
 80115e8:	0801162b 	.word	0x0801162b
 80115ec:	080116ad 	.word	0x080116ad
 80115f0:	080116d3 	.word	0x080116d3
 80115f4:	08011731 	.word	0x08011731
 80115f8:	0801175b 	.word	0x0801175b
 80115fc:	080117dd 	.word	0x080117dd
 8011600:	080117ff 	.word	0x080117ff
 8011604:	08011861 	.word	0x08011861
 8011608:	08011887 	.word	0x08011887
 801160c:	080118e9 	.word	0x080118e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f103 0110 	add.w	r1, r3, #16
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	795b      	ldrb	r3, [r3, #5]
 801161a:	461a      	mov	r2, r3
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f000 f99f 	bl	8011960 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	2202      	movs	r2, #2
 8011626:	761a      	strb	r2, [r3, #24]
      break;
 8011628:	e195      	b.n	8011956 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	795b      	ldrb	r3, [r3, #5]
 801162e:	4619      	mov	r1, r3
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f003 ff4f 	bl	80154d4 <USBH_LL_GetURBState>
 8011636:	4603      	mov	r3, r0
 8011638:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801163a:	7bbb      	ldrb	r3, [r7, #14]
 801163c:	2b01      	cmp	r3, #1
 801163e:	d124      	bne.n	801168a <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	7c1b      	ldrb	r3, [r3, #16]
 8011644:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011648:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	8adb      	ldrh	r3, [r3, #22]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d00a      	beq.n	8011668 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8011652:	7b7b      	ldrb	r3, [r7, #13]
 8011654:	2b80      	cmp	r3, #128	@ 0x80
 8011656:	d103      	bne.n	8011660 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2203      	movs	r2, #3
 801165c:	761a      	strb	r2, [r3, #24]
 801165e:	e00d      	b.n	801167c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2205      	movs	r2, #5
 8011664:	761a      	strb	r2, [r3, #24]
 8011666:	e009      	b.n	801167c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8011668:	7b7b      	ldrb	r3, [r7, #13]
 801166a:	2b80      	cmp	r3, #128	@ 0x80
 801166c:	d103      	bne.n	8011676 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2209      	movs	r2, #9
 8011672:	761a      	strb	r2, [r3, #24]
 8011674:	e002      	b.n	801167c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2207      	movs	r2, #7
 801167a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801167c:	2300      	movs	r3, #0
 801167e:	2200      	movs	r2, #0
 8011680:	2103      	movs	r1, #3
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f7ff faaa 	bl	8010bdc <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8011688:	e15c      	b.n	8011944 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801168a:	7bbb      	ldrb	r3, [r7, #14]
 801168c:	2b04      	cmp	r3, #4
 801168e:	d003      	beq.n	8011698 <USBH_HandleControl+0xd8>
 8011690:	7bbb      	ldrb	r3, [r7, #14]
 8011692:	2b02      	cmp	r3, #2
 8011694:	f040 8156 	bne.w	8011944 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	220b      	movs	r2, #11
 801169c:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801169e:	2300      	movs	r3, #0
 80116a0:	2200      	movs	r2, #0
 80116a2:	2103      	movs	r1, #3
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f7ff fa99 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 80116aa:	e14b      	b.n	8011944 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6899      	ldr	r1, [r3, #8]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	899a      	ldrh	r2, [r3, #12]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	791b      	ldrb	r3, [r3, #4]
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f000 f98a 	bl	80119de <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2204      	movs	r2, #4
 80116ce:	761a      	strb	r2, [r3, #24]
      break;
 80116d0:	e141      	b.n	8011956 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	791b      	ldrb	r3, [r3, #4]
 80116d6:	4619      	mov	r1, r3
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f003 fefb 	bl	80154d4 <USBH_LL_GetURBState>
 80116de:	4603      	mov	r3, r0
 80116e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80116e2:	7bbb      	ldrb	r3, [r7, #14]
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	d109      	bne.n	80116fc <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2209      	movs	r2, #9
 80116ec:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80116ee:	2300      	movs	r3, #0
 80116f0:	2200      	movs	r2, #0
 80116f2:	2103      	movs	r1, #3
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f7ff fa71 	bl	8010bdc <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80116fa:	e125      	b.n	8011948 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 80116fc:	7bbb      	ldrb	r3, [r7, #14]
 80116fe:	2b05      	cmp	r3, #5
 8011700:	d108      	bne.n	8011714 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 8011702:	2303      	movs	r3, #3
 8011704:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011706:	2300      	movs	r3, #0
 8011708:	2200      	movs	r2, #0
 801170a:	2103      	movs	r1, #3
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f7ff fa65 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 8011712:	e119      	b.n	8011948 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 8011714:	7bbb      	ldrb	r3, [r7, #14]
 8011716:	2b04      	cmp	r3, #4
 8011718:	f040 8116 	bne.w	8011948 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	220b      	movs	r2, #11
 8011720:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011722:	2300      	movs	r3, #0
 8011724:	2200      	movs	r2, #0
 8011726:	2103      	movs	r1, #3
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f7ff fa57 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 801172e:	e10b      	b.n	8011948 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6899      	ldr	r1, [r3, #8]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	899a      	ldrh	r2, [r3, #12]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	795b      	ldrb	r3, [r3, #5]
 801173c:	2001      	movs	r0, #1
 801173e:	9000      	str	r0, [sp, #0]
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f000 f927 	bl	8011994 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801174c:	b29a      	uxth	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2206      	movs	r2, #6
 8011756:	761a      	strb	r2, [r3, #24]
      break;
 8011758:	e0fd      	b.n	8011956 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	795b      	ldrb	r3, [r3, #5]
 801175e:	4619      	mov	r1, r3
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f003 feb7 	bl	80154d4 <USBH_LL_GetURBState>
 8011766:	4603      	mov	r3, r0
 8011768:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801176a:	7bbb      	ldrb	r3, [r7, #14]
 801176c:	2b01      	cmp	r3, #1
 801176e:	d109      	bne.n	8011784 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2207      	movs	r2, #7
 8011774:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011776:	2300      	movs	r3, #0
 8011778:	2200      	movs	r2, #0
 801177a:	2103      	movs	r1, #3
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f7ff fa2d 	bl	8010bdc <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8011782:	e0e3      	b.n	801194c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 8011784:	7bbb      	ldrb	r3, [r7, #14]
 8011786:	2b05      	cmp	r3, #5
 8011788:	d10b      	bne.n	80117a2 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	220c      	movs	r2, #12
 801178e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8011790:	2303      	movs	r3, #3
 8011792:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011794:	2300      	movs	r3, #0
 8011796:	2200      	movs	r2, #0
 8011798:	2103      	movs	r1, #3
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f7ff fa1e 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 80117a0:	e0d4      	b.n	801194c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 80117a2:	7bbb      	ldrb	r3, [r7, #14]
 80117a4:	2b02      	cmp	r3, #2
 80117a6:	d109      	bne.n	80117bc <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2205      	movs	r2, #5
 80117ac:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80117ae:	2300      	movs	r3, #0
 80117b0:	2200      	movs	r2, #0
 80117b2:	2103      	movs	r1, #3
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f7ff fa11 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 80117ba:	e0c7      	b.n	801194c <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 80117bc:	7bbb      	ldrb	r3, [r7, #14]
 80117be:	2b04      	cmp	r3, #4
 80117c0:	f040 80c4 	bne.w	801194c <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	220b      	movs	r2, #11
 80117c8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80117ca:	2302      	movs	r3, #2
 80117cc:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80117ce:	2300      	movs	r3, #0
 80117d0:	2200      	movs	r2, #0
 80117d2:	2103      	movs	r1, #3
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f7ff fa01 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 80117da:	e0b7      	b.n	801194c <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	791b      	ldrb	r3, [r3, #4]
 80117e0:	2200      	movs	r2, #0
 80117e2:	2100      	movs	r1, #0
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f000 f8fa 	bl	80119de <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80117f0:	b29a      	uxth	r2, r3
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2208      	movs	r2, #8
 80117fa:	761a      	strb	r2, [r3, #24]

      break;
 80117fc:	e0ab      	b.n	8011956 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	791b      	ldrb	r3, [r3, #4]
 8011802:	4619      	mov	r1, r3
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f003 fe65 	bl	80154d4 <USBH_LL_GetURBState>
 801180a:	4603      	mov	r3, r0
 801180c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801180e:	7bbb      	ldrb	r3, [r7, #14]
 8011810:	2b01      	cmp	r3, #1
 8011812:	d10b      	bne.n	801182c <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	220d      	movs	r2, #13
 8011818:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801181a:	2300      	movs	r3, #0
 801181c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801181e:	2300      	movs	r3, #0
 8011820:	2200      	movs	r2, #0
 8011822:	2103      	movs	r1, #3
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f7ff f9d9 	bl	8010bdc <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801182a:	e091      	b.n	8011950 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 801182c:	7bbb      	ldrb	r3, [r7, #14]
 801182e:	2b04      	cmp	r3, #4
 8011830:	d109      	bne.n	8011846 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	220b      	movs	r2, #11
 8011836:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011838:	2300      	movs	r3, #0
 801183a:	2200      	movs	r2, #0
 801183c:	2103      	movs	r1, #3
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f7ff f9cc 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 8011844:	e084      	b.n	8011950 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 8011846:	7bbb      	ldrb	r3, [r7, #14]
 8011848:	2b05      	cmp	r3, #5
 801184a:	f040 8081 	bne.w	8011950 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 801184e:	2303      	movs	r3, #3
 8011850:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011852:	2300      	movs	r3, #0
 8011854:	2200      	movs	r2, #0
 8011856:	2103      	movs	r1, #3
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f7ff f9bf 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 801185e:	e077      	b.n	8011950 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	795b      	ldrb	r3, [r3, #5]
 8011864:	2201      	movs	r2, #1
 8011866:	9200      	str	r2, [sp, #0]
 8011868:	2200      	movs	r2, #0
 801186a:	2100      	movs	r1, #0
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 f891 	bl	8011994 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011878:	b29a      	uxth	r2, r3
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	220a      	movs	r2, #10
 8011882:	761a      	strb	r2, [r3, #24]
      break;
 8011884:	e067      	b.n	8011956 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	795b      	ldrb	r3, [r3, #5]
 801188a:	4619      	mov	r1, r3
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f003 fe21 	bl	80154d4 <USBH_LL_GetURBState>
 8011892:	4603      	mov	r3, r0
 8011894:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8011896:	7bbb      	ldrb	r3, [r7, #14]
 8011898:	2b01      	cmp	r3, #1
 801189a:	d10b      	bne.n	80118b4 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 801189c:	2300      	movs	r3, #0
 801189e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	220d      	movs	r2, #13
 80118a4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80118a6:	2300      	movs	r3, #0
 80118a8:	2200      	movs	r2, #0
 80118aa:	2103      	movs	r1, #3
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f7ff f995 	bl	8010bdc <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80118b2:	e04f      	b.n	8011954 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 80118b4:	7bbb      	ldrb	r3, [r7, #14]
 80118b6:	2b02      	cmp	r3, #2
 80118b8:	d109      	bne.n	80118ce <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2209      	movs	r2, #9
 80118be:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80118c0:	2300      	movs	r3, #0
 80118c2:	2200      	movs	r2, #0
 80118c4:	2103      	movs	r1, #3
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f7ff f988 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 80118cc:	e042      	b.n	8011954 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 80118ce:	7bbb      	ldrb	r3, [r7, #14]
 80118d0:	2b04      	cmp	r3, #4
 80118d2:	d13f      	bne.n	8011954 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	220b      	movs	r2, #11
 80118d8:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80118da:	2300      	movs	r3, #0
 80118dc:	2200      	movs	r2, #0
 80118de:	2103      	movs	r1, #3
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f7ff f97b 	bl	8010bdc <USBH_OS_PutMessage>
      break;
 80118e6:	e035      	b.n	8011954 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	7e5b      	ldrb	r3, [r3, #25]
 80118ec:	3301      	adds	r3, #1
 80118ee:	b2da      	uxtb	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	765a      	strb	r2, [r3, #25]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	7e5b      	ldrb	r3, [r3, #25]
 80118f8:	2b02      	cmp	r3, #2
 80118fa:	d806      	bhi.n	801190a <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2201      	movs	r2, #1
 8011900:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2201      	movs	r2, #1
 8011906:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8011908:	e025      	b.n	8011956 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011910:	2106      	movs	r1, #6
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2200      	movs	r2, #0
 801191a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	795b      	ldrb	r3, [r3, #5]
 8011920:	4619      	mov	r1, r3
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f000 f90c 	bl	8011b40 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	791b      	ldrb	r3, [r3, #4]
 801192c:	4619      	mov	r1, r3
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f000 f906 	bl	8011b40 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2200      	movs	r2, #0
 8011938:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801193a:	2302      	movs	r3, #2
 801193c:	73fb      	strb	r3, [r7, #15]
      break;
 801193e:	e00a      	b.n	8011956 <USBH_HandleControl+0x396>

    default:
      break;
 8011940:	bf00      	nop
 8011942:	e008      	b.n	8011956 <USBH_HandleControl+0x396>
      break;
 8011944:	bf00      	nop
 8011946:	e006      	b.n	8011956 <USBH_HandleControl+0x396>
      break;
 8011948:	bf00      	nop
 801194a:	e004      	b.n	8011956 <USBH_HandleControl+0x396>
      break;
 801194c:	bf00      	nop
 801194e:	e002      	b.n	8011956 <USBH_HandleControl+0x396>
      break;
 8011950:	bf00      	nop
 8011952:	e000      	b.n	8011956 <USBH_HandleControl+0x396>
      break;
 8011954:	bf00      	nop
  }

  return status;
 8011956:	7bfb      	ldrb	r3, [r7, #15]
}
 8011958:	4618      	mov	r0, r3
 801195a:	3710      	adds	r7, #16
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}

08011960 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b088      	sub	sp, #32
 8011964:	af04      	add	r7, sp, #16
 8011966:	60f8      	str	r0, [r7, #12]
 8011968:	60b9      	str	r1, [r7, #8]
 801196a:	4613      	mov	r3, r2
 801196c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801196e:	79f9      	ldrb	r1, [r7, #7]
 8011970:	2300      	movs	r3, #0
 8011972:	9303      	str	r3, [sp, #12]
 8011974:	2308      	movs	r3, #8
 8011976:	9302      	str	r3, [sp, #8]
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	9301      	str	r3, [sp, #4]
 801197c:	2300      	movs	r3, #0
 801197e:	9300      	str	r3, [sp, #0]
 8011980:	2300      	movs	r3, #0
 8011982:	2200      	movs	r2, #0
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f003 fd74 	bl	8015472 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801198a:	2300      	movs	r3, #0
}
 801198c:	4618      	mov	r0, r3
 801198e:	3710      	adds	r7, #16
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b088      	sub	sp, #32
 8011998:	af04      	add	r7, sp, #16
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	60b9      	str	r1, [r7, #8]
 801199e:	4611      	mov	r1, r2
 80119a0:	461a      	mov	r2, r3
 80119a2:	460b      	mov	r3, r1
 80119a4:	80fb      	strh	r3, [r7, #6]
 80119a6:	4613      	mov	r3, r2
 80119a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d001      	beq.n	80119b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80119b4:	2300      	movs	r3, #0
 80119b6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80119b8:	7979      	ldrb	r1, [r7, #5]
 80119ba:	7e3b      	ldrb	r3, [r7, #24]
 80119bc:	9303      	str	r3, [sp, #12]
 80119be:	88fb      	ldrh	r3, [r7, #6]
 80119c0:	9302      	str	r3, [sp, #8]
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	9301      	str	r3, [sp, #4]
 80119c6:	2301      	movs	r3, #1
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	2300      	movs	r3, #0
 80119cc:	2200      	movs	r2, #0
 80119ce:	68f8      	ldr	r0, [r7, #12]
 80119d0:	f003 fd4f 	bl	8015472 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80119d4:	2300      	movs	r3, #0
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3710      	adds	r7, #16
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}

080119de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80119de:	b580      	push	{r7, lr}
 80119e0:	b088      	sub	sp, #32
 80119e2:	af04      	add	r7, sp, #16
 80119e4:	60f8      	str	r0, [r7, #12]
 80119e6:	60b9      	str	r1, [r7, #8]
 80119e8:	4611      	mov	r1, r2
 80119ea:	461a      	mov	r2, r3
 80119ec:	460b      	mov	r3, r1
 80119ee:	80fb      	strh	r3, [r7, #6]
 80119f0:	4613      	mov	r3, r2
 80119f2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80119f4:	7979      	ldrb	r1, [r7, #5]
 80119f6:	2300      	movs	r3, #0
 80119f8:	9303      	str	r3, [sp, #12]
 80119fa:	88fb      	ldrh	r3, [r7, #6]
 80119fc:	9302      	str	r3, [sp, #8]
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	9301      	str	r3, [sp, #4]
 8011a02:	2301      	movs	r3, #1
 8011a04:	9300      	str	r3, [sp, #0]
 8011a06:	2300      	movs	r3, #0
 8011a08:	2201      	movs	r2, #1
 8011a0a:	68f8      	ldr	r0, [r7, #12]
 8011a0c:	f003 fd31 	bl	8015472 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011a10:	2300      	movs	r3, #0

}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3710      	adds	r7, #16
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	b088      	sub	sp, #32
 8011a1e:	af04      	add	r7, sp, #16
 8011a20:	60f8      	str	r0, [r7, #12]
 8011a22:	60b9      	str	r1, [r7, #8]
 8011a24:	4611      	mov	r1, r2
 8011a26:	461a      	mov	r2, r3
 8011a28:	460b      	mov	r3, r1
 8011a2a:	80fb      	strh	r3, [r7, #6]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d001      	beq.n	8011a3e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011a3e:	7979      	ldrb	r1, [r7, #5]
 8011a40:	7e3b      	ldrb	r3, [r7, #24]
 8011a42:	9303      	str	r3, [sp, #12]
 8011a44:	88fb      	ldrh	r3, [r7, #6]
 8011a46:	9302      	str	r3, [sp, #8]
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	9301      	str	r3, [sp, #4]
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	9300      	str	r3, [sp, #0]
 8011a50:	2302      	movs	r3, #2
 8011a52:	2200      	movs	r2, #0
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f003 fd0c 	bl	8015472 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3710      	adds	r7, #16
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b088      	sub	sp, #32
 8011a68:	af04      	add	r7, sp, #16
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	4611      	mov	r1, r2
 8011a70:	461a      	mov	r2, r3
 8011a72:	460b      	mov	r3, r1
 8011a74:	80fb      	strh	r3, [r7, #6]
 8011a76:	4613      	mov	r3, r2
 8011a78:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011a7a:	7979      	ldrb	r1, [r7, #5]
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	9303      	str	r3, [sp, #12]
 8011a80:	88fb      	ldrh	r3, [r7, #6]
 8011a82:	9302      	str	r3, [sp, #8]
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	9301      	str	r3, [sp, #4]
 8011a88:	2301      	movs	r3, #1
 8011a8a:	9300      	str	r3, [sp, #0]
 8011a8c:	2302      	movs	r3, #2
 8011a8e:	2201      	movs	r2, #1
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f003 fcee 	bl	8015472 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011a96:	2300      	movs	r3, #0
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3710      	adds	r7, #16
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b086      	sub	sp, #24
 8011aa4:	af04      	add	r7, sp, #16
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	4608      	mov	r0, r1
 8011aaa:	4611      	mov	r1, r2
 8011aac:	461a      	mov	r2, r3
 8011aae:	4603      	mov	r3, r0
 8011ab0:	70fb      	strb	r3, [r7, #3]
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	70bb      	strb	r3, [r7, #2]
 8011ab6:	4613      	mov	r3, r2
 8011ab8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8011aba:	7878      	ldrb	r0, [r7, #1]
 8011abc:	78ba      	ldrb	r2, [r7, #2]
 8011abe:	78f9      	ldrb	r1, [r7, #3]
 8011ac0:	8b3b      	ldrh	r3, [r7, #24]
 8011ac2:	9302      	str	r3, [sp, #8]
 8011ac4:	7d3b      	ldrb	r3, [r7, #20]
 8011ac6:	9301      	str	r3, [sp, #4]
 8011ac8:	7c3b      	ldrb	r3, [r7, #16]
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	4603      	mov	r3, r0
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f003 fc81 	bl	80153d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8011ad4:	2300      	movs	r3, #0
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8011ade:	b580      	push	{r7, lr}
 8011ae0:	b082      	sub	sp, #8
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	6078      	str	r0, [r7, #4]
 8011ae6:	460b      	mov	r3, r1
 8011ae8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8011aea:	78fb      	ldrb	r3, [r7, #3]
 8011aec:	4619      	mov	r1, r3
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f003 fca0 	bl	8015434 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011af4:	2300      	movs	r3, #0
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}

08011afe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011afe:	b580      	push	{r7, lr}
 8011b00:	b084      	sub	sp, #16
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
 8011b06:	460b      	mov	r3, r1
 8011b08:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f000 f836 	bl	8011b7c <USBH_GetFreePipe>
 8011b10:	4603      	mov	r3, r0
 8011b12:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011b14:	89fb      	ldrh	r3, [r7, #14]
 8011b16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d00a      	beq.n	8011b34 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8011b1e:	78fa      	ldrb	r2, [r7, #3]
 8011b20:	89fb      	ldrh	r3, [r7, #14]
 8011b22:	f003 030f 	and.w	r3, r3, #15
 8011b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011b2a:	6879      	ldr	r1, [r7, #4]
 8011b2c:	33e0      	adds	r3, #224	@ 0xe0
 8011b2e:	009b      	lsls	r3, r3, #2
 8011b30:	440b      	add	r3, r1
 8011b32:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011b34:	89fb      	ldrh	r3, [r7, #14]
 8011b36:	b2db      	uxtb	r3, r3
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3710      	adds	r7, #16
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011b40:	b480      	push	{r7}
 8011b42:	b083      	sub	sp, #12
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	460b      	mov	r3, r1
 8011b4a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011b4c:	78fb      	ldrb	r3, [r7, #3]
 8011b4e:	2b0f      	cmp	r3, #15
 8011b50:	d80d      	bhi.n	8011b6e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011b52:	78fb      	ldrb	r3, [r7, #3]
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	33e0      	adds	r3, #224	@ 0xe0
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	4413      	add	r3, r2
 8011b5c:	685a      	ldr	r2, [r3, #4]
 8011b5e:	78fb      	ldrb	r3, [r7, #3]
 8011b60:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011b64:	6879      	ldr	r1, [r7, #4]
 8011b66:	33e0      	adds	r3, #224	@ 0xe0
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	440b      	add	r3, r1
 8011b6c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011b6e:	2300      	movs	r3, #0
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	370c      	adds	r7, #12
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr

08011b7c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	b085      	sub	sp, #20
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011b84:	2300      	movs	r3, #0
 8011b86:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011b88:	2300      	movs	r3, #0
 8011b8a:	73fb      	strb	r3, [r7, #15]
 8011b8c:	e00f      	b.n	8011bae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8011b8e:	7bfb      	ldrb	r3, [r7, #15]
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	33e0      	adds	r3, #224	@ 0xe0
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	4413      	add	r3, r2
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d102      	bne.n	8011ba8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8011ba2:	7bfb      	ldrb	r3, [r7, #15]
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	e007      	b.n	8011bb8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011ba8:	7bfb      	ldrb	r3, [r7, #15]
 8011baa:	3301      	adds	r3, #1
 8011bac:	73fb      	strb	r3, [r7, #15]
 8011bae:	7bfb      	ldrb	r3, [r7, #15]
 8011bb0:	2b0f      	cmp	r3, #15
 8011bb2:	d9ec      	bls.n	8011b8e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011bb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3714      	adds	r7, #20
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011bc4:	b480      	push	{r7}
 8011bc6:	b087      	sub	sp, #28
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	60f8      	str	r0, [r7, #12]
 8011bcc:	60b9      	str	r1, [r7, #8]
 8011bce:	4613      	mov	r3, r2
 8011bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011bda:	4b1f      	ldr	r3, [pc, #124]	@ (8011c58 <FATFS_LinkDriverEx+0x94>)
 8011bdc:	7a5b      	ldrb	r3, [r3, #9]
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d131      	bne.n	8011c48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011be4:	4b1c      	ldr	r3, [pc, #112]	@ (8011c58 <FATFS_LinkDriverEx+0x94>)
 8011be6:	7a5b      	ldrb	r3, [r3, #9]
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	461a      	mov	r2, r3
 8011bec:	4b1a      	ldr	r3, [pc, #104]	@ (8011c58 <FATFS_LinkDriverEx+0x94>)
 8011bee:	2100      	movs	r1, #0
 8011bf0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011bf2:	4b19      	ldr	r3, [pc, #100]	@ (8011c58 <FATFS_LinkDriverEx+0x94>)
 8011bf4:	7a5b      	ldrb	r3, [r3, #9]
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	4a17      	ldr	r2, [pc, #92]	@ (8011c58 <FATFS_LinkDriverEx+0x94>)
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	4413      	add	r3, r2
 8011bfe:	68fa      	ldr	r2, [r7, #12]
 8011c00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011c02:	4b15      	ldr	r3, [pc, #84]	@ (8011c58 <FATFS_LinkDriverEx+0x94>)
 8011c04:	7a5b      	ldrb	r3, [r3, #9]
 8011c06:	b2db      	uxtb	r3, r3
 8011c08:	461a      	mov	r2, r3
 8011c0a:	4b13      	ldr	r3, [pc, #76]	@ (8011c58 <FATFS_LinkDriverEx+0x94>)
 8011c0c:	4413      	add	r3, r2
 8011c0e:	79fa      	ldrb	r2, [r7, #7]
 8011c10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011c12:	4b11      	ldr	r3, [pc, #68]	@ (8011c58 <FATFS_LinkDriverEx+0x94>)
 8011c14:	7a5b      	ldrb	r3, [r3, #9]
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	1c5a      	adds	r2, r3, #1
 8011c1a:	b2d1      	uxtb	r1, r2
 8011c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8011c58 <FATFS_LinkDriverEx+0x94>)
 8011c1e:	7251      	strb	r1, [r2, #9]
 8011c20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011c22:	7dbb      	ldrb	r3, [r7, #22]
 8011c24:	3330      	adds	r3, #48	@ 0x30
 8011c26:	b2da      	uxtb	r2, r3
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	3301      	adds	r3, #1
 8011c30:	223a      	movs	r2, #58	@ 0x3a
 8011c32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	3302      	adds	r3, #2
 8011c38:	222f      	movs	r2, #47	@ 0x2f
 8011c3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	3303      	adds	r3, #3
 8011c40:	2200      	movs	r2, #0
 8011c42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011c44:	2300      	movs	r3, #0
 8011c46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	371c      	adds	r7, #28
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c54:	4770      	bx	lr
 8011c56:	bf00      	nop
 8011c58:	20004c18 	.word	0x20004c18

08011c5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011c66:	2200      	movs	r2, #0
 8011c68:	6839      	ldr	r1, [r7, #0]
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f7ff ffaa 	bl	8011bc4 <FATFS_LinkDriverEx>
 8011c70:	4603      	mov	r3, r0
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3708      	adds	r7, #8
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}

08011c7a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011c7a:	b480      	push	{r7}
 8011c7c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8011c7e:	bf00      	nop
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr

08011c88 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c8e:	f3ef 8305 	mrs	r3, IPSR
 8011c92:	60bb      	str	r3, [r7, #8]
  return(result);
 8011c94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d10f      	bne.n	8011cba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8011c9e:	607b      	str	r3, [r7, #4]
  return(result);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d105      	bne.n	8011cb2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8011caa:	603b      	str	r3, [r7, #0]
  return(result);
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d007      	beq.n	8011cc2 <osKernelInitialize+0x3a>
 8011cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8011cec <osKernelInitialize+0x64>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	2b02      	cmp	r3, #2
 8011cb8:	d103      	bne.n	8011cc2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8011cba:	f06f 0305 	mvn.w	r3, #5
 8011cbe:	60fb      	str	r3, [r7, #12]
 8011cc0:	e00c      	b.n	8011cdc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8011cec <osKernelInitialize+0x64>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d105      	bne.n	8011cd6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011cca:	4b08      	ldr	r3, [pc, #32]	@ (8011cec <osKernelInitialize+0x64>)
 8011ccc:	2201      	movs	r2, #1
 8011cce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	60fb      	str	r3, [r7, #12]
 8011cd4:	e002      	b.n	8011cdc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8011cda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011cdc:	68fb      	ldr	r3, [r7, #12]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3714      	adds	r7, #20
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce8:	4770      	bx	lr
 8011cea:	bf00      	nop
 8011cec:	20004c24 	.word	0x20004c24

08011cf0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8011cf6:	f002 f929 	bl	8013f4c <xTaskGetSchedulerState>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d004      	beq.n	8011d0a <osKernelGetState+0x1a>
 8011d00:	2b02      	cmp	r3, #2
 8011d02:	d105      	bne.n	8011d10 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8011d04:	2302      	movs	r3, #2
 8011d06:	607b      	str	r3, [r7, #4]
      break;
 8011d08:	e00c      	b.n	8011d24 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8011d0a:	2303      	movs	r3, #3
 8011d0c:	607b      	str	r3, [r7, #4]
      break;
 8011d0e:	e009      	b.n	8011d24 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8011d10:	4b07      	ldr	r3, [pc, #28]	@ (8011d30 <osKernelGetState+0x40>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2b01      	cmp	r3, #1
 8011d16:	d102      	bne.n	8011d1e <osKernelGetState+0x2e>
        state = osKernelReady;
 8011d18:	2301      	movs	r3, #1
 8011d1a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8011d1c:	e001      	b.n	8011d22 <osKernelGetState+0x32>
        state = osKernelInactive;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	607b      	str	r3, [r7, #4]
      break;
 8011d22:	bf00      	nop
  }

  return (state);
 8011d24:	687b      	ldr	r3, [r7, #4]
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3708      	adds	r7, #8
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
 8011d2e:	bf00      	nop
 8011d30:	20004c24 	.word	0x20004c24

08011d34 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b084      	sub	sp, #16
 8011d38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d3a:	f3ef 8305 	mrs	r3, IPSR
 8011d3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011d40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d10f      	bne.n	8011d66 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d46:	f3ef 8310 	mrs	r3, PRIMASK
 8011d4a:	607b      	str	r3, [r7, #4]
  return(result);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d105      	bne.n	8011d5e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011d52:	f3ef 8311 	mrs	r3, BASEPRI
 8011d56:	603b      	str	r3, [r7, #0]
  return(result);
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d007      	beq.n	8011d6e <osKernelStart+0x3a>
 8011d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8011d9c <osKernelStart+0x68>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	2b02      	cmp	r3, #2
 8011d64:	d103      	bne.n	8011d6e <osKernelStart+0x3a>
    stat = osErrorISR;
 8011d66:	f06f 0305 	mvn.w	r3, #5
 8011d6a:	60fb      	str	r3, [r7, #12]
 8011d6c:	e010      	b.n	8011d90 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8011d9c <osKernelStart+0x68>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	d109      	bne.n	8011d8a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011d76:	f7ff ff80 	bl	8011c7a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011d7a:	4b08      	ldr	r3, [pc, #32]	@ (8011d9c <osKernelStart+0x68>)
 8011d7c:	2202      	movs	r2, #2
 8011d7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011d80:	f001 fc32 	bl	80135e8 <vTaskStartScheduler>
      stat = osOK;
 8011d84:	2300      	movs	r3, #0
 8011d86:	60fb      	str	r3, [r7, #12]
 8011d88:	e002      	b.n	8011d90 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8011d8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011d90:	68fb      	ldr	r3, [r7, #12]
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3710      	adds	r7, #16
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	20004c24 	.word	0x20004c24

08011da0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b084      	sub	sp, #16
 8011da4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011da6:	f3ef 8305 	mrs	r3, IPSR
 8011daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8011dac:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d10f      	bne.n	8011dd2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011db2:	f3ef 8310 	mrs	r3, PRIMASK
 8011db6:	607b      	str	r3, [r7, #4]
  return(result);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d105      	bne.n	8011dca <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8011dc2:	603b      	str	r3, [r7, #0]
  return(result);
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d007      	beq.n	8011dda <osKernelGetTickCount+0x3a>
 8011dca:	4b08      	ldr	r3, [pc, #32]	@ (8011dec <osKernelGetTickCount+0x4c>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2b02      	cmp	r3, #2
 8011dd0:	d103      	bne.n	8011dda <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8011dd2:	f001 fd3b 	bl	801384c <xTaskGetTickCountFromISR>
 8011dd6:	60f8      	str	r0, [r7, #12]
 8011dd8:	e002      	b.n	8011de0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8011dda:	f001 fd27 	bl	801382c <xTaskGetTickCount>
 8011dde:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8011de0:	68fb      	ldr	r3, [r7, #12]
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3710      	adds	r7, #16
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	20004c24 	.word	0x20004c24

08011df0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b090      	sub	sp, #64	@ 0x40
 8011df4:	af04      	add	r7, sp, #16
 8011df6:	60f8      	str	r0, [r7, #12]
 8011df8:	60b9      	str	r1, [r7, #8]
 8011dfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e00:	f3ef 8305 	mrs	r3, IPSR
 8011e04:	61fb      	str	r3, [r7, #28]
  return(result);
 8011e06:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	f040 808f 	bne.w	8011f2c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8011e12:	61bb      	str	r3, [r7, #24]
  return(result);
 8011e14:	69bb      	ldr	r3, [r7, #24]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d105      	bne.n	8011e26 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8011e1e:	617b      	str	r3, [r7, #20]
  return(result);
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d003      	beq.n	8011e2e <osThreadNew+0x3e>
 8011e26:	4b44      	ldr	r3, [pc, #272]	@ (8011f38 <osThreadNew+0x148>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2b02      	cmp	r3, #2
 8011e2c:	d07e      	beq.n	8011f2c <osThreadNew+0x13c>
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d07b      	beq.n	8011f2c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011e34:	2380      	movs	r3, #128	@ 0x80
 8011e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011e38:	2318      	movs	r3, #24
 8011e3a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8011e40:	f04f 33ff 	mov.w	r3, #4294967295
 8011e44:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d045      	beq.n	8011ed8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d002      	beq.n	8011e5a <osThreadNew+0x6a>
        name = attr->name;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	699b      	ldr	r3, [r3, #24]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d002      	beq.n	8011e68 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	699b      	ldr	r3, [r3, #24]
 8011e66:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d008      	beq.n	8011e80 <osThreadNew+0x90>
 8011e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e70:	2b38      	cmp	r3, #56	@ 0x38
 8011e72:	d805      	bhi.n	8011e80 <osThreadNew+0x90>
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	f003 0301 	and.w	r3, r3, #1
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d001      	beq.n	8011e84 <osThreadNew+0x94>
        return (NULL);
 8011e80:	2300      	movs	r3, #0
 8011e82:	e054      	b.n	8011f2e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	695b      	ldr	r3, [r3, #20]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d003      	beq.n	8011e94 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	695b      	ldr	r3, [r3, #20]
 8011e90:	089b      	lsrs	r3, r3, #2
 8011e92:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	689b      	ldr	r3, [r3, #8]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00e      	beq.n	8011eba <osThreadNew+0xca>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	2bab      	cmp	r3, #171	@ 0xab
 8011ea2:	d90a      	bls.n	8011eba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d006      	beq.n	8011eba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	695b      	ldr	r3, [r3, #20]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d002      	beq.n	8011eba <osThreadNew+0xca>
        mem = 1;
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	623b      	str	r3, [r7, #32]
 8011eb8:	e010      	b.n	8011edc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	689b      	ldr	r3, [r3, #8]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d10c      	bne.n	8011edc <osThreadNew+0xec>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d108      	bne.n	8011edc <osThreadNew+0xec>
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	691b      	ldr	r3, [r3, #16]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d104      	bne.n	8011edc <osThreadNew+0xec>
          mem = 0;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	623b      	str	r3, [r7, #32]
 8011ed6:	e001      	b.n	8011edc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011edc:	6a3b      	ldr	r3, [r7, #32]
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d110      	bne.n	8011f04 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011eea:	9202      	str	r2, [sp, #8]
 8011eec:	9301      	str	r3, [sp, #4]
 8011eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef0:	9300      	str	r3, [sp, #0]
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ef8:	68f8      	ldr	r0, [r7, #12]
 8011efa:	f001 f8ff 	bl	80130fc <xTaskCreateStatic>
 8011efe:	4603      	mov	r3, r0
 8011f00:	613b      	str	r3, [r7, #16]
 8011f02:	e013      	b.n	8011f2c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8011f04:	6a3b      	ldr	r3, [r7, #32]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d110      	bne.n	8011f2c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	f107 0310 	add.w	r3, r7, #16
 8011f12:	9301      	str	r3, [sp, #4]
 8011f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011f1c:	68f8      	ldr	r0, [r7, #12]
 8011f1e:	f001 f953 	bl	80131c8 <xTaskCreate>
 8011f22:	4603      	mov	r3, r0
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d001      	beq.n	8011f2c <osThreadNew+0x13c>
          hTask = NULL;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011f2c:	693b      	ldr	r3, [r7, #16]
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3730      	adds	r7, #48	@ 0x30
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop
 8011f38:	20004c24 	.word	0x20004c24

08011f3c <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8011f40:	2000      	movs	r0, #0
 8011f42:	f001 faa3 	bl	801348c <vTaskDelete>
#endif
  for (;;);
 8011f46:	bf00      	nop
 8011f48:	e7fd      	b.n	8011f46 <osThreadExit+0xa>
	...

08011f4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b086      	sub	sp, #24
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f54:	f3ef 8305 	mrs	r3, IPSR
 8011f58:	613b      	str	r3, [r7, #16]
  return(result);
 8011f5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d10f      	bne.n	8011f80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f60:	f3ef 8310 	mrs	r3, PRIMASK
 8011f64:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d105      	bne.n	8011f78 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8011f70:	60bb      	str	r3, [r7, #8]
  return(result);
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d007      	beq.n	8011f88 <osDelay+0x3c>
 8011f78:	4b0a      	ldr	r3, [pc, #40]	@ (8011fa4 <osDelay+0x58>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	2b02      	cmp	r3, #2
 8011f7e:	d103      	bne.n	8011f88 <osDelay+0x3c>
    stat = osErrorISR;
 8011f80:	f06f 0305 	mvn.w	r3, #5
 8011f84:	617b      	str	r3, [r7, #20]
 8011f86:	e007      	b.n	8011f98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d002      	beq.n	8011f98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f001 faf0 	bl	8013578 <vTaskDelay>
    }
  }

  return (stat);
 8011f98:	697b      	ldr	r3, [r7, #20]
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3718      	adds	r7, #24
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	20004c24 	.word	0x20004c24

08011fa8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b08c      	sub	sp, #48	@ 0x30
 8011fac:	af02      	add	r7, sp, #8
 8011fae:	60f8      	str	r0, [r7, #12]
 8011fb0:	60b9      	str	r1, [r7, #8]
 8011fb2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011fb8:	f3ef 8305 	mrs	r3, IPSR
 8011fbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8011fbe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d16f      	bne.n	80120a4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8011fc8:	617b      	str	r3, [r7, #20]
  return(result);
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d105      	bne.n	8011fdc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8011fd4:	613b      	str	r3, [r7, #16]
  return(result);
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d003      	beq.n	8011fe4 <osMessageQueueNew+0x3c>
 8011fdc:	4b34      	ldr	r3, [pc, #208]	@ (80120b0 <osMessageQueueNew+0x108>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	2b02      	cmp	r3, #2
 8011fe2:	d05f      	beq.n	80120a4 <osMessageQueueNew+0xfc>
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d05c      	beq.n	80120a4 <osMessageQueueNew+0xfc>
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d059      	beq.n	80120a4 <osMessageQueueNew+0xfc>
    mem = -1;
 8011ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ff4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d029      	beq.n	8012050 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	689b      	ldr	r3, [r3, #8]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d012      	beq.n	801202a <osMessageQueueNew+0x82>
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	68db      	ldr	r3, [r3, #12]
 8012008:	2b4f      	cmp	r3, #79	@ 0x4f
 801200a:	d90e      	bls.n	801202a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012010:	2b00      	cmp	r3, #0
 8012012:	d00a      	beq.n	801202a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	695a      	ldr	r2, [r3, #20]
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	68b9      	ldr	r1, [r7, #8]
 801201c:	fb01 f303 	mul.w	r3, r1, r3
 8012020:	429a      	cmp	r2, r3
 8012022:	d302      	bcc.n	801202a <osMessageQueueNew+0x82>
        mem = 1;
 8012024:	2301      	movs	r3, #1
 8012026:	623b      	str	r3, [r7, #32]
 8012028:	e014      	b.n	8012054 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	689b      	ldr	r3, [r3, #8]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d110      	bne.n	8012054 <osMessageQueueNew+0xac>
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	68db      	ldr	r3, [r3, #12]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d10c      	bne.n	8012054 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801203e:	2b00      	cmp	r3, #0
 8012040:	d108      	bne.n	8012054 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	695b      	ldr	r3, [r3, #20]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d104      	bne.n	8012054 <osMessageQueueNew+0xac>
          mem = 0;
 801204a:	2300      	movs	r3, #0
 801204c:	623b      	str	r3, [r7, #32]
 801204e:	e001      	b.n	8012054 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012050:	2300      	movs	r3, #0
 8012052:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012054:	6a3b      	ldr	r3, [r7, #32]
 8012056:	2b01      	cmp	r3, #1
 8012058:	d10b      	bne.n	8012072 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	691a      	ldr	r2, [r3, #16]
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	689b      	ldr	r3, [r3, #8]
 8012062:	2100      	movs	r1, #0
 8012064:	9100      	str	r1, [sp, #0]
 8012066:	68b9      	ldr	r1, [r7, #8]
 8012068:	68f8      	ldr	r0, [r7, #12]
 801206a:	f000 faa7 	bl	80125bc <xQueueGenericCreateStatic>
 801206e:	6278      	str	r0, [r7, #36]	@ 0x24
 8012070:	e008      	b.n	8012084 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8012072:	6a3b      	ldr	r3, [r7, #32]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d105      	bne.n	8012084 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8012078:	2200      	movs	r2, #0
 801207a:	68b9      	ldr	r1, [r7, #8]
 801207c:	68f8      	ldr	r0, [r7, #12]
 801207e:	f000 fb24 	bl	80126ca <xQueueGenericCreate>
 8012082:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012086:	2b00      	cmp	r3, #0
 8012088:	d00c      	beq.n	80120a4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d003      	beq.n	8012098 <osMessageQueueNew+0xf0>
        name = attr->name;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	61fb      	str	r3, [r7, #28]
 8012096:	e001      	b.n	801209c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8012098:	2300      	movs	r3, #0
 801209a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801209c:	69f9      	ldr	r1, [r7, #28]
 801209e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80120a0:	f000 ffce 	bl	8013040 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80120a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3728      	adds	r7, #40	@ 0x28
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	bf00      	nop
 80120b0:	20004c24 	.word	0x20004c24

080120b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b08a      	sub	sp, #40	@ 0x28
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	60f8      	str	r0, [r7, #12]
 80120bc:	60b9      	str	r1, [r7, #8]
 80120be:	603b      	str	r3, [r7, #0]
 80120c0:	4613      	mov	r3, r2
 80120c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80120c8:	2300      	movs	r3, #0
 80120ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120cc:	f3ef 8305 	mrs	r3, IPSR
 80120d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80120d2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d10f      	bne.n	80120f8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120d8:	f3ef 8310 	mrs	r3, PRIMASK
 80120dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80120de:	69bb      	ldr	r3, [r7, #24]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d105      	bne.n	80120f0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80120e4:	f3ef 8311 	mrs	r3, BASEPRI
 80120e8:	617b      	str	r3, [r7, #20]
  return(result);
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d02c      	beq.n	801214a <osMessageQueuePut+0x96>
 80120f0:	4b28      	ldr	r3, [pc, #160]	@ (8012194 <osMessageQueuePut+0xe0>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2b02      	cmp	r3, #2
 80120f6:	d128      	bne.n	801214a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80120f8:	6a3b      	ldr	r3, [r7, #32]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d005      	beq.n	801210a <osMessageQueuePut+0x56>
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d002      	beq.n	801210a <osMessageQueuePut+0x56>
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d003      	beq.n	8012112 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801210a:	f06f 0303 	mvn.w	r3, #3
 801210e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012110:	e039      	b.n	8012186 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8012112:	2300      	movs	r3, #0
 8012114:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012116:	f107 0210 	add.w	r2, r7, #16
 801211a:	2300      	movs	r3, #0
 801211c:	68b9      	ldr	r1, [r7, #8]
 801211e:	6a38      	ldr	r0, [r7, #32]
 8012120:	f000 fc44 	bl	80129ac <xQueueGenericSendFromISR>
 8012124:	4603      	mov	r3, r0
 8012126:	2b01      	cmp	r3, #1
 8012128:	d003      	beq.n	8012132 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801212a:	f06f 0302 	mvn.w	r3, #2
 801212e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012130:	e029      	b.n	8012186 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d026      	beq.n	8012186 <osMessageQueuePut+0xd2>
 8012138:	4b17      	ldr	r3, [pc, #92]	@ (8012198 <osMessageQueuePut+0xe4>)
 801213a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801213e:	601a      	str	r2, [r3, #0]
 8012140:	f3bf 8f4f 	dsb	sy
 8012144:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012148:	e01d      	b.n	8012186 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801214a:	6a3b      	ldr	r3, [r7, #32]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d002      	beq.n	8012156 <osMessageQueuePut+0xa2>
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d103      	bne.n	801215e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8012156:	f06f 0303 	mvn.w	r3, #3
 801215a:	627b      	str	r3, [r7, #36]	@ 0x24
 801215c:	e014      	b.n	8012188 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801215e:	2300      	movs	r3, #0
 8012160:	683a      	ldr	r2, [r7, #0]
 8012162:	68b9      	ldr	r1, [r7, #8]
 8012164:	6a38      	ldr	r0, [r7, #32]
 8012166:	f000 fb17 	bl	8012798 <xQueueGenericSend>
 801216a:	4603      	mov	r3, r0
 801216c:	2b01      	cmp	r3, #1
 801216e:	d00b      	beq.n	8012188 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d003      	beq.n	801217e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8012176:	f06f 0301 	mvn.w	r3, #1
 801217a:	627b      	str	r3, [r7, #36]	@ 0x24
 801217c:	e004      	b.n	8012188 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801217e:	f06f 0302 	mvn.w	r3, #2
 8012182:	627b      	str	r3, [r7, #36]	@ 0x24
 8012184:	e000      	b.n	8012188 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012186:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801218a:	4618      	mov	r0, r3
 801218c:	3728      	adds	r7, #40	@ 0x28
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	20004c24 	.word	0x20004c24
 8012198:	e000ed04 	.word	0xe000ed04

0801219c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801219c:	b580      	push	{r7, lr}
 801219e:	b08a      	sub	sp, #40	@ 0x28
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
 80121a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80121ae:	2300      	movs	r3, #0
 80121b0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80121b2:	f3ef 8305 	mrs	r3, IPSR
 80121b6:	61fb      	str	r3, [r7, #28]
  return(result);
 80121b8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d10f      	bne.n	80121de <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121be:	f3ef 8310 	mrs	r3, PRIMASK
 80121c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80121c4:	69bb      	ldr	r3, [r7, #24]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d105      	bne.n	80121d6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80121ca:	f3ef 8311 	mrs	r3, BASEPRI
 80121ce:	617b      	str	r3, [r7, #20]
  return(result);
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d02c      	beq.n	8012230 <osMessageQueueGet+0x94>
 80121d6:	4b28      	ldr	r3, [pc, #160]	@ (8012278 <osMessageQueueGet+0xdc>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	2b02      	cmp	r3, #2
 80121dc:	d128      	bne.n	8012230 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121de:	6a3b      	ldr	r3, [r7, #32]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d005      	beq.n	80121f0 <osMessageQueueGet+0x54>
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d002      	beq.n	80121f0 <osMessageQueueGet+0x54>
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d003      	beq.n	80121f8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80121f0:	f06f 0303 	mvn.w	r3, #3
 80121f4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121f6:	e038      	b.n	801226a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80121f8:	2300      	movs	r3, #0
 80121fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80121fc:	f107 0310 	add.w	r3, r7, #16
 8012200:	461a      	mov	r2, r3
 8012202:	68b9      	ldr	r1, [r7, #8]
 8012204:	6a38      	ldr	r0, [r7, #32]
 8012206:	f000 fd5d 	bl	8012cc4 <xQueueReceiveFromISR>
 801220a:	4603      	mov	r3, r0
 801220c:	2b01      	cmp	r3, #1
 801220e:	d003      	beq.n	8012218 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8012210:	f06f 0302 	mvn.w	r3, #2
 8012214:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012216:	e028      	b.n	801226a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d025      	beq.n	801226a <osMessageQueueGet+0xce>
 801221e:	4b17      	ldr	r3, [pc, #92]	@ (801227c <osMessageQueueGet+0xe0>)
 8012220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012224:	601a      	str	r2, [r3, #0]
 8012226:	f3bf 8f4f 	dsb	sy
 801222a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801222e:	e01c      	b.n	801226a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012230:	6a3b      	ldr	r3, [r7, #32]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d002      	beq.n	801223c <osMessageQueueGet+0xa0>
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d103      	bne.n	8012244 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801223c:	f06f 0303 	mvn.w	r3, #3
 8012240:	627b      	str	r3, [r7, #36]	@ 0x24
 8012242:	e013      	b.n	801226c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012244:	683a      	ldr	r2, [r7, #0]
 8012246:	68b9      	ldr	r1, [r7, #8]
 8012248:	6a38      	ldr	r0, [r7, #32]
 801224a:	f000 fc53 	bl	8012af4 <xQueueReceive>
 801224e:	4603      	mov	r3, r0
 8012250:	2b01      	cmp	r3, #1
 8012252:	d00b      	beq.n	801226c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d003      	beq.n	8012262 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801225a:	f06f 0301 	mvn.w	r3, #1
 801225e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012260:	e004      	b.n	801226c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8012262:	f06f 0302 	mvn.w	r3, #2
 8012266:	627b      	str	r3, [r7, #36]	@ 0x24
 8012268:	e000      	b.n	801226c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801226a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801226e:	4618      	mov	r0, r3
 8012270:	3728      	adds	r7, #40	@ 0x28
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
 8012276:	bf00      	nop
 8012278:	20004c24 	.word	0x20004c24
 801227c:	e000ed04 	.word	0xe000ed04

08012280 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8012280:	b580      	push	{r7, lr}
 8012282:	b08c      	sub	sp, #48	@ 0x30
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 801228c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801228e:	2b00      	cmp	r3, #0
 8012290:	d102      	bne.n	8012298 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8012292:	2300      	movs	r3, #0
 8012294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012296:	e036      	b.n	8012306 <osMessageQueueGetSpace+0x86>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012298:	f3ef 8305 	mrs	r3, IPSR
 801229c:	623b      	str	r3, [r7, #32]
  return(result);
 801229e:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d10f      	bne.n	80122c4 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122a4:	f3ef 8310 	mrs	r3, PRIMASK
 80122a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d105      	bne.n	80122bc <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80122b0:	f3ef 8311 	mrs	r3, BASEPRI
 80122b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80122b6:	69bb      	ldr	r3, [r7, #24]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d020      	beq.n	80122fe <osMessageQueueGetSpace+0x7e>
 80122bc:	4b14      	ldr	r3, [pc, #80]	@ (8012310 <osMessageQueueGetSpace+0x90>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d11c      	bne.n	80122fe <osMessageQueueGetSpace+0x7e>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80122c4:	f3ef 8211 	mrs	r2, BASEPRI
 80122c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122cc:	b672      	cpsid	i
 80122ce:	f383 8811 	msr	BASEPRI, r3
 80122d2:	f3bf 8f6f 	isb	sy
 80122d6:	f3bf 8f4f 	dsb	sy
 80122da:	b662      	cpsie	i
 80122dc:	613a      	str	r2, [r7, #16]
 80122de:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80122e0:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 80122e2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 80122e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80122e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122ec:	1ad3      	subs	r3, r2, r3
 80122ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80122f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80122fa:	bf00      	nop

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 80122fc:	e003      	b.n	8012306 <osMessageQueueGetSpace+0x86>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 80122fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012300:	f000 fd68 	bl	8012dd4 <uxQueueSpacesAvailable>
 8012304:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return (space);
 8012306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8012308:	4618      	mov	r0, r3
 801230a:	3730      	adds	r7, #48	@ 0x30
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	20004c24 	.word	0x20004c24

08012314 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012314:	b480      	push	{r7}
 8012316:	b085      	sub	sp, #20
 8012318:	af00      	add	r7, sp, #0
 801231a:	60f8      	str	r0, [r7, #12]
 801231c:	60b9      	str	r1, [r7, #8]
 801231e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	4a07      	ldr	r2, [pc, #28]	@ (8012340 <vApplicationGetIdleTaskMemory+0x2c>)
 8012324:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	4a06      	ldr	r2, [pc, #24]	@ (8012344 <vApplicationGetIdleTaskMemory+0x30>)
 801232a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2280      	movs	r2, #128	@ 0x80
 8012330:	601a      	str	r2, [r3, #0]
}
 8012332:	bf00      	nop
 8012334:	3714      	adds	r7, #20
 8012336:	46bd      	mov	sp, r7
 8012338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233c:	4770      	bx	lr
 801233e:	bf00      	nop
 8012340:	20004c28 	.word	0x20004c28
 8012344:	20004cd4 	.word	0x20004cd4

08012348 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012348:	b480      	push	{r7}
 801234a:	b085      	sub	sp, #20
 801234c:	af00      	add	r7, sp, #0
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	4a07      	ldr	r2, [pc, #28]	@ (8012374 <vApplicationGetTimerTaskMemory+0x2c>)
 8012358:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	4a06      	ldr	r2, [pc, #24]	@ (8012378 <vApplicationGetTimerTaskMemory+0x30>)
 801235e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012366:	601a      	str	r2, [r3, #0]
}
 8012368:	bf00      	nop
 801236a:	3714      	adds	r7, #20
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr
 8012374:	20004ed4 	.word	0x20004ed4
 8012378:	20004f80 	.word	0x20004f80

0801237c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801237c:	b480      	push	{r7}
 801237e:	b083      	sub	sp, #12
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f103 0208 	add.w	r2, r3, #8
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f04f 32ff 	mov.w	r2, #4294967295
 8012394:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f103 0208 	add.w	r2, r3, #8
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f103 0208 	add.w	r2, r3, #8
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2200      	movs	r2, #0
 80123ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80123b0:	bf00      	nop
 80123b2:	370c      	adds	r7, #12
 80123b4:	46bd      	mov	sp, r7
 80123b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ba:	4770      	bx	lr

080123bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80123bc:	b480      	push	{r7}
 80123be:	b083      	sub	sp, #12
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2200      	movs	r2, #0
 80123c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80123ca:	bf00      	nop
 80123cc:	370c      	adds	r7, #12
 80123ce:	46bd      	mov	sp, r7
 80123d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d4:	4770      	bx	lr

080123d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80123d6:	b480      	push	{r7}
 80123d8:	b085      	sub	sp, #20
 80123da:	af00      	add	r7, sp, #0
 80123dc:	6078      	str	r0, [r7, #4]
 80123de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	68fa      	ldr	r2, [r7, #12]
 80123ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	689a      	ldr	r2, [r3, #8]
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	689b      	ldr	r3, [r3, #8]
 80123f8:	683a      	ldr	r2, [r7, #0]
 80123fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	683a      	ldr	r2, [r7, #0]
 8012400:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	687a      	ldr	r2, [r7, #4]
 8012406:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	1c5a      	adds	r2, r3, #1
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	601a      	str	r2, [r3, #0]
}
 8012412:	bf00      	nop
 8012414:	3714      	adds	r7, #20
 8012416:	46bd      	mov	sp, r7
 8012418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241c:	4770      	bx	lr

0801241e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801241e:	b480      	push	{r7}
 8012420:	b085      	sub	sp, #20
 8012422:	af00      	add	r7, sp, #0
 8012424:	6078      	str	r0, [r7, #4]
 8012426:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012434:	d103      	bne.n	801243e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	691b      	ldr	r3, [r3, #16]
 801243a:	60fb      	str	r3, [r7, #12]
 801243c:	e00c      	b.n	8012458 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	3308      	adds	r3, #8
 8012442:	60fb      	str	r3, [r7, #12]
 8012444:	e002      	b.n	801244c <vListInsert+0x2e>
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	60fb      	str	r3, [r7, #12]
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	68ba      	ldr	r2, [r7, #8]
 8012454:	429a      	cmp	r2, r3
 8012456:	d2f6      	bcs.n	8012446 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	685a      	ldr	r2, [r3, #4]
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	683a      	ldr	r2, [r7, #0]
 8012466:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	68fa      	ldr	r2, [r7, #12]
 801246c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	683a      	ldr	r2, [r7, #0]
 8012472:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	687a      	ldr	r2, [r7, #4]
 8012478:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	1c5a      	adds	r2, r3, #1
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	601a      	str	r2, [r3, #0]
}
 8012484:	bf00      	nop
 8012486:	3714      	adds	r7, #20
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr

08012490 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012490:	b480      	push	{r7}
 8012492:	b085      	sub	sp, #20
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	691b      	ldr	r3, [r3, #16]
 801249c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	685b      	ldr	r3, [r3, #4]
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	6892      	ldr	r2, [r2, #8]
 80124a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	689b      	ldr	r3, [r3, #8]
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	6852      	ldr	r2, [r2, #4]
 80124b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	685b      	ldr	r3, [r3, #4]
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d103      	bne.n	80124c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	689a      	ldr	r2, [r3, #8]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2200      	movs	r2, #0
 80124c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	1e5a      	subs	r2, r3, #1
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	681b      	ldr	r3, [r3, #0]
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3714      	adds	r7, #20
 80124dc:	46bd      	mov	sp, r7
 80124de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e2:	4770      	bx	lr

080124e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b084      	sub	sp, #16
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d10d      	bne.n	8012514 <xQueueGenericReset+0x30>
	__asm volatile
 80124f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124fc:	b672      	cpsid	i
 80124fe:	f383 8811 	msr	BASEPRI, r3
 8012502:	f3bf 8f6f 	isb	sy
 8012506:	f3bf 8f4f 	dsb	sy
 801250a:	b662      	cpsie	i
 801250c:	60bb      	str	r3, [r7, #8]
}
 801250e:	bf00      	nop
 8012510:	bf00      	nop
 8012512:	e7fd      	b.n	8012510 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8012514:	f002 fa7a 	bl	8014a0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012520:	68f9      	ldr	r1, [r7, #12]
 8012522:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012524:	fb01 f303 	mul.w	r3, r1, r3
 8012528:	441a      	add	r2, r3
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2200      	movs	r2, #0
 8012532:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	681a      	ldr	r2, [r3, #0]
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012544:	3b01      	subs	r3, #1
 8012546:	68f9      	ldr	r1, [r7, #12]
 8012548:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801254a:	fb01 f303 	mul.w	r3, r1, r3
 801254e:	441a      	add	r2, r3
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	22ff      	movs	r2, #255	@ 0xff
 8012558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	22ff      	movs	r2, #255	@ 0xff
 8012560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d114      	bne.n	8012594 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	691b      	ldr	r3, [r3, #16]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d01a      	beq.n	80125a8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	3310      	adds	r3, #16
 8012576:	4618      	mov	r0, r3
 8012578:	f001 fb18 	bl	8013bac <xTaskRemoveFromEventList>
 801257c:	4603      	mov	r3, r0
 801257e:	2b00      	cmp	r3, #0
 8012580:	d012      	beq.n	80125a8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012582:	4b0d      	ldr	r3, [pc, #52]	@ (80125b8 <xQueueGenericReset+0xd4>)
 8012584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012588:	601a      	str	r2, [r3, #0]
 801258a:	f3bf 8f4f 	dsb	sy
 801258e:	f3bf 8f6f 	isb	sy
 8012592:	e009      	b.n	80125a8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	3310      	adds	r3, #16
 8012598:	4618      	mov	r0, r3
 801259a:	f7ff feef 	bl	801237c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	3324      	adds	r3, #36	@ 0x24
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7ff feea 	bl	801237c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80125a8:	f002 fa66 	bl	8014a78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80125ac:	2301      	movs	r3, #1
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	3710      	adds	r7, #16
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	e000ed04 	.word	0xe000ed04

080125bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b08e      	sub	sp, #56	@ 0x38
 80125c0:	af02      	add	r7, sp, #8
 80125c2:	60f8      	str	r0, [r7, #12]
 80125c4:	60b9      	str	r1, [r7, #8]
 80125c6:	607a      	str	r2, [r7, #4]
 80125c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d10d      	bne.n	80125ec <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80125d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125d4:	b672      	cpsid	i
 80125d6:	f383 8811 	msr	BASEPRI, r3
 80125da:	f3bf 8f6f 	isb	sy
 80125de:	f3bf 8f4f 	dsb	sy
 80125e2:	b662      	cpsie	i
 80125e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80125e6:	bf00      	nop
 80125e8:	bf00      	nop
 80125ea:	e7fd      	b.n	80125e8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d10d      	bne.n	801260e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80125f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125f6:	b672      	cpsid	i
 80125f8:	f383 8811 	msr	BASEPRI, r3
 80125fc:	f3bf 8f6f 	isb	sy
 8012600:	f3bf 8f4f 	dsb	sy
 8012604:	b662      	cpsie	i
 8012606:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012608:	bf00      	nop
 801260a:	bf00      	nop
 801260c:	e7fd      	b.n	801260a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d002      	beq.n	801261a <xQueueGenericCreateStatic+0x5e>
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d001      	beq.n	801261e <xQueueGenericCreateStatic+0x62>
 801261a:	2301      	movs	r3, #1
 801261c:	e000      	b.n	8012620 <xQueueGenericCreateStatic+0x64>
 801261e:	2300      	movs	r3, #0
 8012620:	2b00      	cmp	r3, #0
 8012622:	d10d      	bne.n	8012640 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8012624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012628:	b672      	cpsid	i
 801262a:	f383 8811 	msr	BASEPRI, r3
 801262e:	f3bf 8f6f 	isb	sy
 8012632:	f3bf 8f4f 	dsb	sy
 8012636:	b662      	cpsie	i
 8012638:	623b      	str	r3, [r7, #32]
}
 801263a:	bf00      	nop
 801263c:	bf00      	nop
 801263e:	e7fd      	b.n	801263c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d102      	bne.n	801264c <xQueueGenericCreateStatic+0x90>
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d101      	bne.n	8012650 <xQueueGenericCreateStatic+0x94>
 801264c:	2301      	movs	r3, #1
 801264e:	e000      	b.n	8012652 <xQueueGenericCreateStatic+0x96>
 8012650:	2300      	movs	r3, #0
 8012652:	2b00      	cmp	r3, #0
 8012654:	d10d      	bne.n	8012672 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8012656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801265a:	b672      	cpsid	i
 801265c:	f383 8811 	msr	BASEPRI, r3
 8012660:	f3bf 8f6f 	isb	sy
 8012664:	f3bf 8f4f 	dsb	sy
 8012668:	b662      	cpsie	i
 801266a:	61fb      	str	r3, [r7, #28]
}
 801266c:	bf00      	nop
 801266e:	bf00      	nop
 8012670:	e7fd      	b.n	801266e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012672:	2350      	movs	r3, #80	@ 0x50
 8012674:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	2b50      	cmp	r3, #80	@ 0x50
 801267a:	d00d      	beq.n	8012698 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 801267c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012680:	b672      	cpsid	i
 8012682:	f383 8811 	msr	BASEPRI, r3
 8012686:	f3bf 8f6f 	isb	sy
 801268a:	f3bf 8f4f 	dsb	sy
 801268e:	b662      	cpsie	i
 8012690:	61bb      	str	r3, [r7, #24]
}
 8012692:	bf00      	nop
 8012694:	bf00      	nop
 8012696:	e7fd      	b.n	8012694 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012698:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801269e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d00d      	beq.n	80126c0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80126a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126a6:	2201      	movs	r2, #1
 80126a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80126ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80126b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126b2:	9300      	str	r3, [sp, #0]
 80126b4:	4613      	mov	r3, r2
 80126b6:	687a      	ldr	r2, [r7, #4]
 80126b8:	68b9      	ldr	r1, [r7, #8]
 80126ba:	68f8      	ldr	r0, [r7, #12]
 80126bc:	f000 f848 	bl	8012750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80126c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3730      	adds	r7, #48	@ 0x30
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}

080126ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80126ca:	b580      	push	{r7, lr}
 80126cc:	b08a      	sub	sp, #40	@ 0x28
 80126ce:	af02      	add	r7, sp, #8
 80126d0:	60f8      	str	r0, [r7, #12]
 80126d2:	60b9      	str	r1, [r7, #8]
 80126d4:	4613      	mov	r3, r2
 80126d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d10d      	bne.n	80126fa <xQueueGenericCreate+0x30>
	__asm volatile
 80126de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126e2:	b672      	cpsid	i
 80126e4:	f383 8811 	msr	BASEPRI, r3
 80126e8:	f3bf 8f6f 	isb	sy
 80126ec:	f3bf 8f4f 	dsb	sy
 80126f0:	b662      	cpsie	i
 80126f2:	613b      	str	r3, [r7, #16]
}
 80126f4:	bf00      	nop
 80126f6:	bf00      	nop
 80126f8:	e7fd      	b.n	80126f6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d102      	bne.n	8012706 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012700:	2300      	movs	r3, #0
 8012702:	61fb      	str	r3, [r7, #28]
 8012704:	e004      	b.n	8012710 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	68ba      	ldr	r2, [r7, #8]
 801270a:	fb02 f303 	mul.w	r3, r2, r3
 801270e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012710:	69fb      	ldr	r3, [r7, #28]
 8012712:	3350      	adds	r3, #80	@ 0x50
 8012714:	4618      	mov	r0, r3
 8012716:	f002 faa7 	bl	8014c68 <pvPortMalloc>
 801271a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801271c:	69bb      	ldr	r3, [r7, #24]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d011      	beq.n	8012746 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012722:	69bb      	ldr	r3, [r7, #24]
 8012724:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	3350      	adds	r3, #80	@ 0x50
 801272a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801272c:	69bb      	ldr	r3, [r7, #24]
 801272e:	2200      	movs	r2, #0
 8012730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012734:	79fa      	ldrb	r2, [r7, #7]
 8012736:	69bb      	ldr	r3, [r7, #24]
 8012738:	9300      	str	r3, [sp, #0]
 801273a:	4613      	mov	r3, r2
 801273c:	697a      	ldr	r2, [r7, #20]
 801273e:	68b9      	ldr	r1, [r7, #8]
 8012740:	68f8      	ldr	r0, [r7, #12]
 8012742:	f000 f805 	bl	8012750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012746:	69bb      	ldr	r3, [r7, #24]
	}
 8012748:	4618      	mov	r0, r3
 801274a:	3720      	adds	r7, #32
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	607a      	str	r2, [r7, #4]
 801275c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d103      	bne.n	801276c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	69ba      	ldr	r2, [r7, #24]
 8012768:	601a      	str	r2, [r3, #0]
 801276a:	e002      	b.n	8012772 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801276c:	69bb      	ldr	r3, [r7, #24]
 801276e:	687a      	ldr	r2, [r7, #4]
 8012770:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012772:	69bb      	ldr	r3, [r7, #24]
 8012774:	68fa      	ldr	r2, [r7, #12]
 8012776:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012778:	69bb      	ldr	r3, [r7, #24]
 801277a:	68ba      	ldr	r2, [r7, #8]
 801277c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801277e:	2101      	movs	r1, #1
 8012780:	69b8      	ldr	r0, [r7, #24]
 8012782:	f7ff feaf 	bl	80124e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012786:	69bb      	ldr	r3, [r7, #24]
 8012788:	78fa      	ldrb	r2, [r7, #3]
 801278a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801278e:	bf00      	nop
 8012790:	3710      	adds	r7, #16
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
	...

08012798 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b08e      	sub	sp, #56	@ 0x38
 801279c:	af00      	add	r7, sp, #0
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	607a      	str	r2, [r7, #4]
 80127a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80127a6:	2300      	movs	r3, #0
 80127a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80127ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d10d      	bne.n	80127d0 <xQueueGenericSend+0x38>
	__asm volatile
 80127b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127b8:	b672      	cpsid	i
 80127ba:	f383 8811 	msr	BASEPRI, r3
 80127be:	f3bf 8f6f 	isb	sy
 80127c2:	f3bf 8f4f 	dsb	sy
 80127c6:	b662      	cpsie	i
 80127c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80127ca:	bf00      	nop
 80127cc:	bf00      	nop
 80127ce:	e7fd      	b.n	80127cc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d103      	bne.n	80127de <xQueueGenericSend+0x46>
 80127d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d101      	bne.n	80127e2 <xQueueGenericSend+0x4a>
 80127de:	2301      	movs	r3, #1
 80127e0:	e000      	b.n	80127e4 <xQueueGenericSend+0x4c>
 80127e2:	2300      	movs	r3, #0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d10d      	bne.n	8012804 <xQueueGenericSend+0x6c>
	__asm volatile
 80127e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127ec:	b672      	cpsid	i
 80127ee:	f383 8811 	msr	BASEPRI, r3
 80127f2:	f3bf 8f6f 	isb	sy
 80127f6:	f3bf 8f4f 	dsb	sy
 80127fa:	b662      	cpsie	i
 80127fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80127fe:	bf00      	nop
 8012800:	bf00      	nop
 8012802:	e7fd      	b.n	8012800 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	2b02      	cmp	r3, #2
 8012808:	d103      	bne.n	8012812 <xQueueGenericSend+0x7a>
 801280a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801280c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801280e:	2b01      	cmp	r3, #1
 8012810:	d101      	bne.n	8012816 <xQueueGenericSend+0x7e>
 8012812:	2301      	movs	r3, #1
 8012814:	e000      	b.n	8012818 <xQueueGenericSend+0x80>
 8012816:	2300      	movs	r3, #0
 8012818:	2b00      	cmp	r3, #0
 801281a:	d10d      	bne.n	8012838 <xQueueGenericSend+0xa0>
	__asm volatile
 801281c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012820:	b672      	cpsid	i
 8012822:	f383 8811 	msr	BASEPRI, r3
 8012826:	f3bf 8f6f 	isb	sy
 801282a:	f3bf 8f4f 	dsb	sy
 801282e:	b662      	cpsie	i
 8012830:	623b      	str	r3, [r7, #32]
}
 8012832:	bf00      	nop
 8012834:	bf00      	nop
 8012836:	e7fd      	b.n	8012834 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012838:	f001 fb88 	bl	8013f4c <xTaskGetSchedulerState>
 801283c:	4603      	mov	r3, r0
 801283e:	2b00      	cmp	r3, #0
 8012840:	d102      	bne.n	8012848 <xQueueGenericSend+0xb0>
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d101      	bne.n	801284c <xQueueGenericSend+0xb4>
 8012848:	2301      	movs	r3, #1
 801284a:	e000      	b.n	801284e <xQueueGenericSend+0xb6>
 801284c:	2300      	movs	r3, #0
 801284e:	2b00      	cmp	r3, #0
 8012850:	d10d      	bne.n	801286e <xQueueGenericSend+0xd6>
	__asm volatile
 8012852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012856:	b672      	cpsid	i
 8012858:	f383 8811 	msr	BASEPRI, r3
 801285c:	f3bf 8f6f 	isb	sy
 8012860:	f3bf 8f4f 	dsb	sy
 8012864:	b662      	cpsie	i
 8012866:	61fb      	str	r3, [r7, #28]
}
 8012868:	bf00      	nop
 801286a:	bf00      	nop
 801286c:	e7fd      	b.n	801286a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801286e:	f002 f8cd 	bl	8014a0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801287a:	429a      	cmp	r2, r3
 801287c:	d302      	bcc.n	8012884 <xQueueGenericSend+0xec>
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	2b02      	cmp	r3, #2
 8012882:	d129      	bne.n	80128d8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012884:	683a      	ldr	r2, [r7, #0]
 8012886:	68b9      	ldr	r1, [r7, #8]
 8012888:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801288a:	f000 fac9 	bl	8012e20 <prvCopyDataToQueue>
 801288e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012894:	2b00      	cmp	r3, #0
 8012896:	d010      	beq.n	80128ba <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801289a:	3324      	adds	r3, #36	@ 0x24
 801289c:	4618      	mov	r0, r3
 801289e:	f001 f985 	bl	8013bac <xTaskRemoveFromEventList>
 80128a2:	4603      	mov	r3, r0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d013      	beq.n	80128d0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80128a8:	4b3f      	ldr	r3, [pc, #252]	@ (80129a8 <xQueueGenericSend+0x210>)
 80128aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128ae:	601a      	str	r2, [r3, #0]
 80128b0:	f3bf 8f4f 	dsb	sy
 80128b4:	f3bf 8f6f 	isb	sy
 80128b8:	e00a      	b.n	80128d0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80128ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d007      	beq.n	80128d0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80128c0:	4b39      	ldr	r3, [pc, #228]	@ (80129a8 <xQueueGenericSend+0x210>)
 80128c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80128c6:	601a      	str	r2, [r3, #0]
 80128c8:	f3bf 8f4f 	dsb	sy
 80128cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80128d0:	f002 f8d2 	bl	8014a78 <vPortExitCritical>
				return pdPASS;
 80128d4:	2301      	movs	r3, #1
 80128d6:	e063      	b.n	80129a0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d103      	bne.n	80128e6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80128de:	f002 f8cb 	bl	8014a78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80128e2:	2300      	movs	r3, #0
 80128e4:	e05c      	b.n	80129a0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80128e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d106      	bne.n	80128fa <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80128ec:	f107 0314 	add.w	r3, r7, #20
 80128f0:	4618      	mov	r0, r3
 80128f2:	f001 f9c1 	bl	8013c78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80128f6:	2301      	movs	r3, #1
 80128f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80128fa:	f002 f8bd 	bl	8014a78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80128fe:	f000 fee7 	bl	80136d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012902:	f002 f883 	bl	8014a0c <vPortEnterCritical>
 8012906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012908:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801290c:	b25b      	sxtb	r3, r3
 801290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012912:	d103      	bne.n	801291c <xQueueGenericSend+0x184>
 8012914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012916:	2200      	movs	r2, #0
 8012918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801291c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801291e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012922:	b25b      	sxtb	r3, r3
 8012924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012928:	d103      	bne.n	8012932 <xQueueGenericSend+0x19a>
 801292a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801292c:	2200      	movs	r2, #0
 801292e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012932:	f002 f8a1 	bl	8014a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012936:	1d3a      	adds	r2, r7, #4
 8012938:	f107 0314 	add.w	r3, r7, #20
 801293c:	4611      	mov	r1, r2
 801293e:	4618      	mov	r0, r3
 8012940:	f001 f9b0 	bl	8013ca4 <xTaskCheckForTimeOut>
 8012944:	4603      	mov	r3, r0
 8012946:	2b00      	cmp	r3, #0
 8012948:	d124      	bne.n	8012994 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801294a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801294c:	f000 fb60 	bl	8013010 <prvIsQueueFull>
 8012950:	4603      	mov	r3, r0
 8012952:	2b00      	cmp	r3, #0
 8012954:	d018      	beq.n	8012988 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012958:	3310      	adds	r3, #16
 801295a:	687a      	ldr	r2, [r7, #4]
 801295c:	4611      	mov	r1, r2
 801295e:	4618      	mov	r0, r3
 8012960:	f001 f8ce 	bl	8013b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012966:	f000 faeb 	bl	8012f40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801296a:	f000 febf 	bl	80136ec <xTaskResumeAll>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	f47f af7c 	bne.w	801286e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8012976:	4b0c      	ldr	r3, [pc, #48]	@ (80129a8 <xQueueGenericSend+0x210>)
 8012978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801297c:	601a      	str	r2, [r3, #0]
 801297e:	f3bf 8f4f 	dsb	sy
 8012982:	f3bf 8f6f 	isb	sy
 8012986:	e772      	b.n	801286e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801298a:	f000 fad9 	bl	8012f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801298e:	f000 fead 	bl	80136ec <xTaskResumeAll>
 8012992:	e76c      	b.n	801286e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012996:	f000 fad3 	bl	8012f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801299a:	f000 fea7 	bl	80136ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801299e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3738      	adds	r7, #56	@ 0x38
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}
 80129a8:	e000ed04 	.word	0xe000ed04

080129ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b08e      	sub	sp, #56	@ 0x38
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	60f8      	str	r0, [r7, #12]
 80129b4:	60b9      	str	r1, [r7, #8]
 80129b6:	607a      	str	r2, [r7, #4]
 80129b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80129be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d10d      	bne.n	80129e0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80129c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129c8:	b672      	cpsid	i
 80129ca:	f383 8811 	msr	BASEPRI, r3
 80129ce:	f3bf 8f6f 	isb	sy
 80129d2:	f3bf 8f4f 	dsb	sy
 80129d6:	b662      	cpsie	i
 80129d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80129da:	bf00      	nop
 80129dc:	bf00      	nop
 80129de:	e7fd      	b.n	80129dc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d103      	bne.n	80129ee <xQueueGenericSendFromISR+0x42>
 80129e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d101      	bne.n	80129f2 <xQueueGenericSendFromISR+0x46>
 80129ee:	2301      	movs	r3, #1
 80129f0:	e000      	b.n	80129f4 <xQueueGenericSendFromISR+0x48>
 80129f2:	2300      	movs	r3, #0
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d10d      	bne.n	8012a14 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80129f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129fc:	b672      	cpsid	i
 80129fe:	f383 8811 	msr	BASEPRI, r3
 8012a02:	f3bf 8f6f 	isb	sy
 8012a06:	f3bf 8f4f 	dsb	sy
 8012a0a:	b662      	cpsie	i
 8012a0c:	623b      	str	r3, [r7, #32]
}
 8012a0e:	bf00      	nop
 8012a10:	bf00      	nop
 8012a12:	e7fd      	b.n	8012a10 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2b02      	cmp	r3, #2
 8012a18:	d103      	bne.n	8012a22 <xQueueGenericSendFromISR+0x76>
 8012a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d101      	bne.n	8012a26 <xQueueGenericSendFromISR+0x7a>
 8012a22:	2301      	movs	r3, #1
 8012a24:	e000      	b.n	8012a28 <xQueueGenericSendFromISR+0x7c>
 8012a26:	2300      	movs	r3, #0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d10d      	bne.n	8012a48 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8012a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a30:	b672      	cpsid	i
 8012a32:	f383 8811 	msr	BASEPRI, r3
 8012a36:	f3bf 8f6f 	isb	sy
 8012a3a:	f3bf 8f4f 	dsb	sy
 8012a3e:	b662      	cpsie	i
 8012a40:	61fb      	str	r3, [r7, #28]
}
 8012a42:	bf00      	nop
 8012a44:	bf00      	nop
 8012a46:	e7fd      	b.n	8012a44 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a48:	f002 f8c8 	bl	8014bdc <vPortValidateInterruptPriority>
	__asm volatile
 8012a4c:	f3ef 8211 	mrs	r2, BASEPRI
 8012a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a54:	b672      	cpsid	i
 8012a56:	f383 8811 	msr	BASEPRI, r3
 8012a5a:	f3bf 8f6f 	isb	sy
 8012a5e:	f3bf 8f4f 	dsb	sy
 8012a62:	b662      	cpsie	i
 8012a64:	61ba      	str	r2, [r7, #24]
 8012a66:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012a68:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d302      	bcc.n	8012a7e <xQueueGenericSendFromISR+0xd2>
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	2b02      	cmp	r3, #2
 8012a7c:	d12c      	bne.n	8012ad8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012a88:	683a      	ldr	r2, [r7, #0]
 8012a8a:	68b9      	ldr	r1, [r7, #8]
 8012a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012a8e:	f000 f9c7 	bl	8012e20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012a92:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a9a:	d112      	bne.n	8012ac2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d016      	beq.n	8012ad2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aa6:	3324      	adds	r3, #36	@ 0x24
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f001 f87f 	bl	8013bac <xTaskRemoveFromEventList>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00e      	beq.n	8012ad2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d00b      	beq.n	8012ad2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2201      	movs	r2, #1
 8012abe:	601a      	str	r2, [r3, #0]
 8012ac0:	e007      	b.n	8012ad2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	b25a      	sxtb	r2, r3
 8012acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8012ad6:	e001      	b.n	8012adc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8012adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ade:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	f383 8811 	msr	BASEPRI, r3
}
 8012ae6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	3738      	adds	r7, #56	@ 0x38
 8012aee:	46bd      	mov	sp, r7
 8012af0:	bd80      	pop	{r7, pc}
	...

08012af4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b08c      	sub	sp, #48	@ 0x30
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012b00:	2300      	movs	r3, #0
 8012b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d10d      	bne.n	8012b2a <xQueueReceive+0x36>
	__asm volatile
 8012b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b12:	b672      	cpsid	i
 8012b14:	f383 8811 	msr	BASEPRI, r3
 8012b18:	f3bf 8f6f 	isb	sy
 8012b1c:	f3bf 8f4f 	dsb	sy
 8012b20:	b662      	cpsie	i
 8012b22:	623b      	str	r3, [r7, #32]
}
 8012b24:	bf00      	nop
 8012b26:	bf00      	nop
 8012b28:	e7fd      	b.n	8012b26 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d103      	bne.n	8012b38 <xQueueReceive+0x44>
 8012b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d101      	bne.n	8012b3c <xQueueReceive+0x48>
 8012b38:	2301      	movs	r3, #1
 8012b3a:	e000      	b.n	8012b3e <xQueueReceive+0x4a>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d10d      	bne.n	8012b5e <xQueueReceive+0x6a>
	__asm volatile
 8012b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b46:	b672      	cpsid	i
 8012b48:	f383 8811 	msr	BASEPRI, r3
 8012b4c:	f3bf 8f6f 	isb	sy
 8012b50:	f3bf 8f4f 	dsb	sy
 8012b54:	b662      	cpsie	i
 8012b56:	61fb      	str	r3, [r7, #28]
}
 8012b58:	bf00      	nop
 8012b5a:	bf00      	nop
 8012b5c:	e7fd      	b.n	8012b5a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b5e:	f001 f9f5 	bl	8013f4c <xTaskGetSchedulerState>
 8012b62:	4603      	mov	r3, r0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d102      	bne.n	8012b6e <xQueueReceive+0x7a>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d101      	bne.n	8012b72 <xQueueReceive+0x7e>
 8012b6e:	2301      	movs	r3, #1
 8012b70:	e000      	b.n	8012b74 <xQueueReceive+0x80>
 8012b72:	2300      	movs	r3, #0
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d10d      	bne.n	8012b94 <xQueueReceive+0xa0>
	__asm volatile
 8012b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b7c:	b672      	cpsid	i
 8012b7e:	f383 8811 	msr	BASEPRI, r3
 8012b82:	f3bf 8f6f 	isb	sy
 8012b86:	f3bf 8f4f 	dsb	sy
 8012b8a:	b662      	cpsie	i
 8012b8c:	61bb      	str	r3, [r7, #24]
}
 8012b8e:	bf00      	nop
 8012b90:	bf00      	nop
 8012b92:	e7fd      	b.n	8012b90 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b94:	f001 ff3a 	bl	8014a0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b9c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d01f      	beq.n	8012be4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012ba4:	68b9      	ldr	r1, [r7, #8]
 8012ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012ba8:	f000 f9a4 	bl	8012ef4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bae:	1e5a      	subs	r2, r3, #1
 8012bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bb2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bb6:	691b      	ldr	r3, [r3, #16]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d00f      	beq.n	8012bdc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bbe:	3310      	adds	r3, #16
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f000 fff3 	bl	8013bac <xTaskRemoveFromEventList>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d007      	beq.n	8012bdc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012bcc:	4b3c      	ldr	r3, [pc, #240]	@ (8012cc0 <xQueueReceive+0x1cc>)
 8012bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012bd2:	601a      	str	r2, [r3, #0]
 8012bd4:	f3bf 8f4f 	dsb	sy
 8012bd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012bdc:	f001 ff4c 	bl	8014a78 <vPortExitCritical>
				return pdPASS;
 8012be0:	2301      	movs	r3, #1
 8012be2:	e069      	b.n	8012cb8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d103      	bne.n	8012bf2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012bea:	f001 ff45 	bl	8014a78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	e062      	b.n	8012cb8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d106      	bne.n	8012c06 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012bf8:	f107 0310 	add.w	r3, r7, #16
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f001 f83b 	bl	8013c78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c02:	2301      	movs	r3, #1
 8012c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c06:	f001 ff37 	bl	8014a78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012c0a:	f000 fd61 	bl	80136d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c0e:	f001 fefd 	bl	8014a0c <vPortEnterCritical>
 8012c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012c18:	b25b      	sxtb	r3, r3
 8012c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c1e:	d103      	bne.n	8012c28 <xQueueReceive+0x134>
 8012c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c22:	2200      	movs	r2, #0
 8012c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012c2e:	b25b      	sxtb	r3, r3
 8012c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c34:	d103      	bne.n	8012c3e <xQueueReceive+0x14a>
 8012c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c38:	2200      	movs	r2, #0
 8012c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012c3e:	f001 ff1b 	bl	8014a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c42:	1d3a      	adds	r2, r7, #4
 8012c44:	f107 0310 	add.w	r3, r7, #16
 8012c48:	4611      	mov	r1, r2
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f001 f82a 	bl	8013ca4 <xTaskCheckForTimeOut>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d123      	bne.n	8012c9e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c58:	f000 f9c4 	bl	8012fe4 <prvIsQueueEmpty>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d017      	beq.n	8012c92 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c64:	3324      	adds	r3, #36	@ 0x24
 8012c66:	687a      	ldr	r2, [r7, #4]
 8012c68:	4611      	mov	r1, r2
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f000 ff48 	bl	8013b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012c70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c72:	f000 f965 	bl	8012f40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012c76:	f000 fd39 	bl	80136ec <xTaskResumeAll>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d189      	bne.n	8012b94 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8012c80:	4b0f      	ldr	r3, [pc, #60]	@ (8012cc0 <xQueueReceive+0x1cc>)
 8012c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c86:	601a      	str	r2, [r3, #0]
 8012c88:	f3bf 8f4f 	dsb	sy
 8012c8c:	f3bf 8f6f 	isb	sy
 8012c90:	e780      	b.n	8012b94 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c94:	f000 f954 	bl	8012f40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c98:	f000 fd28 	bl	80136ec <xTaskResumeAll>
 8012c9c:	e77a      	b.n	8012b94 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012c9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012ca0:	f000 f94e 	bl	8012f40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012ca4:	f000 fd22 	bl	80136ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012ca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012caa:	f000 f99b 	bl	8012fe4 <prvIsQueueEmpty>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f43f af6f 	beq.w	8012b94 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012cb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	3730      	adds	r7, #48	@ 0x30
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}
 8012cc0:	e000ed04 	.word	0xe000ed04

08012cc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b08e      	sub	sp, #56	@ 0x38
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d10d      	bne.n	8012cf6 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8012cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cde:	b672      	cpsid	i
 8012ce0:	f383 8811 	msr	BASEPRI, r3
 8012ce4:	f3bf 8f6f 	isb	sy
 8012ce8:	f3bf 8f4f 	dsb	sy
 8012cec:	b662      	cpsie	i
 8012cee:	623b      	str	r3, [r7, #32]
}
 8012cf0:	bf00      	nop
 8012cf2:	bf00      	nop
 8012cf4:	e7fd      	b.n	8012cf2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d103      	bne.n	8012d04 <xQueueReceiveFromISR+0x40>
 8012cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d101      	bne.n	8012d08 <xQueueReceiveFromISR+0x44>
 8012d04:	2301      	movs	r3, #1
 8012d06:	e000      	b.n	8012d0a <xQueueReceiveFromISR+0x46>
 8012d08:	2300      	movs	r3, #0
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d10d      	bne.n	8012d2a <xQueueReceiveFromISR+0x66>
	__asm volatile
 8012d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d12:	b672      	cpsid	i
 8012d14:	f383 8811 	msr	BASEPRI, r3
 8012d18:	f3bf 8f6f 	isb	sy
 8012d1c:	f3bf 8f4f 	dsb	sy
 8012d20:	b662      	cpsie	i
 8012d22:	61fb      	str	r3, [r7, #28]
}
 8012d24:	bf00      	nop
 8012d26:	bf00      	nop
 8012d28:	e7fd      	b.n	8012d26 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d2a:	f001 ff57 	bl	8014bdc <vPortValidateInterruptPriority>
	__asm volatile
 8012d2e:	f3ef 8211 	mrs	r2, BASEPRI
 8012d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d36:	b672      	cpsid	i
 8012d38:	f383 8811 	msr	BASEPRI, r3
 8012d3c:	f3bf 8f6f 	isb	sy
 8012d40:	f3bf 8f4f 	dsb	sy
 8012d44:	b662      	cpsie	i
 8012d46:	61ba      	str	r2, [r7, #24]
 8012d48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012d4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d52:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d02f      	beq.n	8012dba <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012d64:	68b9      	ldr	r1, [r7, #8]
 8012d66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012d68:	f000 f8c4 	bl	8012ef4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d6e:	1e5a      	subs	r2, r3, #1
 8012d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d72:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012d74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d7c:	d112      	bne.n	8012da4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d80:	691b      	ldr	r3, [r3, #16]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d016      	beq.n	8012db4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d88:	3310      	adds	r3, #16
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f000 ff0e 	bl	8013bac <xTaskRemoveFromEventList>
 8012d90:	4603      	mov	r3, r0
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d00e      	beq.n	8012db4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d00b      	beq.n	8012db4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2201      	movs	r2, #1
 8012da0:	601a      	str	r2, [r3, #0]
 8012da2:	e007      	b.n	8012db4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012da8:	3301      	adds	r3, #1
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	b25a      	sxtb	r2, r3
 8012dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8012db4:	2301      	movs	r3, #1
 8012db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8012db8:	e001      	b.n	8012dbe <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8012dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	f383 8811 	msr	BASEPRI, r3
}
 8012dc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3738      	adds	r7, #56	@ 0x38
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}

08012dd4 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b086      	sub	sp, #24
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012de0:	697b      	ldr	r3, [r7, #20]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d10d      	bne.n	8012e02 <uxQueueSpacesAvailable+0x2e>
	__asm volatile
 8012de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dea:	b672      	cpsid	i
 8012dec:	f383 8811 	msr	BASEPRI, r3
 8012df0:	f3bf 8f6f 	isb	sy
 8012df4:	f3bf 8f4f 	dsb	sy
 8012df8:	b662      	cpsie	i
 8012dfa:	60fb      	str	r3, [r7, #12]
}
 8012dfc:	bf00      	nop
 8012dfe:	bf00      	nop
 8012e00:	e7fd      	b.n	8012dfe <uxQueueSpacesAvailable+0x2a>

	taskENTER_CRITICAL();
 8012e02:	f001 fe03 	bl	8014a0c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e0e:	1ad3      	subs	r3, r2, r3
 8012e10:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8012e12:	f001 fe31 	bl	8014a78 <vPortExitCritical>

	return uxReturn;
 8012e16:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3718      	adds	r7, #24
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}

08012e20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b086      	sub	sp, #24
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	60f8      	str	r0, [r7, #12]
 8012e28:	60b9      	str	r1, [r7, #8]
 8012e2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d10d      	bne.n	8012e5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d14d      	bne.n	8012ee2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	689b      	ldr	r3, [r3, #8]
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f001 f89c 	bl	8013f88 <xTaskPriorityDisinherit>
 8012e50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	2200      	movs	r2, #0
 8012e56:	609a      	str	r2, [r3, #8]
 8012e58:	e043      	b.n	8012ee2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d119      	bne.n	8012e94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	6858      	ldr	r0, [r3, #4]
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e68:	461a      	mov	r2, r3
 8012e6a:	68b9      	ldr	r1, [r7, #8]
 8012e6c:	f002 ff93 	bl	8015d96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	685a      	ldr	r2, [r3, #4]
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e78:	441a      	add	r2, r3
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	685a      	ldr	r2, [r3, #4]
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	689b      	ldr	r3, [r3, #8]
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d32b      	bcc.n	8012ee2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	605a      	str	r2, [r3, #4]
 8012e92:	e026      	b.n	8012ee2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	68d8      	ldr	r0, [r3, #12]
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	68b9      	ldr	r1, [r7, #8]
 8012ea0:	f002 ff79 	bl	8015d96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	68da      	ldr	r2, [r3, #12]
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012eac:	425b      	negs	r3, r3
 8012eae:	441a      	add	r2, r3
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	68da      	ldr	r2, [r3, #12]
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d207      	bcs.n	8012ed0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	689a      	ldr	r2, [r3, #8]
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ec8:	425b      	negs	r3, r3
 8012eca:	441a      	add	r2, r3
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2b02      	cmp	r3, #2
 8012ed4:	d105      	bne.n	8012ee2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d002      	beq.n	8012ee2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	3b01      	subs	r3, #1
 8012ee0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	1c5a      	adds	r2, r3, #1
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8012eea:	697b      	ldr	r3, [r7, #20]
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3718      	adds	r7, #24
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}

08012ef4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
 8012efc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d018      	beq.n	8012f38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	68da      	ldr	r2, [r3, #12]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f0e:	441a      	add	r2, r3
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	68da      	ldr	r2, [r3, #12]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	689b      	ldr	r3, [r3, #8]
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d303      	bcc.n	8012f28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681a      	ldr	r2, [r3, #0]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	68d9      	ldr	r1, [r3, #12]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f30:	461a      	mov	r2, r3
 8012f32:	6838      	ldr	r0, [r7, #0]
 8012f34:	f002 ff2f 	bl	8015d96 <memcpy>
	}
}
 8012f38:	bf00      	nop
 8012f3a:	3708      	adds	r7, #8
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b084      	sub	sp, #16
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012f48:	f001 fd60 	bl	8014a0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012f52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012f54:	e011      	b.n	8012f7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d012      	beq.n	8012f84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	3324      	adds	r3, #36	@ 0x24
 8012f62:	4618      	mov	r0, r3
 8012f64:	f000 fe22 	bl	8013bac <xTaskRemoveFromEventList>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d001      	beq.n	8012f72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012f6e:	f000 ff01 	bl	8013d74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012f72:	7bfb      	ldrb	r3, [r7, #15]
 8012f74:	3b01      	subs	r3, #1
 8012f76:	b2db      	uxtb	r3, r3
 8012f78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	dce9      	bgt.n	8012f56 <prvUnlockQueue+0x16>
 8012f82:	e000      	b.n	8012f86 <prvUnlockQueue+0x46>
					break;
 8012f84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	22ff      	movs	r2, #255	@ 0xff
 8012f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8012f8e:	f001 fd73 	bl	8014a78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012f92:	f001 fd3b 	bl	8014a0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012f9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f9e:	e011      	b.n	8012fc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	691b      	ldr	r3, [r3, #16]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d012      	beq.n	8012fce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	3310      	adds	r3, #16
 8012fac:	4618      	mov	r0, r3
 8012fae:	f000 fdfd 	bl	8013bac <xTaskRemoveFromEventList>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d001      	beq.n	8012fbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012fb8:	f000 fedc 	bl	8013d74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012fbc:	7bbb      	ldrb	r3, [r7, #14]
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	b2db      	uxtb	r3, r3
 8012fc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	dce9      	bgt.n	8012fa0 <prvUnlockQueue+0x60>
 8012fcc:	e000      	b.n	8012fd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012fce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	22ff      	movs	r2, #255	@ 0xff
 8012fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8012fd8:	f001 fd4e 	bl	8014a78 <vPortExitCritical>
}
 8012fdc:	bf00      	nop
 8012fde:	3710      	adds	r7, #16
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012fec:	f001 fd0e 	bl	8014a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d102      	bne.n	8012ffe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012ff8:	2301      	movs	r3, #1
 8012ffa:	60fb      	str	r3, [r7, #12]
 8012ffc:	e001      	b.n	8013002 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012ffe:	2300      	movs	r3, #0
 8013000:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013002:	f001 fd39 	bl	8014a78 <vPortExitCritical>

	return xReturn;
 8013006:	68fb      	ldr	r3, [r7, #12]
}
 8013008:	4618      	mov	r0, r3
 801300a:	3710      	adds	r7, #16
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013018:	f001 fcf8 	bl	8014a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013024:	429a      	cmp	r2, r3
 8013026:	d102      	bne.n	801302e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013028:	2301      	movs	r3, #1
 801302a:	60fb      	str	r3, [r7, #12]
 801302c:	e001      	b.n	8013032 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801302e:	2300      	movs	r3, #0
 8013030:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013032:	f001 fd21 	bl	8014a78 <vPortExitCritical>

	return xReturn;
 8013036:	68fb      	ldr	r3, [r7, #12]
}
 8013038:	4618      	mov	r0, r3
 801303a:	3710      	adds	r7, #16
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}

08013040 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013040:	b480      	push	{r7}
 8013042:	b085      	sub	sp, #20
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
 8013048:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801304a:	2300      	movs	r3, #0
 801304c:	60fb      	str	r3, [r7, #12]
 801304e:	e014      	b.n	801307a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013050:	4a0f      	ldr	r2, [pc, #60]	@ (8013090 <vQueueAddToRegistry+0x50>)
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d10b      	bne.n	8013074 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801305c:	490c      	ldr	r1, [pc, #48]	@ (8013090 <vQueueAddToRegistry+0x50>)
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	683a      	ldr	r2, [r7, #0]
 8013062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013066:	4a0a      	ldr	r2, [pc, #40]	@ (8013090 <vQueueAddToRegistry+0x50>)
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	00db      	lsls	r3, r3, #3
 801306c:	4413      	add	r3, r2
 801306e:	687a      	ldr	r2, [r7, #4]
 8013070:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013072:	e006      	b.n	8013082 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	3301      	adds	r3, #1
 8013078:	60fb      	str	r3, [r7, #12]
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2b07      	cmp	r3, #7
 801307e:	d9e7      	bls.n	8013050 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013080:	bf00      	nop
 8013082:	bf00      	nop
 8013084:	3714      	adds	r7, #20
 8013086:	46bd      	mov	sp, r7
 8013088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308c:	4770      	bx	lr
 801308e:	bf00      	nop
 8013090:	20005380 	.word	0x20005380

08013094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013094:	b580      	push	{r7, lr}
 8013096:	b086      	sub	sp, #24
 8013098:	af00      	add	r7, sp, #0
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	60b9      	str	r1, [r7, #8]
 801309e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80130a4:	f001 fcb2 	bl	8014a0c <vPortEnterCritical>
 80130a8:	697b      	ldr	r3, [r7, #20]
 80130aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80130ae:	b25b      	sxtb	r3, r3
 80130b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130b4:	d103      	bne.n	80130be <vQueueWaitForMessageRestricted+0x2a>
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	2200      	movs	r2, #0
 80130ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80130c4:	b25b      	sxtb	r3, r3
 80130c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ca:	d103      	bne.n	80130d4 <vQueueWaitForMessageRestricted+0x40>
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	2200      	movs	r2, #0
 80130d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80130d4:	f001 fcd0 	bl	8014a78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d106      	bne.n	80130ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	3324      	adds	r3, #36	@ 0x24
 80130e4:	687a      	ldr	r2, [r7, #4]
 80130e6:	68b9      	ldr	r1, [r7, #8]
 80130e8:	4618      	mov	r0, r3
 80130ea:	f000 fd31 	bl	8013b50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80130ee:	6978      	ldr	r0, [r7, #20]
 80130f0:	f7ff ff26 	bl	8012f40 <prvUnlockQueue>
	}
 80130f4:	bf00      	nop
 80130f6:	3718      	adds	r7, #24
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}

080130fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b08e      	sub	sp, #56	@ 0x38
 8013100:	af04      	add	r7, sp, #16
 8013102:	60f8      	str	r0, [r7, #12]
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	607a      	str	r2, [r7, #4]
 8013108:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801310a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801310c:	2b00      	cmp	r3, #0
 801310e:	d10d      	bne.n	801312c <xTaskCreateStatic+0x30>
	__asm volatile
 8013110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013114:	b672      	cpsid	i
 8013116:	f383 8811 	msr	BASEPRI, r3
 801311a:	f3bf 8f6f 	isb	sy
 801311e:	f3bf 8f4f 	dsb	sy
 8013122:	b662      	cpsie	i
 8013124:	623b      	str	r3, [r7, #32]
}
 8013126:	bf00      	nop
 8013128:	bf00      	nop
 801312a:	e7fd      	b.n	8013128 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801312c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801312e:	2b00      	cmp	r3, #0
 8013130:	d10d      	bne.n	801314e <xTaskCreateStatic+0x52>
	__asm volatile
 8013132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013136:	b672      	cpsid	i
 8013138:	f383 8811 	msr	BASEPRI, r3
 801313c:	f3bf 8f6f 	isb	sy
 8013140:	f3bf 8f4f 	dsb	sy
 8013144:	b662      	cpsie	i
 8013146:	61fb      	str	r3, [r7, #28]
}
 8013148:	bf00      	nop
 801314a:	bf00      	nop
 801314c:	e7fd      	b.n	801314a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801314e:	23ac      	movs	r3, #172	@ 0xac
 8013150:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	2bac      	cmp	r3, #172	@ 0xac
 8013156:	d00d      	beq.n	8013174 <xTaskCreateStatic+0x78>
	__asm volatile
 8013158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801315c:	b672      	cpsid	i
 801315e:	f383 8811 	msr	BASEPRI, r3
 8013162:	f3bf 8f6f 	isb	sy
 8013166:	f3bf 8f4f 	dsb	sy
 801316a:	b662      	cpsie	i
 801316c:	61bb      	str	r3, [r7, #24]
}
 801316e:	bf00      	nop
 8013170:	bf00      	nop
 8013172:	e7fd      	b.n	8013170 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013174:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013178:	2b00      	cmp	r3, #0
 801317a:	d01e      	beq.n	80131ba <xTaskCreateStatic+0xbe>
 801317c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801317e:	2b00      	cmp	r3, #0
 8013180:	d01b      	beq.n	80131ba <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013184:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013188:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801318a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801318e:	2202      	movs	r2, #2
 8013190:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013194:	2300      	movs	r3, #0
 8013196:	9303      	str	r3, [sp, #12]
 8013198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801319a:	9302      	str	r3, [sp, #8]
 801319c:	f107 0314 	add.w	r3, r7, #20
 80131a0:	9301      	str	r3, [sp, #4]
 80131a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131a4:	9300      	str	r3, [sp, #0]
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	687a      	ldr	r2, [r7, #4]
 80131aa:	68b9      	ldr	r1, [r7, #8]
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f000 f851 	bl	8013254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80131b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80131b4:	f000 f8fa 	bl	80133ac <prvAddNewTaskToReadyList>
 80131b8:	e001      	b.n	80131be <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80131ba:	2300      	movs	r3, #0
 80131bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80131be:	697b      	ldr	r3, [r7, #20]
	}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3728      	adds	r7, #40	@ 0x28
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}

080131c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b08c      	sub	sp, #48	@ 0x30
 80131cc:	af04      	add	r7, sp, #16
 80131ce:	60f8      	str	r0, [r7, #12]
 80131d0:	60b9      	str	r1, [r7, #8]
 80131d2:	603b      	str	r3, [r7, #0]
 80131d4:	4613      	mov	r3, r2
 80131d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80131d8:	88fb      	ldrh	r3, [r7, #6]
 80131da:	009b      	lsls	r3, r3, #2
 80131dc:	4618      	mov	r0, r3
 80131de:	f001 fd43 	bl	8014c68 <pvPortMalloc>
 80131e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d00e      	beq.n	8013208 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80131ea:	20ac      	movs	r0, #172	@ 0xac
 80131ec:	f001 fd3c 	bl	8014c68 <pvPortMalloc>
 80131f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80131f2:	69fb      	ldr	r3, [r7, #28]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d003      	beq.n	8013200 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80131f8:	69fb      	ldr	r3, [r7, #28]
 80131fa:	697a      	ldr	r2, [r7, #20]
 80131fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80131fe:	e005      	b.n	801320c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013200:	6978      	ldr	r0, [r7, #20]
 8013202:	f001 fe03 	bl	8014e0c <vPortFree>
 8013206:	e001      	b.n	801320c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013208:	2300      	movs	r3, #0
 801320a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d017      	beq.n	8013242 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013212:	69fb      	ldr	r3, [r7, #28]
 8013214:	2200      	movs	r2, #0
 8013216:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801321a:	88fa      	ldrh	r2, [r7, #6]
 801321c:	2300      	movs	r3, #0
 801321e:	9303      	str	r3, [sp, #12]
 8013220:	69fb      	ldr	r3, [r7, #28]
 8013222:	9302      	str	r3, [sp, #8]
 8013224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013226:	9301      	str	r3, [sp, #4]
 8013228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801322a:	9300      	str	r3, [sp, #0]
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	68b9      	ldr	r1, [r7, #8]
 8013230:	68f8      	ldr	r0, [r7, #12]
 8013232:	f000 f80f 	bl	8013254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013236:	69f8      	ldr	r0, [r7, #28]
 8013238:	f000 f8b8 	bl	80133ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801323c:	2301      	movs	r3, #1
 801323e:	61bb      	str	r3, [r7, #24]
 8013240:	e002      	b.n	8013248 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013242:	f04f 33ff 	mov.w	r3, #4294967295
 8013246:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013248:	69bb      	ldr	r3, [r7, #24]
	}
 801324a:	4618      	mov	r0, r3
 801324c:	3720      	adds	r7, #32
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
	...

08013254 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b088      	sub	sp, #32
 8013258:	af00      	add	r7, sp, #0
 801325a:	60f8      	str	r0, [r7, #12]
 801325c:	60b9      	str	r1, [r7, #8]
 801325e:	607a      	str	r2, [r7, #4]
 8013260:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013264:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	009b      	lsls	r3, r3, #2
 801326a:	461a      	mov	r2, r3
 801326c:	21a5      	movs	r1, #165	@ 0xa5
 801326e:	f002 fca9 	bl	8015bc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013274:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013276:	6879      	ldr	r1, [r7, #4]
 8013278:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801327c:	440b      	add	r3, r1
 801327e:	009b      	lsls	r3, r3, #2
 8013280:	4413      	add	r3, r2
 8013282:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	f023 0307 	bic.w	r3, r3, #7
 801328a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801328c:	69bb      	ldr	r3, [r7, #24]
 801328e:	f003 0307 	and.w	r3, r3, #7
 8013292:	2b00      	cmp	r3, #0
 8013294:	d00d      	beq.n	80132b2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8013296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801329a:	b672      	cpsid	i
 801329c:	f383 8811 	msr	BASEPRI, r3
 80132a0:	f3bf 8f6f 	isb	sy
 80132a4:	f3bf 8f4f 	dsb	sy
 80132a8:	b662      	cpsie	i
 80132aa:	617b      	str	r3, [r7, #20]
}
 80132ac:	bf00      	nop
 80132ae:	bf00      	nop
 80132b0:	e7fd      	b.n	80132ae <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d01f      	beq.n	80132f8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80132b8:	2300      	movs	r3, #0
 80132ba:	61fb      	str	r3, [r7, #28]
 80132bc:	e012      	b.n	80132e4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80132be:	68ba      	ldr	r2, [r7, #8]
 80132c0:	69fb      	ldr	r3, [r7, #28]
 80132c2:	4413      	add	r3, r2
 80132c4:	7819      	ldrb	r1, [r3, #0]
 80132c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80132c8:	69fb      	ldr	r3, [r7, #28]
 80132ca:	4413      	add	r3, r2
 80132cc:	3334      	adds	r3, #52	@ 0x34
 80132ce:	460a      	mov	r2, r1
 80132d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80132d2:	68ba      	ldr	r2, [r7, #8]
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	4413      	add	r3, r2
 80132d8:	781b      	ldrb	r3, [r3, #0]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d006      	beq.n	80132ec <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	3301      	adds	r3, #1
 80132e2:	61fb      	str	r3, [r7, #28]
 80132e4:	69fb      	ldr	r3, [r7, #28]
 80132e6:	2b0f      	cmp	r3, #15
 80132e8:	d9e9      	bls.n	80132be <prvInitialiseNewTask+0x6a>
 80132ea:	e000      	b.n	80132ee <prvInitialiseNewTask+0x9a>
			{
				break;
 80132ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80132ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f0:	2200      	movs	r2, #0
 80132f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80132f6:	e003      	b.n	8013300 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80132f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132fa:	2200      	movs	r2, #0
 80132fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013302:	2b37      	cmp	r3, #55	@ 0x37
 8013304:	d901      	bls.n	801330a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013306:	2337      	movs	r3, #55	@ 0x37
 8013308:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801330a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801330c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801330e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013312:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013314:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013318:	2200      	movs	r2, #0
 801331a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801331c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801331e:	3304      	adds	r3, #4
 8013320:	4618      	mov	r0, r3
 8013322:	f7ff f84b 	bl	80123bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013328:	3318      	adds	r3, #24
 801332a:	4618      	mov	r0, r3
 801332c:	f7ff f846 	bl	80123bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013334:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013338:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801333c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801333e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013344:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8013346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013348:	2200      	movs	r2, #0
 801334a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801334e:	2200      	movs	r2, #0
 8013350:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013356:	2200      	movs	r2, #0
 8013358:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801335c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801335e:	3358      	adds	r3, #88	@ 0x58
 8013360:	224c      	movs	r2, #76	@ 0x4c
 8013362:	2100      	movs	r1, #0
 8013364:	4618      	mov	r0, r3
 8013366:	f002 fc2d 	bl	8015bc4 <memset>
 801336a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801336c:	4a0c      	ldr	r2, [pc, #48]	@ (80133a0 <prvInitialiseNewTask+0x14c>)
 801336e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013372:	4a0c      	ldr	r2, [pc, #48]	@ (80133a4 <prvInitialiseNewTask+0x150>)
 8013374:	661a      	str	r2, [r3, #96]	@ 0x60
 8013376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013378:	4a0b      	ldr	r2, [pc, #44]	@ (80133a8 <prvInitialiseNewTask+0x154>)
 801337a:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801337c:	683a      	ldr	r2, [r7, #0]
 801337e:	68f9      	ldr	r1, [r7, #12]
 8013380:	69b8      	ldr	r0, [r7, #24]
 8013382:	f001 fa31 	bl	80147e8 <pxPortInitialiseStack>
 8013386:	4602      	mov	r2, r0
 8013388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801338a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801338c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801338e:	2b00      	cmp	r3, #0
 8013390:	d002      	beq.n	8013398 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013396:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013398:	bf00      	nop
 801339a:	3720      	adds	r7, #32
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}
 80133a0:	2000e1dc 	.word	0x2000e1dc
 80133a4:	2000e244 	.word	0x2000e244
 80133a8:	2000e2ac 	.word	0x2000e2ac

080133ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80133b4:	f001 fb2a 	bl	8014a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80133b8:	4b2d      	ldr	r3, [pc, #180]	@ (8013470 <prvAddNewTaskToReadyList+0xc4>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	3301      	adds	r3, #1
 80133be:	4a2c      	ldr	r2, [pc, #176]	@ (8013470 <prvAddNewTaskToReadyList+0xc4>)
 80133c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80133c2:	4b2c      	ldr	r3, [pc, #176]	@ (8013474 <prvAddNewTaskToReadyList+0xc8>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d109      	bne.n	80133de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80133ca:	4a2a      	ldr	r2, [pc, #168]	@ (8013474 <prvAddNewTaskToReadyList+0xc8>)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80133d0:	4b27      	ldr	r3, [pc, #156]	@ (8013470 <prvAddNewTaskToReadyList+0xc4>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	2b01      	cmp	r3, #1
 80133d6:	d110      	bne.n	80133fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80133d8:	f000 fcf2 	bl	8013dc0 <prvInitialiseTaskLists>
 80133dc:	e00d      	b.n	80133fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80133de:	4b26      	ldr	r3, [pc, #152]	@ (8013478 <prvAddNewTaskToReadyList+0xcc>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d109      	bne.n	80133fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80133e6:	4b23      	ldr	r3, [pc, #140]	@ (8013474 <prvAddNewTaskToReadyList+0xc8>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d802      	bhi.n	80133fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80133f4:	4a1f      	ldr	r2, [pc, #124]	@ (8013474 <prvAddNewTaskToReadyList+0xc8>)
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80133fa:	4b20      	ldr	r3, [pc, #128]	@ (801347c <prvAddNewTaskToReadyList+0xd0>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	3301      	adds	r3, #1
 8013400:	4a1e      	ldr	r2, [pc, #120]	@ (801347c <prvAddNewTaskToReadyList+0xd0>)
 8013402:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013404:	4b1d      	ldr	r3, [pc, #116]	@ (801347c <prvAddNewTaskToReadyList+0xd0>)
 8013406:	681a      	ldr	r2, [r3, #0]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013410:	4b1b      	ldr	r3, [pc, #108]	@ (8013480 <prvAddNewTaskToReadyList+0xd4>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	429a      	cmp	r2, r3
 8013416:	d903      	bls.n	8013420 <prvAddNewTaskToReadyList+0x74>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801341c:	4a18      	ldr	r2, [pc, #96]	@ (8013480 <prvAddNewTaskToReadyList+0xd4>)
 801341e:	6013      	str	r3, [r2, #0]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013424:	4613      	mov	r3, r2
 8013426:	009b      	lsls	r3, r3, #2
 8013428:	4413      	add	r3, r2
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	4a15      	ldr	r2, [pc, #84]	@ (8013484 <prvAddNewTaskToReadyList+0xd8>)
 801342e:	441a      	add	r2, r3
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	3304      	adds	r3, #4
 8013434:	4619      	mov	r1, r3
 8013436:	4610      	mov	r0, r2
 8013438:	f7fe ffcd 	bl	80123d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801343c:	f001 fb1c 	bl	8014a78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013440:	4b0d      	ldr	r3, [pc, #52]	@ (8013478 <prvAddNewTaskToReadyList+0xcc>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d00e      	beq.n	8013466 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013448:	4b0a      	ldr	r3, [pc, #40]	@ (8013474 <prvAddNewTaskToReadyList+0xc8>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013452:	429a      	cmp	r2, r3
 8013454:	d207      	bcs.n	8013466 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013456:	4b0c      	ldr	r3, [pc, #48]	@ (8013488 <prvAddNewTaskToReadyList+0xdc>)
 8013458:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801345c:	601a      	str	r2, [r3, #0]
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013466:	bf00      	nop
 8013468:	3708      	adds	r7, #8
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
 801346e:	bf00      	nop
 8013470:	20005894 	.word	0x20005894
 8013474:	200053c0 	.word	0x200053c0
 8013478:	200058a0 	.word	0x200058a0
 801347c:	200058b0 	.word	0x200058b0
 8013480:	2000589c 	.word	0x2000589c
 8013484:	200053c4 	.word	0x200053c4
 8013488:	e000ed04 	.word	0xe000ed04

0801348c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801348c:	b580      	push	{r7, lr}
 801348e:	b084      	sub	sp, #16
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013494:	f001 faba 	bl	8014a0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d102      	bne.n	80134a4 <vTaskDelete+0x18>
 801349e:	4b2e      	ldr	r3, [pc, #184]	@ (8013558 <vTaskDelete+0xcc>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	e000      	b.n	80134a6 <vTaskDelete+0x1a>
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	3304      	adds	r3, #4
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7fe ffef 	bl	8012490 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d004      	beq.n	80134c4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	3318      	adds	r3, #24
 80134be:	4618      	mov	r0, r3
 80134c0:	f7fe ffe6 	bl	8012490 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80134c4:	4b25      	ldr	r3, [pc, #148]	@ (801355c <vTaskDelete+0xd0>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	3301      	adds	r3, #1
 80134ca:	4a24      	ldr	r2, [pc, #144]	@ (801355c <vTaskDelete+0xd0>)
 80134cc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80134ce:	4b22      	ldr	r3, [pc, #136]	@ (8013558 <vTaskDelete+0xcc>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	68fa      	ldr	r2, [r7, #12]
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d10b      	bne.n	80134f0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	3304      	adds	r3, #4
 80134dc:	4619      	mov	r1, r3
 80134de:	4820      	ldr	r0, [pc, #128]	@ (8013560 <vTaskDelete+0xd4>)
 80134e0:	f7fe ff79 	bl	80123d6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80134e4:	4b1f      	ldr	r3, [pc, #124]	@ (8013564 <vTaskDelete+0xd8>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	3301      	adds	r3, #1
 80134ea:	4a1e      	ldr	r2, [pc, #120]	@ (8013564 <vTaskDelete+0xd8>)
 80134ec:	6013      	str	r3, [r2, #0]
 80134ee:	e009      	b.n	8013504 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80134f0:	4b1d      	ldr	r3, [pc, #116]	@ (8013568 <vTaskDelete+0xdc>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	3b01      	subs	r3, #1
 80134f6:	4a1c      	ldr	r2, [pc, #112]	@ (8013568 <vTaskDelete+0xdc>)
 80134f8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80134fa:	68f8      	ldr	r0, [r7, #12]
 80134fc:	f000 fcce 	bl	8013e9c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8013500:	f000 fd04 	bl	8013f0c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8013504:	f001 fab8 	bl	8014a78 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8013508:	4b18      	ldr	r3, [pc, #96]	@ (801356c <vTaskDelete+0xe0>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d01e      	beq.n	801354e <vTaskDelete+0xc2>
		{
			if( pxTCB == pxCurrentTCB )
 8013510:	4b11      	ldr	r3, [pc, #68]	@ (8013558 <vTaskDelete+0xcc>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	68fa      	ldr	r2, [r7, #12]
 8013516:	429a      	cmp	r2, r3
 8013518:	d119      	bne.n	801354e <vTaskDelete+0xc2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801351a:	4b15      	ldr	r3, [pc, #84]	@ (8013570 <vTaskDelete+0xe4>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d00d      	beq.n	801353e <vTaskDelete+0xb2>
	__asm volatile
 8013522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013526:	b672      	cpsid	i
 8013528:	f383 8811 	msr	BASEPRI, r3
 801352c:	f3bf 8f6f 	isb	sy
 8013530:	f3bf 8f4f 	dsb	sy
 8013534:	b662      	cpsie	i
 8013536:	60bb      	str	r3, [r7, #8]
}
 8013538:	bf00      	nop
 801353a:	bf00      	nop
 801353c:	e7fd      	b.n	801353a <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 801353e:	4b0d      	ldr	r3, [pc, #52]	@ (8013574 <vTaskDelete+0xe8>)
 8013540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013544:	601a      	str	r2, [r3, #0]
 8013546:	f3bf 8f4f 	dsb	sy
 801354a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801354e:	bf00      	nop
 8013550:	3710      	adds	r7, #16
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
 8013556:	bf00      	nop
 8013558:	200053c0 	.word	0x200053c0
 801355c:	200058b0 	.word	0x200058b0
 8013560:	20005868 	.word	0x20005868
 8013564:	2000587c 	.word	0x2000587c
 8013568:	20005894 	.word	0x20005894
 801356c:	200058a0 	.word	0x200058a0
 8013570:	200058bc 	.word	0x200058bc
 8013574:	e000ed04 	.word	0xe000ed04

08013578 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013578:	b580      	push	{r7, lr}
 801357a:	b084      	sub	sp, #16
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013580:	2300      	movs	r3, #0
 8013582:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d01a      	beq.n	80135c0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801358a:	4b15      	ldr	r3, [pc, #84]	@ (80135e0 <vTaskDelay+0x68>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d00d      	beq.n	80135ae <vTaskDelay+0x36>
	__asm volatile
 8013592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013596:	b672      	cpsid	i
 8013598:	f383 8811 	msr	BASEPRI, r3
 801359c:	f3bf 8f6f 	isb	sy
 80135a0:	f3bf 8f4f 	dsb	sy
 80135a4:	b662      	cpsie	i
 80135a6:	60bb      	str	r3, [r7, #8]
}
 80135a8:	bf00      	nop
 80135aa:	bf00      	nop
 80135ac:	e7fd      	b.n	80135aa <vTaskDelay+0x32>
			vTaskSuspendAll();
 80135ae:	f000 f88f 	bl	80136d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80135b2:	2100      	movs	r1, #0
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f000 fd5b 	bl	8014070 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80135ba:	f000 f897 	bl	80136ec <xTaskResumeAll>
 80135be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d107      	bne.n	80135d6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80135c6:	4b07      	ldr	r3, [pc, #28]	@ (80135e4 <vTaskDelay+0x6c>)
 80135c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80135cc:	601a      	str	r2, [r3, #0]
 80135ce:	f3bf 8f4f 	dsb	sy
 80135d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80135d6:	bf00      	nop
 80135d8:	3710      	adds	r7, #16
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd80      	pop	{r7, pc}
 80135de:	bf00      	nop
 80135e0:	200058bc 	.word	0x200058bc
 80135e4:	e000ed04 	.word	0xe000ed04

080135e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b08a      	sub	sp, #40	@ 0x28
 80135ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80135ee:	2300      	movs	r3, #0
 80135f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80135f2:	2300      	movs	r3, #0
 80135f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80135f6:	463a      	mov	r2, r7
 80135f8:	1d39      	adds	r1, r7, #4
 80135fa:	f107 0308 	add.w	r3, r7, #8
 80135fe:	4618      	mov	r0, r3
 8013600:	f7fe fe88 	bl	8012314 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013604:	6839      	ldr	r1, [r7, #0]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	68ba      	ldr	r2, [r7, #8]
 801360a:	9202      	str	r2, [sp, #8]
 801360c:	9301      	str	r3, [sp, #4]
 801360e:	2300      	movs	r3, #0
 8013610:	9300      	str	r3, [sp, #0]
 8013612:	2300      	movs	r3, #0
 8013614:	460a      	mov	r2, r1
 8013616:	4926      	ldr	r1, [pc, #152]	@ (80136b0 <vTaskStartScheduler+0xc8>)
 8013618:	4826      	ldr	r0, [pc, #152]	@ (80136b4 <vTaskStartScheduler+0xcc>)
 801361a:	f7ff fd6f 	bl	80130fc <xTaskCreateStatic>
 801361e:	4603      	mov	r3, r0
 8013620:	4a25      	ldr	r2, [pc, #148]	@ (80136b8 <vTaskStartScheduler+0xd0>)
 8013622:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013624:	4b24      	ldr	r3, [pc, #144]	@ (80136b8 <vTaskStartScheduler+0xd0>)
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d002      	beq.n	8013632 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801362c:	2301      	movs	r3, #1
 801362e:	617b      	str	r3, [r7, #20]
 8013630:	e001      	b.n	8013636 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013632:	2300      	movs	r3, #0
 8013634:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	2b01      	cmp	r3, #1
 801363a:	d102      	bne.n	8013642 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801363c:	f000 fd6c 	bl	8014118 <xTimerCreateTimerTask>
 8013640:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	2b01      	cmp	r3, #1
 8013646:	d11d      	bne.n	8013684 <vTaskStartScheduler+0x9c>
	__asm volatile
 8013648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801364c:	b672      	cpsid	i
 801364e:	f383 8811 	msr	BASEPRI, r3
 8013652:	f3bf 8f6f 	isb	sy
 8013656:	f3bf 8f4f 	dsb	sy
 801365a:	b662      	cpsie	i
 801365c:	613b      	str	r3, [r7, #16]
}
 801365e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013660:	4b16      	ldr	r3, [pc, #88]	@ (80136bc <vTaskStartScheduler+0xd4>)
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	3358      	adds	r3, #88	@ 0x58
 8013666:	4a16      	ldr	r2, [pc, #88]	@ (80136c0 <vTaskStartScheduler+0xd8>)
 8013668:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801366a:	4b16      	ldr	r3, [pc, #88]	@ (80136c4 <vTaskStartScheduler+0xdc>)
 801366c:	f04f 32ff 	mov.w	r2, #4294967295
 8013670:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013672:	4b15      	ldr	r3, [pc, #84]	@ (80136c8 <vTaskStartScheduler+0xe0>)
 8013674:	2201      	movs	r2, #1
 8013676:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013678:	4b14      	ldr	r3, [pc, #80]	@ (80136cc <vTaskStartScheduler+0xe4>)
 801367a:	2200      	movs	r2, #0
 801367c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801367e:	f001 f947 	bl	8014910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013682:	e011      	b.n	80136a8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013684:	697b      	ldr	r3, [r7, #20]
 8013686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801368a:	d10d      	bne.n	80136a8 <vTaskStartScheduler+0xc0>
	__asm volatile
 801368c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013690:	b672      	cpsid	i
 8013692:	f383 8811 	msr	BASEPRI, r3
 8013696:	f3bf 8f6f 	isb	sy
 801369a:	f3bf 8f4f 	dsb	sy
 801369e:	b662      	cpsie	i
 80136a0:	60fb      	str	r3, [r7, #12]
}
 80136a2:	bf00      	nop
 80136a4:	bf00      	nop
 80136a6:	e7fd      	b.n	80136a4 <vTaskStartScheduler+0xbc>
}
 80136a8:	bf00      	nop
 80136aa:	3718      	adds	r7, #24
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	080168c4 	.word	0x080168c4
 80136b4:	08013d8d 	.word	0x08013d8d
 80136b8:	200058b8 	.word	0x200058b8
 80136bc:	200053c0 	.word	0x200053c0
 80136c0:	2000003c 	.word	0x2000003c
 80136c4:	200058b4 	.word	0x200058b4
 80136c8:	200058a0 	.word	0x200058a0
 80136cc:	20005898 	.word	0x20005898

080136d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80136d0:	b480      	push	{r7}
 80136d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80136d4:	4b04      	ldr	r3, [pc, #16]	@ (80136e8 <vTaskSuspendAll+0x18>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	3301      	adds	r3, #1
 80136da:	4a03      	ldr	r2, [pc, #12]	@ (80136e8 <vTaskSuspendAll+0x18>)
 80136dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80136de:	bf00      	nop
 80136e0:	46bd      	mov	sp, r7
 80136e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e6:	4770      	bx	lr
 80136e8:	200058bc 	.word	0x200058bc

080136ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b084      	sub	sp, #16
 80136f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80136f2:	2300      	movs	r3, #0
 80136f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80136f6:	2300      	movs	r3, #0
 80136f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80136fa:	4b43      	ldr	r3, [pc, #268]	@ (8013808 <xTaskResumeAll+0x11c>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d10d      	bne.n	801371e <xTaskResumeAll+0x32>
	__asm volatile
 8013702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013706:	b672      	cpsid	i
 8013708:	f383 8811 	msr	BASEPRI, r3
 801370c:	f3bf 8f6f 	isb	sy
 8013710:	f3bf 8f4f 	dsb	sy
 8013714:	b662      	cpsie	i
 8013716:	603b      	str	r3, [r7, #0]
}
 8013718:	bf00      	nop
 801371a:	bf00      	nop
 801371c:	e7fd      	b.n	801371a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801371e:	f001 f975 	bl	8014a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013722:	4b39      	ldr	r3, [pc, #228]	@ (8013808 <xTaskResumeAll+0x11c>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	3b01      	subs	r3, #1
 8013728:	4a37      	ldr	r2, [pc, #220]	@ (8013808 <xTaskResumeAll+0x11c>)
 801372a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801372c:	4b36      	ldr	r3, [pc, #216]	@ (8013808 <xTaskResumeAll+0x11c>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d162      	bne.n	80137fa <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013734:	4b35      	ldr	r3, [pc, #212]	@ (801380c <xTaskResumeAll+0x120>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d05e      	beq.n	80137fa <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801373c:	e02f      	b.n	801379e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801373e:	4b34      	ldr	r3, [pc, #208]	@ (8013810 <xTaskResumeAll+0x124>)
 8013740:	68db      	ldr	r3, [r3, #12]
 8013742:	68db      	ldr	r3, [r3, #12]
 8013744:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	3318      	adds	r3, #24
 801374a:	4618      	mov	r0, r3
 801374c:	f7fe fea0 	bl	8012490 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	3304      	adds	r3, #4
 8013754:	4618      	mov	r0, r3
 8013756:	f7fe fe9b 	bl	8012490 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801375e:	4b2d      	ldr	r3, [pc, #180]	@ (8013814 <xTaskResumeAll+0x128>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	429a      	cmp	r2, r3
 8013764:	d903      	bls.n	801376e <xTaskResumeAll+0x82>
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801376a:	4a2a      	ldr	r2, [pc, #168]	@ (8013814 <xTaskResumeAll+0x128>)
 801376c:	6013      	str	r3, [r2, #0]
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013772:	4613      	mov	r3, r2
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	4413      	add	r3, r2
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	4a27      	ldr	r2, [pc, #156]	@ (8013818 <xTaskResumeAll+0x12c>)
 801377c:	441a      	add	r2, r3
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	3304      	adds	r3, #4
 8013782:	4619      	mov	r1, r3
 8013784:	4610      	mov	r0, r2
 8013786:	f7fe fe26 	bl	80123d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801378e:	4b23      	ldr	r3, [pc, #140]	@ (801381c <xTaskResumeAll+0x130>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013794:	429a      	cmp	r2, r3
 8013796:	d302      	bcc.n	801379e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8013798:	4b21      	ldr	r3, [pc, #132]	@ (8013820 <xTaskResumeAll+0x134>)
 801379a:	2201      	movs	r2, #1
 801379c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801379e:	4b1c      	ldr	r3, [pc, #112]	@ (8013810 <xTaskResumeAll+0x124>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d1cb      	bne.n	801373e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d001      	beq.n	80137b0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80137ac:	f000 fbae 	bl	8013f0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80137b0:	4b1c      	ldr	r3, [pc, #112]	@ (8013824 <xTaskResumeAll+0x138>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d010      	beq.n	80137de <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80137bc:	f000 f858 	bl	8013870 <xTaskIncrementTick>
 80137c0:	4603      	mov	r3, r0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d002      	beq.n	80137cc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80137c6:	4b16      	ldr	r3, [pc, #88]	@ (8013820 <xTaskResumeAll+0x134>)
 80137c8:	2201      	movs	r2, #1
 80137ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	3b01      	subs	r3, #1
 80137d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d1f1      	bne.n	80137bc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80137d8:	4b12      	ldr	r3, [pc, #72]	@ (8013824 <xTaskResumeAll+0x138>)
 80137da:	2200      	movs	r2, #0
 80137dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80137de:	4b10      	ldr	r3, [pc, #64]	@ (8013820 <xTaskResumeAll+0x134>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d009      	beq.n	80137fa <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80137e6:	2301      	movs	r3, #1
 80137e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80137ea:	4b0f      	ldr	r3, [pc, #60]	@ (8013828 <xTaskResumeAll+0x13c>)
 80137ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137f0:	601a      	str	r2, [r3, #0]
 80137f2:	f3bf 8f4f 	dsb	sy
 80137f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80137fa:	f001 f93d 	bl	8014a78 <vPortExitCritical>

	return xAlreadyYielded;
 80137fe:	68bb      	ldr	r3, [r7, #8]
}
 8013800:	4618      	mov	r0, r3
 8013802:	3710      	adds	r7, #16
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}
 8013808:	200058bc 	.word	0x200058bc
 801380c:	20005894 	.word	0x20005894
 8013810:	20005854 	.word	0x20005854
 8013814:	2000589c 	.word	0x2000589c
 8013818:	200053c4 	.word	0x200053c4
 801381c:	200053c0 	.word	0x200053c0
 8013820:	200058a8 	.word	0x200058a8
 8013824:	200058a4 	.word	0x200058a4
 8013828:	e000ed04 	.word	0xe000ed04

0801382c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801382c:	b480      	push	{r7}
 801382e:	b083      	sub	sp, #12
 8013830:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013832:	4b05      	ldr	r3, [pc, #20]	@ (8013848 <xTaskGetTickCount+0x1c>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013838:	687b      	ldr	r3, [r7, #4]
}
 801383a:	4618      	mov	r0, r3
 801383c:	370c      	adds	r7, #12
 801383e:	46bd      	mov	sp, r7
 8013840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013844:	4770      	bx	lr
 8013846:	bf00      	nop
 8013848:	20005898 	.word	0x20005898

0801384c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013852:	f001 f9c3 	bl	8014bdc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013856:	2300      	movs	r3, #0
 8013858:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801385a:	4b04      	ldr	r3, [pc, #16]	@ (801386c <xTaskGetTickCountFromISR+0x20>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013860:	683b      	ldr	r3, [r7, #0]
}
 8013862:	4618      	mov	r0, r3
 8013864:	3708      	adds	r7, #8
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}
 801386a:	bf00      	nop
 801386c:	20005898 	.word	0x20005898

08013870 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b086      	sub	sp, #24
 8013874:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013876:	2300      	movs	r3, #0
 8013878:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801387a:	4b50      	ldr	r3, [pc, #320]	@ (80139bc <xTaskIncrementTick+0x14c>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	f040 808c 	bne.w	801399c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013884:	4b4e      	ldr	r3, [pc, #312]	@ (80139c0 <xTaskIncrementTick+0x150>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	3301      	adds	r3, #1
 801388a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801388c:	4a4c      	ldr	r2, [pc, #304]	@ (80139c0 <xTaskIncrementTick+0x150>)
 801388e:	693b      	ldr	r3, [r7, #16]
 8013890:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d123      	bne.n	80138e0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8013898:	4b4a      	ldr	r3, [pc, #296]	@ (80139c4 <xTaskIncrementTick+0x154>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d00d      	beq.n	80138be <xTaskIncrementTick+0x4e>
	__asm volatile
 80138a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138a6:	b672      	cpsid	i
 80138a8:	f383 8811 	msr	BASEPRI, r3
 80138ac:	f3bf 8f6f 	isb	sy
 80138b0:	f3bf 8f4f 	dsb	sy
 80138b4:	b662      	cpsie	i
 80138b6:	603b      	str	r3, [r7, #0]
}
 80138b8:	bf00      	nop
 80138ba:	bf00      	nop
 80138bc:	e7fd      	b.n	80138ba <xTaskIncrementTick+0x4a>
 80138be:	4b41      	ldr	r3, [pc, #260]	@ (80139c4 <xTaskIncrementTick+0x154>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	60fb      	str	r3, [r7, #12]
 80138c4:	4b40      	ldr	r3, [pc, #256]	@ (80139c8 <xTaskIncrementTick+0x158>)
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	4a3e      	ldr	r2, [pc, #248]	@ (80139c4 <xTaskIncrementTick+0x154>)
 80138ca:	6013      	str	r3, [r2, #0]
 80138cc:	4a3e      	ldr	r2, [pc, #248]	@ (80139c8 <xTaskIncrementTick+0x158>)
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	6013      	str	r3, [r2, #0]
 80138d2:	4b3e      	ldr	r3, [pc, #248]	@ (80139cc <xTaskIncrementTick+0x15c>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	3301      	adds	r3, #1
 80138d8:	4a3c      	ldr	r2, [pc, #240]	@ (80139cc <xTaskIncrementTick+0x15c>)
 80138da:	6013      	str	r3, [r2, #0]
 80138dc:	f000 fb16 	bl	8013f0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80138e0:	4b3b      	ldr	r3, [pc, #236]	@ (80139d0 <xTaskIncrementTick+0x160>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	693a      	ldr	r2, [r7, #16]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d349      	bcc.n	801397e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80138ea:	4b36      	ldr	r3, [pc, #216]	@ (80139c4 <xTaskIncrementTick+0x154>)
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d104      	bne.n	80138fe <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138f4:	4b36      	ldr	r3, [pc, #216]	@ (80139d0 <xTaskIncrementTick+0x160>)
 80138f6:	f04f 32ff 	mov.w	r2, #4294967295
 80138fa:	601a      	str	r2, [r3, #0]
					break;
 80138fc:	e03f      	b.n	801397e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80138fe:	4b31      	ldr	r3, [pc, #196]	@ (80139c4 <xTaskIncrementTick+0x154>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	68db      	ldr	r3, [r3, #12]
 8013904:	68db      	ldr	r3, [r3, #12]
 8013906:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	685b      	ldr	r3, [r3, #4]
 801390c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801390e:	693a      	ldr	r2, [r7, #16]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	429a      	cmp	r2, r3
 8013914:	d203      	bcs.n	801391e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013916:	4a2e      	ldr	r2, [pc, #184]	@ (80139d0 <xTaskIncrementTick+0x160>)
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801391c:	e02f      	b.n	801397e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	3304      	adds	r3, #4
 8013922:	4618      	mov	r0, r3
 8013924:	f7fe fdb4 	bl	8012490 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801392c:	2b00      	cmp	r3, #0
 801392e:	d004      	beq.n	801393a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	3318      	adds	r3, #24
 8013934:	4618      	mov	r0, r3
 8013936:	f7fe fdab 	bl	8012490 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801393e:	4b25      	ldr	r3, [pc, #148]	@ (80139d4 <xTaskIncrementTick+0x164>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	429a      	cmp	r2, r3
 8013944:	d903      	bls.n	801394e <xTaskIncrementTick+0xde>
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801394a:	4a22      	ldr	r2, [pc, #136]	@ (80139d4 <xTaskIncrementTick+0x164>)
 801394c:	6013      	str	r3, [r2, #0]
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013952:	4613      	mov	r3, r2
 8013954:	009b      	lsls	r3, r3, #2
 8013956:	4413      	add	r3, r2
 8013958:	009b      	lsls	r3, r3, #2
 801395a:	4a1f      	ldr	r2, [pc, #124]	@ (80139d8 <xTaskIncrementTick+0x168>)
 801395c:	441a      	add	r2, r3
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	3304      	adds	r3, #4
 8013962:	4619      	mov	r1, r3
 8013964:	4610      	mov	r0, r2
 8013966:	f7fe fd36 	bl	80123d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801396e:	4b1b      	ldr	r3, [pc, #108]	@ (80139dc <xTaskIncrementTick+0x16c>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013974:	429a      	cmp	r2, r3
 8013976:	d3b8      	bcc.n	80138ea <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8013978:	2301      	movs	r3, #1
 801397a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801397c:	e7b5      	b.n	80138ea <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801397e:	4b17      	ldr	r3, [pc, #92]	@ (80139dc <xTaskIncrementTick+0x16c>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013984:	4914      	ldr	r1, [pc, #80]	@ (80139d8 <xTaskIncrementTick+0x168>)
 8013986:	4613      	mov	r3, r2
 8013988:	009b      	lsls	r3, r3, #2
 801398a:	4413      	add	r3, r2
 801398c:	009b      	lsls	r3, r3, #2
 801398e:	440b      	add	r3, r1
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	2b01      	cmp	r3, #1
 8013994:	d907      	bls.n	80139a6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8013996:	2301      	movs	r3, #1
 8013998:	617b      	str	r3, [r7, #20]
 801399a:	e004      	b.n	80139a6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801399c:	4b10      	ldr	r3, [pc, #64]	@ (80139e0 <xTaskIncrementTick+0x170>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	3301      	adds	r3, #1
 80139a2:	4a0f      	ldr	r2, [pc, #60]	@ (80139e0 <xTaskIncrementTick+0x170>)
 80139a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80139a6:	4b0f      	ldr	r3, [pc, #60]	@ (80139e4 <xTaskIncrementTick+0x174>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d001      	beq.n	80139b2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80139ae:	2301      	movs	r3, #1
 80139b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80139b2:	697b      	ldr	r3, [r7, #20]
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3718      	adds	r7, #24
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}
 80139bc:	200058bc 	.word	0x200058bc
 80139c0:	20005898 	.word	0x20005898
 80139c4:	2000584c 	.word	0x2000584c
 80139c8:	20005850 	.word	0x20005850
 80139cc:	200058ac 	.word	0x200058ac
 80139d0:	200058b4 	.word	0x200058b4
 80139d4:	2000589c 	.word	0x2000589c
 80139d8:	200053c4 	.word	0x200053c4
 80139dc:	200053c0 	.word	0x200053c0
 80139e0:	200058a4 	.word	0x200058a4
 80139e4:	200058a8 	.word	0x200058a8

080139e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b086      	sub	sp, #24
 80139ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80139ee:	4b3e      	ldr	r3, [pc, #248]	@ (8013ae8 <vTaskSwitchContext+0x100>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d003      	beq.n	80139fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80139f6:	4b3d      	ldr	r3, [pc, #244]	@ (8013aec <vTaskSwitchContext+0x104>)
 80139f8:	2201      	movs	r2, #1
 80139fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80139fc:	e070      	b.n	8013ae0 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 80139fe:	4b3b      	ldr	r3, [pc, #236]	@ (8013aec <vTaskSwitchContext+0x104>)
 8013a00:	2200      	movs	r2, #0
 8013a02:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8013a04:	4b3a      	ldr	r3, [pc, #232]	@ (8013af0 <vTaskSwitchContext+0x108>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a0a:	613b      	str	r3, [r7, #16]
 8013a0c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8013a10:	60fb      	str	r3, [r7, #12]
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	68fa      	ldr	r2, [r7, #12]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d111      	bne.n	8013a40 <vTaskSwitchContext+0x58>
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	3304      	adds	r3, #4
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	68fa      	ldr	r2, [r7, #12]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d10b      	bne.n	8013a40 <vTaskSwitchContext+0x58>
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	3308      	adds	r3, #8
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	68fa      	ldr	r2, [r7, #12]
 8013a30:	429a      	cmp	r2, r3
 8013a32:	d105      	bne.n	8013a40 <vTaskSwitchContext+0x58>
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	330c      	adds	r3, #12
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	68fa      	ldr	r2, [r7, #12]
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d008      	beq.n	8013a52 <vTaskSwitchContext+0x6a>
 8013a40:	4b2b      	ldr	r3, [pc, #172]	@ (8013af0 <vTaskSwitchContext+0x108>)
 8013a42:	681a      	ldr	r2, [r3, #0]
 8013a44:	4b2a      	ldr	r3, [pc, #168]	@ (8013af0 <vTaskSwitchContext+0x108>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	3334      	adds	r3, #52	@ 0x34
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	4610      	mov	r0, r2
 8013a4e:	f7ed f9ba 	bl	8000dc6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a52:	4b28      	ldr	r3, [pc, #160]	@ (8013af4 <vTaskSwitchContext+0x10c>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	617b      	str	r3, [r7, #20]
 8013a58:	e013      	b.n	8013a82 <vTaskSwitchContext+0x9a>
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d10d      	bne.n	8013a7c <vTaskSwitchContext+0x94>
	__asm volatile
 8013a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a64:	b672      	cpsid	i
 8013a66:	f383 8811 	msr	BASEPRI, r3
 8013a6a:	f3bf 8f6f 	isb	sy
 8013a6e:	f3bf 8f4f 	dsb	sy
 8013a72:	b662      	cpsie	i
 8013a74:	607b      	str	r3, [r7, #4]
}
 8013a76:	bf00      	nop
 8013a78:	bf00      	nop
 8013a7a:	e7fd      	b.n	8013a78 <vTaskSwitchContext+0x90>
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	3b01      	subs	r3, #1
 8013a80:	617b      	str	r3, [r7, #20]
 8013a82:	491d      	ldr	r1, [pc, #116]	@ (8013af8 <vTaskSwitchContext+0x110>)
 8013a84:	697a      	ldr	r2, [r7, #20]
 8013a86:	4613      	mov	r3, r2
 8013a88:	009b      	lsls	r3, r3, #2
 8013a8a:	4413      	add	r3, r2
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	440b      	add	r3, r1
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d0e1      	beq.n	8013a5a <vTaskSwitchContext+0x72>
 8013a96:	697a      	ldr	r2, [r7, #20]
 8013a98:	4613      	mov	r3, r2
 8013a9a:	009b      	lsls	r3, r3, #2
 8013a9c:	4413      	add	r3, r2
 8013a9e:	009b      	lsls	r3, r3, #2
 8013aa0:	4a15      	ldr	r2, [pc, #84]	@ (8013af8 <vTaskSwitchContext+0x110>)
 8013aa2:	4413      	add	r3, r2
 8013aa4:	60bb      	str	r3, [r7, #8]
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	685a      	ldr	r2, [r3, #4]
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	605a      	str	r2, [r3, #4]
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	685a      	ldr	r2, [r3, #4]
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	3308      	adds	r3, #8
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d104      	bne.n	8013ac6 <vTaskSwitchContext+0xde>
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	685b      	ldr	r3, [r3, #4]
 8013ac0:	685a      	ldr	r2, [r3, #4]
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	605a      	str	r2, [r3, #4]
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	685b      	ldr	r3, [r3, #4]
 8013aca:	68db      	ldr	r3, [r3, #12]
 8013acc:	4a08      	ldr	r2, [pc, #32]	@ (8013af0 <vTaskSwitchContext+0x108>)
 8013ace:	6013      	str	r3, [r2, #0]
 8013ad0:	4a08      	ldr	r2, [pc, #32]	@ (8013af4 <vTaskSwitchContext+0x10c>)
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013ad6:	4b06      	ldr	r3, [pc, #24]	@ (8013af0 <vTaskSwitchContext+0x108>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	3358      	adds	r3, #88	@ 0x58
 8013adc:	4a07      	ldr	r2, [pc, #28]	@ (8013afc <vTaskSwitchContext+0x114>)
 8013ade:	6013      	str	r3, [r2, #0]
}
 8013ae0:	bf00      	nop
 8013ae2:	3718      	adds	r7, #24
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}
 8013ae8:	200058bc 	.word	0x200058bc
 8013aec:	200058a8 	.word	0x200058a8
 8013af0:	200053c0 	.word	0x200053c0
 8013af4:	2000589c 	.word	0x2000589c
 8013af8:	200053c4 	.word	0x200053c4
 8013afc:	2000003c 	.word	0x2000003c

08013b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b084      	sub	sp, #16
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
 8013b08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d10d      	bne.n	8013b2c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8013b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b14:	b672      	cpsid	i
 8013b16:	f383 8811 	msr	BASEPRI, r3
 8013b1a:	f3bf 8f6f 	isb	sy
 8013b1e:	f3bf 8f4f 	dsb	sy
 8013b22:	b662      	cpsie	i
 8013b24:	60fb      	str	r3, [r7, #12]
}
 8013b26:	bf00      	nop
 8013b28:	bf00      	nop
 8013b2a:	e7fd      	b.n	8013b28 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013b2c:	4b07      	ldr	r3, [pc, #28]	@ (8013b4c <vTaskPlaceOnEventList+0x4c>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	3318      	adds	r3, #24
 8013b32:	4619      	mov	r1, r3
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f7fe fc72 	bl	801241e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013b3a:	2101      	movs	r1, #1
 8013b3c:	6838      	ldr	r0, [r7, #0]
 8013b3e:	f000 fa97 	bl	8014070 <prvAddCurrentTaskToDelayedList>
}
 8013b42:	bf00      	nop
 8013b44:	3710      	adds	r7, #16
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}
 8013b4a:	bf00      	nop
 8013b4c:	200053c0 	.word	0x200053c0

08013b50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b086      	sub	sp, #24
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	60f8      	str	r0, [r7, #12]
 8013b58:	60b9      	str	r1, [r7, #8]
 8013b5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d10d      	bne.n	8013b7e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8013b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b66:	b672      	cpsid	i
 8013b68:	f383 8811 	msr	BASEPRI, r3
 8013b6c:	f3bf 8f6f 	isb	sy
 8013b70:	f3bf 8f4f 	dsb	sy
 8013b74:	b662      	cpsie	i
 8013b76:	617b      	str	r3, [r7, #20]
}
 8013b78:	bf00      	nop
 8013b7a:	bf00      	nop
 8013b7c:	e7fd      	b.n	8013b7a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8013ba8 <vTaskPlaceOnEventListRestricted+0x58>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	3318      	adds	r3, #24
 8013b84:	4619      	mov	r1, r3
 8013b86:	68f8      	ldr	r0, [r7, #12]
 8013b88:	f7fe fc25 	bl	80123d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d002      	beq.n	8013b98 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8013b92:	f04f 33ff 	mov.w	r3, #4294967295
 8013b96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013b98:	6879      	ldr	r1, [r7, #4]
 8013b9a:	68b8      	ldr	r0, [r7, #8]
 8013b9c:	f000 fa68 	bl	8014070 <prvAddCurrentTaskToDelayedList>
	}
 8013ba0:	bf00      	nop
 8013ba2:	3718      	adds	r7, #24
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	200053c0 	.word	0x200053c0

08013bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b086      	sub	sp, #24
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	68db      	ldr	r3, [r3, #12]
 8013bb8:	68db      	ldr	r3, [r3, #12]
 8013bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d10d      	bne.n	8013bde <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8013bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bc6:	b672      	cpsid	i
 8013bc8:	f383 8811 	msr	BASEPRI, r3
 8013bcc:	f3bf 8f6f 	isb	sy
 8013bd0:	f3bf 8f4f 	dsb	sy
 8013bd4:	b662      	cpsie	i
 8013bd6:	60fb      	str	r3, [r7, #12]
}
 8013bd8:	bf00      	nop
 8013bda:	bf00      	nop
 8013bdc:	e7fd      	b.n	8013bda <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	3318      	adds	r3, #24
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7fe fc54 	bl	8012490 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013be8:	4b1d      	ldr	r3, [pc, #116]	@ (8013c60 <xTaskRemoveFromEventList+0xb4>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d11d      	bne.n	8013c2c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	3304      	adds	r3, #4
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7fe fc4b 	bl	8012490 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bfe:	4b19      	ldr	r3, [pc, #100]	@ (8013c64 <xTaskRemoveFromEventList+0xb8>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d903      	bls.n	8013c0e <xTaskRemoveFromEventList+0x62>
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c0a:	4a16      	ldr	r2, [pc, #88]	@ (8013c64 <xTaskRemoveFromEventList+0xb8>)
 8013c0c:	6013      	str	r3, [r2, #0]
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c12:	4613      	mov	r3, r2
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	4413      	add	r3, r2
 8013c18:	009b      	lsls	r3, r3, #2
 8013c1a:	4a13      	ldr	r2, [pc, #76]	@ (8013c68 <xTaskRemoveFromEventList+0xbc>)
 8013c1c:	441a      	add	r2, r3
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	3304      	adds	r3, #4
 8013c22:	4619      	mov	r1, r3
 8013c24:	4610      	mov	r0, r2
 8013c26:	f7fe fbd6 	bl	80123d6 <vListInsertEnd>
 8013c2a:	e005      	b.n	8013c38 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	3318      	adds	r3, #24
 8013c30:	4619      	mov	r1, r3
 8013c32:	480e      	ldr	r0, [pc, #56]	@ (8013c6c <xTaskRemoveFromEventList+0xc0>)
 8013c34:	f7fe fbcf 	bl	80123d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8013c70 <xTaskRemoveFromEventList+0xc4>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d905      	bls.n	8013c52 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013c46:	2301      	movs	r3, #1
 8013c48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8013c74 <xTaskRemoveFromEventList+0xc8>)
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	601a      	str	r2, [r3, #0]
 8013c50:	e001      	b.n	8013c56 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8013c52:	2300      	movs	r3, #0
 8013c54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013c56:	697b      	ldr	r3, [r7, #20]
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3718      	adds	r7, #24
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	200058bc 	.word	0x200058bc
 8013c64:	2000589c 	.word	0x2000589c
 8013c68:	200053c4 	.word	0x200053c4
 8013c6c:	20005854 	.word	0x20005854
 8013c70:	200053c0 	.word	0x200053c0
 8013c74:	200058a8 	.word	0x200058a8

08013c78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013c78:	b480      	push	{r7}
 8013c7a:	b083      	sub	sp, #12
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013c80:	4b06      	ldr	r3, [pc, #24]	@ (8013c9c <vTaskInternalSetTimeOutState+0x24>)
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013c88:	4b05      	ldr	r3, [pc, #20]	@ (8013ca0 <vTaskInternalSetTimeOutState+0x28>)
 8013c8a:	681a      	ldr	r2, [r3, #0]
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	605a      	str	r2, [r3, #4]
}
 8013c90:	bf00      	nop
 8013c92:	370c      	adds	r7, #12
 8013c94:	46bd      	mov	sp, r7
 8013c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9a:	4770      	bx	lr
 8013c9c:	200058ac 	.word	0x200058ac
 8013ca0:	20005898 	.word	0x20005898

08013ca4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b088      	sub	sp, #32
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
 8013cac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d10d      	bne.n	8013cd0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8013cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cb8:	b672      	cpsid	i
 8013cba:	f383 8811 	msr	BASEPRI, r3
 8013cbe:	f3bf 8f6f 	isb	sy
 8013cc2:	f3bf 8f4f 	dsb	sy
 8013cc6:	b662      	cpsie	i
 8013cc8:	613b      	str	r3, [r7, #16]
}
 8013cca:	bf00      	nop
 8013ccc:	bf00      	nop
 8013cce:	e7fd      	b.n	8013ccc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d10d      	bne.n	8013cf2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8013cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cda:	b672      	cpsid	i
 8013cdc:	f383 8811 	msr	BASEPRI, r3
 8013ce0:	f3bf 8f6f 	isb	sy
 8013ce4:	f3bf 8f4f 	dsb	sy
 8013ce8:	b662      	cpsie	i
 8013cea:	60fb      	str	r3, [r7, #12]
}
 8013cec:	bf00      	nop
 8013cee:	bf00      	nop
 8013cf0:	e7fd      	b.n	8013cee <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8013cf2:	f000 fe8b 	bl	8014a0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8013d6c <xTaskCheckForTimeOut+0xc8>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	685b      	ldr	r3, [r3, #4]
 8013d00:	69ba      	ldr	r2, [r7, #24]
 8013d02:	1ad3      	subs	r3, r2, r3
 8013d04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d0e:	d102      	bne.n	8013d16 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013d10:	2300      	movs	r3, #0
 8013d12:	61fb      	str	r3, [r7, #28]
 8013d14:	e023      	b.n	8013d5e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	4b15      	ldr	r3, [pc, #84]	@ (8013d70 <xTaskCheckForTimeOut+0xcc>)
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d007      	beq.n	8013d32 <xTaskCheckForTimeOut+0x8e>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	685b      	ldr	r3, [r3, #4]
 8013d26:	69ba      	ldr	r2, [r7, #24]
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d302      	bcc.n	8013d32 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	61fb      	str	r3, [r7, #28]
 8013d30:	e015      	b.n	8013d5e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	697a      	ldr	r2, [r7, #20]
 8013d38:	429a      	cmp	r2, r3
 8013d3a:	d20b      	bcs.n	8013d54 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	681a      	ldr	r2, [r3, #0]
 8013d40:	697b      	ldr	r3, [r7, #20]
 8013d42:	1ad2      	subs	r2, r2, r3
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f7ff ff95 	bl	8013c78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	61fb      	str	r3, [r7, #28]
 8013d52:	e004      	b.n	8013d5e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	2200      	movs	r2, #0
 8013d58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013d5e:	f000 fe8b 	bl	8014a78 <vPortExitCritical>

	return xReturn;
 8013d62:	69fb      	ldr	r3, [r7, #28]
}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3720      	adds	r7, #32
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	20005898 	.word	0x20005898
 8013d70:	200058ac 	.word	0x200058ac

08013d74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013d74:	b480      	push	{r7}
 8013d76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013d78:	4b03      	ldr	r3, [pc, #12]	@ (8013d88 <vTaskMissedYield+0x14>)
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	601a      	str	r2, [r3, #0]
}
 8013d7e:	bf00      	nop
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr
 8013d88:	200058a8 	.word	0x200058a8

08013d8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013d94:	f000 f854 	bl	8013e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013d98:	4b07      	ldr	r3, [pc, #28]	@ (8013db8 <prvIdleTask+0x2c>)
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	2b01      	cmp	r3, #1
 8013d9e:	d907      	bls.n	8013db0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013da0:	4b06      	ldr	r3, [pc, #24]	@ (8013dbc <prvIdleTask+0x30>)
 8013da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013da6:	601a      	str	r2, [r3, #0]
 8013da8:	f3bf 8f4f 	dsb	sy
 8013dac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8013db0:	f7ed f802 	bl	8000db8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8013db4:	e7ee      	b.n	8013d94 <prvIdleTask+0x8>
 8013db6:	bf00      	nop
 8013db8:	200053c4 	.word	0x200053c4
 8013dbc:	e000ed04 	.word	0xe000ed04

08013dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	607b      	str	r3, [r7, #4]
 8013dca:	e00c      	b.n	8013de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013dcc:	687a      	ldr	r2, [r7, #4]
 8013dce:	4613      	mov	r3, r2
 8013dd0:	009b      	lsls	r3, r3, #2
 8013dd2:	4413      	add	r3, r2
 8013dd4:	009b      	lsls	r3, r3, #2
 8013dd6:	4a12      	ldr	r2, [pc, #72]	@ (8013e20 <prvInitialiseTaskLists+0x60>)
 8013dd8:	4413      	add	r3, r2
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7fe face 	bl	801237c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	3301      	adds	r3, #1
 8013de4:	607b      	str	r3, [r7, #4]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	2b37      	cmp	r3, #55	@ 0x37
 8013dea:	d9ef      	bls.n	8013dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013dec:	480d      	ldr	r0, [pc, #52]	@ (8013e24 <prvInitialiseTaskLists+0x64>)
 8013dee:	f7fe fac5 	bl	801237c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013df2:	480d      	ldr	r0, [pc, #52]	@ (8013e28 <prvInitialiseTaskLists+0x68>)
 8013df4:	f7fe fac2 	bl	801237c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013df8:	480c      	ldr	r0, [pc, #48]	@ (8013e2c <prvInitialiseTaskLists+0x6c>)
 8013dfa:	f7fe fabf 	bl	801237c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013dfe:	480c      	ldr	r0, [pc, #48]	@ (8013e30 <prvInitialiseTaskLists+0x70>)
 8013e00:	f7fe fabc 	bl	801237c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013e04:	480b      	ldr	r0, [pc, #44]	@ (8013e34 <prvInitialiseTaskLists+0x74>)
 8013e06:	f7fe fab9 	bl	801237c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8013e38 <prvInitialiseTaskLists+0x78>)
 8013e0c:	4a05      	ldr	r2, [pc, #20]	@ (8013e24 <prvInitialiseTaskLists+0x64>)
 8013e0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013e10:	4b0a      	ldr	r3, [pc, #40]	@ (8013e3c <prvInitialiseTaskLists+0x7c>)
 8013e12:	4a05      	ldr	r2, [pc, #20]	@ (8013e28 <prvInitialiseTaskLists+0x68>)
 8013e14:	601a      	str	r2, [r3, #0]
}
 8013e16:	bf00      	nop
 8013e18:	3708      	adds	r7, #8
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	200053c4 	.word	0x200053c4
 8013e24:	20005824 	.word	0x20005824
 8013e28:	20005838 	.word	0x20005838
 8013e2c:	20005854 	.word	0x20005854
 8013e30:	20005868 	.word	0x20005868
 8013e34:	20005880 	.word	0x20005880
 8013e38:	2000584c 	.word	0x2000584c
 8013e3c:	20005850 	.word	0x20005850

08013e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e46:	e019      	b.n	8013e7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013e48:	f000 fde0 	bl	8014a0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e4c:	4b10      	ldr	r3, [pc, #64]	@ (8013e90 <prvCheckTasksWaitingTermination+0x50>)
 8013e4e:	68db      	ldr	r3, [r3, #12]
 8013e50:	68db      	ldr	r3, [r3, #12]
 8013e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	3304      	adds	r3, #4
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7fe fb19 	bl	8012490 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8013e94 <prvCheckTasksWaitingTermination+0x54>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	3b01      	subs	r3, #1
 8013e64:	4a0b      	ldr	r2, [pc, #44]	@ (8013e94 <prvCheckTasksWaitingTermination+0x54>)
 8013e66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013e68:	4b0b      	ldr	r3, [pc, #44]	@ (8013e98 <prvCheckTasksWaitingTermination+0x58>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	3b01      	subs	r3, #1
 8013e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8013e98 <prvCheckTasksWaitingTermination+0x58>)
 8013e70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013e72:	f000 fe01 	bl	8014a78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	f000 f810 	bl	8013e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e7c:	4b06      	ldr	r3, [pc, #24]	@ (8013e98 <prvCheckTasksWaitingTermination+0x58>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d1e1      	bne.n	8013e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013e84:	bf00      	nop
 8013e86:	bf00      	nop
 8013e88:	3708      	adds	r7, #8
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	20005868 	.word	0x20005868
 8013e94:	20005894 	.word	0x20005894
 8013e98:	2000587c 	.word	0x2000587c

08013e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	3358      	adds	r3, #88	@ 0x58
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f001 fea3 	bl	8015bf4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d108      	bne.n	8013eca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f000 ffa5 	bl	8014e0c <vPortFree>
				vPortFree( pxTCB );
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f000 ffa2 	bl	8014e0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013ec8:	e01b      	b.n	8013f02 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8013ed0:	2b01      	cmp	r3, #1
 8013ed2:	d103      	bne.n	8013edc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f000 ff99 	bl	8014e0c <vPortFree>
	}
 8013eda:	e012      	b.n	8013f02 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8013ee2:	2b02      	cmp	r3, #2
 8013ee4:	d00d      	beq.n	8013f02 <prvDeleteTCB+0x66>
	__asm volatile
 8013ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013eea:	b672      	cpsid	i
 8013eec:	f383 8811 	msr	BASEPRI, r3
 8013ef0:	f3bf 8f6f 	isb	sy
 8013ef4:	f3bf 8f4f 	dsb	sy
 8013ef8:	b662      	cpsie	i
 8013efa:	60fb      	str	r3, [r7, #12]
}
 8013efc:	bf00      	nop
 8013efe:	bf00      	nop
 8013f00:	e7fd      	b.n	8013efe <prvDeleteTCB+0x62>
	}
 8013f02:	bf00      	nop
 8013f04:	3710      	adds	r7, #16
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
	...

08013f0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b083      	sub	sp, #12
 8013f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f12:	4b0c      	ldr	r3, [pc, #48]	@ (8013f44 <prvResetNextTaskUnblockTime+0x38>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d104      	bne.n	8013f26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8013f48 <prvResetNextTaskUnblockTime+0x3c>)
 8013f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8013f22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013f24:	e008      	b.n	8013f38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f26:	4b07      	ldr	r3, [pc, #28]	@ (8013f44 <prvResetNextTaskUnblockTime+0x38>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	68db      	ldr	r3, [r3, #12]
 8013f2c:	68db      	ldr	r3, [r3, #12]
 8013f2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	685b      	ldr	r3, [r3, #4]
 8013f34:	4a04      	ldr	r2, [pc, #16]	@ (8013f48 <prvResetNextTaskUnblockTime+0x3c>)
 8013f36:	6013      	str	r3, [r2, #0]
}
 8013f38:	bf00      	nop
 8013f3a:	370c      	adds	r7, #12
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f42:	4770      	bx	lr
 8013f44:	2000584c 	.word	0x2000584c
 8013f48:	200058b4 	.word	0x200058b4

08013f4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013f4c:	b480      	push	{r7}
 8013f4e:	b083      	sub	sp, #12
 8013f50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013f52:	4b0b      	ldr	r3, [pc, #44]	@ (8013f80 <xTaskGetSchedulerState+0x34>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d102      	bne.n	8013f60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013f5a:	2301      	movs	r3, #1
 8013f5c:	607b      	str	r3, [r7, #4]
 8013f5e:	e008      	b.n	8013f72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f60:	4b08      	ldr	r3, [pc, #32]	@ (8013f84 <xTaskGetSchedulerState+0x38>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d102      	bne.n	8013f6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013f68:	2302      	movs	r3, #2
 8013f6a:	607b      	str	r3, [r7, #4]
 8013f6c:	e001      	b.n	8013f72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013f72:	687b      	ldr	r3, [r7, #4]
	}
 8013f74:	4618      	mov	r0, r3
 8013f76:	370c      	adds	r7, #12
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7e:	4770      	bx	lr
 8013f80:	200058a0 	.word	0x200058a0
 8013f84:	200058bc 	.word	0x200058bc

08013f88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b086      	sub	sp, #24
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013f94:	2300      	movs	r3, #0
 8013f96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d05c      	beq.n	8014058 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013f9e:	4b31      	ldr	r3, [pc, #196]	@ (8014064 <xTaskPriorityDisinherit+0xdc>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	693a      	ldr	r2, [r7, #16]
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d00d      	beq.n	8013fc4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8013fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fac:	b672      	cpsid	i
 8013fae:	f383 8811 	msr	BASEPRI, r3
 8013fb2:	f3bf 8f6f 	isb	sy
 8013fb6:	f3bf 8f4f 	dsb	sy
 8013fba:	b662      	cpsie	i
 8013fbc:	60fb      	str	r3, [r7, #12]
}
 8013fbe:	bf00      	nop
 8013fc0:	bf00      	nop
 8013fc2:	e7fd      	b.n	8013fc0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d10d      	bne.n	8013fe8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8013fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fd0:	b672      	cpsid	i
 8013fd2:	f383 8811 	msr	BASEPRI, r3
 8013fd6:	f3bf 8f6f 	isb	sy
 8013fda:	f3bf 8f4f 	dsb	sy
 8013fde:	b662      	cpsie	i
 8013fe0:	60bb      	str	r3, [r7, #8]
}
 8013fe2:	bf00      	nop
 8013fe4:	bf00      	nop
 8013fe6:	e7fd      	b.n	8013fe4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013fec:	1e5a      	subs	r2, r3, #1
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ff6:	693b      	ldr	r3, [r7, #16]
 8013ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d02c      	beq.n	8014058 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013ffe:	693b      	ldr	r3, [r7, #16]
 8014000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014002:	2b00      	cmp	r3, #0
 8014004:	d128      	bne.n	8014058 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014006:	693b      	ldr	r3, [r7, #16]
 8014008:	3304      	adds	r3, #4
 801400a:	4618      	mov	r0, r3
 801400c:	f7fe fa40 	bl	8012490 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014010:	693b      	ldr	r3, [r7, #16]
 8014012:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014014:	693b      	ldr	r3, [r7, #16]
 8014016:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801401c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014020:	693b      	ldr	r3, [r7, #16]
 8014022:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014028:	4b0f      	ldr	r3, [pc, #60]	@ (8014068 <xTaskPriorityDisinherit+0xe0>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	429a      	cmp	r2, r3
 801402e:	d903      	bls.n	8014038 <xTaskPriorityDisinherit+0xb0>
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014034:	4a0c      	ldr	r2, [pc, #48]	@ (8014068 <xTaskPriorityDisinherit+0xe0>)
 8014036:	6013      	str	r3, [r2, #0]
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801403c:	4613      	mov	r3, r2
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	4413      	add	r3, r2
 8014042:	009b      	lsls	r3, r3, #2
 8014044:	4a09      	ldr	r2, [pc, #36]	@ (801406c <xTaskPriorityDisinherit+0xe4>)
 8014046:	441a      	add	r2, r3
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	3304      	adds	r3, #4
 801404c:	4619      	mov	r1, r3
 801404e:	4610      	mov	r0, r2
 8014050:	f7fe f9c1 	bl	80123d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014054:	2301      	movs	r3, #1
 8014056:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014058:	697b      	ldr	r3, [r7, #20]
	}
 801405a:	4618      	mov	r0, r3
 801405c:	3718      	adds	r7, #24
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	200053c0 	.word	0x200053c0
 8014068:	2000589c 	.word	0x2000589c
 801406c:	200053c4 	.word	0x200053c4

08014070 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801407a:	4b21      	ldr	r3, [pc, #132]	@ (8014100 <prvAddCurrentTaskToDelayedList+0x90>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014080:	4b20      	ldr	r3, [pc, #128]	@ (8014104 <prvAddCurrentTaskToDelayedList+0x94>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	3304      	adds	r3, #4
 8014086:	4618      	mov	r0, r3
 8014088:	f7fe fa02 	bl	8012490 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014092:	d10a      	bne.n	80140aa <prvAddCurrentTaskToDelayedList+0x3a>
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d007      	beq.n	80140aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801409a:	4b1a      	ldr	r3, [pc, #104]	@ (8014104 <prvAddCurrentTaskToDelayedList+0x94>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	3304      	adds	r3, #4
 80140a0:	4619      	mov	r1, r3
 80140a2:	4819      	ldr	r0, [pc, #100]	@ (8014108 <prvAddCurrentTaskToDelayedList+0x98>)
 80140a4:	f7fe f997 	bl	80123d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80140a8:	e026      	b.n	80140f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80140aa:	68fa      	ldr	r2, [r7, #12]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	4413      	add	r3, r2
 80140b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80140b2:	4b14      	ldr	r3, [pc, #80]	@ (8014104 <prvAddCurrentTaskToDelayedList+0x94>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	68ba      	ldr	r2, [r7, #8]
 80140b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80140ba:	68ba      	ldr	r2, [r7, #8]
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	429a      	cmp	r2, r3
 80140c0:	d209      	bcs.n	80140d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140c2:	4b12      	ldr	r3, [pc, #72]	@ (801410c <prvAddCurrentTaskToDelayedList+0x9c>)
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	4b0f      	ldr	r3, [pc, #60]	@ (8014104 <prvAddCurrentTaskToDelayedList+0x94>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	3304      	adds	r3, #4
 80140cc:	4619      	mov	r1, r3
 80140ce:	4610      	mov	r0, r2
 80140d0:	f7fe f9a5 	bl	801241e <vListInsert>
}
 80140d4:	e010      	b.n	80140f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140d6:	4b0e      	ldr	r3, [pc, #56]	@ (8014110 <prvAddCurrentTaskToDelayedList+0xa0>)
 80140d8:	681a      	ldr	r2, [r3, #0]
 80140da:	4b0a      	ldr	r3, [pc, #40]	@ (8014104 <prvAddCurrentTaskToDelayedList+0x94>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	3304      	adds	r3, #4
 80140e0:	4619      	mov	r1, r3
 80140e2:	4610      	mov	r0, r2
 80140e4:	f7fe f99b 	bl	801241e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80140e8:	4b0a      	ldr	r3, [pc, #40]	@ (8014114 <prvAddCurrentTaskToDelayedList+0xa4>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	68ba      	ldr	r2, [r7, #8]
 80140ee:	429a      	cmp	r2, r3
 80140f0:	d202      	bcs.n	80140f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80140f2:	4a08      	ldr	r2, [pc, #32]	@ (8014114 <prvAddCurrentTaskToDelayedList+0xa4>)
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	6013      	str	r3, [r2, #0]
}
 80140f8:	bf00      	nop
 80140fa:	3710      	adds	r7, #16
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	20005898 	.word	0x20005898
 8014104:	200053c0 	.word	0x200053c0
 8014108:	20005880 	.word	0x20005880
 801410c:	20005850 	.word	0x20005850
 8014110:	2000584c 	.word	0x2000584c
 8014114:	200058b4 	.word	0x200058b4

08014118 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b08a      	sub	sp, #40	@ 0x28
 801411c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801411e:	2300      	movs	r3, #0
 8014120:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014122:	f000 fb21 	bl	8014768 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014126:	4b1e      	ldr	r3, [pc, #120]	@ (80141a0 <xTimerCreateTimerTask+0x88>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d021      	beq.n	8014172 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801412e:	2300      	movs	r3, #0
 8014130:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014132:	2300      	movs	r3, #0
 8014134:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014136:	1d3a      	adds	r2, r7, #4
 8014138:	f107 0108 	add.w	r1, r7, #8
 801413c:	f107 030c 	add.w	r3, r7, #12
 8014140:	4618      	mov	r0, r3
 8014142:	f7fe f901 	bl	8012348 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014146:	6879      	ldr	r1, [r7, #4]
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	68fa      	ldr	r2, [r7, #12]
 801414c:	9202      	str	r2, [sp, #8]
 801414e:	9301      	str	r3, [sp, #4]
 8014150:	2302      	movs	r3, #2
 8014152:	9300      	str	r3, [sp, #0]
 8014154:	2300      	movs	r3, #0
 8014156:	460a      	mov	r2, r1
 8014158:	4912      	ldr	r1, [pc, #72]	@ (80141a4 <xTimerCreateTimerTask+0x8c>)
 801415a:	4813      	ldr	r0, [pc, #76]	@ (80141a8 <xTimerCreateTimerTask+0x90>)
 801415c:	f7fe ffce 	bl	80130fc <xTaskCreateStatic>
 8014160:	4603      	mov	r3, r0
 8014162:	4a12      	ldr	r2, [pc, #72]	@ (80141ac <xTimerCreateTimerTask+0x94>)
 8014164:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014166:	4b11      	ldr	r3, [pc, #68]	@ (80141ac <xTimerCreateTimerTask+0x94>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d001      	beq.n	8014172 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801416e:	2301      	movs	r3, #1
 8014170:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d10d      	bne.n	8014194 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8014178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801417c:	b672      	cpsid	i
 801417e:	f383 8811 	msr	BASEPRI, r3
 8014182:	f3bf 8f6f 	isb	sy
 8014186:	f3bf 8f4f 	dsb	sy
 801418a:	b662      	cpsie	i
 801418c:	613b      	str	r3, [r7, #16]
}
 801418e:	bf00      	nop
 8014190:	bf00      	nop
 8014192:	e7fd      	b.n	8014190 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8014194:	697b      	ldr	r3, [r7, #20]
}
 8014196:	4618      	mov	r0, r3
 8014198:	3718      	adds	r7, #24
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
 801419e:	bf00      	nop
 80141a0:	200058f0 	.word	0x200058f0
 80141a4:	080168cc 	.word	0x080168cc
 80141a8:	080142f1 	.word	0x080142f1
 80141ac:	200058f4 	.word	0x200058f4

080141b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b08a      	sub	sp, #40	@ 0x28
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	60b9      	str	r1, [r7, #8]
 80141ba:	607a      	str	r2, [r7, #4]
 80141bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80141be:	2300      	movs	r3, #0
 80141c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d10d      	bne.n	80141e4 <xTimerGenericCommand+0x34>
	__asm volatile
 80141c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141cc:	b672      	cpsid	i
 80141ce:	f383 8811 	msr	BASEPRI, r3
 80141d2:	f3bf 8f6f 	isb	sy
 80141d6:	f3bf 8f4f 	dsb	sy
 80141da:	b662      	cpsie	i
 80141dc:	623b      	str	r3, [r7, #32]
}
 80141de:	bf00      	nop
 80141e0:	bf00      	nop
 80141e2:	e7fd      	b.n	80141e0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80141e4:	4b19      	ldr	r3, [pc, #100]	@ (801424c <xTimerGenericCommand+0x9c>)
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d02a      	beq.n	8014242 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	2b05      	cmp	r3, #5
 80141fc:	dc18      	bgt.n	8014230 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80141fe:	f7ff fea5 	bl	8013f4c <xTaskGetSchedulerState>
 8014202:	4603      	mov	r3, r0
 8014204:	2b02      	cmp	r3, #2
 8014206:	d109      	bne.n	801421c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014208:	4b10      	ldr	r3, [pc, #64]	@ (801424c <xTimerGenericCommand+0x9c>)
 801420a:	6818      	ldr	r0, [r3, #0]
 801420c:	f107 0110 	add.w	r1, r7, #16
 8014210:	2300      	movs	r3, #0
 8014212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014214:	f7fe fac0 	bl	8012798 <xQueueGenericSend>
 8014218:	6278      	str	r0, [r7, #36]	@ 0x24
 801421a:	e012      	b.n	8014242 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801421c:	4b0b      	ldr	r3, [pc, #44]	@ (801424c <xTimerGenericCommand+0x9c>)
 801421e:	6818      	ldr	r0, [r3, #0]
 8014220:	f107 0110 	add.w	r1, r7, #16
 8014224:	2300      	movs	r3, #0
 8014226:	2200      	movs	r2, #0
 8014228:	f7fe fab6 	bl	8012798 <xQueueGenericSend>
 801422c:	6278      	str	r0, [r7, #36]	@ 0x24
 801422e:	e008      	b.n	8014242 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014230:	4b06      	ldr	r3, [pc, #24]	@ (801424c <xTimerGenericCommand+0x9c>)
 8014232:	6818      	ldr	r0, [r3, #0]
 8014234:	f107 0110 	add.w	r1, r7, #16
 8014238:	2300      	movs	r3, #0
 801423a:	683a      	ldr	r2, [r7, #0]
 801423c:	f7fe fbb6 	bl	80129ac <xQueueGenericSendFromISR>
 8014240:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014244:	4618      	mov	r0, r3
 8014246:	3728      	adds	r7, #40	@ 0x28
 8014248:	46bd      	mov	sp, r7
 801424a:	bd80      	pop	{r7, pc}
 801424c:	200058f0 	.word	0x200058f0

08014250 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b088      	sub	sp, #32
 8014254:	af02      	add	r7, sp, #8
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801425a:	4b24      	ldr	r3, [pc, #144]	@ (80142ec <prvProcessExpiredTimer+0x9c>)
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	68db      	ldr	r3, [r3, #12]
 8014260:	68db      	ldr	r3, [r3, #12]
 8014262:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	3304      	adds	r3, #4
 8014268:	4618      	mov	r0, r3
 801426a:	f7fe f911 	bl	8012490 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014274:	f003 0304 	and.w	r3, r3, #4
 8014278:	2b00      	cmp	r3, #0
 801427a:	d025      	beq.n	80142c8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801427c:	697b      	ldr	r3, [r7, #20]
 801427e:	699a      	ldr	r2, [r3, #24]
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	18d1      	adds	r1, r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	683a      	ldr	r2, [r7, #0]
 8014288:	6978      	ldr	r0, [r7, #20]
 801428a:	f000 f8d7 	bl	801443c <prvInsertTimerInActiveList>
 801428e:	4603      	mov	r3, r0
 8014290:	2b00      	cmp	r3, #0
 8014292:	d022      	beq.n	80142da <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014294:	2300      	movs	r3, #0
 8014296:	9300      	str	r3, [sp, #0]
 8014298:	2300      	movs	r3, #0
 801429a:	687a      	ldr	r2, [r7, #4]
 801429c:	2100      	movs	r1, #0
 801429e:	6978      	ldr	r0, [r7, #20]
 80142a0:	f7ff ff86 	bl	80141b0 <xTimerGenericCommand>
 80142a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80142a6:	693b      	ldr	r3, [r7, #16]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d116      	bne.n	80142da <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80142ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142b0:	b672      	cpsid	i
 80142b2:	f383 8811 	msr	BASEPRI, r3
 80142b6:	f3bf 8f6f 	isb	sy
 80142ba:	f3bf 8f4f 	dsb	sy
 80142be:	b662      	cpsie	i
 80142c0:	60fb      	str	r3, [r7, #12]
}
 80142c2:	bf00      	nop
 80142c4:	bf00      	nop
 80142c6:	e7fd      	b.n	80142c4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80142c8:	697b      	ldr	r3, [r7, #20]
 80142ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80142ce:	f023 0301 	bic.w	r3, r3, #1
 80142d2:	b2da      	uxtb	r2, r3
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	6a1b      	ldr	r3, [r3, #32]
 80142de:	6978      	ldr	r0, [r7, #20]
 80142e0:	4798      	blx	r3
}
 80142e2:	bf00      	nop
 80142e4:	3718      	adds	r7, #24
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	200058e8 	.word	0x200058e8

080142f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b084      	sub	sp, #16
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80142f8:	f107 0308 	add.w	r3, r7, #8
 80142fc:	4618      	mov	r0, r3
 80142fe:	f000 f859 	bl	80143b4 <prvGetNextExpireTime>
 8014302:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	4619      	mov	r1, r3
 8014308:	68f8      	ldr	r0, [r7, #12]
 801430a:	f000 f805 	bl	8014318 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801430e:	f000 f8d7 	bl	80144c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014312:	bf00      	nop
 8014314:	e7f0      	b.n	80142f8 <prvTimerTask+0x8>
	...

08014318 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b084      	sub	sp, #16
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014322:	f7ff f9d5 	bl	80136d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014326:	f107 0308 	add.w	r3, r7, #8
 801432a:	4618      	mov	r0, r3
 801432c:	f000 f866 	bl	80143fc <prvSampleTimeNow>
 8014330:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014332:	68bb      	ldr	r3, [r7, #8]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d130      	bne.n	801439a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d10a      	bne.n	8014354 <prvProcessTimerOrBlockTask+0x3c>
 801433e:	687a      	ldr	r2, [r7, #4]
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	429a      	cmp	r2, r3
 8014344:	d806      	bhi.n	8014354 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014346:	f7ff f9d1 	bl	80136ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801434a:	68f9      	ldr	r1, [r7, #12]
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f7ff ff7f 	bl	8014250 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014352:	e024      	b.n	801439e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d008      	beq.n	801436c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801435a:	4b13      	ldr	r3, [pc, #76]	@ (80143a8 <prvProcessTimerOrBlockTask+0x90>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d101      	bne.n	8014368 <prvProcessTimerOrBlockTask+0x50>
 8014364:	2301      	movs	r3, #1
 8014366:	e000      	b.n	801436a <prvProcessTimerOrBlockTask+0x52>
 8014368:	2300      	movs	r3, #0
 801436a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801436c:	4b0f      	ldr	r3, [pc, #60]	@ (80143ac <prvProcessTimerOrBlockTask+0x94>)
 801436e:	6818      	ldr	r0, [r3, #0]
 8014370:	687a      	ldr	r2, [r7, #4]
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	1ad3      	subs	r3, r2, r3
 8014376:	683a      	ldr	r2, [r7, #0]
 8014378:	4619      	mov	r1, r3
 801437a:	f7fe fe8b 	bl	8013094 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801437e:	f7ff f9b5 	bl	80136ec <xTaskResumeAll>
 8014382:	4603      	mov	r3, r0
 8014384:	2b00      	cmp	r3, #0
 8014386:	d10a      	bne.n	801439e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014388:	4b09      	ldr	r3, [pc, #36]	@ (80143b0 <prvProcessTimerOrBlockTask+0x98>)
 801438a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801438e:	601a      	str	r2, [r3, #0]
 8014390:	f3bf 8f4f 	dsb	sy
 8014394:	f3bf 8f6f 	isb	sy
}
 8014398:	e001      	b.n	801439e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801439a:	f7ff f9a7 	bl	80136ec <xTaskResumeAll>
}
 801439e:	bf00      	nop
 80143a0:	3710      	adds	r7, #16
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	200058ec 	.word	0x200058ec
 80143ac:	200058f0 	.word	0x200058f0
 80143b0:	e000ed04 	.word	0xe000ed04

080143b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80143b4:	b480      	push	{r7}
 80143b6:	b085      	sub	sp, #20
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80143bc:	4b0e      	ldr	r3, [pc, #56]	@ (80143f8 <prvGetNextExpireTime+0x44>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d101      	bne.n	80143ca <prvGetNextExpireTime+0x16>
 80143c6:	2201      	movs	r2, #1
 80143c8:	e000      	b.n	80143cc <prvGetNextExpireTime+0x18>
 80143ca:	2200      	movs	r2, #0
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d105      	bne.n	80143e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80143d8:	4b07      	ldr	r3, [pc, #28]	@ (80143f8 <prvGetNextExpireTime+0x44>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	68db      	ldr	r3, [r3, #12]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	60fb      	str	r3, [r7, #12]
 80143e2:	e001      	b.n	80143e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80143e4:	2300      	movs	r3, #0
 80143e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80143e8:	68fb      	ldr	r3, [r7, #12]
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3714      	adds	r7, #20
 80143ee:	46bd      	mov	sp, r7
 80143f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f4:	4770      	bx	lr
 80143f6:	bf00      	nop
 80143f8:	200058e8 	.word	0x200058e8

080143fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b084      	sub	sp, #16
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014404:	f7ff fa12 	bl	801382c <xTaskGetTickCount>
 8014408:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801440a:	4b0b      	ldr	r3, [pc, #44]	@ (8014438 <prvSampleTimeNow+0x3c>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	68fa      	ldr	r2, [r7, #12]
 8014410:	429a      	cmp	r2, r3
 8014412:	d205      	bcs.n	8014420 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014414:	f000 f940 	bl	8014698 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2201      	movs	r2, #1
 801441c:	601a      	str	r2, [r3, #0]
 801441e:	e002      	b.n	8014426 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2200      	movs	r2, #0
 8014424:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014426:	4a04      	ldr	r2, [pc, #16]	@ (8014438 <prvSampleTimeNow+0x3c>)
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801442c:	68fb      	ldr	r3, [r7, #12]
}
 801442e:	4618      	mov	r0, r3
 8014430:	3710      	adds	r7, #16
 8014432:	46bd      	mov	sp, r7
 8014434:	bd80      	pop	{r7, pc}
 8014436:	bf00      	nop
 8014438:	200058f8 	.word	0x200058f8

0801443c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b086      	sub	sp, #24
 8014440:	af00      	add	r7, sp, #0
 8014442:	60f8      	str	r0, [r7, #12]
 8014444:	60b9      	str	r1, [r7, #8]
 8014446:	607a      	str	r2, [r7, #4]
 8014448:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801444a:	2300      	movs	r3, #0
 801444c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	68ba      	ldr	r2, [r7, #8]
 8014452:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	68fa      	ldr	r2, [r7, #12]
 8014458:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801445a:	68ba      	ldr	r2, [r7, #8]
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	429a      	cmp	r2, r3
 8014460:	d812      	bhi.n	8014488 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014462:	687a      	ldr	r2, [r7, #4]
 8014464:	683b      	ldr	r3, [r7, #0]
 8014466:	1ad2      	subs	r2, r2, r3
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	699b      	ldr	r3, [r3, #24]
 801446c:	429a      	cmp	r2, r3
 801446e:	d302      	bcc.n	8014476 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014470:	2301      	movs	r3, #1
 8014472:	617b      	str	r3, [r7, #20]
 8014474:	e01b      	b.n	80144ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014476:	4b10      	ldr	r3, [pc, #64]	@ (80144b8 <prvInsertTimerInActiveList+0x7c>)
 8014478:	681a      	ldr	r2, [r3, #0]
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	3304      	adds	r3, #4
 801447e:	4619      	mov	r1, r3
 8014480:	4610      	mov	r0, r2
 8014482:	f7fd ffcc 	bl	801241e <vListInsert>
 8014486:	e012      	b.n	80144ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014488:	687a      	ldr	r2, [r7, #4]
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	429a      	cmp	r2, r3
 801448e:	d206      	bcs.n	801449e <prvInsertTimerInActiveList+0x62>
 8014490:	68ba      	ldr	r2, [r7, #8]
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	429a      	cmp	r2, r3
 8014496:	d302      	bcc.n	801449e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014498:	2301      	movs	r3, #1
 801449a:	617b      	str	r3, [r7, #20]
 801449c:	e007      	b.n	80144ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801449e:	4b07      	ldr	r3, [pc, #28]	@ (80144bc <prvInsertTimerInActiveList+0x80>)
 80144a0:	681a      	ldr	r2, [r3, #0]
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	3304      	adds	r3, #4
 80144a6:	4619      	mov	r1, r3
 80144a8:	4610      	mov	r0, r2
 80144aa:	f7fd ffb8 	bl	801241e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80144ae:	697b      	ldr	r3, [r7, #20]
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3718      	adds	r7, #24
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}
 80144b8:	200058ec 	.word	0x200058ec
 80144bc:	200058e8 	.word	0x200058e8

080144c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b08e      	sub	sp, #56	@ 0x38
 80144c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80144c6:	e0d4      	b.n	8014672 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	da1b      	bge.n	8014506 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80144ce:	1d3b      	adds	r3, r7, #4
 80144d0:	3304      	adds	r3, #4
 80144d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80144d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d10d      	bne.n	80144f6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80144da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144de:	b672      	cpsid	i
 80144e0:	f383 8811 	msr	BASEPRI, r3
 80144e4:	f3bf 8f6f 	isb	sy
 80144e8:	f3bf 8f4f 	dsb	sy
 80144ec:	b662      	cpsie	i
 80144ee:	61fb      	str	r3, [r7, #28]
}
 80144f0:	bf00      	nop
 80144f2:	bf00      	nop
 80144f4:	e7fd      	b.n	80144f2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80144f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80144fc:	6850      	ldr	r0, [r2, #4]
 80144fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014500:	6892      	ldr	r2, [r2, #8]
 8014502:	4611      	mov	r1, r2
 8014504:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2b00      	cmp	r3, #0
 801450a:	f2c0 80b2 	blt.w	8014672 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014514:	695b      	ldr	r3, [r3, #20]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d004      	beq.n	8014524 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801451a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801451c:	3304      	adds	r3, #4
 801451e:	4618      	mov	r0, r3
 8014520:	f7fd ffb6 	bl	8012490 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014524:	463b      	mov	r3, r7
 8014526:	4618      	mov	r0, r3
 8014528:	f7ff ff68 	bl	80143fc <prvSampleTimeNow>
 801452c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2b09      	cmp	r3, #9
 8014532:	f200 809b 	bhi.w	801466c <prvProcessReceivedCommands+0x1ac>
 8014536:	a201      	add	r2, pc, #4	@ (adr r2, 801453c <prvProcessReceivedCommands+0x7c>)
 8014538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801453c:	08014565 	.word	0x08014565
 8014540:	08014565 	.word	0x08014565
 8014544:	08014565 	.word	0x08014565
 8014548:	080145df 	.word	0x080145df
 801454c:	080145f3 	.word	0x080145f3
 8014550:	08014643 	.word	0x08014643
 8014554:	08014565 	.word	0x08014565
 8014558:	08014565 	.word	0x08014565
 801455c:	080145df 	.word	0x080145df
 8014560:	080145f3 	.word	0x080145f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014566:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801456a:	f043 0301 	orr.w	r3, r3, #1
 801456e:	b2da      	uxtb	r2, r3
 8014570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014572:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014576:	68ba      	ldr	r2, [r7, #8]
 8014578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801457a:	699b      	ldr	r3, [r3, #24]
 801457c:	18d1      	adds	r1, r2, r3
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014584:	f7ff ff5a 	bl	801443c <prvInsertTimerInActiveList>
 8014588:	4603      	mov	r3, r0
 801458a:	2b00      	cmp	r3, #0
 801458c:	d070      	beq.n	8014670 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014590:	6a1b      	ldr	r3, [r3, #32]
 8014592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014594:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801459c:	f003 0304 	and.w	r3, r3, #4
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d065      	beq.n	8014670 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80145a4:	68ba      	ldr	r2, [r7, #8]
 80145a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145a8:	699b      	ldr	r3, [r3, #24]
 80145aa:	441a      	add	r2, r3
 80145ac:	2300      	movs	r3, #0
 80145ae:	9300      	str	r3, [sp, #0]
 80145b0:	2300      	movs	r3, #0
 80145b2:	2100      	movs	r1, #0
 80145b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145b6:	f7ff fdfb 	bl	80141b0 <xTimerGenericCommand>
 80145ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80145bc:	6a3b      	ldr	r3, [r7, #32]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d156      	bne.n	8014670 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80145c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145c6:	b672      	cpsid	i
 80145c8:	f383 8811 	msr	BASEPRI, r3
 80145cc:	f3bf 8f6f 	isb	sy
 80145d0:	f3bf 8f4f 	dsb	sy
 80145d4:	b662      	cpsie	i
 80145d6:	61bb      	str	r3, [r7, #24]
}
 80145d8:	bf00      	nop
 80145da:	bf00      	nop
 80145dc:	e7fd      	b.n	80145da <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80145de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80145e4:	f023 0301 	bic.w	r3, r3, #1
 80145e8:	b2da      	uxtb	r2, r3
 80145ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80145f0:	e03f      	b.n	8014672 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80145f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80145f8:	f043 0301 	orr.w	r3, r3, #1
 80145fc:	b2da      	uxtb	r2, r3
 80145fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014600:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014604:	68ba      	ldr	r2, [r7, #8]
 8014606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014608:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801460a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801460c:	699b      	ldr	r3, [r3, #24]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d10d      	bne.n	801462e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8014612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014616:	b672      	cpsid	i
 8014618:	f383 8811 	msr	BASEPRI, r3
 801461c:	f3bf 8f6f 	isb	sy
 8014620:	f3bf 8f4f 	dsb	sy
 8014624:	b662      	cpsie	i
 8014626:	617b      	str	r3, [r7, #20]
}
 8014628:	bf00      	nop
 801462a:	bf00      	nop
 801462c:	e7fd      	b.n	801462a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014630:	699a      	ldr	r2, [r3, #24]
 8014632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014634:	18d1      	adds	r1, r2, r3
 8014636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801463a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801463c:	f7ff fefe 	bl	801443c <prvInsertTimerInActiveList>
					break;
 8014640:	e017      	b.n	8014672 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014644:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014648:	f003 0302 	and.w	r3, r3, #2
 801464c:	2b00      	cmp	r3, #0
 801464e:	d103      	bne.n	8014658 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8014650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014652:	f000 fbdb 	bl	8014e0c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014656:	e00c      	b.n	8014672 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801465a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801465e:	f023 0301 	bic.w	r3, r3, #1
 8014662:	b2da      	uxtb	r2, r3
 8014664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014666:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801466a:	e002      	b.n	8014672 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 801466c:	bf00      	nop
 801466e:	e000      	b.n	8014672 <prvProcessReceivedCommands+0x1b2>
					break;
 8014670:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014672:	4b08      	ldr	r3, [pc, #32]	@ (8014694 <prvProcessReceivedCommands+0x1d4>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	1d39      	adds	r1, r7, #4
 8014678:	2200      	movs	r2, #0
 801467a:	4618      	mov	r0, r3
 801467c:	f7fe fa3a 	bl	8012af4 <xQueueReceive>
 8014680:	4603      	mov	r3, r0
 8014682:	2b00      	cmp	r3, #0
 8014684:	f47f af20 	bne.w	80144c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8014688:	bf00      	nop
 801468a:	bf00      	nop
 801468c:	3730      	adds	r7, #48	@ 0x30
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}
 8014692:	bf00      	nop
 8014694:	200058f0 	.word	0x200058f0

08014698 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b088      	sub	sp, #32
 801469c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801469e:	e04b      	b.n	8014738 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80146a0:	4b2f      	ldr	r3, [pc, #188]	@ (8014760 <prvSwitchTimerLists+0xc8>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	68db      	ldr	r3, [r3, #12]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146aa:	4b2d      	ldr	r3, [pc, #180]	@ (8014760 <prvSwitchTimerLists+0xc8>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	68db      	ldr	r3, [r3, #12]
 80146b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	3304      	adds	r3, #4
 80146b8:	4618      	mov	r0, r3
 80146ba:	f7fd fee9 	bl	8012490 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	6a1b      	ldr	r3, [r3, #32]
 80146c2:	68f8      	ldr	r0, [r7, #12]
 80146c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80146cc:	f003 0304 	and.w	r3, r3, #4
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d031      	beq.n	8014738 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	699b      	ldr	r3, [r3, #24]
 80146d8:	693a      	ldr	r2, [r7, #16]
 80146da:	4413      	add	r3, r2
 80146dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80146de:	68ba      	ldr	r2, [r7, #8]
 80146e0:	693b      	ldr	r3, [r7, #16]
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d90e      	bls.n	8014704 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	68ba      	ldr	r2, [r7, #8]
 80146ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	68fa      	ldr	r2, [r7, #12]
 80146f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80146f2:	4b1b      	ldr	r3, [pc, #108]	@ (8014760 <prvSwitchTimerLists+0xc8>)
 80146f4:	681a      	ldr	r2, [r3, #0]
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	3304      	adds	r3, #4
 80146fa:	4619      	mov	r1, r3
 80146fc:	4610      	mov	r0, r2
 80146fe:	f7fd fe8e 	bl	801241e <vListInsert>
 8014702:	e019      	b.n	8014738 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014704:	2300      	movs	r3, #0
 8014706:	9300      	str	r3, [sp, #0]
 8014708:	2300      	movs	r3, #0
 801470a:	693a      	ldr	r2, [r7, #16]
 801470c:	2100      	movs	r1, #0
 801470e:	68f8      	ldr	r0, [r7, #12]
 8014710:	f7ff fd4e 	bl	80141b0 <xTimerGenericCommand>
 8014714:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d10d      	bne.n	8014738 <prvSwitchTimerLists+0xa0>
	__asm volatile
 801471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014720:	b672      	cpsid	i
 8014722:	f383 8811 	msr	BASEPRI, r3
 8014726:	f3bf 8f6f 	isb	sy
 801472a:	f3bf 8f4f 	dsb	sy
 801472e:	b662      	cpsie	i
 8014730:	603b      	str	r3, [r7, #0]
}
 8014732:	bf00      	nop
 8014734:	bf00      	nop
 8014736:	e7fd      	b.n	8014734 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014738:	4b09      	ldr	r3, [pc, #36]	@ (8014760 <prvSwitchTimerLists+0xc8>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d1ae      	bne.n	80146a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014742:	4b07      	ldr	r3, [pc, #28]	@ (8014760 <prvSwitchTimerLists+0xc8>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014748:	4b06      	ldr	r3, [pc, #24]	@ (8014764 <prvSwitchTimerLists+0xcc>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	4a04      	ldr	r2, [pc, #16]	@ (8014760 <prvSwitchTimerLists+0xc8>)
 801474e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014750:	4a04      	ldr	r2, [pc, #16]	@ (8014764 <prvSwitchTimerLists+0xcc>)
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	6013      	str	r3, [r2, #0]
}
 8014756:	bf00      	nop
 8014758:	3718      	adds	r7, #24
 801475a:	46bd      	mov	sp, r7
 801475c:	bd80      	pop	{r7, pc}
 801475e:	bf00      	nop
 8014760:	200058e8 	.word	0x200058e8
 8014764:	200058ec 	.word	0x200058ec

08014768 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b082      	sub	sp, #8
 801476c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801476e:	f000 f94d 	bl	8014a0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014772:	4b15      	ldr	r3, [pc, #84]	@ (80147c8 <prvCheckForValidListAndQueue+0x60>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d120      	bne.n	80147bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801477a:	4814      	ldr	r0, [pc, #80]	@ (80147cc <prvCheckForValidListAndQueue+0x64>)
 801477c:	f7fd fdfe 	bl	801237c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014780:	4813      	ldr	r0, [pc, #76]	@ (80147d0 <prvCheckForValidListAndQueue+0x68>)
 8014782:	f7fd fdfb 	bl	801237c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014786:	4b13      	ldr	r3, [pc, #76]	@ (80147d4 <prvCheckForValidListAndQueue+0x6c>)
 8014788:	4a10      	ldr	r2, [pc, #64]	@ (80147cc <prvCheckForValidListAndQueue+0x64>)
 801478a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801478c:	4b12      	ldr	r3, [pc, #72]	@ (80147d8 <prvCheckForValidListAndQueue+0x70>)
 801478e:	4a10      	ldr	r2, [pc, #64]	@ (80147d0 <prvCheckForValidListAndQueue+0x68>)
 8014790:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014792:	2300      	movs	r3, #0
 8014794:	9300      	str	r3, [sp, #0]
 8014796:	4b11      	ldr	r3, [pc, #68]	@ (80147dc <prvCheckForValidListAndQueue+0x74>)
 8014798:	4a11      	ldr	r2, [pc, #68]	@ (80147e0 <prvCheckForValidListAndQueue+0x78>)
 801479a:	2110      	movs	r1, #16
 801479c:	200a      	movs	r0, #10
 801479e:	f7fd ff0d 	bl	80125bc <xQueueGenericCreateStatic>
 80147a2:	4603      	mov	r3, r0
 80147a4:	4a08      	ldr	r2, [pc, #32]	@ (80147c8 <prvCheckForValidListAndQueue+0x60>)
 80147a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80147a8:	4b07      	ldr	r3, [pc, #28]	@ (80147c8 <prvCheckForValidListAndQueue+0x60>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d005      	beq.n	80147bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80147b0:	4b05      	ldr	r3, [pc, #20]	@ (80147c8 <prvCheckForValidListAndQueue+0x60>)
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	490b      	ldr	r1, [pc, #44]	@ (80147e4 <prvCheckForValidListAndQueue+0x7c>)
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7fe fc42 	bl	8013040 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80147bc:	f000 f95c 	bl	8014a78 <vPortExitCritical>
}
 80147c0:	bf00      	nop
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
 80147c6:	bf00      	nop
 80147c8:	200058f0 	.word	0x200058f0
 80147cc:	200058c0 	.word	0x200058c0
 80147d0:	200058d4 	.word	0x200058d4
 80147d4:	200058e8 	.word	0x200058e8
 80147d8:	200058ec 	.word	0x200058ec
 80147dc:	2000599c 	.word	0x2000599c
 80147e0:	200058fc 	.word	0x200058fc
 80147e4:	080168d4 	.word	0x080168d4

080147e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80147e8:	b480      	push	{r7}
 80147ea:	b085      	sub	sp, #20
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	60f8      	str	r0, [r7, #12]
 80147f0:	60b9      	str	r1, [r7, #8]
 80147f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	3b04      	subs	r3, #4
 80147f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	3b04      	subs	r3, #4
 8014806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	f023 0201 	bic.w	r2, r3, #1
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	3b04      	subs	r3, #4
 8014816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014818:	4a0c      	ldr	r2, [pc, #48]	@ (801484c <pxPortInitialiseStack+0x64>)
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	3b14      	subs	r3, #20
 8014822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014824:	687a      	ldr	r2, [r7, #4]
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	3b04      	subs	r3, #4
 801482e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	f06f 0202 	mvn.w	r2, #2
 8014836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	3b20      	subs	r3, #32
 801483c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801483e:	68fb      	ldr	r3, [r7, #12]
}
 8014840:	4618      	mov	r0, r3
 8014842:	3714      	adds	r7, #20
 8014844:	46bd      	mov	sp, r7
 8014846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484a:	4770      	bx	lr
 801484c:	08014851 	.word	0x08014851

08014850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014850:	b480      	push	{r7}
 8014852:	b085      	sub	sp, #20
 8014854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014856:	2300      	movs	r3, #0
 8014858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801485a:	4b15      	ldr	r3, [pc, #84]	@ (80148b0 <prvTaskExitError+0x60>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014862:	d00d      	beq.n	8014880 <prvTaskExitError+0x30>
	__asm volatile
 8014864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014868:	b672      	cpsid	i
 801486a:	f383 8811 	msr	BASEPRI, r3
 801486e:	f3bf 8f6f 	isb	sy
 8014872:	f3bf 8f4f 	dsb	sy
 8014876:	b662      	cpsie	i
 8014878:	60fb      	str	r3, [r7, #12]
}
 801487a:	bf00      	nop
 801487c:	bf00      	nop
 801487e:	e7fd      	b.n	801487c <prvTaskExitError+0x2c>
	__asm volatile
 8014880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014884:	b672      	cpsid	i
 8014886:	f383 8811 	msr	BASEPRI, r3
 801488a:	f3bf 8f6f 	isb	sy
 801488e:	f3bf 8f4f 	dsb	sy
 8014892:	b662      	cpsie	i
 8014894:	60bb      	str	r3, [r7, #8]
}
 8014896:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014898:	bf00      	nop
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d0fc      	beq.n	801489a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80148a0:	bf00      	nop
 80148a2:	bf00      	nop
 80148a4:	3714      	adds	r7, #20
 80148a6:	46bd      	mov	sp, r7
 80148a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop
 80148b0:	2000002c 	.word	0x2000002c
	...

080148c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80148c0:	4b07      	ldr	r3, [pc, #28]	@ (80148e0 <pxCurrentTCBConst2>)
 80148c2:	6819      	ldr	r1, [r3, #0]
 80148c4:	6808      	ldr	r0, [r1, #0]
 80148c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ca:	f380 8809 	msr	PSP, r0
 80148ce:	f3bf 8f6f 	isb	sy
 80148d2:	f04f 0000 	mov.w	r0, #0
 80148d6:	f380 8811 	msr	BASEPRI, r0
 80148da:	4770      	bx	lr
 80148dc:	f3af 8000 	nop.w

080148e0 <pxCurrentTCBConst2>:
 80148e0:	200053c0 	.word	0x200053c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80148e4:	bf00      	nop
 80148e6:	bf00      	nop

080148e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80148e8:	4808      	ldr	r0, [pc, #32]	@ (801490c <prvPortStartFirstTask+0x24>)
 80148ea:	6800      	ldr	r0, [r0, #0]
 80148ec:	6800      	ldr	r0, [r0, #0]
 80148ee:	f380 8808 	msr	MSP, r0
 80148f2:	f04f 0000 	mov.w	r0, #0
 80148f6:	f380 8814 	msr	CONTROL, r0
 80148fa:	b662      	cpsie	i
 80148fc:	b661      	cpsie	f
 80148fe:	f3bf 8f4f 	dsb	sy
 8014902:	f3bf 8f6f 	isb	sy
 8014906:	df00      	svc	0
 8014908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801490a:	bf00      	nop
 801490c:	e000ed08 	.word	0xe000ed08

08014910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b084      	sub	sp, #16
 8014914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014916:	4b37      	ldr	r3, [pc, #220]	@ (80149f4 <xPortStartScheduler+0xe4>)
 8014918:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	781b      	ldrb	r3, [r3, #0]
 801491e:	b2db      	uxtb	r3, r3
 8014920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	22ff      	movs	r2, #255	@ 0xff
 8014926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	781b      	ldrb	r3, [r3, #0]
 801492c:	b2db      	uxtb	r3, r3
 801492e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014930:	78fb      	ldrb	r3, [r7, #3]
 8014932:	b2db      	uxtb	r3, r3
 8014934:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014938:	b2da      	uxtb	r2, r3
 801493a:	4b2f      	ldr	r3, [pc, #188]	@ (80149f8 <xPortStartScheduler+0xe8>)
 801493c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801493e:	4b2f      	ldr	r3, [pc, #188]	@ (80149fc <xPortStartScheduler+0xec>)
 8014940:	2207      	movs	r2, #7
 8014942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014944:	e009      	b.n	801495a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014946:	4b2d      	ldr	r3, [pc, #180]	@ (80149fc <xPortStartScheduler+0xec>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	3b01      	subs	r3, #1
 801494c:	4a2b      	ldr	r2, [pc, #172]	@ (80149fc <xPortStartScheduler+0xec>)
 801494e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014950:	78fb      	ldrb	r3, [r7, #3]
 8014952:	b2db      	uxtb	r3, r3
 8014954:	005b      	lsls	r3, r3, #1
 8014956:	b2db      	uxtb	r3, r3
 8014958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801495a:	78fb      	ldrb	r3, [r7, #3]
 801495c:	b2db      	uxtb	r3, r3
 801495e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014962:	2b80      	cmp	r3, #128	@ 0x80
 8014964:	d0ef      	beq.n	8014946 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014966:	4b25      	ldr	r3, [pc, #148]	@ (80149fc <xPortStartScheduler+0xec>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	f1c3 0307 	rsb	r3, r3, #7
 801496e:	2b04      	cmp	r3, #4
 8014970:	d00d      	beq.n	801498e <xPortStartScheduler+0x7e>
	__asm volatile
 8014972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014976:	b672      	cpsid	i
 8014978:	f383 8811 	msr	BASEPRI, r3
 801497c:	f3bf 8f6f 	isb	sy
 8014980:	f3bf 8f4f 	dsb	sy
 8014984:	b662      	cpsie	i
 8014986:	60bb      	str	r3, [r7, #8]
}
 8014988:	bf00      	nop
 801498a:	bf00      	nop
 801498c:	e7fd      	b.n	801498a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801498e:	4b1b      	ldr	r3, [pc, #108]	@ (80149fc <xPortStartScheduler+0xec>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	021b      	lsls	r3, r3, #8
 8014994:	4a19      	ldr	r2, [pc, #100]	@ (80149fc <xPortStartScheduler+0xec>)
 8014996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014998:	4b18      	ldr	r3, [pc, #96]	@ (80149fc <xPortStartScheduler+0xec>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80149a0:	4a16      	ldr	r2, [pc, #88]	@ (80149fc <xPortStartScheduler+0xec>)
 80149a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	b2da      	uxtb	r2, r3
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80149ac:	4b14      	ldr	r3, [pc, #80]	@ (8014a00 <xPortStartScheduler+0xf0>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	4a13      	ldr	r2, [pc, #76]	@ (8014a00 <xPortStartScheduler+0xf0>)
 80149b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80149b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80149b8:	4b11      	ldr	r3, [pc, #68]	@ (8014a00 <xPortStartScheduler+0xf0>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	4a10      	ldr	r2, [pc, #64]	@ (8014a00 <xPortStartScheduler+0xf0>)
 80149be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80149c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80149c4:	f000 f8dc 	bl	8014b80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80149c8:	4b0e      	ldr	r3, [pc, #56]	@ (8014a04 <xPortStartScheduler+0xf4>)
 80149ca:	2200      	movs	r2, #0
 80149cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80149ce:	f000 f8fb 	bl	8014bc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80149d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014a08 <xPortStartScheduler+0xf8>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	4a0c      	ldr	r2, [pc, #48]	@ (8014a08 <xPortStartScheduler+0xf8>)
 80149d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80149dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80149de:	f7ff ff83 	bl	80148e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80149e2:	f7ff f801 	bl	80139e8 <vTaskSwitchContext>
	prvTaskExitError();
 80149e6:	f7ff ff33 	bl	8014850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80149ea:	2300      	movs	r3, #0
}
 80149ec:	4618      	mov	r0, r3
 80149ee:	3710      	adds	r7, #16
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd80      	pop	{r7, pc}
 80149f4:	e000e400 	.word	0xe000e400
 80149f8:	200059ec 	.word	0x200059ec
 80149fc:	200059f0 	.word	0x200059f0
 8014a00:	e000ed20 	.word	0xe000ed20
 8014a04:	2000002c 	.word	0x2000002c
 8014a08:	e000ef34 	.word	0xe000ef34

08014a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b083      	sub	sp, #12
 8014a10:	af00      	add	r7, sp, #0
	__asm volatile
 8014a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a16:	b672      	cpsid	i
 8014a18:	f383 8811 	msr	BASEPRI, r3
 8014a1c:	f3bf 8f6f 	isb	sy
 8014a20:	f3bf 8f4f 	dsb	sy
 8014a24:	b662      	cpsie	i
 8014a26:	607b      	str	r3, [r7, #4]
}
 8014a28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014a2a:	4b11      	ldr	r3, [pc, #68]	@ (8014a70 <vPortEnterCritical+0x64>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	3301      	adds	r3, #1
 8014a30:	4a0f      	ldr	r2, [pc, #60]	@ (8014a70 <vPortEnterCritical+0x64>)
 8014a32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014a34:	4b0e      	ldr	r3, [pc, #56]	@ (8014a70 <vPortEnterCritical+0x64>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	2b01      	cmp	r3, #1
 8014a3a:	d112      	bne.n	8014a62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8014a74 <vPortEnterCritical+0x68>)
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	b2db      	uxtb	r3, r3
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d00d      	beq.n	8014a62 <vPortEnterCritical+0x56>
	__asm volatile
 8014a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a4a:	b672      	cpsid	i
 8014a4c:	f383 8811 	msr	BASEPRI, r3
 8014a50:	f3bf 8f6f 	isb	sy
 8014a54:	f3bf 8f4f 	dsb	sy
 8014a58:	b662      	cpsie	i
 8014a5a:	603b      	str	r3, [r7, #0]
}
 8014a5c:	bf00      	nop
 8014a5e:	bf00      	nop
 8014a60:	e7fd      	b.n	8014a5e <vPortEnterCritical+0x52>
	}
}
 8014a62:	bf00      	nop
 8014a64:	370c      	adds	r7, #12
 8014a66:	46bd      	mov	sp, r7
 8014a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6c:	4770      	bx	lr
 8014a6e:	bf00      	nop
 8014a70:	2000002c 	.word	0x2000002c
 8014a74:	e000ed04 	.word	0xe000ed04

08014a78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014a78:	b480      	push	{r7}
 8014a7a:	b083      	sub	sp, #12
 8014a7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014a7e:	4b13      	ldr	r3, [pc, #76]	@ (8014acc <vPortExitCritical+0x54>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d10d      	bne.n	8014aa2 <vPortExitCritical+0x2a>
	__asm volatile
 8014a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a8a:	b672      	cpsid	i
 8014a8c:	f383 8811 	msr	BASEPRI, r3
 8014a90:	f3bf 8f6f 	isb	sy
 8014a94:	f3bf 8f4f 	dsb	sy
 8014a98:	b662      	cpsie	i
 8014a9a:	607b      	str	r3, [r7, #4]
}
 8014a9c:	bf00      	nop
 8014a9e:	bf00      	nop
 8014aa0:	e7fd      	b.n	8014a9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8014aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8014acc <vPortExitCritical+0x54>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	3b01      	subs	r3, #1
 8014aa8:	4a08      	ldr	r2, [pc, #32]	@ (8014acc <vPortExitCritical+0x54>)
 8014aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014aac:	4b07      	ldr	r3, [pc, #28]	@ (8014acc <vPortExitCritical+0x54>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d105      	bne.n	8014ac0 <vPortExitCritical+0x48>
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014ab8:	683b      	ldr	r3, [r7, #0]
 8014aba:	f383 8811 	msr	BASEPRI, r3
}
 8014abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014ac0:	bf00      	nop
 8014ac2:	370c      	adds	r7, #12
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aca:	4770      	bx	lr
 8014acc:	2000002c 	.word	0x2000002c

08014ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014ad0:	f3ef 8009 	mrs	r0, PSP
 8014ad4:	f3bf 8f6f 	isb	sy
 8014ad8:	4b15      	ldr	r3, [pc, #84]	@ (8014b30 <pxCurrentTCBConst>)
 8014ada:	681a      	ldr	r2, [r3, #0]
 8014adc:	f01e 0f10 	tst.w	lr, #16
 8014ae0:	bf08      	it	eq
 8014ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aea:	6010      	str	r0, [r2, #0]
 8014aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014af4:	b672      	cpsid	i
 8014af6:	f380 8811 	msr	BASEPRI, r0
 8014afa:	f3bf 8f4f 	dsb	sy
 8014afe:	f3bf 8f6f 	isb	sy
 8014b02:	b662      	cpsie	i
 8014b04:	f7fe ff70 	bl	80139e8 <vTaskSwitchContext>
 8014b08:	f04f 0000 	mov.w	r0, #0
 8014b0c:	f380 8811 	msr	BASEPRI, r0
 8014b10:	bc09      	pop	{r0, r3}
 8014b12:	6819      	ldr	r1, [r3, #0]
 8014b14:	6808      	ldr	r0, [r1, #0]
 8014b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b1a:	f01e 0f10 	tst.w	lr, #16
 8014b1e:	bf08      	it	eq
 8014b20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014b24:	f380 8809 	msr	PSP, r0
 8014b28:	f3bf 8f6f 	isb	sy
 8014b2c:	4770      	bx	lr
 8014b2e:	bf00      	nop

08014b30 <pxCurrentTCBConst>:
 8014b30:	200053c0 	.word	0x200053c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014b34:	bf00      	nop
 8014b36:	bf00      	nop

08014b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b082      	sub	sp, #8
 8014b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8014b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b42:	b672      	cpsid	i
 8014b44:	f383 8811 	msr	BASEPRI, r3
 8014b48:	f3bf 8f6f 	isb	sy
 8014b4c:	f3bf 8f4f 	dsb	sy
 8014b50:	b662      	cpsie	i
 8014b52:	607b      	str	r3, [r7, #4]
}
 8014b54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014b56:	f7fe fe8b 	bl	8013870 <xTaskIncrementTick>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d003      	beq.n	8014b68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014b60:	4b06      	ldr	r3, [pc, #24]	@ (8014b7c <SysTick_Handler+0x44>)
 8014b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b66:	601a      	str	r2, [r3, #0]
 8014b68:	2300      	movs	r3, #0
 8014b6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	f383 8811 	msr	BASEPRI, r3
}
 8014b72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014b74:	bf00      	nop
 8014b76:	3708      	adds	r7, #8
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd80      	pop	{r7, pc}
 8014b7c:	e000ed04 	.word	0xe000ed04

08014b80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014b80:	b480      	push	{r7}
 8014b82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014b84:	4b0b      	ldr	r3, [pc, #44]	@ (8014bb4 <vPortSetupTimerInterrupt+0x34>)
 8014b86:	2200      	movs	r2, #0
 8014b88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8014bb8 <vPortSetupTimerInterrupt+0x38>)
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014b90:	4b0a      	ldr	r3, [pc, #40]	@ (8014bbc <vPortSetupTimerInterrupt+0x3c>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	4a0a      	ldr	r2, [pc, #40]	@ (8014bc0 <vPortSetupTimerInterrupt+0x40>)
 8014b96:	fba2 2303 	umull	r2, r3, r2, r3
 8014b9a:	099b      	lsrs	r3, r3, #6
 8014b9c:	4a09      	ldr	r2, [pc, #36]	@ (8014bc4 <vPortSetupTimerInterrupt+0x44>)
 8014b9e:	3b01      	subs	r3, #1
 8014ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014ba2:	4b04      	ldr	r3, [pc, #16]	@ (8014bb4 <vPortSetupTimerInterrupt+0x34>)
 8014ba4:	2207      	movs	r2, #7
 8014ba6:	601a      	str	r2, [r3, #0]
}
 8014ba8:	bf00      	nop
 8014baa:	46bd      	mov	sp, r7
 8014bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb0:	4770      	bx	lr
 8014bb2:	bf00      	nop
 8014bb4:	e000e010 	.word	0xe000e010
 8014bb8:	e000e018 	.word	0xe000e018
 8014bbc:	20000000 	.word	0x20000000
 8014bc0:	10624dd3 	.word	0x10624dd3
 8014bc4:	e000e014 	.word	0xe000e014

08014bc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014bc8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014bd8 <vPortEnableVFP+0x10>
 8014bcc:	6801      	ldr	r1, [r0, #0]
 8014bce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014bd2:	6001      	str	r1, [r0, #0]
 8014bd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014bd6:	bf00      	nop
 8014bd8:	e000ed88 	.word	0xe000ed88

08014bdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014bdc:	b480      	push	{r7}
 8014bde:	b085      	sub	sp, #20
 8014be0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014be2:	f3ef 8305 	mrs	r3, IPSR
 8014be6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	2b0f      	cmp	r3, #15
 8014bec:	d917      	bls.n	8014c1e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014bee:	4a1a      	ldr	r2, [pc, #104]	@ (8014c58 <vPortValidateInterruptPriority+0x7c>)
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	4413      	add	r3, r2
 8014bf4:	781b      	ldrb	r3, [r3, #0]
 8014bf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014bf8:	4b18      	ldr	r3, [pc, #96]	@ (8014c5c <vPortValidateInterruptPriority+0x80>)
 8014bfa:	781b      	ldrb	r3, [r3, #0]
 8014bfc:	7afa      	ldrb	r2, [r7, #11]
 8014bfe:	429a      	cmp	r2, r3
 8014c00:	d20d      	bcs.n	8014c1e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8014c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c06:	b672      	cpsid	i
 8014c08:	f383 8811 	msr	BASEPRI, r3
 8014c0c:	f3bf 8f6f 	isb	sy
 8014c10:	f3bf 8f4f 	dsb	sy
 8014c14:	b662      	cpsie	i
 8014c16:	607b      	str	r3, [r7, #4]
}
 8014c18:	bf00      	nop
 8014c1a:	bf00      	nop
 8014c1c:	e7fd      	b.n	8014c1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014c1e:	4b10      	ldr	r3, [pc, #64]	@ (8014c60 <vPortValidateInterruptPriority+0x84>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014c26:	4b0f      	ldr	r3, [pc, #60]	@ (8014c64 <vPortValidateInterruptPriority+0x88>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d90d      	bls.n	8014c4a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8014c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c32:	b672      	cpsid	i
 8014c34:	f383 8811 	msr	BASEPRI, r3
 8014c38:	f3bf 8f6f 	isb	sy
 8014c3c:	f3bf 8f4f 	dsb	sy
 8014c40:	b662      	cpsie	i
 8014c42:	603b      	str	r3, [r7, #0]
}
 8014c44:	bf00      	nop
 8014c46:	bf00      	nop
 8014c48:	e7fd      	b.n	8014c46 <vPortValidateInterruptPriority+0x6a>
	}
 8014c4a:	bf00      	nop
 8014c4c:	3714      	adds	r7, #20
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c54:	4770      	bx	lr
 8014c56:	bf00      	nop
 8014c58:	e000e3f0 	.word	0xe000e3f0
 8014c5c:	200059ec 	.word	0x200059ec
 8014c60:	e000ed0c 	.word	0xe000ed0c
 8014c64:	200059f0 	.word	0x200059f0

08014c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b08a      	sub	sp, #40	@ 0x28
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014c70:	2300      	movs	r3, #0
 8014c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014c74:	f7fe fd2c 	bl	80136d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014c78:	4b5f      	ldr	r3, [pc, #380]	@ (8014df8 <pvPortMalloc+0x190>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d101      	bne.n	8014c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014c80:	f000 f924 	bl	8014ecc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014c84:	4b5d      	ldr	r3, [pc, #372]	@ (8014dfc <pvPortMalloc+0x194>)
 8014c86:	681a      	ldr	r2, [r3, #0]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	4013      	ands	r3, r2
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	f040 8094 	bne.w	8014dba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d020      	beq.n	8014cda <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8014c98:	2208      	movs	r2, #8
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	4413      	add	r3, r2
 8014c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f003 0307 	and.w	r3, r3, #7
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d017      	beq.n	8014cda <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f023 0307 	bic.w	r3, r3, #7
 8014cb0:	3308      	adds	r3, #8
 8014cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f003 0307 	and.w	r3, r3, #7
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d00d      	beq.n	8014cda <pvPortMalloc+0x72>
	__asm volatile
 8014cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cc2:	b672      	cpsid	i
 8014cc4:	f383 8811 	msr	BASEPRI, r3
 8014cc8:	f3bf 8f6f 	isb	sy
 8014ccc:	f3bf 8f4f 	dsb	sy
 8014cd0:	b662      	cpsie	i
 8014cd2:	617b      	str	r3, [r7, #20]
}
 8014cd4:	bf00      	nop
 8014cd6:	bf00      	nop
 8014cd8:	e7fd      	b.n	8014cd6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d06c      	beq.n	8014dba <pvPortMalloc+0x152>
 8014ce0:	4b47      	ldr	r3, [pc, #284]	@ (8014e00 <pvPortMalloc+0x198>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	687a      	ldr	r2, [r7, #4]
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d867      	bhi.n	8014dba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014cea:	4b46      	ldr	r3, [pc, #280]	@ (8014e04 <pvPortMalloc+0x19c>)
 8014cec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014cee:	4b45      	ldr	r3, [pc, #276]	@ (8014e04 <pvPortMalloc+0x19c>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014cf4:	e004      	b.n	8014d00 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8014cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d02:	685b      	ldr	r3, [r3, #4]
 8014d04:	687a      	ldr	r2, [r7, #4]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d903      	bls.n	8014d12 <pvPortMalloc+0xaa>
 8014d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d1f1      	bne.n	8014cf6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014d12:	4b39      	ldr	r3, [pc, #228]	@ (8014df8 <pvPortMalloc+0x190>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d04e      	beq.n	8014dba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014d1c:	6a3b      	ldr	r3, [r7, #32]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	2208      	movs	r2, #8
 8014d22:	4413      	add	r3, r2
 8014d24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d28:	681a      	ldr	r2, [r3, #0]
 8014d2a:	6a3b      	ldr	r3, [r7, #32]
 8014d2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d30:	685a      	ldr	r2, [r3, #4]
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	1ad2      	subs	r2, r2, r3
 8014d36:	2308      	movs	r3, #8
 8014d38:	005b      	lsls	r3, r3, #1
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d922      	bls.n	8014d84 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	4413      	add	r3, r2
 8014d44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d46:	69bb      	ldr	r3, [r7, #24]
 8014d48:	f003 0307 	and.w	r3, r3, #7
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d00d      	beq.n	8014d6c <pvPortMalloc+0x104>
	__asm volatile
 8014d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d54:	b672      	cpsid	i
 8014d56:	f383 8811 	msr	BASEPRI, r3
 8014d5a:	f3bf 8f6f 	isb	sy
 8014d5e:	f3bf 8f4f 	dsb	sy
 8014d62:	b662      	cpsie	i
 8014d64:	613b      	str	r3, [r7, #16]
}
 8014d66:	bf00      	nop
 8014d68:	bf00      	nop
 8014d6a:	e7fd      	b.n	8014d68 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d6e:	685a      	ldr	r2, [r3, #4]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	1ad2      	subs	r2, r2, r3
 8014d74:	69bb      	ldr	r3, [r7, #24]
 8014d76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d7a:	687a      	ldr	r2, [r7, #4]
 8014d7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014d7e:	69b8      	ldr	r0, [r7, #24]
 8014d80:	f000 f906 	bl	8014f90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014d84:	4b1e      	ldr	r3, [pc, #120]	@ (8014e00 <pvPortMalloc+0x198>)
 8014d86:	681a      	ldr	r2, [r3, #0]
 8014d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d8a:	685b      	ldr	r3, [r3, #4]
 8014d8c:	1ad3      	subs	r3, r2, r3
 8014d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8014e00 <pvPortMalloc+0x198>)
 8014d90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014d92:	4b1b      	ldr	r3, [pc, #108]	@ (8014e00 <pvPortMalloc+0x198>)
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	4b1c      	ldr	r3, [pc, #112]	@ (8014e08 <pvPortMalloc+0x1a0>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	d203      	bcs.n	8014da6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014d9e:	4b18      	ldr	r3, [pc, #96]	@ (8014e00 <pvPortMalloc+0x198>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	4a19      	ldr	r2, [pc, #100]	@ (8014e08 <pvPortMalloc+0x1a0>)
 8014da4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014da8:	685a      	ldr	r2, [r3, #4]
 8014daa:	4b14      	ldr	r3, [pc, #80]	@ (8014dfc <pvPortMalloc+0x194>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	431a      	orrs	r2, r3
 8014db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014db2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014db6:	2200      	movs	r2, #0
 8014db8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014dba:	f7fe fc97 	bl	80136ec <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8014dbe:	69fb      	ldr	r3, [r7, #28]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d101      	bne.n	8014dc8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8014dc4:	f7ec f80a 	bl	8000ddc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014dc8:	69fb      	ldr	r3, [r7, #28]
 8014dca:	f003 0307 	and.w	r3, r3, #7
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d00d      	beq.n	8014dee <pvPortMalloc+0x186>
	__asm volatile
 8014dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dd6:	b672      	cpsid	i
 8014dd8:	f383 8811 	msr	BASEPRI, r3
 8014ddc:	f3bf 8f6f 	isb	sy
 8014de0:	f3bf 8f4f 	dsb	sy
 8014de4:	b662      	cpsie	i
 8014de6:	60fb      	str	r3, [r7, #12]
}
 8014de8:	bf00      	nop
 8014dea:	bf00      	nop
 8014dec:	e7fd      	b.n	8014dea <pvPortMalloc+0x182>
	return pvReturn;
 8014dee:	69fb      	ldr	r3, [r7, #28]
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	3728      	adds	r7, #40	@ 0x28
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}
 8014df8:	2000d9fc 	.word	0x2000d9fc
 8014dfc:	2000da08 	.word	0x2000da08
 8014e00:	2000da00 	.word	0x2000da00
 8014e04:	2000d9f4 	.word	0x2000d9f4
 8014e08:	2000da04 	.word	0x2000da04

08014e0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b086      	sub	sp, #24
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d04e      	beq.n	8014ebc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014e1e:	2308      	movs	r3, #8
 8014e20:	425b      	negs	r3, r3
 8014e22:	697a      	ldr	r2, [r7, #20]
 8014e24:	4413      	add	r3, r2
 8014e26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	685a      	ldr	r2, [r3, #4]
 8014e30:	4b24      	ldr	r3, [pc, #144]	@ (8014ec4 <vPortFree+0xb8>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	4013      	ands	r3, r2
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d10d      	bne.n	8014e56 <vPortFree+0x4a>
	__asm volatile
 8014e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e3e:	b672      	cpsid	i
 8014e40:	f383 8811 	msr	BASEPRI, r3
 8014e44:	f3bf 8f6f 	isb	sy
 8014e48:	f3bf 8f4f 	dsb	sy
 8014e4c:	b662      	cpsie	i
 8014e4e:	60fb      	str	r3, [r7, #12]
}
 8014e50:	bf00      	nop
 8014e52:	bf00      	nop
 8014e54:	e7fd      	b.n	8014e52 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014e56:	693b      	ldr	r3, [r7, #16]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d00d      	beq.n	8014e7a <vPortFree+0x6e>
	__asm volatile
 8014e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e62:	b672      	cpsid	i
 8014e64:	f383 8811 	msr	BASEPRI, r3
 8014e68:	f3bf 8f6f 	isb	sy
 8014e6c:	f3bf 8f4f 	dsb	sy
 8014e70:	b662      	cpsie	i
 8014e72:	60bb      	str	r3, [r7, #8]
}
 8014e74:	bf00      	nop
 8014e76:	bf00      	nop
 8014e78:	e7fd      	b.n	8014e76 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014e7a:	693b      	ldr	r3, [r7, #16]
 8014e7c:	685a      	ldr	r2, [r3, #4]
 8014e7e:	4b11      	ldr	r3, [pc, #68]	@ (8014ec4 <vPortFree+0xb8>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	4013      	ands	r3, r2
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d019      	beq.n	8014ebc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d115      	bne.n	8014ebc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	685a      	ldr	r2, [r3, #4]
 8014e94:	4b0b      	ldr	r3, [pc, #44]	@ (8014ec4 <vPortFree+0xb8>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	43db      	mvns	r3, r3
 8014e9a:	401a      	ands	r2, r3
 8014e9c:	693b      	ldr	r3, [r7, #16]
 8014e9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014ea0:	f7fe fc16 	bl	80136d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	685a      	ldr	r2, [r3, #4]
 8014ea8:	4b07      	ldr	r3, [pc, #28]	@ (8014ec8 <vPortFree+0xbc>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	4413      	add	r3, r2
 8014eae:	4a06      	ldr	r2, [pc, #24]	@ (8014ec8 <vPortFree+0xbc>)
 8014eb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014eb2:	6938      	ldr	r0, [r7, #16]
 8014eb4:	f000 f86c 	bl	8014f90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014eb8:	f7fe fc18 	bl	80136ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014ebc:	bf00      	nop
 8014ebe:	3718      	adds	r7, #24
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}
 8014ec4:	2000da08 	.word	0x2000da08
 8014ec8:	2000da00 	.word	0x2000da00

08014ecc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b085      	sub	sp, #20
 8014ed0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014ed6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014ed8:	4b27      	ldr	r3, [pc, #156]	@ (8014f78 <prvHeapInit+0xac>)
 8014eda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	f003 0307 	and.w	r3, r3, #7
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d00c      	beq.n	8014f00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	3307      	adds	r3, #7
 8014eea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	f023 0307 	bic.w	r3, r3, #7
 8014ef2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014ef4:	68ba      	ldr	r2, [r7, #8]
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	1ad3      	subs	r3, r2, r3
 8014efa:	4a1f      	ldr	r2, [pc, #124]	@ (8014f78 <prvHeapInit+0xac>)
 8014efc:	4413      	add	r3, r2
 8014efe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014f04:	4a1d      	ldr	r2, [pc, #116]	@ (8014f7c <prvHeapInit+0xb0>)
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8014f7c <prvHeapInit+0xb0>)
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	68ba      	ldr	r2, [r7, #8]
 8014f14:	4413      	add	r3, r2
 8014f16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014f18:	2208      	movs	r2, #8
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	1a9b      	subs	r3, r3, r2
 8014f1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	f023 0307 	bic.w	r3, r3, #7
 8014f26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	4a15      	ldr	r2, [pc, #84]	@ (8014f80 <prvHeapInit+0xb4>)
 8014f2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014f2e:	4b14      	ldr	r3, [pc, #80]	@ (8014f80 <prvHeapInit+0xb4>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	2200      	movs	r2, #0
 8014f34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014f36:	4b12      	ldr	r3, [pc, #72]	@ (8014f80 <prvHeapInit+0xb4>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	1ad2      	subs	r2, r2, r3
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8014f80 <prvHeapInit+0xb4>)
 8014f4e:	681a      	ldr	r2, [r3, #0]
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	685b      	ldr	r3, [r3, #4]
 8014f58:	4a0a      	ldr	r2, [pc, #40]	@ (8014f84 <prvHeapInit+0xb8>)
 8014f5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	685b      	ldr	r3, [r3, #4]
 8014f60:	4a09      	ldr	r2, [pc, #36]	@ (8014f88 <prvHeapInit+0xbc>)
 8014f62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014f64:	4b09      	ldr	r3, [pc, #36]	@ (8014f8c <prvHeapInit+0xc0>)
 8014f66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8014f6a:	601a      	str	r2, [r3, #0]
}
 8014f6c:	bf00      	nop
 8014f6e:	3714      	adds	r7, #20
 8014f70:	46bd      	mov	sp, r7
 8014f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f76:	4770      	bx	lr
 8014f78:	200059f4 	.word	0x200059f4
 8014f7c:	2000d9f4 	.word	0x2000d9f4
 8014f80:	2000d9fc 	.word	0x2000d9fc
 8014f84:	2000da04 	.word	0x2000da04
 8014f88:	2000da00 	.word	0x2000da00
 8014f8c:	2000da08 	.word	0x2000da08

08014f90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014f90:	b480      	push	{r7}
 8014f92:	b085      	sub	sp, #20
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014f98:	4b28      	ldr	r3, [pc, #160]	@ (801503c <prvInsertBlockIntoFreeList+0xac>)
 8014f9a:	60fb      	str	r3, [r7, #12]
 8014f9c:	e002      	b.n	8014fa4 <prvInsertBlockIntoFreeList+0x14>
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	60fb      	str	r3, [r7, #12]
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d8f7      	bhi.n	8014f9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	685b      	ldr	r3, [r3, #4]
 8014fb6:	68ba      	ldr	r2, [r7, #8]
 8014fb8:	4413      	add	r3, r2
 8014fba:	687a      	ldr	r2, [r7, #4]
 8014fbc:	429a      	cmp	r2, r3
 8014fbe:	d108      	bne.n	8014fd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	685a      	ldr	r2, [r3, #4]
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	685b      	ldr	r3, [r3, #4]
 8014fc8:	441a      	add	r2, r3
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	685b      	ldr	r3, [r3, #4]
 8014fda:	68ba      	ldr	r2, [r7, #8]
 8014fdc:	441a      	add	r2, r3
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d118      	bne.n	8015018 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	681a      	ldr	r2, [r3, #0]
 8014fea:	4b15      	ldr	r3, [pc, #84]	@ (8015040 <prvInsertBlockIntoFreeList+0xb0>)
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d00d      	beq.n	801500e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	685a      	ldr	r2, [r3, #4]
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	685b      	ldr	r3, [r3, #4]
 8014ffc:	441a      	add	r2, r3
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	681a      	ldr	r2, [r3, #0]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	601a      	str	r2, [r3, #0]
 801500c:	e008      	b.n	8015020 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801500e:	4b0c      	ldr	r3, [pc, #48]	@ (8015040 <prvInsertBlockIntoFreeList+0xb0>)
 8015010:	681a      	ldr	r2, [r3, #0]
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	601a      	str	r2, [r3, #0]
 8015016:	e003      	b.n	8015020 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	681a      	ldr	r2, [r3, #0]
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015020:	68fa      	ldr	r2, [r7, #12]
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	429a      	cmp	r2, r3
 8015026:	d002      	beq.n	801502e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	687a      	ldr	r2, [r7, #4]
 801502c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801502e:	bf00      	nop
 8015030:	3714      	adds	r7, #20
 8015032:	46bd      	mov	sp, r7
 8015034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015038:	4770      	bx	lr
 801503a:	bf00      	nop
 801503c:	2000d9f4 	.word	0x2000d9f4
 8015040:	2000d9fc 	.word	0x2000d9fc

08015044 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015048:	2201      	movs	r2, #1
 801504a:	490e      	ldr	r1, [pc, #56]	@ (8015084 <MX_USB_HOST_Init+0x40>)
 801504c:	480e      	ldr	r0, [pc, #56]	@ (8015088 <MX_USB_HOST_Init+0x44>)
 801504e:	f7fa ffa1 	bl	800ff94 <USBH_Init>
 8015052:	4603      	mov	r3, r0
 8015054:	2b00      	cmp	r3, #0
 8015056:	d001      	beq.n	801505c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015058:	f7ec ff5e 	bl	8001f18 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801505c:	490b      	ldr	r1, [pc, #44]	@ (801508c <MX_USB_HOST_Init+0x48>)
 801505e:	480a      	ldr	r0, [pc, #40]	@ (8015088 <MX_USB_HOST_Init+0x44>)
 8015060:	f7fb f865 	bl	801012e <USBH_RegisterClass>
 8015064:	4603      	mov	r3, r0
 8015066:	2b00      	cmp	r3, #0
 8015068:	d001      	beq.n	801506e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801506a:	f7ec ff55 	bl	8001f18 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801506e:	4806      	ldr	r0, [pc, #24]	@ (8015088 <MX_USB_HOST_Init+0x44>)
 8015070:	f7fb f8e9 	bl	8010246 <USBH_Start>
 8015074:	4603      	mov	r3, r0
 8015076:	2b00      	cmp	r3, #0
 8015078:	d001      	beq.n	801507e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801507a:	f7ec ff4d 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801507e:	bf00      	nop
 8015080:	bd80      	pop	{r7, pc}
 8015082:	bf00      	nop
 8015084:	08015091 	.word	0x08015091
 8015088:	2000da0c 	.word	0x2000da0c
 801508c:	2000000c 	.word	0x2000000c

08015090 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015090:	b480      	push	{r7}
 8015092:	b083      	sub	sp, #12
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	460b      	mov	r3, r1
 801509a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801509c:	78fb      	ldrb	r3, [r7, #3]
 801509e:	3b01      	subs	r3, #1
 80150a0:	2b04      	cmp	r3, #4
 80150a2:	d819      	bhi.n	80150d8 <USBH_UserProcess+0x48>
 80150a4:	a201      	add	r2, pc, #4	@ (adr r2, 80150ac <USBH_UserProcess+0x1c>)
 80150a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150aa:	bf00      	nop
 80150ac:	080150d9 	.word	0x080150d9
 80150b0:	080150c9 	.word	0x080150c9
 80150b4:	080150d9 	.word	0x080150d9
 80150b8:	080150d1 	.word	0x080150d1
 80150bc:	080150c1 	.word	0x080150c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80150c0:	4b09      	ldr	r3, [pc, #36]	@ (80150e8 <USBH_UserProcess+0x58>)
 80150c2:	2203      	movs	r2, #3
 80150c4:	701a      	strb	r2, [r3, #0]
  break;
 80150c6:	e008      	b.n	80150da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80150c8:	4b07      	ldr	r3, [pc, #28]	@ (80150e8 <USBH_UserProcess+0x58>)
 80150ca:	2202      	movs	r2, #2
 80150cc:	701a      	strb	r2, [r3, #0]
  break;
 80150ce:	e004      	b.n	80150da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80150d0:	4b05      	ldr	r3, [pc, #20]	@ (80150e8 <USBH_UserProcess+0x58>)
 80150d2:	2201      	movs	r2, #1
 80150d4:	701a      	strb	r2, [r3, #0]
  break;
 80150d6:	e000      	b.n	80150da <USBH_UserProcess+0x4a>

  default:
  break;
 80150d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80150da:	bf00      	nop
 80150dc:	370c      	adds	r7, #12
 80150de:	46bd      	mov	sp, r7
 80150e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop
 80150e8:	2000ddf0 	.word	0x2000ddf0

080150ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b08a      	sub	sp, #40	@ 0x28
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80150f4:	f107 0314 	add.w	r3, r7, #20
 80150f8:	2200      	movs	r2, #0
 80150fa:	601a      	str	r2, [r3, #0]
 80150fc:	605a      	str	r2, [r3, #4]
 80150fe:	609a      	str	r2, [r3, #8]
 8015100:	60da      	str	r2, [r3, #12]
 8015102:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801510c:	d13c      	bne.n	8015188 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801510e:	4b20      	ldr	r3, [pc, #128]	@ (8015190 <HAL_HCD_MspInit+0xa4>)
 8015110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015112:	4a1f      	ldr	r2, [pc, #124]	@ (8015190 <HAL_HCD_MspInit+0xa4>)
 8015114:	f043 0301 	orr.w	r3, r3, #1
 8015118:	6313      	str	r3, [r2, #48]	@ 0x30
 801511a:	4b1d      	ldr	r3, [pc, #116]	@ (8015190 <HAL_HCD_MspInit+0xa4>)
 801511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801511e:	f003 0301 	and.w	r3, r3, #1
 8015122:	613b      	str	r3, [r7, #16]
 8015124:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8015126:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801512a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801512c:	2302      	movs	r3, #2
 801512e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015130:	2300      	movs	r3, #0
 8015132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015134:	2303      	movs	r3, #3
 8015136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015138:	230a      	movs	r3, #10
 801513a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801513c:	f107 0314 	add.w	r3, r7, #20
 8015140:	4619      	mov	r1, r3
 8015142:	4814      	ldr	r0, [pc, #80]	@ (8015194 <HAL_HCD_MspInit+0xa8>)
 8015144:	f7ef fcf6 	bl	8004b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015148:	4b11      	ldr	r3, [pc, #68]	@ (8015190 <HAL_HCD_MspInit+0xa4>)
 801514a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801514c:	4a10      	ldr	r2, [pc, #64]	@ (8015190 <HAL_HCD_MspInit+0xa4>)
 801514e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015152:	6353      	str	r3, [r2, #52]	@ 0x34
 8015154:	4b0e      	ldr	r3, [pc, #56]	@ (8015190 <HAL_HCD_MspInit+0xa4>)
 8015156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801515c:	60fb      	str	r3, [r7, #12]
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	4b0b      	ldr	r3, [pc, #44]	@ (8015190 <HAL_HCD_MspInit+0xa4>)
 8015162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015164:	4a0a      	ldr	r2, [pc, #40]	@ (8015190 <HAL_HCD_MspInit+0xa4>)
 8015166:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801516a:	6453      	str	r3, [r2, #68]	@ 0x44
 801516c:	4b08      	ldr	r3, [pc, #32]	@ (8015190 <HAL_HCD_MspInit+0xa4>)
 801516e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015174:	60bb      	str	r3, [r7, #8]
 8015176:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015178:	2200      	movs	r2, #0
 801517a:	2105      	movs	r1, #5
 801517c:	2043      	movs	r0, #67	@ 0x43
 801517e:	f7ee fd6f 	bl	8003c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015182:	2043      	movs	r0, #67	@ 0x43
 8015184:	f7ee fd88 	bl	8003c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015188:	bf00      	nop
 801518a:	3728      	adds	r7, #40	@ 0x28
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	40023800 	.word	0x40023800
 8015194:	40020000 	.word	0x40020000

08015198 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b082      	sub	sp, #8
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7fb fc85 	bl	8010ab6 <USBH_LL_IncTimer>
}
 80151ac:	bf00      	nop
 80151ae:	3708      	adds	r7, #8
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}

080151b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b082      	sub	sp, #8
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80151c2:	4618      	mov	r0, r3
 80151c4:	f7fb fcc5 	bl	8010b52 <USBH_LL_Connect>
}
 80151c8:	bf00      	nop
 80151ca:	3708      	adds	r7, #8
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80151de:	4618      	mov	r0, r3
 80151e0:	f7fb fcd2 	bl	8010b88 <USBH_LL_Disconnect>
}
 80151e4:	bf00      	nop
 80151e6:	3708      	adds	r7, #8
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}

080151ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	460b      	mov	r3, r1
 80151f6:	70fb      	strb	r3, [r7, #3]
 80151f8:	4613      	mov	r3, r2
 80151fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015202:	4618      	mov	r0, r3
 8015204:	f7fb fd25 	bl	8010c52 <USBH_LL_NotifyURBChange>
#endif
}
 8015208:	bf00      	nop
 801520a:	3708      	adds	r7, #8
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}

08015210 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801521e:	4618      	mov	r0, r3
 8015220:	f7fb fc73 	bl	8010b0a <USBH_LL_PortEnabled>
}
 8015224:	bf00      	nop
 8015226:	3708      	adds	r7, #8
 8015228:	46bd      	mov	sp, r7
 801522a:	bd80      	pop	{r7, pc}

0801522c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b082      	sub	sp, #8
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801523a:	4618      	mov	r0, r3
 801523c:	f7fb fc77 	bl	8010b2e <USBH_LL_PortDisabled>
}
 8015240:	bf00      	nop
 8015242:	3708      	adds	r7, #8
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}

08015248 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8015256:	2b01      	cmp	r3, #1
 8015258:	d12a      	bne.n	80152b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801525a:	4a18      	ldr	r2, [pc, #96]	@ (80152bc <USBH_LL_Init+0x74>)
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	4a15      	ldr	r2, [pc, #84]	@ (80152bc <USBH_LL_Init+0x74>)
 8015266:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801526a:	4b14      	ldr	r3, [pc, #80]	@ (80152bc <USBH_LL_Init+0x74>)
 801526c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8015270:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015272:	4b12      	ldr	r3, [pc, #72]	@ (80152bc <USBH_LL_Init+0x74>)
 8015274:	2208      	movs	r2, #8
 8015276:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015278:	4b10      	ldr	r3, [pc, #64]	@ (80152bc <USBH_LL_Init+0x74>)
 801527a:	2201      	movs	r2, #1
 801527c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801527e:	4b0f      	ldr	r3, [pc, #60]	@ (80152bc <USBH_LL_Init+0x74>)
 8015280:	2200      	movs	r2, #0
 8015282:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015284:	4b0d      	ldr	r3, [pc, #52]	@ (80152bc <USBH_LL_Init+0x74>)
 8015286:	2202      	movs	r2, #2
 8015288:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801528a:	4b0c      	ldr	r3, [pc, #48]	@ (80152bc <USBH_LL_Init+0x74>)
 801528c:	2200      	movs	r2, #0
 801528e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015290:	480a      	ldr	r0, [pc, #40]	@ (80152bc <USBH_LL_Init+0x74>)
 8015292:	f7ef fe2c 	bl	8004eee <HAL_HCD_Init>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	d001      	beq.n	80152a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801529c:	f7ec fe3c 	bl	8001f18 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80152a0:	4806      	ldr	r0, [pc, #24]	@ (80152bc <USBH_LL_Init+0x74>)
 80152a2:	f7f0 fa8d 	bl	80057c0 <HAL_HCD_GetCurrentFrame>
 80152a6:	4603      	mov	r3, r0
 80152a8:	4619      	mov	r1, r3
 80152aa:	6878      	ldr	r0, [r7, #4]
 80152ac:	f7fb fbf4 	bl	8010a98 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80152b0:	2300      	movs	r3, #0
}
 80152b2:	4618      	mov	r0, r3
 80152b4:	3708      	adds	r7, #8
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bd80      	pop	{r7, pc}
 80152ba:	bf00      	nop
 80152bc:	2000ddf4 	.word	0x2000ddf4

080152c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b084      	sub	sp, #16
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152c8:	2300      	movs	r3, #0
 80152ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80152cc:	2300      	movs	r3, #0
 80152ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80152d6:	4618      	mov	r0, r3
 80152d8:	f7f0 f9fa 	bl	80056d0 <HAL_HCD_Start>
 80152dc:	4603      	mov	r3, r0
 80152de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80152e0:	7bfb      	ldrb	r3, [r7, #15]
 80152e2:	4618      	mov	r0, r3
 80152e4:	f000 f95e 	bl	80155a4 <USBH_Get_USB_Status>
 80152e8:	4603      	mov	r3, r0
 80152ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3710      	adds	r7, #16
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}

080152f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80152f6:	b580      	push	{r7, lr}
 80152f8:	b084      	sub	sp, #16
 80152fa:	af00      	add	r7, sp, #0
 80152fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152fe:	2300      	movs	r3, #0
 8015300:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015302:	2300      	movs	r3, #0
 8015304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801530c:	4618      	mov	r0, r3
 801530e:	f7f0 fa02 	bl	8005716 <HAL_HCD_Stop>
 8015312:	4603      	mov	r3, r0
 8015314:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015316:	7bfb      	ldrb	r3, [r7, #15]
 8015318:	4618      	mov	r0, r3
 801531a:	f000 f943 	bl	80155a4 <USBH_Get_USB_Status>
 801531e:	4603      	mov	r3, r0
 8015320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015322:	7bbb      	ldrb	r3, [r7, #14]
}
 8015324:	4618      	mov	r0, r3
 8015326:	3710      	adds	r7, #16
 8015328:	46bd      	mov	sp, r7
 801532a:	bd80      	pop	{r7, pc}

0801532c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b084      	sub	sp, #16
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8015334:	2301      	movs	r3, #1
 8015336:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801533e:	4618      	mov	r0, r3
 8015340:	f7f0 fa4c 	bl	80057dc <HAL_HCD_GetCurrentSpeed>
 8015344:	4603      	mov	r3, r0
 8015346:	2b02      	cmp	r3, #2
 8015348:	d00c      	beq.n	8015364 <USBH_LL_GetSpeed+0x38>
 801534a:	2b02      	cmp	r3, #2
 801534c:	d80d      	bhi.n	801536a <USBH_LL_GetSpeed+0x3e>
 801534e:	2b00      	cmp	r3, #0
 8015350:	d002      	beq.n	8015358 <USBH_LL_GetSpeed+0x2c>
 8015352:	2b01      	cmp	r3, #1
 8015354:	d003      	beq.n	801535e <USBH_LL_GetSpeed+0x32>
 8015356:	e008      	b.n	801536a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015358:	2300      	movs	r3, #0
 801535a:	73fb      	strb	r3, [r7, #15]
    break;
 801535c:	e008      	b.n	8015370 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801535e:	2301      	movs	r3, #1
 8015360:	73fb      	strb	r3, [r7, #15]
    break;
 8015362:	e005      	b.n	8015370 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015364:	2302      	movs	r3, #2
 8015366:	73fb      	strb	r3, [r7, #15]
    break;
 8015368:	e002      	b.n	8015370 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801536a:	2301      	movs	r3, #1
 801536c:	73fb      	strb	r3, [r7, #15]
    break;
 801536e:	bf00      	nop
  }
  return  speed;
 8015370:	7bfb      	ldrb	r3, [r7, #15]
}
 8015372:	4618      	mov	r0, r3
 8015374:	3710      	adds	r7, #16
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}

0801537a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801537a:	b580      	push	{r7, lr}
 801537c:	b084      	sub	sp, #16
 801537e:	af00      	add	r7, sp, #0
 8015380:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015382:	2300      	movs	r3, #0
 8015384:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015386:	2300      	movs	r3, #0
 8015388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015390:	4618      	mov	r0, r3
 8015392:	f7f0 f9dd 	bl	8005750 <HAL_HCD_ResetPort>
 8015396:	4603      	mov	r3, r0
 8015398:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801539a:	7bfb      	ldrb	r3, [r7, #15]
 801539c:	4618      	mov	r0, r3
 801539e:	f000 f901 	bl	80155a4 <USBH_Get_USB_Status>
 80153a2:	4603      	mov	r3, r0
 80153a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80153a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3710      	adds	r7, #16
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd80      	pop	{r7, pc}

080153b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	460b      	mov	r3, r1
 80153ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80153c2:	78fa      	ldrb	r2, [r7, #3]
 80153c4:	4611      	mov	r1, r2
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7f0 f9e5 	bl	8005796 <HAL_HCD_HC_GetXferCount>
 80153cc:	4603      	mov	r3, r0
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80153d6:	b590      	push	{r4, r7, lr}
 80153d8:	b089      	sub	sp, #36	@ 0x24
 80153da:	af04      	add	r7, sp, #16
 80153dc:	6078      	str	r0, [r7, #4]
 80153de:	4608      	mov	r0, r1
 80153e0:	4611      	mov	r1, r2
 80153e2:	461a      	mov	r2, r3
 80153e4:	4603      	mov	r3, r0
 80153e6:	70fb      	strb	r3, [r7, #3]
 80153e8:	460b      	mov	r3, r1
 80153ea:	70bb      	strb	r3, [r7, #2]
 80153ec:	4613      	mov	r3, r2
 80153ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153f0:	2300      	movs	r3, #0
 80153f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80153f4:	2300      	movs	r3, #0
 80153f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80153fe:	787c      	ldrb	r4, [r7, #1]
 8015400:	78ba      	ldrb	r2, [r7, #2]
 8015402:	78f9      	ldrb	r1, [r7, #3]
 8015404:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015406:	9302      	str	r3, [sp, #8]
 8015408:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801540c:	9301      	str	r3, [sp, #4]
 801540e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015412:	9300      	str	r3, [sp, #0]
 8015414:	4623      	mov	r3, r4
 8015416:	f7ef fdd1 	bl	8004fbc <HAL_HCD_HC_Init>
 801541a:	4603      	mov	r3, r0
 801541c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801541e:	7bfb      	ldrb	r3, [r7, #15]
 8015420:	4618      	mov	r0, r3
 8015422:	f000 f8bf 	bl	80155a4 <USBH_Get_USB_Status>
 8015426:	4603      	mov	r3, r0
 8015428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801542a:	7bbb      	ldrb	r3, [r7, #14]
}
 801542c:	4618      	mov	r0, r3
 801542e:	3714      	adds	r7, #20
 8015430:	46bd      	mov	sp, r7
 8015432:	bd90      	pop	{r4, r7, pc}

08015434 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b084      	sub	sp, #16
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
 801543c:	460b      	mov	r3, r1
 801543e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015440:	2300      	movs	r3, #0
 8015442:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015444:	2300      	movs	r3, #0
 8015446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801544e:	78fa      	ldrb	r2, [r7, #3]
 8015450:	4611      	mov	r1, r2
 8015452:	4618      	mov	r0, r3
 8015454:	f7ef fe6a 	bl	800512c <HAL_HCD_HC_Halt>
 8015458:	4603      	mov	r3, r0
 801545a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801545c:	7bfb      	ldrb	r3, [r7, #15]
 801545e:	4618      	mov	r0, r3
 8015460:	f000 f8a0 	bl	80155a4 <USBH_Get_USB_Status>
 8015464:	4603      	mov	r3, r0
 8015466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015468:	7bbb      	ldrb	r3, [r7, #14]
}
 801546a:	4618      	mov	r0, r3
 801546c:	3710      	adds	r7, #16
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}

08015472 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8015472:	b590      	push	{r4, r7, lr}
 8015474:	b089      	sub	sp, #36	@ 0x24
 8015476:	af04      	add	r7, sp, #16
 8015478:	6078      	str	r0, [r7, #4]
 801547a:	4608      	mov	r0, r1
 801547c:	4611      	mov	r1, r2
 801547e:	461a      	mov	r2, r3
 8015480:	4603      	mov	r3, r0
 8015482:	70fb      	strb	r3, [r7, #3]
 8015484:	460b      	mov	r3, r1
 8015486:	70bb      	strb	r3, [r7, #2]
 8015488:	4613      	mov	r3, r2
 801548a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801548c:	2300      	movs	r3, #0
 801548e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015490:	2300      	movs	r3, #0
 8015492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801549a:	787c      	ldrb	r4, [r7, #1]
 801549c:	78ba      	ldrb	r2, [r7, #2]
 801549e:	78f9      	ldrb	r1, [r7, #3]
 80154a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80154a4:	9303      	str	r3, [sp, #12]
 80154a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80154a8:	9302      	str	r3, [sp, #8]
 80154aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154ac:	9301      	str	r3, [sp, #4]
 80154ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80154b2:	9300      	str	r3, [sp, #0]
 80154b4:	4623      	mov	r3, r4
 80154b6:	f7ef fe5d 	bl	8005174 <HAL_HCD_HC_SubmitRequest>
 80154ba:	4603      	mov	r3, r0
 80154bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80154be:	7bfb      	ldrb	r3, [r7, #15]
 80154c0:	4618      	mov	r0, r3
 80154c2:	f000 f86f 	bl	80155a4 <USBH_Get_USB_Status>
 80154c6:	4603      	mov	r3, r0
 80154c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80154ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80154cc:	4618      	mov	r0, r3
 80154ce:	3714      	adds	r7, #20
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd90      	pop	{r4, r7, pc}

080154d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b082      	sub	sp, #8
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
 80154dc:	460b      	mov	r3, r1
 80154de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80154e6:	78fa      	ldrb	r2, [r7, #3]
 80154e8:	4611      	mov	r1, r2
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7f0 f93e 	bl	800576c <HAL_HCD_HC_GetURBState>
 80154f0:	4603      	mov	r3, r0
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3708      	adds	r7, #8
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}

080154fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80154fa:	b580      	push	{r7, lr}
 80154fc:	b082      	sub	sp, #8
 80154fe:	af00      	add	r7, sp, #0
 8015500:	6078      	str	r0, [r7, #4]
 8015502:	460b      	mov	r3, r1
 8015504:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801550c:	2b01      	cmp	r3, #1
 801550e:	d103      	bne.n	8015518 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8015510:	78fb      	ldrb	r3, [r7, #3]
 8015512:	4618      	mov	r0, r3
 8015514:	f000 f872 	bl	80155fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8015518:	20c8      	movs	r0, #200	@ 0xc8
 801551a:	f7ee f82d 	bl	8003578 <HAL_Delay>
  return USBH_OK;
 801551e:	2300      	movs	r3, #0
}
 8015520:	4618      	mov	r0, r3
 8015522:	3708      	adds	r7, #8
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}

08015528 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8015528:	b480      	push	{r7}
 801552a:	b085      	sub	sp, #20
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
 8015530:	460b      	mov	r3, r1
 8015532:	70fb      	strb	r3, [r7, #3]
 8015534:	4613      	mov	r3, r2
 8015536:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801553e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8015540:	78fa      	ldrb	r2, [r7, #3]
 8015542:	68f9      	ldr	r1, [r7, #12]
 8015544:	4613      	mov	r3, r2
 8015546:	011b      	lsls	r3, r3, #4
 8015548:	1a9b      	subs	r3, r3, r2
 801554a:	009b      	lsls	r3, r3, #2
 801554c:	440b      	add	r3, r1
 801554e:	3317      	adds	r3, #23
 8015550:	781b      	ldrb	r3, [r3, #0]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d00a      	beq.n	801556c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015556:	78fa      	ldrb	r2, [r7, #3]
 8015558:	68f9      	ldr	r1, [r7, #12]
 801555a:	4613      	mov	r3, r2
 801555c:	011b      	lsls	r3, r3, #4
 801555e:	1a9b      	subs	r3, r3, r2
 8015560:	009b      	lsls	r3, r3, #2
 8015562:	440b      	add	r3, r1
 8015564:	333c      	adds	r3, #60	@ 0x3c
 8015566:	78ba      	ldrb	r2, [r7, #2]
 8015568:	701a      	strb	r2, [r3, #0]
 801556a:	e009      	b.n	8015580 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801556c:	78fa      	ldrb	r2, [r7, #3]
 801556e:	68f9      	ldr	r1, [r7, #12]
 8015570:	4613      	mov	r3, r2
 8015572:	011b      	lsls	r3, r3, #4
 8015574:	1a9b      	subs	r3, r3, r2
 8015576:	009b      	lsls	r3, r3, #2
 8015578:	440b      	add	r3, r1
 801557a:	333d      	adds	r3, #61	@ 0x3d
 801557c:	78ba      	ldrb	r2, [r7, #2]
 801557e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8015580:	2300      	movs	r3, #0
}
 8015582:	4618      	mov	r0, r3
 8015584:	3714      	adds	r7, #20
 8015586:	46bd      	mov	sp, r7
 8015588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558c:	4770      	bx	lr

0801558e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801558e:	b580      	push	{r7, lr}
 8015590:	b082      	sub	sp, #8
 8015592:	af00      	add	r7, sp, #0
 8015594:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015596:	6878      	ldr	r0, [r7, #4]
 8015598:	f7ed ffee 	bl	8003578 <HAL_Delay>
}
 801559c:	bf00      	nop
 801559e:	3708      	adds	r7, #8
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}

080155a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80155a4:	b480      	push	{r7}
 80155a6:	b085      	sub	sp, #20
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	4603      	mov	r3, r0
 80155ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80155ae:	2300      	movs	r3, #0
 80155b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80155b2:	79fb      	ldrb	r3, [r7, #7]
 80155b4:	2b03      	cmp	r3, #3
 80155b6:	d817      	bhi.n	80155e8 <USBH_Get_USB_Status+0x44>
 80155b8:	a201      	add	r2, pc, #4	@ (adr r2, 80155c0 <USBH_Get_USB_Status+0x1c>)
 80155ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155be:	bf00      	nop
 80155c0:	080155d1 	.word	0x080155d1
 80155c4:	080155d7 	.word	0x080155d7
 80155c8:	080155dd 	.word	0x080155dd
 80155cc:	080155e3 	.word	0x080155e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80155d0:	2300      	movs	r3, #0
 80155d2:	73fb      	strb	r3, [r7, #15]
    break;
 80155d4:	e00b      	b.n	80155ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80155d6:	2302      	movs	r3, #2
 80155d8:	73fb      	strb	r3, [r7, #15]
    break;
 80155da:	e008      	b.n	80155ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80155dc:	2301      	movs	r3, #1
 80155de:	73fb      	strb	r3, [r7, #15]
    break;
 80155e0:	e005      	b.n	80155ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80155e2:	2302      	movs	r3, #2
 80155e4:	73fb      	strb	r3, [r7, #15]
    break;
 80155e6:	e002      	b.n	80155ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80155e8:	2302      	movs	r3, #2
 80155ea:	73fb      	strb	r3, [r7, #15]
    break;
 80155ec:	bf00      	nop
  }
  return usb_status;
 80155ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3714      	adds	r7, #20
 80155f4:	46bd      	mov	sp, r7
 80155f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fa:	4770      	bx	lr

080155fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b084      	sub	sp, #16
 8015600:	af00      	add	r7, sp, #0
 8015602:	4603      	mov	r3, r0
 8015604:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8015606:	79fb      	ldrb	r3, [r7, #7]
 8015608:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801560a:	79fb      	ldrb	r3, [r7, #7]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d102      	bne.n	8015616 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8015610:	2300      	movs	r3, #0
 8015612:	73fb      	strb	r3, [r7, #15]
 8015614:	e001      	b.n	801561a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8015616:	2301      	movs	r3, #1
 8015618:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801561a:	7bfb      	ldrb	r3, [r7, #15]
 801561c:	461a      	mov	r2, r3
 801561e:	2120      	movs	r1, #32
 8015620:	4803      	ldr	r0, [pc, #12]	@ (8015630 <MX_DriverVbusFS+0x34>)
 8015622:	f7ef fc4b 	bl	8004ebc <HAL_GPIO_WritePin>
}
 8015626:	bf00      	nop
 8015628:	3710      	adds	r7, #16
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	40020c00 	.word	0x40020c00

08015634 <malloc>:
 8015634:	4b02      	ldr	r3, [pc, #8]	@ (8015640 <malloc+0xc>)
 8015636:	4601      	mov	r1, r0
 8015638:	6818      	ldr	r0, [r3, #0]
 801563a:	f000 b82d 	b.w	8015698 <_malloc_r>
 801563e:	bf00      	nop
 8015640:	2000003c 	.word	0x2000003c

08015644 <free>:
 8015644:	4b02      	ldr	r3, [pc, #8]	@ (8015650 <free+0xc>)
 8015646:	4601      	mov	r1, r0
 8015648:	6818      	ldr	r0, [r3, #0]
 801564a:	f000 bbb3 	b.w	8015db4 <_free_r>
 801564e:	bf00      	nop
 8015650:	2000003c 	.word	0x2000003c

08015654 <sbrk_aligned>:
 8015654:	b570      	push	{r4, r5, r6, lr}
 8015656:	4e0f      	ldr	r6, [pc, #60]	@ (8015694 <sbrk_aligned+0x40>)
 8015658:	460c      	mov	r4, r1
 801565a:	6831      	ldr	r1, [r6, #0]
 801565c:	4605      	mov	r5, r0
 801565e:	b911      	cbnz	r1, 8015666 <sbrk_aligned+0x12>
 8015660:	f000 fb4a 	bl	8015cf8 <_sbrk_r>
 8015664:	6030      	str	r0, [r6, #0]
 8015666:	4621      	mov	r1, r4
 8015668:	4628      	mov	r0, r5
 801566a:	f000 fb45 	bl	8015cf8 <_sbrk_r>
 801566e:	1c43      	adds	r3, r0, #1
 8015670:	d103      	bne.n	801567a <sbrk_aligned+0x26>
 8015672:	f04f 34ff 	mov.w	r4, #4294967295
 8015676:	4620      	mov	r0, r4
 8015678:	bd70      	pop	{r4, r5, r6, pc}
 801567a:	1cc4      	adds	r4, r0, #3
 801567c:	f024 0403 	bic.w	r4, r4, #3
 8015680:	42a0      	cmp	r0, r4
 8015682:	d0f8      	beq.n	8015676 <sbrk_aligned+0x22>
 8015684:	1a21      	subs	r1, r4, r0
 8015686:	4628      	mov	r0, r5
 8015688:	f000 fb36 	bl	8015cf8 <_sbrk_r>
 801568c:	3001      	adds	r0, #1
 801568e:	d1f2      	bne.n	8015676 <sbrk_aligned+0x22>
 8015690:	e7ef      	b.n	8015672 <sbrk_aligned+0x1e>
 8015692:	bf00      	nop
 8015694:	2000e1d4 	.word	0x2000e1d4

08015698 <_malloc_r>:
 8015698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801569c:	1ccd      	adds	r5, r1, #3
 801569e:	f025 0503 	bic.w	r5, r5, #3
 80156a2:	3508      	adds	r5, #8
 80156a4:	2d0c      	cmp	r5, #12
 80156a6:	bf38      	it	cc
 80156a8:	250c      	movcc	r5, #12
 80156aa:	2d00      	cmp	r5, #0
 80156ac:	4606      	mov	r6, r0
 80156ae:	db01      	blt.n	80156b4 <_malloc_r+0x1c>
 80156b0:	42a9      	cmp	r1, r5
 80156b2:	d904      	bls.n	80156be <_malloc_r+0x26>
 80156b4:	230c      	movs	r3, #12
 80156b6:	6033      	str	r3, [r6, #0]
 80156b8:	2000      	movs	r0, #0
 80156ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015794 <_malloc_r+0xfc>
 80156c2:	f000 f869 	bl	8015798 <__malloc_lock>
 80156c6:	f8d8 3000 	ldr.w	r3, [r8]
 80156ca:	461c      	mov	r4, r3
 80156cc:	bb44      	cbnz	r4, 8015720 <_malloc_r+0x88>
 80156ce:	4629      	mov	r1, r5
 80156d0:	4630      	mov	r0, r6
 80156d2:	f7ff ffbf 	bl	8015654 <sbrk_aligned>
 80156d6:	1c43      	adds	r3, r0, #1
 80156d8:	4604      	mov	r4, r0
 80156da:	d158      	bne.n	801578e <_malloc_r+0xf6>
 80156dc:	f8d8 4000 	ldr.w	r4, [r8]
 80156e0:	4627      	mov	r7, r4
 80156e2:	2f00      	cmp	r7, #0
 80156e4:	d143      	bne.n	801576e <_malloc_r+0xd6>
 80156e6:	2c00      	cmp	r4, #0
 80156e8:	d04b      	beq.n	8015782 <_malloc_r+0xea>
 80156ea:	6823      	ldr	r3, [r4, #0]
 80156ec:	4639      	mov	r1, r7
 80156ee:	4630      	mov	r0, r6
 80156f0:	eb04 0903 	add.w	r9, r4, r3
 80156f4:	f000 fb00 	bl	8015cf8 <_sbrk_r>
 80156f8:	4581      	cmp	r9, r0
 80156fa:	d142      	bne.n	8015782 <_malloc_r+0xea>
 80156fc:	6821      	ldr	r1, [r4, #0]
 80156fe:	1a6d      	subs	r5, r5, r1
 8015700:	4629      	mov	r1, r5
 8015702:	4630      	mov	r0, r6
 8015704:	f7ff ffa6 	bl	8015654 <sbrk_aligned>
 8015708:	3001      	adds	r0, #1
 801570a:	d03a      	beq.n	8015782 <_malloc_r+0xea>
 801570c:	6823      	ldr	r3, [r4, #0]
 801570e:	442b      	add	r3, r5
 8015710:	6023      	str	r3, [r4, #0]
 8015712:	f8d8 3000 	ldr.w	r3, [r8]
 8015716:	685a      	ldr	r2, [r3, #4]
 8015718:	bb62      	cbnz	r2, 8015774 <_malloc_r+0xdc>
 801571a:	f8c8 7000 	str.w	r7, [r8]
 801571e:	e00f      	b.n	8015740 <_malloc_r+0xa8>
 8015720:	6822      	ldr	r2, [r4, #0]
 8015722:	1b52      	subs	r2, r2, r5
 8015724:	d420      	bmi.n	8015768 <_malloc_r+0xd0>
 8015726:	2a0b      	cmp	r2, #11
 8015728:	d917      	bls.n	801575a <_malloc_r+0xc2>
 801572a:	1961      	adds	r1, r4, r5
 801572c:	42a3      	cmp	r3, r4
 801572e:	6025      	str	r5, [r4, #0]
 8015730:	bf18      	it	ne
 8015732:	6059      	strne	r1, [r3, #4]
 8015734:	6863      	ldr	r3, [r4, #4]
 8015736:	bf08      	it	eq
 8015738:	f8c8 1000 	streq.w	r1, [r8]
 801573c:	5162      	str	r2, [r4, r5]
 801573e:	604b      	str	r3, [r1, #4]
 8015740:	4630      	mov	r0, r6
 8015742:	f000 f82f 	bl	80157a4 <__malloc_unlock>
 8015746:	f104 000b 	add.w	r0, r4, #11
 801574a:	1d23      	adds	r3, r4, #4
 801574c:	f020 0007 	bic.w	r0, r0, #7
 8015750:	1ac2      	subs	r2, r0, r3
 8015752:	bf1c      	itt	ne
 8015754:	1a1b      	subne	r3, r3, r0
 8015756:	50a3      	strne	r3, [r4, r2]
 8015758:	e7af      	b.n	80156ba <_malloc_r+0x22>
 801575a:	6862      	ldr	r2, [r4, #4]
 801575c:	42a3      	cmp	r3, r4
 801575e:	bf0c      	ite	eq
 8015760:	f8c8 2000 	streq.w	r2, [r8]
 8015764:	605a      	strne	r2, [r3, #4]
 8015766:	e7eb      	b.n	8015740 <_malloc_r+0xa8>
 8015768:	4623      	mov	r3, r4
 801576a:	6864      	ldr	r4, [r4, #4]
 801576c:	e7ae      	b.n	80156cc <_malloc_r+0x34>
 801576e:	463c      	mov	r4, r7
 8015770:	687f      	ldr	r7, [r7, #4]
 8015772:	e7b6      	b.n	80156e2 <_malloc_r+0x4a>
 8015774:	461a      	mov	r2, r3
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	42a3      	cmp	r3, r4
 801577a:	d1fb      	bne.n	8015774 <_malloc_r+0xdc>
 801577c:	2300      	movs	r3, #0
 801577e:	6053      	str	r3, [r2, #4]
 8015780:	e7de      	b.n	8015740 <_malloc_r+0xa8>
 8015782:	230c      	movs	r3, #12
 8015784:	6033      	str	r3, [r6, #0]
 8015786:	4630      	mov	r0, r6
 8015788:	f000 f80c 	bl	80157a4 <__malloc_unlock>
 801578c:	e794      	b.n	80156b8 <_malloc_r+0x20>
 801578e:	6005      	str	r5, [r0, #0]
 8015790:	e7d6      	b.n	8015740 <_malloc_r+0xa8>
 8015792:	bf00      	nop
 8015794:	2000e1d8 	.word	0x2000e1d8

08015798 <__malloc_lock>:
 8015798:	4801      	ldr	r0, [pc, #4]	@ (80157a0 <__malloc_lock+0x8>)
 801579a:	f000 bafa 	b.w	8015d92 <__retarget_lock_acquire_recursive>
 801579e:	bf00      	nop
 80157a0:	2000e31c 	.word	0x2000e31c

080157a4 <__malloc_unlock>:
 80157a4:	4801      	ldr	r0, [pc, #4]	@ (80157ac <__malloc_unlock+0x8>)
 80157a6:	f000 baf5 	b.w	8015d94 <__retarget_lock_release_recursive>
 80157aa:	bf00      	nop
 80157ac:	2000e31c 	.word	0x2000e31c

080157b0 <std>:
 80157b0:	2300      	movs	r3, #0
 80157b2:	b510      	push	{r4, lr}
 80157b4:	4604      	mov	r4, r0
 80157b6:	e9c0 3300 	strd	r3, r3, [r0]
 80157ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80157be:	6083      	str	r3, [r0, #8]
 80157c0:	8181      	strh	r1, [r0, #12]
 80157c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80157c4:	81c2      	strh	r2, [r0, #14]
 80157c6:	6183      	str	r3, [r0, #24]
 80157c8:	4619      	mov	r1, r3
 80157ca:	2208      	movs	r2, #8
 80157cc:	305c      	adds	r0, #92	@ 0x5c
 80157ce:	f000 f9f9 	bl	8015bc4 <memset>
 80157d2:	4b0d      	ldr	r3, [pc, #52]	@ (8015808 <std+0x58>)
 80157d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80157d6:	4b0d      	ldr	r3, [pc, #52]	@ (801580c <std+0x5c>)
 80157d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80157da:	4b0d      	ldr	r3, [pc, #52]	@ (8015810 <std+0x60>)
 80157dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80157de:	4b0d      	ldr	r3, [pc, #52]	@ (8015814 <std+0x64>)
 80157e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80157e2:	4b0d      	ldr	r3, [pc, #52]	@ (8015818 <std+0x68>)
 80157e4:	6224      	str	r4, [r4, #32]
 80157e6:	429c      	cmp	r4, r3
 80157e8:	d006      	beq.n	80157f8 <std+0x48>
 80157ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80157ee:	4294      	cmp	r4, r2
 80157f0:	d002      	beq.n	80157f8 <std+0x48>
 80157f2:	33d0      	adds	r3, #208	@ 0xd0
 80157f4:	429c      	cmp	r4, r3
 80157f6:	d105      	bne.n	8015804 <std+0x54>
 80157f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80157fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015800:	f000 bac6 	b.w	8015d90 <__retarget_lock_init_recursive>
 8015804:	bd10      	pop	{r4, pc}
 8015806:	bf00      	nop
 8015808:	08015a15 	.word	0x08015a15
 801580c:	08015a37 	.word	0x08015a37
 8015810:	08015a6f 	.word	0x08015a6f
 8015814:	08015a93 	.word	0x08015a93
 8015818:	2000e1dc 	.word	0x2000e1dc

0801581c <stdio_exit_handler>:
 801581c:	4a02      	ldr	r2, [pc, #8]	@ (8015828 <stdio_exit_handler+0xc>)
 801581e:	4903      	ldr	r1, [pc, #12]	@ (801582c <stdio_exit_handler+0x10>)
 8015820:	4803      	ldr	r0, [pc, #12]	@ (8015830 <stdio_exit_handler+0x14>)
 8015822:	f000 b869 	b.w	80158f8 <_fwalk_sglue>
 8015826:	bf00      	nop
 8015828:	20000030 	.word	0x20000030
 801582c:	080164ed 	.word	0x080164ed
 8015830:	20000040 	.word	0x20000040

08015834 <cleanup_stdio>:
 8015834:	6841      	ldr	r1, [r0, #4]
 8015836:	4b0c      	ldr	r3, [pc, #48]	@ (8015868 <cleanup_stdio+0x34>)
 8015838:	4299      	cmp	r1, r3
 801583a:	b510      	push	{r4, lr}
 801583c:	4604      	mov	r4, r0
 801583e:	d001      	beq.n	8015844 <cleanup_stdio+0x10>
 8015840:	f000 fe54 	bl	80164ec <_fflush_r>
 8015844:	68a1      	ldr	r1, [r4, #8]
 8015846:	4b09      	ldr	r3, [pc, #36]	@ (801586c <cleanup_stdio+0x38>)
 8015848:	4299      	cmp	r1, r3
 801584a:	d002      	beq.n	8015852 <cleanup_stdio+0x1e>
 801584c:	4620      	mov	r0, r4
 801584e:	f000 fe4d 	bl	80164ec <_fflush_r>
 8015852:	68e1      	ldr	r1, [r4, #12]
 8015854:	4b06      	ldr	r3, [pc, #24]	@ (8015870 <cleanup_stdio+0x3c>)
 8015856:	4299      	cmp	r1, r3
 8015858:	d004      	beq.n	8015864 <cleanup_stdio+0x30>
 801585a:	4620      	mov	r0, r4
 801585c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015860:	f000 be44 	b.w	80164ec <_fflush_r>
 8015864:	bd10      	pop	{r4, pc}
 8015866:	bf00      	nop
 8015868:	2000e1dc 	.word	0x2000e1dc
 801586c:	2000e244 	.word	0x2000e244
 8015870:	2000e2ac 	.word	0x2000e2ac

08015874 <global_stdio_init.part.0>:
 8015874:	b510      	push	{r4, lr}
 8015876:	4b0b      	ldr	r3, [pc, #44]	@ (80158a4 <global_stdio_init.part.0+0x30>)
 8015878:	4c0b      	ldr	r4, [pc, #44]	@ (80158a8 <global_stdio_init.part.0+0x34>)
 801587a:	4a0c      	ldr	r2, [pc, #48]	@ (80158ac <global_stdio_init.part.0+0x38>)
 801587c:	601a      	str	r2, [r3, #0]
 801587e:	4620      	mov	r0, r4
 8015880:	2200      	movs	r2, #0
 8015882:	2104      	movs	r1, #4
 8015884:	f7ff ff94 	bl	80157b0 <std>
 8015888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801588c:	2201      	movs	r2, #1
 801588e:	2109      	movs	r1, #9
 8015890:	f7ff ff8e 	bl	80157b0 <std>
 8015894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015898:	2202      	movs	r2, #2
 801589a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801589e:	2112      	movs	r1, #18
 80158a0:	f7ff bf86 	b.w	80157b0 <std>
 80158a4:	2000e314 	.word	0x2000e314
 80158a8:	2000e1dc 	.word	0x2000e1dc
 80158ac:	0801581d 	.word	0x0801581d

080158b0 <__sfp_lock_acquire>:
 80158b0:	4801      	ldr	r0, [pc, #4]	@ (80158b8 <__sfp_lock_acquire+0x8>)
 80158b2:	f000 ba6e 	b.w	8015d92 <__retarget_lock_acquire_recursive>
 80158b6:	bf00      	nop
 80158b8:	2000e31d 	.word	0x2000e31d

080158bc <__sfp_lock_release>:
 80158bc:	4801      	ldr	r0, [pc, #4]	@ (80158c4 <__sfp_lock_release+0x8>)
 80158be:	f000 ba69 	b.w	8015d94 <__retarget_lock_release_recursive>
 80158c2:	bf00      	nop
 80158c4:	2000e31d 	.word	0x2000e31d

080158c8 <__sinit>:
 80158c8:	b510      	push	{r4, lr}
 80158ca:	4604      	mov	r4, r0
 80158cc:	f7ff fff0 	bl	80158b0 <__sfp_lock_acquire>
 80158d0:	6a23      	ldr	r3, [r4, #32]
 80158d2:	b11b      	cbz	r3, 80158dc <__sinit+0x14>
 80158d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158d8:	f7ff bff0 	b.w	80158bc <__sfp_lock_release>
 80158dc:	4b04      	ldr	r3, [pc, #16]	@ (80158f0 <__sinit+0x28>)
 80158de:	6223      	str	r3, [r4, #32]
 80158e0:	4b04      	ldr	r3, [pc, #16]	@ (80158f4 <__sinit+0x2c>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d1f5      	bne.n	80158d4 <__sinit+0xc>
 80158e8:	f7ff ffc4 	bl	8015874 <global_stdio_init.part.0>
 80158ec:	e7f2      	b.n	80158d4 <__sinit+0xc>
 80158ee:	bf00      	nop
 80158f0:	08015835 	.word	0x08015835
 80158f4:	2000e314 	.word	0x2000e314

080158f8 <_fwalk_sglue>:
 80158f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158fc:	4607      	mov	r7, r0
 80158fe:	4688      	mov	r8, r1
 8015900:	4614      	mov	r4, r2
 8015902:	2600      	movs	r6, #0
 8015904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015908:	f1b9 0901 	subs.w	r9, r9, #1
 801590c:	d505      	bpl.n	801591a <_fwalk_sglue+0x22>
 801590e:	6824      	ldr	r4, [r4, #0]
 8015910:	2c00      	cmp	r4, #0
 8015912:	d1f7      	bne.n	8015904 <_fwalk_sglue+0xc>
 8015914:	4630      	mov	r0, r6
 8015916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801591a:	89ab      	ldrh	r3, [r5, #12]
 801591c:	2b01      	cmp	r3, #1
 801591e:	d907      	bls.n	8015930 <_fwalk_sglue+0x38>
 8015920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015924:	3301      	adds	r3, #1
 8015926:	d003      	beq.n	8015930 <_fwalk_sglue+0x38>
 8015928:	4629      	mov	r1, r5
 801592a:	4638      	mov	r0, r7
 801592c:	47c0      	blx	r8
 801592e:	4306      	orrs	r6, r0
 8015930:	3568      	adds	r5, #104	@ 0x68
 8015932:	e7e9      	b.n	8015908 <_fwalk_sglue+0x10>

08015934 <iprintf>:
 8015934:	b40f      	push	{r0, r1, r2, r3}
 8015936:	b507      	push	{r0, r1, r2, lr}
 8015938:	4906      	ldr	r1, [pc, #24]	@ (8015954 <iprintf+0x20>)
 801593a:	ab04      	add	r3, sp, #16
 801593c:	6808      	ldr	r0, [r1, #0]
 801593e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015942:	6881      	ldr	r1, [r0, #8]
 8015944:	9301      	str	r3, [sp, #4]
 8015946:	f000 faa9 	bl	8015e9c <_vfiprintf_r>
 801594a:	b003      	add	sp, #12
 801594c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015950:	b004      	add	sp, #16
 8015952:	4770      	bx	lr
 8015954:	2000003c 	.word	0x2000003c

08015958 <_puts_r>:
 8015958:	6a03      	ldr	r3, [r0, #32]
 801595a:	b570      	push	{r4, r5, r6, lr}
 801595c:	6884      	ldr	r4, [r0, #8]
 801595e:	4605      	mov	r5, r0
 8015960:	460e      	mov	r6, r1
 8015962:	b90b      	cbnz	r3, 8015968 <_puts_r+0x10>
 8015964:	f7ff ffb0 	bl	80158c8 <__sinit>
 8015968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801596a:	07db      	lsls	r3, r3, #31
 801596c:	d405      	bmi.n	801597a <_puts_r+0x22>
 801596e:	89a3      	ldrh	r3, [r4, #12]
 8015970:	0598      	lsls	r0, r3, #22
 8015972:	d402      	bmi.n	801597a <_puts_r+0x22>
 8015974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015976:	f000 fa0c 	bl	8015d92 <__retarget_lock_acquire_recursive>
 801597a:	89a3      	ldrh	r3, [r4, #12]
 801597c:	0719      	lsls	r1, r3, #28
 801597e:	d502      	bpl.n	8015986 <_puts_r+0x2e>
 8015980:	6923      	ldr	r3, [r4, #16]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d135      	bne.n	80159f2 <_puts_r+0x9a>
 8015986:	4621      	mov	r1, r4
 8015988:	4628      	mov	r0, r5
 801598a:	f000 f8c5 	bl	8015b18 <__swsetup_r>
 801598e:	b380      	cbz	r0, 80159f2 <_puts_r+0x9a>
 8015990:	f04f 35ff 	mov.w	r5, #4294967295
 8015994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015996:	07da      	lsls	r2, r3, #31
 8015998:	d405      	bmi.n	80159a6 <_puts_r+0x4e>
 801599a:	89a3      	ldrh	r3, [r4, #12]
 801599c:	059b      	lsls	r3, r3, #22
 801599e:	d402      	bmi.n	80159a6 <_puts_r+0x4e>
 80159a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80159a2:	f000 f9f7 	bl	8015d94 <__retarget_lock_release_recursive>
 80159a6:	4628      	mov	r0, r5
 80159a8:	bd70      	pop	{r4, r5, r6, pc}
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	da04      	bge.n	80159b8 <_puts_r+0x60>
 80159ae:	69a2      	ldr	r2, [r4, #24]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	dc17      	bgt.n	80159e4 <_puts_r+0x8c>
 80159b4:	290a      	cmp	r1, #10
 80159b6:	d015      	beq.n	80159e4 <_puts_r+0x8c>
 80159b8:	6823      	ldr	r3, [r4, #0]
 80159ba:	1c5a      	adds	r2, r3, #1
 80159bc:	6022      	str	r2, [r4, #0]
 80159be:	7019      	strb	r1, [r3, #0]
 80159c0:	68a3      	ldr	r3, [r4, #8]
 80159c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80159c6:	3b01      	subs	r3, #1
 80159c8:	60a3      	str	r3, [r4, #8]
 80159ca:	2900      	cmp	r1, #0
 80159cc:	d1ed      	bne.n	80159aa <_puts_r+0x52>
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	da11      	bge.n	80159f6 <_puts_r+0x9e>
 80159d2:	4622      	mov	r2, r4
 80159d4:	210a      	movs	r1, #10
 80159d6:	4628      	mov	r0, r5
 80159d8:	f000 f85f 	bl	8015a9a <__swbuf_r>
 80159dc:	3001      	adds	r0, #1
 80159de:	d0d7      	beq.n	8015990 <_puts_r+0x38>
 80159e0:	250a      	movs	r5, #10
 80159e2:	e7d7      	b.n	8015994 <_puts_r+0x3c>
 80159e4:	4622      	mov	r2, r4
 80159e6:	4628      	mov	r0, r5
 80159e8:	f000 f857 	bl	8015a9a <__swbuf_r>
 80159ec:	3001      	adds	r0, #1
 80159ee:	d1e7      	bne.n	80159c0 <_puts_r+0x68>
 80159f0:	e7ce      	b.n	8015990 <_puts_r+0x38>
 80159f2:	3e01      	subs	r6, #1
 80159f4:	e7e4      	b.n	80159c0 <_puts_r+0x68>
 80159f6:	6823      	ldr	r3, [r4, #0]
 80159f8:	1c5a      	adds	r2, r3, #1
 80159fa:	6022      	str	r2, [r4, #0]
 80159fc:	220a      	movs	r2, #10
 80159fe:	701a      	strb	r2, [r3, #0]
 8015a00:	e7ee      	b.n	80159e0 <_puts_r+0x88>
	...

08015a04 <puts>:
 8015a04:	4b02      	ldr	r3, [pc, #8]	@ (8015a10 <puts+0xc>)
 8015a06:	4601      	mov	r1, r0
 8015a08:	6818      	ldr	r0, [r3, #0]
 8015a0a:	f7ff bfa5 	b.w	8015958 <_puts_r>
 8015a0e:	bf00      	nop
 8015a10:	2000003c 	.word	0x2000003c

08015a14 <__sread>:
 8015a14:	b510      	push	{r4, lr}
 8015a16:	460c      	mov	r4, r1
 8015a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a1c:	f000 f95a 	bl	8015cd4 <_read_r>
 8015a20:	2800      	cmp	r0, #0
 8015a22:	bfab      	itete	ge
 8015a24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015a26:	89a3      	ldrhlt	r3, [r4, #12]
 8015a28:	181b      	addge	r3, r3, r0
 8015a2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015a2e:	bfac      	ite	ge
 8015a30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015a32:	81a3      	strhlt	r3, [r4, #12]
 8015a34:	bd10      	pop	{r4, pc}

08015a36 <__swrite>:
 8015a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a3a:	461f      	mov	r7, r3
 8015a3c:	898b      	ldrh	r3, [r1, #12]
 8015a3e:	05db      	lsls	r3, r3, #23
 8015a40:	4605      	mov	r5, r0
 8015a42:	460c      	mov	r4, r1
 8015a44:	4616      	mov	r6, r2
 8015a46:	d505      	bpl.n	8015a54 <__swrite+0x1e>
 8015a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a4c:	2302      	movs	r3, #2
 8015a4e:	2200      	movs	r2, #0
 8015a50:	f000 f92e 	bl	8015cb0 <_lseek_r>
 8015a54:	89a3      	ldrh	r3, [r4, #12]
 8015a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015a5e:	81a3      	strh	r3, [r4, #12]
 8015a60:	4632      	mov	r2, r6
 8015a62:	463b      	mov	r3, r7
 8015a64:	4628      	mov	r0, r5
 8015a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a6a:	f000 b955 	b.w	8015d18 <_write_r>

08015a6e <__sseek>:
 8015a6e:	b510      	push	{r4, lr}
 8015a70:	460c      	mov	r4, r1
 8015a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a76:	f000 f91b 	bl	8015cb0 <_lseek_r>
 8015a7a:	1c43      	adds	r3, r0, #1
 8015a7c:	89a3      	ldrh	r3, [r4, #12]
 8015a7e:	bf15      	itete	ne
 8015a80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015a82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015a86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015a8a:	81a3      	strheq	r3, [r4, #12]
 8015a8c:	bf18      	it	ne
 8015a8e:	81a3      	strhne	r3, [r4, #12]
 8015a90:	bd10      	pop	{r4, pc}

08015a92 <__sclose>:
 8015a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a96:	f000 b89d 	b.w	8015bd4 <_close_r>

08015a9a <__swbuf_r>:
 8015a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a9c:	460e      	mov	r6, r1
 8015a9e:	4614      	mov	r4, r2
 8015aa0:	4605      	mov	r5, r0
 8015aa2:	b118      	cbz	r0, 8015aac <__swbuf_r+0x12>
 8015aa4:	6a03      	ldr	r3, [r0, #32]
 8015aa6:	b90b      	cbnz	r3, 8015aac <__swbuf_r+0x12>
 8015aa8:	f7ff ff0e 	bl	80158c8 <__sinit>
 8015aac:	69a3      	ldr	r3, [r4, #24]
 8015aae:	60a3      	str	r3, [r4, #8]
 8015ab0:	89a3      	ldrh	r3, [r4, #12]
 8015ab2:	071a      	lsls	r2, r3, #28
 8015ab4:	d501      	bpl.n	8015aba <__swbuf_r+0x20>
 8015ab6:	6923      	ldr	r3, [r4, #16]
 8015ab8:	b943      	cbnz	r3, 8015acc <__swbuf_r+0x32>
 8015aba:	4621      	mov	r1, r4
 8015abc:	4628      	mov	r0, r5
 8015abe:	f000 f82b 	bl	8015b18 <__swsetup_r>
 8015ac2:	b118      	cbz	r0, 8015acc <__swbuf_r+0x32>
 8015ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8015ac8:	4638      	mov	r0, r7
 8015aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015acc:	6823      	ldr	r3, [r4, #0]
 8015ace:	6922      	ldr	r2, [r4, #16]
 8015ad0:	1a98      	subs	r0, r3, r2
 8015ad2:	6963      	ldr	r3, [r4, #20]
 8015ad4:	b2f6      	uxtb	r6, r6
 8015ad6:	4283      	cmp	r3, r0
 8015ad8:	4637      	mov	r7, r6
 8015ada:	dc05      	bgt.n	8015ae8 <__swbuf_r+0x4e>
 8015adc:	4621      	mov	r1, r4
 8015ade:	4628      	mov	r0, r5
 8015ae0:	f000 fd04 	bl	80164ec <_fflush_r>
 8015ae4:	2800      	cmp	r0, #0
 8015ae6:	d1ed      	bne.n	8015ac4 <__swbuf_r+0x2a>
 8015ae8:	68a3      	ldr	r3, [r4, #8]
 8015aea:	3b01      	subs	r3, #1
 8015aec:	60a3      	str	r3, [r4, #8]
 8015aee:	6823      	ldr	r3, [r4, #0]
 8015af0:	1c5a      	adds	r2, r3, #1
 8015af2:	6022      	str	r2, [r4, #0]
 8015af4:	701e      	strb	r6, [r3, #0]
 8015af6:	6962      	ldr	r2, [r4, #20]
 8015af8:	1c43      	adds	r3, r0, #1
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d004      	beq.n	8015b08 <__swbuf_r+0x6e>
 8015afe:	89a3      	ldrh	r3, [r4, #12]
 8015b00:	07db      	lsls	r3, r3, #31
 8015b02:	d5e1      	bpl.n	8015ac8 <__swbuf_r+0x2e>
 8015b04:	2e0a      	cmp	r6, #10
 8015b06:	d1df      	bne.n	8015ac8 <__swbuf_r+0x2e>
 8015b08:	4621      	mov	r1, r4
 8015b0a:	4628      	mov	r0, r5
 8015b0c:	f000 fcee 	bl	80164ec <_fflush_r>
 8015b10:	2800      	cmp	r0, #0
 8015b12:	d0d9      	beq.n	8015ac8 <__swbuf_r+0x2e>
 8015b14:	e7d6      	b.n	8015ac4 <__swbuf_r+0x2a>
	...

08015b18 <__swsetup_r>:
 8015b18:	b538      	push	{r3, r4, r5, lr}
 8015b1a:	4b29      	ldr	r3, [pc, #164]	@ (8015bc0 <__swsetup_r+0xa8>)
 8015b1c:	4605      	mov	r5, r0
 8015b1e:	6818      	ldr	r0, [r3, #0]
 8015b20:	460c      	mov	r4, r1
 8015b22:	b118      	cbz	r0, 8015b2c <__swsetup_r+0x14>
 8015b24:	6a03      	ldr	r3, [r0, #32]
 8015b26:	b90b      	cbnz	r3, 8015b2c <__swsetup_r+0x14>
 8015b28:	f7ff fece 	bl	80158c8 <__sinit>
 8015b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b30:	0719      	lsls	r1, r3, #28
 8015b32:	d422      	bmi.n	8015b7a <__swsetup_r+0x62>
 8015b34:	06da      	lsls	r2, r3, #27
 8015b36:	d407      	bmi.n	8015b48 <__swsetup_r+0x30>
 8015b38:	2209      	movs	r2, #9
 8015b3a:	602a      	str	r2, [r5, #0]
 8015b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b40:	81a3      	strh	r3, [r4, #12]
 8015b42:	f04f 30ff 	mov.w	r0, #4294967295
 8015b46:	e033      	b.n	8015bb0 <__swsetup_r+0x98>
 8015b48:	0758      	lsls	r0, r3, #29
 8015b4a:	d512      	bpl.n	8015b72 <__swsetup_r+0x5a>
 8015b4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015b4e:	b141      	cbz	r1, 8015b62 <__swsetup_r+0x4a>
 8015b50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015b54:	4299      	cmp	r1, r3
 8015b56:	d002      	beq.n	8015b5e <__swsetup_r+0x46>
 8015b58:	4628      	mov	r0, r5
 8015b5a:	f000 f92b 	bl	8015db4 <_free_r>
 8015b5e:	2300      	movs	r3, #0
 8015b60:	6363      	str	r3, [r4, #52]	@ 0x34
 8015b62:	89a3      	ldrh	r3, [r4, #12]
 8015b64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015b68:	81a3      	strh	r3, [r4, #12]
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	6063      	str	r3, [r4, #4]
 8015b6e:	6923      	ldr	r3, [r4, #16]
 8015b70:	6023      	str	r3, [r4, #0]
 8015b72:	89a3      	ldrh	r3, [r4, #12]
 8015b74:	f043 0308 	orr.w	r3, r3, #8
 8015b78:	81a3      	strh	r3, [r4, #12]
 8015b7a:	6923      	ldr	r3, [r4, #16]
 8015b7c:	b94b      	cbnz	r3, 8015b92 <__swsetup_r+0x7a>
 8015b7e:	89a3      	ldrh	r3, [r4, #12]
 8015b80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015b88:	d003      	beq.n	8015b92 <__swsetup_r+0x7a>
 8015b8a:	4621      	mov	r1, r4
 8015b8c:	4628      	mov	r0, r5
 8015b8e:	f000 fcfb 	bl	8016588 <__smakebuf_r>
 8015b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b96:	f013 0201 	ands.w	r2, r3, #1
 8015b9a:	d00a      	beq.n	8015bb2 <__swsetup_r+0x9a>
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	60a2      	str	r2, [r4, #8]
 8015ba0:	6962      	ldr	r2, [r4, #20]
 8015ba2:	4252      	negs	r2, r2
 8015ba4:	61a2      	str	r2, [r4, #24]
 8015ba6:	6922      	ldr	r2, [r4, #16]
 8015ba8:	b942      	cbnz	r2, 8015bbc <__swsetup_r+0xa4>
 8015baa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015bae:	d1c5      	bne.n	8015b3c <__swsetup_r+0x24>
 8015bb0:	bd38      	pop	{r3, r4, r5, pc}
 8015bb2:	0799      	lsls	r1, r3, #30
 8015bb4:	bf58      	it	pl
 8015bb6:	6962      	ldrpl	r2, [r4, #20]
 8015bb8:	60a2      	str	r2, [r4, #8]
 8015bba:	e7f4      	b.n	8015ba6 <__swsetup_r+0x8e>
 8015bbc:	2000      	movs	r0, #0
 8015bbe:	e7f7      	b.n	8015bb0 <__swsetup_r+0x98>
 8015bc0:	2000003c 	.word	0x2000003c

08015bc4 <memset>:
 8015bc4:	4402      	add	r2, r0
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	4293      	cmp	r3, r2
 8015bca:	d100      	bne.n	8015bce <memset+0xa>
 8015bcc:	4770      	bx	lr
 8015bce:	f803 1b01 	strb.w	r1, [r3], #1
 8015bd2:	e7f9      	b.n	8015bc8 <memset+0x4>

08015bd4 <_close_r>:
 8015bd4:	b538      	push	{r3, r4, r5, lr}
 8015bd6:	4d06      	ldr	r5, [pc, #24]	@ (8015bf0 <_close_r+0x1c>)
 8015bd8:	2300      	movs	r3, #0
 8015bda:	4604      	mov	r4, r0
 8015bdc:	4608      	mov	r0, r1
 8015bde:	602b      	str	r3, [r5, #0]
 8015be0:	f7ec ff17 	bl	8002a12 <_close>
 8015be4:	1c43      	adds	r3, r0, #1
 8015be6:	d102      	bne.n	8015bee <_close_r+0x1a>
 8015be8:	682b      	ldr	r3, [r5, #0]
 8015bea:	b103      	cbz	r3, 8015bee <_close_r+0x1a>
 8015bec:	6023      	str	r3, [r4, #0]
 8015bee:	bd38      	pop	{r3, r4, r5, pc}
 8015bf0:	2000e318 	.word	0x2000e318

08015bf4 <_reclaim_reent>:
 8015bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8015cac <_reclaim_reent+0xb8>)
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	4283      	cmp	r3, r0
 8015bfa:	b570      	push	{r4, r5, r6, lr}
 8015bfc:	4604      	mov	r4, r0
 8015bfe:	d053      	beq.n	8015ca8 <_reclaim_reent+0xb4>
 8015c00:	69c3      	ldr	r3, [r0, #28]
 8015c02:	b31b      	cbz	r3, 8015c4c <_reclaim_reent+0x58>
 8015c04:	68db      	ldr	r3, [r3, #12]
 8015c06:	b163      	cbz	r3, 8015c22 <_reclaim_reent+0x2e>
 8015c08:	2500      	movs	r5, #0
 8015c0a:	69e3      	ldr	r3, [r4, #28]
 8015c0c:	68db      	ldr	r3, [r3, #12]
 8015c0e:	5959      	ldr	r1, [r3, r5]
 8015c10:	b9b1      	cbnz	r1, 8015c40 <_reclaim_reent+0x4c>
 8015c12:	3504      	adds	r5, #4
 8015c14:	2d80      	cmp	r5, #128	@ 0x80
 8015c16:	d1f8      	bne.n	8015c0a <_reclaim_reent+0x16>
 8015c18:	69e3      	ldr	r3, [r4, #28]
 8015c1a:	4620      	mov	r0, r4
 8015c1c:	68d9      	ldr	r1, [r3, #12]
 8015c1e:	f000 f8c9 	bl	8015db4 <_free_r>
 8015c22:	69e3      	ldr	r3, [r4, #28]
 8015c24:	6819      	ldr	r1, [r3, #0]
 8015c26:	b111      	cbz	r1, 8015c2e <_reclaim_reent+0x3a>
 8015c28:	4620      	mov	r0, r4
 8015c2a:	f000 f8c3 	bl	8015db4 <_free_r>
 8015c2e:	69e3      	ldr	r3, [r4, #28]
 8015c30:	689d      	ldr	r5, [r3, #8]
 8015c32:	b15d      	cbz	r5, 8015c4c <_reclaim_reent+0x58>
 8015c34:	4629      	mov	r1, r5
 8015c36:	4620      	mov	r0, r4
 8015c38:	682d      	ldr	r5, [r5, #0]
 8015c3a:	f000 f8bb 	bl	8015db4 <_free_r>
 8015c3e:	e7f8      	b.n	8015c32 <_reclaim_reent+0x3e>
 8015c40:	680e      	ldr	r6, [r1, #0]
 8015c42:	4620      	mov	r0, r4
 8015c44:	f000 f8b6 	bl	8015db4 <_free_r>
 8015c48:	4631      	mov	r1, r6
 8015c4a:	e7e1      	b.n	8015c10 <_reclaim_reent+0x1c>
 8015c4c:	6961      	ldr	r1, [r4, #20]
 8015c4e:	b111      	cbz	r1, 8015c56 <_reclaim_reent+0x62>
 8015c50:	4620      	mov	r0, r4
 8015c52:	f000 f8af 	bl	8015db4 <_free_r>
 8015c56:	69e1      	ldr	r1, [r4, #28]
 8015c58:	b111      	cbz	r1, 8015c60 <_reclaim_reent+0x6c>
 8015c5a:	4620      	mov	r0, r4
 8015c5c:	f000 f8aa 	bl	8015db4 <_free_r>
 8015c60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015c62:	b111      	cbz	r1, 8015c6a <_reclaim_reent+0x76>
 8015c64:	4620      	mov	r0, r4
 8015c66:	f000 f8a5 	bl	8015db4 <_free_r>
 8015c6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015c6c:	b111      	cbz	r1, 8015c74 <_reclaim_reent+0x80>
 8015c6e:	4620      	mov	r0, r4
 8015c70:	f000 f8a0 	bl	8015db4 <_free_r>
 8015c74:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8015c76:	b111      	cbz	r1, 8015c7e <_reclaim_reent+0x8a>
 8015c78:	4620      	mov	r0, r4
 8015c7a:	f000 f89b 	bl	8015db4 <_free_r>
 8015c7e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8015c80:	b111      	cbz	r1, 8015c88 <_reclaim_reent+0x94>
 8015c82:	4620      	mov	r0, r4
 8015c84:	f000 f896 	bl	8015db4 <_free_r>
 8015c88:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8015c8a:	b111      	cbz	r1, 8015c92 <_reclaim_reent+0x9e>
 8015c8c:	4620      	mov	r0, r4
 8015c8e:	f000 f891 	bl	8015db4 <_free_r>
 8015c92:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015c94:	b111      	cbz	r1, 8015c9c <_reclaim_reent+0xa8>
 8015c96:	4620      	mov	r0, r4
 8015c98:	f000 f88c 	bl	8015db4 <_free_r>
 8015c9c:	6a23      	ldr	r3, [r4, #32]
 8015c9e:	b11b      	cbz	r3, 8015ca8 <_reclaim_reent+0xb4>
 8015ca0:	4620      	mov	r0, r4
 8015ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ca6:	4718      	bx	r3
 8015ca8:	bd70      	pop	{r4, r5, r6, pc}
 8015caa:	bf00      	nop
 8015cac:	2000003c 	.word	0x2000003c

08015cb0 <_lseek_r>:
 8015cb0:	b538      	push	{r3, r4, r5, lr}
 8015cb2:	4d07      	ldr	r5, [pc, #28]	@ (8015cd0 <_lseek_r+0x20>)
 8015cb4:	4604      	mov	r4, r0
 8015cb6:	4608      	mov	r0, r1
 8015cb8:	4611      	mov	r1, r2
 8015cba:	2200      	movs	r2, #0
 8015cbc:	602a      	str	r2, [r5, #0]
 8015cbe:	461a      	mov	r2, r3
 8015cc0:	f7ec fece 	bl	8002a60 <_lseek>
 8015cc4:	1c43      	adds	r3, r0, #1
 8015cc6:	d102      	bne.n	8015cce <_lseek_r+0x1e>
 8015cc8:	682b      	ldr	r3, [r5, #0]
 8015cca:	b103      	cbz	r3, 8015cce <_lseek_r+0x1e>
 8015ccc:	6023      	str	r3, [r4, #0]
 8015cce:	bd38      	pop	{r3, r4, r5, pc}
 8015cd0:	2000e318 	.word	0x2000e318

08015cd4 <_read_r>:
 8015cd4:	b538      	push	{r3, r4, r5, lr}
 8015cd6:	4d07      	ldr	r5, [pc, #28]	@ (8015cf4 <_read_r+0x20>)
 8015cd8:	4604      	mov	r4, r0
 8015cda:	4608      	mov	r0, r1
 8015cdc:	4611      	mov	r1, r2
 8015cde:	2200      	movs	r2, #0
 8015ce0:	602a      	str	r2, [r5, #0]
 8015ce2:	461a      	mov	r2, r3
 8015ce4:	f7ec fe5c 	bl	80029a0 <_read>
 8015ce8:	1c43      	adds	r3, r0, #1
 8015cea:	d102      	bne.n	8015cf2 <_read_r+0x1e>
 8015cec:	682b      	ldr	r3, [r5, #0]
 8015cee:	b103      	cbz	r3, 8015cf2 <_read_r+0x1e>
 8015cf0:	6023      	str	r3, [r4, #0]
 8015cf2:	bd38      	pop	{r3, r4, r5, pc}
 8015cf4:	2000e318 	.word	0x2000e318

08015cf8 <_sbrk_r>:
 8015cf8:	b538      	push	{r3, r4, r5, lr}
 8015cfa:	4d06      	ldr	r5, [pc, #24]	@ (8015d14 <_sbrk_r+0x1c>)
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	4604      	mov	r4, r0
 8015d00:	4608      	mov	r0, r1
 8015d02:	602b      	str	r3, [r5, #0]
 8015d04:	f7ec feba 	bl	8002a7c <_sbrk>
 8015d08:	1c43      	adds	r3, r0, #1
 8015d0a:	d102      	bne.n	8015d12 <_sbrk_r+0x1a>
 8015d0c:	682b      	ldr	r3, [r5, #0]
 8015d0e:	b103      	cbz	r3, 8015d12 <_sbrk_r+0x1a>
 8015d10:	6023      	str	r3, [r4, #0]
 8015d12:	bd38      	pop	{r3, r4, r5, pc}
 8015d14:	2000e318 	.word	0x2000e318

08015d18 <_write_r>:
 8015d18:	b538      	push	{r3, r4, r5, lr}
 8015d1a:	4d07      	ldr	r5, [pc, #28]	@ (8015d38 <_write_r+0x20>)
 8015d1c:	4604      	mov	r4, r0
 8015d1e:	4608      	mov	r0, r1
 8015d20:	4611      	mov	r1, r2
 8015d22:	2200      	movs	r2, #0
 8015d24:	602a      	str	r2, [r5, #0]
 8015d26:	461a      	mov	r2, r3
 8015d28:	f7ec fe57 	bl	80029da <_write>
 8015d2c:	1c43      	adds	r3, r0, #1
 8015d2e:	d102      	bne.n	8015d36 <_write_r+0x1e>
 8015d30:	682b      	ldr	r3, [r5, #0]
 8015d32:	b103      	cbz	r3, 8015d36 <_write_r+0x1e>
 8015d34:	6023      	str	r3, [r4, #0]
 8015d36:	bd38      	pop	{r3, r4, r5, pc}
 8015d38:	2000e318 	.word	0x2000e318

08015d3c <__errno>:
 8015d3c:	4b01      	ldr	r3, [pc, #4]	@ (8015d44 <__errno+0x8>)
 8015d3e:	6818      	ldr	r0, [r3, #0]
 8015d40:	4770      	bx	lr
 8015d42:	bf00      	nop
 8015d44:	2000003c 	.word	0x2000003c

08015d48 <__libc_init_array>:
 8015d48:	b570      	push	{r4, r5, r6, lr}
 8015d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8015d80 <__libc_init_array+0x38>)
 8015d4c:	4c0d      	ldr	r4, [pc, #52]	@ (8015d84 <__libc_init_array+0x3c>)
 8015d4e:	1b64      	subs	r4, r4, r5
 8015d50:	10a4      	asrs	r4, r4, #2
 8015d52:	2600      	movs	r6, #0
 8015d54:	42a6      	cmp	r6, r4
 8015d56:	d109      	bne.n	8015d6c <__libc_init_array+0x24>
 8015d58:	4d0b      	ldr	r5, [pc, #44]	@ (8015d88 <__libc_init_array+0x40>)
 8015d5a:	4c0c      	ldr	r4, [pc, #48]	@ (8015d8c <__libc_init_array+0x44>)
 8015d5c:	f000 fc72 	bl	8016644 <_init>
 8015d60:	1b64      	subs	r4, r4, r5
 8015d62:	10a4      	asrs	r4, r4, #2
 8015d64:	2600      	movs	r6, #0
 8015d66:	42a6      	cmp	r6, r4
 8015d68:	d105      	bne.n	8015d76 <__libc_init_array+0x2e>
 8015d6a:	bd70      	pop	{r4, r5, r6, pc}
 8015d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d70:	4798      	blx	r3
 8015d72:	3601      	adds	r6, #1
 8015d74:	e7ee      	b.n	8015d54 <__libc_init_array+0xc>
 8015d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d7a:	4798      	blx	r3
 8015d7c:	3601      	adds	r6, #1
 8015d7e:	e7f2      	b.n	8015d66 <__libc_init_array+0x1e>
 8015d80:	0801698c 	.word	0x0801698c
 8015d84:	0801698c 	.word	0x0801698c
 8015d88:	0801698c 	.word	0x0801698c
 8015d8c:	08016990 	.word	0x08016990

08015d90 <__retarget_lock_init_recursive>:
 8015d90:	4770      	bx	lr

08015d92 <__retarget_lock_acquire_recursive>:
 8015d92:	4770      	bx	lr

08015d94 <__retarget_lock_release_recursive>:
 8015d94:	4770      	bx	lr

08015d96 <memcpy>:
 8015d96:	440a      	add	r2, r1
 8015d98:	4291      	cmp	r1, r2
 8015d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8015d9e:	d100      	bne.n	8015da2 <memcpy+0xc>
 8015da0:	4770      	bx	lr
 8015da2:	b510      	push	{r4, lr}
 8015da4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015dac:	4291      	cmp	r1, r2
 8015dae:	d1f9      	bne.n	8015da4 <memcpy+0xe>
 8015db0:	bd10      	pop	{r4, pc}
	...

08015db4 <_free_r>:
 8015db4:	b538      	push	{r3, r4, r5, lr}
 8015db6:	4605      	mov	r5, r0
 8015db8:	2900      	cmp	r1, #0
 8015dba:	d041      	beq.n	8015e40 <_free_r+0x8c>
 8015dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015dc0:	1f0c      	subs	r4, r1, #4
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	bfb8      	it	lt
 8015dc6:	18e4      	addlt	r4, r4, r3
 8015dc8:	f7ff fce6 	bl	8015798 <__malloc_lock>
 8015dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8015e44 <_free_r+0x90>)
 8015dce:	6813      	ldr	r3, [r2, #0]
 8015dd0:	b933      	cbnz	r3, 8015de0 <_free_r+0x2c>
 8015dd2:	6063      	str	r3, [r4, #4]
 8015dd4:	6014      	str	r4, [r2, #0]
 8015dd6:	4628      	mov	r0, r5
 8015dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ddc:	f7ff bce2 	b.w	80157a4 <__malloc_unlock>
 8015de0:	42a3      	cmp	r3, r4
 8015de2:	d908      	bls.n	8015df6 <_free_r+0x42>
 8015de4:	6820      	ldr	r0, [r4, #0]
 8015de6:	1821      	adds	r1, r4, r0
 8015de8:	428b      	cmp	r3, r1
 8015dea:	bf01      	itttt	eq
 8015dec:	6819      	ldreq	r1, [r3, #0]
 8015dee:	685b      	ldreq	r3, [r3, #4]
 8015df0:	1809      	addeq	r1, r1, r0
 8015df2:	6021      	streq	r1, [r4, #0]
 8015df4:	e7ed      	b.n	8015dd2 <_free_r+0x1e>
 8015df6:	461a      	mov	r2, r3
 8015df8:	685b      	ldr	r3, [r3, #4]
 8015dfa:	b10b      	cbz	r3, 8015e00 <_free_r+0x4c>
 8015dfc:	42a3      	cmp	r3, r4
 8015dfe:	d9fa      	bls.n	8015df6 <_free_r+0x42>
 8015e00:	6811      	ldr	r1, [r2, #0]
 8015e02:	1850      	adds	r0, r2, r1
 8015e04:	42a0      	cmp	r0, r4
 8015e06:	d10b      	bne.n	8015e20 <_free_r+0x6c>
 8015e08:	6820      	ldr	r0, [r4, #0]
 8015e0a:	4401      	add	r1, r0
 8015e0c:	1850      	adds	r0, r2, r1
 8015e0e:	4283      	cmp	r3, r0
 8015e10:	6011      	str	r1, [r2, #0]
 8015e12:	d1e0      	bne.n	8015dd6 <_free_r+0x22>
 8015e14:	6818      	ldr	r0, [r3, #0]
 8015e16:	685b      	ldr	r3, [r3, #4]
 8015e18:	6053      	str	r3, [r2, #4]
 8015e1a:	4408      	add	r0, r1
 8015e1c:	6010      	str	r0, [r2, #0]
 8015e1e:	e7da      	b.n	8015dd6 <_free_r+0x22>
 8015e20:	d902      	bls.n	8015e28 <_free_r+0x74>
 8015e22:	230c      	movs	r3, #12
 8015e24:	602b      	str	r3, [r5, #0]
 8015e26:	e7d6      	b.n	8015dd6 <_free_r+0x22>
 8015e28:	6820      	ldr	r0, [r4, #0]
 8015e2a:	1821      	adds	r1, r4, r0
 8015e2c:	428b      	cmp	r3, r1
 8015e2e:	bf04      	itt	eq
 8015e30:	6819      	ldreq	r1, [r3, #0]
 8015e32:	685b      	ldreq	r3, [r3, #4]
 8015e34:	6063      	str	r3, [r4, #4]
 8015e36:	bf04      	itt	eq
 8015e38:	1809      	addeq	r1, r1, r0
 8015e3a:	6021      	streq	r1, [r4, #0]
 8015e3c:	6054      	str	r4, [r2, #4]
 8015e3e:	e7ca      	b.n	8015dd6 <_free_r+0x22>
 8015e40:	bd38      	pop	{r3, r4, r5, pc}
 8015e42:	bf00      	nop
 8015e44:	2000e1d8 	.word	0x2000e1d8

08015e48 <__sfputc_r>:
 8015e48:	6893      	ldr	r3, [r2, #8]
 8015e4a:	3b01      	subs	r3, #1
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	b410      	push	{r4}
 8015e50:	6093      	str	r3, [r2, #8]
 8015e52:	da08      	bge.n	8015e66 <__sfputc_r+0x1e>
 8015e54:	6994      	ldr	r4, [r2, #24]
 8015e56:	42a3      	cmp	r3, r4
 8015e58:	db01      	blt.n	8015e5e <__sfputc_r+0x16>
 8015e5a:	290a      	cmp	r1, #10
 8015e5c:	d103      	bne.n	8015e66 <__sfputc_r+0x1e>
 8015e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e62:	f7ff be1a 	b.w	8015a9a <__swbuf_r>
 8015e66:	6813      	ldr	r3, [r2, #0]
 8015e68:	1c58      	adds	r0, r3, #1
 8015e6a:	6010      	str	r0, [r2, #0]
 8015e6c:	7019      	strb	r1, [r3, #0]
 8015e6e:	4608      	mov	r0, r1
 8015e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e74:	4770      	bx	lr

08015e76 <__sfputs_r>:
 8015e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e78:	4606      	mov	r6, r0
 8015e7a:	460f      	mov	r7, r1
 8015e7c:	4614      	mov	r4, r2
 8015e7e:	18d5      	adds	r5, r2, r3
 8015e80:	42ac      	cmp	r4, r5
 8015e82:	d101      	bne.n	8015e88 <__sfputs_r+0x12>
 8015e84:	2000      	movs	r0, #0
 8015e86:	e007      	b.n	8015e98 <__sfputs_r+0x22>
 8015e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e8c:	463a      	mov	r2, r7
 8015e8e:	4630      	mov	r0, r6
 8015e90:	f7ff ffda 	bl	8015e48 <__sfputc_r>
 8015e94:	1c43      	adds	r3, r0, #1
 8015e96:	d1f3      	bne.n	8015e80 <__sfputs_r+0xa>
 8015e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015e9c <_vfiprintf_r>:
 8015e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ea0:	460d      	mov	r5, r1
 8015ea2:	b09d      	sub	sp, #116	@ 0x74
 8015ea4:	4614      	mov	r4, r2
 8015ea6:	4698      	mov	r8, r3
 8015ea8:	4606      	mov	r6, r0
 8015eaa:	b118      	cbz	r0, 8015eb4 <_vfiprintf_r+0x18>
 8015eac:	6a03      	ldr	r3, [r0, #32]
 8015eae:	b90b      	cbnz	r3, 8015eb4 <_vfiprintf_r+0x18>
 8015eb0:	f7ff fd0a 	bl	80158c8 <__sinit>
 8015eb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015eb6:	07d9      	lsls	r1, r3, #31
 8015eb8:	d405      	bmi.n	8015ec6 <_vfiprintf_r+0x2a>
 8015eba:	89ab      	ldrh	r3, [r5, #12]
 8015ebc:	059a      	lsls	r2, r3, #22
 8015ebe:	d402      	bmi.n	8015ec6 <_vfiprintf_r+0x2a>
 8015ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015ec2:	f7ff ff66 	bl	8015d92 <__retarget_lock_acquire_recursive>
 8015ec6:	89ab      	ldrh	r3, [r5, #12]
 8015ec8:	071b      	lsls	r3, r3, #28
 8015eca:	d501      	bpl.n	8015ed0 <_vfiprintf_r+0x34>
 8015ecc:	692b      	ldr	r3, [r5, #16]
 8015ece:	b99b      	cbnz	r3, 8015ef8 <_vfiprintf_r+0x5c>
 8015ed0:	4629      	mov	r1, r5
 8015ed2:	4630      	mov	r0, r6
 8015ed4:	f7ff fe20 	bl	8015b18 <__swsetup_r>
 8015ed8:	b170      	cbz	r0, 8015ef8 <_vfiprintf_r+0x5c>
 8015eda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015edc:	07dc      	lsls	r4, r3, #31
 8015ede:	d504      	bpl.n	8015eea <_vfiprintf_r+0x4e>
 8015ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8015ee4:	b01d      	add	sp, #116	@ 0x74
 8015ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eea:	89ab      	ldrh	r3, [r5, #12]
 8015eec:	0598      	lsls	r0, r3, #22
 8015eee:	d4f7      	bmi.n	8015ee0 <_vfiprintf_r+0x44>
 8015ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015ef2:	f7ff ff4f 	bl	8015d94 <__retarget_lock_release_recursive>
 8015ef6:	e7f3      	b.n	8015ee0 <_vfiprintf_r+0x44>
 8015ef8:	2300      	movs	r3, #0
 8015efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8015efc:	2320      	movs	r3, #32
 8015efe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f06:	2330      	movs	r3, #48	@ 0x30
 8015f08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80160b8 <_vfiprintf_r+0x21c>
 8015f0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f10:	f04f 0901 	mov.w	r9, #1
 8015f14:	4623      	mov	r3, r4
 8015f16:	469a      	mov	sl, r3
 8015f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f1c:	b10a      	cbz	r2, 8015f22 <_vfiprintf_r+0x86>
 8015f1e:	2a25      	cmp	r2, #37	@ 0x25
 8015f20:	d1f9      	bne.n	8015f16 <_vfiprintf_r+0x7a>
 8015f22:	ebba 0b04 	subs.w	fp, sl, r4
 8015f26:	d00b      	beq.n	8015f40 <_vfiprintf_r+0xa4>
 8015f28:	465b      	mov	r3, fp
 8015f2a:	4622      	mov	r2, r4
 8015f2c:	4629      	mov	r1, r5
 8015f2e:	4630      	mov	r0, r6
 8015f30:	f7ff ffa1 	bl	8015e76 <__sfputs_r>
 8015f34:	3001      	adds	r0, #1
 8015f36:	f000 80a7 	beq.w	8016088 <_vfiprintf_r+0x1ec>
 8015f3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f3c:	445a      	add	r2, fp
 8015f3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f40:	f89a 3000 	ldrb.w	r3, [sl]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	f000 809f 	beq.w	8016088 <_vfiprintf_r+0x1ec>
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8015f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f54:	f10a 0a01 	add.w	sl, sl, #1
 8015f58:	9304      	str	r3, [sp, #16]
 8015f5a:	9307      	str	r3, [sp, #28]
 8015f5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015f60:	931a      	str	r3, [sp, #104]	@ 0x68
 8015f62:	4654      	mov	r4, sl
 8015f64:	2205      	movs	r2, #5
 8015f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f6a:	4853      	ldr	r0, [pc, #332]	@ (80160b8 <_vfiprintf_r+0x21c>)
 8015f6c:	f7ea f950 	bl	8000210 <memchr>
 8015f70:	9a04      	ldr	r2, [sp, #16]
 8015f72:	b9d8      	cbnz	r0, 8015fac <_vfiprintf_r+0x110>
 8015f74:	06d1      	lsls	r1, r2, #27
 8015f76:	bf44      	itt	mi
 8015f78:	2320      	movmi	r3, #32
 8015f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015f7e:	0713      	lsls	r3, r2, #28
 8015f80:	bf44      	itt	mi
 8015f82:	232b      	movmi	r3, #43	@ 0x2b
 8015f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015f88:	f89a 3000 	ldrb.w	r3, [sl]
 8015f8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8015f8e:	d015      	beq.n	8015fbc <_vfiprintf_r+0x120>
 8015f90:	9a07      	ldr	r2, [sp, #28]
 8015f92:	4654      	mov	r4, sl
 8015f94:	2000      	movs	r0, #0
 8015f96:	f04f 0c0a 	mov.w	ip, #10
 8015f9a:	4621      	mov	r1, r4
 8015f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fa0:	3b30      	subs	r3, #48	@ 0x30
 8015fa2:	2b09      	cmp	r3, #9
 8015fa4:	d94b      	bls.n	801603e <_vfiprintf_r+0x1a2>
 8015fa6:	b1b0      	cbz	r0, 8015fd6 <_vfiprintf_r+0x13a>
 8015fa8:	9207      	str	r2, [sp, #28]
 8015faa:	e014      	b.n	8015fd6 <_vfiprintf_r+0x13a>
 8015fac:	eba0 0308 	sub.w	r3, r0, r8
 8015fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8015fb4:	4313      	orrs	r3, r2
 8015fb6:	9304      	str	r3, [sp, #16]
 8015fb8:	46a2      	mov	sl, r4
 8015fba:	e7d2      	b.n	8015f62 <_vfiprintf_r+0xc6>
 8015fbc:	9b03      	ldr	r3, [sp, #12]
 8015fbe:	1d19      	adds	r1, r3, #4
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	9103      	str	r1, [sp, #12]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	bfbb      	ittet	lt
 8015fc8:	425b      	neglt	r3, r3
 8015fca:	f042 0202 	orrlt.w	r2, r2, #2
 8015fce:	9307      	strge	r3, [sp, #28]
 8015fd0:	9307      	strlt	r3, [sp, #28]
 8015fd2:	bfb8      	it	lt
 8015fd4:	9204      	strlt	r2, [sp, #16]
 8015fd6:	7823      	ldrb	r3, [r4, #0]
 8015fd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8015fda:	d10a      	bne.n	8015ff2 <_vfiprintf_r+0x156>
 8015fdc:	7863      	ldrb	r3, [r4, #1]
 8015fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fe0:	d132      	bne.n	8016048 <_vfiprintf_r+0x1ac>
 8015fe2:	9b03      	ldr	r3, [sp, #12]
 8015fe4:	1d1a      	adds	r2, r3, #4
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	9203      	str	r2, [sp, #12]
 8015fea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015fee:	3402      	adds	r4, #2
 8015ff0:	9305      	str	r3, [sp, #20]
 8015ff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80160c8 <_vfiprintf_r+0x22c>
 8015ff6:	7821      	ldrb	r1, [r4, #0]
 8015ff8:	2203      	movs	r2, #3
 8015ffa:	4650      	mov	r0, sl
 8015ffc:	f7ea f908 	bl	8000210 <memchr>
 8016000:	b138      	cbz	r0, 8016012 <_vfiprintf_r+0x176>
 8016002:	9b04      	ldr	r3, [sp, #16]
 8016004:	eba0 000a 	sub.w	r0, r0, sl
 8016008:	2240      	movs	r2, #64	@ 0x40
 801600a:	4082      	lsls	r2, r0
 801600c:	4313      	orrs	r3, r2
 801600e:	3401      	adds	r4, #1
 8016010:	9304      	str	r3, [sp, #16]
 8016012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016016:	4829      	ldr	r0, [pc, #164]	@ (80160bc <_vfiprintf_r+0x220>)
 8016018:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801601c:	2206      	movs	r2, #6
 801601e:	f7ea f8f7 	bl	8000210 <memchr>
 8016022:	2800      	cmp	r0, #0
 8016024:	d03f      	beq.n	80160a6 <_vfiprintf_r+0x20a>
 8016026:	4b26      	ldr	r3, [pc, #152]	@ (80160c0 <_vfiprintf_r+0x224>)
 8016028:	bb1b      	cbnz	r3, 8016072 <_vfiprintf_r+0x1d6>
 801602a:	9b03      	ldr	r3, [sp, #12]
 801602c:	3307      	adds	r3, #7
 801602e:	f023 0307 	bic.w	r3, r3, #7
 8016032:	3308      	adds	r3, #8
 8016034:	9303      	str	r3, [sp, #12]
 8016036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016038:	443b      	add	r3, r7
 801603a:	9309      	str	r3, [sp, #36]	@ 0x24
 801603c:	e76a      	b.n	8015f14 <_vfiprintf_r+0x78>
 801603e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016042:	460c      	mov	r4, r1
 8016044:	2001      	movs	r0, #1
 8016046:	e7a8      	b.n	8015f9a <_vfiprintf_r+0xfe>
 8016048:	2300      	movs	r3, #0
 801604a:	3401      	adds	r4, #1
 801604c:	9305      	str	r3, [sp, #20]
 801604e:	4619      	mov	r1, r3
 8016050:	f04f 0c0a 	mov.w	ip, #10
 8016054:	4620      	mov	r0, r4
 8016056:	f810 2b01 	ldrb.w	r2, [r0], #1
 801605a:	3a30      	subs	r2, #48	@ 0x30
 801605c:	2a09      	cmp	r2, #9
 801605e:	d903      	bls.n	8016068 <_vfiprintf_r+0x1cc>
 8016060:	2b00      	cmp	r3, #0
 8016062:	d0c6      	beq.n	8015ff2 <_vfiprintf_r+0x156>
 8016064:	9105      	str	r1, [sp, #20]
 8016066:	e7c4      	b.n	8015ff2 <_vfiprintf_r+0x156>
 8016068:	fb0c 2101 	mla	r1, ip, r1, r2
 801606c:	4604      	mov	r4, r0
 801606e:	2301      	movs	r3, #1
 8016070:	e7f0      	b.n	8016054 <_vfiprintf_r+0x1b8>
 8016072:	ab03      	add	r3, sp, #12
 8016074:	9300      	str	r3, [sp, #0]
 8016076:	462a      	mov	r2, r5
 8016078:	4b12      	ldr	r3, [pc, #72]	@ (80160c4 <_vfiprintf_r+0x228>)
 801607a:	a904      	add	r1, sp, #16
 801607c:	4630      	mov	r0, r6
 801607e:	f3af 8000 	nop.w
 8016082:	4607      	mov	r7, r0
 8016084:	1c78      	adds	r0, r7, #1
 8016086:	d1d6      	bne.n	8016036 <_vfiprintf_r+0x19a>
 8016088:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801608a:	07d9      	lsls	r1, r3, #31
 801608c:	d405      	bmi.n	801609a <_vfiprintf_r+0x1fe>
 801608e:	89ab      	ldrh	r3, [r5, #12]
 8016090:	059a      	lsls	r2, r3, #22
 8016092:	d402      	bmi.n	801609a <_vfiprintf_r+0x1fe>
 8016094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016096:	f7ff fe7d 	bl	8015d94 <__retarget_lock_release_recursive>
 801609a:	89ab      	ldrh	r3, [r5, #12]
 801609c:	065b      	lsls	r3, r3, #25
 801609e:	f53f af1f 	bmi.w	8015ee0 <_vfiprintf_r+0x44>
 80160a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160a4:	e71e      	b.n	8015ee4 <_vfiprintf_r+0x48>
 80160a6:	ab03      	add	r3, sp, #12
 80160a8:	9300      	str	r3, [sp, #0]
 80160aa:	462a      	mov	r2, r5
 80160ac:	4b05      	ldr	r3, [pc, #20]	@ (80160c4 <_vfiprintf_r+0x228>)
 80160ae:	a904      	add	r1, sp, #16
 80160b0:	4630      	mov	r0, r6
 80160b2:	f000 f879 	bl	80161a8 <_printf_i>
 80160b6:	e7e4      	b.n	8016082 <_vfiprintf_r+0x1e6>
 80160b8:	08016950 	.word	0x08016950
 80160bc:	0801695a 	.word	0x0801695a
 80160c0:	00000000 	.word	0x00000000
 80160c4:	08015e77 	.word	0x08015e77
 80160c8:	08016956 	.word	0x08016956

080160cc <_printf_common>:
 80160cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160d0:	4616      	mov	r6, r2
 80160d2:	4698      	mov	r8, r3
 80160d4:	688a      	ldr	r2, [r1, #8]
 80160d6:	690b      	ldr	r3, [r1, #16]
 80160d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80160dc:	4293      	cmp	r3, r2
 80160de:	bfb8      	it	lt
 80160e0:	4613      	movlt	r3, r2
 80160e2:	6033      	str	r3, [r6, #0]
 80160e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80160e8:	4607      	mov	r7, r0
 80160ea:	460c      	mov	r4, r1
 80160ec:	b10a      	cbz	r2, 80160f2 <_printf_common+0x26>
 80160ee:	3301      	adds	r3, #1
 80160f0:	6033      	str	r3, [r6, #0]
 80160f2:	6823      	ldr	r3, [r4, #0]
 80160f4:	0699      	lsls	r1, r3, #26
 80160f6:	bf42      	ittt	mi
 80160f8:	6833      	ldrmi	r3, [r6, #0]
 80160fa:	3302      	addmi	r3, #2
 80160fc:	6033      	strmi	r3, [r6, #0]
 80160fe:	6825      	ldr	r5, [r4, #0]
 8016100:	f015 0506 	ands.w	r5, r5, #6
 8016104:	d106      	bne.n	8016114 <_printf_common+0x48>
 8016106:	f104 0a19 	add.w	sl, r4, #25
 801610a:	68e3      	ldr	r3, [r4, #12]
 801610c:	6832      	ldr	r2, [r6, #0]
 801610e:	1a9b      	subs	r3, r3, r2
 8016110:	42ab      	cmp	r3, r5
 8016112:	dc26      	bgt.n	8016162 <_printf_common+0x96>
 8016114:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016118:	6822      	ldr	r2, [r4, #0]
 801611a:	3b00      	subs	r3, #0
 801611c:	bf18      	it	ne
 801611e:	2301      	movne	r3, #1
 8016120:	0692      	lsls	r2, r2, #26
 8016122:	d42b      	bmi.n	801617c <_printf_common+0xb0>
 8016124:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016128:	4641      	mov	r1, r8
 801612a:	4638      	mov	r0, r7
 801612c:	47c8      	blx	r9
 801612e:	3001      	adds	r0, #1
 8016130:	d01e      	beq.n	8016170 <_printf_common+0xa4>
 8016132:	6823      	ldr	r3, [r4, #0]
 8016134:	6922      	ldr	r2, [r4, #16]
 8016136:	f003 0306 	and.w	r3, r3, #6
 801613a:	2b04      	cmp	r3, #4
 801613c:	bf02      	ittt	eq
 801613e:	68e5      	ldreq	r5, [r4, #12]
 8016140:	6833      	ldreq	r3, [r6, #0]
 8016142:	1aed      	subeq	r5, r5, r3
 8016144:	68a3      	ldr	r3, [r4, #8]
 8016146:	bf0c      	ite	eq
 8016148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801614c:	2500      	movne	r5, #0
 801614e:	4293      	cmp	r3, r2
 8016150:	bfc4      	itt	gt
 8016152:	1a9b      	subgt	r3, r3, r2
 8016154:	18ed      	addgt	r5, r5, r3
 8016156:	2600      	movs	r6, #0
 8016158:	341a      	adds	r4, #26
 801615a:	42b5      	cmp	r5, r6
 801615c:	d11a      	bne.n	8016194 <_printf_common+0xc8>
 801615e:	2000      	movs	r0, #0
 8016160:	e008      	b.n	8016174 <_printf_common+0xa8>
 8016162:	2301      	movs	r3, #1
 8016164:	4652      	mov	r2, sl
 8016166:	4641      	mov	r1, r8
 8016168:	4638      	mov	r0, r7
 801616a:	47c8      	blx	r9
 801616c:	3001      	adds	r0, #1
 801616e:	d103      	bne.n	8016178 <_printf_common+0xac>
 8016170:	f04f 30ff 	mov.w	r0, #4294967295
 8016174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016178:	3501      	adds	r5, #1
 801617a:	e7c6      	b.n	801610a <_printf_common+0x3e>
 801617c:	18e1      	adds	r1, r4, r3
 801617e:	1c5a      	adds	r2, r3, #1
 8016180:	2030      	movs	r0, #48	@ 0x30
 8016182:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016186:	4422      	add	r2, r4
 8016188:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801618c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016190:	3302      	adds	r3, #2
 8016192:	e7c7      	b.n	8016124 <_printf_common+0x58>
 8016194:	2301      	movs	r3, #1
 8016196:	4622      	mov	r2, r4
 8016198:	4641      	mov	r1, r8
 801619a:	4638      	mov	r0, r7
 801619c:	47c8      	blx	r9
 801619e:	3001      	adds	r0, #1
 80161a0:	d0e6      	beq.n	8016170 <_printf_common+0xa4>
 80161a2:	3601      	adds	r6, #1
 80161a4:	e7d9      	b.n	801615a <_printf_common+0x8e>
	...

080161a8 <_printf_i>:
 80161a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80161ac:	7e0f      	ldrb	r7, [r1, #24]
 80161ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80161b0:	2f78      	cmp	r7, #120	@ 0x78
 80161b2:	4691      	mov	r9, r2
 80161b4:	4680      	mov	r8, r0
 80161b6:	460c      	mov	r4, r1
 80161b8:	469a      	mov	sl, r3
 80161ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80161be:	d807      	bhi.n	80161d0 <_printf_i+0x28>
 80161c0:	2f62      	cmp	r7, #98	@ 0x62
 80161c2:	d80a      	bhi.n	80161da <_printf_i+0x32>
 80161c4:	2f00      	cmp	r7, #0
 80161c6:	f000 80d1 	beq.w	801636c <_printf_i+0x1c4>
 80161ca:	2f58      	cmp	r7, #88	@ 0x58
 80161cc:	f000 80b8 	beq.w	8016340 <_printf_i+0x198>
 80161d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80161d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80161d8:	e03a      	b.n	8016250 <_printf_i+0xa8>
 80161da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80161de:	2b15      	cmp	r3, #21
 80161e0:	d8f6      	bhi.n	80161d0 <_printf_i+0x28>
 80161e2:	a101      	add	r1, pc, #4	@ (adr r1, 80161e8 <_printf_i+0x40>)
 80161e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80161e8:	08016241 	.word	0x08016241
 80161ec:	08016255 	.word	0x08016255
 80161f0:	080161d1 	.word	0x080161d1
 80161f4:	080161d1 	.word	0x080161d1
 80161f8:	080161d1 	.word	0x080161d1
 80161fc:	080161d1 	.word	0x080161d1
 8016200:	08016255 	.word	0x08016255
 8016204:	080161d1 	.word	0x080161d1
 8016208:	080161d1 	.word	0x080161d1
 801620c:	080161d1 	.word	0x080161d1
 8016210:	080161d1 	.word	0x080161d1
 8016214:	08016353 	.word	0x08016353
 8016218:	0801627f 	.word	0x0801627f
 801621c:	0801630d 	.word	0x0801630d
 8016220:	080161d1 	.word	0x080161d1
 8016224:	080161d1 	.word	0x080161d1
 8016228:	08016375 	.word	0x08016375
 801622c:	080161d1 	.word	0x080161d1
 8016230:	0801627f 	.word	0x0801627f
 8016234:	080161d1 	.word	0x080161d1
 8016238:	080161d1 	.word	0x080161d1
 801623c:	08016315 	.word	0x08016315
 8016240:	6833      	ldr	r3, [r6, #0]
 8016242:	1d1a      	adds	r2, r3, #4
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	6032      	str	r2, [r6, #0]
 8016248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801624c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016250:	2301      	movs	r3, #1
 8016252:	e09c      	b.n	801638e <_printf_i+0x1e6>
 8016254:	6833      	ldr	r3, [r6, #0]
 8016256:	6820      	ldr	r0, [r4, #0]
 8016258:	1d19      	adds	r1, r3, #4
 801625a:	6031      	str	r1, [r6, #0]
 801625c:	0606      	lsls	r6, r0, #24
 801625e:	d501      	bpl.n	8016264 <_printf_i+0xbc>
 8016260:	681d      	ldr	r5, [r3, #0]
 8016262:	e003      	b.n	801626c <_printf_i+0xc4>
 8016264:	0645      	lsls	r5, r0, #25
 8016266:	d5fb      	bpl.n	8016260 <_printf_i+0xb8>
 8016268:	f9b3 5000 	ldrsh.w	r5, [r3]
 801626c:	2d00      	cmp	r5, #0
 801626e:	da03      	bge.n	8016278 <_printf_i+0xd0>
 8016270:	232d      	movs	r3, #45	@ 0x2d
 8016272:	426d      	negs	r5, r5
 8016274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016278:	4858      	ldr	r0, [pc, #352]	@ (80163dc <_printf_i+0x234>)
 801627a:	230a      	movs	r3, #10
 801627c:	e011      	b.n	80162a2 <_printf_i+0xfa>
 801627e:	6821      	ldr	r1, [r4, #0]
 8016280:	6833      	ldr	r3, [r6, #0]
 8016282:	0608      	lsls	r0, r1, #24
 8016284:	f853 5b04 	ldr.w	r5, [r3], #4
 8016288:	d402      	bmi.n	8016290 <_printf_i+0xe8>
 801628a:	0649      	lsls	r1, r1, #25
 801628c:	bf48      	it	mi
 801628e:	b2ad      	uxthmi	r5, r5
 8016290:	2f6f      	cmp	r7, #111	@ 0x6f
 8016292:	4852      	ldr	r0, [pc, #328]	@ (80163dc <_printf_i+0x234>)
 8016294:	6033      	str	r3, [r6, #0]
 8016296:	bf14      	ite	ne
 8016298:	230a      	movne	r3, #10
 801629a:	2308      	moveq	r3, #8
 801629c:	2100      	movs	r1, #0
 801629e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80162a2:	6866      	ldr	r6, [r4, #4]
 80162a4:	60a6      	str	r6, [r4, #8]
 80162a6:	2e00      	cmp	r6, #0
 80162a8:	db05      	blt.n	80162b6 <_printf_i+0x10e>
 80162aa:	6821      	ldr	r1, [r4, #0]
 80162ac:	432e      	orrs	r6, r5
 80162ae:	f021 0104 	bic.w	r1, r1, #4
 80162b2:	6021      	str	r1, [r4, #0]
 80162b4:	d04b      	beq.n	801634e <_printf_i+0x1a6>
 80162b6:	4616      	mov	r6, r2
 80162b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80162bc:	fb03 5711 	mls	r7, r3, r1, r5
 80162c0:	5dc7      	ldrb	r7, [r0, r7]
 80162c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80162c6:	462f      	mov	r7, r5
 80162c8:	42bb      	cmp	r3, r7
 80162ca:	460d      	mov	r5, r1
 80162cc:	d9f4      	bls.n	80162b8 <_printf_i+0x110>
 80162ce:	2b08      	cmp	r3, #8
 80162d0:	d10b      	bne.n	80162ea <_printf_i+0x142>
 80162d2:	6823      	ldr	r3, [r4, #0]
 80162d4:	07df      	lsls	r7, r3, #31
 80162d6:	d508      	bpl.n	80162ea <_printf_i+0x142>
 80162d8:	6923      	ldr	r3, [r4, #16]
 80162da:	6861      	ldr	r1, [r4, #4]
 80162dc:	4299      	cmp	r1, r3
 80162de:	bfde      	ittt	le
 80162e0:	2330      	movle	r3, #48	@ 0x30
 80162e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80162e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80162ea:	1b92      	subs	r2, r2, r6
 80162ec:	6122      	str	r2, [r4, #16]
 80162ee:	f8cd a000 	str.w	sl, [sp]
 80162f2:	464b      	mov	r3, r9
 80162f4:	aa03      	add	r2, sp, #12
 80162f6:	4621      	mov	r1, r4
 80162f8:	4640      	mov	r0, r8
 80162fa:	f7ff fee7 	bl	80160cc <_printf_common>
 80162fe:	3001      	adds	r0, #1
 8016300:	d14a      	bne.n	8016398 <_printf_i+0x1f0>
 8016302:	f04f 30ff 	mov.w	r0, #4294967295
 8016306:	b004      	add	sp, #16
 8016308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801630c:	6823      	ldr	r3, [r4, #0]
 801630e:	f043 0320 	orr.w	r3, r3, #32
 8016312:	6023      	str	r3, [r4, #0]
 8016314:	4832      	ldr	r0, [pc, #200]	@ (80163e0 <_printf_i+0x238>)
 8016316:	2778      	movs	r7, #120	@ 0x78
 8016318:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801631c:	6823      	ldr	r3, [r4, #0]
 801631e:	6831      	ldr	r1, [r6, #0]
 8016320:	061f      	lsls	r7, r3, #24
 8016322:	f851 5b04 	ldr.w	r5, [r1], #4
 8016326:	d402      	bmi.n	801632e <_printf_i+0x186>
 8016328:	065f      	lsls	r7, r3, #25
 801632a:	bf48      	it	mi
 801632c:	b2ad      	uxthmi	r5, r5
 801632e:	6031      	str	r1, [r6, #0]
 8016330:	07d9      	lsls	r1, r3, #31
 8016332:	bf44      	itt	mi
 8016334:	f043 0320 	orrmi.w	r3, r3, #32
 8016338:	6023      	strmi	r3, [r4, #0]
 801633a:	b11d      	cbz	r5, 8016344 <_printf_i+0x19c>
 801633c:	2310      	movs	r3, #16
 801633e:	e7ad      	b.n	801629c <_printf_i+0xf4>
 8016340:	4826      	ldr	r0, [pc, #152]	@ (80163dc <_printf_i+0x234>)
 8016342:	e7e9      	b.n	8016318 <_printf_i+0x170>
 8016344:	6823      	ldr	r3, [r4, #0]
 8016346:	f023 0320 	bic.w	r3, r3, #32
 801634a:	6023      	str	r3, [r4, #0]
 801634c:	e7f6      	b.n	801633c <_printf_i+0x194>
 801634e:	4616      	mov	r6, r2
 8016350:	e7bd      	b.n	80162ce <_printf_i+0x126>
 8016352:	6833      	ldr	r3, [r6, #0]
 8016354:	6825      	ldr	r5, [r4, #0]
 8016356:	6961      	ldr	r1, [r4, #20]
 8016358:	1d18      	adds	r0, r3, #4
 801635a:	6030      	str	r0, [r6, #0]
 801635c:	062e      	lsls	r6, r5, #24
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	d501      	bpl.n	8016366 <_printf_i+0x1be>
 8016362:	6019      	str	r1, [r3, #0]
 8016364:	e002      	b.n	801636c <_printf_i+0x1c4>
 8016366:	0668      	lsls	r0, r5, #25
 8016368:	d5fb      	bpl.n	8016362 <_printf_i+0x1ba>
 801636a:	8019      	strh	r1, [r3, #0]
 801636c:	2300      	movs	r3, #0
 801636e:	6123      	str	r3, [r4, #16]
 8016370:	4616      	mov	r6, r2
 8016372:	e7bc      	b.n	80162ee <_printf_i+0x146>
 8016374:	6833      	ldr	r3, [r6, #0]
 8016376:	1d1a      	adds	r2, r3, #4
 8016378:	6032      	str	r2, [r6, #0]
 801637a:	681e      	ldr	r6, [r3, #0]
 801637c:	6862      	ldr	r2, [r4, #4]
 801637e:	2100      	movs	r1, #0
 8016380:	4630      	mov	r0, r6
 8016382:	f7e9 ff45 	bl	8000210 <memchr>
 8016386:	b108      	cbz	r0, 801638c <_printf_i+0x1e4>
 8016388:	1b80      	subs	r0, r0, r6
 801638a:	6060      	str	r0, [r4, #4]
 801638c:	6863      	ldr	r3, [r4, #4]
 801638e:	6123      	str	r3, [r4, #16]
 8016390:	2300      	movs	r3, #0
 8016392:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016396:	e7aa      	b.n	80162ee <_printf_i+0x146>
 8016398:	6923      	ldr	r3, [r4, #16]
 801639a:	4632      	mov	r2, r6
 801639c:	4649      	mov	r1, r9
 801639e:	4640      	mov	r0, r8
 80163a0:	47d0      	blx	sl
 80163a2:	3001      	adds	r0, #1
 80163a4:	d0ad      	beq.n	8016302 <_printf_i+0x15a>
 80163a6:	6823      	ldr	r3, [r4, #0]
 80163a8:	079b      	lsls	r3, r3, #30
 80163aa:	d413      	bmi.n	80163d4 <_printf_i+0x22c>
 80163ac:	68e0      	ldr	r0, [r4, #12]
 80163ae:	9b03      	ldr	r3, [sp, #12]
 80163b0:	4298      	cmp	r0, r3
 80163b2:	bfb8      	it	lt
 80163b4:	4618      	movlt	r0, r3
 80163b6:	e7a6      	b.n	8016306 <_printf_i+0x15e>
 80163b8:	2301      	movs	r3, #1
 80163ba:	4632      	mov	r2, r6
 80163bc:	4649      	mov	r1, r9
 80163be:	4640      	mov	r0, r8
 80163c0:	47d0      	blx	sl
 80163c2:	3001      	adds	r0, #1
 80163c4:	d09d      	beq.n	8016302 <_printf_i+0x15a>
 80163c6:	3501      	adds	r5, #1
 80163c8:	68e3      	ldr	r3, [r4, #12]
 80163ca:	9903      	ldr	r1, [sp, #12]
 80163cc:	1a5b      	subs	r3, r3, r1
 80163ce:	42ab      	cmp	r3, r5
 80163d0:	dcf2      	bgt.n	80163b8 <_printf_i+0x210>
 80163d2:	e7eb      	b.n	80163ac <_printf_i+0x204>
 80163d4:	2500      	movs	r5, #0
 80163d6:	f104 0619 	add.w	r6, r4, #25
 80163da:	e7f5      	b.n	80163c8 <_printf_i+0x220>
 80163dc:	08016961 	.word	0x08016961
 80163e0:	08016972 	.word	0x08016972

080163e4 <__sflush_r>:
 80163e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80163e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ec:	0716      	lsls	r6, r2, #28
 80163ee:	4605      	mov	r5, r0
 80163f0:	460c      	mov	r4, r1
 80163f2:	d454      	bmi.n	801649e <__sflush_r+0xba>
 80163f4:	684b      	ldr	r3, [r1, #4]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	dc02      	bgt.n	8016400 <__sflush_r+0x1c>
 80163fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	dd48      	ble.n	8016492 <__sflush_r+0xae>
 8016400:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016402:	2e00      	cmp	r6, #0
 8016404:	d045      	beq.n	8016492 <__sflush_r+0xae>
 8016406:	2300      	movs	r3, #0
 8016408:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801640c:	682f      	ldr	r7, [r5, #0]
 801640e:	6a21      	ldr	r1, [r4, #32]
 8016410:	602b      	str	r3, [r5, #0]
 8016412:	d030      	beq.n	8016476 <__sflush_r+0x92>
 8016414:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016416:	89a3      	ldrh	r3, [r4, #12]
 8016418:	0759      	lsls	r1, r3, #29
 801641a:	d505      	bpl.n	8016428 <__sflush_r+0x44>
 801641c:	6863      	ldr	r3, [r4, #4]
 801641e:	1ad2      	subs	r2, r2, r3
 8016420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016422:	b10b      	cbz	r3, 8016428 <__sflush_r+0x44>
 8016424:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016426:	1ad2      	subs	r2, r2, r3
 8016428:	2300      	movs	r3, #0
 801642a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801642c:	6a21      	ldr	r1, [r4, #32]
 801642e:	4628      	mov	r0, r5
 8016430:	47b0      	blx	r6
 8016432:	1c43      	adds	r3, r0, #1
 8016434:	89a3      	ldrh	r3, [r4, #12]
 8016436:	d106      	bne.n	8016446 <__sflush_r+0x62>
 8016438:	6829      	ldr	r1, [r5, #0]
 801643a:	291d      	cmp	r1, #29
 801643c:	d82b      	bhi.n	8016496 <__sflush_r+0xb2>
 801643e:	4a2a      	ldr	r2, [pc, #168]	@ (80164e8 <__sflush_r+0x104>)
 8016440:	40ca      	lsrs	r2, r1
 8016442:	07d6      	lsls	r6, r2, #31
 8016444:	d527      	bpl.n	8016496 <__sflush_r+0xb2>
 8016446:	2200      	movs	r2, #0
 8016448:	6062      	str	r2, [r4, #4]
 801644a:	04d9      	lsls	r1, r3, #19
 801644c:	6922      	ldr	r2, [r4, #16]
 801644e:	6022      	str	r2, [r4, #0]
 8016450:	d504      	bpl.n	801645c <__sflush_r+0x78>
 8016452:	1c42      	adds	r2, r0, #1
 8016454:	d101      	bne.n	801645a <__sflush_r+0x76>
 8016456:	682b      	ldr	r3, [r5, #0]
 8016458:	b903      	cbnz	r3, 801645c <__sflush_r+0x78>
 801645a:	6560      	str	r0, [r4, #84]	@ 0x54
 801645c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801645e:	602f      	str	r7, [r5, #0]
 8016460:	b1b9      	cbz	r1, 8016492 <__sflush_r+0xae>
 8016462:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016466:	4299      	cmp	r1, r3
 8016468:	d002      	beq.n	8016470 <__sflush_r+0x8c>
 801646a:	4628      	mov	r0, r5
 801646c:	f7ff fca2 	bl	8015db4 <_free_r>
 8016470:	2300      	movs	r3, #0
 8016472:	6363      	str	r3, [r4, #52]	@ 0x34
 8016474:	e00d      	b.n	8016492 <__sflush_r+0xae>
 8016476:	2301      	movs	r3, #1
 8016478:	4628      	mov	r0, r5
 801647a:	47b0      	blx	r6
 801647c:	4602      	mov	r2, r0
 801647e:	1c50      	adds	r0, r2, #1
 8016480:	d1c9      	bne.n	8016416 <__sflush_r+0x32>
 8016482:	682b      	ldr	r3, [r5, #0]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d0c6      	beq.n	8016416 <__sflush_r+0x32>
 8016488:	2b1d      	cmp	r3, #29
 801648a:	d001      	beq.n	8016490 <__sflush_r+0xac>
 801648c:	2b16      	cmp	r3, #22
 801648e:	d11e      	bne.n	80164ce <__sflush_r+0xea>
 8016490:	602f      	str	r7, [r5, #0]
 8016492:	2000      	movs	r0, #0
 8016494:	e022      	b.n	80164dc <__sflush_r+0xf8>
 8016496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801649a:	b21b      	sxth	r3, r3
 801649c:	e01b      	b.n	80164d6 <__sflush_r+0xf2>
 801649e:	690f      	ldr	r7, [r1, #16]
 80164a0:	2f00      	cmp	r7, #0
 80164a2:	d0f6      	beq.n	8016492 <__sflush_r+0xae>
 80164a4:	0793      	lsls	r3, r2, #30
 80164a6:	680e      	ldr	r6, [r1, #0]
 80164a8:	bf08      	it	eq
 80164aa:	694b      	ldreq	r3, [r1, #20]
 80164ac:	600f      	str	r7, [r1, #0]
 80164ae:	bf18      	it	ne
 80164b0:	2300      	movne	r3, #0
 80164b2:	eba6 0807 	sub.w	r8, r6, r7
 80164b6:	608b      	str	r3, [r1, #8]
 80164b8:	f1b8 0f00 	cmp.w	r8, #0
 80164bc:	dde9      	ble.n	8016492 <__sflush_r+0xae>
 80164be:	6a21      	ldr	r1, [r4, #32]
 80164c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80164c2:	4643      	mov	r3, r8
 80164c4:	463a      	mov	r2, r7
 80164c6:	4628      	mov	r0, r5
 80164c8:	47b0      	blx	r6
 80164ca:	2800      	cmp	r0, #0
 80164cc:	dc08      	bgt.n	80164e0 <__sflush_r+0xfc>
 80164ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80164d6:	81a3      	strh	r3, [r4, #12]
 80164d8:	f04f 30ff 	mov.w	r0, #4294967295
 80164dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164e0:	4407      	add	r7, r0
 80164e2:	eba8 0800 	sub.w	r8, r8, r0
 80164e6:	e7e7      	b.n	80164b8 <__sflush_r+0xd4>
 80164e8:	20400001 	.word	0x20400001

080164ec <_fflush_r>:
 80164ec:	b538      	push	{r3, r4, r5, lr}
 80164ee:	690b      	ldr	r3, [r1, #16]
 80164f0:	4605      	mov	r5, r0
 80164f2:	460c      	mov	r4, r1
 80164f4:	b913      	cbnz	r3, 80164fc <_fflush_r+0x10>
 80164f6:	2500      	movs	r5, #0
 80164f8:	4628      	mov	r0, r5
 80164fa:	bd38      	pop	{r3, r4, r5, pc}
 80164fc:	b118      	cbz	r0, 8016506 <_fflush_r+0x1a>
 80164fe:	6a03      	ldr	r3, [r0, #32]
 8016500:	b90b      	cbnz	r3, 8016506 <_fflush_r+0x1a>
 8016502:	f7ff f9e1 	bl	80158c8 <__sinit>
 8016506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d0f3      	beq.n	80164f6 <_fflush_r+0xa>
 801650e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016510:	07d0      	lsls	r0, r2, #31
 8016512:	d404      	bmi.n	801651e <_fflush_r+0x32>
 8016514:	0599      	lsls	r1, r3, #22
 8016516:	d402      	bmi.n	801651e <_fflush_r+0x32>
 8016518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801651a:	f7ff fc3a 	bl	8015d92 <__retarget_lock_acquire_recursive>
 801651e:	4628      	mov	r0, r5
 8016520:	4621      	mov	r1, r4
 8016522:	f7ff ff5f 	bl	80163e4 <__sflush_r>
 8016526:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016528:	07da      	lsls	r2, r3, #31
 801652a:	4605      	mov	r5, r0
 801652c:	d4e4      	bmi.n	80164f8 <_fflush_r+0xc>
 801652e:	89a3      	ldrh	r3, [r4, #12]
 8016530:	059b      	lsls	r3, r3, #22
 8016532:	d4e1      	bmi.n	80164f8 <_fflush_r+0xc>
 8016534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016536:	f7ff fc2d 	bl	8015d94 <__retarget_lock_release_recursive>
 801653a:	e7dd      	b.n	80164f8 <_fflush_r+0xc>

0801653c <__swhatbuf_r>:
 801653c:	b570      	push	{r4, r5, r6, lr}
 801653e:	460c      	mov	r4, r1
 8016540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016544:	2900      	cmp	r1, #0
 8016546:	b096      	sub	sp, #88	@ 0x58
 8016548:	4615      	mov	r5, r2
 801654a:	461e      	mov	r6, r3
 801654c:	da0d      	bge.n	801656a <__swhatbuf_r+0x2e>
 801654e:	89a3      	ldrh	r3, [r4, #12]
 8016550:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016554:	f04f 0100 	mov.w	r1, #0
 8016558:	bf14      	ite	ne
 801655a:	2340      	movne	r3, #64	@ 0x40
 801655c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016560:	2000      	movs	r0, #0
 8016562:	6031      	str	r1, [r6, #0]
 8016564:	602b      	str	r3, [r5, #0]
 8016566:	b016      	add	sp, #88	@ 0x58
 8016568:	bd70      	pop	{r4, r5, r6, pc}
 801656a:	466a      	mov	r2, sp
 801656c:	f000 f848 	bl	8016600 <_fstat_r>
 8016570:	2800      	cmp	r0, #0
 8016572:	dbec      	blt.n	801654e <__swhatbuf_r+0x12>
 8016574:	9901      	ldr	r1, [sp, #4]
 8016576:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801657a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801657e:	4259      	negs	r1, r3
 8016580:	4159      	adcs	r1, r3
 8016582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016586:	e7eb      	b.n	8016560 <__swhatbuf_r+0x24>

08016588 <__smakebuf_r>:
 8016588:	898b      	ldrh	r3, [r1, #12]
 801658a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801658c:	079d      	lsls	r5, r3, #30
 801658e:	4606      	mov	r6, r0
 8016590:	460c      	mov	r4, r1
 8016592:	d507      	bpl.n	80165a4 <__smakebuf_r+0x1c>
 8016594:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016598:	6023      	str	r3, [r4, #0]
 801659a:	6123      	str	r3, [r4, #16]
 801659c:	2301      	movs	r3, #1
 801659e:	6163      	str	r3, [r4, #20]
 80165a0:	b003      	add	sp, #12
 80165a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165a4:	ab01      	add	r3, sp, #4
 80165a6:	466a      	mov	r2, sp
 80165a8:	f7ff ffc8 	bl	801653c <__swhatbuf_r>
 80165ac:	9f00      	ldr	r7, [sp, #0]
 80165ae:	4605      	mov	r5, r0
 80165b0:	4639      	mov	r1, r7
 80165b2:	4630      	mov	r0, r6
 80165b4:	f7ff f870 	bl	8015698 <_malloc_r>
 80165b8:	b948      	cbnz	r0, 80165ce <__smakebuf_r+0x46>
 80165ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165be:	059a      	lsls	r2, r3, #22
 80165c0:	d4ee      	bmi.n	80165a0 <__smakebuf_r+0x18>
 80165c2:	f023 0303 	bic.w	r3, r3, #3
 80165c6:	f043 0302 	orr.w	r3, r3, #2
 80165ca:	81a3      	strh	r3, [r4, #12]
 80165cc:	e7e2      	b.n	8016594 <__smakebuf_r+0xc>
 80165ce:	89a3      	ldrh	r3, [r4, #12]
 80165d0:	6020      	str	r0, [r4, #0]
 80165d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80165d6:	81a3      	strh	r3, [r4, #12]
 80165d8:	9b01      	ldr	r3, [sp, #4]
 80165da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80165de:	b15b      	cbz	r3, 80165f8 <__smakebuf_r+0x70>
 80165e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80165e4:	4630      	mov	r0, r6
 80165e6:	f000 f81d 	bl	8016624 <_isatty_r>
 80165ea:	b128      	cbz	r0, 80165f8 <__smakebuf_r+0x70>
 80165ec:	89a3      	ldrh	r3, [r4, #12]
 80165ee:	f023 0303 	bic.w	r3, r3, #3
 80165f2:	f043 0301 	orr.w	r3, r3, #1
 80165f6:	81a3      	strh	r3, [r4, #12]
 80165f8:	89a3      	ldrh	r3, [r4, #12]
 80165fa:	431d      	orrs	r5, r3
 80165fc:	81a5      	strh	r5, [r4, #12]
 80165fe:	e7cf      	b.n	80165a0 <__smakebuf_r+0x18>

08016600 <_fstat_r>:
 8016600:	b538      	push	{r3, r4, r5, lr}
 8016602:	4d07      	ldr	r5, [pc, #28]	@ (8016620 <_fstat_r+0x20>)
 8016604:	2300      	movs	r3, #0
 8016606:	4604      	mov	r4, r0
 8016608:	4608      	mov	r0, r1
 801660a:	4611      	mov	r1, r2
 801660c:	602b      	str	r3, [r5, #0]
 801660e:	f7ec fa0c 	bl	8002a2a <_fstat>
 8016612:	1c43      	adds	r3, r0, #1
 8016614:	d102      	bne.n	801661c <_fstat_r+0x1c>
 8016616:	682b      	ldr	r3, [r5, #0]
 8016618:	b103      	cbz	r3, 801661c <_fstat_r+0x1c>
 801661a:	6023      	str	r3, [r4, #0]
 801661c:	bd38      	pop	{r3, r4, r5, pc}
 801661e:	bf00      	nop
 8016620:	2000e318 	.word	0x2000e318

08016624 <_isatty_r>:
 8016624:	b538      	push	{r3, r4, r5, lr}
 8016626:	4d06      	ldr	r5, [pc, #24]	@ (8016640 <_isatty_r+0x1c>)
 8016628:	2300      	movs	r3, #0
 801662a:	4604      	mov	r4, r0
 801662c:	4608      	mov	r0, r1
 801662e:	602b      	str	r3, [r5, #0]
 8016630:	f7ec fa0b 	bl	8002a4a <_isatty>
 8016634:	1c43      	adds	r3, r0, #1
 8016636:	d102      	bne.n	801663e <_isatty_r+0x1a>
 8016638:	682b      	ldr	r3, [r5, #0]
 801663a:	b103      	cbz	r3, 801663e <_isatty_r+0x1a>
 801663c:	6023      	str	r3, [r4, #0]
 801663e:	bd38      	pop	{r3, r4, r5, pc}
 8016640:	2000e318 	.word	0x2000e318

08016644 <_init>:
 8016644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016646:	bf00      	nop
 8016648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801664a:	bc08      	pop	{r3}
 801664c:	469e      	mov	lr, r3
 801664e:	4770      	bx	lr

08016650 <_fini>:
 8016650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016652:	bf00      	nop
 8016654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016656:	bc08      	pop	{r3}
 8016658:	469e      	mov	lr, r3
 801665a:	4770      	bx	lr
