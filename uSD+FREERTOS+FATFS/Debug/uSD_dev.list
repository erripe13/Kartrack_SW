
uSD_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f1c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  080160ec  080160ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a1c  08016a1c  000181b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016a1c  08016a1c  00017a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a24  08016a24  000181b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a24  08016a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016a28  08016a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08016a2c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  08016a9c  00018070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08016b3c  00018110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000d600  200001b0  08016bdc  000181b0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  2000d7b0  08016bdc  000187b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000181b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003bc9b  00000000  00000000  000181e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000090d1  00000000  00000000  00053e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003138  00000000  00000000  0005cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002603  00000000  00000000  00060088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003762e  00000000  00000000  0006268b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048d7a  00000000  00000000  00099cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00128510  00000000  00000000  000e2a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020af43  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d488  00000000  00000000  0020af88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000075  00000000  00000000  00218410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b0 	.word	0x200001b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080160d4 	.word	0x080160d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b4 	.word	0x200001b4
 800020c:	080160d4 	.word	0x080160d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC3_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC3_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC3_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC3_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC3_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC3_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC3_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC3_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC3_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC3_Init+0x98>)
 800063e:	f003 fa15 	bl	8003a6c <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000648:	f001 faf8 	bl	8001c3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800064c:	2304      	movs	r3, #4
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC3_Init+0x98>)
 800065e:	f003 fa49 	bl	8003af4 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000668:	f001 fae8 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001cc 	.word	0x200001cc
 8000678:	40012200 	.word	0x40012200
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a21      	ldr	r2, [pc, #132]	@ (8000724 <HAL_ADC_MspInit+0xa4>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d13c      	bne.n	800071c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <HAL_ADC_MspInit+0xa8>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a20      	ldr	r2, [pc, #128]	@ (8000728 <HAL_ADC_MspInit+0xa8>)
 80006a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <HAL_ADC_MspInit+0xa8>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <HAL_ADC_MspInit+0xa8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a1a      	ldr	r2, [pc, #104]	@ (8000728 <HAL_ADC_MspInit+0xa8>)
 80006c0:	f043 0320 	orr.w	r3, r3, #32
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <HAL_ADC_MspInit+0xa8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0320 	and.w	r3, r3, #32
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <HAL_ADC_MspInit+0xa8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a14      	ldr	r2, [pc, #80]	@ (8000728 <HAL_ADC_MspInit+0xa8>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_ADC_MspInit+0xa8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80006ea:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80006ee:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	2303      	movs	r3, #3
 80006f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	480b      	ldr	r0, [pc, #44]	@ (800072c <HAL_ADC_MspInit+0xac>)
 8000700:	f004 ffd4 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000704:	2301      	movs	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000708:	2303      	movs	r3, #3
 800070a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	@ (8000730 <HAL_ADC_MspInit+0xb0>)
 8000718:	f004 ffc8 	bl	80056ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800071c:	bf00      	nop
 800071e:	3728      	adds	r7, #40	@ 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40012200 	.word	0x40012200
 8000728:	40023800 	.word	0x40023800
 800072c:	40021400 	.word	0x40021400
 8000730:	40020000 	.word	0x40020000

08000734 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <MX_CRC_Init+0x3c>)
 800073a:	4a0e      	ldr	r2, [pc, #56]	@ (8000774 <MX_CRC_Init+0x40>)
 800073c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_CRC_Init+0x3c>)
 8000740:	2200      	movs	r2, #0
 8000742:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_CRC_Init+0x3c>)
 8000746:	2200      	movs	r2, #0
 8000748:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_CRC_Init+0x3c>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_CRC_Init+0x3c>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_CRC_Init+0x3c>)
 8000758:	2201      	movs	r2, #1
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_CRC_Init+0x3c>)
 800075e:	f003 fcfb 	bl	8004158 <HAL_CRC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000768:	f001 fa68 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000214 	.word	0x20000214
 8000774:	40023000 	.word	0x40023000

08000778 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <HAL_CRC_MspInit+0x38>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d10b      	bne.n	80007a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <HAL_CRC_MspInit+0x3c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a09      	ldr	r2, [pc, #36]	@ (80007b4 <HAL_CRC_MspInit+0x3c>)
 8000790:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <HAL_CRC_MspInit+0x3c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40023000 	.word	0x40023000
 80007b4:	40023800 	.word	0x40023800

080007b8 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_DCMI_Init+0x60>)
 80007be:	4a17      	ldr	r2, [pc, #92]	@ (800081c <MX_DCMI_Init+0x64>)
 80007c0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_DCMI_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80007c8:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_DCMI_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80007ce:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <MX_DCMI_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_DCMI_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_DCMI_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <MX_DCMI_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_DCMI_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <MX_DCMI_Init+0x60>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_DCMI_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <MX_DCMI_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_DCMI_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_DCMI_Init+0x60>)
 8000806:	f003 fd99 	bl	800433c <HAL_DCMI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000810:	f001 fa14 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000238 	.word	0x20000238
 800081c:	50050000 	.word	0x50050000

08000820 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08e      	sub	sp, #56	@ 0x38
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a50      	ldr	r2, [pc, #320]	@ (8000980 <HAL_DCMI_MspInit+0x160>)
 800083e:	4293      	cmp	r3, r2
 8000840:	f040 809a 	bne.w	8000978 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000844:	4b4f      	ldr	r3, [pc, #316]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 8000846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000848:	4a4e      	ldr	r2, [pc, #312]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000850:	4b4c      	ldr	r3, [pc, #304]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 8000852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800085c:	4b49      	ldr	r3, [pc, #292]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000860:	4a48      	ldr	r2, [pc, #288]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	6313      	str	r3, [r2, #48]	@ 0x30
 8000868:	4b46      	ldr	r3, [pc, #280]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086c:	f003 0310 	and.w	r3, r3, #16
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	4b43      	ldr	r3, [pc, #268]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000878:	4a42      	ldr	r2, [pc, #264]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 800087a:	f043 0308 	orr.w	r3, r3, #8
 800087e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000880:	4b40      	ldr	r3, [pc, #256]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000884:	f003 0308 	and.w	r3, r3, #8
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800088c:	4b3d      	ldr	r3, [pc, #244]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000890:	4a3c      	ldr	r2, [pc, #240]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 8000892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000896:	6313      	str	r3, [r2, #48]	@ 0x30
 8000898:	4b3a      	ldr	r3, [pc, #232]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a4:	4b37      	ldr	r3, [pc, #220]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a8:	4a36      	ldr	r2, [pc, #216]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 80008aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b0:	4b34      	ldr	r3, [pc, #208]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b31      	ldr	r3, [pc, #196]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c0:	4a30      	ldr	r2, [pc, #192]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <HAL_DCMI_MspInit+0x164>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008d4:	2360      	movs	r3, #96	@ 0x60
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008e4:	230d      	movs	r3, #13
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ec:	4619      	mov	r1, r3
 80008ee:	4826      	ldr	r0, [pc, #152]	@ (8000988 <HAL_DCMI_MspInit+0x168>)
 80008f0:	f004 fedc 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80008f4:	2308      	movs	r3, #8
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000904:	230d      	movs	r3, #13
 8000906:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	481f      	ldr	r0, [pc, #124]	@ (800098c <HAL_DCMI_MspInit+0x16c>)
 8000910:	f004 fecc 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000914:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000926:	230d      	movs	r3, #13
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	4817      	ldr	r0, [pc, #92]	@ (8000990 <HAL_DCMI_MspInit+0x170>)
 8000932:	f004 febb 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000936:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000948:	230d      	movs	r3, #13
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	4810      	ldr	r0, [pc, #64]	@ (8000994 <HAL_DCMI_MspInit+0x174>)
 8000954:	f004 feaa 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000958:	2350      	movs	r3, #80	@ 0x50
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000968:	230d      	movs	r3, #13
 800096a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	4809      	ldr	r0, [pc, #36]	@ (8000998 <HAL_DCMI_MspInit+0x178>)
 8000974:	f004 fe9a 	bl	80056ac <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000978:	bf00      	nop
 800097a:	3738      	adds	r7, #56	@ 0x38
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	50050000 	.word	0x50050000
 8000984:	40023800 	.word	0x40023800
 8000988:	40021000 	.word	0x40021000
 800098c:	40020c00 	.word	0x40020c00
 8000990:	40021800 	.word	0x40021800
 8000994:	40021c00 	.word	0x40021c00
 8000998:	40020000 	.word	0x40020000

0800099c <SD_TxDMACallback>:
extern SD_HandleTypeDef hsd1;
extern DMA_HandleTypeDef hdma_sdmmc1_tx;
extern DMA_HandleTypeDef hdma_sdmmc1_rx;

/* Callback manuelle pour DMA TX → SDMMC */
void SD_TxDMACallback(DMA_HandleTypeDef *hdma) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	printf("[DEBUG] SD_TxDMACallback fired\r\n");
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <SD_TxDMACallback+0x20>)
 80009a6:	f014 fcc7 	bl	8015338 <puts>
	HAL_SD_TxCpltCallback(hdma->Parent);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 f8dc 	bl	8002b6c <HAL_SD_TxCpltCallback>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	080160ec 	.word	0x080160ec

080009c0 <SD_RxDMACallback>:

/* Callback manuelle pour DMA RX → SDMMC */
void SD_RxDMACallback(DMA_HandleTypeDef *hdma) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	printf("[DEBUG] SD_RxDMACallback fired\r\n");
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <SD_RxDMACallback+0x20>)
 80009ca:	f014 fcb5 	bl	8015338 <puts>
	HAL_SD_RxCpltCallback(hdma->Parent);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 f8d4 	bl	8002b80 <HAL_SD_RxCpltCallback>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	0801610c 	.word	0x0801610c

080009e4 <MX_DMA_Init>:
/* USER CODE END 1 */

/**
 * Enable DMA controller clock
 */
void MX_DMA_Init(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80009ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_DMA_Init+0x74>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000a58 <MX_DMA_Init+0x74>)
 80009f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_DMA_Init+0x74>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2105      	movs	r1, #5
 8000a06:	203b      	movs	r0, #59	@ 0x3b
 8000a08:	f003 fb7c 	bl	8004104 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a0c:	203b      	movs	r0, #59	@ 0x3b
 8000a0e:	f003 fb95 	bl	800413c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2105      	movs	r1, #5
 8000a16:	2045      	movs	r0, #69	@ 0x45
 8000a18:	f003 fb74 	bl	8004104 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a1c:	2045      	movs	r0, #69	@ 0x45
 8000a1e:	f003 fb8d 	bl	800413c <HAL_NVIC_EnableIRQ>

	hdma_sdmmc1_tx.XferCpltCallback = SD_TxDMACallback;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_DMA_Init+0x78>)
 8000a24:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <MX_DMA_Init+0x7c>)
 8000a26:	63da      	str	r2, [r3, #60]	@ 0x3c
	hdma_sdmmc1_tx.Parent = &hsd1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_DMA_Init+0x78>)
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a64 <MX_DMA_Init+0x80>)
 8000a2c:	639a      	str	r2, [r3, #56]	@ 0x38

	hdma_sdmmc1_rx.XferCpltCallback = SD_RxDMACallback;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_DMA_Init+0x84>)
 8000a30:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <MX_DMA_Init+0x88>)
 8000a32:	63da      	str	r2, [r3, #60]	@ 0x3c
	hdma_sdmmc1_rx.Parent = &hsd1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_DMA_Init+0x84>)
 8000a36:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <MX_DMA_Init+0x80>)
 8000a38:	639a      	str	r2, [r3, #56]	@ 0x38

	printf("[DEBUG] XferCpltCallback addr = 0x%08lX\r\n", (uint32_t)hdma_sdmmc1_tx.XferCpltCallback);
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <MX_DMA_Init+0x78>)
 8000a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <MX_DMA_Init+0x8c>)
 8000a42:	f014 fc11 	bl	8015268 <iprintf>
	printf("[DEBUG] SD_TxDMACallback address = 0x%08lX\r\n", (uint32_t)SD_TxDMACallback);
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_DMA_Init+0x7c>)
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480a      	ldr	r0, [pc, #40]	@ (8000a74 <MX_DMA_Init+0x90>)
 8000a4c:	f014 fc0c 	bl	8015268 <iprintf>


}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	20004f80 	.word	0x20004f80
 8000a60:	0800099d 	.word	0x0800099d
 8000a64:	20004e9c 	.word	0x20004e9c
 8000a68:	20004f20 	.word	0x20004f20
 8000a6c:	080009c1 	.word	0x080009c1
 8000a70:	0801612c 	.word	0x0801612c
 8000a74:	08016158 	.word	0x08016158

08000a78 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a7e:	4a16      	ldr	r2, [pc, #88]	@ (8000ad8 <MX_DMA2D_Init+0x60>)
 8000a80:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a82:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000aac:	4809      	ldr	r0, [pc, #36]	@ (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000aae:	f004 f8c3 	bl	8004c38 <HAL_DMA2D_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ab8:	f001 f8c0 	bl	8001c3c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000abc:	2101      	movs	r1, #1
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_DMA2D_Init+0x5c>)
 8000ac0:	f004 fa14 	bl	8004eec <HAL_DMA2D_ConfigLayer>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000aca:	f001 f8b7 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000288 	.word	0x20000288
 8000ad8:	4002b000 	.word	0x4002b000

08000adc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b20 <HAL_DMA2D_MspInit+0x44>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d113      	bne.n	8000b16 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <HAL_DMA2D_MspInit+0x48>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <HAL_DMA2D_MspInit+0x48>)
 8000af4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <HAL_DMA2D_MspInit+0x48>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2105      	movs	r1, #5
 8000b0a:	205a      	movs	r0, #90	@ 0x5a
 8000b0c:	f003 fafa 	bl	8004104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000b10:	205a      	movs	r0, #90	@ 0x5a
 8000b12:	f003 fb13 	bl	800413c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	4002b000 	.word	0x4002b000
 8000b24:	40023800 	.word	0x40023800

08000b28 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b2e:	4a20      	ldr	r2, [pc, #128]	@ (8000bb0 <MX_ETH_Init+0x88>)
 8000b30:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b3a:	2280      	movs	r2, #128	@ 0x80
 8000b3c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b40:	22e1      	movs	r2, #225	@ 0xe1
 8000b42:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b50:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b58:	4a16      	ldr	r2, [pc, #88]	@ (8000bb4 <MX_ETH_Init+0x8c>)
 8000b5a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b5e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b62:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b66:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <MX_ETH_Init+0x90>)
 8000b68:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b6c:	4a13      	ldr	r2, [pc, #76]	@ (8000bbc <MX_ETH_Init+0x94>)
 8000b6e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b72:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000b76:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <MX_ETH_Init+0x84>)
 8000b7a:	f004 fa49 	bl	8005010 <HAL_ETH_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b84:	f001 f85a 	bl	8001c3c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b88:	2238      	movs	r2, #56	@ 0x38
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <MX_ETH_Init+0x98>)
 8000b8e:	f014 fcb3 	bl	80154f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_ETH_Init+0x98>)
 8000b94:	2221      	movs	r2, #33	@ 0x21
 8000b96:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_ETH_Init+0x98>)
 8000b9a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b9e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <MX_ETH_Init+0x98>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000300 	.word	0x20000300
 8000bb0:	40028000 	.word	0x40028000
 8000bb4:	200003b0 	.word	0x200003b0
 8000bb8:	20000110 	.word	0x20000110
 8000bbc:	20000070 	.word	0x20000070
 8000bc0:	200002c8 	.word	0x200002c8

08000bc4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	@ 0x38
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a3f      	ldr	r2, [pc, #252]	@ (8000ce0 <HAL_ETH_MspInit+0x11c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d178      	bne.n	8000cd8 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000be6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a3e      	ldr	r2, [pc, #248]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	4b39      	ldr	r3, [pc, #228]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a38      	ldr	r2, [pc, #224]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	4b33      	ldr	r3, [pc, #204]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a32      	ldr	r2, [pc, #200]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b30      	ldr	r3, [pc, #192]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a2c      	ldr	r2, [pc, #176]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a26      	ldr	r2, [pc, #152]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a20      	ldr	r2, [pc, #128]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <HAL_ETH_MspInit+0x120>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000c76:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c88:	230b      	movs	r3, #11
 8000c8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4815      	ldr	r0, [pc, #84]	@ (8000ce8 <HAL_ETH_MspInit+0x124>)
 8000c94:	f004 fd0a 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c98:	2332      	movs	r3, #50	@ 0x32
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca8:	230b      	movs	r3, #11
 8000caa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480e      	ldr	r0, [pc, #56]	@ (8000cec <HAL_ETH_MspInit+0x128>)
 8000cb4:	f004 fcfa 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cb8:	2386      	movs	r3, #134	@ 0x86
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4807      	ldr	r0, [pc, #28]	@ (8000cf0 <HAL_ETH_MspInit+0x12c>)
 8000cd4:	f004 fcea 	bl	80056ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3738      	adds	r7, #56	@ 0x38
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40028000 	.word	0x40028000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40021800 	.word	0x40021800
 8000cec:	40020800 	.word	0x40020800
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	615a      	str	r2, [r3, #20]
 8000d0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d0e:	4a20      	ldr	r2, [pc, #128]	@ (8000d90 <MX_FMC_Init+0x9c>)
 8000d10:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d20:	2204      	movs	r2, #4
 8000d22:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000d24:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d26:	2210      	movs	r2, #16
 8000d28:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d2c:	2240      	movs	r2, #64	@ 0x40
 8000d2e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000d30:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d32:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000d36:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d44:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000d60:	2307      	movs	r3, #7
 8000d62:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000d64:	2303      	movs	r3, #3
 8000d66:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_FMC_Init+0x98>)
 8000d76:	f008 fed8 	bl	8009b2a <HAL_SDRAM_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000d80:	f000 ff5c 	bl	8001c3c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200003b8 	.word	0x200003b8
 8000d90:	a0000140 	.word	0xa0000140

08000d94 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000da8:	4b3a      	ldr	r3, [pc, #232]	@ (8000e94 <HAL_FMC_MspInit+0x100>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d16d      	bne.n	8000e8c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000db0:	4b38      	ldr	r3, [pc, #224]	@ (8000e94 <HAL_FMC_MspInit+0x100>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000db6:	4b38      	ldr	r3, [pc, #224]	@ (8000e98 <HAL_FMC_MspInit+0x104>)
 8000db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dba:	4a37      	ldr	r2, [pc, #220]	@ (8000e98 <HAL_FMC_MspInit+0x104>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6393      	str	r3, [r2, #56]	@ 0x38
 8000dc2:	4b35      	ldr	r3, [pc, #212]	@ (8000e98 <HAL_FMC_MspInit+0x104>)
 8000dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000dce:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000dd2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000de0:	230c      	movs	r3, #12
 8000de2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	482c      	ldr	r0, [pc, #176]	@ (8000e9c <HAL_FMC_MspInit+0x108>)
 8000dea:	f004 fc5f 	bl	80056ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000dee:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000df2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e00:	230c      	movs	r3, #12
 8000e02:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4825      	ldr	r0, [pc, #148]	@ (8000ea0 <HAL_FMC_MspInit+0x10c>)
 8000e0a:	f004 fc4f 	bl	80056ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000e0e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000e12:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e20:	230c      	movs	r3, #12
 8000e22:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4619      	mov	r1, r3
 8000e28:	481e      	ldr	r0, [pc, #120]	@ (8000ea4 <HAL_FMC_MspInit+0x110>)
 8000e2a:	f004 fc3f 	bl	80056ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000e2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000e32:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e40:	230c      	movs	r3, #12
 8000e42:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4817      	ldr	r0, [pc, #92]	@ (8000ea8 <HAL_FMC_MspInit+0x114>)
 8000e4a:	f004 fc2f 	bl	80056ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000e4e:	2328      	movs	r3, #40	@ 0x28
 8000e50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e5e:	230c      	movs	r3, #12
 8000e60:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4811      	ldr	r0, [pc, #68]	@ (8000eac <HAL_FMC_MspInit+0x118>)
 8000e68:	f004 fc20 	bl	80056ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	480a      	ldr	r0, [pc, #40]	@ (8000eb0 <HAL_FMC_MspInit+0x11c>)
 8000e86:	f004 fc11 	bl	80056ac <HAL_GPIO_Init>
 8000e8a:	e000      	b.n	8000e8e <HAL_FMC_MspInit+0xfa>
    return;
 8000e8c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200003ec 	.word	0x200003ec
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40021800 	.word	0x40021800
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	40021400 	.word	0x40021400
 8000eac:	40021c00 	.word	0x40021c00
 8000eb0:	40020800 	.word	0x40020800

08000eb4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000ebc:	f7ff ff6a 	bl	8000d94 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void) {
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	 demo application. If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4a07      	ldr	r2, [pc, #28]	@ (8000f28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f0c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <vApplicationGetIdleTaskMemory+0x30>)
 8000f12:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2280      	movs	r2, #128	@ 0x80
 8000f18:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20004498 	.word	0x20004498
 8000f2c:	2000453c 	.word	0x2000453c

08000f30 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 4096,
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <MX_FREERTOS_Init+0x30>)
 8000f38:	1d3c      	adds	r4, r7, #4
 8000f3a:	461d      	mov	r5, r3
 8000f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			defaultTaskBuffer, &defaultTaskControlBlock);
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f011 f90b 	bl	8012168 <osThreadCreate>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a03      	ldr	r2, [pc, #12]	@ (8000f64 <MX_FREERTOS_Init+0x34>)
 8000f56:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f60:	08016194 	.word	0x08016194
 8000f64:	200003f0 	.word	0x200003f0

08000f68 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	f5ad 7d2a 	sub.w	sp, sp, #680	@ 0x2a8
 8000f6e:	af02      	add	r7, sp, #8
 8000f70:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8000f74:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8000f78:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN StartDefaultTask */
	FRESULT res;
	uint32_t byteswritten, bytesread;
	uint8_t wtext[] = "This is STM32 working with FatFs\r\n";
 8000f7a:	4b75      	ldr	r3, [pc, #468]	@ (8001150 <StartDefaultTask+0x1e8>)
 8000f7c:	f507 741c 	add.w	r4, r7, #624	@ 0x270
 8000f80:	461d      	mov	r5, r3
 8000f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8a:	682b      	ldr	r3, [r5, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	8022      	strh	r2, [r4, #0]
 8000f90:	3402      	adds	r4, #2
 8000f92:	0c1b      	lsrs	r3, r3, #16
 8000f94:	7023      	strb	r3, [r4, #0]
	uint8_t rtext[100];
	BYTE workBuffer[512];

	printf("[INFO] StartDefaultTask running (FreeRTOS OK)\r\n");
 8000f96:	486f      	ldr	r0, [pc, #444]	@ (8001154 <StartDefaultTask+0x1ec>)
 8000f98:	f014 f9ce 	bl	8015338 <puts>

	// Step 1 - Mount the filesystem
	printf("[INFO] Mounting filesystem...\r\n");
 8000f9c:	486e      	ldr	r0, [pc, #440]	@ (8001158 <StartDefaultTask+0x1f0>)
 8000f9e:	f014 f9cb 	bl	8015338 <puts>
	res = f_mount(&SDFatFs, (TCHAR const*) SDPath, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	496d      	ldr	r1, [pc, #436]	@ (800115c <StartDefaultTask+0x1f4>)
 8000fa6:	486e      	ldr	r0, [pc, #440]	@ (8001160 <StartDefaultTask+0x1f8>)
 8000fa8:	f00e fde4 	bl	800fb74 <f_mount>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
	printf("[DEBUG] f_mount returned: %d\r\n", res);
 8000fb2:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	486a      	ldr	r0, [pc, #424]	@ (8001164 <StartDefaultTask+0x1fc>)
 8000fba:	f014 f955 	bl	8015268 <iprintf>

	// Step 2 - Format if needed
	if (res == FR_NO_FILESYSTEM) {
 8000fbe:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8000fc2:	2b0d      	cmp	r3, #13
 8000fc4:	d12a      	bne.n	800101c <StartDefaultTask+0xb4>
		printf("[WARN] No filesystem found. Formatting...\r\n");
 8000fc6:	4868      	ldr	r0, [pc, #416]	@ (8001168 <StartDefaultTask+0x200>)
 8000fc8:	f014 f9b6 	bl	8015338 <puts>
		res = f_mkfs(SDPath, FM_ANY, 0, workBuffer, sizeof(workBuffer));
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd4:	9200      	str	r2, [sp, #0]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2107      	movs	r1, #7
 8000fda:	4860      	ldr	r0, [pc, #384]	@ (800115c <StartDefaultTask+0x1f4>)
 8000fdc:	f00f fe10 	bl	8010c00 <f_mkfs>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
		printf("[DEBUG] f_mkfs returned: %d\r\n", res);
 8000fe6:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8000fea:	4619      	mov	r1, r3
 8000fec:	485f      	ldr	r0, [pc, #380]	@ (800116c <StartDefaultTask+0x204>)
 8000fee:	f014 f93b 	bl	8015268 <iprintf>
		if (res != FR_OK)
 8000ff2:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <StartDefaultTask+0x96>
			Error_Handler();
 8000ffa:	f000 fe1f 	bl	8001c3c <Error_Handler>

		res = f_mount(&SDFatFs, (TCHAR const*) SDPath, 1);
 8000ffe:	2201      	movs	r2, #1
 8001000:	4956      	ldr	r1, [pc, #344]	@ (800115c <StartDefaultTask+0x1f4>)
 8001002:	4857      	ldr	r0, [pc, #348]	@ (8001160 <StartDefaultTask+0x1f8>)
 8001004:	f00e fdb6 	bl	800fb74 <f_mount>
 8001008:	4603      	mov	r3, r0
 800100a:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
		if (res != FR_OK)
 800100e:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00e      	beq.n	8001034 <StartDefaultTask+0xcc>
			Error_Handler();
 8001016:	f000 fe11 	bl	8001c3c <Error_Handler>
 800101a:	e00b      	b.n	8001034 <StartDefaultTask+0xcc>
	} else if (res != FR_OK) {
 800101c:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <StartDefaultTask+0xcc>
		printf("[ERROR] f_mount failed. res = %d\r\n", res);
 8001024:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8001028:	4619      	mov	r1, r3
 800102a:	4851      	ldr	r0, [pc, #324]	@ (8001170 <StartDefaultTask+0x208>)
 800102c:	f014 f91c 	bl	8015268 <iprintf>
		Error_Handler();
 8001030:	f000 fe04 	bl	8001c3c <Error_Handler>
	}

	// Step 3 - Open for write
	printf("[INFO] Opening file for writing...\r\n");
 8001034:	484f      	ldr	r0, [pc, #316]	@ (8001174 <StartDefaultTask+0x20c>)
 8001036:	f014 f97f 	bl	8015338 <puts>
	res = f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE);
 800103a:	220a      	movs	r2, #10
 800103c:	494e      	ldr	r1, [pc, #312]	@ (8001178 <StartDefaultTask+0x210>)
 800103e:	484f      	ldr	r0, [pc, #316]	@ (800117c <StartDefaultTask+0x214>)
 8001040:	f00e fdfc 	bl	800fc3c <f_open>
 8001044:	4603      	mov	r3, r0
 8001046:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
	if (res != FR_OK) {
 800104a:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <StartDefaultTask+0xfa>
		printf("[ERROR] f_open failed. res = %d\r\n", res);
 8001052:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8001056:	4619      	mov	r1, r3
 8001058:	4849      	ldr	r0, [pc, #292]	@ (8001180 <StartDefaultTask+0x218>)
 800105a:	f014 f905 	bl	8015268 <iprintf>
		Error_Handler();
 800105e:	f000 fded 	bl	8001c3c <Error_Handler>
	}

	// Step 4 - Write
	res = f_write(&MyFile, wtext, sizeof(wtext), (void*) &byteswritten);
 8001062:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001066:	f507 711c 	add.w	r1, r7, #624	@ 0x270
 800106a:	2223      	movs	r2, #35	@ 0x23
 800106c:	4843      	ldr	r0, [pc, #268]	@ (800117c <StartDefaultTask+0x214>)
 800106e:	f00f fa72 	bl	8010556 <f_write>
 8001072:	4603      	mov	r3, r0
 8001074:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
	if ((byteswritten == 0) || (res != FR_OK)) {
 8001078:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <StartDefaultTask+0x120>
 8001080:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8001084:	2b00      	cmp	r3, #0
 8001086:	d009      	beq.n	800109c <StartDefaultTask+0x134>
		printf("[ERROR] f_write failed. res = %d, bytes = %lu\r\n", res,
 8001088:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 800108c:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8001090:	4619      	mov	r1, r3
 8001092:	483c      	ldr	r0, [pc, #240]	@ (8001184 <StartDefaultTask+0x21c>)
 8001094:	f014 f8e8 	bl	8015268 <iprintf>
				byteswritten);
		Error_Handler();
 8001098:	f000 fdd0 	bl	8001c3c <Error_Handler>
	}
	f_close(&MyFile);
 800109c:	4837      	ldr	r0, [pc, #220]	@ (800117c <StartDefaultTask+0x214>)
 800109e:	f00f fd80 	bl	8010ba2 <f_close>
	printf("[INFO] Write OK (%lu bytes)\r\n", byteswritten);
 80010a2:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80010a6:	4619      	mov	r1, r3
 80010a8:	4837      	ldr	r0, [pc, #220]	@ (8001188 <StartDefaultTask+0x220>)
 80010aa:	f014 f8dd 	bl	8015268 <iprintf>

	// Step 5 - Read back
	printf("[INFO] Reading back the file...\r\n");
 80010ae:	4837      	ldr	r0, [pc, #220]	@ (800118c <StartDefaultTask+0x224>)
 80010b0:	f014 f942 	bl	8015338 <puts>
	res = f_open(&MyFile, "STM32.TXT", FA_READ);
 80010b4:	2201      	movs	r2, #1
 80010b6:	4930      	ldr	r1, [pc, #192]	@ (8001178 <StartDefaultTask+0x210>)
 80010b8:	4830      	ldr	r0, [pc, #192]	@ (800117c <StartDefaultTask+0x214>)
 80010ba:	f00e fdbf 	bl	800fc3c <f_open>
 80010be:	4603      	mov	r3, r0
 80010c0:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
	if (res != FR_OK) {
 80010c4:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d007      	beq.n	80010dc <StartDefaultTask+0x174>
		printf("[ERROR] f_open for read failed. res = %d\r\n", res);
 80010cc:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 80010d0:	4619      	mov	r1, r3
 80010d2:	482f      	ldr	r0, [pc, #188]	@ (8001190 <StartDefaultTask+0x228>)
 80010d4:	f014 f8c8 	bl	8015268 <iprintf>
		Error_Handler();
 80010d8:	f000 fdb0 	bl	8001c3c <Error_Handler>
	}

	res = f_read(&MyFile, rtext, sizeof(rtext) - 1, (UINT*) &bytesread);
 80010dc:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 80010e0:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80010e4:	2263      	movs	r2, #99	@ 0x63
 80010e6:	4825      	ldr	r0, [pc, #148]	@ (800117c <StartDefaultTask+0x214>)
 80010e8:	f00f f88e 	bl	8010208 <f_read>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
	rtext[bytesread] = '\0';
 80010f2:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80010f6:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80010fa:	443b      	add	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	f803 2c94 	strb.w	r2, [r3, #-148]
	if ((bytesread == 0) || (res != FR_OK)) {
 8001102:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <StartDefaultTask+0x1aa>
 800110a:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 800110e:	2b00      	cmp	r3, #0
 8001110:	d009      	beq.n	8001126 <StartDefaultTask+0x1be>
		printf("[ERROR] f_read failed. res = %d, bytesread = %lu\r\n", res,
 8001112:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8001116:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
 800111a:	4619      	mov	r1, r3
 800111c:	481d      	ldr	r0, [pc, #116]	@ (8001194 <StartDefaultTask+0x22c>)
 800111e:	f014 f8a3 	bl	8015268 <iprintf>
				bytesread);
		Error_Handler();
 8001122:	f000 fd8b 	bl	8001c3c <Error_Handler>
	}
	f_close(&MyFile);
 8001126:	4815      	ldr	r0, [pc, #84]	@ (800117c <StartDefaultTask+0x214>)
 8001128:	f00f fd3b 	bl	8010ba2 <f_close>
	printf("[INFO] Read OK (%lu bytes): '%s'\r\n", bytesread, rtext);
 800112c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8001130:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 8001134:	4619      	mov	r1, r3
 8001136:	4818      	ldr	r0, [pc, #96]	@ (8001198 <StartDefaultTask+0x230>)
 8001138:	f014 f896 	bl	8015268 <iprintf>

	// Step 6 - Success LED
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2102      	movs	r1, #2
 8001140:	4816      	ldr	r0, [pc, #88]	@ (800119c <StartDefaultTask+0x234>)
 8001142:	f004 fc77 	bl	8005a34 <HAL_GPIO_WritePin>
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f011 f85a 	bl	8012200 <osDelay>
 800114c:	e7fb      	b.n	8001146 <StartDefaultTask+0x1de>
 800114e:	bf00      	nop
 8001150:	080163dc 	.word	0x080163dc
 8001154:	080161b0 	.word	0x080161b0
 8001158:	080161e0 	.word	0x080161e0
 800115c:	200054a0 	.word	0x200054a0
 8001160:	2000488c 	.word	0x2000488c
 8001164:	08016200 	.word	0x08016200
 8001168:	08016220 	.word	0x08016220
 800116c:	0801624c 	.word	0x0801624c
 8001170:	0801626c 	.word	0x0801626c
 8001174:	08016290 	.word	0x08016290
 8001178:	080162b4 	.word	0x080162b4
 800117c:	20004ac8 	.word	0x20004ac8
 8001180:	080162c0 	.word	0x080162c0
 8001184:	080162e4 	.word	0x080162e4
 8001188:	08016314 	.word	0x08016314
 800118c:	08016334 	.word	0x08016334
 8001190:	08016358 	.word	0x08016358
 8001194:	08016384 	.word	0x08016384
 8001198:	080163b8 	.word	0x080163b8
 800119c:	40022000 	.word	0x40022000

080011a0 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b090      	sub	sp, #64	@ 0x40
 80011a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	4bb0      	ldr	r3, [pc, #704]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4aaf      	ldr	r2, [pc, #700]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4bad      	ldr	r3, [pc, #692]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ce:	4baa      	ldr	r3, [pc, #680]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4aa9      	ldr	r2, [pc, #676]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80011d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4ba7      	ldr	r3, [pc, #668]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4ba4      	ldr	r3, [pc, #656]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4aa3      	ldr	r2, [pc, #652]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4ba1      	ldr	r3, [pc, #644]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
 80011fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fe:	4b9e      	ldr	r3, [pc, #632]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a9d      	ldr	r2, [pc, #628]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b9b      	ldr	r3, [pc, #620]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b98      	ldr	r3, [pc, #608]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a97      	ldr	r2, [pc, #604]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b95      	ldr	r3, [pc, #596]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b92      	ldr	r3, [pc, #584]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a91      	ldr	r2, [pc, #580]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b8f      	ldr	r3, [pc, #572]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001246:	4b8c      	ldr	r3, [pc, #560]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a8b      	ldr	r2, [pc, #556]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 800124c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b89      	ldr	r3, [pc, #548]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800125e:	4b86      	ldr	r3, [pc, #536]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a85      	ldr	r2, [pc, #532]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b83      	ldr	r3, [pc, #524]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001276:	4b80      	ldr	r3, [pc, #512]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a7f      	ldr	r2, [pc, #508]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 800127c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b7d      	ldr	r3, [pc, #500]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800128e:	4b7a      	ldr	r3, [pc, #488]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a79      	ldr	r2, [pc, #484]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 8001294:	f043 0320 	orr.w	r3, r3, #32
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b77      	ldr	r3, [pc, #476]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0320 	and.w	r3, r3, #32
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	4b74      	ldr	r3, [pc, #464]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a73      	ldr	r2, [pc, #460]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b71      	ldr	r3, [pc, #452]	@ (8001478 <MX_GPIO_Init+0x2d8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2120      	movs	r1, #32
 80012c2:	486e      	ldr	r0, [pc, #440]	@ (800147c <MX_GPIO_Init+0x2dc>)
 80012c4:	f004 fbb6 	bl	8005a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|USER_LED_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	210e      	movs	r1, #14
 80012cc:	486c      	ldr	r0, [pc, #432]	@ (8001480 <MX_GPIO_Init+0x2e0>)
 80012ce:	f004 fbb1 	bl	8005a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2108      	movs	r1, #8
 80012d6:	486b      	ldr	r0, [pc, #428]	@ (8001484 <MX_GPIO_Init+0x2e4>)
 80012d8:	f004 fbac 	bl	8005a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012e2:	4867      	ldr	r0, [pc, #412]	@ (8001480 <MX_GPIO_Init+0x2e0>)
 80012e4:	f004 fba6 	bl	8005a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012ee:	4866      	ldr	r0, [pc, #408]	@ (8001488 <MX_GPIO_Init+0x2e8>)
 80012f0:	f004 fba0 	bl	8005a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	21c8      	movs	r1, #200	@ 0xc8
 80012f8:	4864      	ldr	r0, [pc, #400]	@ (800148c <MX_GPIO_Init+0x2ec>)
 80012fa:	f004 fb9b 	bl	8005a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80012fe:	2308      	movs	r3, #8
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800130e:	4619      	mov	r1, r3
 8001310:	485f      	ldr	r0, [pc, #380]	@ (8001490 <MX_GPIO_Init+0x2f0>)
 8001312:	f004 f9cb 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001316:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001328:	230a      	movs	r3, #10
 800132a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001330:	4619      	mov	r1, r3
 8001332:	4858      	ldr	r0, [pc, #352]	@ (8001494 <MX_GPIO_Init+0x2f4>)
 8001334:	f004 f9ba 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800134a:	4619      	mov	r1, r3
 800134c:	4852      	ldr	r0, [pc, #328]	@ (8001498 <MX_GPIO_Init+0x2f8>)
 800134e:	f004 f9ad 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001352:	2340      	movs	r3, #64	@ 0x40
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001356:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001364:	4619      	mov	r1, r3
 8001366:	4845      	ldr	r0, [pc, #276]	@ (800147c <MX_GPIO_Init+0x2dc>)
 8001368:	f004 f9a0 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800136c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800137e:	230a      	movs	r3, #10
 8001380:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001386:	4619      	mov	r1, r3
 8001388:	4844      	ldr	r0, [pc, #272]	@ (800149c <MX_GPIO_Init+0x2fc>)
 800138a:	f004 f98f 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800138e:	2320      	movs	r3, #32
 8001390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a2:	4619      	mov	r1, r3
 80013a4:	4835      	ldr	r0, [pc, #212]	@ (800147c <MX_GPIO_Init+0x2dc>)
 80013a6:	f004 f981 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin USER_LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|USER_LED_Pin|LCD_DISP_Pin;
 80013aa:	f241 030e 	movw	r3, #4110	@ 0x100e
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013c0:	4619      	mov	r1, r3
 80013c2:	482f      	ldr	r0, [pc, #188]	@ (8001480 <MX_GPIO_Init+0x2e0>)
 80013c4:	f004 f972 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80013c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013da:	4619      	mov	r1, r3
 80013dc:	4830      	ldr	r0, [pc, #192]	@ (80014a0 <MX_GPIO_Init+0x300>)
 80013de:	f004 f965 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80013e2:	2308      	movs	r3, #8
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013f6:	4619      	mov	r1, r3
 80013f8:	4822      	ldr	r0, [pc, #136]	@ (8001484 <MX_GPIO_Init+0x2e4>)
 80013fa:	f004 f957 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013fe:	2310      	movs	r3, #16
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800140e:	4619      	mov	r1, r3
 8001410:	481a      	ldr	r0, [pc, #104]	@ (800147c <MX_GPIO_Init+0x2dc>)
 8001412:	f004 f94b 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001416:	f248 0304 	movw	r3, #32772	@ 0x8004
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001424:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001428:	4619      	mov	r1, r3
 800142a:	4817      	ldr	r0, [pc, #92]	@ (8001488 <MX_GPIO_Init+0x2e8>)
 800142c:	f004 f93e 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001430:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001446:	4619      	mov	r1, r3
 8001448:	480f      	ldr	r0, [pc, #60]	@ (8001488 <MX_GPIO_Init+0x2e8>)
 800144a:	f004 f92f 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800144e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001454:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001458:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001462:	4619      	mov	r1, r3
 8001464:	4806      	ldr	r0, [pc, #24]	@ (8001480 <MX_GPIO_Init+0x2e0>)
 8001466:	f004 f921 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800146a:	2310      	movs	r3, #16
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	e016      	b.n	80014a4 <MX_GPIO_Init+0x304>
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40022000 	.word	0x40022000
 8001484:	40022800 	.word	0x40022800
 8001488:	40021c00 	.word	0x40021c00
 800148c:	40021800 	.word	0x40021800
 8001490:	40021000 	.word	0x40021000
 8001494:	40020400 	.word	0x40020400
 8001498:	40022400 	.word	0x40022400
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020800 	.word	0x40020800
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014aa:	230a      	movs	r3, #10
 80014ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b2:	4619      	mov	r1, r3
 80014b4:	4828      	ldr	r0, [pc, #160]	@ (8001558 <MX_GPIO_Init+0x3b8>)
 80014b6:	f004 f8f9 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80014ba:	23c8      	movs	r3, #200	@ 0xc8
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ce:	4619      	mov	r1, r3
 80014d0:	4822      	ldr	r0, [pc, #136]	@ (800155c <MX_GPIO_Init+0x3bc>)
 80014d2:	f004 f8eb 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80014d6:	2305      	movs	r3, #5
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014e6:	230a      	movs	r3, #10
 80014e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ee:	4619      	mov	r1, r3
 80014f0:	481b      	ldr	r0, [pc, #108]	@ (8001560 <MX_GPIO_Init+0x3c0>)
 80014f2:	f004 f8db 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80014f6:	2304      	movs	r3, #4
 80014f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fa:	2300      	movs	r3, #0
 80014fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001506:	4619      	mov	r1, r3
 8001508:	4814      	ldr	r0, [pc, #80]	@ (800155c <MX_GPIO_Init+0x3bc>)
 800150a:	f004 f8cf 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800150e:	2328      	movs	r3, #40	@ 0x28
 8001510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800151e:	230a      	movs	r3, #10
 8001520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001526:	4619      	mov	r1, r3
 8001528:	480e      	ldr	r0, [pc, #56]	@ (8001564 <MX_GPIO_Init+0x3c4>)
 800152a:	f004 f8bf 	bl	80056ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800152e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001540:	2305      	movs	r3, #5
 8001542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001548:	4619      	mov	r1, r3
 800154a:	4807      	ldr	r0, [pc, #28]	@ (8001568 <MX_GPIO_Init+0x3c8>)
 800154c:	f004 f8ae 	bl	80056ac <HAL_GPIO_Init>

}
 8001550:	bf00      	nop
 8001552:	3740      	adds	r7, #64	@ 0x40
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021c00 	.word	0x40021c00
 800155c:	40021800 	.word	0x40021800
 8001560:	40020800 	.word	0x40020800
 8001564:	40020000 	.word	0x40020000
 8001568:	40020400 	.word	0x40020400

0800156c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <MX_I2C1_Init+0x74>)
 8001572:	4a1c      	ldr	r2, [pc, #112]	@ (80015e4 <MX_I2C1_Init+0x78>)
 8001574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_I2C1_Init+0x74>)
 8001578:	4a1b      	ldr	r2, [pc, #108]	@ (80015e8 <MX_I2C1_Init+0x7c>)
 800157a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800157c:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <MX_I2C1_Init+0x74>)
 8001584:	2201      	movs	r2, #1
 8001586:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001588:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <MX_I2C1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800158e:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <MX_I2C1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <MX_I2C1_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <MX_I2C1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a6:	480e      	ldr	r0, [pc, #56]	@ (80015e0 <MX_I2C1_Init+0x74>)
 80015a8:	f004 fa5e 	bl	8005a68 <HAL_I2C_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015b2:	f000 fb43 	bl	8001c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015b6:	2100      	movs	r1, #0
 80015b8:	4809      	ldr	r0, [pc, #36]	@ (80015e0 <MX_I2C1_Init+0x74>)
 80015ba:	f004 faf1 	bl	8005ba0 <HAL_I2CEx_ConfigAnalogFilter>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015c4:	f000 fb3a 	bl	8001c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015c8:	2100      	movs	r1, #0
 80015ca:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_I2C1_Init+0x74>)
 80015cc:	f004 fb33 	bl	8005c36 <HAL_I2CEx_ConfigDigitalFilter>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015d6:	f000 fb31 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000473c 	.word	0x2000473c
 80015e4:	40005400 	.word	0x40005400
 80015e8:	00c0eaff 	.word	0x00c0eaff

080015ec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <MX_I2C3_Init+0x74>)
 80015f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <MX_I2C3_Init+0x78>)
 80015f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <MX_I2C3_Init+0x74>)
 80015f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001668 <MX_I2C3_Init+0x7c>)
 80015fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <MX_I2C3_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <MX_I2C3_Init+0x74>)
 8001604:	2201      	movs	r2, #1
 8001606:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <MX_I2C3_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_I2C3_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <MX_I2C3_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_I2C3_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_I2C3_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001626:	480e      	ldr	r0, [pc, #56]	@ (8001660 <MX_I2C3_Init+0x74>)
 8001628:	f004 fa1e 	bl	8005a68 <HAL_I2C_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001632:	f000 fb03 	bl	8001c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001636:	2100      	movs	r1, #0
 8001638:	4809      	ldr	r0, [pc, #36]	@ (8001660 <MX_I2C3_Init+0x74>)
 800163a:	f004 fab1 	bl	8005ba0 <HAL_I2CEx_ConfigAnalogFilter>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001644:	f000 fafa 	bl	8001c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001648:	2100      	movs	r1, #0
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <MX_I2C3_Init+0x74>)
 800164c:	f004 faf3 	bl	8005c36 <HAL_I2CEx_ConfigDigitalFilter>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001656:	f000 faf1 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20004790 	.word	0x20004790
 8001664:	40005c00 	.word	0x40005c00
 8001668:	00c0eaff 	.word	0x00c0eaff

0800166c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0ac      	sub	sp, #176	@ 0xb0
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	2284      	movs	r2, #132	@ 0x84
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f013 ff33 	bl	80154f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a44      	ldr	r2, [pc, #272]	@ (80017a8 <HAL_I2C_MspInit+0x13c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d13d      	bne.n	8001718 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800169c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 fc58 	bl	8006f60 <HAL_RCCEx_PeriphCLKConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80016b6:	f000 fac1 	bl	8001c3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b3c      	ldr	r3, [pc, #240]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a3b      	ldr	r2, [pc, #236]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b39      	ldr	r3, [pc, #228]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80016d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016da:	2312      	movs	r3, #18
 80016dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ec:	2304      	movs	r3, #4
 80016ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016f6:	4619      	mov	r1, r3
 80016f8:	482d      	ldr	r0, [pc, #180]	@ (80017b0 <HAL_I2C_MspInit+0x144>)
 80016fa:	f003 ffd7 	bl	80056ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fe:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	4a2a      	ldr	r2, [pc, #168]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 8001704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001708:	6413      	str	r3, [r2, #64]	@ 0x40
 800170a:	4b28      	ldr	r3, [pc, #160]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001716:	e042      	b.n	800179e <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a25      	ldr	r2, [pc, #148]	@ (80017b4 <HAL_I2C_MspInit+0x148>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d13d      	bne.n	800179e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001722:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001726:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	4618      	mov	r0, r3
 8001734:	f005 fc14 	bl	8006f60 <HAL_RCCEx_PeriphCLKConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800173e:	f000 fa7d 	bl	8001c3c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800175a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800175e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001762:	2312      	movs	r3, #18
 8001764:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001768:	2301      	movs	r3, #1
 800176a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001774:	2304      	movs	r3, #4
 8001776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800177a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800177e:	4619      	mov	r1, r3
 8001780:	480d      	ldr	r0, [pc, #52]	@ (80017b8 <HAL_I2C_MspInit+0x14c>)
 8001782:	f003 ff93 	bl	80056ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a08      	ldr	r2, [pc, #32]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 800178c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_I2C_MspInit+0x140>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
}
 800179e:	bf00      	nop
 80017a0:	37b0      	adds	r7, #176	@ 0xb0
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40005400 	.word	0x40005400
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40005c00 	.word	0x40005c00
 80017b8:	40021c00 	.word	0x40021c00

080017bc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	@ 0x38
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2234      	movs	r2, #52	@ 0x34
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f013 fe95 	bl	80154f8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017ce:	4b3a      	ldr	r3, [pc, #232]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 80017d0:	4a3a      	ldr	r2, [pc, #232]	@ (80018bc <MX_LTDC_Init+0x100>)
 80017d2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017d4:	4b38      	ldr	r3, [pc, #224]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017da:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017e0:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017e6:	4b34      	ldr	r3, [pc, #208]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80017ec:	4b32      	ldr	r3, [pc, #200]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 80017ee:	2228      	movs	r2, #40	@ 0x28
 80017f0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80017f2:	4b31      	ldr	r3, [pc, #196]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 80017f4:	2209      	movs	r2, #9
 80017f6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80017f8:	4b2f      	ldr	r3, [pc, #188]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 80017fa:	2235      	movs	r2, #53	@ 0x35
 80017fc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80017fe:	4b2e      	ldr	r3, [pc, #184]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 8001800:	220b      	movs	r2, #11
 8001802:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001804:	4b2c      	ldr	r3, [pc, #176]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 8001806:	f240 2215 	movw	r2, #533	@ 0x215
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800180c:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 800180e:	f240 121b 	movw	r2, #283	@ 0x11b
 8001812:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001814:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 8001816:	f240 2235 	movw	r2, #565	@ 0x235
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 800181e:	f240 121d 	movw	r2, #285	@ 0x11d
 8001822:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001824:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001834:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800183c:	481e      	ldr	r0, [pc, #120]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 800183e:	f004 fa47 	bl	8005cd0 <HAL_LTDC_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001848:	f000 f9f8 	bl	8001c3c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001850:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001854:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800185a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800185e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001860:	2302      	movs	r3, #2
 8001862:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001864:	23ff      	movs	r3, #255	@ 0xff
 8001866:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800186c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001870:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001872:	2307      	movs	r3, #7
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001876:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 800187c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001882:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001886:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2200      	movs	r2, #0
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_LTDC_Init+0xfc>)
 80018a2:	f004 fba7 	bl	8005ff4 <HAL_LTDC_ConfigLayer>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80018ac:	f000 f9c6 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3738      	adds	r7, #56	@ 0x38
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200047e4 	.word	0x200047e4
 80018bc:	40016800 	.word	0x40016800

080018c0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08e      	sub	sp, #56	@ 0x38
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a55      	ldr	r2, [pc, #340]	@ (8001a34 <HAL_LTDC_MspInit+0x174>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	f040 80a3 	bne.w	8001a2a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80018e4:	4b54      	ldr	r3, [pc, #336]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 80018e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e8:	4a53      	ldr	r2, [pc, #332]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 80018ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f0:	4b51      	ldr	r3, [pc, #324]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 80018f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018f8:	623b      	str	r3, [r7, #32]
 80018fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001900:	4a4d      	ldr	r2, [pc, #308]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	6313      	str	r3, [r2, #48]	@ 0x30
 8001908:	4b4b      	ldr	r3, [pc, #300]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001914:	4b48      	ldr	r3, [pc, #288]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001918:	4a47      	ldr	r2, [pc, #284]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800191e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001920:	4b45      	ldr	r3, [pc, #276]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800192c:	4b42      	ldr	r3, [pc, #264]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	4a41      	ldr	r2, [pc, #260]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 8001932:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001936:	6313      	str	r3, [r2, #48]	@ 0x30
 8001938:	4b3f      	ldr	r3, [pc, #252]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001944:	4b3c      	ldr	r3, [pc, #240]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	4a3b      	ldr	r2, [pc, #236]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 800194a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800194e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001950:	4b39      	ldr	r3, [pc, #228]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800195c:	4b36      	ldr	r3, [pc, #216]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001960:	4a35      	ldr	r2, [pc, #212]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 8001962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001966:	6313      	str	r3, [r2, #48]	@ 0x30
 8001968:	4b33      	ldr	r3, [pc, #204]	@ (8001a38 <HAL_LTDC_MspInit+0x178>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001974:	2310      	movs	r3, #16
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001984:	230e      	movs	r3, #14
 8001986:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198c:	4619      	mov	r1, r3
 800198e:	482b      	ldr	r0, [pc, #172]	@ (8001a3c <HAL_LTDC_MspInit+0x17c>)
 8001990:	f003 fe8c 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001994:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019a6:	230e      	movs	r3, #14
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80019aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ae:	4619      	mov	r1, r3
 80019b0:	4823      	ldr	r0, [pc, #140]	@ (8001a40 <HAL_LTDC_MspInit+0x180>)
 80019b2:	f003 fe7b 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80019b6:	23f7      	movs	r3, #247	@ 0xf7
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019c6:	230e      	movs	r3, #14
 80019c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80019ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ce:	4619      	mov	r1, r3
 80019d0:	481c      	ldr	r0, [pc, #112]	@ (8001a44 <HAL_LTDC_MspInit+0x184>)
 80019d2:	f003 fe6b 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80019d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80019e8:	2309      	movs	r3, #9
 80019ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f0:	4619      	mov	r1, r3
 80019f2:	4815      	ldr	r0, [pc, #84]	@ (8001a48 <HAL_LTDC_MspInit+0x188>)
 80019f4:	f003 fe5a 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80019f8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a0a:	230e      	movs	r3, #14
 8001a0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a12:	4619      	mov	r1, r3
 8001a14:	480d      	ldr	r0, [pc, #52]	@ (8001a4c <HAL_LTDC_MspInit+0x18c>)
 8001a16:	f003 fe49 	bl	80056ac <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	2058      	movs	r0, #88	@ 0x58
 8001a20:	f002 fb70 	bl	8004104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001a24:	2058      	movs	r0, #88	@ 0x58
 8001a26:	f002 fb89 	bl	800413c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3738      	adds	r7, #56	@ 0x38
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40016800 	.word	0x40016800
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40022400 	.word	0x40022400
 8001a44:	40022800 	.word	0x40022800
 8001a48:	40021800 	.word	0x40021800
 8001a4c:	40022000 	.word	0x40022000

08001a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a54:	f001 ffb9 	bl	80039ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a58:	f000 f83a 	bl	8001ad0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a5c:	f000 f8aa 	bl	8001bb4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a60:	f7ff fb9e 	bl	80011a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a64:	f7fe ffbe 	bl	80009e4 <MX_DMA_Init>
  MX_ADC3_Init();
 8001a68:	f7fe fdb8 	bl	80005dc <MX_ADC3_Init>
  MX_CRC_Init();
 8001a6c:	f7fe fe62 	bl	8000734 <MX_CRC_Init>
  MX_DCMI_Init();
 8001a70:	f7fe fea2 	bl	80007b8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001a74:	f7ff f800 	bl	8000a78 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001a78:	f7ff f856 	bl	8000b28 <MX_ETH_Init>
  MX_FMC_Init();
 8001a7c:	f7ff f93a 	bl	8000cf4 <MX_FMC_Init>
  MX_I2C1_Init();
 8001a80:	f7ff fd74 	bl	800156c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001a84:	f7ff fdb2 	bl	80015ec <MX_I2C3_Init>
  MX_LTDC_Init();
 8001a88:	f7ff fe98 	bl	80017bc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001a8c:	f000 f8e2 	bl	8001c54 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001a90:	f000 f99c 	bl	8001dcc <MX_RTC_Init>
  MX_SAI2_Init();
 8001a94:	f000 fa6c 	bl	8001f70 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001a98:	f000 fce8 	bl	800246c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001a9c:	f000 fe04 	bl	80026a8 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8001aa0:	f001 fa24 	bl	8002eec <MX_TIM1_Init>
  MX_TIM2_Init();
 8001aa4:	f001 face 	bl	8003044 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001aa8:	f001 fb42 	bl	8003130 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001aac:	f001 fbb8 	bl	8003220 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001ab0:	f001 fc2e 	bl	8003310 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001ab4:	f001 fc80 	bl	80033b8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001ab8:	f001 fe20 	bl	80036fc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001abc:	f001 fe4e 	bl	800375c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001ac0:	f00a fd08 	bl	800c4d4 <MX_FATFS_Init>
//				stat);
//	}
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001ac4:	f7ff fa34 	bl	8000f30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ac8:	f010 fb2b 	bl	8012122 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <main+0x7c>

08001ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b094      	sub	sp, #80	@ 0x50
 8001ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad6:	f107 0320 	add.w	r3, r7, #32
 8001ada:	2230      	movs	r2, #48	@ 0x30
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f013 fd0a 	bl	80154f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001af4:	f004 fc56 	bl	80063a4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	4b2c      	ldr	r3, [pc, #176]	@ (8001bac <SystemClock_Config+0xdc>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afc:	4a2b      	ldr	r2, [pc, #172]	@ (8001bac <SystemClock_Config+0xdc>)
 8001afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b04:	4b29      	ldr	r3, [pc, #164]	@ (8001bac <SystemClock_Config+0xdc>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b10:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <SystemClock_Config+0xe0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <SystemClock_Config+0xe0>)
 8001b16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <SystemClock_Config+0xe0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001b28:	2309      	movs	r3, #9
 8001b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b32:	2301      	movs	r3, #1
 8001b34:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b36:	2302      	movs	r3, #2
 8001b38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b40:	2319      	movs	r3, #25
 8001b42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001b44:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001b48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001b4e:	2309      	movs	r3, #9
 8001b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b52:	f107 0320 	add.w	r3, r7, #32
 8001b56:	4618      	mov	r0, r3
 8001b58:	f004 fd46 	bl	80065e8 <HAL_RCC_OscConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b62:	f000 f86b 	bl	8001c3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b66:	f004 fc2d 	bl	80063c4 <HAL_PWREx_EnableOverDrive>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001b70:	f000 f864 	bl	8001c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b74:	230f      	movs	r3, #15
 8001b76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b80:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2106      	movs	r1, #6
 8001b92:	4618      	mov	r0, r3
 8001b94:	f004 ffcc 	bl	8006b30 <HAL_RCC_ClockConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001b9e:	f000 f84d 	bl	8001c3c <Error_Handler>
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	3750      	adds	r7, #80	@ 0x50
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000

08001bb4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b0a2      	sub	sp, #136	@ 0x88
 8001bb8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2284      	movs	r2, #132	@ 0x84
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f013 fc99 	bl	80154f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001bc6:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <PeriphCommonClock_Config+0x60>)
 8001bc8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001bca:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001bce:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001bd0:	2305      	movs	r3, #5
 8001bd2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001be0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001be4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001be6:	2300      	movs	r3, #0
 8001be8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001bea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001bee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f005 f9b0 	bl	8006f60 <HAL_RCCEx_PeriphCLKConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001c06:	f000 f819 	bl	8001c3c <Error_Handler>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	3788      	adds	r7, #136	@ 0x88
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	00b00008 	.word	0x00b00008

08001c18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001c2a:	f001 fedb 	bl	80039e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40001000 	.word	0x40001000

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("[ERROR] Entered Error_Handler()\r\n");
 8001c40:	4803      	ldr	r0, [pc, #12]	@ (8001c50 <Error_Handler+0x14>)
 8001c42:	f013 fb79 	bl	8015338 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c46:	b672      	cpsid	i
}
 8001c48:	bf00      	nop
//	while (1) {
//		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);  // LED clignotante
//		HAL_Delay(100);
//	}
  /* USER CODE END Error_Handler_Debug */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	08016400 	.word	0x08016400

08001c54 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <MX_QUADSPI_Init+0x50>)
 8001c5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ca8 <MX_QUADSPI_Init+0x54>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <MX_QUADSPI_Init+0x50>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <MX_QUADSPI_Init+0x50>)
 8001c66:	2204      	movs	r2, #4
 8001c68:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <MX_QUADSPI_Init+0x50>)
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <MX_QUADSPI_Init+0x50>)
 8001c72:	2218      	movs	r2, #24
 8001c74:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <MX_QUADSPI_Init+0x50>)
 8001c78:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001c7c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <MX_QUADSPI_Init+0x50>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c84:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <MX_QUADSPI_Init+0x50>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <MX_QUADSPI_Init+0x50>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c90:	4804      	ldr	r0, [pc, #16]	@ (8001ca4 <MX_QUADSPI_Init+0x50>)
 8001c92:	f004 fbe7 	bl	8006464 <HAL_QSPI_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001c9c:	f7ff ffce 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20004d20 	.word	0x20004d20
 8001ca8:	a0001000 	.word	0xa0001000

08001cac <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	@ 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3b      	ldr	r2, [pc, #236]	@ (8001db8 <HAL_QSPI_MspInit+0x10c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d170      	bne.n	8001db0 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001cce:	4b3b      	ldr	r3, [pc, #236]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd2:	4a3a      	ldr	r2, [pc, #232]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001cda:	4b38      	ldr	r3, [pc, #224]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce6:	4b35      	ldr	r3, [pc, #212]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a34      	ldr	r2, [pc, #208]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b32      	ldr	r3, [pc, #200]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a2e      	ldr	r2, [pc, #184]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d16:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a28      	ldr	r2, [pc, #160]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001d1c:	f043 0308 	orr.w	r3, r3, #8
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <HAL_QSPI_MspInit+0x110>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d3e:	2309      	movs	r3, #9
 8001d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	481d      	ldr	r0, [pc, #116]	@ (8001dc0 <HAL_QSPI_MspInit+0x114>)
 8001d4a:	f003 fcaf 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001d4e:	2340      	movs	r3, #64	@ 0x40
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d5e:	230a      	movs	r3, #10
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	4619      	mov	r1, r3
 8001d68:	4816      	ldr	r0, [pc, #88]	@ (8001dc4 <HAL_QSPI_MspInit+0x118>)
 8001d6a:	f003 fc9f 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d6e:	2304      	movs	r3, #4
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d7e:	2309      	movs	r3, #9
 8001d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	4619      	mov	r1, r3
 8001d88:	480e      	ldr	r0, [pc, #56]	@ (8001dc4 <HAL_QSPI_MspInit+0x118>)
 8001d8a:	f003 fc8f 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001d8e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001da0:	2309      	movs	r3, #9
 8001da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	4807      	ldr	r0, [pc, #28]	@ (8001dc8 <HAL_QSPI_MspInit+0x11c>)
 8001dac:	f003 fc7e 	bl	80056ac <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001db0:	bf00      	nop
 8001db2:	3730      	adds	r7, #48	@ 0x30
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	a0001000 	.word	0xa0001000
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40020c00 	.word	0x40020c00

08001dcc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b090      	sub	sp, #64	@ 0x40
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001de2:	2300      	movs	r3, #0
 8001de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001de6:	463b      	mov	r3, r7
 8001de8:	2228      	movs	r2, #40	@ 0x28
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f013 fb83 	bl	80154f8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001df2:	4b46      	ldr	r3, [pc, #280]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001df4:	4a46      	ldr	r2, [pc, #280]	@ (8001f10 <MX_RTC_Init+0x144>)
 8001df6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001df8:	4b44      	ldr	r3, [pc, #272]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001dfe:	4b43      	ldr	r3, [pc, #268]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001e00:	227f      	movs	r2, #127	@ 0x7f
 8001e02:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e04:	4b41      	ldr	r3, [pc, #260]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001e06:	22ff      	movs	r2, #255	@ 0xff
 8001e08:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e0a:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e10:	4b3e      	ldr	r3, [pc, #248]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e16:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e1c:	483b      	ldr	r0, [pc, #236]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001e1e:	f005 fdcf 	bl	80079c0 <HAL_RTC_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001e28:	f7ff ff08 	bl	8001c3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	482f      	ldr	r0, [pc, #188]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001e50:	f005 fe3a 	bl	8007ac8 <HAL_RTC_SetTime>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001e5a:	f7ff feef 	bl	8001c3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4823      	ldr	r0, [pc, #140]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001e80:	f005 febc 	bl	8007bfc <HAL_RTC_SetDate>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001e8a:	f7ff fed7 	bl	8001c3c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001eb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4811      	ldr	r0, [pc, #68]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001ec6:	f005 ff1d 	bl	8007d04 <HAL_RTC_SetAlarm>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001ed0:	f7ff feb4 	bl	8001c3c <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001ed4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001eda:	463b      	mov	r3, r7
 8001edc:	2201      	movs	r2, #1
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480a      	ldr	r0, [pc, #40]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001ee2:	f005 ff0f 	bl	8007d04 <HAL_RTC_SetAlarm>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001eec:	f7ff fea6 	bl	8001c3c <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <MX_RTC_Init+0x140>)
 8001ef6:	f006 f8cf 	bl	8008098 <HAL_RTCEx_SetTimeStamp>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001f00:	f7ff fe9c 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	3740      	adds	r7, #64	@ 0x40
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20004d6c 	.word	0x20004d6c
 8001f10:	40002800 	.word	0x40002800

08001f14 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0a4      	sub	sp, #144	@ 0x90
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	2284      	movs	r2, #132	@ 0x84
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f013 fae7 	bl	80154f8 <memset>
  if(rtcHandle->Instance==RTC)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f68 <HAL_RTC_MspInit+0x54>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d114      	bne.n	8001f5e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f34:	2320      	movs	r3, #32
 8001f36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	4618      	mov	r0, r3
 8001f44:	f005 f80c 	bl	8006f60 <HAL_RCCEx_PeriphCLKConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f4e:	f7ff fe75 	bl	8001c3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_RTC_MspInit+0x58>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f56:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <HAL_RTC_MspInit+0x58>)
 8001f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f5c:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3790      	adds	r7, #144	@ 0x90
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40002800 	.word	0x40002800
 8001f6c:	40023800 	.word	0x40023800

08001f70 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001f74:	4b4d      	ldr	r3, [pc, #308]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001f76:	4a4e      	ldr	r2, [pc, #312]	@ (80020b0 <MX_SAI2_Init+0x140>)
 8001f78:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001f80:	4b4a      	ldr	r3, [pc, #296]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001f86:	4b49      	ldr	r3, [pc, #292]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001f88:	2240      	movs	r2, #64	@ 0x40
 8001f8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001f8c:	4b47      	ldr	r3, [pc, #284]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001f92:	4b46      	ldr	r3, [pc, #280]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001f98:	4b44      	ldr	r3, [pc, #272]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001f9e:	4b43      	ldr	r3, [pc, #268]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001fa4:	4b41      	ldr	r3, [pc, #260]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001faa:	4b40      	ldr	r3, [pc, #256]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fb2:	4a40      	ldr	r2, [pc, #256]	@ (80020b4 <MX_SAI2_Init+0x144>)
 8001fb4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001fc8:	4b38      	ldr	r3, [pc, #224]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001fce:	4b37      	ldr	r3, [pc, #220]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001fd4:	4b35      	ldr	r3, [pc, #212]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001fda:	4b34      	ldr	r3, [pc, #208]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001fe0:	4b32      	ldr	r3, [pc, #200]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001fe6:	4b31      	ldr	r3, [pc, #196]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001fec:	4b2f      	ldr	r3, [pc, #188]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8002000:	2200      	movs	r2, #0
 8002002:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002004:	4829      	ldr	r0, [pc, #164]	@ (80020ac <MX_SAI2_Init+0x13c>)
 8002006:	f006 f8af 	bl	8008168 <HAL_SAI_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002010:	f7ff fe14 	bl	8001c3c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002014:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002016:	4a29      	ldr	r2, [pc, #164]	@ (80020bc <MX_SAI2_Init+0x14c>)
 8002018:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800201a:	4b27      	ldr	r3, [pc, #156]	@ (80020b8 <MX_SAI2_Init+0x148>)
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002022:	2203      	movs	r2, #3
 8002024:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8002026:	4b24      	ldr	r3, [pc, #144]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002028:	2240      	movs	r2, #64	@ 0x40
 800202a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800202c:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <MX_SAI2_Init+0x148>)
 800202e:	2200      	movs	r2, #0
 8002030:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002032:	4b21      	ldr	r3, [pc, #132]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002034:	2200      	movs	r2, #0
 8002036:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002038:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <MX_SAI2_Init+0x148>)
 800203a:	2201      	movs	r2, #1
 800203c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800203e:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002044:	4b1c      	ldr	r3, [pc, #112]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <MX_SAI2_Init+0x148>)
 800204c:	2200      	movs	r2, #0
 800204e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002050:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002056:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002058:	2200      	movs	r2, #0
 800205a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800205c:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <MX_SAI2_Init+0x148>)
 800205e:	2200      	movs	r2, #0
 8002060:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002064:	2208      	movs	r2, #8
 8002066:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002068:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <MX_SAI2_Init+0x148>)
 800206a:	2201      	movs	r2, #1
 800206c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800206e:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002070:	2200      	movs	r2, #0
 8002072:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002074:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002076:	2200      	movs	r2, #0
 8002078:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800207a:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <MX_SAI2_Init+0x148>)
 800207c:	2200      	movs	r2, #0
 800207e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002080:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002082:	2200      	movs	r2, #0
 8002084:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002088:	2200      	movs	r2, #0
 800208a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <MX_SAI2_Init+0x148>)
 800208e:	2201      	movs	r2, #1
 8002090:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002092:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <MX_SAI2_Init+0x148>)
 8002094:	2200      	movs	r2, #0
 8002096:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002098:	4807      	ldr	r0, [pc, #28]	@ (80020b8 <MX_SAI2_Init+0x148>)
 800209a:	f006 f865 	bl	8008168 <HAL_SAI_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80020a4:	f7ff fdca 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20004d8c 	.word	0x20004d8c
 80020b0:	40015c04 	.word	0x40015c04
 80020b4:	0002ee00 	.word	0x0002ee00
 80020b8:	20004e10 	.word	0x20004e10
 80020bc:	40015c24 	.word	0x40015c24

080020c0 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	@ 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a2b      	ldr	r2, [pc, #172]	@ (800217c <HAL_SAI_MspInit+0xbc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d124      	bne.n	800211c <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 80020d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002180 <HAL_SAI_MspInit+0xc0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80020da:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <HAL_SAI_MspInit+0xc4>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	4a29      	ldr	r2, [pc, #164]	@ (8002184 <HAL_SAI_MspInit+0xc4>)
 80020e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020e6:	4b27      	ldr	r3, [pc, #156]	@ (8002184 <HAL_SAI_MspInit+0xc4>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80020f2:	4b23      	ldr	r3, [pc, #140]	@ (8002180 <HAL_SAI_MspInit+0xc0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3301      	adds	r3, #1
 80020f8:	4a21      	ldr	r2, [pc, #132]	@ (8002180 <HAL_SAI_MspInit+0xc0>)
 80020fa:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80020fc:	23f0      	movs	r3, #240	@ 0xf0
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800210c:	230a      	movs	r3, #10
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	481c      	ldr	r0, [pc, #112]	@ (8002188 <HAL_SAI_MspInit+0xc8>)
 8002118:	f003 fac8 	bl	80056ac <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1a      	ldr	r2, [pc, #104]	@ (800218c <HAL_SAI_MspInit+0xcc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d125      	bne.n	8002172 <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8002126:	4b16      	ldr	r3, [pc, #88]	@ (8002180 <HAL_SAI_MspInit+0xc0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10b      	bne.n	8002146 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800212e:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <HAL_SAI_MspInit+0xc4>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	4a14      	ldr	r2, [pc, #80]	@ (8002184 <HAL_SAI_MspInit+0xc4>)
 8002134:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002138:	6453      	str	r3, [r2, #68]	@ 0x44
 800213a:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <HAL_SAI_MspInit+0xc4>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <HAL_SAI_MspInit+0xc0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	4a0c      	ldr	r2, [pc, #48]	@ (8002180 <HAL_SAI_MspInit+0xc0>)
 800214e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002150:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002162:	230a      	movs	r3, #10
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4619      	mov	r1, r3
 800216c:	4808      	ldr	r0, [pc, #32]	@ (8002190 <HAL_SAI_MspInit+0xd0>)
 800216e:	f003 fa9d 	bl	80056ac <HAL_GPIO_Init>

    }
}
 8002172:	bf00      	nop
 8002174:	3728      	adds	r7, #40	@ 0x28
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40015c04 	.word	0x40015c04
 8002180:	20004e94 	.word	0x20004e94
 8002184:	40023800 	.word	0x40023800
 8002188:	40022000 	.word	0x40022000
 800218c:	40015c24 	.word	0x40015c24
 8002190:	40021800 	.word	0x40021800

08002194 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <SD_CheckStatus+0x38>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80021a4:	f000 fcba 	bl	8002b1c <BSP_SD_GetCardState>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d107      	bne.n	80021be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80021ae:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <SD_CheckStatus+0x38>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <SD_CheckStatus+0x38>)
 80021bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80021be:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <SD_CheckStatus+0x38>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000000 	.word	0x20000000

080021d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <SD_initialize+0x6c>)
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 80021e0:	f00f ffa6 	bl	8012130 <osKernelRunning>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d020      	beq.n	800222c <SD_initialize+0x5c>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80021ea:	f000 faf1 	bl	80027d0 <BSP_SD_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ffcc 	bl	8002194 <SD_CheckStatus>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461a      	mov	r2, r3
 8002200:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <SD_initialize+0x6c>)
 8002202:	701a      	strb	r2, [r3, #0]

    /*
     * if the SD is correctly initialized, create the operation queue
     */

    if (Stat != STA_NOINIT)
 8002204:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <SD_initialize+0x6c>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d00e      	beq.n	800222c <SD_initialize+0x5c>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800220e:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <SD_initialize+0x70>)
 8002210:	f107 0408 	add.w	r4, r7, #8
 8002214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f010 f8d8 	bl	80123d6 <osMessageCreate>
 8002226:	4603      	mov	r3, r0
 8002228:	4a06      	ldr	r2, [pc, #24]	@ (8002244 <SD_initialize+0x74>)
 800222a:	6013      	str	r3, [r2, #0]
    }
  }

  return Stat;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <SD_initialize+0x6c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
}
 8002232:	4618      	mov	r0, r3
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}
 800223a:	bf00      	nop
 800223c:	20000000 	.word	0x20000000
 8002240:	08016424 	.word	0x08016424
 8002244:	20004e98 	.word	0x20004e98

08002248 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff9d 	bl	8002194 <SD_CheckStatus>
 800225a:	4603      	mov	r3, r0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	4603      	mov	r3, r0
 8002272:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t timer;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	68b8      	ldr	r0, [r7, #8]
 8002280:	f000 fb08 	bl	8002894 <BSP_SD_ReadBlocks_DMA>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d125      	bne.n	80022d6 <SD_read+0x72>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800228a:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <SD_read+0x80>)
 800228c:	6819      	ldr	r1, [r3, #0]
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002296:	4618      	mov	r0, r3
 8002298:	f010 f906 	bl	80124a8 <osMessageGet>

    if (event.status == osEventMessage)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d119      	bne.n	80022d6 <SD_read+0x72>
    {
      if (event.value.v == READ_CPLT_MSG)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d116      	bne.n	80022d6 <SD_read+0x72>
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 80022a8:	f00f ff4e 	bl	8012148 <osKernelSysTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f247 5330 	movw	r3, #30000	@ 0x7530
 80022b2:	4413      	add	r3, r2
 80022b4:	623b      	str	r3, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 80022b6:	e008      	b.n	80022ca <SD_read+0x66>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80022b8:	f000 fc30 	bl	8002b1c <BSP_SD_GetCardState>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <SD_read+0x66>
          {
            res = RES_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80022c8:	e005      	b.n	80022d6 <SD_read+0x72>
        while(timer > osKernelSysTick())
 80022ca:	f00f ff3d 	bl	8012148 <osKernelSysTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d8f0      	bhi.n	80022b8 <SD_read+0x54>
        }
      }
    }
  }

  return res;
 80022d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3728      	adds	r7, #40	@ 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20004e98 	.word	0x20004e98

080022e8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	@ 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	4603      	mov	r3, r0
 80022f6:	73fb      	strb	r3, [r7, #15]
  osEvent event;
  DRESULT res = RES_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif


  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	68b8      	ldr	r0, [r7, #8]
 8002304:	f000 fade 	bl	80028c4 <BSP_SD_WriteBlocks_DMA>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d125      	bne.n	800235a <SD_write+0x72>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800230e:	4b16      	ldr	r3, [pc, #88]	@ (8002368 <SD_write+0x80>)
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	f247 5230 	movw	r2, #30000	@ 0x7530
 800231a:	4618      	mov	r0, r3
 800231c:	f010 f8c4 	bl	80124a8 <osMessageGet>

    if (event.status == osEventMessage)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b10      	cmp	r3, #16
 8002324:	d119      	bne.n	800235a <SD_write+0x72>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d116      	bne.n	800235a <SD_write+0x72>
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 800232c:	f00f ff0c 	bl	8012148 <osKernelSysTick>
 8002330:	4602      	mov	r2, r0
 8002332:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002336:	4413      	add	r3, r2
 8002338:	623b      	str	r3, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 800233a:	e008      	b.n	800234e <SD_write+0x66>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800233c:	f000 fbee 	bl	8002b1c <BSP_SD_GetCardState>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <SD_write+0x66>
          {
            res = RES_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800234c:	e005      	b.n	800235a <SD_write+0x72>
        while(timer > osKernelSysTick())
 800234e:	f00f fefb 	bl	8012148 <osKernelSysTick>
 8002352:	4602      	mov	r2, r0
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	4293      	cmp	r3, r2
 8002358:	d8f0      	bhi.n	800233c <SD_write+0x54>
        }
      }
    }
  }

  return res;
 800235a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800235e:	4618      	mov	r0, r3
 8002360:	3728      	adds	r7, #40	@ 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20004e98 	.word	0x20004e98

0800236c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08c      	sub	sp, #48	@ 0x30
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	603a      	str	r2, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
 8002378:	460b      	mov	r3, r1
 800237a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002382:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <SD_ioctl+0xac>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <SD_ioctl+0x28>
 8002390:	2303      	movs	r3, #3
 8002392:	e03c      	b.n	800240e <SD_ioctl+0xa2>

  switch (cmd)
 8002394:	79bb      	ldrb	r3, [r7, #6]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d834      	bhi.n	8002404 <SD_ioctl+0x98>
 800239a:	a201      	add	r2, pc, #4	@ (adr r2, 80023a0 <SD_ioctl+0x34>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	080023b1 	.word	0x080023b1
 80023a4:	080023b9 	.word	0x080023b9
 80023a8:	080023d1 	.word	0x080023d1
 80023ac:	080023eb 	.word	0x080023eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80023b6:	e028      	b.n	800240a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fbbd 	bl	8002b3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80023c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80023ce:	e01c      	b.n	800240a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fbb1 	bl	8002b3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80023da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023dc:	b29a      	uxth	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80023e8:	e00f      	b.n	800240a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fba4 	bl	8002b3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80023f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f6:	0a5a      	lsrs	r2, r3, #9
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8002402:	e002      	b.n	800240a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8002404:	2304      	movs	r3, #4
 8002406:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800240a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800240e:	4618      	mov	r0, r3
 8002410:	3730      	adds	r7, #48	@ 0x30
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000000 	.word	0x20000000

0800241c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <BSP_SD_WriteCpltCallback+0x20>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	2102      	movs	r1, #2
 800242a:	4618      	mov	r0, r3
 800242c:	f00f fffc 	bl	8012428 <osMessagePut>
   printf("[ISR] BSP_SD_WriteCpltCallback fired!\r\n");
 8002430:	4803      	ldr	r0, [pc, #12]	@ (8002440 <BSP_SD_WriteCpltCallback+0x24>)
 8002432:	f012 ff81 	bl	8015338 <puts>
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20004e98 	.word	0x20004e98
 8002440:	08016434 	.word	0x08016434

08002444 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
   osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <BSP_SD_ReadCpltCallback+0x20>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	2101      	movs	r1, #1
 8002452:	4618      	mov	r0, r3
 8002454:	f00f ffe8 	bl	8012428 <osMessagePut>
   printf("[ISR] BSP_SD_ReadCpltCallback fired!\r\n");
 8002458:	4803      	ldr	r0, [pc, #12]	@ (8002468 <BSP_SD_ReadCpltCallback+0x24>)
 800245a:	f012 ff6d 	bl	8015338 <puts>
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20004e98 	.word	0x20004e98
 8002468:	0801645c 	.word	0x0801645c

0800246c <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002470:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <MX_SDMMC1_SD_Init+0x3c>)
 8002472:	4a0e      	ldr	r2, [pc, #56]	@ (80024ac <MX_SDMMC1_SD_Init+0x40>)
 8002474:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002476:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <MX_SDMMC1_SD_Init+0x3c>)
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800247c:	4b0a      	ldr	r3, [pc, #40]	@ (80024a8 <MX_SDMMC1_SD_Init+0x3c>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002482:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <MX_SDMMC1_SD_Init+0x3c>)
 8002484:	2200      	movs	r2, #0
 8002486:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002488:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <MX_SDMMC1_SD_Init+0x3c>)
 800248a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800248e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002490:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <MX_SDMMC1_SD_Init+0x3c>)
 8002492:	2200      	movs	r2, #0
 8002494:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002496:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <MX_SDMMC1_SD_Init+0x3c>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20004e9c 	.word	0x20004e9c
 80024ac:	40012c00 	.word	0x40012c00

080024b0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002688 <HAL_SD_MspInit+0x1d8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	f040 80d6 	bne.w	8002680 <HAL_SD_MspInit+0x1d0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80024d4:	4b6d      	ldr	r3, [pc, #436]	@ (800268c <HAL_SD_MspInit+0x1dc>)
 80024d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d8:	4a6c      	ldr	r2, [pc, #432]	@ (800268c <HAL_SD_MspInit+0x1dc>)
 80024da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024de:	6453      	str	r3, [r2, #68]	@ 0x44
 80024e0:	4b6a      	ldr	r3, [pc, #424]	@ (800268c <HAL_SD_MspInit+0x1dc>)
 80024e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ec:	4b67      	ldr	r3, [pc, #412]	@ (800268c <HAL_SD_MspInit+0x1dc>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f0:	4a66      	ldr	r2, [pc, #408]	@ (800268c <HAL_SD_MspInit+0x1dc>)
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f8:	4b64      	ldr	r3, [pc, #400]	@ (800268c <HAL_SD_MspInit+0x1dc>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002504:	4b61      	ldr	r3, [pc, #388]	@ (800268c <HAL_SD_MspInit+0x1dc>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002508:	4a60      	ldr	r2, [pc, #384]	@ (800268c <HAL_SD_MspInit+0x1dc>)
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002510:	4b5e      	ldr	r3, [pc, #376]	@ (800268c <HAL_SD_MspInit+0x1dc>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin;
 800251c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800252e:	230c      	movs	r3, #12
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CK_GPIO_Port, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4855      	ldr	r0, [pc, #340]	@ (8002690 <HAL_SD_MspInit+0x1e0>)
 800253a:	f003 f8b7 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9|GPIO_PIN_8;
 800253e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002548:	2301      	movs	r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002550:	230c      	movs	r3, #12
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4619      	mov	r1, r3
 800255a:	484d      	ldr	r0, [pc, #308]	@ (8002690 <HAL_SD_MspInit+0x1e0>)
 800255c:	f003 f8a6 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002560:	2304      	movs	r3, #4
 8002562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002568:	2301      	movs	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002570:	230c      	movs	r3, #12
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4619      	mov	r1, r3
 800257a:	4846      	ldr	r0, [pc, #280]	@ (8002694 <HAL_SD_MspInit+0x1e4>)
 800257c:	f003 f896 	bl	80056ac <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8002580:	4b45      	ldr	r3, [pc, #276]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 8002582:	4a46      	ldr	r2, [pc, #280]	@ (800269c <HAL_SD_MspInit+0x1ec>)
 8002584:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002586:	4b44      	ldr	r3, [pc, #272]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 8002588:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800258c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800258e:	4b42      	ldr	r3, [pc, #264]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002594:	4b40      	ldr	r3, [pc, #256]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800259a:	4b3f      	ldr	r3, [pc, #252]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 800259c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025a0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 80025a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025a8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 80025ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025b0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80025b2:	4b39      	ldr	r3, [pc, #228]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 80025b4:	2220      	movs	r2, #32
 80025b6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80025b8:	4b37      	ldr	r3, [pc, #220]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 80025ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025be:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025c0:	4b35      	ldr	r3, [pc, #212]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 80025c2:	2204      	movs	r2, #4
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025c6:	4b34      	ldr	r3, [pc, #208]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 80025c8:	2203      	movs	r2, #3
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80025cc:	4b32      	ldr	r3, [pc, #200]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 80025ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80025d4:	4b30      	ldr	r3, [pc, #192]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 80025d6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80025dc:	482e      	ldr	r0, [pc, #184]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 80025de:	f001 ff27 	bl	8004430 <HAL_DMA_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_SD_MspInit+0x13c>
    {
      Error_Handler();
 80025e8:	f7ff fb28 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80025f2:	4a29      	ldr	r2, [pc, #164]	@ (8002698 <HAL_SD_MspInit+0x1e8>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80025f8:	4b29      	ldr	r3, [pc, #164]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 80025fa:	4a2a      	ldr	r2, [pc, #168]	@ (80026a4 <HAL_SD_MspInit+0x1f4>)
 80025fc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80025fe:	4b28      	ldr	r3, [pc, #160]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 8002600:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002604:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002606:	4b26      	ldr	r3, [pc, #152]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 8002608:	2240      	movs	r2, #64	@ 0x40
 800260a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800260c:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 800260e:	2200      	movs	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002612:	4b23      	ldr	r3, [pc, #140]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 8002614:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002618:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800261a:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 800261c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002620:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002622:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 8002624:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002628:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800262a:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 800262c:	2220      	movs	r2, #32
 800262e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002630:	4b1b      	ldr	r3, [pc, #108]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 8002632:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002636:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002638:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 800263a:	2204      	movs	r2, #4
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800263e:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 8002640:	2203      	movs	r2, #3
 8002642:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002644:	4b16      	ldr	r3, [pc, #88]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 8002646:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800264a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800264c:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 800264e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002652:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002654:	4812      	ldr	r0, [pc, #72]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 8002656:	f001 feeb 	bl	8004430 <HAL_DMA_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_SD_MspInit+0x1b4>
    {
      Error_Handler();
 8002660:	f7ff faec 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a0e      	ldr	r2, [pc, #56]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 8002668:	63da      	str	r2, [r3, #60]	@ 0x3c
 800266a:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <HAL_SD_MspInit+0x1f0>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2105      	movs	r1, #5
 8002674:	2031      	movs	r0, #49	@ 0x31
 8002676:	f001 fd45 	bl	8004104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800267a:	2031      	movs	r0, #49	@ 0x31
 800267c:	f001 fd5e 	bl	800413c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002680:	bf00      	nop
 8002682:	3728      	adds	r7, #40	@ 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40012c00 	.word	0x40012c00
 800268c:	40023800 	.word	0x40023800
 8002690:	40020800 	.word	0x40020800
 8002694:	40020c00 	.word	0x40020c00
 8002698:	20004f20 	.word	0x20004f20
 800269c:	40026458 	.word	0x40026458
 80026a0:	20004f80 	.word	0x20004f80
 80026a4:	400264a0 	.word	0x400264a0

080026a8 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80026ac:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026ae:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80026b2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80026b4:	4b13      	ldr	r3, [pc, #76]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80026ba:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80026c0:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80026c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80026cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80026d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80026d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80026de:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80026e4:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80026ea:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80026f0:	4804      	ldr	r0, [pc, #16]	@ (8002704 <MX_SPDIFRX_Init+0x5c>)
 80026f2:	f007 fa4f 	bl	8009b94 <HAL_SPDIFRX_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80026fc:	f7ff fa9e 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20004fe0 	.word	0x20004fe0

08002708 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b0aa      	sub	sp, #168	@ 0xa8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	2284      	movs	r2, #132	@ 0x84
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f012 fee5 	bl	80154f8 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8002736:	d143      	bne.n	80027c0 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002738:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800273c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800273e:	2364      	movs	r3, #100	@ 0x64
 8002740:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8002742:	2302      	movs	r3, #2
 8002744:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002746:	2302      	movs	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800274a:	2302      	movs	r3, #2
 800274c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800274e:	2301      	movs	r3, #1
 8002750:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002752:	f107 0310 	add.w	r3, r7, #16
 8002756:	4618      	mov	r0, r3
 8002758:	f004 fc02 	bl	8006f60 <HAL_RCCEx_PeriphCLKConfig>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8002762:	f7ff fa6b 	bl	8001c3c <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002766:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <HAL_SPDIFRX_MspInit+0xc0>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	4a17      	ldr	r2, [pc, #92]	@ (80027c8 <HAL_SPDIFRX_MspInit+0xc0>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002770:	6413      	str	r3, [r2, #64]	@ 0x40
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <HAL_SPDIFRX_MspInit+0xc0>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800277e:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <HAL_SPDIFRX_MspInit+0xc0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a11      	ldr	r2, [pc, #68]	@ (80027c8 <HAL_SPDIFRX_MspInit+0xc0>)
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b0f      	ldr	r3, [pc, #60]	@ (80027c8 <HAL_SPDIFRX_MspInit+0xc0>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002796:	2380      	movs	r3, #128	@ 0x80
 8002798:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80027ae:	2308      	movs	r3, #8
 80027b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80027b4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80027b8:	4619      	mov	r1, r3
 80027ba:	4804      	ldr	r0, [pc, #16]	@ (80027cc <HAL_SPDIFRX_MspInit+0xc4>)
 80027bc:	f002 ff76 	bl	80056ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 80027c0:	bf00      	nop
 80027c2:	37a8      	adds	r7, #168	@ 0xa8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40020c00 	.word	0x40020c00

080027d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 80027da:	4b20      	ldr	r3, [pc, #128]	@ (800285c <BSP_SD_Init+0x8c>)
 80027dc:	4a20      	ldr	r2, [pc, #128]	@ (8002860 <BSP_SD_Init+0x90>)
 80027de:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80027e0:	4b1e      	ldr	r3, [pc, #120]	@ (800285c <BSP_SD_Init+0x8c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80027e6:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <BSP_SD_Init+0x8c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <BSP_SD_Init+0x8c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80027f2:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <BSP_SD_Init+0x8c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80027f8:	4b18      	ldr	r3, [pc, #96]	@ (800285c <BSP_SD_Init+0x8c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80027fe:	4b17      	ldr	r3, [pc, #92]	@ (800285c <BSP_SD_Init+0x8c>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8002804:	2100      	movs	r1, #0
 8002806:	4815      	ldr	r0, [pc, #84]	@ (800285c <BSP_SD_Init+0x8c>)
 8002808:	f000 f960 	bl	8002acc <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 800280c:	f000 f82a 	bl	8002864 <BSP_SD_IsDetected>
 8002810:	4603      	mov	r3, r0
 8002812:	2b01      	cmp	r3, #1
 8002814:	d001      	beq.n	800281a <BSP_SD_Init+0x4a>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8002816:	2302      	movs	r3, #2
 8002818:	e01c      	b.n	8002854 <BSP_SD_Init+0x84>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 800281a:	2100      	movs	r1, #0
 800281c:	480f      	ldr	r0, [pc, #60]	@ (800285c <BSP_SD_Init+0x8c>)
 800281e:	f000 f869 	bl	80028f4 <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8002822:	480e      	ldr	r0, [pc, #56]	@ (800285c <BSP_SD_Init+0x8c>)
 8002824:	f005 fe56 	bl	80084d4 <HAL_SD_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <BSP_SD_Init+0x62>
  {
    sd_state = MSD_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10c      	bne.n	8002852 <BSP_SD_Init+0x82>
  {
    /* Enable wide operation */ 
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002838:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800283c:	4807      	ldr	r0, [pc, #28]	@ (800285c <BSP_SD_Init+0x8c>)
 800283e:	f006 fc19 	bl	8009074 <HAL_SD_ConfigWideBusOperation>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <BSP_SD_Init+0x7e>
    {
      sd_state = MSD_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	71fb      	strb	r3, [r7, #7]
 800284c:	e001      	b.n	8002852 <BSP_SD_Init+0x82>
    }
    else
    {
      sd_state = MSD_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 8002852:	79fb      	ldrb	r3, [r7, #7]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	2000502c 	.word	0x2000502c
 8002860:	40012c00 	.word	0x40012c00

08002864 <BSP_SD_IsDetected>:
/**
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
  __IO uint8_t      status = SD_PRESENT;
 800286a:	2301      	movs	r3, #1
 800286c:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 800286e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002872:	4807      	ldr	r0, [pc, #28]	@ (8002890 <BSP_SD_IsDetected+0x2c>)
 8002874:	f003 f8c6 	bl	8005a04 <HAL_GPIO_ReadPin>
 8002878:	4603      	mov	r3, r0
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 800287e:	2300      	movs	r3, #0
 8002880:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	b2db      	uxtb	r3, r3
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40020800 	.word	0x40020800

08002894 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{  
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  /* Read block(s) in DMA transfer mode */
  if(HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	68f9      	ldr	r1, [r7, #12]
 80028a6:	4806      	ldr	r0, [pc, #24]	@ (80028c0 <BSP_SD_ReadBlocks_DMA+0x2c>)
 80028a8:	f005 fecc 	bl	8008644 <HAL_SD_ReadBlocks_DMA>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <BSP_SD_ReadBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <BSP_SD_ReadBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 80028b6:	2300      	movs	r3, #0
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	2000502c 	.word	0x2000502c

080028c4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{ 
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  /* Write block(s) in DMA transfer mode */
  if(HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	68f9      	ldr	r1, [r7, #12]
 80028d6:	4806      	ldr	r0, [pc, #24]	@ (80028f0 <BSP_SD_WriteBlocks_DMA+0x2c>)
 80028d8:	f005 ff96 	bl	8008808 <HAL_SD_WriteBlocks_DMA>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <BSP_SD_WriteBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <BSP_SD_WriteBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 80028e6:	2300      	movs	r3, #0
  }
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2000502c 	.word	0x2000502c

080028f4 <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	@ 0x30
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80028fe:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 8002904:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002908:	6453      	str	r3, [r2, #68]	@ 0x44
 800290a:	4b69      	ldr	r3, [pc, #420]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 8002916:	4b66      	ldr	r3, [pc, #408]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4a65      	ldr	r2, [pc, #404]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 800291c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002920:	6313      	str	r3, [r2, #48]	@ 0x30
 8002922:	4b63      	ldr	r3, [pc, #396]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800292e:	4b60      	ldr	r3, [pc, #384]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	4a5f      	ldr	r2, [pc, #380]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6313      	str	r3, [r2, #48]	@ 0x30
 800293a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002946:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	4a59      	ldr	r2, [pc, #356]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	6313      	str	r3, [r2, #48]	@ 0x30
 8002952:	4b57      	ldr	r3, [pc, #348]	@ (8002ab0 <BSP_SD_MspInit+0x1bc>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002962:	2301      	movs	r3, #1
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 800296a:	230c      	movs	r3, #12
 800296c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800296e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	4619      	mov	r1, r3
 800297a:	484e      	ldr	r0, [pc, #312]	@ (8002ab4 <BSP_SD_MspInit+0x1c0>)
 800297c:	f002 fe96 	bl	80056ac <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8002980:	2304      	movs	r3, #4
 8002982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002984:	f107 031c 	add.w	r3, r7, #28
 8002988:	4619      	mov	r1, r3
 800298a:	484b      	ldr	r0, [pc, #300]	@ (8002ab8 <BSP_SD_MspInit+0x1c4>)
 800298c:	f002 fe8e 	bl	80056ac <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8002990:	2200      	movs	r2, #0
 8002992:	210e      	movs	r1, #14
 8002994:	2031      	movs	r0, #49	@ 0x31
 8002996:	f001 fbb5 	bl	8004104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800299a:	2031      	movs	r0, #49	@ 0x31
 800299c:	f001 fbce 	bl	800413c <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 80029a0:	4b46      	ldr	r3, [pc, #280]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029a6:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80029a8:	4b44      	ldr	r3, [pc, #272]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80029ae:	4b43      	ldr	r3, [pc, #268]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80029b4:	4b41      	ldr	r3, [pc, #260]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ba:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029bc:	4b3f      	ldr	r3, [pc, #252]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029c2:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80029c4:	4b3d      	ldr	r3, [pc, #244]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029ca:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 80029cc:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029ce:	2220      	movs	r2, #32
 80029d0:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80029d2:	4b3a      	ldr	r3, [pc, #232]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80029d8:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80029da:	4b38      	ldr	r3, [pc, #224]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029dc:	2204      	movs	r2, #4
 80029de:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80029e0:	4b36      	ldr	r3, [pc, #216]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029e2:	2203      	movs	r2, #3
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 80029e6:	4b35      	ldr	r3, [pc, #212]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80029ee:	4b33      	ldr	r3, [pc, #204]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029f0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80029f4:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80029f6:	4b31      	ldr	r3, [pc, #196]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 80029f8:	4a31      	ldr	r2, [pc, #196]	@ (8002ac0 <BSP_SD_MspInit+0x1cc>)
 80029fa:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a2f      	ldr	r2, [pc, #188]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a02:	4a2e      	ldr	r2, [pc, #184]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8002a08:	482c      	ldr	r0, [pc, #176]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 8002a0a:	f001 fdbf 	bl	800458c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8002a0e:	482b      	ldr	r0, [pc, #172]	@ (8002abc <BSP_SD_MspInit+0x1c8>)
 8002a10:	f001 fd0e 	bl	8004430 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8002a14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a1a:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002a1c:	4b29      	ldr	r3, [pc, #164]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a1e:	2240      	movs	r2, #64	@ 0x40
 8002a20:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002a22:	4b28      	ldr	r3, [pc, #160]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002a28:	4b26      	ldr	r3, [pc, #152]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a2e:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a30:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a36:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002a38:	4b22      	ldr	r3, [pc, #136]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a3e:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8002a40:	4b20      	ldr	r3, [pc, #128]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a42:	2220      	movs	r2, #32
 8002a44:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002a46:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a48:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002a4c:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a50:	2204      	movs	r2, #4
 8002a52:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a56:	2203      	movs	r2, #3
 8002a58:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a60:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002a62:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a64:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a68:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8002a6a:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a6c:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <BSP_SD_MspInit+0x1d4>)
 8002a6e:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a14      	ldr	r2, [pc, #80]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a74:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a76:	4a13      	ldr	r2, [pc, #76]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8002a7c:	4811      	ldr	r0, [pc, #68]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a7e:	f001 fd85 	bl	800458c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8002a82:	4810      	ldr	r0, [pc, #64]	@ (8002ac4 <BSP_SD_MspInit+0x1d0>)
 8002a84:	f001 fcd4 	bl	8004430 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	203b      	movs	r0, #59	@ 0x3b
 8002a8e:	f001 fb39 	bl	8004104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8002a92:	203b      	movs	r0, #59	@ 0x3b
 8002a94:	f001 fb52 	bl	800413c <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	210f      	movs	r1, #15
 8002a9c:	2045      	movs	r0, #69	@ 0x45
 8002a9e:	f001 fb31 	bl	8004104 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8002aa2:	2045      	movs	r0, #69	@ 0x45
 8002aa4:	f001 fb4a 	bl	800413c <HAL_NVIC_EnableIRQ>
}
 8002aa8:	bf00      	nop
 8002aaa:	3730      	adds	r7, #48	@ 0x30
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	200050b0 	.word	0x200050b0
 8002ac0:	40026458 	.word	0x40026458
 8002ac4:	20005110 	.word	0x20005110
 8002ac8:	400264a0 	.word	0x400264a0

08002acc <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <BSP_SD_Detect_MspInit+0x48>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	4a0e      	ldr	r2, [pc, #56]	@ (8002b14 <BSP_SD_Detect_MspInit+0x48>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <BSP_SD_Detect_MspInit+0x48>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8002aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002af2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002af8:	2301      	movs	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	4619      	mov	r1, r3
 8002b06:	4804      	ldr	r0, [pc, #16]	@ (8002b18 <BSP_SD_Detect_MspInit+0x4c>)
 8002b08:	f002 fdd0 	bl	80056ac <HAL_GPIO_Init>
}
 8002b0c:	bf00      	nop
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020800 	.word	0x40020800

08002b1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8002b20:	4805      	ldr	r0, [pc, #20]	@ (8002b38 <BSP_SD_GetCardState+0x1c>)
 8002b22:	f006 fb41 	bl	80091a8 <HAL_SD_GetCardState>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	2000502c 	.word	0x2000502c

08002b3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4803      	ldr	r0, [pc, #12]	@ (8002b54 <BSP_SD_GetCardInfo+0x18>)
 8002b48:	f006 fa68 	bl	800901c <HAL_SD_GetCardInfo>
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	2000502c 	.word	0x2000502c

08002b58 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8002b60:	f000 f818 	bl	8002b94 <BSP_SD_AbortCallback>
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8002b74:	f7ff fc52 	bl	800241c <BSP_SD_WriteCpltCallback>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8002b88:	f7ff fc5c 	bl	8002444 <BSP_SD_ReadCpltCallback>
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callbacks
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0

}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	4a10      	ldr	r2, [pc, #64]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bce:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <HAL_MspInit+0x4c>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	210f      	movs	r1, #15
 8002bde:	f06f 0001 	mvn.w	r0, #1
 8002be2:	f001 fa8f 	bl	8004104 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	@ 0x38
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c04:	4b33      	ldr	r3, [pc, #204]	@ (8002cd4 <HAL_InitTick+0xe0>)
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	4a32      	ldr	r2, [pc, #200]	@ (8002cd4 <HAL_InitTick+0xe0>)
 8002c0a:	f043 0310 	orr.w	r3, r3, #16
 8002c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c10:	4b30      	ldr	r3, [pc, #192]	@ (8002cd4 <HAL_InitTick+0xe0>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c1c:	f107 0210 	add.w	r2, r7, #16
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 f968 	bl	8006efc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c36:	f004 f939 	bl	8006eac <HAL_RCC_GetPCLK1Freq>
 8002c3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8002c3c:	e004      	b.n	8002c48 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c3e:	f004 f935 	bl	8006eac <HAL_RCC_GetPCLK1Freq>
 8002c42:	4603      	mov	r3, r0
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4a:	4a23      	ldr	r2, [pc, #140]	@ (8002cd8 <HAL_InitTick+0xe4>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	0c9b      	lsrs	r3, r3, #18
 8002c52:	3b01      	subs	r3, #1
 8002c54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c56:	4b21      	ldr	r3, [pc, #132]	@ (8002cdc <HAL_InitTick+0xe8>)
 8002c58:	4a21      	ldr	r2, [pc, #132]	@ (8002ce0 <HAL_InitTick+0xec>)
 8002c5a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <HAL_InitTick+0xe8>)
 8002c5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c64:	4a1d      	ldr	r2, [pc, #116]	@ (8002cdc <HAL_InitTick+0xe8>)
 8002c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cdc <HAL_InitTick+0xe8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c70:	4b1a      	ldr	r3, [pc, #104]	@ (8002cdc <HAL_InitTick+0xe8>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c76:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <HAL_InitTick+0xe8>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c7c:	4817      	ldr	r0, [pc, #92]	@ (8002cdc <HAL_InitTick+0xe8>)
 8002c7e:	f006 ffe5 	bl	8009c4c <HAL_TIM_Base_Init>
 8002c82:	4603      	mov	r3, r0
 8002c84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002c88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11b      	bne.n	8002cc8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c90:	4812      	ldr	r0, [pc, #72]	@ (8002cdc <HAL_InitTick+0xe8>)
 8002c92:	f007 f833 	bl	8009cfc <HAL_TIM_Base_Start_IT>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d111      	bne.n	8002cc8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ca4:	2036      	movs	r0, #54	@ 0x36
 8002ca6:	f001 fa49 	bl	800413c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d808      	bhi.n	8002cc2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	2036      	movs	r0, #54	@ 0x36
 8002cb6:	f001 fa25 	bl	8004104 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <HAL_InitTick+0xf0>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	e002      	b.n	8002cc8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3738      	adds	r7, #56	@ 0x38
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	431bde83 	.word	0x431bde83
 8002cdc:	20005170 	.word	0x20005170
 8002ce0:	40001000 	.word	0x40001000
 8002ce4:	20000008 	.word	0x20000008

08002ce8 <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <NMI_Handler+0x4>

08002cf0 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <HardFault_Handler+0x4>

08002cf8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <MemManage_Handler+0x4>

08002d00 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <BusFault_Handler+0x4>

08002d08 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8002d0c:	bf00      	nop
 8002d0e:	e7fd      	b.n	8002d0c <UsageFault_Handler+0x4>

08002d10 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <SDMMC1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles SDMMC1 global interrupt.
 */
void SDMMC1_IRQHandler(void) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SDMMC1_IRQn 0 */
	printf("[IRQ] SDMMC1_IRQHandler\r\n");
 8002d24:	4803      	ldr	r0, [pc, #12]	@ (8002d34 <SDMMC1_IRQHandler+0x14>)
 8002d26:	f012 fb07 	bl	8015338 <puts>
	/* USER CODE END SDMMC1_IRQn 0 */
	HAL_SD_IRQHandler(&hsd1);
 8002d2a:	4803      	ldr	r0, [pc, #12]	@ (8002d38 <SDMMC1_IRQHandler+0x18>)
 8002d2c:	f005 fe52 	bl	80089d4 <HAL_SD_IRQHandler>
	/* USER CODE BEGIN SDMMC1_IRQn 1 */

	/* USER CODE END SDMMC1_IRQn 1 */
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	08016484 	.word	0x08016484
 8002d38:	20004e9c 	.word	0x20004e9c

08002d3c <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8002d40:	4802      	ldr	r0, [pc, #8]	@ (8002d4c <TIM6_DAC_IRQHandler+0x10>)
 8002d42:	f007 f8aa 	bl	8009e9a <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20005170 	.word	0x20005170

08002d50 <DMA2_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA2 stream3 global interrupt.
 */
void DMA2_Stream3_IRQHandler(void) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream3_IRQn 0 */
	printf("[IRQ] DMA2_Stream3_IRQHandler\r\n");
 8002d54:	4803      	ldr	r0, [pc, #12]	@ (8002d64 <DMA2_Stream3_IRQHandler+0x14>)
 8002d56:	f012 faef 	bl	8015338 <puts>
	/* USER CODE END DMA2_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002d5a:	4803      	ldr	r0, [pc, #12]	@ (8002d68 <DMA2_Stream3_IRQHandler+0x18>)
 8002d5c:	f001 fcf6 	bl	800474c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

	/* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	080164a0 	.word	0x080164a0
 8002d68:	20004f20 	.word	0x20004f20

08002d6c <DMA2_Stream6_IRQHandler>:

/**
 * @brief This function handles DMA2 stream6 global interrupt.
 */
void DMA2_Stream6_IRQHandler(void) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
	printf("[IRQ] DMA2_Stream6_IRQHandler → callback @ 0x%08lX\r\n", (uint32_t)(hdma_sdmmc1_tx.XferCpltCallback));
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <DMA2_Stream6_IRQHandler+0x1c>)
 8002d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d74:	4619      	mov	r1, r3
 8002d76:	4805      	ldr	r0, [pc, #20]	@ (8002d8c <DMA2_Stream6_IRQHandler+0x20>)
 8002d78:	f012 fa76 	bl	8015268 <iprintf>
	/* USER CODE END DMA2_Stream6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002d7c:	4802      	ldr	r0, [pc, #8]	@ (8002d88 <DMA2_Stream6_IRQHandler+0x1c>)
 8002d7e:	f001 fce5 	bl	800474c <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

	/* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20004f80 	.word	0x20004f80
 8002d8c:	080164c0 	.word	0x080164c0

08002d90 <LTDC_IRQHandler>:

/**
 * @brief This function handles LTDC global interrupt.
 */
void LTDC_IRQHandler(void) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN LTDC_IRQn 0 */

	/* USER CODE END LTDC_IRQn 0 */
	HAL_LTDC_IRQHandler(&hltdc);
 8002d94:	4802      	ldr	r0, [pc, #8]	@ (8002da0 <LTDC_IRQHandler+0x10>)
 8002d96:	f003 f86b 	bl	8005e70 <HAL_LTDC_IRQHandler>
	/* USER CODE BEGIN LTDC_IRQn 1 */

	/* USER CODE END LTDC_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200047e4 	.word	0x200047e4

08002da4 <DMA2D_IRQHandler>:

/**
 * @brief This function handles DMA2D global interrupt.
 */
void DMA2D_IRQHandler(void) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2D_IRQn 0 */

	/* USER CODE END DMA2D_IRQn 0 */
	HAL_DMA2D_IRQHandler(&hdma2d);
 8002da8:	4802      	ldr	r0, [pc, #8]	@ (8002db4 <DMA2D_IRQHandler+0x10>)
 8002daa:	f001 ff8f 	bl	8004ccc <HAL_DMA2D_IRQHandler>
	/* USER CODE BEGIN DMA2D_IRQn 1 */

	/* USER CODE END DMA2D_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000288 	.word	0x20000288

08002db8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e00a      	b.n	8002de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dca:	f3af 8000 	nop.w
 8002dce:	4601      	mov	r1, r0
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	60ba      	str	r2, [r7, #8]
 8002dd6:	b2ca      	uxtb	r2, r1
 8002dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dbf0      	blt.n	8002dca <_read+0x12>
  }

  return len;
 8002de8:	687b      	ldr	r3, [r7, #4]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <_isatty>:

int _isatty(int file)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e32:	2301      	movs	r3, #1
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e64:	4a14      	ldr	r2, [pc, #80]	@ (8002eb8 <_sbrk+0x5c>)
 8002e66:	4b15      	ldr	r3, [pc, #84]	@ (8002ebc <_sbrk+0x60>)
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e70:	4b13      	ldr	r3, [pc, #76]	@ (8002ec0 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e78:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <_sbrk+0x64>)
 8002e7a:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <_sbrk+0x68>)
 8002e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <_sbrk+0x64>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d207      	bcs.n	8002e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e8c:	f012 fbe0 	bl	8015650 <__errno>
 8002e90:	4603      	mov	r3, r0
 8002e92:	220c      	movs	r2, #12
 8002e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	e009      	b.n	8002eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <_sbrk+0x64>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ea2:	4b07      	ldr	r3, [pc, #28]	@ (8002ec0 <_sbrk+0x64>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a05      	ldr	r2, [pc, #20]	@ (8002ec0 <_sbrk+0x64>)
 8002eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20050000 	.word	0x20050000
 8002ebc:	00000400 	.word	0x00000400
 8002ec0:	200051bc 	.word	0x200051bc
 8002ec4:	2000d7b0 	.word	0x2000d7b0

08002ec8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ecc:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <SystemInit+0x20>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed2:	4a05      	ldr	r2, [pc, #20]	@ (8002ee8 <SystemInit+0x20>)
 8002ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b09a      	sub	sp, #104	@ 0x68
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
 8002f1c:	615a      	str	r2, [r3, #20]
 8002f1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	222c      	movs	r2, #44	@ 0x2c
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f012 fae6 	bl	80154f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f2c:	4b43      	ldr	r3, [pc, #268]	@ (800303c <MX_TIM1_Init+0x150>)
 8002f2e:	4a44      	ldr	r2, [pc, #272]	@ (8003040 <MX_TIM1_Init+0x154>)
 8002f30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f32:	4b42      	ldr	r3, [pc, #264]	@ (800303c <MX_TIM1_Init+0x150>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f38:	4b40      	ldr	r3, [pc, #256]	@ (800303c <MX_TIM1_Init+0x150>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800303c <MX_TIM1_Init+0x150>)
 8002f40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f46:	4b3d      	ldr	r3, [pc, #244]	@ (800303c <MX_TIM1_Init+0x150>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800303c <MX_TIM1_Init+0x150>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f52:	4b3a      	ldr	r3, [pc, #232]	@ (800303c <MX_TIM1_Init+0x150>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f58:	4838      	ldr	r0, [pc, #224]	@ (800303c <MX_TIM1_Init+0x150>)
 8002f5a:	f006 fe77 	bl	8009c4c <HAL_TIM_Base_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002f64:	f7fe fe6a 	bl	8001c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002f72:	4619      	mov	r1, r3
 8002f74:	4831      	ldr	r0, [pc, #196]	@ (800303c <MX_TIM1_Init+0x150>)
 8002f76:	f007 f9ab 	bl	800a2d0 <HAL_TIM_ConfigClockSource>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002f80:	f7fe fe5c 	bl	8001c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f84:	482d      	ldr	r0, [pc, #180]	@ (800303c <MX_TIM1_Init+0x150>)
 8002f86:	f006 ff31 	bl	8009dec <HAL_TIM_PWM_Init>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002f90:	f7fe fe54 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f94:	2300      	movs	r3, #0
 8002f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fa0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4825      	ldr	r0, [pc, #148]	@ (800303c <MX_TIM1_Init+0x150>)
 8002fa8:	f007 fe28 	bl	800abfc <HAL_TIMEx_MasterConfigSynchronization>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002fb2:	f7fe fe43 	bl	8001c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fb6:	2360      	movs	r3, #96	@ 0x60
 8002fb8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4818      	ldr	r0, [pc, #96]	@ (800303c <MX_TIM1_Init+0x150>)
 8002fdc:	f007 f864 	bl	800a0a8 <HAL_TIM_PWM_ConfigChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002fe6:	f7fe fe29 	bl	8001c3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003002:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003008:	2300      	movs	r3, #0
 800300a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800300c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800301a:	1d3b      	adds	r3, r7, #4
 800301c:	4619      	mov	r1, r3
 800301e:	4807      	ldr	r0, [pc, #28]	@ (800303c <MX_TIM1_Init+0x150>)
 8003020:	f007 fe7a 	bl	800ad18 <HAL_TIMEx_ConfigBreakDeadTime>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800302a:	f7fe fe07 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800302e:	4803      	ldr	r0, [pc, #12]	@ (800303c <MX_TIM1_Init+0x150>)
 8003030:	f000 fa96 	bl	8003560 <HAL_TIM_MspPostInit>

}
 8003034:	bf00      	nop
 8003036:	3768      	adds	r7, #104	@ 0x68
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200051c0 	.word	0x200051c0
 8003040:	40010000 	.word	0x40010000

08003044 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08e      	sub	sp, #56	@ 0x38
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800304a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003058:	f107 031c 	add.w	r3, r7, #28
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003064:	463b      	mov	r3, r7
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	611a      	str	r2, [r3, #16]
 8003072:	615a      	str	r2, [r3, #20]
 8003074:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003076:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <MX_TIM2_Init+0xe8>)
 8003078:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800307c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800307e:	4b2b      	ldr	r3, [pc, #172]	@ (800312c <MX_TIM2_Init+0xe8>)
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003084:	4b29      	ldr	r3, [pc, #164]	@ (800312c <MX_TIM2_Init+0xe8>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800308a:	4b28      	ldr	r3, [pc, #160]	@ (800312c <MX_TIM2_Init+0xe8>)
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003092:	4b26      	ldr	r3, [pc, #152]	@ (800312c <MX_TIM2_Init+0xe8>)
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003098:	4b24      	ldr	r3, [pc, #144]	@ (800312c <MX_TIM2_Init+0xe8>)
 800309a:	2200      	movs	r2, #0
 800309c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800309e:	4823      	ldr	r0, [pc, #140]	@ (800312c <MX_TIM2_Init+0xe8>)
 80030a0:	f006 fdd4 	bl	8009c4c <HAL_TIM_Base_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80030aa:	f7fe fdc7 	bl	8001c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030b8:	4619      	mov	r1, r3
 80030ba:	481c      	ldr	r0, [pc, #112]	@ (800312c <MX_TIM2_Init+0xe8>)
 80030bc:	f007 f908 	bl	800a2d0 <HAL_TIM_ConfigClockSource>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80030c6:	f7fe fdb9 	bl	8001c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80030ca:	4818      	ldr	r0, [pc, #96]	@ (800312c <MX_TIM2_Init+0xe8>)
 80030cc:	f006 fe8e 	bl	8009dec <HAL_TIM_PWM_Init>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80030d6:	f7fe fdb1 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030e2:	f107 031c 	add.w	r3, r7, #28
 80030e6:	4619      	mov	r1, r3
 80030e8:	4810      	ldr	r0, [pc, #64]	@ (800312c <MX_TIM2_Init+0xe8>)
 80030ea:	f007 fd87 	bl	800abfc <HAL_TIMEx_MasterConfigSynchronization>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80030f4:	f7fe fda2 	bl	8001c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030f8:	2360      	movs	r3, #96	@ 0x60
 80030fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003100:	2300      	movs	r3, #0
 8003102:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003108:	463b      	mov	r3, r7
 800310a:	2200      	movs	r2, #0
 800310c:	4619      	mov	r1, r3
 800310e:	4807      	ldr	r0, [pc, #28]	@ (800312c <MX_TIM2_Init+0xe8>)
 8003110:	f006 ffca 	bl	800a0a8 <HAL_TIM_PWM_ConfigChannel>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800311a:	f7fe fd8f 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800311e:	4803      	ldr	r0, [pc, #12]	@ (800312c <MX_TIM2_Init+0xe8>)
 8003120:	f000 fa1e 	bl	8003560 <HAL_TIM_MspPostInit>

}
 8003124:	bf00      	nop
 8003126:	3738      	adds	r7, #56	@ 0x38
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000520c 	.word	0x2000520c

08003130 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08e      	sub	sp, #56	@ 0x38
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003136:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003144:	f107 031c 	add.w	r3, r7, #28
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003150:	463b      	mov	r3, r7
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	611a      	str	r2, [r3, #16]
 800315e:	615a      	str	r2, [r3, #20]
 8003160:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003162:	4b2d      	ldr	r3, [pc, #180]	@ (8003218 <MX_TIM3_Init+0xe8>)
 8003164:	4a2d      	ldr	r2, [pc, #180]	@ (800321c <MX_TIM3_Init+0xec>)
 8003166:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003168:	4b2b      	ldr	r3, [pc, #172]	@ (8003218 <MX_TIM3_Init+0xe8>)
 800316a:	2200      	movs	r2, #0
 800316c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800316e:	4b2a      	ldr	r3, [pc, #168]	@ (8003218 <MX_TIM3_Init+0xe8>)
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003174:	4b28      	ldr	r3, [pc, #160]	@ (8003218 <MX_TIM3_Init+0xe8>)
 8003176:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800317a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800317c:	4b26      	ldr	r3, [pc, #152]	@ (8003218 <MX_TIM3_Init+0xe8>)
 800317e:	2200      	movs	r2, #0
 8003180:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003182:	4b25      	ldr	r3, [pc, #148]	@ (8003218 <MX_TIM3_Init+0xe8>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003188:	4823      	ldr	r0, [pc, #140]	@ (8003218 <MX_TIM3_Init+0xe8>)
 800318a:	f006 fd5f 	bl	8009c4c <HAL_TIM_Base_Init>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003194:	f7fe fd52 	bl	8001c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800319c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800319e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031a2:	4619      	mov	r1, r3
 80031a4:	481c      	ldr	r0, [pc, #112]	@ (8003218 <MX_TIM3_Init+0xe8>)
 80031a6:	f007 f893 	bl	800a2d0 <HAL_TIM_ConfigClockSource>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80031b0:	f7fe fd44 	bl	8001c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80031b4:	4818      	ldr	r0, [pc, #96]	@ (8003218 <MX_TIM3_Init+0xe8>)
 80031b6:	f006 fe19 	bl	8009dec <HAL_TIM_PWM_Init>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80031c0:	f7fe fd3c 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031cc:	f107 031c 	add.w	r3, r7, #28
 80031d0:	4619      	mov	r1, r3
 80031d2:	4811      	ldr	r0, [pc, #68]	@ (8003218 <MX_TIM3_Init+0xe8>)
 80031d4:	f007 fd12 	bl	800abfc <HAL_TIMEx_MasterConfigSynchronization>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80031de:	f7fe fd2d 	bl	8001c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031e2:	2360      	movs	r3, #96	@ 0x60
 80031e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031f2:	463b      	mov	r3, r7
 80031f4:	2200      	movs	r2, #0
 80031f6:	4619      	mov	r1, r3
 80031f8:	4807      	ldr	r0, [pc, #28]	@ (8003218 <MX_TIM3_Init+0xe8>)
 80031fa:	f006 ff55 	bl	800a0a8 <HAL_TIM_PWM_ConfigChannel>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003204:	f7fe fd1a 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003208:	4803      	ldr	r0, [pc, #12]	@ (8003218 <MX_TIM3_Init+0xe8>)
 800320a:	f000 f9a9 	bl	8003560 <HAL_TIM_MspPostInit>

}
 800320e:	bf00      	nop
 8003210:	3738      	adds	r7, #56	@ 0x38
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20005258 	.word	0x20005258
 800321c:	40000400 	.word	0x40000400

08003220 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08e      	sub	sp, #56	@ 0x38
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003226:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003240:	463b      	mov	r3, r7
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	611a      	str	r2, [r3, #16]
 800324e:	615a      	str	r2, [r3, #20]
 8003250:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003252:	4b2d      	ldr	r3, [pc, #180]	@ (8003308 <MX_TIM5_Init+0xe8>)
 8003254:	4a2d      	ldr	r2, [pc, #180]	@ (800330c <MX_TIM5_Init+0xec>)
 8003256:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003258:	4b2b      	ldr	r3, [pc, #172]	@ (8003308 <MX_TIM5_Init+0xe8>)
 800325a:	2200      	movs	r2, #0
 800325c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325e:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <MX_TIM5_Init+0xe8>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003264:	4b28      	ldr	r3, [pc, #160]	@ (8003308 <MX_TIM5_Init+0xe8>)
 8003266:	f04f 32ff 	mov.w	r2, #4294967295
 800326a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800326c:	4b26      	ldr	r3, [pc, #152]	@ (8003308 <MX_TIM5_Init+0xe8>)
 800326e:	2200      	movs	r2, #0
 8003270:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003272:	4b25      	ldr	r3, [pc, #148]	@ (8003308 <MX_TIM5_Init+0xe8>)
 8003274:	2200      	movs	r2, #0
 8003276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003278:	4823      	ldr	r0, [pc, #140]	@ (8003308 <MX_TIM5_Init+0xe8>)
 800327a:	f006 fce7 	bl	8009c4c <HAL_TIM_Base_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8003284:	f7fe fcda 	bl	8001c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800328c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800328e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003292:	4619      	mov	r1, r3
 8003294:	481c      	ldr	r0, [pc, #112]	@ (8003308 <MX_TIM5_Init+0xe8>)
 8003296:	f007 f81b 	bl	800a2d0 <HAL_TIM_ConfigClockSource>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80032a0:	f7fe fccc 	bl	8001c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80032a4:	4818      	ldr	r0, [pc, #96]	@ (8003308 <MX_TIM5_Init+0xe8>)
 80032a6:	f006 fda1 	bl	8009dec <HAL_TIM_PWM_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80032b0:	f7fe fcc4 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80032bc:	f107 031c 	add.w	r3, r7, #28
 80032c0:	4619      	mov	r1, r3
 80032c2:	4811      	ldr	r0, [pc, #68]	@ (8003308 <MX_TIM5_Init+0xe8>)
 80032c4:	f007 fc9a 	bl	800abfc <HAL_TIMEx_MasterConfigSynchronization>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80032ce:	f7fe fcb5 	bl	8001c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032d2:	2360      	movs	r3, #96	@ 0x60
 80032d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032e2:	463b      	mov	r3, r7
 80032e4:	220c      	movs	r2, #12
 80032e6:	4619      	mov	r1, r3
 80032e8:	4807      	ldr	r0, [pc, #28]	@ (8003308 <MX_TIM5_Init+0xe8>)
 80032ea:	f006 fedd 	bl	800a0a8 <HAL_TIM_PWM_ConfigChannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80032f4:	f7fe fca2 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80032f8:	4803      	ldr	r0, [pc, #12]	@ (8003308 <MX_TIM5_Init+0xe8>)
 80032fa:	f000 f931 	bl	8003560 <HAL_TIM_MspPostInit>

}
 80032fe:	bf00      	nop
 8003300:	3738      	adds	r7, #56	@ 0x38
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200052a4 	.word	0x200052a4
 800330c:	40000c00 	.word	0x40000c00

08003310 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800332e:	4b20      	ldr	r3, [pc, #128]	@ (80033b0 <MX_TIM8_Init+0xa0>)
 8003330:	4a20      	ldr	r2, [pc, #128]	@ (80033b4 <MX_TIM8_Init+0xa4>)
 8003332:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003334:	4b1e      	ldr	r3, [pc, #120]	@ (80033b0 <MX_TIM8_Init+0xa0>)
 8003336:	2200      	movs	r2, #0
 8003338:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800333a:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <MX_TIM8_Init+0xa0>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003340:	4b1b      	ldr	r3, [pc, #108]	@ (80033b0 <MX_TIM8_Init+0xa0>)
 8003342:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003346:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003348:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <MX_TIM8_Init+0xa0>)
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800334e:	4b18      	ldr	r3, [pc, #96]	@ (80033b0 <MX_TIM8_Init+0xa0>)
 8003350:	2200      	movs	r2, #0
 8003352:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003354:	4b16      	ldr	r3, [pc, #88]	@ (80033b0 <MX_TIM8_Init+0xa0>)
 8003356:	2200      	movs	r2, #0
 8003358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800335a:	4815      	ldr	r0, [pc, #84]	@ (80033b0 <MX_TIM8_Init+0xa0>)
 800335c:	f006 fc76 	bl	8009c4c <HAL_TIM_Base_Init>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8003366:	f7fe fc69 	bl	8001c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800336a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800336e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003370:	f107 0310 	add.w	r3, r7, #16
 8003374:	4619      	mov	r1, r3
 8003376:	480e      	ldr	r0, [pc, #56]	@ (80033b0 <MX_TIM8_Init+0xa0>)
 8003378:	f006 ffaa 	bl	800a2d0 <HAL_TIM_ConfigClockSource>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8003382:	f7fe fc5b 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4806      	ldr	r0, [pc, #24]	@ (80033b0 <MX_TIM8_Init+0xa0>)
 8003398:	f007 fc30 	bl	800abfc <HAL_TIMEx_MasterConfigSynchronization>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80033a2:	f7fe fc4b 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80033a6:	bf00      	nop
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	200052f0 	.word	0x200052f0
 80033b4:	40010400 	.word	0x40010400

080033b8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
 80033cc:	615a      	str	r2, [r3, #20]
 80033ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80033d0:	4b1a      	ldr	r3, [pc, #104]	@ (800343c <MX_TIM12_Init+0x84>)
 80033d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003440 <MX_TIM12_Init+0x88>)
 80033d4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80033d6:	4b19      	ldr	r3, [pc, #100]	@ (800343c <MX_TIM12_Init+0x84>)
 80033d8:	2200      	movs	r2, #0
 80033da:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033dc:	4b17      	ldr	r3, [pc, #92]	@ (800343c <MX_TIM12_Init+0x84>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80033e2:	4b16      	ldr	r3, [pc, #88]	@ (800343c <MX_TIM12_Init+0x84>)
 80033e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033e8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ea:	4b14      	ldr	r3, [pc, #80]	@ (800343c <MX_TIM12_Init+0x84>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f0:	4b12      	ldr	r3, [pc, #72]	@ (800343c <MX_TIM12_Init+0x84>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80033f6:	4811      	ldr	r0, [pc, #68]	@ (800343c <MX_TIM12_Init+0x84>)
 80033f8:	f006 fcf8 	bl	8009dec <HAL_TIM_PWM_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8003402:	f7fe fc1b 	bl	8001c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003406:	2360      	movs	r3, #96	@ 0x60
 8003408:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	2200      	movs	r2, #0
 800341a:	4619      	mov	r1, r3
 800341c:	4807      	ldr	r0, [pc, #28]	@ (800343c <MX_TIM12_Init+0x84>)
 800341e:	f006 fe43 	bl	800a0a8 <HAL_TIM_PWM_ConfigChannel>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8003428:	f7fe fc08 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800342c:	4803      	ldr	r0, [pc, #12]	@ (800343c <MX_TIM12_Init+0x84>)
 800342e:	f000 f897 	bl	8003560 <HAL_TIM_MspPostInit>

}
 8003432:	bf00      	nop
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	2000533c 	.word	0x2000533c
 8003440:	40001800 	.word	0x40001800

08003444 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003444:	b480      	push	{r7}
 8003446:	b089      	sub	sp, #36	@ 0x24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a2e      	ldr	r2, [pc, #184]	@ (800350c <HAL_TIM_Base_MspInit+0xc8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d10c      	bne.n	8003470 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003456:	4b2e      	ldr	r3, [pc, #184]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	4a2d      	ldr	r2, [pc, #180]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6453      	str	r3, [r2, #68]	@ 0x44
 8003462:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800346e:	e046      	b.n	80034fe <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003478:	d10c      	bne.n	8003494 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800347a:	4b25      	ldr	r3, [pc, #148]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	4a24      	ldr	r2, [pc, #144]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6413      	str	r3, [r2, #64]	@ 0x40
 8003486:	4b22      	ldr	r3, [pc, #136]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	69bb      	ldr	r3, [r7, #24]
}
 8003492:	e034      	b.n	80034fe <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1e      	ldr	r2, [pc, #120]	@ (8003514 <HAL_TIM_Base_MspInit+0xd0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10c      	bne.n	80034b8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800349e:	4b1c      	ldr	r3, [pc, #112]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034aa:	4b19      	ldr	r3, [pc, #100]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
}
 80034b6:	e022      	b.n	80034fe <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a16      	ldr	r2, [pc, #88]	@ (8003518 <HAL_TIM_Base_MspInit+0xd4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10c      	bne.n	80034dc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034c2:	4b13      	ldr	r3, [pc, #76]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c6:	4a12      	ldr	r2, [pc, #72]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 80034c8:	f043 0308 	orr.w	r3, r3, #8
 80034cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ce:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]
}
 80034da:	e010      	b.n	80034fe <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0e      	ldr	r2, [pc, #56]	@ (800351c <HAL_TIM_Base_MspInit+0xd8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10b      	bne.n	80034fe <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80034e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	4a09      	ldr	r2, [pc, #36]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034f2:	4b07      	ldr	r3, [pc, #28]	@ (8003510 <HAL_TIM_Base_MspInit+0xcc>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
}
 80034fe:	bf00      	nop
 8003500:	3724      	adds	r7, #36	@ 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40023800 	.word	0x40023800
 8003514:	40000400 	.word	0x40000400
 8003518:	40000c00 	.word	0x40000c00
 800351c:	40010400 	.word	0x40010400

08003520 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <HAL_TIM_PWM_MspInit+0x38>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10b      	bne.n	800354a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003532:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <HAL_TIM_PWM_MspInit+0x3c>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	4a09      	ldr	r2, [pc, #36]	@ (800355c <HAL_TIM_PWM_MspInit+0x3c>)
 8003538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800353c:	6413      	str	r3, [r2, #64]	@ 0x40
 800353e:	4b07      	ldr	r3, [pc, #28]	@ (800355c <HAL_TIM_PWM_MspInit+0x3c>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40001800 	.word	0x40001800
 800355c:	40023800 	.word	0x40023800

08003560 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08c      	sub	sp, #48	@ 0x30
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a56      	ldr	r2, [pc, #344]	@ (80036d8 <HAL_TIM_MspPostInit+0x178>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d11d      	bne.n	80035be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	4b56      	ldr	r3, [pc, #344]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	4a55      	ldr	r2, [pc, #340]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6313      	str	r3, [r2, #48]	@ 0x30
 800358e:	4b53      	ldr	r3, [pc, #332]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800359a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800359e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a0:	2302      	movs	r3, #2
 80035a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035ac:	2301      	movs	r3, #1
 80035ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	4619      	mov	r1, r3
 80035b6:	484a      	ldr	r0, [pc, #296]	@ (80036e0 <HAL_TIM_MspPostInit+0x180>)
 80035b8:	f002 f878 	bl	80056ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80035bc:	e087      	b.n	80036ce <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c6:	d11d      	bne.n	8003604 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c8:	4b44      	ldr	r3, [pc, #272]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	4a43      	ldr	r2, [pc, #268]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d4:	4b41      	ldr	r3, [pc, #260]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80035e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	2302      	movs	r3, #2
 80035e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ee:	2300      	movs	r3, #0
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035f2:	2301      	movs	r3, #1
 80035f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80035f6:	f107 031c 	add.w	r3, r7, #28
 80035fa:	4619      	mov	r1, r3
 80035fc:	4838      	ldr	r0, [pc, #224]	@ (80036e0 <HAL_TIM_MspPostInit+0x180>)
 80035fe:	f002 f855 	bl	80056ac <HAL_GPIO_Init>
}
 8003602:	e064      	b.n	80036ce <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a36      	ldr	r2, [pc, #216]	@ (80036e4 <HAL_TIM_MspPostInit+0x184>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d11c      	bne.n	8003648 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360e:	4b33      	ldr	r3, [pc, #204]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	4a32      	ldr	r2, [pc, #200]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	6313      	str	r3, [r2, #48]	@ 0x30
 800361a:	4b30      	ldr	r3, [pc, #192]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003626:	2310      	movs	r3, #16
 8003628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003632:	2300      	movs	r3, #0
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003636:	2302      	movs	r3, #2
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800363a:	f107 031c 	add.w	r3, r7, #28
 800363e:	4619      	mov	r1, r3
 8003640:	4829      	ldr	r0, [pc, #164]	@ (80036e8 <HAL_TIM_MspPostInit+0x188>)
 8003642:	f002 f833 	bl	80056ac <HAL_GPIO_Init>
}
 8003646:	e042      	b.n	80036ce <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a27      	ldr	r2, [pc, #156]	@ (80036ec <HAL_TIM_MspPostInit+0x18c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d11c      	bne.n	800368c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003652:	4b22      	ldr	r3, [pc, #136]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	4a21      	ldr	r2, [pc, #132]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 8003658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800365c:	6313      	str	r3, [r2, #48]	@ 0x30
 800365e:	4b1f      	ldr	r3, [pc, #124]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800366a:	2301      	movs	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003676:	2300      	movs	r3, #0
 8003678:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800367a:	2302      	movs	r3, #2
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800367e:	f107 031c 	add.w	r3, r7, #28
 8003682:	4619      	mov	r1, r3
 8003684:	481a      	ldr	r0, [pc, #104]	@ (80036f0 <HAL_TIM_MspPostInit+0x190>)
 8003686:	f002 f811 	bl	80056ac <HAL_GPIO_Init>
}
 800368a:	e020      	b.n	80036ce <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a18      	ldr	r2, [pc, #96]	@ (80036f4 <HAL_TIM_MspPostInit+0x194>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d11b      	bne.n	80036ce <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003696:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	4a10      	ldr	r2, [pc, #64]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 800369c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036a2:	4b0e      	ldr	r3, [pc, #56]	@ (80036dc <HAL_TIM_MspPostInit+0x17c>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80036ae:	2340      	movs	r3, #64	@ 0x40
 80036b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b2:	2302      	movs	r3, #2
 80036b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ba:	2300      	movs	r3, #0
 80036bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80036be:	2309      	movs	r3, #9
 80036c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80036c2:	f107 031c 	add.w	r3, r7, #28
 80036c6:	4619      	mov	r1, r3
 80036c8:	480b      	ldr	r0, [pc, #44]	@ (80036f8 <HAL_TIM_MspPostInit+0x198>)
 80036ca:	f001 ffef 	bl	80056ac <HAL_GPIO_Init>
}
 80036ce:	bf00      	nop
 80036d0:	3730      	adds	r7, #48	@ 0x30
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40020000 	.word	0x40020000
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40020400 	.word	0x40020400
 80036ec:	40000c00 	.word	0x40000c00
 80036f0:	40022000 	.word	0x40022000
 80036f4:	40001800 	.word	0x40001800
 80036f8:	40021c00 	.word	0x40021c00

080036fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003700:	4b14      	ldr	r3, [pc, #80]	@ (8003754 <MX_USART1_UART_Init+0x58>)
 8003702:	4a15      	ldr	r2, [pc, #84]	@ (8003758 <MX_USART1_UART_Init+0x5c>)
 8003704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003706:	4b13      	ldr	r3, [pc, #76]	@ (8003754 <MX_USART1_UART_Init+0x58>)
 8003708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800370c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800370e:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <MX_USART1_UART_Init+0x58>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003714:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <MX_USART1_UART_Init+0x58>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800371a:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <MX_USART1_UART_Init+0x58>)
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003720:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <MX_USART1_UART_Init+0x58>)
 8003722:	220c      	movs	r2, #12
 8003724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003726:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <MX_USART1_UART_Init+0x58>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800372c:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <MX_USART1_UART_Init+0x58>)
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003732:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <MX_USART1_UART_Init+0x58>)
 8003734:	2200      	movs	r2, #0
 8003736:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003738:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <MX_USART1_UART_Init+0x58>)
 800373a:	2200      	movs	r2, #0
 800373c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800373e:	4805      	ldr	r0, [pc, #20]	@ (8003754 <MX_USART1_UART_Init+0x58>)
 8003740:	f007 fb86 	bl	800ae50 <HAL_UART_Init>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800374a:	f7fe fa77 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20005388 	.word	0x20005388
 8003758:	40011000 	.word	0x40011000

0800375c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003760:	4b14      	ldr	r3, [pc, #80]	@ (80037b4 <MX_USART6_UART_Init+0x58>)
 8003762:	4a15      	ldr	r2, [pc, #84]	@ (80037b8 <MX_USART6_UART_Init+0x5c>)
 8003764:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003766:	4b13      	ldr	r3, [pc, #76]	@ (80037b4 <MX_USART6_UART_Init+0x58>)
 8003768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800376c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800376e:	4b11      	ldr	r3, [pc, #68]	@ (80037b4 <MX_USART6_UART_Init+0x58>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003774:	4b0f      	ldr	r3, [pc, #60]	@ (80037b4 <MX_USART6_UART_Init+0x58>)
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800377a:	4b0e      	ldr	r3, [pc, #56]	@ (80037b4 <MX_USART6_UART_Init+0x58>)
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003780:	4b0c      	ldr	r3, [pc, #48]	@ (80037b4 <MX_USART6_UART_Init+0x58>)
 8003782:	220c      	movs	r2, #12
 8003784:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003786:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <MX_USART6_UART_Init+0x58>)
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800378c:	4b09      	ldr	r3, [pc, #36]	@ (80037b4 <MX_USART6_UART_Init+0x58>)
 800378e:	2200      	movs	r2, #0
 8003790:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003792:	4b08      	ldr	r3, [pc, #32]	@ (80037b4 <MX_USART6_UART_Init+0x58>)
 8003794:	2200      	movs	r2, #0
 8003796:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003798:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <MX_USART6_UART_Init+0x58>)
 800379a:	2200      	movs	r2, #0
 800379c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800379e:	4805      	ldr	r0, [pc, #20]	@ (80037b4 <MX_USART6_UART_Init+0x58>)
 80037a0:	f007 fb56 	bl	800ae50 <HAL_UART_Init>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80037aa:	f7fe fa47 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20005410 	.word	0x20005410
 80037b8:	40011400 	.word	0x40011400

080037bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b0ae      	sub	sp, #184	@ 0xb8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	60da      	str	r2, [r3, #12]
 80037d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037d4:	f107 0320 	add.w	r3, r7, #32
 80037d8:	2284      	movs	r2, #132	@ 0x84
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f011 fe8b 	bl	80154f8 <memset>
  if(uartHandle->Instance==USART1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a53      	ldr	r2, [pc, #332]	@ (8003934 <HAL_UART_MspInit+0x178>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d15d      	bne.n	80038a8 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037ec:	2340      	movs	r3, #64	@ 0x40
 80037ee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80037f0:	2300      	movs	r3, #0
 80037f2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037f4:	f107 0320 	add.w	r3, r7, #32
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 fbb1 	bl	8006f60 <HAL_RCCEx_PeriphCLKConfig>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003804:	f7fe fa1a 	bl	8001c3c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003808:	4b4b      	ldr	r3, [pc, #300]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 800380a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380c:	4a4a      	ldr	r2, [pc, #296]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 800380e:	f043 0310 	orr.w	r3, r3, #16
 8003812:	6453      	str	r3, [r2, #68]	@ 0x44
 8003814:	4b48      	ldr	r3, [pc, #288]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003820:	4b45      	ldr	r3, [pc, #276]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	4a44      	ldr	r2, [pc, #272]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	6313      	str	r3, [r2, #48]	@ 0x30
 800382c:	4b42      	ldr	r3, [pc, #264]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003838:	4b3f      	ldr	r3, [pc, #252]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	4a3e      	ldr	r2, [pc, #248]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6313      	str	r3, [r2, #48]	@ 0x30
 8003844:	4b3c      	ldr	r3, [pc, #240]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003850:	2380      	movs	r3, #128	@ 0x80
 8003852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003856:	2302      	movs	r3, #2
 8003858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385c:	2300      	movs	r3, #0
 800385e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003862:	2300      	movs	r3, #0
 8003864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003868:	2307      	movs	r3, #7
 800386a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800386e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003872:	4619      	mov	r1, r3
 8003874:	4831      	ldr	r0, [pc, #196]	@ (800393c <HAL_UART_MspInit+0x180>)
 8003876:	f001 ff19 	bl	80056ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800387a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800387e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003882:	2302      	movs	r3, #2
 8003884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003894:	2307      	movs	r3, #7
 8003896:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800389a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800389e:	4619      	mov	r1, r3
 80038a0:	4827      	ldr	r0, [pc, #156]	@ (8003940 <HAL_UART_MspInit+0x184>)
 80038a2:	f001 ff03 	bl	80056ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80038a6:	e040      	b.n	800392a <HAL_UART_MspInit+0x16e>
  else if(uartHandle->Instance==USART6)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a25      	ldr	r2, [pc, #148]	@ (8003944 <HAL_UART_MspInit+0x188>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d13b      	bne.n	800392a <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80038b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80038b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80038b8:	2300      	movs	r3, #0
 80038ba:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038bc:	f107 0320 	add.w	r3, r7, #32
 80038c0:	4618      	mov	r0, r3
 80038c2:	f003 fb4d 	bl	8006f60 <HAL_RCCEx_PeriphCLKConfig>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80038cc:	f7fe f9b6 	bl	8001c3c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80038d0:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 80038d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d4:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 80038d6:	f043 0320 	orr.w	r3, r3, #32
 80038da:	6453      	str	r3, [r2, #68]	@ 0x44
 80038dc:	4b16      	ldr	r3, [pc, #88]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 80038de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038e8:	4b13      	ldr	r3, [pc, #76]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	4a12      	ldr	r2, [pc, #72]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f4:	4b10      	ldr	r3, [pc, #64]	@ (8003938 <HAL_UART_MspInit+0x17c>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003900:	23c0      	movs	r3, #192	@ 0xc0
 8003902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003906:	2302      	movs	r3, #2
 8003908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003912:	2303      	movs	r3, #3
 8003914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003918:	2308      	movs	r3, #8
 800391a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800391e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003922:	4619      	mov	r1, r3
 8003924:	4808      	ldr	r0, [pc, #32]	@ (8003948 <HAL_UART_MspInit+0x18c>)
 8003926:	f001 fec1 	bl	80056ac <HAL_GPIO_Init>
}
 800392a:	bf00      	nop
 800392c:	37b8      	adds	r7, #184	@ 0xb8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40011000 	.word	0x40011000
 8003938:	40023800 	.word	0x40023800
 800393c:	40020400 	.word	0x40020400
 8003940:	40020000 	.word	0x40020000
 8003944:	40011400 	.word	0x40011400
 8003948:	40020800 	.word	0x40020800

0800394c <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	b29a      	uxth	r2, r3
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	4804      	ldr	r0, [pc, #16]	@ (8003974 <_write+0x28>)
 8003964:	f007 fac2 	bl	800aeec <HAL_UART_Transmit>
  return len;
 8003968:	687b      	ldr	r3, [r7, #4]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20005388 	.word	0x20005388

08003978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003978:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800397c:	f7ff faa4 	bl	8002ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003980:	480c      	ldr	r0, [pc, #48]	@ (80039b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003982:	490d      	ldr	r1, [pc, #52]	@ (80039b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003984:	4a0d      	ldr	r2, [pc, #52]	@ (80039bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003988:	e002      	b.n	8003990 <LoopCopyDataInit>

0800398a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800398a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800398c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800398e:	3304      	adds	r3, #4

08003990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003994:	d3f9      	bcc.n	800398a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003996:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003998:	4c0a      	ldr	r4, [pc, #40]	@ (80039c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800399a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800399c:	e001      	b.n	80039a2 <LoopFillZerobss>

0800399e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800399e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a0:	3204      	adds	r2, #4

080039a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039a4:	d3fb      	bcc.n	800399e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80039a6:	f011 fe59 	bl	801565c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039aa:	f7fe f851 	bl	8001a50 <main>
  bx  lr    
 80039ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80039b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80039bc:	08016a2c 	.word	0x08016a2c
  ldr r2, =_sbss
 80039c0:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80039c4:	2000d7b0 	.word	0x2000d7b0

080039c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039c8:	e7fe      	b.n	80039c8 <ADC_IRQHandler>

080039ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039ce:	2003      	movs	r0, #3
 80039d0:	f000 fb8d 	bl	80040ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039d4:	2000      	movs	r0, #0
 80039d6:	f7ff f90d 	bl	8002bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039da:	f7ff f8e3 	bl	8002ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039e8:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <HAL_IncTick+0x20>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <HAL_IncTick+0x24>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4413      	add	r3, r2
 80039f4:	4a04      	ldr	r2, [pc, #16]	@ (8003a08 <HAL_IncTick+0x24>)
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	2000000c 	.word	0x2000000c
 8003a08:	20005498 	.word	0x20005498

08003a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a10:	4b03      	ldr	r3, [pc, #12]	@ (8003a20 <HAL_GetTick+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	20005498 	.word	0x20005498

08003a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7ff ffee 	bl	8003a0c <HAL_GetTick>
 8003a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d005      	beq.n	8003a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <HAL_Delay+0x44>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a4a:	bf00      	nop
 8003a4c:	f7ff ffde 	bl	8003a0c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d8f7      	bhi.n	8003a4c <HAL_Delay+0x28>
  {
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	2000000c 	.word	0x2000000c

08003a6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e031      	b.n	8003ae6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fc fdf8 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d116      	bne.n	8003ad8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aae:	4b10      	ldr	r3, [pc, #64]	@ (8003af0 <HAL_ADC_Init+0x84>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	f043 0202 	orr.w	r2, r3, #2
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f970 	bl	8003da0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ad6:	e001      	b.n	8003adc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	ffffeefd 	.word	0xffffeefd

08003af4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x1c>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e136      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x28a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b09      	cmp	r3, #9
 8003b1e:	d93a      	bls.n	8003b96 <HAL_ADC_ConfigChannel+0xa2>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b28:	d035      	beq.n	8003b96 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68d9      	ldr	r1, [r3, #12]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	4613      	mov	r3, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3b1e      	subs	r3, #30
 8003b40:	2207      	movs	r2, #7
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43da      	mvns	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a8d      	ldr	r2, [pc, #564]	@ (8003d8c <HAL_ADC_ConfigChannel+0x298>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d10a      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68d9      	ldr	r1, [r3, #12]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	061a      	lsls	r2, r3, #24
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b6e:	e035      	b.n	8003bdc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68d9      	ldr	r1, [r3, #12]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	4618      	mov	r0, r3
 8003b82:	4603      	mov	r3, r0
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4403      	add	r3, r0
 8003b88:	3b1e      	subs	r3, #30
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b94:	e022      	b.n	8003bdc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6919      	ldr	r1, [r3, #16]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4413      	add	r3, r2
 8003baa:	2207      	movs	r2, #7
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43da      	mvns	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6919      	ldr	r1, [r3, #16]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	4603      	mov	r3, r0
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4403      	add	r3, r0
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b06      	cmp	r3, #6
 8003be2:	d824      	bhi.n	8003c2e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3b05      	subs	r3, #5
 8003bf6:	221f      	movs	r2, #31
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	400a      	ands	r2, r1
 8003c04:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	4618      	mov	r0, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3b05      	subs	r3, #5
 8003c20:	fa00 f203 	lsl.w	r2, r0, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c2c:	e04c      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	d824      	bhi.n	8003c80 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	3b23      	subs	r3, #35	@ 0x23
 8003c48:	221f      	movs	r2, #31
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	400a      	ands	r2, r1
 8003c56:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	4618      	mov	r0, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	3b23      	subs	r3, #35	@ 0x23
 8003c72:	fa00 f203 	lsl.w	r2, r0, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c7e:	e023      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	3b41      	subs	r3, #65	@ 0x41
 8003c92:	221f      	movs	r2, #31
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	400a      	ands	r2, r1
 8003ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	4618      	mov	r0, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	3b41      	subs	r3, #65	@ 0x41
 8003cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a30      	ldr	r2, [pc, #192]	@ (8003d90 <HAL_ADC_ConfigChannel+0x29c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10a      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x1f4>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cda:	d105      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8003d94 <HAL_ADC_ConfigChannel+0x2a0>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8003d94 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ce2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003ce6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a28      	ldr	r2, [pc, #160]	@ (8003d90 <HAL_ADC_ConfigChannel+0x29c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10f      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x21e>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b12      	cmp	r3, #18
 8003cf8:	d10b      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003cfa:	4b26      	ldr	r3, [pc, #152]	@ (8003d94 <HAL_ADC_ConfigChannel+0x2a0>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4a25      	ldr	r2, [pc, #148]	@ (8003d94 <HAL_ADC_ConfigChannel+0x2a0>)
 8003d00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d04:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003d06:	4b23      	ldr	r3, [pc, #140]	@ (8003d94 <HAL_ADC_ConfigChannel+0x2a0>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4a22      	ldr	r2, [pc, #136]	@ (8003d94 <HAL_ADC_ConfigChannel+0x2a0>)
 8003d0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d10:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1e      	ldr	r2, [pc, #120]	@ (8003d90 <HAL_ADC_ConfigChannel+0x29c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d12b      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x280>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1a      	ldr	r2, [pc, #104]	@ (8003d8c <HAL_ADC_ConfigChannel+0x298>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <HAL_ADC_ConfigChannel+0x23a>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b11      	cmp	r3, #17
 8003d2c:	d122      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003d2e:	4b19      	ldr	r3, [pc, #100]	@ (8003d94 <HAL_ADC_ConfigChannel+0x2a0>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4a18      	ldr	r2, [pc, #96]	@ (8003d94 <HAL_ADC_ConfigChannel+0x2a0>)
 8003d34:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003d38:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003d3a:	4b16      	ldr	r3, [pc, #88]	@ (8003d94 <HAL_ADC_ConfigChannel+0x2a0>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4a15      	ldr	r2, [pc, #84]	@ (8003d94 <HAL_ADC_ConfigChannel+0x2a0>)
 8003d40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d44:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a10      	ldr	r2, [pc, #64]	@ (8003d8c <HAL_ADC_ConfigChannel+0x298>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d111      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003d50:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <HAL_ADC_ConfigChannel+0x2a4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a11      	ldr	r2, [pc, #68]	@ (8003d9c <HAL_ADC_ConfigChannel+0x2a8>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	0c9a      	lsrs	r2, r3, #18
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d66:	e002      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f9      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	10000012 	.word	0x10000012
 8003d90:	40012000 	.word	0x40012000
 8003d94:	40012300 	.word	0x40012300
 8003d98:	20000004 	.word	0x20000004
 8003d9c:	431bde83 	.word	0x431bde83

08003da0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003da8:	4b78      	ldr	r3, [pc, #480]	@ (8003f8c <ADC_Init+0x1ec>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4a77      	ldr	r2, [pc, #476]	@ (8003f8c <ADC_Init+0x1ec>)
 8003dae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003db2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003db4:	4b75      	ldr	r3, [pc, #468]	@ (8003f8c <ADC_Init+0x1ec>)
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4973      	ldr	r1, [pc, #460]	@ (8003f8c <ADC_Init+0x1ec>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	021a      	lsls	r2, r3, #8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003df4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6899      	ldr	r1, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2e:	4a58      	ldr	r2, [pc, #352]	@ (8003f90 <ADC_Init+0x1f0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6899      	ldr	r1, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6899      	ldr	r1, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	e00f      	b.n	8003e9a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0202 	bic.w	r2, r2, #2
 8003ea8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6899      	ldr	r1, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	005a      	lsls	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01b      	beq.n	8003f00 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ed6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003ee6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	035a      	lsls	r2, r3, #13
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	e007      	b.n	8003f10 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	051a      	lsls	r2, r3, #20
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003f44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6899      	ldr	r1, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f52:	025a      	lsls	r2, r3, #9
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6899      	ldr	r1, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	029a      	lsls	r2, r3, #10
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40012300 	.word	0x40012300
 8003f90:	0f000001 	.word	0x0f000001

08003f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fc2:	4a04      	ldr	r2, [pc, #16]	@ (8003fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	60d3      	str	r3, [r2, #12]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000ed00 	.word	0xe000ed00
 8003fd8:	05fa0000 	.word	0x05fa0000

08003fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe0:	4b04      	ldr	r3, [pc, #16]	@ (8003ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	f003 0307 	and.w	r3, r3, #7
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004006:	2b00      	cmp	r3, #0
 8004008:	db0b      	blt.n	8004022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	f003 021f 	and.w	r2, r3, #31
 8004010:	4907      	ldr	r1, [pc, #28]	@ (8004030 <__NVIC_EnableIRQ+0x38>)
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	2001      	movs	r0, #1
 800401a:	fa00 f202 	lsl.w	r2, r0, r2
 800401e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000e100 	.word	0xe000e100

08004034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	6039      	str	r1, [r7, #0]
 800403e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004044:	2b00      	cmp	r3, #0
 8004046:	db0a      	blt.n	800405e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	490c      	ldr	r1, [pc, #48]	@ (8004080 <__NVIC_SetPriority+0x4c>)
 800404e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004052:	0112      	lsls	r2, r2, #4
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	440b      	add	r3, r1
 8004058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800405c:	e00a      	b.n	8004074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	4908      	ldr	r1, [pc, #32]	@ (8004084 <__NVIC_SetPriority+0x50>)
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	3b04      	subs	r3, #4
 800406c:	0112      	lsls	r2, r2, #4
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	440b      	add	r3, r1
 8004072:	761a      	strb	r2, [r3, #24]
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000e100 	.word	0xe000e100
 8004084:	e000ed00 	.word	0xe000ed00

08004088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004088:	b480      	push	{r7}
 800408a:	b089      	sub	sp, #36	@ 0x24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f1c3 0307 	rsb	r3, r3, #7
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	bf28      	it	cs
 80040a6:	2304      	movcs	r3, #4
 80040a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3304      	adds	r3, #4
 80040ae:	2b06      	cmp	r3, #6
 80040b0:	d902      	bls.n	80040b8 <NVIC_EncodePriority+0x30>
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3b03      	subs	r3, #3
 80040b6:	e000      	b.n	80040ba <NVIC_EncodePriority+0x32>
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040bc:	f04f 32ff 	mov.w	r2, #4294967295
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	43da      	mvns	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	401a      	ands	r2, r3
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d0:	f04f 31ff 	mov.w	r1, #4294967295
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	43d9      	mvns	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e0:	4313      	orrs	r3, r2
         );
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3724      	adds	r7, #36	@ 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff ff4c 	bl	8003f94 <__NVIC_SetPriorityGrouping>
}
 80040fc:	bf00      	nop
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004116:	f7ff ff61 	bl	8003fdc <__NVIC_GetPriorityGrouping>
 800411a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	6978      	ldr	r0, [r7, #20]
 8004122:	f7ff ffb1 	bl	8004088 <NVIC_EncodePriority>
 8004126:	4602      	mov	r2, r0
 8004128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff ff80 	bl	8004034 <__NVIC_SetPriority>
}
 8004134:	bf00      	nop
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ff54 	bl	8003ff8 <__NVIC_EnableIRQ>
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e054      	b.n	8004214 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	7f5b      	ldrb	r3, [r3, #29]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc fafc 	bl	8000778 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	791b      	ldrb	r3, [r3, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10c      	bne.n	80041a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a22      	ldr	r2, [pc, #136]	@ (800421c <HAL_CRC_Init+0xc4>)
 8004194:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0218 	bic.w	r2, r2, #24
 80041a4:	609a      	str	r2, [r3, #8]
 80041a6:	e00c      	b.n	80041c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6899      	ldr	r1, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f834 	bl	8004220 <HAL_CRCEx_Polynomial_Set>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e028      	b.n	8004214 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	795b      	ldrb	r3, [r3, #5]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d105      	bne.n	80041d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f04f 32ff 	mov.w	r2, #4294967295
 80041d2:	611a      	str	r2, [r3, #16]
 80041d4:	e004      	b.n	80041e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6912      	ldr	r2, [r2, #16]
 80041de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699a      	ldr	r2, [r3, #24]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	04c11db7 	.word	0x04c11db7

08004220 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004230:	231f      	movs	r3, #31
 8004232:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d102      	bne.n	8004244 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
 8004242:	e063      	b.n	800430c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004244:	bf00      	nop
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1e5a      	subs	r2, r3, #1
 800424a:	613a      	str	r2, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <HAL_CRCEx_Polynomial_Set+0x44>
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b18      	cmp	r3, #24
 8004268:	d846      	bhi.n	80042f8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800426a:	a201      	add	r2, pc, #4	@ (adr r2, 8004270 <HAL_CRCEx_Polynomial_Set+0x50>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	080042ff 	.word	0x080042ff
 8004274:	080042f9 	.word	0x080042f9
 8004278:	080042f9 	.word	0x080042f9
 800427c:	080042f9 	.word	0x080042f9
 8004280:	080042f9 	.word	0x080042f9
 8004284:	080042f9 	.word	0x080042f9
 8004288:	080042f9 	.word	0x080042f9
 800428c:	080042f9 	.word	0x080042f9
 8004290:	080042ed 	.word	0x080042ed
 8004294:	080042f9 	.word	0x080042f9
 8004298:	080042f9 	.word	0x080042f9
 800429c:	080042f9 	.word	0x080042f9
 80042a0:	080042f9 	.word	0x080042f9
 80042a4:	080042f9 	.word	0x080042f9
 80042a8:	080042f9 	.word	0x080042f9
 80042ac:	080042f9 	.word	0x080042f9
 80042b0:	080042e1 	.word	0x080042e1
 80042b4:	080042f9 	.word	0x080042f9
 80042b8:	080042f9 	.word	0x080042f9
 80042bc:	080042f9 	.word	0x080042f9
 80042c0:	080042f9 	.word	0x080042f9
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	080042f9 	.word	0x080042f9
 80042cc:	080042f9 	.word	0x080042f9
 80042d0:	080042d5 	.word	0x080042d5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b06      	cmp	r3, #6
 80042d8:	d913      	bls.n	8004302 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80042de:	e010      	b.n	8004302 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b07      	cmp	r3, #7
 80042e4:	d90f      	bls.n	8004306 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80042ea:	e00c      	b.n	8004306 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	d90b      	bls.n	800430a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80042f6:	e008      	b.n	800430a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
        break;
 80042fc:	e006      	b.n	800430c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80042fe:	bf00      	nop
 8004300:	e004      	b.n	800430c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004302:	bf00      	nop
 8004304:	e002      	b.n	800430c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004306:	bf00      	nop
 8004308:	e000      	b.n	800430c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800430a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10d      	bne.n	800432e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 0118 	bic.w	r1, r3, #24
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	430a      	orrs	r2, r1
 800432c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800432e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004330:	4618      	mov	r0, r3
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e069      	b.n	8004422 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fc fa60 	bl	8000820 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b2a      	ldr	r3, [pc, #168]	@ (800442c <HAL_DCMI_Init+0xf0>)
 8004382:	400b      	ands	r3, r1
 8004384:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6819      	ldr	r1, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800439a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80043a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043be:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043ca:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b10      	cmp	r3, #16
 80043da:	d112      	bne.n	8004402 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	7f1b      	ldrb	r3, [r3, #28]
 80043e0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	7f5b      	ldrb	r3, [r3, #29]
 80043e6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80043e8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	7f9b      	ldrb	r3, [r3, #30]
 80043ee:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80043f0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	7fdb      	ldrb	r3, [r3, #31]
 80043f8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80043fe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004400:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 021e 	orr.w	r2, r2, #30
 8004410:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	ffe0f007 	.word	0xffe0f007

08004430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800443c:	f7ff fae6 	bl	8003a0c <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e099      	b.n	8004580 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446c:	e00f      	b.n	800448e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800446e:	f7ff facd 	bl	8003a0c <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b05      	cmp	r3, #5
 800447a:	d908      	bls.n	800448e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2203      	movs	r2, #3
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e078      	b.n	8004580 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e8      	bne.n	800446e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4b38      	ldr	r3, [pc, #224]	@ (8004588 <HAL_DMA_Init+0x158>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d107      	bne.n	80044f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f0:	4313      	orrs	r3, r2
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f023 0307 	bic.w	r3, r3, #7
 800450e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	2b04      	cmp	r3, #4
 8004520:	d117      	bne.n	8004552 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00e      	beq.n	8004552 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fb03 	bl	8004b40 <DMA_CheckFifoParam>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2240      	movs	r2, #64	@ 0x40
 8004544:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800454e:	2301      	movs	r3, #1
 8004550:	e016      	b.n	8004580 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 faba 	bl	8004ad4 <DMA_CalcBaseAndBitshift>
 8004560:	4603      	mov	r3, r0
 8004562:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004568:	223f      	movs	r2, #63	@ 0x3f
 800456a:	409a      	lsls	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	f010803f 	.word	0xf010803f

0800458c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e050      	b.n	8004640 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d101      	bne.n	80045ae <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
 80045ac:	e048      	b.n	8004640 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2200      	movs	r2, #0
 80045e4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2221      	movs	r2, #33	@ 0x21
 80045ec:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fa70 	bl	8004ad4 <DMA_CalcBaseAndBitshift>
 80045f4:	4603      	mov	r3, r0
 80045f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	223f      	movs	r2, #63	@ 0x3f
 80045fe:	409a      	lsls	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_DMA_Start_IT+0x26>
 800466a:	2302      	movs	r3, #2
 800466c:	e048      	b.n	8004700 <HAL_DMA_Start_IT+0xb8>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d137      	bne.n	80046f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f9ee 	bl	8004a78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a0:	223f      	movs	r2, #63	@ 0x3f
 80046a2:	409a      	lsls	r2, r3
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0216 	orr.w	r2, r2, #22
 80046b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046c6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0208 	orr.w	r2, r2, #8
 80046de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e005      	b.n	80046fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
 80046fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d004      	beq.n	8004726 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2280      	movs	r2, #128	@ 0x80
 8004720:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e00c      	b.n	8004740 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2205      	movs	r2, #5
 800472a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0201 	bic.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004758:	4b8e      	ldr	r3, [pc, #568]	@ (8004994 <HAL_DMA_IRQHandler+0x248>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a8e      	ldr	r2, [pc, #568]	@ (8004998 <HAL_DMA_IRQHandler+0x24c>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	0a9b      	lsrs	r3, r3, #10
 8004764:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004776:	2208      	movs	r2, #8
 8004778:	409a      	lsls	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d01a      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d013      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0204 	bic.w	r2, r2, #4
 800479e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a4:	2208      	movs	r2, #8
 80047a6:	409a      	lsls	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b0:	f043 0201 	orr.w	r2, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047bc:	2201      	movs	r2, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d012      	beq.n	80047ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047da:	2201      	movs	r2, #1
 80047dc:	409a      	lsls	r2, r3
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e6:	f043 0202 	orr.w	r2, r3, #2
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f2:	2204      	movs	r2, #4
 80047f4:	409a      	lsls	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d012      	beq.n	8004824 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004810:	2204      	movs	r2, #4
 8004812:	409a      	lsls	r2, r3
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481c:	f043 0204 	orr.w	r2, r3, #4
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	2210      	movs	r2, #16
 800482a:	409a      	lsls	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d043      	beq.n	80048bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d03c      	beq.n	80048bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004846:	2210      	movs	r2, #16
 8004848:	409a      	lsls	r2, r3
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d018      	beq.n	800488e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d024      	beq.n	80048bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
 800487a:	e01f      	b.n	80048bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01b      	beq.n	80048bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	4798      	blx	r3
 800488c:	e016      	b.n	80048bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d107      	bne.n	80048ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0208 	bic.w	r2, r2, #8
 80048aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c0:	2220      	movs	r2, #32
 80048c2:	409a      	lsls	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 808f 	beq.w	80049ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8087 	beq.w	80049ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e2:	2220      	movs	r2, #32
 80048e4:	409a      	lsls	r2, r3
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d136      	bne.n	8004964 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0216 	bic.w	r2, r2, #22
 8004904:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004914:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d103      	bne.n	8004926 <HAL_DMA_IRQHandler+0x1da>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0208 	bic.w	r2, r2, #8
 8004934:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493a:	223f      	movs	r2, #63	@ 0x3f
 800493c:	409a      	lsls	r2, r3
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004956:	2b00      	cmp	r3, #0
 8004958:	d07e      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
        }
        return;
 8004962:	e079      	b.n	8004a58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01d      	beq.n	80049ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10d      	bne.n	800499c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004984:	2b00      	cmp	r3, #0
 8004986:	d031      	beq.n	80049ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	4798      	blx	r3
 8004990:	e02c      	b.n	80049ec <HAL_DMA_IRQHandler+0x2a0>
 8004992:	bf00      	nop
 8004994:	20000004 	.word	0x20000004
 8004998:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d023      	beq.n	80049ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	4798      	blx	r3
 80049ac:	e01e      	b.n	80049ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10f      	bne.n	80049dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0210 	bic.w	r2, r2, #16
 80049ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d032      	beq.n	8004a5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d022      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2205      	movs	r2, #5
 8004a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d307      	bcc.n	8004a34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f2      	bne.n	8004a18 <HAL_DMA_IRQHandler+0x2cc>
 8004a32:	e000      	b.n	8004a36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
 8004a56:	e000      	b.n	8004a5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a58:	bf00      	nop
    }
  }
}
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b40      	cmp	r3, #64	@ 0x40
 8004aa4:	d108      	bne.n	8004ab8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ab6:	e007      	b.n	8004ac8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	60da      	str	r2, [r3, #12]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	3b10      	subs	r3, #16
 8004ae4:	4a13      	ldr	r2, [pc, #76]	@ (8004b34 <DMA_CalcBaseAndBitshift+0x60>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004aee:	4a12      	ldr	r2, [pc, #72]	@ (8004b38 <DMA_CalcBaseAndBitshift+0x64>)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d908      	bls.n	8004b14 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	4b0c      	ldr	r3, [pc, #48]	@ (8004b3c <DMA_CalcBaseAndBitshift+0x68>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	1d1a      	adds	r2, r3, #4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b12:	e006      	b.n	8004b22 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4b08      	ldr	r3, [pc, #32]	@ (8004b3c <DMA_CalcBaseAndBitshift+0x68>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	aaaaaaab 	.word	0xaaaaaaab
 8004b38:	08016580 	.word	0x08016580
 8004b3c:	fffffc00 	.word	0xfffffc00

08004b40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11f      	bne.n	8004b9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d856      	bhi.n	8004c0e <DMA_CheckFifoParam+0xce>
 8004b60:	a201      	add	r2, pc, #4	@ (adr r2, 8004b68 <DMA_CheckFifoParam+0x28>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b8b 	.word	0x08004b8b
 8004b70:	08004b79 	.word	0x08004b79
 8004b74:	08004c0f 	.word	0x08004c0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d046      	beq.n	8004c12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b88:	e043      	b.n	8004c12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b92:	d140      	bne.n	8004c16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b98:	e03d      	b.n	8004c16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba2:	d121      	bne.n	8004be8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d837      	bhi.n	8004c1a <DMA_CheckFifoParam+0xda>
 8004baa:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <DMA_CheckFifoParam+0x70>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bc7 	.word	0x08004bc7
 8004bb8:	08004bc1 	.word	0x08004bc1
 8004bbc:	08004bd9 	.word	0x08004bd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc4:	e030      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d025      	beq.n	8004c1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bd6:	e022      	b.n	8004c1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bdc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004be0:	d11f      	bne.n	8004c22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004be6:	e01c      	b.n	8004c22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d903      	bls.n	8004bf6 <DMA_CheckFifoParam+0xb6>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d003      	beq.n	8004bfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bf4:	e018      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8004bfa:	e015      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c0c:	e00b      	b.n	8004c26 <DMA_CheckFifoParam+0xe6>
      break;
 8004c0e:	bf00      	nop
 8004c10:	e00a      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;
 8004c12:	bf00      	nop
 8004c14:	e008      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;
 8004c16:	bf00      	nop
 8004c18:	e006      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;
 8004c1a:	bf00      	nop
 8004c1c:	e004      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e002      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <DMA_CheckFifoParam+0xe8>
      break;
 8004c26:	bf00      	nop
    }
  } 
  
  return status; 
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop

08004c38 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e039      	b.n	8004cbe <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fb ff3c 	bl	8000adc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c88:	f023 0107 	bic.w	r1, r3, #7
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <HAL_DMA2D_Init+0x90>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68d1      	ldr	r1, [r2, #12]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	430b      	orrs	r3, r1
 8004cac:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	ffffc000 	.word	0xffffc000

08004ccc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d026      	beq.n	8004d3c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d021      	beq.n	8004d3c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d06:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0c:	f043 0201 	orr.w	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2204      	movs	r2, #4
 8004d20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d026      	beq.n	8004d94 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d021      	beq.n	8004d94 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d5e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2220      	movs	r2, #32
 8004d66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6c:	f043 0202 	orr.w	r2, r3, #2
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2204      	movs	r2, #4
 8004d78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d026      	beq.n	8004dec <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d021      	beq.n	8004dec <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004db6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2208      	movs	r2, #8
 8004dbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc4:	f043 0204 	orr.w	r2, r3, #4
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2204      	movs	r2, #4
 8004dd0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d013      	beq.n	8004e1e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00e      	beq.n	8004e1e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e0e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2204      	movs	r2, #4
 8004e16:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f853 	bl	8004ec4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d024      	beq.n	8004e72 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01f      	beq.n	8004e72 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e40:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2202      	movs	r2, #2
 8004e48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01f      	beq.n	8004ebc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01a      	beq.n	8004ebc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e94:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2210      	movs	r2, #16
 8004e9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f80e 	bl	8004ed8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_DMA2D_ConfigLayer+0x20>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e079      	b.n	8005000 <HAL_DMA2D_ConfigLayer+0x114>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	3318      	adds	r3, #24
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4413      	add	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	041b      	lsls	r3, r3, #16
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004f36:	4b35      	ldr	r3, [pc, #212]	@ (800500c <HAL_DMA2D_ConfigLayer+0x120>)
 8004f38:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b0a      	cmp	r3, #10
 8004f40:	d003      	beq.n	8004f4a <HAL_DMA2D_ConfigLayer+0x5e>
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b09      	cmp	r3, #9
 8004f48:	d107      	bne.n	8004f5a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	e005      	b.n	8004f66 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	061b      	lsls	r3, r3, #24
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d120      	bne.n	8004fae <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	ea02 0103 	and.w	r1, r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b0a      	cmp	r3, #10
 8004f94:	d003      	beq.n	8004f9e <HAL_DMA2D_ConfigLayer+0xb2>
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	d127      	bne.n	8004fee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004faa:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fac:	e01f      	b.n	8004fee <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	ea02 0103 	and.w	r1, r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b0a      	cmp	r3, #10
 8004fd6:	d003      	beq.n	8004fe0 <HAL_DMA2D_ConfigLayer+0xf4>
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b09      	cmp	r3, #9
 8004fde:	d106      	bne.n	8004fee <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004fec:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	ff03000f 	.word	0xff03000f

08005010 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e086      	b.n	8005130 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2223      	movs	r2, #35	@ 0x23
 8005030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fb fdc5 	bl	8000bc4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800503a:	4b3f      	ldr	r3, [pc, #252]	@ (8005138 <HAL_ETH_Init+0x128>)
 800503c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503e:	4a3e      	ldr	r2, [pc, #248]	@ (8005138 <HAL_ETH_Init+0x128>)
 8005040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005044:	6453      	str	r3, [r2, #68]	@ 0x44
 8005046:	4b3c      	ldr	r3, [pc, #240]	@ (8005138 <HAL_ETH_Init+0x128>)
 8005048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005052:	4b3a      	ldr	r3, [pc, #232]	@ (800513c <HAL_ETH_Init+0x12c>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4a39      	ldr	r2, [pc, #228]	@ (800513c <HAL_ETH_Init+0x12c>)
 8005058:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800505c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800505e:	4b37      	ldr	r3, [pc, #220]	@ (800513c <HAL_ETH_Init+0x12c>)
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	4935      	ldr	r1, [pc, #212]	@ (800513c <HAL_ETH_Init+0x12c>)
 8005068:	4313      	orrs	r3, r2
 800506a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800506c:	4b33      	ldr	r3, [pc, #204]	@ (800513c <HAL_ETH_Init+0x12c>)
 800506e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6812      	ldr	r2, [r2, #0]
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005086:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005088:	f7fe fcc0 	bl	8003a0c <HAL_GetTick>
 800508c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800508e:	e011      	b.n	80050b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005090:	f7fe fcbc 	bl	8003a0c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800509e:	d909      	bls.n	80050b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2204      	movs	r2, #4
 80050a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	22e0      	movs	r2, #224	@ 0xe0
 80050ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e03d      	b.n	8005130 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e4      	bne.n	8005090 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f97a 	bl	80053c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fa25 	bl	800551c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa7b 	bl	80055ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	461a      	mov	r2, r3
 80050de:	2100      	movs	r1, #0
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f9e3 	bl	80054ac <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80050f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b0f      	ldr	r3, [pc, #60]	@ (8005140 <HAL_ETH_Init+0x130>)
 8005104:	430b      	orrs	r3, r1
 8005106:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800511a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2210      	movs	r2, #16
 800512a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40023800 	.word	0x40023800
 800513c:	40013800 	.word	0x40013800
 8005140:	00020060 	.word	0x00020060

08005144 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4b53      	ldr	r3, [pc, #332]	@ (80052a8 <ETH_SetMACConfig+0x164>)
 800515a:	4013      	ands	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	7b9b      	ldrb	r3, [r3, #14]
 8005162:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	7c12      	ldrb	r2, [r2, #16]
 8005168:	2a00      	cmp	r2, #0
 800516a:	d102      	bne.n	8005172 <ETH_SetMACConfig+0x2e>
 800516c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005170:	e000      	b.n	8005174 <ETH_SetMACConfig+0x30>
 8005172:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005174:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	7c52      	ldrb	r2, [r2, #17]
 800517a:	2a00      	cmp	r2, #0
 800517c:	d102      	bne.n	8005184 <ETH_SetMACConfig+0x40>
 800517e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005182:	e000      	b.n	8005186 <ETH_SetMACConfig+0x42>
 8005184:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005186:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800518c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	7fdb      	ldrb	r3, [r3, #31]
 8005192:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005194:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800519a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	7f92      	ldrb	r2, [r2, #30]
 80051a0:	2a00      	cmp	r2, #0
 80051a2:	d102      	bne.n	80051aa <ETH_SetMACConfig+0x66>
 80051a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80051a8:	e000      	b.n	80051ac <ETH_SetMACConfig+0x68>
 80051aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80051ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	7f1b      	ldrb	r3, [r3, #28]
 80051b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80051b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80051ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	791b      	ldrb	r3, [r3, #4]
 80051c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80051c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80051ca:	2a00      	cmp	r2, #0
 80051cc:	d102      	bne.n	80051d4 <ETH_SetMACConfig+0x90>
 80051ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051d2:	e000      	b.n	80051d6 <ETH_SetMACConfig+0x92>
 80051d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80051d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	7bdb      	ldrb	r3, [r3, #15]
 80051dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80051de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80051e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80051ee:	4313      	orrs	r3, r2
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005206:	2001      	movs	r0, #1
 8005208:	f7fe fc0c 	bl	8003a24 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005222:	4013      	ands	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005232:	2a00      	cmp	r2, #0
 8005234:	d101      	bne.n	800523a <ETH_SetMACConfig+0xf6>
 8005236:	2280      	movs	r2, #128	@ 0x80
 8005238:	e000      	b.n	800523c <ETH_SetMACConfig+0xf8>
 800523a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800523c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005242:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800524a:	2a01      	cmp	r2, #1
 800524c:	d101      	bne.n	8005252 <ETH_SetMACConfig+0x10e>
 800524e:	2208      	movs	r2, #8
 8005250:	e000      	b.n	8005254 <ETH_SetMACConfig+0x110>
 8005252:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005254:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800525c:	2a01      	cmp	r2, #1
 800525e:	d101      	bne.n	8005264 <ETH_SetMACConfig+0x120>
 8005260:	2204      	movs	r2, #4
 8005262:	e000      	b.n	8005266 <ETH_SetMACConfig+0x122>
 8005264:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005266:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800526e:	2a01      	cmp	r2, #1
 8005270:	d101      	bne.n	8005276 <ETH_SetMACConfig+0x132>
 8005272:	2202      	movs	r2, #2
 8005274:	e000      	b.n	8005278 <ETH_SetMACConfig+0x134>
 8005276:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005278:	4313      	orrs	r3, r2
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005290:	2001      	movs	r0, #1
 8005292:	f7fe fbc7 	bl	8003a24 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	619a      	str	r2, [r3, #24]
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	fd20810f 	.word	0xfd20810f

080052ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4b3d      	ldr	r3, [pc, #244]	@ (80053bc <ETH_SetDMAConfig+0x110>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	7b1b      	ldrb	r3, [r3, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d102      	bne.n	80052d8 <ETH_SetDMAConfig+0x2c>
 80052d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80052d6:	e000      	b.n	80052da <ETH_SetDMAConfig+0x2e>
 80052d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	7b5b      	ldrb	r3, [r3, #13]
 80052de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80052e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	7f52      	ldrb	r2, [r2, #29]
 80052e6:	2a00      	cmp	r2, #0
 80052e8:	d102      	bne.n	80052f0 <ETH_SetDMAConfig+0x44>
 80052ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80052ee:	e000      	b.n	80052f2 <ETH_SetDMAConfig+0x46>
 80052f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80052f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	7b9b      	ldrb	r3, [r3, #14]
 80052f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80052fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005300:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	7f1b      	ldrb	r3, [r3, #28]
 8005306:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005308:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	7f9b      	ldrb	r3, [r3, #30]
 800530e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005310:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005316:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800531e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005320:	4313      	orrs	r3, r2
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005330:	461a      	mov	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005342:	2001      	movs	r0, #1
 8005344:	f7fe fb6e 	bl	8003a24 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005350:	461a      	mov	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	791b      	ldrb	r3, [r3, #4]
 800535a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005360:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005366:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800536c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005374:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005376:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800537e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005384:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800538e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005392:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80053a0:	2001      	movs	r0, #1
 80053a2:	f7fe fb3f 	bl	8003a24 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ae:	461a      	mov	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6013      	str	r3, [r2, #0]
}
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	f8de3f23 	.word	0xf8de3f23

080053c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b0a6      	sub	sp, #152	@ 0x98
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80053d4:	2300      	movs	r3, #0
 80053d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80053d8:	2300      	movs	r3, #0
 80053da:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80053f6:	2300      	movs	r3, #0
 80053f8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005402:	2300      	movs	r3, #0
 8005404:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800540c:	2300      	movs	r3, #0
 800540e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005410:	2300      	movs	r3, #0
 8005412:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005416:	2300      	movs	r3, #0
 8005418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800541c:	2300      	movs	r3, #0
 800541e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005422:	2300      	movs	r3, #0
 8005424:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005428:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800542c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800542e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005434:	2300      	movs	r3, #0
 8005436:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800543a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff fe7f 	bl	8005144 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005446:	2301      	movs	r3, #1
 8005448:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800544a:	2301      	movs	r3, #1
 800544c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800544e:	2301      	movs	r3, #1
 8005450:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005454:	2301      	movs	r3, #1
 8005456:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005458:	2300      	movs	r3, #0
 800545a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005462:	2300      	movs	r3, #0
 8005464:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005468:	2300      	movs	r3, #0
 800546a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005472:	2301      	movs	r3, #1
 8005474:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005476:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800547a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800547c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005480:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005482:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005486:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005488:	2301      	movs	r3, #1
 800548a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800548e:	2300      	movs	r3, #0
 8005490:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005496:	f107 0308 	add.w	r3, r7, #8
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff ff05 	bl	80052ac <ETH_SetDMAConfig>
}
 80054a2:	bf00      	nop
 80054a4:	3798      	adds	r7, #152	@ 0x98
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3305      	adds	r3, #5
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	3204      	adds	r2, #4
 80054c4:	7812      	ldrb	r2, [r2, #0]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4b11      	ldr	r3, [pc, #68]	@ (8005514 <ETH_MACAddressConfig+0x68>)
 80054ce:	4413      	add	r3, r2
 80054d0:	461a      	mov	r2, r3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3303      	adds	r3, #3
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	061a      	lsls	r2, r3, #24
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3302      	adds	r3, #2
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3301      	adds	r3, #1
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	4313      	orrs	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	7812      	ldrb	r2, [r2, #0]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <ETH_MACAddressConfig+0x6c>)
 80054fe:	4413      	add	r3, r2
 8005500:	461a      	mov	r2, r3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	6013      	str	r3, [r2, #0]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40028040 	.word	0x40028040
 8005518:	40028044 	.word	0x40028044

0800551c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	e03e      	b.n	80055a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68d9      	ldr	r1, [r3, #12]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	440b      	add	r3, r1
 800553a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2200      	movs	r2, #0
 8005546:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2200      	movs	r2, #0
 800554c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2200      	movs	r2, #0
 8005552:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	3206      	adds	r2, #6
 800555c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d80c      	bhi.n	800558c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68d9      	ldr	r1, [r3, #12]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	440b      	add	r3, r1
 8005584:	461a      	mov	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	60da      	str	r2, [r3, #12]
 800558a:	e004      	b.n	8005596 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	461a      	mov	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3301      	adds	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d9bd      	bls.n	800552a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c0:	611a      	str	r2, [r3, #16]
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e048      	b.n	800566e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6919      	ldr	r1, [r3, #16]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	440b      	add	r3, r1
 80055ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2200      	movs	r2, #0
 80055f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2200      	movs	r2, #0
 80055fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2200      	movs	r2, #0
 8005604:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2200      	movs	r2, #0
 800560a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2200      	movs	r2, #0
 8005610:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005618:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	3212      	adds	r2, #18
 800563a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d80c      	bhi.n	800565e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6919      	ldr	r1, [r3, #16]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	440b      	add	r3, r1
 8005656:	461a      	mov	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	60da      	str	r2, [r3, #12]
 800565c:	e004      	b.n	8005668 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	461a      	mov	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3301      	adds	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d9b3      	bls.n	80055dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800569e:	60da      	str	r2, [r3, #12]
}
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b089      	sub	sp, #36	@ 0x24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	e175      	b.n	80059b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80056cc:	2201      	movs	r2, #1
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4013      	ands	r3, r2
 80056de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	f040 8164 	bne.w	80059b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d005      	beq.n	8005702 <HAL_GPIO_Init+0x56>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d130      	bne.n	8005764 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	2203      	movs	r2, #3
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	43db      	mvns	r3, r3
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	4013      	ands	r3, r2
 8005718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4313      	orrs	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005738:	2201      	movs	r2, #1
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43db      	mvns	r3, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	f003 0201 	and.w	r2, r3, #1
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4313      	orrs	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	2b03      	cmp	r3, #3
 800576e:	d017      	beq.n	80057a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	2203      	movs	r2, #3
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	43db      	mvns	r3, r3
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	4013      	ands	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4313      	orrs	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 0303 	and.w	r3, r3, #3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d123      	bne.n	80057f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	08da      	lsrs	r2, r3, #3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3208      	adds	r2, #8
 80057b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	220f      	movs	r2, #15
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	43db      	mvns	r3, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	08da      	lsrs	r2, r3, #3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3208      	adds	r2, #8
 80057ee:	69b9      	ldr	r1, [r7, #24]
 80057f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	2203      	movs	r2, #3
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 0203 	and.w	r2, r3, #3
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	4313      	orrs	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 80be 	beq.w	80059b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005836:	4b66      	ldr	r3, [pc, #408]	@ (80059d0 <HAL_GPIO_Init+0x324>)
 8005838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583a:	4a65      	ldr	r2, [pc, #404]	@ (80059d0 <HAL_GPIO_Init+0x324>)
 800583c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005840:	6453      	str	r3, [r2, #68]	@ 0x44
 8005842:	4b63      	ldr	r3, [pc, #396]	@ (80059d0 <HAL_GPIO_Init+0x324>)
 8005844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800584e:	4a61      	ldr	r2, [pc, #388]	@ (80059d4 <HAL_GPIO_Init+0x328>)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	089b      	lsrs	r3, r3, #2
 8005854:	3302      	adds	r3, #2
 8005856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	220f      	movs	r2, #15
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	43db      	mvns	r3, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4013      	ands	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a58      	ldr	r2, [pc, #352]	@ (80059d8 <HAL_GPIO_Init+0x32c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d037      	beq.n	80058ea <HAL_GPIO_Init+0x23e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a57      	ldr	r2, [pc, #348]	@ (80059dc <HAL_GPIO_Init+0x330>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d031      	beq.n	80058e6 <HAL_GPIO_Init+0x23a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a56      	ldr	r2, [pc, #344]	@ (80059e0 <HAL_GPIO_Init+0x334>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d02b      	beq.n	80058e2 <HAL_GPIO_Init+0x236>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a55      	ldr	r2, [pc, #340]	@ (80059e4 <HAL_GPIO_Init+0x338>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d025      	beq.n	80058de <HAL_GPIO_Init+0x232>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a54      	ldr	r2, [pc, #336]	@ (80059e8 <HAL_GPIO_Init+0x33c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01f      	beq.n	80058da <HAL_GPIO_Init+0x22e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a53      	ldr	r2, [pc, #332]	@ (80059ec <HAL_GPIO_Init+0x340>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d019      	beq.n	80058d6 <HAL_GPIO_Init+0x22a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a52      	ldr	r2, [pc, #328]	@ (80059f0 <HAL_GPIO_Init+0x344>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <HAL_GPIO_Init+0x226>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a51      	ldr	r2, [pc, #324]	@ (80059f4 <HAL_GPIO_Init+0x348>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00d      	beq.n	80058ce <HAL_GPIO_Init+0x222>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a50      	ldr	r2, [pc, #320]	@ (80059f8 <HAL_GPIO_Init+0x34c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <HAL_GPIO_Init+0x21e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a4f      	ldr	r2, [pc, #316]	@ (80059fc <HAL_GPIO_Init+0x350>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d101      	bne.n	80058c6 <HAL_GPIO_Init+0x21a>
 80058c2:	2309      	movs	r3, #9
 80058c4:	e012      	b.n	80058ec <HAL_GPIO_Init+0x240>
 80058c6:	230a      	movs	r3, #10
 80058c8:	e010      	b.n	80058ec <HAL_GPIO_Init+0x240>
 80058ca:	2308      	movs	r3, #8
 80058cc:	e00e      	b.n	80058ec <HAL_GPIO_Init+0x240>
 80058ce:	2307      	movs	r3, #7
 80058d0:	e00c      	b.n	80058ec <HAL_GPIO_Init+0x240>
 80058d2:	2306      	movs	r3, #6
 80058d4:	e00a      	b.n	80058ec <HAL_GPIO_Init+0x240>
 80058d6:	2305      	movs	r3, #5
 80058d8:	e008      	b.n	80058ec <HAL_GPIO_Init+0x240>
 80058da:	2304      	movs	r3, #4
 80058dc:	e006      	b.n	80058ec <HAL_GPIO_Init+0x240>
 80058de:	2303      	movs	r3, #3
 80058e0:	e004      	b.n	80058ec <HAL_GPIO_Init+0x240>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e002      	b.n	80058ec <HAL_GPIO_Init+0x240>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <HAL_GPIO_Init+0x240>
 80058ea:	2300      	movs	r3, #0
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	f002 0203 	and.w	r2, r2, #3
 80058f2:	0092      	lsls	r2, r2, #2
 80058f4:	4093      	lsls	r3, r2
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80058fc:	4935      	ldr	r1, [pc, #212]	@ (80059d4 <HAL_GPIO_Init+0x328>)
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	089b      	lsrs	r3, r3, #2
 8005902:	3302      	adds	r3, #2
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800590a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a00 <HAL_GPIO_Init+0x354>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	43db      	mvns	r3, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4013      	ands	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800592e:	4a34      	ldr	r2, [pc, #208]	@ (8005a00 <HAL_GPIO_Init+0x354>)
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005934:	4b32      	ldr	r3, [pc, #200]	@ (8005a00 <HAL_GPIO_Init+0x354>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	43db      	mvns	r3, r3
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4013      	ands	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005958:	4a29      	ldr	r2, [pc, #164]	@ (8005a00 <HAL_GPIO_Init+0x354>)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800595e:	4b28      	ldr	r3, [pc, #160]	@ (8005a00 <HAL_GPIO_Init+0x354>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	43db      	mvns	r3, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4013      	ands	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005982:	4a1f      	ldr	r2, [pc, #124]	@ (8005a00 <HAL_GPIO_Init+0x354>)
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005988:	4b1d      	ldr	r3, [pc, #116]	@ (8005a00 <HAL_GPIO_Init+0x354>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	43db      	mvns	r3, r3
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	4013      	ands	r3, r2
 8005996:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059ac:	4a14      	ldr	r2, [pc, #80]	@ (8005a00 <HAL_GPIO_Init+0x354>)
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3301      	adds	r3, #1
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2b0f      	cmp	r3, #15
 80059bc:	f67f ae86 	bls.w	80056cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	3724      	adds	r7, #36	@ 0x24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40023800 	.word	0x40023800
 80059d4:	40013800 	.word	0x40013800
 80059d8:	40020000 	.word	0x40020000
 80059dc:	40020400 	.word	0x40020400
 80059e0:	40020800 	.word	0x40020800
 80059e4:	40020c00 	.word	0x40020c00
 80059e8:	40021000 	.word	0x40021000
 80059ec:	40021400 	.word	0x40021400
 80059f0:	40021800 	.word	0x40021800
 80059f4:	40021c00 	.word	0x40021c00
 80059f8:	40022000 	.word	0x40022000
 80059fc:	40022400 	.word	0x40022400
 8005a00:	40013c00 	.word	0x40013c00

08005a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	887b      	ldrh	r3, [r7, #2]
 8005a16:	4013      	ands	r3, r2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
 8005a20:	e001      	b.n	8005a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a22:	2300      	movs	r3, #0
 8005a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	807b      	strh	r3, [r7, #2]
 8005a40:	4613      	mov	r3, r2
 8005a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a44:	787b      	ldrb	r3, [r7, #1]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a4a:	887a      	ldrh	r2, [r7, #2]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a50:	e003      	b.n	8005a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a52:	887b      	ldrh	r3, [r7, #2]
 8005a54:	041a      	lsls	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	619a      	str	r2, [r3, #24]
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e08b      	b.n	8005b92 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fb fdec 	bl	800166c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2224      	movs	r2, #36	@ 0x24
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ab8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ac8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d107      	bne.n	8005ae2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ade:	609a      	str	r2, [r3, #8]
 8005ae0:	e006      	b.n	8005af0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d108      	bne.n	8005b0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	e007      	b.n	8005b1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6859      	ldr	r1, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	4b1d      	ldr	r3, [pc, #116]	@ (8005b9c <HAL_I2C_Init+0x134>)
 8005b26:	430b      	orrs	r3, r1
 8005b28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691a      	ldr	r2, [r3, #16]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69d9      	ldr	r1, [r3, #28]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	02008000 	.word	0x02008000

08005ba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d138      	bne.n	8005c28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e032      	b.n	8005c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2224      	movs	r2, #36	@ 0x24
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005bf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e000      	b.n	8005c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d139      	bne.n	8005cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e033      	b.n	8005cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2224      	movs	r2, #36	@ 0x24
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0201 	bic.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e000      	b.n	8005cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cc0:	2302      	movs	r3, #2
  }
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e0bf      	b.n	8005e62 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fb fde2 	bl	80018c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005d12:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6999      	ldr	r1, [r3, #24]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d28:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6899      	ldr	r1, [r3, #8]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b4a      	ldr	r3, [pc, #296]	@ (8005e6c <HAL_LTDC_Init+0x19c>)
 8005d44:	400b      	ands	r3, r1
 8005d46:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	041b      	lsls	r3, r3, #16
 8005d4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6899      	ldr	r1, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68d9      	ldr	r1, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b3e      	ldr	r3, [pc, #248]	@ (8005e6c <HAL_LTDC_Init+0x19c>)
 8005d72:	400b      	ands	r3, r1
 8005d74:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68d9      	ldr	r1, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1a      	ldr	r2, [r3, #32]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6919      	ldr	r1, [r3, #16]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b33      	ldr	r3, [pc, #204]	@ (8005e6c <HAL_LTDC_Init+0x19c>)
 8005da0:	400b      	ands	r3, r1
 8005da2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	041b      	lsls	r3, r3, #16
 8005daa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6919      	ldr	r1, [r3, #16]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6959      	ldr	r1, [r3, #20]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b27      	ldr	r3, [pc, #156]	@ (8005e6c <HAL_LTDC_Init+0x19c>)
 8005dce:	400b      	ands	r3, r1
 8005dd0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6959      	ldr	r1, [r3, #20]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005e00:	041b      	lsls	r3, r3, #16
 8005e02:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005e12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0206 	orr.w	r2, r2, #6
 8005e3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	f000f800 	.word	0xf000f800

08005e70 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e86:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d023      	beq.n	8005eda <HAL_LTDC_IRQHandler+0x6a>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01e      	beq.n	8005eda <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0204 	bic.w	r2, r2, #4
 8005eaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2204      	movs	r2, #4
 8005eb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005eba:	f043 0201 	orr.w	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f86f 	bl	8005fb8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d023      	beq.n	8005f2c <HAL_LTDC_IRQHandler+0xbc>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01e      	beq.n	8005f2c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0202 	bic.w	r2, r2, #2
 8005efc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2202      	movs	r2, #2
 8005f04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f0c:	f043 0202 	orr.w	r2, r3, #2
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2204      	movs	r2, #4
 8005f1a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f846 	bl	8005fb8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d01b      	beq.n	8005f6e <HAL_LTDC_IRQHandler+0xfe>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d016      	beq.n	8005f6e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0201 	bic.w	r2, r2, #1
 8005f4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2201      	movs	r2, #1
 8005f56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f82f 	bl	8005fcc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01b      	beq.n	8005fb0 <HAL_LTDC_IRQHandler+0x140>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d016      	beq.n	8005fb0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0208 	bic.w	r2, r2, #8
 8005f90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2208      	movs	r2, #8
 8005f98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f818 	bl	8005fe0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ff4:	b5b0      	push	{r4, r5, r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_LTDC_ConfigLayer+0x1a>
 800600a:	2302      	movs	r3, #2
 800600c:	e02c      	b.n	8006068 <HAL_LTDC_ConfigLayer+0x74>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2202      	movs	r2, #2
 800601a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2134      	movs	r1, #52	@ 0x34
 8006024:	fb01 f303 	mul.w	r3, r1, r3
 8006028:	4413      	add	r3, r2
 800602a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4614      	mov	r4, r2
 8006032:	461d      	mov	r5, r3
 8006034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800603a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800603c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800603e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f811 	bl	8006070 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2201      	movs	r2, #1
 8006054:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bdb0      	pop	{r4, r5, r7, pc}

08006070 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006070:	b480      	push	{r7}
 8006072:	b089      	sub	sp, #36	@ 0x24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	0c1b      	lsrs	r3, r3, #16
 8006088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608c:	4413      	add	r3, r2
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	4413      	add	r3, r2
 800609e:	3384      	adds	r3, #132	@ 0x84
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	6812      	ldr	r2, [r2, #0]
 80060a6:	4611      	mov	r1, r2
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	01d2      	lsls	r2, r2, #7
 80060ac:	440a      	add	r2, r1
 80060ae:	3284      	adds	r2, #132	@ 0x84
 80060b0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80060b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	0c1b      	lsrs	r3, r3, #16
 80060c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80060c6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80060c8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4619      	mov	r1, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	01db      	lsls	r3, r3, #7
 80060d4:	440b      	add	r3, r1
 80060d6:	3384      	adds	r3, #132	@ 0x84
 80060d8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80060de:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ee:	4413      	add	r3, r2
 80060f0:	041b      	lsls	r3, r3, #16
 80060f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	01db      	lsls	r3, r3, #7
 80060fe:	4413      	add	r3, r2
 8006100:	3384      	adds	r3, #132	@ 0x84
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	4611      	mov	r1, r2
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	01d2      	lsls	r2, r2, #7
 800610e:	440a      	add	r2, r1
 8006110:	3284      	adds	r2, #132	@ 0x84
 8006112:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006116:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006126:	4413      	add	r3, r2
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4619      	mov	r1, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	01db      	lsls	r3, r3, #7
 8006134:	440b      	add	r3, r1
 8006136:	3384      	adds	r3, #132	@ 0x84
 8006138:	4619      	mov	r1, r3
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4313      	orrs	r3, r2
 800613e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	01db      	lsls	r3, r3, #7
 800614a:	4413      	add	r3, r2
 800614c:	3384      	adds	r3, #132	@ 0x84
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	4611      	mov	r1, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	01d2      	lsls	r2, r2, #7
 800615a:	440a      	add	r2, r1
 800615c:	3284      	adds	r2, #132	@ 0x84
 800615e:	f023 0307 	bic.w	r3, r3, #7
 8006162:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	01db      	lsls	r3, r3, #7
 800616e:	4413      	add	r3, r2
 8006170:	3384      	adds	r3, #132	@ 0x84
 8006172:	461a      	mov	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800618a:	041b      	lsls	r3, r3, #16
 800618c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	061b      	lsls	r3, r3, #24
 8006194:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	01db      	lsls	r3, r3, #7
 80061a0:	4413      	add	r3, r2
 80061a2:	3384      	adds	r3, #132	@ 0x84
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	01db      	lsls	r3, r3, #7
 80061b0:	4413      	add	r3, r2
 80061b2:	3384      	adds	r3, #132	@ 0x84
 80061b4:	461a      	mov	r2, r3
 80061b6:	2300      	movs	r3, #0
 80061b8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80061c0:	461a      	mov	r2, r3
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	431a      	orrs	r2, r3
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	431a      	orrs	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4619      	mov	r1, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	01db      	lsls	r3, r3, #7
 80061d4:	440b      	add	r3, r1
 80061d6:	3384      	adds	r3, #132	@ 0x84
 80061d8:	4619      	mov	r1, r3
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	01db      	lsls	r3, r3, #7
 80061ea:	4413      	add	r3, r2
 80061ec:	3384      	adds	r3, #132	@ 0x84
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	4611      	mov	r1, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	01d2      	lsls	r2, r2, #7
 80061fa:	440a      	add	r2, r1
 80061fc:	3284      	adds	r2, #132	@ 0x84
 80061fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006202:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	461a      	mov	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	01db      	lsls	r3, r3, #7
 800620e:	4413      	add	r3, r2
 8006210:	3384      	adds	r3, #132	@ 0x84
 8006212:	461a      	mov	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	01db      	lsls	r3, r3, #7
 8006224:	4413      	add	r3, r2
 8006226:	3384      	adds	r3, #132	@ 0x84
 8006228:	69da      	ldr	r2, [r3, #28]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4619      	mov	r1, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	01db      	lsls	r3, r3, #7
 8006234:	440b      	add	r3, r1
 8006236:	3384      	adds	r3, #132	@ 0x84
 8006238:	4619      	mov	r1, r3
 800623a:	4b58      	ldr	r3, [pc, #352]	@ (800639c <LTDC_SetConfig+0x32c>)
 800623c:	4013      	ands	r3, r2
 800623e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	68f9      	ldr	r1, [r7, #12]
 800624a:	6809      	ldr	r1, [r1, #0]
 800624c:	4608      	mov	r0, r1
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	01c9      	lsls	r1, r1, #7
 8006252:	4401      	add	r1, r0
 8006254:	3184      	adds	r1, #132	@ 0x84
 8006256:	4313      	orrs	r3, r2
 8006258:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	01db      	lsls	r3, r3, #7
 8006264:	4413      	add	r3, r2
 8006266:	3384      	adds	r3, #132	@ 0x84
 8006268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	01db      	lsls	r3, r3, #7
 8006274:	4413      	add	r3, r2
 8006276:	3384      	adds	r3, #132	@ 0x84
 8006278:	461a      	mov	r2, r3
 800627a:	2300      	movs	r3, #0
 800627c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	01db      	lsls	r3, r3, #7
 8006288:	4413      	add	r3, r2
 800628a:	3384      	adds	r3, #132	@ 0x84
 800628c:	461a      	mov	r2, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006292:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d102      	bne.n	80062a2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800629c:	2304      	movs	r3, #4
 800629e:	61fb      	str	r3, [r7, #28]
 80062a0:	e01b      	b.n	80062da <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d102      	bne.n	80062b0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80062aa:	2303      	movs	r3, #3
 80062ac:	61fb      	str	r3, [r7, #28]
 80062ae:	e014      	b.n	80062da <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d00b      	beq.n	80062d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d007      	beq.n	80062d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d003      	beq.n	80062d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80062cc:	2b07      	cmp	r3, #7
 80062ce:	d102      	bne.n	80062d6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80062d0:	2302      	movs	r3, #2
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	e001      	b.n	80062da <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80062d6:	2301      	movs	r3, #1
 80062d8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	4413      	add	r3, r2
 80062e6:	3384      	adds	r3, #132	@ 0x84
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	4611      	mov	r1, r2
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	01d2      	lsls	r2, r2, #7
 80062f4:	440a      	add	r2, r1
 80062f6:	3284      	adds	r2, #132	@ 0x84
 80062f8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80062fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	fb02 f303 	mul.w	r3, r2, r3
 8006308:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6859      	ldr	r1, [r3, #4]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	1acb      	subs	r3, r1, r3
 8006314:	69f9      	ldr	r1, [r7, #28]
 8006316:	fb01 f303 	mul.w	r3, r1, r3
 800631a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800631c:	68f9      	ldr	r1, [r7, #12]
 800631e:	6809      	ldr	r1, [r1, #0]
 8006320:	4608      	mov	r0, r1
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	01c9      	lsls	r1, r1, #7
 8006326:	4401      	add	r1, r0
 8006328:	3184      	adds	r1, #132	@ 0x84
 800632a:	4313      	orrs	r3, r2
 800632c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	01db      	lsls	r3, r3, #7
 8006338:	4413      	add	r3, r2
 800633a:	3384      	adds	r3, #132	@ 0x84
 800633c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4619      	mov	r1, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	01db      	lsls	r3, r3, #7
 8006348:	440b      	add	r3, r1
 800634a:	3384      	adds	r3, #132	@ 0x84
 800634c:	4619      	mov	r1, r3
 800634e:	4b14      	ldr	r3, [pc, #80]	@ (80063a0 <LTDC_SetConfig+0x330>)
 8006350:	4013      	ands	r3, r2
 8006352:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	01db      	lsls	r3, r3, #7
 800635e:	4413      	add	r3, r2
 8006360:	3384      	adds	r3, #132	@ 0x84
 8006362:	461a      	mov	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	01db      	lsls	r3, r3, #7
 8006374:	4413      	add	r3, r2
 8006376:	3384      	adds	r3, #132	@ 0x84
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	4611      	mov	r1, r2
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	01d2      	lsls	r2, r2, #7
 8006384:	440a      	add	r2, r1
 8006386:	3284      	adds	r2, #132	@ 0x84
 8006388:	f043 0301 	orr.w	r3, r3, #1
 800638c:	6013      	str	r3, [r2, #0]
}
 800638e:	bf00      	nop
 8006390:	3724      	adds	r7, #36	@ 0x24
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	fffff8f8 	.word	0xfffff8f8
 80063a0:	fffff800 	.word	0xfffff800

080063a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063a8:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a04      	ldr	r2, [pc, #16]	@ (80063c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063b2:	6013      	str	r3, [r2, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40007000 	.word	0x40007000

080063c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80063ce:	4b23      	ldr	r3, [pc, #140]	@ (800645c <HAL_PWREx_EnableOverDrive+0x98>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	4a22      	ldr	r2, [pc, #136]	@ (800645c <HAL_PWREx_EnableOverDrive+0x98>)
 80063d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80063da:	4b20      	ldr	r3, [pc, #128]	@ (800645c <HAL_PWREx_EnableOverDrive+0x98>)
 80063dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80063e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006460 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006460 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063f2:	f7fd fb0b 	bl	8003a0c <HAL_GetTick>
 80063f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063f8:	e009      	b.n	800640e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063fa:	f7fd fb07 	bl	8003a0c <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006408:	d901      	bls.n	800640e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e022      	b.n	8006454 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800640e:	4b14      	ldr	r3, [pc, #80]	@ (8006460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800641a:	d1ee      	bne.n	80063fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800641c:	4b10      	ldr	r3, [pc, #64]	@ (8006460 <HAL_PWREx_EnableOverDrive+0x9c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a0f      	ldr	r2, [pc, #60]	@ (8006460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006426:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006428:	f7fd faf0 	bl	8003a0c <HAL_GetTick>
 800642c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800642e:	e009      	b.n	8006444 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006430:	f7fd faec 	bl	8003a0c <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800643e:	d901      	bls.n	8006444 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e007      	b.n	8006454 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006444:	4b06      	ldr	r3, [pc, #24]	@ (8006460 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006450:	d1ee      	bne.n	8006430 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40023800 	.word	0x40023800
 8006460:	40007000 	.word	0x40007000

08006464 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af02      	add	r7, sp, #8
 800646a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800646c:	f7fd face 	bl	8003a0c <HAL_GetTick>
 8006470:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e067      	b.n	800654c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10b      	bne.n	80064a0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fb fc0b 	bl	8001cac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006496:	f241 3188 	movw	r1, #5000	@ 0x1388
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f85e 	bl	800655c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	021a      	lsls	r2, r3, #8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	2120      	movs	r1, #32
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f856 	bl	8006578 <QSPI_WaitFlagStateUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80064d0:	7afb      	ldrb	r3, [r7, #11]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d135      	bne.n	8006542 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006554 <HAL_QSPI_Init+0xf0>)
 80064de:	4013      	ands	r3, r2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6852      	ldr	r2, [r2, #4]
 80064e4:	0611      	lsls	r1, r2, #24
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68d2      	ldr	r2, [r2, #12]
 80064ea:	4311      	orrs	r1, r2
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	69d2      	ldr	r2, [r2, #28]
 80064f0:	4311      	orrs	r1, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6a12      	ldr	r2, [r2, #32]
 80064f6:	4311      	orrs	r1, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	430b      	orrs	r3, r1
 80064fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	4b14      	ldr	r3, [pc, #80]	@ (8006558 <HAL_QSPI_Init+0xf4>)
 8006508:	4013      	ands	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6912      	ldr	r2, [r2, #16]
 800650e:	0411      	lsls	r1, r2, #16
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6952      	ldr	r2, [r2, #20]
 8006514:	4311      	orrs	r1, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6992      	ldr	r2, [r2, #24]
 800651a:	4311      	orrs	r1, r2
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	430b      	orrs	r3, r1
 8006522:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800654a:	7afb      	ldrb	r3, [r7, #11]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	00ffff2f 	.word	0x00ffff2f
 8006558:	ffe0f8fe 	.word	0xffe0f8fe

0800655c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	4613      	mov	r3, r2
 8006586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006588:	e01a      	b.n	80065c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d016      	beq.n	80065c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006592:	f7fd fa3b 	bl	8003a0c <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d302      	bcc.n	80065a8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10b      	bne.n	80065c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2204      	movs	r2, #4
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b4:	f043 0201 	orr.w	r2, r3, #1
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e00e      	b.n	80065de <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	4013      	ands	r3, r2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bf14      	ite	ne
 80065ce:	2301      	movne	r3, #1
 80065d0:	2300      	moveq	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d1d6      	bne.n	800658a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80065f0:	2300      	movs	r3, #0
 80065f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e291      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 8087 	beq.w	800671a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800660c:	4b96      	ldr	r3, [pc, #600]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 030c 	and.w	r3, r3, #12
 8006614:	2b04      	cmp	r3, #4
 8006616:	d00c      	beq.n	8006632 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006618:	4b93      	ldr	r3, [pc, #588]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 030c 	and.w	r3, r3, #12
 8006620:	2b08      	cmp	r3, #8
 8006622:	d112      	bne.n	800664a <HAL_RCC_OscConfig+0x62>
 8006624:	4b90      	ldr	r3, [pc, #576]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800662c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006630:	d10b      	bne.n	800664a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006632:	4b8d      	ldr	r3, [pc, #564]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d06c      	beq.n	8006718 <HAL_RCC_OscConfig+0x130>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d168      	bne.n	8006718 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e26b      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006652:	d106      	bne.n	8006662 <HAL_RCC_OscConfig+0x7a>
 8006654:	4b84      	ldr	r3, [pc, #528]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a83      	ldr	r2, [pc, #524]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 800665a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e02e      	b.n	80066c0 <HAL_RCC_OscConfig+0xd8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10c      	bne.n	8006684 <HAL_RCC_OscConfig+0x9c>
 800666a:	4b7f      	ldr	r3, [pc, #508]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a7e      	ldr	r2, [pc, #504]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	4b7c      	ldr	r3, [pc, #496]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a7b      	ldr	r2, [pc, #492]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 800667c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	e01d      	b.n	80066c0 <HAL_RCC_OscConfig+0xd8>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800668c:	d10c      	bne.n	80066a8 <HAL_RCC_OscConfig+0xc0>
 800668e:	4b76      	ldr	r3, [pc, #472]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a75      	ldr	r2, [pc, #468]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	4b73      	ldr	r3, [pc, #460]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a72      	ldr	r2, [pc, #456]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80066a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	e00b      	b.n	80066c0 <HAL_RCC_OscConfig+0xd8>
 80066a8:	4b6f      	ldr	r3, [pc, #444]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a6e      	ldr	r2, [pc, #440]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80066ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	4b6c      	ldr	r3, [pc, #432]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a6b      	ldr	r2, [pc, #428]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80066ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d013      	beq.n	80066f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c8:	f7fd f9a0 	bl	8003a0c <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066d0:	f7fd f99c 	bl	8003a0c <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b64      	cmp	r3, #100	@ 0x64
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e21f      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e2:	4b61      	ldr	r3, [pc, #388]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f0      	beq.n	80066d0 <HAL_RCC_OscConfig+0xe8>
 80066ee:	e014      	b.n	800671a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f0:	f7fd f98c 	bl	8003a0c <HAL_GetTick>
 80066f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066f6:	e008      	b.n	800670a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066f8:	f7fd f988 	bl	8003a0c <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b64      	cmp	r3, #100	@ 0x64
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e20b      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800670a:	4b57      	ldr	r3, [pc, #348]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1f0      	bne.n	80066f8 <HAL_RCC_OscConfig+0x110>
 8006716:	e000      	b.n	800671a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d069      	beq.n	80067fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006726:	4b50      	ldr	r3, [pc, #320]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 030c 	and.w	r3, r3, #12
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00b      	beq.n	800674a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006732:	4b4d      	ldr	r3, [pc, #308]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 030c 	and.w	r3, r3, #12
 800673a:	2b08      	cmp	r3, #8
 800673c:	d11c      	bne.n	8006778 <HAL_RCC_OscConfig+0x190>
 800673e:	4b4a      	ldr	r3, [pc, #296]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d116      	bne.n	8006778 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800674a:	4b47      	ldr	r3, [pc, #284]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <HAL_RCC_OscConfig+0x17a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d001      	beq.n	8006762 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e1df      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006762:	4b41      	ldr	r3, [pc, #260]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	493d      	ldr	r1, [pc, #244]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006772:	4313      	orrs	r3, r2
 8006774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006776:	e040      	b.n	80067fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d023      	beq.n	80067c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006780:	4b39      	ldr	r3, [pc, #228]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a38      	ldr	r2, [pc, #224]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678c:	f7fd f93e 	bl	8003a0c <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006794:	f7fd f93a 	bl	8003a0c <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e1bd      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a6:	4b30      	ldr	r3, [pc, #192]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	4929      	ldr	r1, [pc, #164]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	600b      	str	r3, [r1, #0]
 80067c6:	e018      	b.n	80067fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067c8:	4b27      	ldr	r3, [pc, #156]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a26      	ldr	r2, [pc, #152]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80067ce:	f023 0301 	bic.w	r3, r3, #1
 80067d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d4:	f7fd f91a 	bl	8003a0c <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067da:	e008      	b.n	80067ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067dc:	f7fd f916 	bl	8003a0c <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e199      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1f0      	bne.n	80067dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d038      	beq.n	8006878 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d019      	beq.n	8006842 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800680e:	4b16      	ldr	r3, [pc, #88]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006812:	4a15      	ldr	r2, [pc, #84]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681a:	f7fd f8f7 	bl	8003a0c <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006822:	f7fd f8f3 	bl	8003a0c <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e176      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006834:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0f0      	beq.n	8006822 <HAL_RCC_OscConfig+0x23a>
 8006840:	e01a      	b.n	8006878 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006842:	4b09      	ldr	r3, [pc, #36]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006846:	4a08      	ldr	r2, [pc, #32]	@ (8006868 <HAL_RCC_OscConfig+0x280>)
 8006848:	f023 0301 	bic.w	r3, r3, #1
 800684c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684e:	f7fd f8dd 	bl	8003a0c <HAL_GetTick>
 8006852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006854:	e00a      	b.n	800686c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006856:	f7fd f8d9 	bl	8003a0c <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d903      	bls.n	800686c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e15c      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
 8006868:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800686c:	4b91      	ldr	r3, [pc, #580]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 800686e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1ee      	bne.n	8006856 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 80a4 	beq.w	80069ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006886:	4b8b      	ldr	r3, [pc, #556]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10d      	bne.n	80068ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006892:	4b88      	ldr	r3, [pc, #544]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006896:	4a87      	ldr	r2, [pc, #540]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800689c:	6413      	str	r3, [r2, #64]	@ 0x40
 800689e:	4b85      	ldr	r3, [pc, #532]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 80068a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ae:	4b82      	ldr	r3, [pc, #520]	@ (8006ab8 <HAL_RCC_OscConfig+0x4d0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d118      	bne.n	80068ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80068ba:	4b7f      	ldr	r3, [pc, #508]	@ (8006ab8 <HAL_RCC_OscConfig+0x4d0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a7e      	ldr	r2, [pc, #504]	@ (8006ab8 <HAL_RCC_OscConfig+0x4d0>)
 80068c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068c6:	f7fd f8a1 	bl	8003a0c <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ce:	f7fd f89d 	bl	8003a0c <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b64      	cmp	r3, #100	@ 0x64
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e120      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068e0:	4b75      	ldr	r3, [pc, #468]	@ (8006ab8 <HAL_RCC_OscConfig+0x4d0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0f0      	beq.n	80068ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d106      	bne.n	8006902 <HAL_RCC_OscConfig+0x31a>
 80068f4:	4b6f      	ldr	r3, [pc, #444]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 80068f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f8:	4a6e      	ldr	r2, [pc, #440]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006900:	e02d      	b.n	800695e <HAL_RCC_OscConfig+0x376>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10c      	bne.n	8006924 <HAL_RCC_OscConfig+0x33c>
 800690a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690e:	4a69      	ldr	r2, [pc, #420]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	6713      	str	r3, [r2, #112]	@ 0x70
 8006916:	4b67      	ldr	r3, [pc, #412]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691a:	4a66      	ldr	r2, [pc, #408]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 800691c:	f023 0304 	bic.w	r3, r3, #4
 8006920:	6713      	str	r3, [r2, #112]	@ 0x70
 8006922:	e01c      	b.n	800695e <HAL_RCC_OscConfig+0x376>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b05      	cmp	r3, #5
 800692a:	d10c      	bne.n	8006946 <HAL_RCC_OscConfig+0x35e>
 800692c:	4b61      	ldr	r3, [pc, #388]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 800692e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006930:	4a60      	ldr	r2, [pc, #384]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006932:	f043 0304 	orr.w	r3, r3, #4
 8006936:	6713      	str	r3, [r2, #112]	@ 0x70
 8006938:	4b5e      	ldr	r3, [pc, #376]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693c:	4a5d      	ldr	r2, [pc, #372]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	6713      	str	r3, [r2, #112]	@ 0x70
 8006944:	e00b      	b.n	800695e <HAL_RCC_OscConfig+0x376>
 8006946:	4b5b      	ldr	r3, [pc, #364]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694a:	4a5a      	ldr	r2, [pc, #360]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	6713      	str	r3, [r2, #112]	@ 0x70
 8006952:	4b58      	ldr	r3, [pc, #352]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006956:	4a57      	ldr	r2, [pc, #348]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006958:	f023 0304 	bic.w	r3, r3, #4
 800695c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d015      	beq.n	8006992 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006966:	f7fd f851 	bl	8003a0c <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800696c:	e00a      	b.n	8006984 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800696e:	f7fd f84d 	bl	8003a0c <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800697c:	4293      	cmp	r3, r2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e0ce      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006984:	4b4b      	ldr	r3, [pc, #300]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0ee      	beq.n	800696e <HAL_RCC_OscConfig+0x386>
 8006990:	e014      	b.n	80069bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006992:	f7fd f83b 	bl	8003a0c <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006998:	e00a      	b.n	80069b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800699a:	f7fd f837 	bl	8003a0c <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e0b8      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069b0:	4b40      	ldr	r3, [pc, #256]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 80069b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1ee      	bne.n	800699a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d105      	bne.n	80069ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069c2:	4b3c      	ldr	r3, [pc, #240]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 80069c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c6:	4a3b      	ldr	r2, [pc, #236]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 80069c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80a4 	beq.w	8006b20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069d8:	4b36      	ldr	r3, [pc, #216]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 030c 	and.w	r3, r3, #12
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d06b      	beq.n	8006abc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d149      	bne.n	8006a80 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ec:	4b31      	ldr	r3, [pc, #196]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a30      	ldr	r2, [pc, #192]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 80069f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fd f808 	bl	8003a0c <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fd f804 	bl	8003a0c <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e087      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a12:	4b28      	ldr	r3, [pc, #160]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f0      	bne.n	8006a00 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	69da      	ldr	r2, [r3, #28]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2c:	019b      	lsls	r3, r3, #6
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	3b01      	subs	r3, #1
 8006a38:	041b      	lsls	r3, r3, #16
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a40:	061b      	lsls	r3, r3, #24
 8006a42:	4313      	orrs	r3, r2
 8006a44:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006a46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a4a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a4c:	4b19      	ldr	r3, [pc, #100]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a18      	ldr	r2, [pc, #96]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a58:	f7fc ffd8 	bl	8003a0c <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a60:	f7fc ffd4 	bl	8003a0c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e057      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a72:	4b10      	ldr	r3, [pc, #64]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0f0      	beq.n	8006a60 <HAL_RCC_OscConfig+0x478>
 8006a7e:	e04f      	b.n	8006b20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a80:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a0b      	ldr	r2, [pc, #44]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006a86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8c:	f7fc ffbe 	bl	8003a0c <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a94:	f7fc ffba 	bl	8003a0c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e03d      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa6:	4b03      	ldr	r3, [pc, #12]	@ (8006ab4 <HAL_RCC_OscConfig+0x4cc>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f0      	bne.n	8006a94 <HAL_RCC_OscConfig+0x4ac>
 8006ab2:	e035      	b.n	8006b20 <HAL_RCC_OscConfig+0x538>
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006abc:	4b1b      	ldr	r3, [pc, #108]	@ (8006b2c <HAL_RCC_OscConfig+0x544>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d028      	beq.n	8006b1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d121      	bne.n	8006b1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d11a      	bne.n	8006b1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006aec:	4013      	ands	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006af2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d111      	bne.n	8006b1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b02:	085b      	lsrs	r3, r3, #1
 8006b04:	3b01      	subs	r3, #1
 8006b06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d107      	bne.n	8006b1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d001      	beq.n	8006b20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e000      	b.n	8006b22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40023800 	.word	0x40023800

08006b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e0d0      	b.n	8006cea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b48:	4b6a      	ldr	r3, [pc, #424]	@ (8006cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d910      	bls.n	8006b78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b56:	4b67      	ldr	r3, [pc, #412]	@ (8006cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f023 020f 	bic.w	r2, r3, #15
 8006b5e:	4965      	ldr	r1, [pc, #404]	@ (8006cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b66:	4b63      	ldr	r3, [pc, #396]	@ (8006cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 030f 	and.w	r3, r3, #15
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d001      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0b8      	b.n	8006cea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d020      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d005      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b90:	4b59      	ldr	r3, [pc, #356]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	4a58      	ldr	r2, [pc, #352]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006b96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ba8:	4b53      	ldr	r3, [pc, #332]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	4a52      	ldr	r2, [pc, #328]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006bae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bb4:	4b50      	ldr	r3, [pc, #320]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	494d      	ldr	r1, [pc, #308]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d040      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d107      	bne.n	8006bea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bda:	4b47      	ldr	r3, [pc, #284]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d115      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e07f      	b.n	8006cea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf2:	4b41      	ldr	r3, [pc, #260]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e073      	b.n	8006cea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c02:	4b3d      	ldr	r3, [pc, #244]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e06b      	b.n	8006cea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c12:	4b39      	ldr	r3, [pc, #228]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f023 0203 	bic.w	r2, r3, #3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4936      	ldr	r1, [pc, #216]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c24:	f7fc fef2 	bl	8003a0c <HAL_GetTick>
 8006c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c2a:	e00a      	b.n	8006c42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c2c:	f7fc feee 	bl	8003a0c <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e053      	b.n	8006cea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c42:	4b2d      	ldr	r3, [pc, #180]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 020c 	and.w	r2, r3, #12
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d1eb      	bne.n	8006c2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c54:	4b27      	ldr	r3, [pc, #156]	@ (8006cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d210      	bcs.n	8006c84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c62:	4b24      	ldr	r3, [pc, #144]	@ (8006cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f023 020f 	bic.w	r2, r3, #15
 8006c6a:	4922      	ldr	r1, [pc, #136]	@ (8006cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c72:	4b20      	ldr	r3, [pc, #128]	@ (8006cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 030f 	and.w	r3, r3, #15
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d001      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e032      	b.n	8006cea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d008      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c90:	4b19      	ldr	r3, [pc, #100]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	4916      	ldr	r1, [pc, #88]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006cae:	4b12      	ldr	r3, [pc, #72]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	490e      	ldr	r1, [pc, #56]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cc2:	f000 f821 	bl	8006d08 <HAL_RCC_GetSysClockFreq>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	091b      	lsrs	r3, r3, #4
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	490a      	ldr	r1, [pc, #40]	@ (8006cfc <HAL_RCC_ClockConfig+0x1cc>)
 8006cd4:	5ccb      	ldrb	r3, [r1, r3]
 8006cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cda:	4a09      	ldr	r2, [pc, #36]	@ (8006d00 <HAL_RCC_ClockConfig+0x1d0>)
 8006cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006cde:	4b09      	ldr	r3, [pc, #36]	@ (8006d04 <HAL_RCC_ClockConfig+0x1d4>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fb ff86 	bl	8002bf4 <HAL_InitTick>

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	40023c00 	.word	0x40023c00
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	08016568 	.word	0x08016568
 8006d00:	20000004 	.word	0x20000004
 8006d04:	20000008 	.word	0x20000008

08006d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d0c:	b090      	sub	sp, #64	@ 0x40
 8006d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d14:	2300      	movs	r3, #0
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d18:	2300      	movs	r3, #0
 8006d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d20:	4b59      	ldr	r3, [pc, #356]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f003 030c 	and.w	r3, r3, #12
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d00d      	beq.n	8006d48 <HAL_RCC_GetSysClockFreq+0x40>
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	f200 80a1 	bhi.w	8006e74 <HAL_RCC_GetSysClockFreq+0x16c>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_RCC_GetSysClockFreq+0x34>
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d003      	beq.n	8006d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d3a:	e09b      	b.n	8006e74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d3c:	4b53      	ldr	r3, [pc, #332]	@ (8006e8c <HAL_RCC_GetSysClockFreq+0x184>)
 8006d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d40:	e09b      	b.n	8006e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d42:	4b53      	ldr	r3, [pc, #332]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d46:	e098      	b.n	8006e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d48:	4b4f      	ldr	r3, [pc, #316]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006d52:	4b4d      	ldr	r3, [pc, #308]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d028      	beq.n	8006db0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	099b      	lsrs	r3, r3, #6
 8006d64:	2200      	movs	r2, #0
 8006d66:	623b      	str	r3, [r7, #32]
 8006d68:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d70:	2100      	movs	r1, #0
 8006d72:	4b47      	ldr	r3, [pc, #284]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d74:	fb03 f201 	mul.w	r2, r3, r1
 8006d78:	2300      	movs	r3, #0
 8006d7a:	fb00 f303 	mul.w	r3, r0, r3
 8006d7e:	4413      	add	r3, r2
 8006d80:	4a43      	ldr	r2, [pc, #268]	@ (8006e90 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d82:	fba0 1202 	umull	r1, r2, r0, r2
 8006d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d88:	460a      	mov	r2, r1
 8006d8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006d8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d8e:	4413      	add	r3, r2
 8006d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d94:	2200      	movs	r2, #0
 8006d96:	61bb      	str	r3, [r7, #24]
 8006d98:	61fa      	str	r2, [r7, #28]
 8006d9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006da2:	f7f9 fa85 	bl	80002b0 <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4613      	mov	r3, r2
 8006dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dae:	e053      	b.n	8006e58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006db0:	4b35      	ldr	r3, [pc, #212]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	099b      	lsrs	r3, r3, #6
 8006db6:	2200      	movs	r2, #0
 8006db8:	613b      	str	r3, [r7, #16]
 8006dba:	617a      	str	r2, [r7, #20]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006dc2:	f04f 0b00 	mov.w	fp, #0
 8006dc6:	4652      	mov	r2, sl
 8006dc8:	465b      	mov	r3, fp
 8006dca:	f04f 0000 	mov.w	r0, #0
 8006dce:	f04f 0100 	mov.w	r1, #0
 8006dd2:	0159      	lsls	r1, r3, #5
 8006dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dd8:	0150      	lsls	r0, r2, #5
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	ebb2 080a 	subs.w	r8, r2, sl
 8006de2:	eb63 090b 	sbc.w	r9, r3, fp
 8006de6:	f04f 0200 	mov.w	r2, #0
 8006dea:	f04f 0300 	mov.w	r3, #0
 8006dee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006df2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006df6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006dfa:	ebb2 0408 	subs.w	r4, r2, r8
 8006dfe:	eb63 0509 	sbc.w	r5, r3, r9
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	00eb      	lsls	r3, r5, #3
 8006e0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e10:	00e2      	lsls	r2, r4, #3
 8006e12:	4614      	mov	r4, r2
 8006e14:	461d      	mov	r5, r3
 8006e16:	eb14 030a 	adds.w	r3, r4, sl
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	eb45 030b 	adc.w	r3, r5, fp
 8006e20:	607b      	str	r3, [r7, #4]
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e2e:	4629      	mov	r1, r5
 8006e30:	028b      	lsls	r3, r1, #10
 8006e32:	4621      	mov	r1, r4
 8006e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e38:	4621      	mov	r1, r4
 8006e3a:	028a      	lsls	r2, r1, #10
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e42:	2200      	movs	r2, #0
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	60fa      	str	r2, [r7, #12]
 8006e48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e4c:	f7f9 fa30 	bl	80002b0 <__aeabi_uldivmod>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4613      	mov	r3, r2
 8006e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006e58:	4b0b      	ldr	r3, [pc, #44]	@ (8006e88 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	0c1b      	lsrs	r3, r3, #16
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	3301      	adds	r3, #1
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006e68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e72:	e002      	b.n	8006e7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e74:	4b05      	ldr	r3, [pc, #20]	@ (8006e8c <HAL_RCC_GetSysClockFreq+0x184>)
 8006e76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3740      	adds	r7, #64	@ 0x40
 8006e80:	46bd      	mov	sp, r7
 8006e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e86:	bf00      	nop
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	00f42400 	.word	0x00f42400
 8006e90:	017d7840 	.word	0x017d7840

08006e94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e98:	4b03      	ldr	r3, [pc, #12]	@ (8006ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	20000004 	.word	0x20000004

08006eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006eb0:	f7ff fff0 	bl	8006e94 <HAL_RCC_GetHCLKFreq>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	4b05      	ldr	r3, [pc, #20]	@ (8006ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	0a9b      	lsrs	r3, r3, #10
 8006ebc:	f003 0307 	and.w	r3, r3, #7
 8006ec0:	4903      	ldr	r1, [pc, #12]	@ (8006ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ec2:	5ccb      	ldrb	r3, [r1, r3]
 8006ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	08016578 	.word	0x08016578

08006ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ed8:	f7ff ffdc 	bl	8006e94 <HAL_RCC_GetHCLKFreq>
 8006edc:	4602      	mov	r2, r0
 8006ede:	4b05      	ldr	r3, [pc, #20]	@ (8006ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	0b5b      	lsrs	r3, r3, #13
 8006ee4:	f003 0307 	and.w	r3, r3, #7
 8006ee8:	4903      	ldr	r1, [pc, #12]	@ (8006ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eea:	5ccb      	ldrb	r3, [r1, r3]
 8006eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	08016578 	.word	0x08016578

08006efc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	220f      	movs	r2, #15
 8006f0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f0c:	4b12      	ldr	r3, [pc, #72]	@ (8006f58 <HAL_RCC_GetClockConfig+0x5c>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f003 0203 	and.w	r2, r3, #3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f18:	4b0f      	ldr	r3, [pc, #60]	@ (8006f58 <HAL_RCC_GetClockConfig+0x5c>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f24:	4b0c      	ldr	r3, [pc, #48]	@ (8006f58 <HAL_RCC_GetClockConfig+0x5c>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006f30:	4b09      	ldr	r3, [pc, #36]	@ (8006f58 <HAL_RCC_GetClockConfig+0x5c>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	08db      	lsrs	r3, r3, #3
 8006f36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f3e:	4b07      	ldr	r3, [pc, #28]	@ (8006f5c <HAL_RCC_GetClockConfig+0x60>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 020f 	and.w	r2, r3, #15
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	601a      	str	r2, [r3, #0]
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	40023c00 	.word	0x40023c00

08006f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d012      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f88:	4b69      	ldr	r3, [pc, #420]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	4a68      	ldr	r2, [pc, #416]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006f92:	6093      	str	r3, [r2, #8]
 8006f94:	4b66      	ldr	r3, [pc, #408]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9c:	4964      	ldr	r1, [pc, #400]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006faa:	2301      	movs	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d017      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fba:	4b5d      	ldr	r3, [pc, #372]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fc0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc8:	4959      	ldr	r1, [pc, #356]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fd8:	d101      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d017      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ff6:	4b4e      	ldr	r3, [pc, #312]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ffc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007004:	494a      	ldr	r1, [pc, #296]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007014:	d101      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007016:	2301      	movs	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007022:	2301      	movs	r3, #1
 8007024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007032:	2301      	movs	r3, #1
 8007034:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 808b 	beq.w	800715a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007044:	4b3a      	ldr	r3, [pc, #232]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007048:	4a39      	ldr	r2, [pc, #228]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800704a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800704e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007050:	4b37      	ldr	r3, [pc, #220]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007058:	60bb      	str	r3, [r7, #8]
 800705a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800705c:	4b35      	ldr	r3, [pc, #212]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a34      	ldr	r2, [pc, #208]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007068:	f7fc fcd0 	bl	8003a0c <HAL_GetTick>
 800706c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007070:	f7fc fccc 	bl	8003a0c <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b64      	cmp	r3, #100	@ 0x64
 800707c:	d901      	bls.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e357      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007082:	4b2c      	ldr	r3, [pc, #176]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0f0      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800708e:	4b28      	ldr	r3, [pc, #160]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007096:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d035      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d02e      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070ac:	4b20      	ldr	r3, [pc, #128]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ba:	4a1d      	ldr	r2, [pc, #116]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070c0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80070ce:	4a18      	ldr	r2, [pc, #96]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070d4:	4b16      	ldr	r3, [pc, #88]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d114      	bne.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e0:	f7fc fc94 	bl	8003a0c <HAL_GetTick>
 80070e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070e6:	e00a      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070e8:	f7fc fc90 	bl	8003a0c <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d901      	bls.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e319      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0ee      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007112:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007116:	d111      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007118:	4b05      	ldr	r3, [pc, #20]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007124:	4b04      	ldr	r3, [pc, #16]	@ (8007138 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007126:	400b      	ands	r3, r1
 8007128:	4901      	ldr	r1, [pc, #4]	@ (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800712a:	4313      	orrs	r3, r2
 800712c:	608b      	str	r3, [r1, #8]
 800712e:	e00b      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007130:	40023800 	.word	0x40023800
 8007134:	40007000 	.word	0x40007000
 8007138:	0ffffcff 	.word	0x0ffffcff
 800713c:	4baa      	ldr	r3, [pc, #680]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	4aa9      	ldr	r2, [pc, #676]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007142:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007146:	6093      	str	r3, [r2, #8]
 8007148:	4ba7      	ldr	r3, [pc, #668]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800714a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007154:	49a4      	ldr	r1, [pc, #656]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007156:	4313      	orrs	r3, r2
 8007158:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0310 	and.w	r3, r3, #16
 8007162:	2b00      	cmp	r3, #0
 8007164:	d010      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007166:	4ba0      	ldr	r3, [pc, #640]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800716c:	4a9e      	ldr	r2, [pc, #632]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800716e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007172:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007176:	4b9c      	ldr	r3, [pc, #624]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007178:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007180:	4999      	ldr	r1, [pc, #612]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007194:	4b94      	ldr	r3, [pc, #592]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800719a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071a2:	4991      	ldr	r1, [pc, #580]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071b6:	4b8c      	ldr	r3, [pc, #560]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071c4:	4988      	ldr	r1, [pc, #544]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00a      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071d8:	4b83      	ldr	r3, [pc, #524]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071e6:	4980      	ldr	r1, [pc, #512]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80071fa:	4b7b      	ldr	r3, [pc, #492]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007200:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007208:	4977      	ldr	r1, [pc, #476]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800720a:	4313      	orrs	r3, r2
 800720c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00a      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800721c:	4b72      	ldr	r3, [pc, #456]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007222:	f023 0203 	bic.w	r2, r3, #3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722a:	496f      	ldr	r1, [pc, #444]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800723e:	4b6a      	ldr	r3, [pc, #424]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007244:	f023 020c 	bic.w	r2, r3, #12
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800724c:	4966      	ldr	r1, [pc, #408]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800724e:	4313      	orrs	r3, r2
 8007250:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007260:	4b61      	ldr	r3, [pc, #388]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007266:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800726e:	495e      	ldr	r1, [pc, #376]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007270:	4313      	orrs	r3, r2
 8007272:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007282:	4b59      	ldr	r3, [pc, #356]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007288:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007290:	4955      	ldr	r1, [pc, #340]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072a4:	4b50      	ldr	r3, [pc, #320]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b2:	494d      	ldr	r1, [pc, #308]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80072c6:	4b48      	ldr	r3, [pc, #288]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d4:	4944      	ldr	r1, [pc, #272]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80072e8:	4b3f      	ldr	r3, [pc, #252]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f6:	493c      	ldr	r1, [pc, #240]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800730a:	4b37      	ldr	r3, [pc, #220]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800730c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007310:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007318:	4933      	ldr	r1, [pc, #204]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800732c:	4b2e      	ldr	r3, [pc, #184]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007332:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800733a:	492b      	ldr	r1, [pc, #172]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800733c:	4313      	orrs	r3, r2
 800733e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d011      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800734e:	4b26      	ldr	r3, [pc, #152]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007354:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800735c:	4922      	ldr	r1, [pc, #136]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007368:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800736c:	d101      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800736e:	2301      	movs	r3, #1
 8007370:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800737e:	2301      	movs	r3, #1
 8007380:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800738e:	4b16      	ldr	r3, [pc, #88]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007394:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800739c:	4912      	ldr	r1, [pc, #72]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073b0:	4b0d      	ldr	r3, [pc, #52]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073c0:	4909      	ldr	r1, [pc, #36]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d006      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80d9 	beq.w	800758e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073dc:	4b02      	ldr	r3, [pc, #8]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a01      	ldr	r2, [pc, #4]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073e6:	e001      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80073e8:	40023800 	.word	0x40023800
 80073ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ee:	f7fc fb0d 	bl	8003a0c <HAL_GetTick>
 80073f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073f4:	e008      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073f6:	f7fc fb09 	bl	8003a0c <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b64      	cmp	r3, #100	@ 0x64
 8007402:	d901      	bls.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e194      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007408:	4b6c      	ldr	r3, [pc, #432]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1f0      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d021      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007424:	2b00      	cmp	r3, #0
 8007426:	d11d      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007428:	4b64      	ldr	r3, [pc, #400]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800742a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800742e:	0c1b      	lsrs	r3, r3, #16
 8007430:	f003 0303 	and.w	r3, r3, #3
 8007434:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007436:	4b61      	ldr	r3, [pc, #388]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800743c:	0e1b      	lsrs	r3, r3, #24
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	019a      	lsls	r2, r3, #6
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	041b      	lsls	r3, r3, #16
 800744e:	431a      	orrs	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	061b      	lsls	r3, r3, #24
 8007454:	431a      	orrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	071b      	lsls	r3, r3, #28
 800745c:	4957      	ldr	r1, [pc, #348]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d004      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007478:	d00a      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007482:	2b00      	cmp	r3, #0
 8007484:	d02e      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800748e:	d129      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007490:	4b4a      	ldr	r3, [pc, #296]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800749e:	4b47      	ldr	r3, [pc, #284]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074a4:	0f1b      	lsrs	r3, r3, #28
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	019a      	lsls	r2, r3, #6
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	041b      	lsls	r3, r3, #16
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	061b      	lsls	r3, r3, #24
 80074be:	431a      	orrs	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	071b      	lsls	r3, r3, #28
 80074c4:	493d      	ldr	r1, [pc, #244]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80074cc:	4b3b      	ldr	r3, [pc, #236]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074d2:	f023 021f 	bic.w	r2, r3, #31
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074da:	3b01      	subs	r3, #1
 80074dc:	4937      	ldr	r1, [pc, #220]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d01d      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074f0:	4b32      	ldr	r3, [pc, #200]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074f6:	0e1b      	lsrs	r3, r3, #24
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074fe:	4b2f      	ldr	r3, [pc, #188]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007504:	0f1b      	lsrs	r3, r3, #28
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	019a      	lsls	r2, r3, #6
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	431a      	orrs	r2, r3
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	061b      	lsls	r3, r3, #24
 800751e:	431a      	orrs	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	071b      	lsls	r3, r3, #28
 8007524:	4925      	ldr	r1, [pc, #148]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d011      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	019a      	lsls	r2, r3, #6
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	041b      	lsls	r3, r3, #16
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	061b      	lsls	r3, r3, #24
 800754c:	431a      	orrs	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	071b      	lsls	r3, r3, #28
 8007554:	4919      	ldr	r1, [pc, #100]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800755c:	4b17      	ldr	r3, [pc, #92]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a16      	ldr	r2, [pc, #88]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007562:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007568:	f7fc fa50 	bl	8003a0c <HAL_GetTick>
 800756c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800756e:	e008      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007570:	f7fc fa4c 	bl	8003a0c <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b64      	cmp	r3, #100	@ 0x64
 800757c:	d901      	bls.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e0d7      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007582:	4b0e      	ldr	r3, [pc, #56]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0f0      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b01      	cmp	r3, #1
 8007592:	f040 80cd 	bne.w	8007730 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007596:	4b09      	ldr	r3, [pc, #36]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a08      	ldr	r2, [pc, #32]	@ (80075bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800759c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a2:	f7fc fa33 	bl	8003a0c <HAL_GetTick>
 80075a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075a8:	e00a      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075aa:	f7fc fa2f 	bl	8003a0c <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b64      	cmp	r3, #100	@ 0x64
 80075b6:	d903      	bls.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e0ba      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80075bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075c0:	4b5e      	ldr	r3, [pc, #376]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075cc:	d0ed      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d009      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d02e      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d12a      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075f6:	4b51      	ldr	r3, [pc, #324]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075fc:	0c1b      	lsrs	r3, r3, #16
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007604:	4b4d      	ldr	r3, [pc, #308]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760a:	0f1b      	lsrs	r3, r3, #28
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	019a      	lsls	r2, r3, #6
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	061b      	lsls	r3, r3, #24
 8007624:	431a      	orrs	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	071b      	lsls	r3, r3, #28
 800762a:	4944      	ldr	r1, [pc, #272]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800762c:	4313      	orrs	r3, r2
 800762e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007632:	4b42      	ldr	r3, [pc, #264]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007638:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007640:	3b01      	subs	r3, #1
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	493d      	ldr	r1, [pc, #244]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007646:	4313      	orrs	r3, r2
 8007648:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d022      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800765c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007660:	d11d      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007662:	4b36      	ldr	r3, [pc, #216]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007668:	0e1b      	lsrs	r3, r3, #24
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007670:	4b32      	ldr	r3, [pc, #200]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007676:	0f1b      	lsrs	r3, r3, #28
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	019a      	lsls	r2, r3, #6
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	041b      	lsls	r3, r3, #16
 800768a:	431a      	orrs	r2, r3
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	061b      	lsls	r3, r3, #24
 8007690:	431a      	orrs	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	071b      	lsls	r3, r3, #28
 8007696:	4929      	ldr	r1, [pc, #164]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0308 	and.w	r3, r3, #8
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d028      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076aa:	4b24      	ldr	r3, [pc, #144]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b0:	0e1b      	lsrs	r3, r3, #24
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076b8:	4b20      	ldr	r3, [pc, #128]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076be:	0c1b      	lsrs	r3, r3, #16
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	019a      	lsls	r2, r3, #6
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	431a      	orrs	r2, r3
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	061b      	lsls	r3, r3, #24
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	071b      	lsls	r3, r3, #28
 80076de:	4917      	ldr	r1, [pc, #92]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80076e6:	4b15      	ldr	r3, [pc, #84]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	4911      	ldr	r1, [pc, #68]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80076fc:	4b0f      	ldr	r3, [pc, #60]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a0e      	ldr	r2, [pc, #56]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007708:	f7fc f980 	bl	8003a0c <HAL_GetTick>
 800770c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800770e:	e008      	b.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007710:	f7fc f97c 	bl	8003a0c <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b64      	cmp	r3, #100	@ 0x64
 800771c:	d901      	bls.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e007      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007722:	4b06      	ldr	r3, [pc, #24]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800772a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800772e:	d1ef      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3720      	adds	r7, #32
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	40023800 	.word	0x40023800

08007740 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800775e:	f040 808d 	bne.w	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007762:	4b93      	ldr	r3, [pc, #588]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007768:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007770:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007778:	d07c      	beq.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007780:	d87b      	bhi.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800778e:	d039      	beq.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007790:	e073      	b.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007792:	4b87      	ldr	r3, [pc, #540]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d108      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800779e:	4b84      	ldr	r3, [pc, #528]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077a6:	4a83      	ldr	r2, [pc, #524]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80077a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	e007      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80077b0:	4b7f      	ldr	r3, [pc, #508]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077b8:	4a7f      	ldr	r2, [pc, #508]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80077ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80077be:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80077c0:	4b7b      	ldr	r3, [pc, #492]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c6:	0e1b      	lsrs	r3, r3, #24
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80077ce:	4b78      	ldr	r3, [pc, #480]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d4:	099b      	lsrs	r3, r3, #6
 80077d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	fb03 f202 	mul.w	r2, r3, r2
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80077e8:	4b71      	ldr	r3, [pc, #452]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80077ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077ee:	0a1b      	lsrs	r3, r3, #8
 80077f0:	f003 031f 	and.w	r3, r3, #31
 80077f4:	3301      	adds	r3, #1
 80077f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007800:	617b      	str	r3, [r7, #20]
        break;
 8007802:	e03b      	b.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007804:	4b6a      	ldr	r3, [pc, #424]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d108      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007810:	4b67      	ldr	r3, [pc, #412]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007818:	4a66      	ldr	r2, [pc, #408]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800781a:	fbb2 f3f3 	udiv	r3, r2, r3
 800781e:	613b      	str	r3, [r7, #16]
 8007820:	e007      	b.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007822:	4b63      	ldr	r3, [pc, #396]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800782a:	4a63      	ldr	r2, [pc, #396]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800782c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007830:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007832:	4b5f      	ldr	r3, [pc, #380]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007838:	0e1b      	lsrs	r3, r3, #24
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007840:	4b5b      	ldr	r3, [pc, #364]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007846:	099b      	lsrs	r3, r3, #6
 8007848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	fb03 f202 	mul.w	r2, r3, r2
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	fbb2 f3f3 	udiv	r3, r2, r3
 8007858:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800785a:	4b55      	ldr	r3, [pc, #340]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800785c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	3301      	adds	r3, #1
 8007866:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007870:	617b      	str	r3, [r7, #20]
        break;
 8007872:	e003      	b.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007874:	4b51      	ldr	r3, [pc, #324]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007876:	617b      	str	r3, [r7, #20]
        break;
 8007878:	e000      	b.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800787a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007882:	f040 808d 	bne.w	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007886:	4b4a      	ldr	r3, [pc, #296]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800788c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007894:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800789c:	d07c      	beq.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80078a4:	d87b      	bhi.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078b2:	d039      	beq.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80078b4:	e073      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80078b6:	4b3e      	ldr	r3, [pc, #248]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d108      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80078c2:	4b3b      	ldr	r3, [pc, #236]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078ca:	4a3a      	ldr	r2, [pc, #232]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80078cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d0:	613b      	str	r3, [r7, #16]
 80078d2:	e007      	b.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80078d4:	4b36      	ldr	r3, [pc, #216]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078dc:	4a36      	ldr	r2, [pc, #216]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80078de:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80078e4:	4b32      	ldr	r3, [pc, #200]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ea:	0e1b      	lsrs	r3, r3, #24
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80078f2:	4b2f      	ldr	r3, [pc, #188]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f8:	099b      	lsrs	r3, r3, #6
 80078fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	fb03 f202 	mul.w	r2, r3, r2
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	fbb2 f3f3 	udiv	r3, r2, r3
 800790a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800790c:	4b28      	ldr	r3, [pc, #160]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800790e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	f003 031f 	and.w	r3, r3, #31
 8007918:	3301      	adds	r3, #1
 800791a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	fbb2 f3f3 	udiv	r3, r2, r3
 8007924:	617b      	str	r3, [r7, #20]
        break;
 8007926:	e03b      	b.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007928:	4b21      	ldr	r3, [pc, #132]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d108      	bne.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007934:	4b1e      	ldr	r3, [pc, #120]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800793c:	4a1d      	ldr	r2, [pc, #116]	@ (80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800793e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007942:	613b      	str	r3, [r7, #16]
 8007944:	e007      	b.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007946:	4b1a      	ldr	r3, [pc, #104]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800794e:	4a1a      	ldr	r2, [pc, #104]	@ (80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007950:	fbb2 f3f3 	udiv	r3, r2, r3
 8007954:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007956:	4b16      	ldr	r3, [pc, #88]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800795c:	0e1b      	lsrs	r3, r3, #24
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007964:	4b12      	ldr	r3, [pc, #72]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800796a:	099b      	lsrs	r3, r3, #6
 800796c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	fb03 f202 	mul.w	r2, r3, r2
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	fbb2 f3f3 	udiv	r3, r2, r3
 800797c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800797e:	4b0c      	ldr	r3, [pc, #48]	@ (80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	3301      	adds	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	fbb2 f3f3 	udiv	r3, r2, r3
 8007994:	617b      	str	r3, [r7, #20]
        break;
 8007996:	e003      	b.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007998:	4b08      	ldr	r3, [pc, #32]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800799a:	617b      	str	r3, [r7, #20]
        break;
 800799c:	e000      	b.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800799e:	bf00      	nop
      }
    }
  }

  return frequency;
 80079a0:	697b      	ldr	r3, [r7, #20]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	40023800 	.word	0x40023800
 80079b4:	00f42400 	.word	0x00f42400
 80079b8:	017d7840 	.word	0x017d7840
 80079bc:	00bb8000 	.word	0x00bb8000

080079c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e071      	b.n	8007aba <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7f5b      	ldrb	r3, [r3, #29]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d105      	bne.n	80079ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7fa fa94 	bl	8001f14 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b10      	cmp	r3, #16
 80079fe:	d053      	beq.n	8007aa8 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	22ca      	movs	r2, #202	@ 0xca
 8007a06:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2253      	movs	r2, #83	@ 0x53
 8007a0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fac7 	bl	8007fa4 <RTC_EnterInitMode>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d12a      	bne.n	8007a76 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6899      	ldr	r1, [r3, #8]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	4b26      	ldr	r3, [pc, #152]	@ (8007ac4 <HAL_RTC_Init+0x104>)
 8007a2c:	400b      	ands	r3, r1
 8007a2e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6899      	ldr	r1, [r3, #8]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	68d2      	ldr	r2, [r2, #12]
 8007a56:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6919      	ldr	r1, [r3, #16]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	041a      	lsls	r2, r3, #16
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fad0 	bl	8008012 <RTC_ExitInitMode>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d110      	bne.n	8007a9e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0208 	bic.w	r2, r2, #8
 8007a8a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699a      	ldr	r2, [r3, #24]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	22ff      	movs	r2, #255	@ 0xff
 8007aa4:	625a      	str	r2, [r3, #36]	@ 0x24
 8007aa6:	e001      	b.n	8007aac <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d102      	bne.n	8007ab8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	ff8fffbf 	.word	0xff8fffbf

08007ac8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ac8:	b590      	push	{r4, r7, lr}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	7f1b      	ldrb	r3, [r3, #28]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_RTC_SetTime+0x1c>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e085      	b.n	8007bf0 <HAL_RTC_SetTime+0x128>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2202      	movs	r2, #2
 8007aee:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d126      	bne.n	8007b44 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2200      	movs	r2, #0
 8007b08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 faa4 	bl	800805c <RTC_ByteToBcd2>
 8007b14:	4603      	mov	r3, r0
 8007b16:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	785b      	ldrb	r3, [r3, #1]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 fa9d 	bl	800805c <RTC_ByteToBcd2>
 8007b22:	4603      	mov	r3, r0
 8007b24:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b26:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	789b      	ldrb	r3, [r3, #2]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fa95 	bl	800805c <RTC_ByteToBcd2>
 8007b32:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b34:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	78db      	ldrb	r3, [r3, #3]
 8007b3c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	e018      	b.n	8007b76 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d102      	bne.n	8007b58 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2200      	movs	r2, #0
 8007b56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	785b      	ldrb	r3, [r3, #1]
 8007b62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007b64:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007b6a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	78db      	ldrb	r3, [r3, #3]
 8007b70:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	22ca      	movs	r2, #202	@ 0xca
 8007b7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2253      	movs	r2, #83	@ 0x53
 8007b84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 fa0c 	bl	8007fa4 <RTC_EnterInitMode>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007b90:	7cfb      	ldrb	r3, [r7, #19]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d11e      	bne.n	8007bd4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	6979      	ldr	r1, [r7, #20]
 8007b9c:	4b16      	ldr	r3, [pc, #88]	@ (8007bf8 <HAL_RTC_SetTime+0x130>)
 8007b9e:	400b      	ands	r3, r1
 8007ba0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007bb0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6899      	ldr	r1, [r3, #8]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fa21 	bl	8008012 <RTC_ExitInitMode>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007bd4:	7cfb      	ldrb	r3, [r7, #19]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d102      	bne.n	8007be0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	22ff      	movs	r2, #255	@ 0xff
 8007be6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	771a      	strb	r2, [r3, #28]

  return status;
 8007bee:	7cfb      	ldrb	r3, [r7, #19]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	371c      	adds	r7, #28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd90      	pop	{r4, r7, pc}
 8007bf8:	007f7f7f 	.word	0x007f7f7f

08007bfc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	7f1b      	ldrb	r3, [r3, #28]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d101      	bne.n	8007c18 <HAL_RTC_SetDate+0x1c>
 8007c14:	2302      	movs	r3, #2
 8007c16:	e06f      	b.n	8007cf8 <HAL_RTC_SetDate+0xfc>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2202      	movs	r2, #2
 8007c22:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10e      	bne.n	8007c48 <HAL_RTC_SetDate+0x4c>
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	f003 0310 	and.w	r3, r3, #16
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	f023 0310 	bic.w	r3, r3, #16
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	330a      	adds	r3, #10
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d11c      	bne.n	8007c88 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	78db      	ldrb	r3, [r3, #3]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fa02 	bl	800805c <RTC_ByteToBcd2>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 f9fb 	bl	800805c <RTC_ByteToBcd2>
 8007c66:	4603      	mov	r3, r0
 8007c68:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c6a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	789b      	ldrb	r3, [r3, #2]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 f9f3 	bl	800805c <RTC_ByteToBcd2>
 8007c76:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007c78:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	e00e      	b.n	8007ca6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	78db      	ldrb	r3, [r3, #3]
 8007c8c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	785b      	ldrb	r3, [r3, #1]
 8007c92:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007c94:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007c9a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	22ca      	movs	r2, #202	@ 0xca
 8007cac:	625a      	str	r2, [r3, #36]	@ 0x24
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2253      	movs	r2, #83	@ 0x53
 8007cb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f974 	bl	8007fa4 <RTC_EnterInitMode>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007cc0:	7cfb      	ldrb	r3, [r7, #19]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	6979      	ldr	r1, [r7, #20]
 8007ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8007d00 <HAL_RTC_SetDate+0x104>)
 8007cce:	400b      	ands	r3, r1
 8007cd0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f99d 	bl	8008012 <RTC_ExitInitMode>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007cdc:	7cfb      	ldrb	r3, [r7, #19]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d102      	bne.n	8007ce8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	22ff      	movs	r2, #255	@ 0xff
 8007cee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	771a      	strb	r2, [r3, #28]

  return status;
 8007cf6:	7cfb      	ldrb	r3, [r7, #19]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	371c      	adds	r7, #28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd90      	pop	{r4, r7, pc}
 8007d00:	00ffff3f 	.word	0x00ffff3f

08007d04 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007d04:	b590      	push	{r4, r7, lr}
 8007d06:	b089      	sub	sp, #36	@ 0x24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	7f1b      	ldrb	r3, [r3, #28]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_RTC_SetAlarm+0x24>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e113      	b.n	8007f50 <HAL_RTC_SetAlarm+0x24c>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2202      	movs	r2, #2
 8007d32:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d137      	bne.n	8007daa <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f982 	bl	800805c <RTC_ByteToBcd2>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 f97b 	bl	800805c <RTC_ByteToBcd2>
 8007d66:	4603      	mov	r3, r0
 8007d68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007d6a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	789b      	ldrb	r3, [r3, #2]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 f973 	bl	800805c <RTC_ByteToBcd2>
 8007d76:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007d78:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	78db      	ldrb	r3, [r3, #3]
 8007d80:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007d82:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f965 	bl	800805c <RTC_ByteToBcd2>
 8007d92:	4603      	mov	r3, r0
 8007d94:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007d96:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007d9e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007da4:	4313      	orrs	r3, r2
 8007da6:	61fb      	str	r3, [r7, #28]
 8007da8:	e023      	b.n	8007df2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007dca:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007dd0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	78db      	ldrb	r3, [r3, #3]
 8007dd6:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007dd8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007de0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007de2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007de8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007dee:	4313      	orrs	r3, r2
 8007df0:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	22ca      	movs	r2, #202	@ 0xca
 8007e04:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2253      	movs	r2, #83	@ 0x53
 8007e0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e16:	d148      	bne.n	8007eaa <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e26:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007e36:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007e48:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e4a:	f7fb fddf 	bl	8003a0c <HAL_GetTick>
 8007e4e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007e50:	e013      	b.n	8007e7a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e52:	f7fb fddb 	bl	8003a0c <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e60:	d90b      	bls.n	8007e7a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	22ff      	movs	r2, #255	@ 0xff
 8007e68:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e06a      	b.n	8007f50 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0e4      	beq.n	8007e52 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ea6:	609a      	str	r2, [r3, #8]
 8007ea8:	e047      	b.n	8007f3a <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007eb8:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ec8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007eda:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007edc:	f7fb fd96 	bl	8003a0c <HAL_GetTick>
 8007ee0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007ee2:	e013      	b.n	8007f0c <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ee4:	f7fb fd92 	bl	8003a0c <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ef2:	d90b      	bls.n	8007f0c <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	22ff      	movs	r2, #255	@ 0xff
 8007efa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2203      	movs	r2, #3
 8007f00:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e021      	b.n	8007f50 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0e4      	beq.n	8007ee4 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f38:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	22ff      	movs	r2, #255	@ 0xff
 8007f40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3724      	adds	r7, #36	@ 0x24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd90      	pop	{r4, r7, pc}

08007f58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a0d      	ldr	r2, [pc, #52]	@ (8007fa0 <HAL_RTC_WaitForSynchro+0x48>)
 8007f6a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f6c:	f7fb fd4e 	bl	8003a0c <HAL_GetTick>
 8007f70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007f72:	e009      	b.n	8007f88 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f74:	f7fb fd4a 	bl	8003a0c <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f82:	d901      	bls.n	8007f88 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e007      	b.n	8007f98 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f003 0320 	and.w	r3, r3, #32
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0ee      	beq.n	8007f74 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	0001ff5f 	.word	0x0001ff5f

08007fa4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d122      	bne.n	8008008 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007fd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fd2:	f7fb fd1b 	bl	8003a0c <HAL_GetTick>
 8007fd6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007fd8:	e00c      	b.n	8007ff4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007fda:	f7fb fd17 	bl	8003a0c <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fe8:	d904      	bls.n	8007ff4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2204      	movs	r2, #4
 8007fee:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d102      	bne.n	8008008 <RTC_EnterInitMode+0x64>
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d1e8      	bne.n	8007fda <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008008:	7bfb      	ldrb	r3, [r7, #15]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68da      	ldr	r2, [r3, #12]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800802c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff ff8b 	bl	8007f58 <HAL_RTC_WaitForSynchro>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2204      	movs	r2, #4
 800804c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800806a:	e005      	b.n	8008078 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3301      	adds	r3, #1
 8008070:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	3b0a      	subs	r3, #10
 8008076:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	2b09      	cmp	r3, #9
 800807c:	d8f6      	bhi.n	800806c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	b2db      	uxtb	r3, r3
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	b2da      	uxtb	r2, r3
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	4313      	orrs	r3, r2
 800808a:	b2db      	uxtb	r3, r3
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	7f1b      	ldrb	r3, [r3, #28]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_RTCEx_SetTimeStamp+0x1c>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e050      	b.n	8008156 <HAL_RTCEx_SetTimeStamp+0xbe>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2202      	movs	r2, #2
 80080be:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0206 	bic.w	r2, r2, #6
 80080ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	430a      	orrs	r2, r1
 80080de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689a      	ldr	r2, [r3, #8]
 80080e6:	4b1f      	ldr	r3, [pc, #124]	@ (8008164 <HAL_RTCEx_SetTimeStamp+0xcc>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	22ca      	movs	r2, #202	@ 0xca
 80080fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2253      	movs	r2, #83	@ 0x53
 8008102:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	b2da      	uxtb	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800811c:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	b2da      	uxtb	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800812e:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800813e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	22ff      	movs	r2, #255	@ 0xff
 8008146:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2201      	movs	r2, #1
 800814c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	fffff7f7 	.word	0xfffff7f7

08008168 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e156      	b.n	8008434 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7f9 ff90 	bl	80020c0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f95b 	bl	8008464 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d00c      	beq.n	80081d0 <HAL_SAI_Init+0x68>
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d80d      	bhi.n	80081d6 <HAL_SAI_Init+0x6e>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <HAL_SAI_Init+0x5c>
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d003      	beq.n	80081ca <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80081c2:	e008      	b.n	80081d6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	61fb      	str	r3, [r7, #28]
      break;
 80081c8:	e006      	b.n	80081d8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80081ca:	2310      	movs	r3, #16
 80081cc:	61fb      	str	r3, [r7, #28]
      break;
 80081ce:	e003      	b.n	80081d8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80081d0:	2320      	movs	r3, #32
 80081d2:	61fb      	str	r3, [r7, #28]
      break;
 80081d4:	e000      	b.n	80081d8 <HAL_SAI_Init+0x70>
      break;
 80081d6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d81e      	bhi.n	800821e <HAL_SAI_Init+0xb6>
 80081e0:	a201      	add	r2, pc, #4	@ (adr r2, 80081e8 <HAL_SAI_Init+0x80>)
 80081e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e6:	bf00      	nop
 80081e8:	080081f9 	.word	0x080081f9
 80081ec:	080081ff 	.word	0x080081ff
 80081f0:	08008207 	.word	0x08008207
 80081f4:	0800820f 	.word	0x0800820f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]
    }
    break;
 80081fc:	e010      	b.n	8008220 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80081fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008202:	617b      	str	r3, [r7, #20]
    }
    break;
 8008204:	e00c      	b.n	8008220 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008206:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800820a:	617b      	str	r3, [r7, #20]
    }
    break;
 800820c:	e008      	b.n	8008220 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800820e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008212:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800821c:	e000      	b.n	8008220 <HAL_SAI_Init+0xb8>
    default:
      break;
 800821e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a85      	ldr	r2, [pc, #532]	@ (800843c <HAL_SAI_Init+0x2d4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d004      	beq.n	8008234 <HAL_SAI_Init+0xcc>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a84      	ldr	r2, [pc, #528]	@ (8008440 <HAL_SAI_Init+0x2d8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d103      	bne.n	800823c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008234:	4a83      	ldr	r2, [pc, #524]	@ (8008444 <HAL_SAI_Init+0x2dc>)
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	e002      	b.n	8008242 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800823c:	4a82      	ldr	r2, [pc, #520]	@ (8008448 <HAL_SAI_Init+0x2e0>)
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d04c      	beq.n	80082e4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a7a      	ldr	r2, [pc, #488]	@ (800843c <HAL_SAI_Init+0x2d4>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d004      	beq.n	8008262 <HAL_SAI_Init+0xfa>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a78      	ldr	r2, [pc, #480]	@ (8008440 <HAL_SAI_Init+0x2d8>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d104      	bne.n	800826c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008262:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008266:	f7ff fa6b 	bl	8007740 <HAL_RCCEx_GetPeriphCLKFreq>
 800826a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a76      	ldr	r2, [pc, #472]	@ (800844c <HAL_SAI_Init+0x2e4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d004      	beq.n	8008280 <HAL_SAI_Init+0x118>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a75      	ldr	r2, [pc, #468]	@ (8008450 <HAL_SAI_Init+0x2e8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d104      	bne.n	800828a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008280:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008284:	f7ff fa5c 	bl	8007740 <HAL_RCCEx_GetPeriphCLKFreq>
 8008288:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4613      	mov	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	461a      	mov	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	025b      	lsls	r3, r3, #9
 800829c:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4a6b      	ldr	r2, [pc, #428]	@ (8008454 <HAL_SAI_Init+0x2ec>)
 80082a6:	fba2 2303 	umull	r2, r3, r2, r3
 80082aa:	08da      	lsrs	r2, r3, #3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80082b0:	68f9      	ldr	r1, [r7, #12]
 80082b2:	4b68      	ldr	r3, [pc, #416]	@ (8008454 <HAL_SAI_Init+0x2ec>)
 80082b4:	fba3 2301 	umull	r2, r3, r3, r1
 80082b8:	08da      	lsrs	r2, r3, #3
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	1aca      	subs	r2, r1, r3
 80082c4:	2a08      	cmp	r2, #8
 80082c6:	d904      	bls.n	80082d2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	d104      	bne.n	80082e4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	085a      	lsrs	r2, r3, #1
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <HAL_SAI_Init+0x18c>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d109      	bne.n	8008308 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d101      	bne.n	8008300 <HAL_SAI_Init+0x198>
 80082fc:	2300      	movs	r3, #0
 80082fe:	e001      	b.n	8008304 <HAL_SAI_Init+0x19c>
 8008300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008304:	61bb      	str	r3, [r7, #24]
 8008306:	e008      	b.n	800831a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d102      	bne.n	8008316 <HAL_SAI_Init+0x1ae>
 8008310:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008314:	e000      	b.n	8008318 <HAL_SAI_Init+0x1b0>
 8008316:	2300      	movs	r3, #0
 8008318:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	4b4c      	ldr	r3, [pc, #304]	@ (8008458 <HAL_SAI_Init+0x2f0>)
 8008326:	400b      	ands	r3, r1
 8008328:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6819      	ldr	r1, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008338:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800833e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008344:	431a      	orrs	r2, r3
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8008352:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800835e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a1b      	ldr	r3, [r3, #32]
 8008364:	051b      	lsls	r3, r3, #20
 8008366:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6859      	ldr	r1, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b38      	ldr	r3, [pc, #224]	@ (800845c <HAL_SAI_Init+0x2f4>)
 800837c:	400b      	ands	r3, r1
 800837e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6859      	ldr	r1, [r3, #4]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6899      	ldr	r1, [r3, #8]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008460 <HAL_SAI_Init+0x2f8>)
 80083aa:	400b      	ands	r3, r1
 80083ac:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6899      	ldr	r1, [r3, #8]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80083be:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80083c4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80083ca:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d0:	3b01      	subs	r3, #1
 80083d2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80083d4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68d9      	ldr	r1, [r3, #12]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80083ec:	400b      	ands	r3, r1
 80083ee:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68d9      	ldr	r1, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083fe:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008404:	041b      	lsls	r3, r3, #16
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800840c:	3b01      	subs	r3, #1
 800840e:	021b      	lsls	r3, r3, #8
 8008410:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3720      	adds	r7, #32
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	40015804 	.word	0x40015804
 8008440:	40015824 	.word	0x40015824
 8008444:	40015800 	.word	0x40015800
 8008448:	40015c00 	.word	0x40015c00
 800844c:	40015c04 	.word	0x40015c04
 8008450:	40015c24 	.word	0x40015c24
 8008454:	cccccccd 	.word	0xcccccccd
 8008458:	ff05c010 	.word	0xff05c010
 800845c:	ffff1ff0 	.word	0xffff1ff0
 8008460:	fff88000 	.word	0xfff88000

08008464 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800846c:	4b17      	ldr	r3, [pc, #92]	@ (80084cc <SAI_Disable+0x68>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a17      	ldr	r2, [pc, #92]	@ (80084d0 <SAI_Disable+0x6c>)
 8008472:	fba2 2303 	umull	r2, r3, r2, r3
 8008476:	0b1b      	lsrs	r3, r3, #12
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800848e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	1e5a      	subs	r2, r3, #1
 8008494:	60fa      	str	r2, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	72fb      	strb	r3, [r7, #11]
      break;
 80084ae:	e006      	b.n	80084be <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e8      	bne.n	8008490 <SAI_Disable+0x2c>

  return status;
 80084be:	7afb      	ldrb	r3, [r7, #11]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	20000004 	.word	0x20000004
 80084d0:	95cbec1b 	.word	0x95cbec1b

080084d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e022      	b.n	800852c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d105      	bne.n	80084fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7f9 ffd9 	bl	80024b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2203      	movs	r2, #3
 8008502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f814 	bl	8008534 <HAL_SD_InitCard>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e00a      	b.n	800852c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008534:	b5b0      	push	{r4, r5, r7, lr}
 8008536:	b08e      	sub	sp, #56	@ 0x38
 8008538:	af04      	add	r7, sp, #16
 800853a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800853c:	2300      	movs	r3, #0
 800853e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008544:	2300      	movs	r3, #0
 8008546:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008548:	2300      	movs	r3, #0
 800854a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800854c:	2300      	movs	r3, #0
 800854e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008550:	2376      	movs	r3, #118	@ 0x76
 8008552:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681d      	ldr	r5, [r3, #0]
 8008558:	466c      	mov	r4, sp
 800855a:	f107 0314 	add.w	r3, r7, #20
 800855e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008566:	f107 0308 	add.w	r3, r7, #8
 800856a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800856c:	4628      	mov	r0, r5
 800856e:	f003 fa3b 	bl	800b9e8 <SDMMC_Init>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8008578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e059      	b.n	8008638 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008592:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f003 fa6f 	bl	800ba7c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085ac:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80085ae:	2002      	movs	r0, #2
 80085b0:	f7fb fa38 	bl	8003a24 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fff3 	bl	80095a0 <SD_PowerON>
 80085ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	431a      	orrs	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e02e      	b.n	8008638 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 ff12 	bl	8009404 <SD_InitCard>
 80085e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00b      	beq.n	8008600 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e01b      	b.n	8008638 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008608:	4618      	mov	r0, r3
 800860a:	f003 fac9 	bl	800bba0 <SDMMC_CmdBlockLength>
 800860e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00f      	beq.n	8008636 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a09      	ldr	r2, [pc, #36]	@ (8008640 <HAL_SD_InitCard+0x10c>)
 800861c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3728      	adds	r7, #40	@ 0x28
 800863c:	46bd      	mov	sp, r7
 800863e:	bdb0      	pop	{r4, r5, r7, pc}
 8008640:	004005ff 	.word	0x004005ff

08008644 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b08c      	sub	sp, #48	@ 0x30
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d107      	bne.n	800866c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008660:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e0c3      	b.n	80087f4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b01      	cmp	r3, #1
 8008676:	f040 80bc 	bne.w	80087f2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008680:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	441a      	add	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800868a:	429a      	cmp	r2, r3
 800868c:	d907      	bls.n	800869e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008692:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e0aa      	b.n	80087f4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2203      	movs	r2, #3
 80086a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2200      	movs	r2, #0
 80086ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80086bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c2:	4a4e      	ldr	r2, [pc, #312]	@ (80087fc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80086c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ca:	4a4d      	ldr	r2, [pc, #308]	@ (8008800 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80086cc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d2:	2200      	movs	r2, #0
 80086d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086da:	2200      	movs	r2, #0
 80086dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3380      	adds	r3, #128	@ 0x80
 8008704:	4619      	mov	r1, r3
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	025b      	lsls	r3, r3, #9
 800870c:	089b      	lsrs	r3, r3, #2
 800870e:	f7fb ff9b 	bl	8004648 <HAL_DMA_Start_IT>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d017      	beq.n	8008748 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8008726:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a35      	ldr	r2, [pc, #212]	@ (8008804 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800872e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008734:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e055      	b.n	80087f4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0208 	orr.w	r2, r2, #8
 8008756:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800875c:	2b01      	cmp	r3, #1
 800875e:	d002      	beq.n	8008766 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	025b      	lsls	r3, r3, #9
 8008764:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008766:	f04f 33ff 	mov.w	r3, #4294967295
 800876a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	025b      	lsls	r3, r3, #9
 8008770:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008772:	2390      	movs	r3, #144	@ 0x90
 8008774:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008776:	2302      	movs	r3, #2
 8008778:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800877a:	2300      	movs	r3, #0
 800877c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800877e:	2301      	movs	r3, #1
 8008780:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f107 0210 	add.w	r2, r7, #16
 800878a:	4611      	mov	r1, r2
 800878c:	4618      	mov	r0, r3
 800878e:	f003 f9db 	bl	800bb48 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d90a      	bls.n	80087ae <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2282      	movs	r2, #130	@ 0x82
 800879c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087a4:	4618      	mov	r0, r3
 80087a6:	f003 fa3f 	bl	800bc28 <SDMMC_CmdReadMultiBlock>
 80087aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80087ac:	e009      	b.n	80087c2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2281      	movs	r2, #129	@ 0x81
 80087b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087ba:	4618      	mov	r0, r3
 80087bc:	f003 fa12 	bl	800bbe4 <SDMMC_CmdReadSingleBlock>
 80087c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80087c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d012      	beq.n	80087ee <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008804 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80087ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d6:	431a      	orrs	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e002      	b.n	80087f4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	e000      	b.n	80087f4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80087f2:	2302      	movs	r3, #2
  }
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3730      	adds	r7, #48	@ 0x30
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	08009213 	.word	0x08009213
 8008800:	08009285 	.word	0x08009285
 8008804:	004005ff 	.word	0x004005ff

08008808 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08c      	sub	sp, #48	@ 0x30
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d107      	bne.n	8008830 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008824:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e0c6      	b.n	80089be <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b01      	cmp	r3, #1
 800883a:	f040 80bf 	bne.w	80089bc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	441a      	add	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800884e:	429a      	cmp	r2, r3
 8008850:	d907      	bls.n	8008862 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008856:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e0ad      	b.n	80089be <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2203      	movs	r2, #3
 8008866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2200      	movs	r2, #0
 8008870:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f042 021a 	orr.w	r2, r2, #26
 8008880:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008886:	4a50      	ldr	r2, [pc, #320]	@ (80089c8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008888:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800888e:	4a4f      	ldr	r2, [pc, #316]	@ (80089cc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008890:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008896:	2200      	movs	r2, #0
 8008898:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d002      	beq.n	80088a8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80088a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a4:	025b      	lsls	r3, r3, #9
 80088a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d90a      	bls.n	80088c4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	22a0      	movs	r2, #160	@ 0xa0
 80088b2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088ba:	4618      	mov	r0, r3
 80088bc:	f003 f9f8 	bl	800bcb0 <SDMMC_CmdWriteMultiBlock>
 80088c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80088c2:	e009      	b.n	80088d8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2290      	movs	r2, #144	@ 0x90
 80088c8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088d0:	4618      	mov	r0, r3
 80088d2:	f003 f9cb 	bl	800bc6c <SDMMC_CmdWriteSingleBlock>
 80088d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80088d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d012      	beq.n	8008904 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a3b      	ldr	r2, [pc, #236]	@ (80089d0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80088e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ec:	431a      	orrs	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e05c      	b.n	80089be <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f042 0208 	orr.w	r2, r2, #8
 8008912:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008918:	2240      	movs	r2, #64	@ 0x40
 800891a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800893c:	68b9      	ldr	r1, [r7, #8]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3380      	adds	r3, #128	@ 0x80
 8008944:	461a      	mov	r2, r3
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	025b      	lsls	r3, r3, #9
 800894a:	089b      	lsrs	r3, r3, #2
 800894c:	f7fb fe7c 	bl	8004648 <HAL_DMA_Start_IT>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d01a      	beq.n	800898c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 021a 	bic.w	r2, r2, #26
 8008964:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a19      	ldr	r2, [pc, #100]	@ (80089d0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800896c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008972:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e018      	b.n	80089be <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	025b      	lsls	r3, r3, #9
 8008996:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008998:	2390      	movs	r3, #144	@ 0x90
 800899a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800899c:	2300      	movs	r3, #0
 800899e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80089a4:	2301      	movs	r3, #1
 80089a6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f107 0210 	add.w	r2, r7, #16
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f003 f8c8 	bl	800bb48 <SDMMC_ConfigData>

      return HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	e000      	b.n	80089be <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80089bc:	2302      	movs	r3, #2
  }
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3730      	adds	r7, #48	@ 0x30
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	080091e9 	.word	0x080091e9
 80089cc:	08009285 	.word	0x08009285
 80089d0:	004005ff 	.word	0x004005ff

080089d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d008      	beq.n	8008a02 <HAL_SD_IRQHandler+0x2e>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f003 0308 	and.w	r3, r3, #8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 ffef 	bl	80099de <SD_Read_IT>
 8008a00:	e15a      	b.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 808d 	beq.w	8008b2c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a1a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4b9a      	ldr	r3, [pc, #616]	@ (8008c90 <HAL_SD_IRQHandler+0x2bc>)
 8008a28:	400b      	ands	r3, r1
 8008a2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0201 	bic.w	r2, r2, #1
 8008a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f003 0308 	and.w	r3, r3, #8
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d039      	beq.n	8008aba <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d104      	bne.n	8008a5a <HAL_SD_IRQHandler+0x86>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d011      	beq.n	8008a7e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f003 f948 	bl	800bcf4 <SDMMC_CmdStopTransfer>
 8008a64:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d008      	beq.n	8008a7e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f921 	bl	8008cc0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008a86:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d104      	bne.n	8008aaa <HAL_SD_IRQHandler+0xd6>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7fa f868 	bl	8002b80 <HAL_SD_RxCpltCallback>
 8008ab0:	e102      	b.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7fa f85a 	bl	8002b6c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008ab8:	e0fe      	b.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 80f9 	beq.w	8008cb8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f003 0320 	and.w	r3, r3, #32
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d011      	beq.n	8008af4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f003 f90d 	bl	800bcf4 <SDMMC_CmdStopTransfer>
 8008ada:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d008      	beq.n	8008af4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f8e6 	bl	8008cc0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f040 80dc 	bne.w	8008cb8 <HAL_SD_IRQHandler+0x2e4>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f040 80d6 	bne.w	8008cb8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0208 	bic.w	r2, r2, #8
 8008b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7fa f821 	bl	8002b6c <HAL_SD_TxCpltCallback>
}
 8008b2a:	e0c5      	b.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d008      	beq.n	8008b4c <HAL_SD_IRQHandler+0x178>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d003      	beq.n	8008b4c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 ff9b 	bl	8009a80 <SD_Write_IT>
 8008b4a:	e0b5      	b.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b52:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 80ae 	beq.w	8008cb8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d005      	beq.n	8008b76 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b6e:	f043 0202 	orr.w	r2, r3, #2
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b88:	f043 0208 	orr.w	r2, r3, #8
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba2:	f043 0220 	orr.w	r2, r3, #32
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bb0:	f003 0310 	and.w	r3, r3, #16
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bbc:	f043 0210 	orr.w	r2, r3, #16
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008bcc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f003 f886 	bl	800bcf4 <SDMMC_CmdStopTransfer>
 8008be8:	4602      	mov	r2, r0
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f003 0308 	and.w	r3, r3, #8
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f857 	bl	8008cc0 <HAL_SD_ErrorCallback>
}
 8008c12:	e051      	b.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d04c      	beq.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d104      	bne.n	8008c32 <HAL_SD_IRQHandler+0x25e>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d011      	beq.n	8008c56 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c36:	4a17      	ldr	r2, [pc, #92]	@ (8008c94 <HAL_SD_IRQHandler+0x2c0>)
 8008c38:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fb fd62 	bl	8004708 <HAL_DMA_Abort_IT>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d036      	beq.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 fb6a 	bl	8009328 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008c54:	e030      	b.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d104      	bne.n	8008c6a <HAL_SD_IRQHandler+0x296>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d018      	beq.n	8008c9c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8008c98 <HAL_SD_IRQHandler+0x2c4>)
 8008c70:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fb fd46 	bl	8004708 <HAL_DMA_Abort_IT>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d01a      	beq.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 fb85 	bl	8009396 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008c8c:	e014      	b.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
 8008c8e:	bf00      	nop
 8008c90:	ffff3ec5 	.word	0xffff3ec5
 8008c94:	08009329 	.word	0x08009329
 8008c98:	08009397 	.word	0x08009397
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7f9 ff51 	bl	8002b58 <HAL_SD_AbortCallback>
}
 8008cb6:	e7ff      	b.n	8008cb8 <HAL_SD_IRQHandler+0x2e4>
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ce2:	0f9b      	lsrs	r3, r3, #30
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cee:	0e9b      	lsrs	r3, r3, #26
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	f003 030f 	and.w	r3, r3, #15
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d00:	0e1b      	lsrs	r3, r3, #24
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 0303 	and.w	r3, r3, #3
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d12:	0c1b      	lsrs	r3, r3, #16
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d1e:	0a1b      	lsrs	r3, r3, #8
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d34:	0d1b      	lsrs	r3, r3, #20
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d40:	0c1b      	lsrs	r3, r3, #16
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d52:	0bdb      	lsrs	r3, r3, #15
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d64:	0b9b      	lsrs	r3, r3, #14
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d76:	0b5b      	lsrs	r3, r3, #13
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d88:	0b1b      	lsrs	r3, r3, #12
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d163      	bne.n	8008e6c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008da8:	009a      	lsls	r2, r3, #2
 8008daa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008dae:	4013      	ands	r3, r2
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008db4:	0f92      	lsrs	r2, r2, #30
 8008db6:	431a      	orrs	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dc0:	0edb      	lsrs	r3, r3, #27
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	f003 0307 	and.w	r3, r3, #7
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dd2:	0e1b      	lsrs	r3, r3, #24
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	f003 0307 	and.w	r3, r3, #7
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008de4:	0d5b      	lsrs	r3, r3, #21
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	f003 0307 	and.w	r3, r3, #7
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008df6:	0c9b      	lsrs	r3, r3, #18
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e08:	0bdb      	lsrs	r3, r3, #15
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	f003 0307 	and.w	r3, r3, #7
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	7e1b      	ldrb	r3, [r3, #24]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	3302      	adds	r3, #2
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008e36:	fb03 f202 	mul.w	r2, r3, r2
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	7a1b      	ldrb	r3, [r3, #8]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	2201      	movs	r2, #1
 8008e4a:	409a      	lsls	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008e58:	0a52      	lsrs	r2, r2, #9
 8008e5a:	fb03 f202 	mul.w	r2, r3, r2
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e68:	661a      	str	r2, [r3, #96]	@ 0x60
 8008e6a:	e031      	b.n	8008ed0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d11d      	bne.n	8008eb0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e78:	041b      	lsls	r3, r3, #16
 8008e7a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e82:	0c1b      	lsrs	r3, r3, #16
 8008e84:	431a      	orrs	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	029a      	lsls	r2, r3, #10
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ea4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	661a      	str	r2, [r3, #96]	@ 0x60
 8008eae:	e00f      	b.n	8008ed0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a58      	ldr	r2, [pc, #352]	@ (8009018 <HAL_SD_GetCardCSD+0x344>)
 8008eb6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ebc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e09d      	b.n	800900c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ed4:	0b9b      	lsrs	r3, r3, #14
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ee6:	09db      	lsrs	r3, r3, #7
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f08:	0fdb      	lsrs	r3, r3, #31
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f14:	0f5b      	lsrs	r3, r3, #29
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f003 0303 	and.w	r3, r3, #3
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f26:	0e9b      	lsrs	r3, r3, #26
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	f003 0307 	and.w	r3, r3, #7
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f38:	0d9b      	lsrs	r3, r3, #22
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f4a:	0d5b      	lsrs	r3, r3, #21
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f66:	0c1b      	lsrs	r3, r3, #16
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f7a:	0bdb      	lsrs	r3, r3, #15
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f8e:	0b9b      	lsrs	r3, r3, #14
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fa2:	0b5b      	lsrs	r3, r3, #13
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fb6:	0b1b      	lsrs	r3, r3, #12
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fca:	0a9b      	lsrs	r3, r3, #10
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fde:	0a1b      	lsrs	r3, r3, #8
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ff2:	085b      	lsrs	r3, r3, #1
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	004005ff 	.word	0x004005ff

0800901c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009074:	b5b0      	push	{r4, r5, r7, lr}
 8009076:	b08e      	sub	sp, #56	@ 0x38
 8009078:	af04      	add	r7, sp, #16
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2203      	movs	r2, #3
 8009088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009090:	2b03      	cmp	r3, #3
 8009092:	d02e      	beq.n	80090f2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800909a:	d106      	bne.n	80090aa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80090a8:	e029      	b.n	80090fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090b0:	d10a      	bne.n	80090c8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fb2a 	bl	800970c <SD_WideBus_Enable>
 80090b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80090c6:	e01a      	b.n	80090fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10a      	bne.n	80090e4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fb67 	bl	80097a2 <SD_WideBus_Disable>
 80090d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80090e2:	e00c      	b.n	80090fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80090f0:	e005      	b.n	80090fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00b      	beq.n	800911e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a26      	ldr	r2, [pc, #152]	@ (80091a4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800910c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800911c:	e01f      	b.n	800915e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681d      	ldr	r5, [r3, #0]
 8009144:	466c      	mov	r4, sp
 8009146:	f107 0314 	add.w	r3, r7, #20
 800914a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800914e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009152:	f107 0308 	add.w	r3, r7, #8
 8009156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009158:	4628      	mov	r0, r5
 800915a:	f002 fc45 	bl	800b9e8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009166:	4618      	mov	r0, r3
 8009168:	f002 fd1a 	bl	800bba0 <SDMMC_CmdBlockLength>
 800916c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00c      	beq.n	800918e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a0a      	ldr	r2, [pc, #40]	@ (80091a4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800917a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	431a      	orrs	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8009196:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800919a:	4618      	mov	r0, r3
 800919c:	3728      	adds	r7, #40	@ 0x28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bdb0      	pop	{r4, r5, r7, pc}
 80091a2:	bf00      	nop
 80091a4:	004005ff 	.word	0x004005ff

080091a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80091b4:	f107 030c 	add.w	r3, r7, #12
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa7e 	bl	80096bc <SD_SendStatus>
 80091c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d005      	beq.n	80091d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	431a      	orrs	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	0a5b      	lsrs	r3, r3, #9
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80091de:	693b      	ldr	r3, [r7, #16]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009204:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009206:	bf00      	nop
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009224:	2b82      	cmp	r3, #130	@ 0x82
 8009226:	d111      	bne.n	800924c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f002 fd61 	bl	800bcf4 <SDMMC_CmdStopTransfer>
 8009232:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d008      	beq.n	800924c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	431a      	orrs	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f7ff fd3a 	bl	8008cc0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f022 0208 	bic.w	r2, r2, #8
 800925a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009264:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f7f9 fc83 	bl	8002b80 <HAL_SD_RxCpltCallback>
#endif
}
 800927a:	bf00      	nop
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009290:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7fb fbe4 	bl	8004a60 <HAL_DMA_GetError>
 8009298:	4603      	mov	r3, r0
 800929a:	2b02      	cmp	r3, #2
 800929c:	d03e      	beq.n	800931c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092a4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ac:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d002      	beq.n	80092ba <SD_DMAError+0x36>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d12d      	bne.n	8009316 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a19      	ldr	r2, [pc, #100]	@ (8009324 <SD_DMAError+0xa0>)
 80092c0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80092d0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80092de:	6978      	ldr	r0, [r7, #20]
 80092e0:	f7ff ff62 	bl	80091a8 <HAL_SD_GetCardState>
 80092e4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b06      	cmp	r3, #6
 80092ea:	d002      	beq.n	80092f2 <SD_DMAError+0x6e>
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	d10a      	bne.n	8009308 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f002 fcfc 	bl	800bcf4 <SDMMC_CmdStopTransfer>
 80092fc:	4602      	mov	r2, r0
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009302:	431a      	orrs	r2, r3
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	2200      	movs	r2, #0
 8009314:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009316:	6978      	ldr	r0, [r7, #20]
 8009318:	f7ff fcd2 	bl	8008cc0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800931c:	bf00      	nop
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	004005ff 	.word	0x004005ff

08009328 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009334:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800933e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f7ff ff31 	bl	80091a8 <HAL_SD_GetCardState>
 8009346:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b06      	cmp	r3, #6
 800935a:	d002      	beq.n	8009362 <SD_DMATxAbort+0x3a>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2b05      	cmp	r3, #5
 8009360:	d10a      	bne.n	8009378 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4618      	mov	r0, r3
 8009368:	f002 fcc4 	bl	800bcf4 <SDMMC_CmdStopTransfer>
 800936c:	4602      	mov	r2, r0
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009372:	431a      	orrs	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937c:	2b00      	cmp	r3, #0
 800937e:	d103      	bne.n	8009388 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7f9 fbe9 	bl	8002b58 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009386:	e002      	b.n	800938e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7ff fc99 	bl	8008cc0 <HAL_SD_ErrorCallback>
}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80093ac:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f7ff fefa 	bl	80091a8 <HAL_SD_GetCardState>
 80093b4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b06      	cmp	r3, #6
 80093c8:	d002      	beq.n	80093d0 <SD_DMARxAbort+0x3a>
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b05      	cmp	r3, #5
 80093ce:	d10a      	bne.n	80093e6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f002 fc8d 	bl	800bcf4 <SDMMC_CmdStopTransfer>
 80093da:	4602      	mov	r2, r0
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e0:	431a      	orrs	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d103      	bne.n	80093f6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7f9 fbb2 	bl	8002b58 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80093f4:	e002      	b.n	80093fc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f7ff fc62 	bl	8008cc0 <HAL_SD_ErrorCallback>
}
 80093fc:	bf00      	nop
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009404:	b5b0      	push	{r4, r5, r7, lr}
 8009406:	b094      	sub	sp, #80	@ 0x50
 8009408:	af04      	add	r7, sp, #16
 800940a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800940c:	2301      	movs	r3, #1
 800940e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4618      	mov	r0, r3
 8009416:	f002 fb3f 	bl	800ba98 <SDMMC_GetPowerState>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d102      	bne.n	8009426 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009420:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009424:	e0b8      	b.n	8009598 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800942a:	2b03      	cmp	r3, #3
 800942c:	d02f      	beq.n	800948e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f002 fd69 	bl	800bf0a <SDMMC_CmdSendCID>
 8009438:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800943a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <SD_InitCard+0x40>
    {
      return errorstate;
 8009440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009442:	e0a9      	b.n	8009598 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2100      	movs	r1, #0
 800944a:	4618      	mov	r0, r3
 800944c:	f002 fb69 	bl	800bb22 <SDMMC_GetResponse>
 8009450:	4602      	mov	r2, r0
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2104      	movs	r1, #4
 800945c:	4618      	mov	r0, r3
 800945e:	f002 fb60 	bl	800bb22 <SDMMC_GetResponse>
 8009462:	4602      	mov	r2, r0
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2108      	movs	r1, #8
 800946e:	4618      	mov	r0, r3
 8009470:	f002 fb57 	bl	800bb22 <SDMMC_GetResponse>
 8009474:	4602      	mov	r2, r0
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	210c      	movs	r1, #12
 8009480:	4618      	mov	r0, r3
 8009482:	f002 fb4e 	bl	800bb22 <SDMMC_GetResponse>
 8009486:	4602      	mov	r2, r0
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009492:	2b03      	cmp	r3, #3
 8009494:	d00d      	beq.n	80094b2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f107 020e 	add.w	r2, r7, #14
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f002 fd6f 	bl	800bf84 <SDMMC_CmdSetRelAdd>
 80094a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <SD_InitCard+0xae>
    {
      return errorstate;
 80094ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b0:	e072      	b.n	8009598 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d036      	beq.n	8009528 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80094ba:	89fb      	ldrh	r3, [r7, #14]
 80094bc:	461a      	mov	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	4619      	mov	r1, r3
 80094ce:	4610      	mov	r0, r2
 80094d0:	f002 fd39 	bl	800bf46 <SDMMC_CmdSendCSD>
 80094d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80094dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094de:	e05b      	b.n	8009598 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f002 fb1b 	bl	800bb22 <SDMMC_GetResponse>
 80094ec:	4602      	mov	r2, r0
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2104      	movs	r1, #4
 80094f8:	4618      	mov	r0, r3
 80094fa:	f002 fb12 	bl	800bb22 <SDMMC_GetResponse>
 80094fe:	4602      	mov	r2, r0
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2108      	movs	r1, #8
 800950a:	4618      	mov	r0, r3
 800950c:	f002 fb09 	bl	800bb22 <SDMMC_GetResponse>
 8009510:	4602      	mov	r2, r0
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	210c      	movs	r1, #12
 800951c:	4618      	mov	r0, r3
 800951e:	f002 fb00 	bl	800bb22 <SDMMC_GetResponse>
 8009522:	4602      	mov	r2, r0
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2104      	movs	r1, #4
 800952e:	4618      	mov	r0, r3
 8009530:	f002 faf7 	bl	800bb22 <SDMMC_GetResponse>
 8009534:	4603      	mov	r3, r0
 8009536:	0d1a      	lsrs	r2, r3, #20
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800953c:	f107 0310 	add.w	r3, r7, #16
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff fbc6 	bl	8008cd4 <HAL_SD_GetCardCSD>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800954e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009552:	e021      	b.n	8009598 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6819      	ldr	r1, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800955c:	041b      	lsls	r3, r3, #16
 800955e:	2200      	movs	r2, #0
 8009560:	461c      	mov	r4, r3
 8009562:	4615      	mov	r5, r2
 8009564:	4622      	mov	r2, r4
 8009566:	462b      	mov	r3, r5
 8009568:	4608      	mov	r0, r1
 800956a:	f002 fbe5 	bl	800bd38 <SDMMC_CmdSelDesel>
 800956e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <SD_InitCard+0x176>
  {
    return errorstate;
 8009576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009578:	e00e      	b.n	8009598 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681d      	ldr	r5, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	466c      	mov	r4, sp
 8009582:	f103 0210 	add.w	r2, r3, #16
 8009586:	ca07      	ldmia	r2, {r0, r1, r2}
 8009588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800958c:	3304      	adds	r3, #4
 800958e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009590:	4628      	mov	r0, r5
 8009592:	f002 fa29 	bl	800b9e8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3740      	adds	r7, #64	@ 0x40
 800959c:	46bd      	mov	sp, r7
 800959e:	bdb0      	pop	{r4, r5, r7, pc}

080095a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	617b      	str	r3, [r7, #20]
 80095b0:	2300      	movs	r3, #0
 80095b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f002 fbe0 	bl	800bd7e <SDMMC_CmdGoIdleState>
 80095be:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <SD_PowerON+0x2a>
  {
    return errorstate;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	e072      	b.n	80096b0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f002 fbf3 	bl	800bdba <SDMMC_CmdOperCond>
 80095d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00d      	beq.n	80095f8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f002 fbc9 	bl	800bd7e <SDMMC_CmdGoIdleState>
 80095ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <SD_PowerON+0x5e>
    {
      return errorstate;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	e05b      	b.n	80096b0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009602:	2b01      	cmp	r3, #1
 8009604:	d137      	bne.n	8009676 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2100      	movs	r1, #0
 800960c:	4618      	mov	r0, r3
 800960e:	f002 fbf3 	bl	800bdf8 <SDMMC_CmdAppCommand>
 8009612:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d02d      	beq.n	8009676 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800961a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800961e:	e047      	b.n	80096b0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f002 fbe6 	bl	800bdf8 <SDMMC_CmdAppCommand>
 800962c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <SD_PowerON+0x98>
    {
      return errorstate;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	e03b      	b.n	80096b0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	491e      	ldr	r1, [pc, #120]	@ (80096b8 <SD_PowerON+0x118>)
 800963e:	4618      	mov	r0, r3
 8009640:	f002 fbfc 	bl	800be3c <SDMMC_CmdAppOperCommand>
 8009644:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800964c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009650:	e02e      	b.n	80096b0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2100      	movs	r1, #0
 8009658:	4618      	mov	r0, r3
 800965a:	f002 fa62 	bl	800bb22 <SDMMC_GetResponse>
 800965e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	0fdb      	lsrs	r3, r3, #31
 8009664:	2b01      	cmp	r3, #1
 8009666:	d101      	bne.n	800966c <SD_PowerON+0xcc>
 8009668:	2301      	movs	r3, #1
 800966a:	e000      	b.n	800966e <SD_PowerON+0xce>
 800966c:	2300      	movs	r3, #0
 800966e:	613b      	str	r3, [r7, #16]

    count++;
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	3301      	adds	r3, #1
 8009674:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800967c:	4293      	cmp	r3, r2
 800967e:	d802      	bhi.n	8009686 <SD_PowerON+0xe6>
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0cc      	beq.n	8009620 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800968c:	4293      	cmp	r3, r2
 800968e:	d902      	bls.n	8009696 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009690:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009694:	e00c      	b.n	80096b0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80096a6:	e002      	b.n	80096ae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	c1100000 	.word	0xc1100000

080096bc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80096cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80096d0:	e018      	b.n	8009704 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096da:	041b      	lsls	r3, r3, #16
 80096dc:	4619      	mov	r1, r3
 80096de:	4610      	mov	r0, r2
 80096e0:	f002 fc71 	bl	800bfc6 <SDMMC_CmdSendStatus>
 80096e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	e009      	b.n	8009704 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2100      	movs	r1, #0
 80096f6:	4618      	mov	r0, r3
 80096f8:	f002 fa13 	bl	800bb22 <SDMMC_GetResponse>
 80096fc:	4602      	mov	r2, r0
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009714:	2300      	movs	r3, #0
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	2300      	movs	r3, #0
 800971a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2100      	movs	r1, #0
 8009722:	4618      	mov	r0, r3
 8009724:	f002 f9fd 	bl	800bb22 <SDMMC_GetResponse>
 8009728:	4603      	mov	r3, r0
 800972a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800972e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009732:	d102      	bne.n	800973a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009734:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009738:	e02f      	b.n	800979a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800973a:	f107 030c 	add.w	r3, r7, #12
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f879 	bl	8009838 <SD_FindSCR>
 8009746:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	e023      	b.n	800979a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d01c      	beq.n	8009796 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009764:	041b      	lsls	r3, r3, #16
 8009766:	4619      	mov	r1, r3
 8009768:	4610      	mov	r0, r2
 800976a:	f002 fb45 	bl	800bdf8 <SDMMC_CmdAppCommand>
 800976e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	e00f      	b.n	800979a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2102      	movs	r1, #2
 8009780:	4618      	mov	r0, r3
 8009782:	f002 fb7f 	bl	800be84 <SDMMC_CmdBusWidth>
 8009786:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	e003      	b.n	800979a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009792:	2300      	movs	r3, #0
 8009794:	e001      	b.n	800979a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009796:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b086      	sub	sp, #24
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
 80097ae:	2300      	movs	r3, #0
 80097b0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2100      	movs	r1, #0
 80097b8:	4618      	mov	r0, r3
 80097ba:	f002 f9b2 	bl	800bb22 <SDMMC_GetResponse>
 80097be:	4603      	mov	r3, r0
 80097c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097c8:	d102      	bne.n	80097d0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80097ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80097ce:	e02f      	b.n	8009830 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80097d0:	f107 030c 	add.w	r3, r7, #12
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f82e 	bl	8009838 <SD_FindSCR>
 80097dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	e023      	b.n	8009830 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d01c      	beq.n	800982c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097fa:	041b      	lsls	r3, r3, #16
 80097fc:	4619      	mov	r1, r3
 80097fe:	4610      	mov	r0, r2
 8009800:	f002 fafa 	bl	800bdf8 <SDMMC_CmdAppCommand>
 8009804:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	e00f      	b.n	8009830 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2100      	movs	r1, #0
 8009816:	4618      	mov	r0, r3
 8009818:	f002 fb34 	bl	800be84 <SDMMC_CmdBusWidth>
 800981c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	e003      	b.n	8009830 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009828:	2300      	movs	r3, #0
 800982a:	e001      	b.n	8009830 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800982c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009830:	4618      	mov	r0, r3
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009838:	b590      	push	{r4, r7, lr}
 800983a:	b08f      	sub	sp, #60	@ 0x3c
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009842:	f7fa f8e3 	bl	8003a0c <HAL_GetTick>
 8009846:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800984c:	2300      	movs	r3, #0
 800984e:	60bb      	str	r3, [r7, #8]
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2108      	movs	r1, #8
 800985e:	4618      	mov	r0, r3
 8009860:	f002 f99e 	bl	800bba0 <SDMMC_CmdBlockLength>
 8009864:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <SD_FindSCR+0x38>
  {
    return errorstate;
 800986c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986e:	e0b2      	b.n	80099d6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009878:	041b      	lsls	r3, r3, #16
 800987a:	4619      	mov	r1, r3
 800987c:	4610      	mov	r0, r2
 800987e:	f002 fabb 	bl	800bdf8 <SDMMC_CmdAppCommand>
 8009882:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <SD_FindSCR+0x56>
  {
    return errorstate;
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	e0a3      	b.n	80099d6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800988e:	f04f 33ff 	mov.w	r3, #4294967295
 8009892:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009894:	2308      	movs	r3, #8
 8009896:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009898:	2330      	movs	r3, #48	@ 0x30
 800989a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800989c:	2302      	movs	r3, #2
 800989e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80098a4:	2301      	movs	r3, #1
 80098a6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f107 0210 	add.w	r2, r7, #16
 80098b0:	4611      	mov	r1, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f002 f948 	bl	800bb48 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4618      	mov	r0, r3
 80098be:	f002 fb03 	bl	800bec8 <SDMMC_CmdSendSCR>
 80098c2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80098c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d02a      	beq.n	8009920 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80098ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098cc:	e083      	b.n	80099d6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00f      	beq.n	80098fc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6819      	ldr	r1, [r3, #0]
 80098e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	f107 0208 	add.w	r2, r7, #8
 80098e8:	18d4      	adds	r4, r2, r3
 80098ea:	4608      	mov	r0, r1
 80098ec:	f002 f8a8 	bl	800ba40 <SDMMC_ReadFIFO>
 80098f0:	4603      	mov	r3, r0
 80098f2:	6023      	str	r3, [r4, #0]
      index++;
 80098f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f6:	3301      	adds	r3, #1
 80098f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098fa:	e006      	b.n	800990a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d012      	beq.n	8009930 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800990a:	f7fa f87f 	bl	8003a0c <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009918:	d102      	bne.n	8009920 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800991a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800991e:	e05a      	b.n	80099d6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009926:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800992a:	2b00      	cmp	r3, #0
 800992c:	d0cf      	beq.n	80098ce <SD_FindSCR+0x96>
 800992e:	e000      	b.n	8009932 <SD_FindSCR+0xfa>
      break;
 8009930:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009938:	f003 0308 	and.w	r3, r3, #8
 800993c:	2b00      	cmp	r3, #0
 800993e:	d005      	beq.n	800994c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2208      	movs	r2, #8
 8009946:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009948:	2308      	movs	r3, #8
 800994a:	e044      	b.n	80099d6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009952:	f003 0302 	and.w	r3, r3, #2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d005      	beq.n	8009966 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2202      	movs	r2, #2
 8009960:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009962:	2302      	movs	r3, #2
 8009964:	e037      	b.n	80099d6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800996c:	f003 0320 	and.w	r3, r3, #32
 8009970:	2b00      	cmp	r3, #0
 8009972:	d005      	beq.n	8009980 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2220      	movs	r2, #32
 800997a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800997c:	2320      	movs	r3, #32
 800997e:	e02a      	b.n	80099d6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009988:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	061a      	lsls	r2, r3, #24
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	021b      	lsls	r3, r3, #8
 8009992:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009996:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	0a1b      	lsrs	r3, r3, #8
 800999c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80099a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	0e1b      	lsrs	r3, r3, #24
 80099a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80099a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099aa:	601a      	str	r2, [r3, #0]
    scr++;
 80099ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ae:	3304      	adds	r3, #4
 80099b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	061a      	lsls	r2, r3, #24
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	021b      	lsls	r3, r3, #8
 80099ba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80099be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	0a1b      	lsrs	r3, r3, #8
 80099c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	0e1b      	lsrs	r3, r3, #24
 80099ce:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80099d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	373c      	adds	r7, #60	@ 0x3c
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd90      	pop	{r4, r7, pc}

080099de <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b086      	sub	sp, #24
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d03f      	beq.n	8009a78 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80099f8:	2300      	movs	r3, #0
 80099fa:	617b      	str	r3, [r7, #20]
 80099fc:	e033      	b.n	8009a66 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f002 f81c 	bl	800ba40 <SDMMC_ReadFIFO>
 8009a08:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3301      	adds	r3, #1
 8009a16:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	0a1b      	lsrs	r3, r3, #8
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	3b01      	subs	r3, #1
 8009a32:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	0c1b      	lsrs	r3, r3, #16
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3301      	adds	r3, #1
 8009a42:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	0e1b      	lsrs	r3, r3, #24
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	3301      	adds	r3, #1
 8009a64:	617b      	str	r3, [r7, #20]
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b07      	cmp	r3, #7
 8009a6a:	d9c8      	bls.n	80099fe <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8009a78:	bf00      	nop
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a1b      	ldr	r3, [r3, #32]
 8009a8c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a92:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d043      	beq.n	8009b22 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	617b      	str	r3, [r7, #20]
 8009a9e:	e037      	b.n	8009b10 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	021a      	lsls	r2, r3, #8
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	041a      	lsls	r2, r3, #16
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	061a      	lsls	r2, r3, #24
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	3301      	adds	r3, #1
 8009af2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f107 0208 	add.w	r2, r7, #8
 8009b02:	4611      	mov	r1, r2
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 ffa8 	bl	800ba5a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	2b07      	cmp	r3, #7
 8009b14:	d9c4      	bls.n	8009aa0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8009b22:	bf00      	nop
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e025      	b.n	8009b8a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d106      	bne.n	8009b58 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7f7 f9ae 	bl	8000eb4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3304      	adds	r3, #4
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	f001 fe76 	bl	800b85c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	f001 feca 	bl	800b914 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e04c      	b.n	8009c40 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d106      	bne.n	8009bc0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7f8 fda4 	bl	8002708 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0203 	bic.w	r2, r2, #3
 8009bd6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	4b19      	ldr	r3, [pc, #100]	@ (8009c48 <HAL_SPDIFRX_Init+0xb4>)
 8009be4:	4013      	ands	r3, r2
 8009be6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009bf0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009bf6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009bfc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009c02:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009c08:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009c0e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009c14:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8009c1a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8009c20:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	fff88407 	.word	0xfff88407

08009c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e049      	b.n	8009cf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d106      	bne.n	8009c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7f9 fbe6 	bl	8003444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3304      	adds	r3, #4
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	f000 fc12 	bl	800a4b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d001      	beq.n	8009d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e054      	b.n	8009dbe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2202      	movs	r2, #2
 8009d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68da      	ldr	r2, [r3, #12]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f042 0201 	orr.w	r2, r2, #1
 8009d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a26      	ldr	r2, [pc, #152]	@ (8009dcc <HAL_TIM_Base_Start_IT+0xd0>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d022      	beq.n	8009d7c <HAL_TIM_Base_Start_IT+0x80>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d3e:	d01d      	beq.n	8009d7c <HAL_TIM_Base_Start_IT+0x80>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a22      	ldr	r2, [pc, #136]	@ (8009dd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d018      	beq.n	8009d7c <HAL_TIM_Base_Start_IT+0x80>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a21      	ldr	r2, [pc, #132]	@ (8009dd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d013      	beq.n	8009d7c <HAL_TIM_Base_Start_IT+0x80>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a1f      	ldr	r2, [pc, #124]	@ (8009dd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00e      	beq.n	8009d7c <HAL_TIM_Base_Start_IT+0x80>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a1e      	ldr	r2, [pc, #120]	@ (8009ddc <HAL_TIM_Base_Start_IT+0xe0>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d009      	beq.n	8009d7c <HAL_TIM_Base_Start_IT+0x80>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8009de0 <HAL_TIM_Base_Start_IT+0xe4>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d004      	beq.n	8009d7c <HAL_TIM_Base_Start_IT+0x80>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a1b      	ldr	r2, [pc, #108]	@ (8009de4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d115      	bne.n	8009da8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689a      	ldr	r2, [r3, #8]
 8009d82:	4b19      	ldr	r3, [pc, #100]	@ (8009de8 <HAL_TIM_Base_Start_IT+0xec>)
 8009d84:	4013      	ands	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b06      	cmp	r3, #6
 8009d8c:	d015      	beq.n	8009dba <HAL_TIM_Base_Start_IT+0xbe>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d94:	d011      	beq.n	8009dba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f042 0201 	orr.w	r2, r2, #1
 8009da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009da6:	e008      	b.n	8009dba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f042 0201 	orr.w	r2, r2, #1
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	e000      	b.n	8009dbc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	40010000 	.word	0x40010000
 8009dd0:	40000400 	.word	0x40000400
 8009dd4:	40000800 	.word	0x40000800
 8009dd8:	40000c00 	.word	0x40000c00
 8009ddc:	40010400 	.word	0x40010400
 8009de0:	40014000 	.word	0x40014000
 8009de4:	40001800 	.word	0x40001800
 8009de8:	00010007 	.word	0x00010007

08009dec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e049      	b.n	8009e92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d106      	bne.n	8009e18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7f9 fb84 	bl	8003520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3304      	adds	r3, #4
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f000 fb42 	bl	800a4b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d020      	beq.n	8009efe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f003 0302 	and.w	r3, r3, #2
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d01b      	beq.n	8009efe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f06f 0202 	mvn.w	r2, #2
 8009ece:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	f003 0303 	and.w	r3, r3, #3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d003      	beq.n	8009eec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fac7 	bl	800a478 <HAL_TIM_IC_CaptureCallback>
 8009eea:	e005      	b.n	8009ef8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fab9 	bl	800a464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 faca 	bl	800a48c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d020      	beq.n	8009f4a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d01b      	beq.n	8009f4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f06f 0204 	mvn.w	r2, #4
 8009f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 faa1 	bl	800a478 <HAL_TIM_IC_CaptureCallback>
 8009f36:	e005      	b.n	8009f44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fa93 	bl	800a464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 faa4 	bl	800a48c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	f003 0308 	and.w	r3, r3, #8
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d020      	beq.n	8009f96 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f003 0308 	and.w	r3, r3, #8
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d01b      	beq.n	8009f96 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f06f 0208 	mvn.w	r2, #8
 8009f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2204      	movs	r2, #4
 8009f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	69db      	ldr	r3, [r3, #28]
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fa7b 	bl	800a478 <HAL_TIM_IC_CaptureCallback>
 8009f82:	e005      	b.n	8009f90 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fa6d 	bl	800a464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fa7e 	bl	800a48c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	f003 0310 	and.w	r3, r3, #16
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d020      	beq.n	8009fe2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f003 0310 	and.w	r3, r3, #16
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d01b      	beq.n	8009fe2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f06f 0210 	mvn.w	r2, #16
 8009fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2208      	movs	r2, #8
 8009fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	69db      	ldr	r3, [r3, #28]
 8009fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fa55 	bl	800a478 <HAL_TIM_IC_CaptureCallback>
 8009fce:	e005      	b.n	8009fdc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fa47 	bl	800a464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fa58 	bl	800a48c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00c      	beq.n	800a006 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d007      	beq.n	800a006 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f06f 0201 	mvn.w	r2, #1
 8009ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7f7 fe09 	bl	8001c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d104      	bne.n	800a01a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00c      	beq.n	800a034 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a020:	2b00      	cmp	r3, #0
 800a022:	d007      	beq.n	800a034 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a02c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fefa 	bl	800ae28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00c      	beq.n	800a058 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a044:	2b00      	cmp	r3, #0
 800a046:	d007      	beq.n	800a058 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fef2 	bl	800ae3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00c      	beq.n	800a07c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d007      	beq.n	800a07c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fa12 	bl	800a4a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f003 0320 	and.w	r3, r3, #32
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00c      	beq.n	800a0a0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d007      	beq.n	800a0a0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f06f 0220 	mvn.w	r2, #32
 800a098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 feba 	bl	800ae14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0a0:	bf00      	nop
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d101      	bne.n	800a0c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	e0ff      	b.n	800a2c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b14      	cmp	r3, #20
 800a0d2:	f200 80f0 	bhi.w	800a2b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a0d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a131 	.word	0x0800a131
 800a0e0:	0800a2b7 	.word	0x0800a2b7
 800a0e4:	0800a2b7 	.word	0x0800a2b7
 800a0e8:	0800a2b7 	.word	0x0800a2b7
 800a0ec:	0800a171 	.word	0x0800a171
 800a0f0:	0800a2b7 	.word	0x0800a2b7
 800a0f4:	0800a2b7 	.word	0x0800a2b7
 800a0f8:	0800a2b7 	.word	0x0800a2b7
 800a0fc:	0800a1b3 	.word	0x0800a1b3
 800a100:	0800a2b7 	.word	0x0800a2b7
 800a104:	0800a2b7 	.word	0x0800a2b7
 800a108:	0800a2b7 	.word	0x0800a2b7
 800a10c:	0800a1f3 	.word	0x0800a1f3
 800a110:	0800a2b7 	.word	0x0800a2b7
 800a114:	0800a2b7 	.word	0x0800a2b7
 800a118:	0800a2b7 	.word	0x0800a2b7
 800a11c:	0800a235 	.word	0x0800a235
 800a120:	0800a2b7 	.word	0x0800a2b7
 800a124:	0800a2b7 	.word	0x0800a2b7
 800a128:	0800a2b7 	.word	0x0800a2b7
 800a12c:	0800a275 	.word	0x0800a275
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68b9      	ldr	r1, [r7, #8]
 800a136:	4618      	mov	r0, r3
 800a138:	f000 fa68 	bl	800a60c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	699a      	ldr	r2, [r3, #24]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f042 0208 	orr.w	r2, r2, #8
 800a14a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	699a      	ldr	r2, [r3, #24]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f022 0204 	bic.w	r2, r2, #4
 800a15a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6999      	ldr	r1, [r3, #24]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	691a      	ldr	r2, [r3, #16]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	619a      	str	r2, [r3, #24]
      break;
 800a16e:	e0a5      	b.n	800a2bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68b9      	ldr	r1, [r7, #8]
 800a176:	4618      	mov	r0, r3
 800a178:	f000 faba 	bl	800a6f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	699a      	ldr	r2, [r3, #24]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a18a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	699a      	ldr	r2, [r3, #24]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a19a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6999      	ldr	r1, [r3, #24]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	021a      	lsls	r2, r3, #8
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	430a      	orrs	r2, r1
 800a1ae:	619a      	str	r2, [r3, #24]
      break;
 800a1b0:	e084      	b.n	800a2bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68b9      	ldr	r1, [r7, #8]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 fb11 	bl	800a7e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	69da      	ldr	r2, [r3, #28]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f042 0208 	orr.w	r2, r2, #8
 800a1cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	69da      	ldr	r2, [r3, #28]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f022 0204 	bic.w	r2, r2, #4
 800a1dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	69d9      	ldr	r1, [r3, #28]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	691a      	ldr	r2, [r3, #16]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	61da      	str	r2, [r3, #28]
      break;
 800a1f0:	e064      	b.n	800a2bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 fb67 	bl	800a8cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	69da      	ldr	r2, [r3, #28]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a20c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	69da      	ldr	r2, [r3, #28]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a21c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69d9      	ldr	r1, [r3, #28]
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	021a      	lsls	r2, r3, #8
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	61da      	str	r2, [r3, #28]
      break;
 800a232:	e043      	b.n	800a2bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68b9      	ldr	r1, [r7, #8]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 fb9e 	bl	800a97c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f042 0208 	orr.w	r2, r2, #8
 800a24e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f022 0204 	bic.w	r2, r2, #4
 800a25e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	691a      	ldr	r2, [r3, #16]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a272:	e023      	b.n	800a2bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68b9      	ldr	r1, [r7, #8]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fbd0 	bl	800aa20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a28e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a29e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	021a      	lsls	r2, r3, #8
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	430a      	orrs	r2, r1
 800a2b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a2b4:	e002      	b.n	800a2bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop

0800a2d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d101      	bne.n	800a2ec <HAL_TIM_ConfigClockSource+0x1c>
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	e0b4      	b.n	800a456 <HAL_TIM_ConfigClockSource+0x186>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	4b56      	ldr	r3, [pc, #344]	@ (800a460 <HAL_TIM_ConfigClockSource+0x190>)
 800a308:	4013      	ands	r3, r2
 800a30a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a324:	d03e      	beq.n	800a3a4 <HAL_TIM_ConfigClockSource+0xd4>
 800a326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a32a:	f200 8087 	bhi.w	800a43c <HAL_TIM_ConfigClockSource+0x16c>
 800a32e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a332:	f000 8086 	beq.w	800a442 <HAL_TIM_ConfigClockSource+0x172>
 800a336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a33a:	d87f      	bhi.n	800a43c <HAL_TIM_ConfigClockSource+0x16c>
 800a33c:	2b70      	cmp	r3, #112	@ 0x70
 800a33e:	d01a      	beq.n	800a376 <HAL_TIM_ConfigClockSource+0xa6>
 800a340:	2b70      	cmp	r3, #112	@ 0x70
 800a342:	d87b      	bhi.n	800a43c <HAL_TIM_ConfigClockSource+0x16c>
 800a344:	2b60      	cmp	r3, #96	@ 0x60
 800a346:	d050      	beq.n	800a3ea <HAL_TIM_ConfigClockSource+0x11a>
 800a348:	2b60      	cmp	r3, #96	@ 0x60
 800a34a:	d877      	bhi.n	800a43c <HAL_TIM_ConfigClockSource+0x16c>
 800a34c:	2b50      	cmp	r3, #80	@ 0x50
 800a34e:	d03c      	beq.n	800a3ca <HAL_TIM_ConfigClockSource+0xfa>
 800a350:	2b50      	cmp	r3, #80	@ 0x50
 800a352:	d873      	bhi.n	800a43c <HAL_TIM_ConfigClockSource+0x16c>
 800a354:	2b40      	cmp	r3, #64	@ 0x40
 800a356:	d058      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x13a>
 800a358:	2b40      	cmp	r3, #64	@ 0x40
 800a35a:	d86f      	bhi.n	800a43c <HAL_TIM_ConfigClockSource+0x16c>
 800a35c:	2b30      	cmp	r3, #48	@ 0x30
 800a35e:	d064      	beq.n	800a42a <HAL_TIM_ConfigClockSource+0x15a>
 800a360:	2b30      	cmp	r3, #48	@ 0x30
 800a362:	d86b      	bhi.n	800a43c <HAL_TIM_ConfigClockSource+0x16c>
 800a364:	2b20      	cmp	r3, #32
 800a366:	d060      	beq.n	800a42a <HAL_TIM_ConfigClockSource+0x15a>
 800a368:	2b20      	cmp	r3, #32
 800a36a:	d867      	bhi.n	800a43c <HAL_TIM_ConfigClockSource+0x16c>
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d05c      	beq.n	800a42a <HAL_TIM_ConfigClockSource+0x15a>
 800a370:	2b10      	cmp	r3, #16
 800a372:	d05a      	beq.n	800a42a <HAL_TIM_ConfigClockSource+0x15a>
 800a374:	e062      	b.n	800a43c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a386:	f000 fc19 	bl	800abbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	609a      	str	r2, [r3, #8]
      break;
 800a3a2:	e04f      	b.n	800a444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3b4:	f000 fc02 	bl	800abbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689a      	ldr	r2, [r3, #8]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a3c6:	609a      	str	r2, [r3, #8]
      break;
 800a3c8:	e03c      	b.n	800a444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f000 fb76 	bl	800aac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2150      	movs	r1, #80	@ 0x50
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fbcf 	bl	800ab86 <TIM_ITRx_SetConfig>
      break;
 800a3e8:	e02c      	b.n	800a444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	f000 fb95 	bl	800ab26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2160      	movs	r1, #96	@ 0x60
 800a402:	4618      	mov	r0, r3
 800a404:	f000 fbbf 	bl	800ab86 <TIM_ITRx_SetConfig>
      break;
 800a408:	e01c      	b.n	800a444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a416:	461a      	mov	r2, r3
 800a418:	f000 fb56 	bl	800aac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2140      	movs	r1, #64	@ 0x40
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fbaf 	bl	800ab86 <TIM_ITRx_SetConfig>
      break;
 800a428:	e00c      	b.n	800a444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4619      	mov	r1, r3
 800a434:	4610      	mov	r0, r2
 800a436:	f000 fba6 	bl	800ab86 <TIM_ITRx_SetConfig>
      break;
 800a43a:	e003      	b.n	800a444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	73fb      	strb	r3, [r7, #15]
      break;
 800a440:	e000      	b.n	800a444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a454:	7bfb      	ldrb	r3, [r7, #15]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	fffeff88 	.word	0xfffeff88

0800a464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a46      	ldr	r2, [pc, #280]	@ (800a5e0 <TIM_Base_SetConfig+0x12c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d013      	beq.n	800a4f4 <TIM_Base_SetConfig+0x40>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4d2:	d00f      	beq.n	800a4f4 <TIM_Base_SetConfig+0x40>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a43      	ldr	r2, [pc, #268]	@ (800a5e4 <TIM_Base_SetConfig+0x130>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d00b      	beq.n	800a4f4 <TIM_Base_SetConfig+0x40>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a42      	ldr	r2, [pc, #264]	@ (800a5e8 <TIM_Base_SetConfig+0x134>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d007      	beq.n	800a4f4 <TIM_Base_SetConfig+0x40>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a41      	ldr	r2, [pc, #260]	@ (800a5ec <TIM_Base_SetConfig+0x138>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d003      	beq.n	800a4f4 <TIM_Base_SetConfig+0x40>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a40      	ldr	r2, [pc, #256]	@ (800a5f0 <TIM_Base_SetConfig+0x13c>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d108      	bne.n	800a506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	4313      	orrs	r3, r2
 800a504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a35      	ldr	r2, [pc, #212]	@ (800a5e0 <TIM_Base_SetConfig+0x12c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d02b      	beq.n	800a566 <TIM_Base_SetConfig+0xb2>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a514:	d027      	beq.n	800a566 <TIM_Base_SetConfig+0xb2>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a32      	ldr	r2, [pc, #200]	@ (800a5e4 <TIM_Base_SetConfig+0x130>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d023      	beq.n	800a566 <TIM_Base_SetConfig+0xb2>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a31      	ldr	r2, [pc, #196]	@ (800a5e8 <TIM_Base_SetConfig+0x134>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d01f      	beq.n	800a566 <TIM_Base_SetConfig+0xb2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a30      	ldr	r2, [pc, #192]	@ (800a5ec <TIM_Base_SetConfig+0x138>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d01b      	beq.n	800a566 <TIM_Base_SetConfig+0xb2>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a2f      	ldr	r2, [pc, #188]	@ (800a5f0 <TIM_Base_SetConfig+0x13c>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d017      	beq.n	800a566 <TIM_Base_SetConfig+0xb2>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a2e      	ldr	r2, [pc, #184]	@ (800a5f4 <TIM_Base_SetConfig+0x140>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d013      	beq.n	800a566 <TIM_Base_SetConfig+0xb2>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a2d      	ldr	r2, [pc, #180]	@ (800a5f8 <TIM_Base_SetConfig+0x144>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d00f      	beq.n	800a566 <TIM_Base_SetConfig+0xb2>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a2c      	ldr	r2, [pc, #176]	@ (800a5fc <TIM_Base_SetConfig+0x148>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d00b      	beq.n	800a566 <TIM_Base_SetConfig+0xb2>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a2b      	ldr	r2, [pc, #172]	@ (800a600 <TIM_Base_SetConfig+0x14c>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d007      	beq.n	800a566 <TIM_Base_SetConfig+0xb2>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a2a      	ldr	r2, [pc, #168]	@ (800a604 <TIM_Base_SetConfig+0x150>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d003      	beq.n	800a566 <TIM_Base_SetConfig+0xb2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a29      	ldr	r2, [pc, #164]	@ (800a608 <TIM_Base_SetConfig+0x154>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d108      	bne.n	800a578 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a56c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	4313      	orrs	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	4313      	orrs	r3, r2
 800a584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	689a      	ldr	r2, [r3, #8]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a10      	ldr	r2, [pc, #64]	@ (800a5e0 <TIM_Base_SetConfig+0x12c>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d003      	beq.n	800a5ac <TIM_Base_SetConfig+0xf8>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a12      	ldr	r2, [pc, #72]	@ (800a5f0 <TIM_Base_SetConfig+0x13c>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d103      	bne.n	800a5b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	691a      	ldr	r2, [r3, #16]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d105      	bne.n	800a5d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	f023 0201 	bic.w	r2, r3, #1
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	611a      	str	r2, [r3, #16]
  }
}
 800a5d2:	bf00      	nop
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	40010000 	.word	0x40010000
 800a5e4:	40000400 	.word	0x40000400
 800a5e8:	40000800 	.word	0x40000800
 800a5ec:	40000c00 	.word	0x40000c00
 800a5f0:	40010400 	.word	0x40010400
 800a5f4:	40014000 	.word	0x40014000
 800a5f8:	40014400 	.word	0x40014400
 800a5fc:	40014800 	.word	0x40014800
 800a600:	40001800 	.word	0x40001800
 800a604:	40001c00 	.word	0x40001c00
 800a608:	40002000 	.word	0x40002000

0800a60c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a1b      	ldr	r3, [r3, #32]
 800a61a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a1b      	ldr	r3, [r3, #32]
 800a620:	f023 0201 	bic.w	r2, r3, #1
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	4b2b      	ldr	r3, [pc, #172]	@ (800a6e4 <TIM_OC1_SetConfig+0xd8>)
 800a638:	4013      	ands	r3, r2
 800a63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f023 0303 	bic.w	r3, r3, #3
 800a642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f023 0302 	bic.w	r3, r3, #2
 800a654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a21      	ldr	r2, [pc, #132]	@ (800a6e8 <TIM_OC1_SetConfig+0xdc>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d003      	beq.n	800a670 <TIM_OC1_SetConfig+0x64>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a20      	ldr	r2, [pc, #128]	@ (800a6ec <TIM_OC1_SetConfig+0xe0>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d10c      	bne.n	800a68a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f023 0308 	bic.w	r3, r3, #8
 800a676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	4313      	orrs	r3, r2
 800a680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f023 0304 	bic.w	r3, r3, #4
 800a688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a16      	ldr	r2, [pc, #88]	@ (800a6e8 <TIM_OC1_SetConfig+0xdc>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d003      	beq.n	800a69a <TIM_OC1_SetConfig+0x8e>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a15      	ldr	r2, [pc, #84]	@ (800a6ec <TIM_OC1_SetConfig+0xe0>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d111      	bne.n	800a6be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	621a      	str	r2, [r3, #32]
}
 800a6d8:	bf00      	nop
 800a6da:	371c      	adds	r7, #28
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr
 800a6e4:	fffeff8f 	.word	0xfffeff8f
 800a6e8:	40010000 	.word	0x40010000
 800a6ec:	40010400 	.word	0x40010400

0800a6f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a1b      	ldr	r3, [r3, #32]
 800a704:	f023 0210 	bic.w	r2, r3, #16
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4b2e      	ldr	r3, [pc, #184]	@ (800a7d4 <TIM_OC2_SetConfig+0xe4>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	021b      	lsls	r3, r3, #8
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	4313      	orrs	r3, r2
 800a732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	f023 0320 	bic.w	r3, r3, #32
 800a73a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	011b      	lsls	r3, r3, #4
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	4313      	orrs	r3, r2
 800a746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a23      	ldr	r2, [pc, #140]	@ (800a7d8 <TIM_OC2_SetConfig+0xe8>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d003      	beq.n	800a758 <TIM_OC2_SetConfig+0x68>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a22      	ldr	r2, [pc, #136]	@ (800a7dc <TIM_OC2_SetConfig+0xec>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d10d      	bne.n	800a774 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a75e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	011b      	lsls	r3, r3, #4
 800a766:	697a      	ldr	r2, [r7, #20]
 800a768:	4313      	orrs	r3, r2
 800a76a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a772:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a18      	ldr	r2, [pc, #96]	@ (800a7d8 <TIM_OC2_SetConfig+0xe8>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d003      	beq.n	800a784 <TIM_OC2_SetConfig+0x94>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a17      	ldr	r2, [pc, #92]	@ (800a7dc <TIM_OC2_SetConfig+0xec>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d113      	bne.n	800a7ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a78a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	693a      	ldr	r2, [r7, #16]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	699b      	ldr	r3, [r3, #24]
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	621a      	str	r2, [r3, #32]
}
 800a7c6:	bf00      	nop
 800a7c8:	371c      	adds	r7, #28
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	feff8fff 	.word	0xfeff8fff
 800a7d8:	40010000 	.word	0x40010000
 800a7dc:	40010400 	.word	0x40010400

0800a7e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	69db      	ldr	r3, [r3, #28]
 800a806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	4b2d      	ldr	r3, [pc, #180]	@ (800a8c0 <TIM_OC3_SetConfig+0xe0>)
 800a80c:	4013      	ands	r3, r2
 800a80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f023 0303 	bic.w	r3, r3, #3
 800a816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	4313      	orrs	r3, r2
 800a820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	021b      	lsls	r3, r3, #8
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	4313      	orrs	r3, r2
 800a834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a22      	ldr	r2, [pc, #136]	@ (800a8c4 <TIM_OC3_SetConfig+0xe4>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d003      	beq.n	800a846 <TIM_OC3_SetConfig+0x66>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a21      	ldr	r2, [pc, #132]	@ (800a8c8 <TIM_OC3_SetConfig+0xe8>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d10d      	bne.n	800a862 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a84c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	4313      	orrs	r3, r2
 800a858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a17      	ldr	r2, [pc, #92]	@ (800a8c4 <TIM_OC3_SetConfig+0xe4>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d003      	beq.n	800a872 <TIM_OC3_SetConfig+0x92>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a16      	ldr	r2, [pc, #88]	@ (800a8c8 <TIM_OC3_SetConfig+0xe8>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d113      	bne.n	800a89a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	011b      	lsls	r3, r3, #4
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	011b      	lsls	r3, r3, #4
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	4313      	orrs	r3, r2
 800a898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	697a      	ldr	r2, [r7, #20]
 800a8b2:	621a      	str	r2, [r3, #32]
}
 800a8b4:	bf00      	nop
 800a8b6:	371c      	adds	r7, #28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	fffeff8f 	.word	0xfffeff8f
 800a8c4:	40010000 	.word	0x40010000
 800a8c8:	40010400 	.word	0x40010400

0800a8cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a1b      	ldr	r3, [r3, #32]
 800a8e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	69db      	ldr	r3, [r3, #28]
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	4b1e      	ldr	r3, [pc, #120]	@ (800a970 <TIM_OC4_SetConfig+0xa4>)
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	021b      	lsls	r3, r3, #8
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	031b      	lsls	r3, r3, #12
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	4313      	orrs	r3, r2
 800a922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a13      	ldr	r2, [pc, #76]	@ (800a974 <TIM_OC4_SetConfig+0xa8>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d003      	beq.n	800a934 <TIM_OC4_SetConfig+0x68>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a12      	ldr	r2, [pc, #72]	@ (800a978 <TIM_OC4_SetConfig+0xac>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d109      	bne.n	800a948 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a93a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	019b      	lsls	r3, r3, #6
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	4313      	orrs	r3, r2
 800a946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	621a      	str	r2, [r3, #32]
}
 800a962:	bf00      	nop
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	feff8fff 	.word	0xfeff8fff
 800a974:	40010000 	.word	0x40010000
 800a978:	40010400 	.word	0x40010400

0800a97c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a1b      	ldr	r3, [r3, #32]
 800a990:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	4b1b      	ldr	r3, [pc, #108]	@ (800aa14 <TIM_OC5_SetConfig+0x98>)
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a9bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	041b      	lsls	r3, r3, #16
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a12      	ldr	r2, [pc, #72]	@ (800aa18 <TIM_OC5_SetConfig+0x9c>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d003      	beq.n	800a9da <TIM_OC5_SetConfig+0x5e>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a11      	ldr	r2, [pc, #68]	@ (800aa1c <TIM_OC5_SetConfig+0xa0>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d109      	bne.n	800a9ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	021b      	lsls	r3, r3, #8
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	621a      	str	r2, [r3, #32]
}
 800aa08:	bf00      	nop
 800aa0a:	371c      	adds	r7, #28
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	fffeff8f 	.word	0xfffeff8f
 800aa18:	40010000 	.word	0x40010000
 800aa1c:	40010400 	.word	0x40010400

0800aa20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4b1c      	ldr	r3, [pc, #112]	@ (800aabc <TIM_OC6_SetConfig+0x9c>)
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	021b      	lsls	r3, r3, #8
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aa62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	051b      	lsls	r3, r3, #20
 800aa6a:	693a      	ldr	r2, [r7, #16]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a13      	ldr	r2, [pc, #76]	@ (800aac0 <TIM_OC6_SetConfig+0xa0>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d003      	beq.n	800aa80 <TIM_OC6_SetConfig+0x60>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a12      	ldr	r2, [pc, #72]	@ (800aac4 <TIM_OC6_SetConfig+0xa4>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d109      	bne.n	800aa94 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aa86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	695b      	ldr	r3, [r3, #20]
 800aa8c:	029b      	lsls	r3, r3, #10
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	621a      	str	r2, [r3, #32]
}
 800aaae:	bf00      	nop
 800aab0:	371c      	adds	r7, #28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	feff8fff 	.word	0xfeff8fff
 800aac0:	40010000 	.word	0x40010000
 800aac4:	40010400 	.word	0x40010400

0800aac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b087      	sub	sp, #28
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6a1b      	ldr	r3, [r3, #32]
 800aad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	f023 0201 	bic.w	r2, r3, #1
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aaf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	011b      	lsls	r3, r3, #4
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f023 030a 	bic.w	r3, r3, #10
 800ab04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	621a      	str	r2, [r3, #32]
}
 800ab1a:	bf00      	nop
 800ab1c:	371c      	adds	r7, #28
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b087      	sub	sp, #28
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	60f8      	str	r0, [r7, #12]
 800ab2e:	60b9      	str	r1, [r7, #8]
 800ab30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	f023 0210 	bic.w	r2, r3, #16
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ab50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	031b      	lsls	r3, r3, #12
 800ab56:	693a      	ldr	r2, [r7, #16]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ab62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	011b      	lsls	r3, r3, #4
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	621a      	str	r2, [r3, #32]
}
 800ab7a:	bf00      	nop
 800ab7c:	371c      	adds	r7, #28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b085      	sub	sp, #20
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	f043 0307 	orr.w	r3, r3, #7
 800aba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	609a      	str	r2, [r3, #8]
}
 800abb0:	bf00      	nop
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800abd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	021a      	lsls	r2, r3, #8
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	431a      	orrs	r2, r3
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	697a      	ldr	r2, [r7, #20]
 800abee:	609a      	str	r2, [r3, #8]
}
 800abf0:	bf00      	nop
 800abf2:	371c      	adds	r7, #28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d101      	bne.n	800ac14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac10:	2302      	movs	r3, #2
 800ac12:	e06d      	b.n	800acf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2202      	movs	r2, #2
 800ac20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a30      	ldr	r2, [pc, #192]	@ (800acfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d004      	beq.n	800ac48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a2f      	ldr	r2, [pc, #188]	@ (800ad00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d108      	bne.n	800ac5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ac4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a20      	ldr	r2, [pc, #128]	@ (800acfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d022      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac86:	d01d      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ad04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d018      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a1c      	ldr	r2, [pc, #112]	@ (800ad08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d013      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a1a      	ldr	r2, [pc, #104]	@ (800ad0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d00e      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a15      	ldr	r2, [pc, #84]	@ (800ad00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d009      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a16      	ldr	r2, [pc, #88]	@ (800ad10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d004      	beq.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a15      	ldr	r2, [pc, #84]	@ (800ad14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d10c      	bne.n	800acde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	40010000 	.word	0x40010000
 800ad00:	40010400 	.word	0x40010400
 800ad04:	40000400 	.word	0x40000400
 800ad08:	40000800 	.word	0x40000800
 800ad0c:	40000c00 	.word	0x40000c00
 800ad10:	40014000 	.word	0x40014000
 800ad14:	40001800 	.word	0x40001800

0800ad18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ad22:	2300      	movs	r3, #0
 800ad24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d101      	bne.n	800ad34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ad30:	2302      	movs	r3, #2
 800ad32:	e065      	b.n	800ae00 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	041b      	lsls	r3, r3, #16
 800adaa:	4313      	orrs	r3, r2
 800adac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a16      	ldr	r2, [pc, #88]	@ (800ae0c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d004      	beq.n	800adc2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a14      	ldr	r2, [pc, #80]	@ (800ae10 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d115      	bne.n	800adee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adcc:	051b      	lsls	r3, r3, #20
 800adce:	4313      	orrs	r3, r2
 800add0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	69db      	ldr	r3, [r3, #28]
 800addc:	4313      	orrs	r3, r2
 800adde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	4313      	orrs	r3, r2
 800adec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	40010000 	.word	0x40010000
 800ae10:	40010400 	.word	0x40010400

0800ae14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d101      	bne.n	800ae62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e040      	b.n	800aee4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d106      	bne.n	800ae78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7f8 fca2 	bl	80037bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2224      	movs	r2, #36	@ 0x24
 800ae7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f022 0201 	bic.w	r2, r2, #1
 800ae8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d002      	beq.n	800ae9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fb16 	bl	800b4c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f8af 	bl	800b000 <UART_SetConfig>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d101      	bne.n	800aeac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e01b      	b.n	800aee4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800aeba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	689a      	ldr	r2, [r3, #8]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aeca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f042 0201 	orr.w	r2, r2, #1
 800aeda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fb95 	bl	800b60c <UART_CheckIdleState>
 800aee2:	4603      	mov	r3, r0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08a      	sub	sp, #40	@ 0x28
 800aef0:	af02      	add	r7, sp, #8
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	603b      	str	r3, [r7, #0]
 800aef8:	4613      	mov	r3, r2
 800aefa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af00:	2b20      	cmp	r3, #32
 800af02:	d177      	bne.n	800aff4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d002      	beq.n	800af10 <HAL_UART_Transmit+0x24>
 800af0a:	88fb      	ldrh	r3, [r7, #6]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	e070      	b.n	800aff6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2221      	movs	r2, #33	@ 0x21
 800af20:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af22:	f7f8 fd73 	bl	8003a0c <HAL_GetTick>
 800af26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	88fa      	ldrh	r2, [r7, #6]
 800af2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	88fa      	ldrh	r2, [r7, #6]
 800af34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af40:	d108      	bne.n	800af54 <HAL_UART_Transmit+0x68>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d104      	bne.n	800af54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	61bb      	str	r3, [r7, #24]
 800af52:	e003      	b.n	800af5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af58:	2300      	movs	r3, #0
 800af5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af5c:	e02f      	b.n	800afbe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	2200      	movs	r2, #0
 800af66:	2180      	movs	r1, #128	@ 0x80
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 fba6 	bl	800b6ba <UART_WaitOnFlagUntilTimeout>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d004      	beq.n	800af7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2220      	movs	r2, #32
 800af78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e03b      	b.n	800aff6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10b      	bne.n	800af9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	461a      	mov	r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	3302      	adds	r3, #2
 800af98:	61bb      	str	r3, [r7, #24]
 800af9a:	e007      	b.n	800afac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	781a      	ldrb	r2, [r3, #0]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	3301      	adds	r3, #1
 800afaa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	3b01      	subs	r3, #1
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1c9      	bne.n	800af5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	2200      	movs	r2, #0
 800afd2:	2140      	movs	r1, #64	@ 0x40
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f000 fb70 	bl	800b6ba <UART_WaitOnFlagUntilTimeout>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d004      	beq.n	800afea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2220      	movs	r2, #32
 800afe4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e005      	b.n	800aff6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2220      	movs	r2, #32
 800afee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	e000      	b.n	800aff6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800aff4:	2302      	movs	r3, #2
  }
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3720      	adds	r7, #32
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
	...

0800b000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b008:	2300      	movs	r3, #0
 800b00a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	689a      	ldr	r2, [r3, #8]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	431a      	orrs	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	695b      	ldr	r3, [r3, #20]
 800b01a:	431a      	orrs	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	4313      	orrs	r3, r2
 800b022:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	4ba6      	ldr	r3, [pc, #664]	@ (800b2c4 <UART_SetConfig+0x2c4>)
 800b02c:	4013      	ands	r3, r2
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	6812      	ldr	r2, [r2, #0]
 800b032:	6979      	ldr	r1, [r7, #20]
 800b034:	430b      	orrs	r3, r1
 800b036:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68da      	ldr	r2, [r3, #12]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	430a      	orrs	r2, r1
 800b04c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	430a      	orrs	r2, r1
 800b070:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a94      	ldr	r2, [pc, #592]	@ (800b2c8 <UART_SetConfig+0x2c8>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d120      	bne.n	800b0be <UART_SetConfig+0xbe>
 800b07c:	4b93      	ldr	r3, [pc, #588]	@ (800b2cc <UART_SetConfig+0x2cc>)
 800b07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b082:	f003 0303 	and.w	r3, r3, #3
 800b086:	2b03      	cmp	r3, #3
 800b088:	d816      	bhi.n	800b0b8 <UART_SetConfig+0xb8>
 800b08a:	a201      	add	r2, pc, #4	@ (adr r2, 800b090 <UART_SetConfig+0x90>)
 800b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b090:	0800b0a1 	.word	0x0800b0a1
 800b094:	0800b0ad 	.word	0x0800b0ad
 800b098:	0800b0a7 	.word	0x0800b0a7
 800b09c:	0800b0b3 	.word	0x0800b0b3
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	77fb      	strb	r3, [r7, #31]
 800b0a4:	e150      	b.n	800b348 <UART_SetConfig+0x348>
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	77fb      	strb	r3, [r7, #31]
 800b0aa:	e14d      	b.n	800b348 <UART_SetConfig+0x348>
 800b0ac:	2304      	movs	r3, #4
 800b0ae:	77fb      	strb	r3, [r7, #31]
 800b0b0:	e14a      	b.n	800b348 <UART_SetConfig+0x348>
 800b0b2:	2308      	movs	r3, #8
 800b0b4:	77fb      	strb	r3, [r7, #31]
 800b0b6:	e147      	b.n	800b348 <UART_SetConfig+0x348>
 800b0b8:	2310      	movs	r3, #16
 800b0ba:	77fb      	strb	r3, [r7, #31]
 800b0bc:	e144      	b.n	800b348 <UART_SetConfig+0x348>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a83      	ldr	r2, [pc, #524]	@ (800b2d0 <UART_SetConfig+0x2d0>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d132      	bne.n	800b12e <UART_SetConfig+0x12e>
 800b0c8:	4b80      	ldr	r3, [pc, #512]	@ (800b2cc <UART_SetConfig+0x2cc>)
 800b0ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ce:	f003 030c 	and.w	r3, r3, #12
 800b0d2:	2b0c      	cmp	r3, #12
 800b0d4:	d828      	bhi.n	800b128 <UART_SetConfig+0x128>
 800b0d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0dc <UART_SetConfig+0xdc>)
 800b0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0dc:	0800b111 	.word	0x0800b111
 800b0e0:	0800b129 	.word	0x0800b129
 800b0e4:	0800b129 	.word	0x0800b129
 800b0e8:	0800b129 	.word	0x0800b129
 800b0ec:	0800b11d 	.word	0x0800b11d
 800b0f0:	0800b129 	.word	0x0800b129
 800b0f4:	0800b129 	.word	0x0800b129
 800b0f8:	0800b129 	.word	0x0800b129
 800b0fc:	0800b117 	.word	0x0800b117
 800b100:	0800b129 	.word	0x0800b129
 800b104:	0800b129 	.word	0x0800b129
 800b108:	0800b129 	.word	0x0800b129
 800b10c:	0800b123 	.word	0x0800b123
 800b110:	2300      	movs	r3, #0
 800b112:	77fb      	strb	r3, [r7, #31]
 800b114:	e118      	b.n	800b348 <UART_SetConfig+0x348>
 800b116:	2302      	movs	r3, #2
 800b118:	77fb      	strb	r3, [r7, #31]
 800b11a:	e115      	b.n	800b348 <UART_SetConfig+0x348>
 800b11c:	2304      	movs	r3, #4
 800b11e:	77fb      	strb	r3, [r7, #31]
 800b120:	e112      	b.n	800b348 <UART_SetConfig+0x348>
 800b122:	2308      	movs	r3, #8
 800b124:	77fb      	strb	r3, [r7, #31]
 800b126:	e10f      	b.n	800b348 <UART_SetConfig+0x348>
 800b128:	2310      	movs	r3, #16
 800b12a:	77fb      	strb	r3, [r7, #31]
 800b12c:	e10c      	b.n	800b348 <UART_SetConfig+0x348>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a68      	ldr	r2, [pc, #416]	@ (800b2d4 <UART_SetConfig+0x2d4>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d120      	bne.n	800b17a <UART_SetConfig+0x17a>
 800b138:	4b64      	ldr	r3, [pc, #400]	@ (800b2cc <UART_SetConfig+0x2cc>)
 800b13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b13e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b142:	2b30      	cmp	r3, #48	@ 0x30
 800b144:	d013      	beq.n	800b16e <UART_SetConfig+0x16e>
 800b146:	2b30      	cmp	r3, #48	@ 0x30
 800b148:	d814      	bhi.n	800b174 <UART_SetConfig+0x174>
 800b14a:	2b20      	cmp	r3, #32
 800b14c:	d009      	beq.n	800b162 <UART_SetConfig+0x162>
 800b14e:	2b20      	cmp	r3, #32
 800b150:	d810      	bhi.n	800b174 <UART_SetConfig+0x174>
 800b152:	2b00      	cmp	r3, #0
 800b154:	d002      	beq.n	800b15c <UART_SetConfig+0x15c>
 800b156:	2b10      	cmp	r3, #16
 800b158:	d006      	beq.n	800b168 <UART_SetConfig+0x168>
 800b15a:	e00b      	b.n	800b174 <UART_SetConfig+0x174>
 800b15c:	2300      	movs	r3, #0
 800b15e:	77fb      	strb	r3, [r7, #31]
 800b160:	e0f2      	b.n	800b348 <UART_SetConfig+0x348>
 800b162:	2302      	movs	r3, #2
 800b164:	77fb      	strb	r3, [r7, #31]
 800b166:	e0ef      	b.n	800b348 <UART_SetConfig+0x348>
 800b168:	2304      	movs	r3, #4
 800b16a:	77fb      	strb	r3, [r7, #31]
 800b16c:	e0ec      	b.n	800b348 <UART_SetConfig+0x348>
 800b16e:	2308      	movs	r3, #8
 800b170:	77fb      	strb	r3, [r7, #31]
 800b172:	e0e9      	b.n	800b348 <UART_SetConfig+0x348>
 800b174:	2310      	movs	r3, #16
 800b176:	77fb      	strb	r3, [r7, #31]
 800b178:	e0e6      	b.n	800b348 <UART_SetConfig+0x348>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a56      	ldr	r2, [pc, #344]	@ (800b2d8 <UART_SetConfig+0x2d8>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d120      	bne.n	800b1c6 <UART_SetConfig+0x1c6>
 800b184:	4b51      	ldr	r3, [pc, #324]	@ (800b2cc <UART_SetConfig+0x2cc>)
 800b186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b18a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b18e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b190:	d013      	beq.n	800b1ba <UART_SetConfig+0x1ba>
 800b192:	2bc0      	cmp	r3, #192	@ 0xc0
 800b194:	d814      	bhi.n	800b1c0 <UART_SetConfig+0x1c0>
 800b196:	2b80      	cmp	r3, #128	@ 0x80
 800b198:	d009      	beq.n	800b1ae <UART_SetConfig+0x1ae>
 800b19a:	2b80      	cmp	r3, #128	@ 0x80
 800b19c:	d810      	bhi.n	800b1c0 <UART_SetConfig+0x1c0>
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d002      	beq.n	800b1a8 <UART_SetConfig+0x1a8>
 800b1a2:	2b40      	cmp	r3, #64	@ 0x40
 800b1a4:	d006      	beq.n	800b1b4 <UART_SetConfig+0x1b4>
 800b1a6:	e00b      	b.n	800b1c0 <UART_SetConfig+0x1c0>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	77fb      	strb	r3, [r7, #31]
 800b1ac:	e0cc      	b.n	800b348 <UART_SetConfig+0x348>
 800b1ae:	2302      	movs	r3, #2
 800b1b0:	77fb      	strb	r3, [r7, #31]
 800b1b2:	e0c9      	b.n	800b348 <UART_SetConfig+0x348>
 800b1b4:	2304      	movs	r3, #4
 800b1b6:	77fb      	strb	r3, [r7, #31]
 800b1b8:	e0c6      	b.n	800b348 <UART_SetConfig+0x348>
 800b1ba:	2308      	movs	r3, #8
 800b1bc:	77fb      	strb	r3, [r7, #31]
 800b1be:	e0c3      	b.n	800b348 <UART_SetConfig+0x348>
 800b1c0:	2310      	movs	r3, #16
 800b1c2:	77fb      	strb	r3, [r7, #31]
 800b1c4:	e0c0      	b.n	800b348 <UART_SetConfig+0x348>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a44      	ldr	r2, [pc, #272]	@ (800b2dc <UART_SetConfig+0x2dc>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d125      	bne.n	800b21c <UART_SetConfig+0x21c>
 800b1d0:	4b3e      	ldr	r3, [pc, #248]	@ (800b2cc <UART_SetConfig+0x2cc>)
 800b1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1de:	d017      	beq.n	800b210 <UART_SetConfig+0x210>
 800b1e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1e4:	d817      	bhi.n	800b216 <UART_SetConfig+0x216>
 800b1e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1ea:	d00b      	beq.n	800b204 <UART_SetConfig+0x204>
 800b1ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1f0:	d811      	bhi.n	800b216 <UART_SetConfig+0x216>
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <UART_SetConfig+0x1fe>
 800b1f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1fa:	d006      	beq.n	800b20a <UART_SetConfig+0x20a>
 800b1fc:	e00b      	b.n	800b216 <UART_SetConfig+0x216>
 800b1fe:	2300      	movs	r3, #0
 800b200:	77fb      	strb	r3, [r7, #31]
 800b202:	e0a1      	b.n	800b348 <UART_SetConfig+0x348>
 800b204:	2302      	movs	r3, #2
 800b206:	77fb      	strb	r3, [r7, #31]
 800b208:	e09e      	b.n	800b348 <UART_SetConfig+0x348>
 800b20a:	2304      	movs	r3, #4
 800b20c:	77fb      	strb	r3, [r7, #31]
 800b20e:	e09b      	b.n	800b348 <UART_SetConfig+0x348>
 800b210:	2308      	movs	r3, #8
 800b212:	77fb      	strb	r3, [r7, #31]
 800b214:	e098      	b.n	800b348 <UART_SetConfig+0x348>
 800b216:	2310      	movs	r3, #16
 800b218:	77fb      	strb	r3, [r7, #31]
 800b21a:	e095      	b.n	800b348 <UART_SetConfig+0x348>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a2f      	ldr	r2, [pc, #188]	@ (800b2e0 <UART_SetConfig+0x2e0>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d125      	bne.n	800b272 <UART_SetConfig+0x272>
 800b226:	4b29      	ldr	r3, [pc, #164]	@ (800b2cc <UART_SetConfig+0x2cc>)
 800b228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b22c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b230:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b234:	d017      	beq.n	800b266 <UART_SetConfig+0x266>
 800b236:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b23a:	d817      	bhi.n	800b26c <UART_SetConfig+0x26c>
 800b23c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b240:	d00b      	beq.n	800b25a <UART_SetConfig+0x25a>
 800b242:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b246:	d811      	bhi.n	800b26c <UART_SetConfig+0x26c>
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <UART_SetConfig+0x254>
 800b24c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b250:	d006      	beq.n	800b260 <UART_SetConfig+0x260>
 800b252:	e00b      	b.n	800b26c <UART_SetConfig+0x26c>
 800b254:	2301      	movs	r3, #1
 800b256:	77fb      	strb	r3, [r7, #31]
 800b258:	e076      	b.n	800b348 <UART_SetConfig+0x348>
 800b25a:	2302      	movs	r3, #2
 800b25c:	77fb      	strb	r3, [r7, #31]
 800b25e:	e073      	b.n	800b348 <UART_SetConfig+0x348>
 800b260:	2304      	movs	r3, #4
 800b262:	77fb      	strb	r3, [r7, #31]
 800b264:	e070      	b.n	800b348 <UART_SetConfig+0x348>
 800b266:	2308      	movs	r3, #8
 800b268:	77fb      	strb	r3, [r7, #31]
 800b26a:	e06d      	b.n	800b348 <UART_SetConfig+0x348>
 800b26c:	2310      	movs	r3, #16
 800b26e:	77fb      	strb	r3, [r7, #31]
 800b270:	e06a      	b.n	800b348 <UART_SetConfig+0x348>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a1b      	ldr	r2, [pc, #108]	@ (800b2e4 <UART_SetConfig+0x2e4>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d138      	bne.n	800b2ee <UART_SetConfig+0x2ee>
 800b27c:	4b13      	ldr	r3, [pc, #76]	@ (800b2cc <UART_SetConfig+0x2cc>)
 800b27e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b282:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b286:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b28a:	d017      	beq.n	800b2bc <UART_SetConfig+0x2bc>
 800b28c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b290:	d82a      	bhi.n	800b2e8 <UART_SetConfig+0x2e8>
 800b292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b296:	d00b      	beq.n	800b2b0 <UART_SetConfig+0x2b0>
 800b298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b29c:	d824      	bhi.n	800b2e8 <UART_SetConfig+0x2e8>
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d003      	beq.n	800b2aa <UART_SetConfig+0x2aa>
 800b2a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2a6:	d006      	beq.n	800b2b6 <UART_SetConfig+0x2b6>
 800b2a8:	e01e      	b.n	800b2e8 <UART_SetConfig+0x2e8>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	77fb      	strb	r3, [r7, #31]
 800b2ae:	e04b      	b.n	800b348 <UART_SetConfig+0x348>
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	77fb      	strb	r3, [r7, #31]
 800b2b4:	e048      	b.n	800b348 <UART_SetConfig+0x348>
 800b2b6:	2304      	movs	r3, #4
 800b2b8:	77fb      	strb	r3, [r7, #31]
 800b2ba:	e045      	b.n	800b348 <UART_SetConfig+0x348>
 800b2bc:	2308      	movs	r3, #8
 800b2be:	77fb      	strb	r3, [r7, #31]
 800b2c0:	e042      	b.n	800b348 <UART_SetConfig+0x348>
 800b2c2:	bf00      	nop
 800b2c4:	efff69f3 	.word	0xefff69f3
 800b2c8:	40011000 	.word	0x40011000
 800b2cc:	40023800 	.word	0x40023800
 800b2d0:	40004400 	.word	0x40004400
 800b2d4:	40004800 	.word	0x40004800
 800b2d8:	40004c00 	.word	0x40004c00
 800b2dc:	40005000 	.word	0x40005000
 800b2e0:	40011400 	.word	0x40011400
 800b2e4:	40007800 	.word	0x40007800
 800b2e8:	2310      	movs	r3, #16
 800b2ea:	77fb      	strb	r3, [r7, #31]
 800b2ec:	e02c      	b.n	800b348 <UART_SetConfig+0x348>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a72      	ldr	r2, [pc, #456]	@ (800b4bc <UART_SetConfig+0x4bc>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d125      	bne.n	800b344 <UART_SetConfig+0x344>
 800b2f8:	4b71      	ldr	r3, [pc, #452]	@ (800b4c0 <UART_SetConfig+0x4c0>)
 800b2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b302:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b306:	d017      	beq.n	800b338 <UART_SetConfig+0x338>
 800b308:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b30c:	d817      	bhi.n	800b33e <UART_SetConfig+0x33e>
 800b30e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b312:	d00b      	beq.n	800b32c <UART_SetConfig+0x32c>
 800b314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b318:	d811      	bhi.n	800b33e <UART_SetConfig+0x33e>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <UART_SetConfig+0x326>
 800b31e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b322:	d006      	beq.n	800b332 <UART_SetConfig+0x332>
 800b324:	e00b      	b.n	800b33e <UART_SetConfig+0x33e>
 800b326:	2300      	movs	r3, #0
 800b328:	77fb      	strb	r3, [r7, #31]
 800b32a:	e00d      	b.n	800b348 <UART_SetConfig+0x348>
 800b32c:	2302      	movs	r3, #2
 800b32e:	77fb      	strb	r3, [r7, #31]
 800b330:	e00a      	b.n	800b348 <UART_SetConfig+0x348>
 800b332:	2304      	movs	r3, #4
 800b334:	77fb      	strb	r3, [r7, #31]
 800b336:	e007      	b.n	800b348 <UART_SetConfig+0x348>
 800b338:	2308      	movs	r3, #8
 800b33a:	77fb      	strb	r3, [r7, #31]
 800b33c:	e004      	b.n	800b348 <UART_SetConfig+0x348>
 800b33e:	2310      	movs	r3, #16
 800b340:	77fb      	strb	r3, [r7, #31]
 800b342:	e001      	b.n	800b348 <UART_SetConfig+0x348>
 800b344:	2310      	movs	r3, #16
 800b346:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b350:	d15b      	bne.n	800b40a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b352:	7ffb      	ldrb	r3, [r7, #31]
 800b354:	2b08      	cmp	r3, #8
 800b356:	d828      	bhi.n	800b3aa <UART_SetConfig+0x3aa>
 800b358:	a201      	add	r2, pc, #4	@ (adr r2, 800b360 <UART_SetConfig+0x360>)
 800b35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35e:	bf00      	nop
 800b360:	0800b385 	.word	0x0800b385
 800b364:	0800b38d 	.word	0x0800b38d
 800b368:	0800b395 	.word	0x0800b395
 800b36c:	0800b3ab 	.word	0x0800b3ab
 800b370:	0800b39b 	.word	0x0800b39b
 800b374:	0800b3ab 	.word	0x0800b3ab
 800b378:	0800b3ab 	.word	0x0800b3ab
 800b37c:	0800b3ab 	.word	0x0800b3ab
 800b380:	0800b3a3 	.word	0x0800b3a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b384:	f7fb fd92 	bl	8006eac <HAL_RCC_GetPCLK1Freq>
 800b388:	61b8      	str	r0, [r7, #24]
        break;
 800b38a:	e013      	b.n	800b3b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b38c:	f7fb fda2 	bl	8006ed4 <HAL_RCC_GetPCLK2Freq>
 800b390:	61b8      	str	r0, [r7, #24]
        break;
 800b392:	e00f      	b.n	800b3b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b394:	4b4b      	ldr	r3, [pc, #300]	@ (800b4c4 <UART_SetConfig+0x4c4>)
 800b396:	61bb      	str	r3, [r7, #24]
        break;
 800b398:	e00c      	b.n	800b3b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b39a:	f7fb fcb5 	bl	8006d08 <HAL_RCC_GetSysClockFreq>
 800b39e:	61b8      	str	r0, [r7, #24]
        break;
 800b3a0:	e008      	b.n	800b3b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3a6:	61bb      	str	r3, [r7, #24]
        break;
 800b3a8:	e004      	b.n	800b3b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	77bb      	strb	r3, [r7, #30]
        break;
 800b3b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d074      	beq.n	800b4a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	005a      	lsls	r2, r3, #1
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	085b      	lsrs	r3, r3, #1
 800b3c4:	441a      	add	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	2b0f      	cmp	r3, #15
 800b3d4:	d916      	bls.n	800b404 <UART_SetConfig+0x404>
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3dc:	d212      	bcs.n	800b404 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	f023 030f 	bic.w	r3, r3, #15
 800b3e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	085b      	lsrs	r3, r3, #1
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	f003 0307 	and.w	r3, r3, #7
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	89fb      	ldrh	r3, [r7, #14]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	89fa      	ldrh	r2, [r7, #14]
 800b400:	60da      	str	r2, [r3, #12]
 800b402:	e04f      	b.n	800b4a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	77bb      	strb	r3, [r7, #30]
 800b408:	e04c      	b.n	800b4a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b40a:	7ffb      	ldrb	r3, [r7, #31]
 800b40c:	2b08      	cmp	r3, #8
 800b40e:	d828      	bhi.n	800b462 <UART_SetConfig+0x462>
 800b410:	a201      	add	r2, pc, #4	@ (adr r2, 800b418 <UART_SetConfig+0x418>)
 800b412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b416:	bf00      	nop
 800b418:	0800b43d 	.word	0x0800b43d
 800b41c:	0800b445 	.word	0x0800b445
 800b420:	0800b44d 	.word	0x0800b44d
 800b424:	0800b463 	.word	0x0800b463
 800b428:	0800b453 	.word	0x0800b453
 800b42c:	0800b463 	.word	0x0800b463
 800b430:	0800b463 	.word	0x0800b463
 800b434:	0800b463 	.word	0x0800b463
 800b438:	0800b45b 	.word	0x0800b45b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b43c:	f7fb fd36 	bl	8006eac <HAL_RCC_GetPCLK1Freq>
 800b440:	61b8      	str	r0, [r7, #24]
        break;
 800b442:	e013      	b.n	800b46c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b444:	f7fb fd46 	bl	8006ed4 <HAL_RCC_GetPCLK2Freq>
 800b448:	61b8      	str	r0, [r7, #24]
        break;
 800b44a:	e00f      	b.n	800b46c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b44c:	4b1d      	ldr	r3, [pc, #116]	@ (800b4c4 <UART_SetConfig+0x4c4>)
 800b44e:	61bb      	str	r3, [r7, #24]
        break;
 800b450:	e00c      	b.n	800b46c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b452:	f7fb fc59 	bl	8006d08 <HAL_RCC_GetSysClockFreq>
 800b456:	61b8      	str	r0, [r7, #24]
        break;
 800b458:	e008      	b.n	800b46c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b45a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b45e:	61bb      	str	r3, [r7, #24]
        break;
 800b460:	e004      	b.n	800b46c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b462:	2300      	movs	r3, #0
 800b464:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	77bb      	strb	r3, [r7, #30]
        break;
 800b46a:	bf00      	nop
    }

    if (pclk != 0U)
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d018      	beq.n	800b4a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	085a      	lsrs	r2, r3, #1
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	441a      	add	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	fbb2 f3f3 	udiv	r3, r2, r3
 800b484:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	2b0f      	cmp	r3, #15
 800b48a:	d909      	bls.n	800b4a0 <UART_SetConfig+0x4a0>
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b492:	d205      	bcs.n	800b4a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	b29a      	uxth	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	60da      	str	r2, [r3, #12]
 800b49e:	e001      	b.n	800b4a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b4b0:	7fbb      	ldrb	r3, [r7, #30]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3720      	adds	r7, #32
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	40007c00 	.word	0x40007c00
 800b4c0:	40023800 	.word	0x40023800
 800b4c4:	00f42400 	.word	0x00f42400

0800b4c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d4:	f003 0308 	and.w	r3, r3, #8
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00a      	beq.n	800b4f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	430a      	orrs	r2, r1
 800b4f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00a      	beq.n	800b514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	430a      	orrs	r2, r1
 800b512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00a      	beq.n	800b536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	430a      	orrs	r2, r1
 800b534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b53a:	f003 0304 	and.w	r3, r3, #4
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00a      	beq.n	800b558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	430a      	orrs	r2, r1
 800b556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b55c:	f003 0310 	and.w	r3, r3, #16
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00a      	beq.n	800b57a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	430a      	orrs	r2, r1
 800b578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b57e:	f003 0320 	and.w	r3, r3, #32
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00a      	beq.n	800b59c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	430a      	orrs	r2, r1
 800b59a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d01a      	beq.n	800b5de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5c6:	d10a      	bne.n	800b5de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	430a      	orrs	r2, r1
 800b5dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00a      	beq.n	800b600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	430a      	orrs	r2, r1
 800b5fe:	605a      	str	r2, [r3, #4]
  }
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08c      	sub	sp, #48	@ 0x30
 800b610:	af02      	add	r7, sp, #8
 800b612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b61c:	f7f8 f9f6 	bl	8003a0c <HAL_GetTick>
 800b620:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f003 0308 	and.w	r3, r3, #8
 800b62c:	2b08      	cmp	r3, #8
 800b62e:	d12e      	bne.n	800b68e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b630:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b638:	2200      	movs	r2, #0
 800b63a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f83b 	bl	800b6ba <UART_WaitOnFlagUntilTimeout>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d021      	beq.n	800b68e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	e853 3f00 	ldrex	r3, [r3]
 800b656:	60fb      	str	r3, [r7, #12]
   return(result);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b65e:	623b      	str	r3, [r7, #32]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	461a      	mov	r2, r3
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	61fb      	str	r3, [r7, #28]
 800b66a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66c:	69b9      	ldr	r1, [r7, #24]
 800b66e:	69fa      	ldr	r2, [r7, #28]
 800b670:	e841 2300 	strex	r3, r2, [r1]
 800b674:	617b      	str	r3, [r7, #20]
   return(result);
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1e6      	bne.n	800b64a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2220      	movs	r2, #32
 800b680:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b68a:	2303      	movs	r3, #3
 800b68c:	e011      	b.n	800b6b2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2220      	movs	r2, #32
 800b692:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2220      	movs	r2, #32
 800b698:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3728      	adds	r7, #40	@ 0x28
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b084      	sub	sp, #16
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	60f8      	str	r0, [r7, #12]
 800b6c2:	60b9      	str	r1, [r7, #8]
 800b6c4:	603b      	str	r3, [r7, #0]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6ca:	e04f      	b.n	800b76c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d2:	d04b      	beq.n	800b76c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6d4:	f7f8 f99a 	bl	8003a0c <HAL_GetTick>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	69ba      	ldr	r2, [r7, #24]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d302      	bcc.n	800b6ea <UART_WaitOnFlagUntilTimeout+0x30>
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e04e      	b.n	800b78c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 0304 	and.w	r3, r3, #4
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d037      	beq.n	800b76c <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b80      	cmp	r3, #128	@ 0x80
 800b700:	d034      	beq.n	800b76c <UART_WaitOnFlagUntilTimeout+0xb2>
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	2b40      	cmp	r3, #64	@ 0x40
 800b706:	d031      	beq.n	800b76c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	f003 0308 	and.w	r3, r3, #8
 800b712:	2b08      	cmp	r3, #8
 800b714:	d110      	bne.n	800b738 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2208      	movs	r2, #8
 800b71c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f000 f838 	bl	800b794 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2208      	movs	r2, #8
 800b728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	e029      	b.n	800b78c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	69db      	ldr	r3, [r3, #28]
 800b73e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b742:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b746:	d111      	bne.n	800b76c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b750:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	f000 f81e 	bl	800b794 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2220      	movs	r2, #32
 800b75c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b768:	2303      	movs	r3, #3
 800b76a:	e00f      	b.n	800b78c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	69da      	ldr	r2, [r3, #28]
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	4013      	ands	r3, r2
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	429a      	cmp	r2, r3
 800b77a:	bf0c      	ite	eq
 800b77c:	2301      	moveq	r3, #1
 800b77e:	2300      	movne	r3, #0
 800b780:	b2db      	uxtb	r3, r3
 800b782:	461a      	mov	r2, r3
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	429a      	cmp	r2, r3
 800b788:	d0a0      	beq.n	800b6cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b794:	b480      	push	{r7}
 800b796:	b095      	sub	sp, #84	@ 0x54
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7a4:	e853 3f00 	ldrex	r3, [r3]
 800b7a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b7c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b7c2:	e841 2300 	strex	r3, r2, [r1]
 800b7c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1e6      	bne.n	800b79c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3308      	adds	r3, #8
 800b7d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	e853 3f00 	ldrex	r3, [r3]
 800b7dc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	f023 0301 	bic.w	r3, r3, #1
 800b7e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	3308      	adds	r3, #8
 800b7ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b7ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b7f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7f6:	e841 2300 	strex	r3, r2, [r1]
 800b7fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d1e5      	bne.n	800b7ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b806:	2b01      	cmp	r3, #1
 800b808:	d118      	bne.n	800b83c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	e853 3f00 	ldrex	r3, [r3]
 800b816:	60bb      	str	r3, [r7, #8]
   return(result);
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f023 0310 	bic.w	r3, r3, #16
 800b81e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	461a      	mov	r2, r3
 800b826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b828:	61bb      	str	r3, [r7, #24]
 800b82a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b82c:	6979      	ldr	r1, [r7, #20]
 800b82e:	69ba      	ldr	r2, [r7, #24]
 800b830:	e841 2300 	strex	r3, r2, [r1]
 800b834:	613b      	str	r3, [r7, #16]
   return(result);
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e6      	bne.n	800b80a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2220      	movs	r2, #32
 800b840:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b850:	bf00      	nop
 800b852:	3754      	adds	r7, #84	@ 0x54
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d121      	bne.n	800b8b2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	4b27      	ldr	r3, [pc, #156]	@ (800b910 <FMC_SDRAM_Init+0xb4>)
 800b874:	4013      	ands	r3, r2
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	6851      	ldr	r1, [r2, #4]
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	6892      	ldr	r2, [r2, #8]
 800b87e:	4311      	orrs	r1, r2
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	68d2      	ldr	r2, [r2, #12]
 800b884:	4311      	orrs	r1, r2
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	6912      	ldr	r2, [r2, #16]
 800b88a:	4311      	orrs	r1, r2
 800b88c:	683a      	ldr	r2, [r7, #0]
 800b88e:	6952      	ldr	r2, [r2, #20]
 800b890:	4311      	orrs	r1, r2
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	6992      	ldr	r2, [r2, #24]
 800b896:	4311      	orrs	r1, r2
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	69d2      	ldr	r2, [r2, #28]
 800b89c:	4311      	orrs	r1, r2
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	6a12      	ldr	r2, [r2, #32]
 800b8a2:	4311      	orrs	r1, r2
 800b8a4:	683a      	ldr	r2, [r7, #0]
 800b8a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	431a      	orrs	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	601a      	str	r2, [r3, #0]
 800b8b0:	e026      	b.n	800b900 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	69d9      	ldr	r1, [r3, #28]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	4319      	orrs	r1, r3
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c8:	430b      	orrs	r3, r1
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	685a      	ldr	r2, [r3, #4]
 800b8d4:	4b0e      	ldr	r3, [pc, #56]	@ (800b910 <FMC_SDRAM_Init+0xb4>)
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	6851      	ldr	r1, [r2, #4]
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	6892      	ldr	r2, [r2, #8]
 800b8e0:	4311      	orrs	r1, r2
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	68d2      	ldr	r2, [r2, #12]
 800b8e6:	4311      	orrs	r1, r2
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	6912      	ldr	r2, [r2, #16]
 800b8ec:	4311      	orrs	r1, r2
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	6952      	ldr	r2, [r2, #20]
 800b8f2:	4311      	orrs	r1, r2
 800b8f4:	683a      	ldr	r2, [r7, #0]
 800b8f6:	6992      	ldr	r2, [r2, #24]
 800b8f8:	430a      	orrs	r2, r1
 800b8fa:	431a      	orrs	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	ffff8000 	.word	0xffff8000

0800b914 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d128      	bne.n	800b978 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	1e59      	subs	r1, r3, #1
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	3b01      	subs	r3, #1
 800b93a:	011b      	lsls	r3, r3, #4
 800b93c:	4319      	orrs	r1, r3
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	3b01      	subs	r3, #1
 800b944:	021b      	lsls	r3, r3, #8
 800b946:	4319      	orrs	r1, r3
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	031b      	lsls	r3, r3, #12
 800b950:	4319      	orrs	r1, r3
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	3b01      	subs	r3, #1
 800b958:	041b      	lsls	r3, r3, #16
 800b95a:	4319      	orrs	r1, r3
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	695b      	ldr	r3, [r3, #20]
 800b960:	3b01      	subs	r3, #1
 800b962:	051b      	lsls	r3, r3, #20
 800b964:	4319      	orrs	r1, r3
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	3b01      	subs	r3, #1
 800b96c:	061b      	lsls	r3, r3, #24
 800b96e:	430b      	orrs	r3, r1
 800b970:	431a      	orrs	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	609a      	str	r2, [r3, #8]
 800b976:	e02d      	b.n	800b9d4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	689a      	ldr	r2, [r3, #8]
 800b97c:	4b19      	ldr	r3, [pc, #100]	@ (800b9e4 <FMC_SDRAM_Timing_Init+0xd0>)
 800b97e:	4013      	ands	r3, r2
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	68d2      	ldr	r2, [r2, #12]
 800b984:	3a01      	subs	r2, #1
 800b986:	0311      	lsls	r1, r2, #12
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	6952      	ldr	r2, [r2, #20]
 800b98c:	3a01      	subs	r2, #1
 800b98e:	0512      	lsls	r2, r2, #20
 800b990:	430a      	orrs	r2, r1
 800b992:	431a      	orrs	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	1e59      	subs	r1, r3, #1
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	011b      	lsls	r3, r3, #4
 800b9ae:	4319      	orrs	r1, r3
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	021b      	lsls	r3, r3, #8
 800b9b8:	4319      	orrs	r1, r3
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	041b      	lsls	r3, r3, #16
 800b9c2:	4319      	orrs	r1, r3
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	061b      	lsls	r3, r3, #24
 800b9cc:	430b      	orrs	r3, r1
 800b9ce:	431a      	orrs	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	ff0f0fff 	.word	0xff0f0fff

0800b9e8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b9e8:	b084      	sub	sp, #16
 800b9ea:	b480      	push	{r7}
 800b9ec:	b085      	sub	sp, #20
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	f107 001c 	add.w	r0, r7, #28
 800b9f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b9fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ba00:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ba02:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ba04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800ba06:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ba08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800ba0a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ba0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800ba0e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ba10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800ba12:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685a      	ldr	r2, [r3, #4]
 800ba1e:	4b07      	ldr	r3, [pc, #28]	@ (800ba3c <SDMMC_Init+0x54>)
 800ba20:	4013      	ands	r3, r2
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	431a      	orrs	r2, r3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	b004      	add	sp, #16
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	ffff8100 	.word	0xffff8100

0800ba40 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2203      	movs	r2, #3
 800ba88:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 0303 	and.w	r3, r3, #3
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bad2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bad8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bade:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	4313      	orrs	r3, r2
 800bae4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	68da      	ldr	r2, [r3, #12]
 800baea:	4b06      	ldr	r3, [pc, #24]	@ (800bb04 <SDMMC_SendCommand+0x50>)
 800baec:	4013      	ands	r3, r2
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	431a      	orrs	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr
 800bb04:	fffff000 	.word	0xfffff000

0800bb08 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	b2db      	uxtb	r3, r3
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bb22:	b480      	push	{r7}
 800bb24:	b085      	sub	sp, #20
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	3314      	adds	r3, #20
 800bb30:	461a      	mov	r2, r3
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	4413      	add	r3, r2
 800bb36:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
}  
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	685a      	ldr	r2, [r3, #4]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bb6e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bb74:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bb7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb86:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	431a      	orrs	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800bb92:	2300      	movs	r3, #0

}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bbae:	2310      	movs	r3, #16
 800bbb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbb2:	2340      	movs	r3, #64	@ 0x40
 800bbb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbc0:	f107 0308 	add.w	r3, r7, #8
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7ff ff74 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bbcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbd0:	2110      	movs	r1, #16
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fa1a 	bl	800c00c <SDMMC_GetCmdResp1>
 800bbd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbda:	69fb      	ldr	r3, [r7, #28]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3720      	adds	r7, #32
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b088      	sub	sp, #32
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bbf2:	2311      	movs	r3, #17
 800bbf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbf6:	2340      	movs	r3, #64	@ 0x40
 800bbf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc04:	f107 0308 	add.w	r3, r7, #8
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f7ff ff52 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bc10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc14:	2111      	movs	r1, #17
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f9f8 	bl	800c00c <SDMMC_GetCmdResp1>
 800bc1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc1e:	69fb      	ldr	r3, [r7, #28]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3720      	adds	r7, #32
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b088      	sub	sp, #32
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bc36:	2312      	movs	r3, #18
 800bc38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc3a:	2340      	movs	r3, #64	@ 0x40
 800bc3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc48:	f107 0308 	add.w	r3, r7, #8
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7ff ff30 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bc54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc58:	2112      	movs	r1, #18
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f9d6 	bl	800c00c <SDMMC_GetCmdResp1>
 800bc60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc62:	69fb      	ldr	r3, [r7, #28]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3720      	adds	r7, #32
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bc7a:	2318      	movs	r3, #24
 800bc7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc7e:	2340      	movs	r3, #64	@ 0x40
 800bc80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc82:	2300      	movs	r3, #0
 800bc84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc8c:	f107 0308 	add.w	r3, r7, #8
 800bc90:	4619      	mov	r1, r3
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f7ff ff0e 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bc98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc9c:	2118      	movs	r1, #24
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f9b4 	bl	800c00c <SDMMC_GetCmdResp1>
 800bca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bca6:	69fb      	ldr	r3, [r7, #28]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3720      	adds	r7, #32
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b088      	sub	sp, #32
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bcbe:	2319      	movs	r3, #25
 800bcc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcc2:	2340      	movs	r3, #64	@ 0x40
 800bcc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcd0:	f107 0308 	add.w	r3, r7, #8
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f7ff feec 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bcdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bce0:	2119      	movs	r1, #25
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f992 	bl	800c00c <SDMMC_GetCmdResp1>
 800bce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcea:	69fb      	ldr	r3, [r7, #28]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3720      	adds	r7, #32
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b088      	sub	sp, #32
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bd00:	230c      	movs	r3, #12
 800bd02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd04:	2340      	movs	r3, #64	@ 0x40
 800bd06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd12:	f107 0308 	add.w	r3, r7, #8
 800bd16:	4619      	mov	r1, r3
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f7ff fecb 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bd1e:	4a05      	ldr	r2, [pc, #20]	@ (800bd34 <SDMMC_CmdStopTransfer+0x40>)
 800bd20:	210c      	movs	r1, #12
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f000 f972 	bl	800c00c <SDMMC_GetCmdResp1>
 800bd28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3720      	adds	r7, #32
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	05f5e100 	.word	0x05f5e100

0800bd38 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08a      	sub	sp, #40	@ 0x28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bd48:	2307      	movs	r3, #7
 800bd4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd4c:	2340      	movs	r3, #64	@ 0x40
 800bd4e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd50:	2300      	movs	r3, #0
 800bd52:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd58:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd5a:	f107 0310 	add.w	r3, r7, #16
 800bd5e:	4619      	mov	r1, r3
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f7ff fea7 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bd66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd6a:	2107      	movs	r1, #7
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f000 f94d 	bl	800c00c <SDMMC_GetCmdResp1>
 800bd72:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800bd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3728      	adds	r7, #40	@ 0x28
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b088      	sub	sp, #32
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bd86:	2300      	movs	r3, #0
 800bd88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd92:	2300      	movs	r3, #0
 800bd94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd9c:	f107 0308 	add.w	r3, r7, #8
 800bda0:	4619      	mov	r1, r3
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7ff fe86 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fb67 	bl	800c47c <SDMMC_GetCmdError>
 800bdae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdb0:	69fb      	ldr	r3, [r7, #28]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3720      	adds	r7, #32
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b088      	sub	sp, #32
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bdc2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800bdc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bdc8:	2308      	movs	r3, #8
 800bdca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdcc:	2340      	movs	r3, #64	@ 0x40
 800bdce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdda:	f107 0308 	add.w	r3, r7, #8
 800bdde:	4619      	mov	r1, r3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7ff fe67 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 fafa 	bl	800c3e0 <SDMMC_GetCmdResp7>
 800bdec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdee:	69fb      	ldr	r3, [r7, #28]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3720      	adds	r7, #32
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b088      	sub	sp, #32
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800be06:	2337      	movs	r3, #55	@ 0x37
 800be08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be0a:	2340      	movs	r3, #64	@ 0x40
 800be0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be0e:	2300      	movs	r3, #0
 800be10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be18:	f107 0308 	add.w	r3, r7, #8
 800be1c:	4619      	mov	r1, r3
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7ff fe48 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800be24:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be28:	2137      	movs	r1, #55	@ 0x37
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f8ee 	bl	800c00c <SDMMC_GetCmdResp1>
 800be30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be32:	69fb      	ldr	r3, [r7, #28]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3720      	adds	r7, #32
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	4b0d      	ldr	r3, [pc, #52]	@ (800be80 <SDMMC_CmdAppOperCommand+0x44>)
 800be4a:	4313      	orrs	r3, r2
 800be4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800be4e:	2329      	movs	r3, #41	@ 0x29
 800be50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be52:	2340      	movs	r3, #64	@ 0x40
 800be54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be56:	2300      	movs	r3, #0
 800be58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be60:	f107 0308 	add.w	r3, r7, #8
 800be64:	4619      	mov	r1, r3
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff fe24 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fa03 	bl	800c278 <SDMMC_GetCmdResp3>
 800be72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be74:	69fb      	ldr	r3, [r7, #28]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3720      	adds	r7, #32
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	80100000 	.word	0x80100000

0800be84 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b088      	sub	sp, #32
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800be92:	2306      	movs	r3, #6
 800be94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be96:	2340      	movs	r3, #64	@ 0x40
 800be98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be9a:	2300      	movs	r3, #0
 800be9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bea4:	f107 0308 	add.w	r3, r7, #8
 800bea8:	4619      	mov	r1, r3
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7ff fe02 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800beb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800beb4:	2106      	movs	r1, #6
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f8a8 	bl	800c00c <SDMMC_GetCmdResp1>
 800bebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bebe:	69fb      	ldr	r3, [r7, #28]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3720      	adds	r7, #32
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b088      	sub	sp, #32
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bed0:	2300      	movs	r3, #0
 800bed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bed4:	2333      	movs	r3, #51	@ 0x33
 800bed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bed8:	2340      	movs	r3, #64	@ 0x40
 800beda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bedc:	2300      	movs	r3, #0
 800bede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bee0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bee4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bee6:	f107 0308 	add.w	r3, r7, #8
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff fde1 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bef6:	2133      	movs	r1, #51	@ 0x33
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f887 	bl	800c00c <SDMMC_GetCmdResp1>
 800befe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf00:	69fb      	ldr	r3, [r7, #28]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3720      	adds	r7, #32
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b088      	sub	sp, #32
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bf12:	2300      	movs	r3, #0
 800bf14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bf16:	2302      	movs	r3, #2
 800bf18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bf1a:	23c0      	movs	r3, #192	@ 0xc0
 800bf1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf28:	f107 0308 	add.w	r3, r7, #8
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff fdc0 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 f957 	bl	800c1e8 <SDMMC_GetCmdResp2>
 800bf3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf3c:	69fb      	ldr	r3, [r7, #28]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3720      	adds	r7, #32
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b088      	sub	sp, #32
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bf54:	2309      	movs	r3, #9
 800bf56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bf58:	23c0      	movs	r3, #192	@ 0xc0
 800bf5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf66:	f107 0308 	add.w	r3, r7, #8
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f7ff fda1 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f938 	bl	800c1e8 <SDMMC_GetCmdResp2>
 800bf78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf7a:	69fb      	ldr	r3, [r7, #28]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3720      	adds	r7, #32
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b088      	sub	sp, #32
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bf92:	2303      	movs	r3, #3
 800bf94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf96:	2340      	movs	r3, #64	@ 0x40
 800bf98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfa4:	f107 0308 	add.w	r3, r7, #8
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7ff fd82 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	2103      	movs	r1, #3
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f99d 	bl	800c2f4 <SDMMC_GetCmdResp6>
 800bfba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfbc:	69fb      	ldr	r3, [r7, #28]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3720      	adds	r7, #32
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b088      	sub	sp, #32
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bfd4:	230d      	movs	r3, #13
 800bfd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfd8:	2340      	movs	r3, #64	@ 0x40
 800bfda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfe4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfe6:	f107 0308 	add.w	r3, r7, #8
 800bfea:	4619      	mov	r1, r3
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f7ff fd61 	bl	800bab4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bff6:	210d      	movs	r1, #13
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f807 	bl	800c00c <SDMMC_GetCmdResp1>
 800bffe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c000:	69fb      	ldr	r3, [r7, #28]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3720      	adds	r7, #32
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
	...

0800c00c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b088      	sub	sp, #32
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	460b      	mov	r3, r1
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c01a:	4b70      	ldr	r3, [pc, #448]	@ (800c1dc <SDMMC_GetCmdResp1+0x1d0>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a70      	ldr	r2, [pc, #448]	@ (800c1e0 <SDMMC_GetCmdResp1+0x1d4>)
 800c020:	fba2 2303 	umull	r2, r3, r2, r3
 800c024:	0a5a      	lsrs	r2, r3, #9
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	fb02 f303 	mul.w	r3, r2, r3
 800c02c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	1e5a      	subs	r2, r3, #1
 800c032:	61fa      	str	r2, [r7, #28]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d102      	bne.n	800c03e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c038:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c03c:	e0c9      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c042:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d0ef      	beq.n	800c02e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1ea      	bne.n	800c02e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c05c:	f003 0304 	and.w	r3, r3, #4
 800c060:	2b00      	cmp	r3, #0
 800c062:	d004      	beq.n	800c06e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2204      	movs	r2, #4
 800c068:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c06a:	2304      	movs	r3, #4
 800c06c:	e0b1      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	2b00      	cmp	r3, #0
 800c078:	d004      	beq.n	800c084 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2201      	movs	r2, #1
 800c07e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c080:	2301      	movs	r3, #1
 800c082:	e0a6      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	22c5      	movs	r2, #197	@ 0xc5
 800c088:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f7ff fd3c 	bl	800bb08 <SDMMC_GetCommandResponse>
 800c090:	4603      	mov	r3, r0
 800c092:	461a      	mov	r2, r3
 800c094:	7afb      	ldrb	r3, [r7, #11]
 800c096:	4293      	cmp	r3, r2
 800c098:	d001      	beq.n	800c09e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e099      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c09e:	2100      	movs	r1, #0
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f7ff fd3e 	bl	800bb22 <SDMMC_GetResponse>
 800c0a6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	4b4e      	ldr	r3, [pc, #312]	@ (800c1e4 <SDMMC_GetCmdResp1+0x1d8>)
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e08d      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	da02      	bge.n	800c0c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c0bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c0c0:	e087      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c0cc:	2340      	movs	r3, #64	@ 0x40
 800c0ce:	e080      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c0da:	2380      	movs	r3, #128	@ 0x80
 800c0dc:	e079      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c0e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0ec:	e071      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c0f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c0fc:	e069      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d002      	beq.n	800c10e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c10c:	e061      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c118:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c11c:	e059      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c12c:	e051      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d002      	beq.n	800c13e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c138:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c13c:	e049      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d002      	beq.n	800c14e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c148:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c14c:	e041      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c15c:	e039      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c168:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c16c:	e031      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d002      	beq.n	800c17e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c178:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c17c:	e029      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c188:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c18c:	e021      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c194:	2b00      	cmp	r3, #0
 800c196:	d002      	beq.n	800c19e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c198:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c19c:	e019      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c1a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c1ac:	e011      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c1b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c1bc:	e009      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f003 0308 	and.w	r3, r3, #8
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c1c8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c1cc:	e001      	b.n	800c1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c1ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3720      	adds	r7, #32
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	20000004 	.word	0x20000004
 800c1e0:	10624dd3 	.word	0x10624dd3
 800c1e4:	fdffe008 	.word	0xfdffe008

0800c1e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c1f0:	4b1f      	ldr	r3, [pc, #124]	@ (800c270 <SDMMC_GetCmdResp2+0x88>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a1f      	ldr	r2, [pc, #124]	@ (800c274 <SDMMC_GetCmdResp2+0x8c>)
 800c1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1fa:	0a5b      	lsrs	r3, r3, #9
 800c1fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c200:	fb02 f303 	mul.w	r3, r2, r3
 800c204:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	1e5a      	subs	r2, r3, #1
 800c20a:	60fa      	str	r2, [r7, #12]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d102      	bne.n	800c216 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c210:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c214:	e026      	b.n	800c264 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c21a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0ef      	beq.n	800c206 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1ea      	bne.n	800c206 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c234:	f003 0304 	and.w	r3, r3, #4
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d004      	beq.n	800c246 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2204      	movs	r2, #4
 800c240:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c242:	2304      	movs	r3, #4
 800c244:	e00e      	b.n	800c264 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c24a:	f003 0301 	and.w	r3, r3, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d004      	beq.n	800c25c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2201      	movs	r2, #1
 800c256:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c258:	2301      	movs	r3, #1
 800c25a:	e003      	b.n	800c264 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	22c5      	movs	r2, #197	@ 0xc5
 800c260:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3714      	adds	r7, #20
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr
 800c270:	20000004 	.word	0x20000004
 800c274:	10624dd3 	.word	0x10624dd3

0800c278 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c280:	4b1a      	ldr	r3, [pc, #104]	@ (800c2ec <SDMMC_GetCmdResp3+0x74>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a1a      	ldr	r2, [pc, #104]	@ (800c2f0 <SDMMC_GetCmdResp3+0x78>)
 800c286:	fba2 2303 	umull	r2, r3, r2, r3
 800c28a:	0a5b      	lsrs	r3, r3, #9
 800c28c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c290:	fb02 f303 	mul.w	r3, r2, r3
 800c294:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	1e5a      	subs	r2, r3, #1
 800c29a:	60fa      	str	r2, [r7, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d102      	bne.n	800c2a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c2a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c2a4:	e01b      	b.n	800c2de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d0ef      	beq.n	800c296 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1ea      	bne.n	800c296 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2c4:	f003 0304 	and.w	r3, r3, #4
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d004      	beq.n	800c2d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2204      	movs	r2, #4
 800c2d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2d2:	2304      	movs	r3, #4
 800c2d4:	e003      	b.n	800c2de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	22c5      	movs	r2, #197	@ 0xc5
 800c2da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	20000004 	.word	0x20000004
 800c2f0:	10624dd3 	.word	0x10624dd3

0800c2f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b088      	sub	sp, #32
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c302:	4b35      	ldr	r3, [pc, #212]	@ (800c3d8 <SDMMC_GetCmdResp6+0xe4>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a35      	ldr	r2, [pc, #212]	@ (800c3dc <SDMMC_GetCmdResp6+0xe8>)
 800c308:	fba2 2303 	umull	r2, r3, r2, r3
 800c30c:	0a5b      	lsrs	r3, r3, #9
 800c30e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c312:	fb02 f303 	mul.w	r3, r2, r3
 800c316:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	1e5a      	subs	r2, r3, #1
 800c31c:	61fa      	str	r2, [r7, #28]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d102      	bne.n	800c328 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c322:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c326:	e052      	b.n	800c3ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c32c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c334:	2b00      	cmp	r3, #0
 800c336:	d0ef      	beq.n	800c318 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1ea      	bne.n	800c318 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c346:	f003 0304 	and.w	r3, r3, #4
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d004      	beq.n	800c358 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2204      	movs	r2, #4
 800c352:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c354:	2304      	movs	r3, #4
 800c356:	e03a      	b.n	800c3ce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c35c:	f003 0301 	and.w	r3, r3, #1
 800c360:	2b00      	cmp	r3, #0
 800c362:	d004      	beq.n	800c36e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2201      	movs	r2, #1
 800c368:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c36a:	2301      	movs	r3, #1
 800c36c:	e02f      	b.n	800c3ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f7ff fbca 	bl	800bb08 <SDMMC_GetCommandResponse>
 800c374:	4603      	mov	r3, r0
 800c376:	461a      	mov	r2, r3
 800c378:	7afb      	ldrb	r3, [r7, #11]
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d001      	beq.n	800c382 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c37e:	2301      	movs	r3, #1
 800c380:	e025      	b.n	800c3ce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	22c5      	movs	r2, #197	@ 0xc5
 800c386:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c388:	2100      	movs	r1, #0
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f7ff fbc9 	bl	800bb22 <SDMMC_GetResponse>
 800c390:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d106      	bne.n	800c3aa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	0c1b      	lsrs	r3, r3, #16
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	e011      	b.n	800c3ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d002      	beq.n	800c3ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c3b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c3b8:	e009      	b.n	800c3ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c3c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c3c8:	e001      	b.n	800c3ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c3ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3720      	adds	r7, #32
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	20000004 	.word	0x20000004
 800c3dc:	10624dd3 	.word	0x10624dd3

0800c3e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c3e8:	4b22      	ldr	r3, [pc, #136]	@ (800c474 <SDMMC_GetCmdResp7+0x94>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a22      	ldr	r2, [pc, #136]	@ (800c478 <SDMMC_GetCmdResp7+0x98>)
 800c3ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c3f2:	0a5b      	lsrs	r3, r3, #9
 800c3f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3f8:	fb02 f303 	mul.w	r3, r2, r3
 800c3fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	1e5a      	subs	r2, r3, #1
 800c402:	60fa      	str	r2, [r7, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d102      	bne.n	800c40e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c408:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c40c:	e02c      	b.n	800c468 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c412:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d0ef      	beq.n	800c3fe <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1ea      	bne.n	800c3fe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c42c:	f003 0304 	and.w	r3, r3, #4
 800c430:	2b00      	cmp	r3, #0
 800c432:	d004      	beq.n	800c43e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2204      	movs	r2, #4
 800c438:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c43a:	2304      	movs	r3, #4
 800c43c:	e014      	b.n	800c468 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c442:	f003 0301 	and.w	r3, r3, #1
 800c446:	2b00      	cmp	r3, #0
 800c448:	d004      	beq.n	800c454 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2201      	movs	r2, #1
 800c44e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c450:	2301      	movs	r3, #1
 800c452:	e009      	b.n	800c468 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d002      	beq.n	800c466 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2240      	movs	r2, #64	@ 0x40
 800c464:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c466:	2300      	movs	r3, #0
  
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	20000004 	.word	0x20000004
 800c478:	10624dd3 	.word	0x10624dd3

0800c47c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c484:	4b11      	ldr	r3, [pc, #68]	@ (800c4cc <SDMMC_GetCmdError+0x50>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a11      	ldr	r2, [pc, #68]	@ (800c4d0 <SDMMC_GetCmdError+0x54>)
 800c48a:	fba2 2303 	umull	r2, r3, r2, r3
 800c48e:	0a5b      	lsrs	r3, r3, #9
 800c490:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c494:	fb02 f303 	mul.w	r3, r2, r3
 800c498:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	1e5a      	subs	r2, r3, #1
 800c49e:	60fa      	str	r2, [r7, #12]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d102      	bne.n	800c4aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c4a8:	e009      	b.n	800c4be <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d0f1      	beq.n	800c49a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	22c5      	movs	r2, #197	@ 0xc5
 800c4ba:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	20000004 	.word	0x20000004
 800c4d0:	10624dd3 	.word	0x10624dd3

0800c4d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c4d8:	4904      	ldr	r1, [pc, #16]	@ (800c4ec <MX_FATFS_Init+0x18>)
 800c4da:	4805      	ldr	r0, [pc, #20]	@ (800c4f0 <MX_FATFS_Init+0x1c>)
 800c4dc:	f005 fcbe 	bl	8011e5c <FATFS_LinkDriver>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	4b03      	ldr	r3, [pc, #12]	@ (800c4f4 <MX_FATFS_Init+0x20>)
 800c4e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c4e8:	bf00      	nop
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	200054a0 	.word	0x200054a0
 800c4f0:	08016554 	.word	0x08016554
 800c4f4:	2000549c 	.word	0x2000549c

0800c4f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c4fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	4a08      	ldr	r2, [pc, #32]	@ (800c538 <disk_status+0x30>)
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	4413      	add	r3, r2
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	79fa      	ldrb	r2, [r7, #7]
 800c520:	4905      	ldr	r1, [pc, #20]	@ (800c538 <disk_status+0x30>)
 800c522:	440a      	add	r2, r1
 800c524:	7a12      	ldrb	r2, [r2, #8]
 800c526:	4610      	mov	r0, r2
 800c528:	4798      	blx	r3
 800c52a:	4603      	mov	r3, r0
 800c52c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	200054cc 	.word	0x200054cc

0800c53c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c54a:	79fb      	ldrb	r3, [r7, #7]
 800c54c:	4a0d      	ldr	r2, [pc, #52]	@ (800c584 <disk_initialize+0x48>)
 800c54e:	5cd3      	ldrb	r3, [r2, r3]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d111      	bne.n	800c578 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c554:	79fb      	ldrb	r3, [r7, #7]
 800c556:	4a0b      	ldr	r2, [pc, #44]	@ (800c584 <disk_initialize+0x48>)
 800c558:	2101      	movs	r1, #1
 800c55a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c55c:	79fb      	ldrb	r3, [r7, #7]
 800c55e:	4a09      	ldr	r2, [pc, #36]	@ (800c584 <disk_initialize+0x48>)
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	4413      	add	r3, r2
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	79fa      	ldrb	r2, [r7, #7]
 800c56a:	4906      	ldr	r1, [pc, #24]	@ (800c584 <disk_initialize+0x48>)
 800c56c:	440a      	add	r2, r1
 800c56e:	7a12      	ldrb	r2, [r2, #8]
 800c570:	4610      	mov	r0, r2
 800c572:	4798      	blx	r3
 800c574:	4603      	mov	r3, r0
 800c576:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c578:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	200054cc 	.word	0x200054cc

0800c588 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c588:	b590      	push	{r4, r7, lr}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60b9      	str	r1, [r7, #8]
 800c590:	607a      	str	r2, [r7, #4]
 800c592:	603b      	str	r3, [r7, #0]
 800c594:	4603      	mov	r3, r0
 800c596:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c598:	7bfb      	ldrb	r3, [r7, #15]
 800c59a:	4a0a      	ldr	r2, [pc, #40]	@ (800c5c4 <disk_read+0x3c>)
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	4413      	add	r3, r2
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	689c      	ldr	r4, [r3, #8]
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
 800c5a6:	4a07      	ldr	r2, [pc, #28]	@ (800c5c4 <disk_read+0x3c>)
 800c5a8:	4413      	add	r3, r2
 800c5aa:	7a18      	ldrb	r0, [r3, #8]
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	68b9      	ldr	r1, [r7, #8]
 800c5b2:	47a0      	blx	r4
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	371c      	adds	r7, #28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd90      	pop	{r4, r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	200054cc 	.word	0x200054cc

0800c5c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c5c8:	b590      	push	{r4, r7, lr}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60b9      	str	r1, [r7, #8]
 800c5d0:	607a      	str	r2, [r7, #4]
 800c5d2:	603b      	str	r3, [r7, #0]
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
 800c5da:	4a0a      	ldr	r2, [pc, #40]	@ (800c604 <disk_write+0x3c>)
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	68dc      	ldr	r4, [r3, #12]
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
 800c5e6:	4a07      	ldr	r2, [pc, #28]	@ (800c604 <disk_write+0x3c>)
 800c5e8:	4413      	add	r3, r2
 800c5ea:	7a18      	ldrb	r0, [r3, #8]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	68b9      	ldr	r1, [r7, #8]
 800c5f2:	47a0      	blx	r4
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	371c      	adds	r7, #28
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd90      	pop	{r4, r7, pc}
 800c602:	bf00      	nop
 800c604:	200054cc 	.word	0x200054cc

0800c608 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	603a      	str	r2, [r7, #0]
 800c612:	71fb      	strb	r3, [r7, #7]
 800c614:	460b      	mov	r3, r1
 800c616:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c618:	79fb      	ldrb	r3, [r7, #7]
 800c61a:	4a09      	ldr	r2, [pc, #36]	@ (800c640 <disk_ioctl+0x38>)
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4413      	add	r3, r2
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	79fa      	ldrb	r2, [r7, #7]
 800c626:	4906      	ldr	r1, [pc, #24]	@ (800c640 <disk_ioctl+0x38>)
 800c628:	440a      	add	r2, r1
 800c62a:	7a10      	ldrb	r0, [r2, #8]
 800c62c:	79b9      	ldrb	r1, [r7, #6]
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	4798      	blx	r3
 800c632:	4603      	mov	r3, r0
 800c634:	73fb      	strb	r3, [r7, #15]
  return res;
 800c636:	7bfb      	ldrb	r3, [r7, #15]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	200054cc 	.word	0x200054cc

0800c644 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	3301      	adds	r3, #1
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c654:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c658:	021b      	lsls	r3, r3, #8
 800c65a:	b21a      	sxth	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	b21b      	sxth	r3, r3
 800c662:	4313      	orrs	r3, r2
 800c664:	b21b      	sxth	r3, r3
 800c666:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c668:	89fb      	ldrh	r3, [r7, #14]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c676:	b480      	push	{r7}
 800c678:	b085      	sub	sp, #20
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	3303      	adds	r3, #3
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	021b      	lsls	r3, r3, #8
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	3202      	adds	r2, #2
 800c68e:	7812      	ldrb	r2, [r2, #0]
 800c690:	4313      	orrs	r3, r2
 800c692:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	021b      	lsls	r3, r3, #8
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	3201      	adds	r2, #1
 800c69c:	7812      	ldrb	r2, [r2, #0]
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	021b      	lsls	r3, r3, #8
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	7812      	ldrb	r2, [r2, #0]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	60fb      	str	r3, [r7, #12]
	return rv;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3714      	adds	r7, #20
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800c6bc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c6c0:	b09d      	sub	sp, #116	@ 0x74
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800c6c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6c8:	3307      	adds	r3, #7
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	469a      	mov	sl, r3
 800c6d2:	4693      	mov	fp, r2
 800c6d4:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800c6d8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800c6dc:	f04f 0000 	mov.w	r0, #0
 800c6e0:	f04f 0100 	mov.w	r1, #0
 800c6e4:	0219      	lsls	r1, r3, #8
 800c6e6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c6ea:	0210      	lsls	r0, r2, #8
 800c6ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6ee:	3306      	adds	r3, #6
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	461c      	mov	r4, r3
 800c6f8:	4615      	mov	r5, r2
 800c6fa:	ea40 0804 	orr.w	r8, r0, r4
 800c6fe:	ea41 0905 	orr.w	r9, r1, r5
 800c702:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800c706:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800c70a:	f04f 0000 	mov.w	r0, #0
 800c70e:	f04f 0100 	mov.w	r1, #0
 800c712:	0219      	lsls	r1, r3, #8
 800c714:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c718:	0210      	lsls	r0, r2, #8
 800c71a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c71c:	3305      	adds	r3, #5
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	b2db      	uxtb	r3, r3
 800c722:	2200      	movs	r2, #0
 800c724:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c726:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800c728:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800c72c:	4623      	mov	r3, r4
 800c72e:	4303      	orrs	r3, r0
 800c730:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c732:	462b      	mov	r3, r5
 800c734:	430b      	orrs	r3, r1
 800c736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c738:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800c73c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800c740:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800c744:	f04f 0000 	mov.w	r0, #0
 800c748:	f04f 0100 	mov.w	r1, #0
 800c74c:	0219      	lsls	r1, r3, #8
 800c74e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c752:	0210      	lsls	r0, r2, #8
 800c754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c756:	3304      	adds	r3, #4
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	2200      	movs	r2, #0
 800c75e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c760:	657a      	str	r2, [r7, #84]	@ 0x54
 800c762:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800c766:	4623      	mov	r3, r4
 800c768:	4303      	orrs	r3, r0
 800c76a:	623b      	str	r3, [r7, #32]
 800c76c:	462b      	mov	r3, r5
 800c76e:	430b      	orrs	r3, r1
 800c770:	627b      	str	r3, [r7, #36]	@ 0x24
 800c772:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c776:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800c77a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800c77e:	f04f 0000 	mov.w	r0, #0
 800c782:	f04f 0100 	mov.w	r1, #0
 800c786:	0219      	lsls	r1, r3, #8
 800c788:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c78c:	0210      	lsls	r0, r2, #8
 800c78e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c790:	3303      	adds	r3, #3
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2200      	movs	r2, #0
 800c798:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c79a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c79c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800c7a0:	4623      	mov	r3, r4
 800c7a2:	4303      	orrs	r3, r0
 800c7a4:	61bb      	str	r3, [r7, #24]
 800c7a6:	462b      	mov	r3, r5
 800c7a8:	430b      	orrs	r3, r1
 800c7aa:	61fb      	str	r3, [r7, #28]
 800c7ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c7b0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800c7b4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800c7b8:	f04f 0000 	mov.w	r0, #0
 800c7bc:	f04f 0100 	mov.w	r1, #0
 800c7c0:	0219      	lsls	r1, r3, #8
 800c7c2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c7c6:	0210      	lsls	r0, r2, #8
 800c7c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7ca:	3302      	adds	r3, #2
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7d4:	647a      	str	r2, [r7, #68]	@ 0x44
 800c7d6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800c7da:	4623      	mov	r3, r4
 800c7dc:	4303      	orrs	r3, r0
 800c7de:	613b      	str	r3, [r7, #16]
 800c7e0:	462b      	mov	r3, r5
 800c7e2:	430b      	orrs	r3, r1
 800c7e4:	617b      	str	r3, [r7, #20]
 800c7e6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c7ea:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800c7ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c7f2:	f04f 0200 	mov.w	r2, #0
 800c7f6:	f04f 0300 	mov.w	r3, #0
 800c7fa:	020b      	lsls	r3, r1, #8
 800c7fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c800:	0202      	lsls	r2, r0, #8
 800c802:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c804:	3101      	adds	r1, #1
 800c806:	7809      	ldrb	r1, [r1, #0]
 800c808:	b2c9      	uxtb	r1, r1
 800c80a:	2000      	movs	r0, #0
 800c80c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c80e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800c810:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800c814:	4621      	mov	r1, r4
 800c816:	4311      	orrs	r1, r2
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	4629      	mov	r1, r5
 800c81c:	4319      	orrs	r1, r3
 800c81e:	60f9      	str	r1, [r7, #12]
 800c820:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c824:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800c828:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c82c:	f04f 0200 	mov.w	r2, #0
 800c830:	f04f 0300 	mov.w	r3, #0
 800c834:	020b      	lsls	r3, r1, #8
 800c836:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c83a:	0202      	lsls	r2, r0, #8
 800c83c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c83e:	7809      	ldrb	r1, [r1, #0]
 800c840:	b2c9      	uxtb	r1, r1
 800c842:	2000      	movs	r0, #0
 800c844:	6339      	str	r1, [r7, #48]	@ 0x30
 800c846:	6378      	str	r0, [r7, #52]	@ 0x34
 800c848:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c84c:	4621      	mov	r1, r4
 800c84e:	4311      	orrs	r1, r2
 800c850:	6039      	str	r1, [r7, #0]
 800c852:	4629      	mov	r1, r5
 800c854:	4319      	orrs	r1, r3
 800c856:	6079      	str	r1, [r7, #4]
 800c858:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c85c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800c860:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800c864:	4610      	mov	r0, r2
 800c866:	4619      	mov	r1, r3
 800c868:	3774      	adds	r7, #116	@ 0x74
 800c86a:	46bd      	mov	sp, r7
 800c86c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c870:	4770      	bx	lr

0800c872 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c872:	b480      	push	{r7}
 800c874:	b083      	sub	sp, #12
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	460b      	mov	r3, r1
 800c87c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	1c5a      	adds	r2, r3, #1
 800c882:	607a      	str	r2, [r7, #4]
 800c884:	887a      	ldrh	r2, [r7, #2]
 800c886:	b2d2      	uxtb	r2, r2
 800c888:	701a      	strb	r2, [r3, #0]
 800c88a:	887b      	ldrh	r3, [r7, #2]
 800c88c:	0a1b      	lsrs	r3, r3, #8
 800c88e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	607a      	str	r2, [r7, #4]
 800c896:	887a      	ldrh	r2, [r7, #2]
 800c898:	b2d2      	uxtb	r2, r2
 800c89a:	701a      	strb	r2, [r3, #0]
}
 800c89c:	bf00      	nop
 800c89e:	370c      	adds	r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	1c5a      	adds	r2, r3, #1
 800c8b6:	607a      	str	r2, [r7, #4]
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	b2d2      	uxtb	r2, r2
 800c8bc:	701a      	strb	r2, [r3, #0]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	0a1b      	lsrs	r3, r3, #8
 800c8c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	1c5a      	adds	r2, r3, #1
 800c8c8:	607a      	str	r2, [r7, #4]
 800c8ca:	683a      	ldr	r2, [r7, #0]
 800c8cc:	b2d2      	uxtb	r2, r2
 800c8ce:	701a      	strb	r2, [r3, #0]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	0a1b      	lsrs	r3, r3, #8
 800c8d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	1c5a      	adds	r2, r3, #1
 800c8da:	607a      	str	r2, [r7, #4]
 800c8dc:	683a      	ldr	r2, [r7, #0]
 800c8de:	b2d2      	uxtb	r2, r2
 800c8e0:	701a      	strb	r2, [r3, #0]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	0a1b      	lsrs	r3, r3, #8
 800c8e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	607a      	str	r2, [r7, #4]
 800c8ee:	683a      	ldr	r2, [r7, #0]
 800c8f0:	b2d2      	uxtb	r2, r2
 800c8f2:	701a      	strb	r2, [r3, #0]
}
 800c8f4:	bf00      	nop
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	60fa      	str	r2, [r7, #12]
 800c912:	783a      	ldrb	r2, [r7, #0]
 800c914:	701a      	strb	r2, [r3, #0]
 800c916:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c91a:	f04f 0200 	mov.w	r2, #0
 800c91e:	f04f 0300 	mov.w	r3, #0
 800c922:	0a02      	lsrs	r2, r0, #8
 800c924:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c928:	0a0b      	lsrs	r3, r1, #8
 800c92a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	1c5a      	adds	r2, r3, #1
 800c932:	60fa      	str	r2, [r7, #12]
 800c934:	783a      	ldrb	r2, [r7, #0]
 800c936:	701a      	strb	r2, [r3, #0]
 800c938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c93c:	f04f 0200 	mov.w	r2, #0
 800c940:	f04f 0300 	mov.w	r3, #0
 800c944:	0a02      	lsrs	r2, r0, #8
 800c946:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c94a:	0a0b      	lsrs	r3, r1, #8
 800c94c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	60fa      	str	r2, [r7, #12]
 800c956:	783a      	ldrb	r2, [r7, #0]
 800c958:	701a      	strb	r2, [r3, #0]
 800c95a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c95e:	f04f 0200 	mov.w	r2, #0
 800c962:	f04f 0300 	mov.w	r3, #0
 800c966:	0a02      	lsrs	r2, r0, #8
 800c968:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c96c:	0a0b      	lsrs	r3, r1, #8
 800c96e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	1c5a      	adds	r2, r3, #1
 800c976:	60fa      	str	r2, [r7, #12]
 800c978:	783a      	ldrb	r2, [r7, #0]
 800c97a:	701a      	strb	r2, [r3, #0]
 800c97c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c980:	f04f 0200 	mov.w	r2, #0
 800c984:	f04f 0300 	mov.w	r3, #0
 800c988:	0a02      	lsrs	r2, r0, #8
 800c98a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c98e:	0a0b      	lsrs	r3, r1, #8
 800c990:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	1c5a      	adds	r2, r3, #1
 800c998:	60fa      	str	r2, [r7, #12]
 800c99a:	783a      	ldrb	r2, [r7, #0]
 800c99c:	701a      	strb	r2, [r3, #0]
 800c99e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9a2:	f04f 0200 	mov.w	r2, #0
 800c9a6:	f04f 0300 	mov.w	r3, #0
 800c9aa:	0a02      	lsrs	r2, r0, #8
 800c9ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c9b0:	0a0b      	lsrs	r3, r1, #8
 800c9b2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	1c5a      	adds	r2, r3, #1
 800c9ba:	60fa      	str	r2, [r7, #12]
 800c9bc:	783a      	ldrb	r2, [r7, #0]
 800c9be:	701a      	strb	r2, [r3, #0]
 800c9c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9c4:	f04f 0200 	mov.w	r2, #0
 800c9c8:	f04f 0300 	mov.w	r3, #0
 800c9cc:	0a02      	lsrs	r2, r0, #8
 800c9ce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c9d2:	0a0b      	lsrs	r3, r1, #8
 800c9d4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	60fa      	str	r2, [r7, #12]
 800c9de:	783a      	ldrb	r2, [r7, #0]
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9e6:	f04f 0200 	mov.w	r2, #0
 800c9ea:	f04f 0300 	mov.w	r3, #0
 800c9ee:	0a02      	lsrs	r2, r0, #8
 800c9f0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c9f4:	0a0b      	lsrs	r3, r1, #8
 800c9f6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	1c5a      	adds	r2, r3, #1
 800c9fe:	60fa      	str	r2, [r7, #12]
 800ca00:	783a      	ldrb	r2, [r7, #0]
 800ca02:	701a      	strb	r2, [r3, #0]
}
 800ca04:	bf00      	nop
 800ca06:	3714      	adds	r7, #20
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ca10:	b480      	push	{r7}
 800ca12:	b087      	sub	sp, #28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00d      	beq.n	800ca46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ca2a:	693a      	ldr	r2, [r7, #16]
 800ca2c:	1c53      	adds	r3, r2, #1
 800ca2e:	613b      	str	r3, [r7, #16]
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	1c59      	adds	r1, r3, #1
 800ca34:	6179      	str	r1, [r7, #20]
 800ca36:	7812      	ldrb	r2, [r2, #0]
 800ca38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	607b      	str	r3, [r7, #4]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1f1      	bne.n	800ca2a <mem_cpy+0x1a>
	}
}
 800ca46:	bf00      	nop
 800ca48:	371c      	adds	r7, #28
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr

0800ca52 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ca52:	b480      	push	{r7}
 800ca54:	b087      	sub	sp, #28
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	60f8      	str	r0, [r7, #12]
 800ca5a:	60b9      	str	r1, [r7, #8]
 800ca5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	1c5a      	adds	r2, r3, #1
 800ca66:	617a      	str	r2, [r7, #20]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	b2d2      	uxtb	r2, r2
 800ca6c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3b01      	subs	r3, #1
 800ca72:	607b      	str	r3, [r7, #4]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1f3      	bne.n	800ca62 <mem_set+0x10>
}
 800ca7a:	bf00      	nop
 800ca7c:	bf00      	nop
 800ca7e:	371c      	adds	r7, #28
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ca88:	b480      	push	{r7}
 800ca8a:	b089      	sub	sp, #36	@ 0x24
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	61fb      	str	r3, [r7, #28]
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	1c5a      	adds	r2, r3, #1
 800caa4:	61fa      	str	r2, [r7, #28]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	4619      	mov	r1, r3
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	1c5a      	adds	r2, r3, #1
 800caae:	61ba      	str	r2, [r7, #24]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	1acb      	subs	r3, r1, r3
 800cab4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	3b01      	subs	r3, #1
 800caba:	607b      	str	r3, [r7, #4]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d002      	beq.n	800cac8 <mem_cmp+0x40>
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d0eb      	beq.n	800caa0 <mem_cmp+0x18>

	return r;
 800cac8:	697b      	ldr	r3, [r7, #20]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3724      	adds	r7, #36	@ 0x24
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cad6:	b480      	push	{r7}
 800cad8:	b083      	sub	sp, #12
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
 800cade:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cae0:	e002      	b.n	800cae8 <chk_chr+0x12>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	3301      	adds	r3, #1
 800cae6:	607b      	str	r3, [r7, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d005      	beq.n	800cafc <chk_chr+0x26>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	461a      	mov	r2, r3
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d1f2      	bne.n	800cae2 <chk_chr+0xc>
	return *str;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	781b      	ldrb	r3, [r3, #0]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d009      	beq.n	800cb2e <lock_fs+0x22>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f005 fa9e 	bl	8012060 <ff_req_grant>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d001      	beq.n	800cb2e <lock_fs+0x22>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e000      	b.n	800cb30 <lock_fs+0x24>
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00d      	beq.n	800cb66 <unlock_fs+0x2e>
 800cb4a:	78fb      	ldrb	r3, [r7, #3]
 800cb4c:	2b0c      	cmp	r3, #12
 800cb4e:	d00a      	beq.n	800cb66 <unlock_fs+0x2e>
 800cb50:	78fb      	ldrb	r3, [r7, #3]
 800cb52:	2b0b      	cmp	r3, #11
 800cb54:	d007      	beq.n	800cb66 <unlock_fs+0x2e>
 800cb56:	78fb      	ldrb	r3, [r7, #3]
 800cb58:	2b0f      	cmp	r3, #15
 800cb5a:	d004      	beq.n	800cb66 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	695b      	ldr	r3, [r3, #20]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f005 fa92 	bl	801208a <ff_rel_grant>
	}
}
 800cb66:	bf00      	nop
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
	...

0800cb70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	60bb      	str	r3, [r7, #8]
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	60fb      	str	r3, [r7, #12]
 800cb82:	e029      	b.n	800cbd8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cb84:	4a27      	ldr	r2, [pc, #156]	@ (800cc24 <chk_lock+0xb4>)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	011b      	lsls	r3, r3, #4
 800cb8a:	4413      	add	r3, r2
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d01d      	beq.n	800cbce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cb92:	4a24      	ldr	r2, [pc, #144]	@ (800cc24 <chk_lock+0xb4>)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	011b      	lsls	r3, r3, #4
 800cb98:	4413      	add	r3, r2
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d116      	bne.n	800cbd2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cba4:	4a1f      	ldr	r2, [pc, #124]	@ (800cc24 <chk_lock+0xb4>)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	011b      	lsls	r3, r3, #4
 800cbaa:	4413      	add	r3, r2
 800cbac:	3304      	adds	r3, #4
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d10c      	bne.n	800cbd2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cbb8:	4a1a      	ldr	r2, [pc, #104]	@ (800cc24 <chk_lock+0xb4>)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	011b      	lsls	r3, r3, #4
 800cbbe:	4413      	add	r3, r2
 800cbc0:	3308      	adds	r3, #8
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d102      	bne.n	800cbd2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cbcc:	e007      	b.n	800cbde <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	60fb      	str	r3, [r7, #12]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d9d2      	bls.n	800cb84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	d109      	bne.n	800cbf8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d102      	bne.n	800cbf0 <chk_lock+0x80>
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	d101      	bne.n	800cbf4 <chk_lock+0x84>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	e010      	b.n	800cc16 <chk_lock+0xa6>
 800cbf4:	2312      	movs	r3, #18
 800cbf6:	e00e      	b.n	800cc16 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d108      	bne.n	800cc10 <chk_lock+0xa0>
 800cbfe:	4a09      	ldr	r2, [pc, #36]	@ (800cc24 <chk_lock+0xb4>)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	011b      	lsls	r3, r3, #4
 800cc04:	4413      	add	r3, r2
 800cc06:	330c      	adds	r3, #12
 800cc08:	881b      	ldrh	r3, [r3, #0]
 800cc0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc0e:	d101      	bne.n	800cc14 <chk_lock+0xa4>
 800cc10:	2310      	movs	r3, #16
 800cc12:	e000      	b.n	800cc16 <chk_lock+0xa6>
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3714      	adds	r7, #20
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	200054ac 	.word	0x200054ac

0800cc28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	607b      	str	r3, [r7, #4]
 800cc32:	e002      	b.n	800cc3a <enq_lock+0x12>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	3301      	adds	r3, #1
 800cc38:	607b      	str	r3, [r7, #4]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d806      	bhi.n	800cc4e <enq_lock+0x26>
 800cc40:	4a09      	ldr	r2, [pc, #36]	@ (800cc68 <enq_lock+0x40>)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	011b      	lsls	r3, r3, #4
 800cc46:	4413      	add	r3, r2
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1f2      	bne.n	800cc34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b02      	cmp	r3, #2
 800cc52:	bf14      	ite	ne
 800cc54:	2301      	movne	r3, #1
 800cc56:	2300      	moveq	r3, #0
 800cc58:	b2db      	uxtb	r3, r3
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	370c      	adds	r7, #12
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	200054ac 	.word	0x200054ac

0800cc6c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cc76:	2300      	movs	r3, #0
 800cc78:	60fb      	str	r3, [r7, #12]
 800cc7a:	e01f      	b.n	800ccbc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cc7c:	4a41      	ldr	r2, [pc, #260]	@ (800cd84 <inc_lock+0x118>)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	011b      	lsls	r3, r3, #4
 800cc82:	4413      	add	r3, r2
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d113      	bne.n	800ccb6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cc8e:	4a3d      	ldr	r2, [pc, #244]	@ (800cd84 <inc_lock+0x118>)
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	011b      	lsls	r3, r3, #4
 800cc94:	4413      	add	r3, r2
 800cc96:	3304      	adds	r3, #4
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d109      	bne.n	800ccb6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cca2:	4a38      	ldr	r2, [pc, #224]	@ (800cd84 <inc_lock+0x118>)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	011b      	lsls	r3, r3, #4
 800cca8:	4413      	add	r3, r2
 800ccaa:	3308      	adds	r3, #8
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d006      	beq.n	800ccc4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	60fb      	str	r3, [r7, #12]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d9dc      	bls.n	800cc7c <inc_lock+0x10>
 800ccc2:	e000      	b.n	800ccc6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ccc4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d132      	bne.n	800cd32 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cccc:	2300      	movs	r3, #0
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	e002      	b.n	800ccd8 <inc_lock+0x6c>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d806      	bhi.n	800ccec <inc_lock+0x80>
 800ccde:	4a29      	ldr	r2, [pc, #164]	@ (800cd84 <inc_lock+0x118>)
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	011b      	lsls	r3, r3, #4
 800cce4:	4413      	add	r3, r2
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1f2      	bne.n	800ccd2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d101      	bne.n	800ccf6 <inc_lock+0x8a>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	e040      	b.n	800cd78 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	4922      	ldr	r1, [pc, #136]	@ (800cd84 <inc_lock+0x118>)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	011b      	lsls	r3, r3, #4
 800cd00:	440b      	add	r3, r1
 800cd02:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	689a      	ldr	r2, [r3, #8]
 800cd08:	491e      	ldr	r1, [pc, #120]	@ (800cd84 <inc_lock+0x118>)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	011b      	lsls	r3, r3, #4
 800cd0e:	440b      	add	r3, r1
 800cd10:	3304      	adds	r3, #4
 800cd12:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd18:	491a      	ldr	r1, [pc, #104]	@ (800cd84 <inc_lock+0x118>)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	011b      	lsls	r3, r3, #4
 800cd1e:	440b      	add	r3, r1
 800cd20:	3308      	adds	r3, #8
 800cd22:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cd24:	4a17      	ldr	r2, [pc, #92]	@ (800cd84 <inc_lock+0x118>)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	011b      	lsls	r3, r3, #4
 800cd2a:	4413      	add	r3, r2
 800cd2c:	330c      	adds	r3, #12
 800cd2e:	2200      	movs	r2, #0
 800cd30:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d009      	beq.n	800cd4c <inc_lock+0xe0>
 800cd38:	4a12      	ldr	r2, [pc, #72]	@ (800cd84 <inc_lock+0x118>)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	011b      	lsls	r3, r3, #4
 800cd3e:	4413      	add	r3, r2
 800cd40:	330c      	adds	r3, #12
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <inc_lock+0xe0>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	e015      	b.n	800cd78 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d108      	bne.n	800cd64 <inc_lock+0xf8>
 800cd52:	4a0c      	ldr	r2, [pc, #48]	@ (800cd84 <inc_lock+0x118>)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	011b      	lsls	r3, r3, #4
 800cd58:	4413      	add	r3, r2
 800cd5a:	330c      	adds	r3, #12
 800cd5c:	881b      	ldrh	r3, [r3, #0]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	e001      	b.n	800cd68 <inc_lock+0xfc>
 800cd64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cd68:	4906      	ldr	r1, [pc, #24]	@ (800cd84 <inc_lock+0x118>)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	011b      	lsls	r3, r3, #4
 800cd6e:	440b      	add	r3, r1
 800cd70:	330c      	adds	r3, #12
 800cd72:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	3301      	adds	r3, #1
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3714      	adds	r7, #20
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr
 800cd84:	200054ac 	.word	0x200054ac

0800cd88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3b01      	subs	r3, #1
 800cd94:	607b      	str	r3, [r7, #4]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d825      	bhi.n	800cde8 <dec_lock+0x60>
		n = Files[i].ctr;
 800cd9c:	4a17      	ldr	r2, [pc, #92]	@ (800cdfc <dec_lock+0x74>)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	011b      	lsls	r3, r3, #4
 800cda2:	4413      	add	r3, r2
 800cda4:	330c      	adds	r3, #12
 800cda6:	881b      	ldrh	r3, [r3, #0]
 800cda8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cdaa:	89fb      	ldrh	r3, [r7, #14]
 800cdac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdb0:	d101      	bne.n	800cdb6 <dec_lock+0x2e>
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cdb6:	89fb      	ldrh	r3, [r7, #14]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <dec_lock+0x3a>
 800cdbc:	89fb      	ldrh	r3, [r7, #14]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cdc2:	4a0e      	ldr	r2, [pc, #56]	@ (800cdfc <dec_lock+0x74>)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	011b      	lsls	r3, r3, #4
 800cdc8:	4413      	add	r3, r2
 800cdca:	330c      	adds	r3, #12
 800cdcc:	89fa      	ldrh	r2, [r7, #14]
 800cdce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cdd0:	89fb      	ldrh	r3, [r7, #14]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d105      	bne.n	800cde2 <dec_lock+0x5a>
 800cdd6:	4a09      	ldr	r2, [pc, #36]	@ (800cdfc <dec_lock+0x74>)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	011b      	lsls	r3, r3, #4
 800cddc:	4413      	add	r3, r2
 800cdde:	2200      	movs	r2, #0
 800cde0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	737b      	strb	r3, [r7, #13]
 800cde6:	e001      	b.n	800cdec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cde8:	2302      	movs	r3, #2
 800cdea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cdec:	7b7b      	ldrb	r3, [r7, #13]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	200054ac 	.word	0x200054ac

0800ce00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ce08:	2300      	movs	r3, #0
 800ce0a:	60fb      	str	r3, [r7, #12]
 800ce0c:	e010      	b.n	800ce30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce0e:	4a0d      	ldr	r2, [pc, #52]	@ (800ce44 <clear_lock+0x44>)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	011b      	lsls	r3, r3, #4
 800ce14:	4413      	add	r3, r2
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d105      	bne.n	800ce2a <clear_lock+0x2a>
 800ce1e:	4a09      	ldr	r2, [pc, #36]	@ (800ce44 <clear_lock+0x44>)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	011b      	lsls	r3, r3, #4
 800ce24:	4413      	add	r3, r2
 800ce26:	2200      	movs	r2, #0
 800ce28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	60fb      	str	r3, [r7, #12]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d9eb      	bls.n	800ce0e <clear_lock+0xe>
	}
}
 800ce36:	bf00      	nop
 800ce38:	bf00      	nop
 800ce3a:	3714      	adds	r7, #20
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr
 800ce44:	200054ac 	.word	0x200054ac

0800ce48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	78db      	ldrb	r3, [r3, #3]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d034      	beq.n	800cec6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	7858      	ldrb	r0, [r3, #1]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	f7ff fbaa 	bl	800c5c8 <disk_write>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d002      	beq.n	800ce80 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	73fb      	strb	r3, [r7, #15]
 800ce7e:	e022      	b.n	800cec6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce8a:	697a      	ldr	r2, [r7, #20]
 800ce8c:	1ad2      	subs	r2, r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d217      	bcs.n	800cec6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	789b      	ldrb	r3, [r3, #2]
 800ce9a:	613b      	str	r3, [r7, #16]
 800ce9c:	e010      	b.n	800cec0 <sync_window+0x78>
					wsect += fs->fsize;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cea2:	697a      	ldr	r2, [r7, #20]
 800cea4:	4413      	add	r3, r2
 800cea6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7858      	ldrb	r0, [r3, #1]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	697a      	ldr	r2, [r7, #20]
 800ceb6:	f7ff fb87 	bl	800c5c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	613b      	str	r3, [r7, #16]
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d8eb      	bhi.n	800ce9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cee2:	683a      	ldr	r2, [r7, #0]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d01b      	beq.n	800cf20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7ff ffad 	bl	800ce48 <sync_window>
 800ceee:	4603      	mov	r3, r0
 800cef0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cef2:	7bfb      	ldrb	r3, [r7, #15]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d113      	bne.n	800cf20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	7858      	ldrb	r0, [r3, #1]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800cf02:	2301      	movs	r3, #1
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	f7ff fb3f 	bl	800c588 <disk_read>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d004      	beq.n	800cf1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cf10:	f04f 33ff 	mov.w	r3, #4294967295
 800cf14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
	...

0800cf2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7ff ff87 	bl	800ce48 <sync_window>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d158      	bne.n	800cff6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b03      	cmp	r3, #3
 800cf4a:	d148      	bne.n	800cfde <sync_fs+0xb2>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	791b      	ldrb	r3, [r3, #4]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d144      	bne.n	800cfde <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	333c      	adds	r3, #60	@ 0x3c
 800cf58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7ff fd77 	bl	800ca52 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	333c      	adds	r3, #60	@ 0x3c
 800cf68:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cf6c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7ff fc7e 	bl	800c872 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	333c      	adds	r3, #60	@ 0x3c
 800cf7a:	4921      	ldr	r1, [pc, #132]	@ (800d000 <sync_fs+0xd4>)
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7ff fc93 	bl	800c8a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	333c      	adds	r3, #60	@ 0x3c
 800cf86:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cf8a:	491e      	ldr	r1, [pc, #120]	@ (800d004 <sync_fs+0xd8>)
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7ff fc8b 	bl	800c8a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	333c      	adds	r3, #60	@ 0x3c
 800cf96:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	69db      	ldr	r3, [r3, #28]
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	4610      	mov	r0, r2
 800cfa2:	f7ff fc81 	bl	800c8a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	333c      	adds	r3, #60	@ 0x3c
 800cfaa:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	699b      	ldr	r3, [r3, #24]
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	4610      	mov	r0, r2
 800cfb6:	f7ff fc77 	bl	800c8a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfbe:	1c5a      	adds	r2, r3, #1
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	7858      	ldrb	r0, [r3, #1]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	f7ff faf8 	bl	800c5c8 <disk_write>
			fs->fsi_flag = 0;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	785b      	ldrb	r3, [r3, #1]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff fb0e 	bl	800c608 <disk_ioctl>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <sync_fs+0xca>
 800cff2:	2301      	movs	r3, #1
 800cff4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	41615252 	.word	0x41615252
 800d004:	61417272 	.word	0x61417272

0800d008 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	3b02      	subs	r3, #2
 800d016:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6a1b      	ldr	r3, [r3, #32]
 800d01c:	3b02      	subs	r3, #2
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	429a      	cmp	r2, r3
 800d022:	d301      	bcc.n	800d028 <clust2sect+0x20>
 800d024:	2300      	movs	r3, #0
 800d026:	e008      	b.n	800d03a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	895b      	ldrh	r3, [r3, #10]
 800d02c:	461a      	mov	r2, r3
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	fb03 f202 	mul.w	r2, r3, r2
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d038:	4413      	add	r3, r2
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	370c      	adds	r7, #12
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
	...

0800d048 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b088      	sub	sp, #32
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d052:	6879      	ldr	r1, [r7, #4]
 800d054:	6809      	ldr	r1, [r1, #0]
 800d056:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d058:	6839      	ldr	r1, [r7, #0]
 800d05a:	2901      	cmp	r1, #1
 800d05c:	d904      	bls.n	800d068 <get_fat+0x20>
 800d05e:	69b9      	ldr	r1, [r7, #24]
 800d060:	6a09      	ldr	r1, [r1, #32]
 800d062:	6838      	ldr	r0, [r7, #0]
 800d064:	4288      	cmp	r0, r1
 800d066:	d302      	bcc.n	800d06e <get_fat+0x26>
		val = 1;	/* Internal error */
 800d068:	2301      	movs	r3, #1
 800d06a:	61fb      	str	r3, [r7, #28]
 800d06c:	e100      	b.n	800d270 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d06e:	f04f 31ff 	mov.w	r1, #4294967295
 800d072:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800d074:	69b9      	ldr	r1, [r7, #24]
 800d076:	7809      	ldrb	r1, [r1, #0]
 800d078:	3901      	subs	r1, #1
 800d07a:	2903      	cmp	r1, #3
 800d07c:	f200 80ec 	bhi.w	800d258 <get_fat+0x210>
 800d080:	a001      	add	r0, pc, #4	@ (adr r0, 800d088 <get_fat+0x40>)
 800d082:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d086:	bf00      	nop
 800d088:	0800d099 	.word	0x0800d099
 800d08c:	0800d11f 	.word	0x0800d11f
 800d090:	0800d155 	.word	0x0800d155
 800d094:	0800d18d 	.word	0x0800d18d
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	60fb      	str	r3, [r7, #12]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	085b      	lsrs	r3, r3, #1
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	4413      	add	r3, r2
 800d0a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	0a5b      	lsrs	r3, r3, #9
 800d0ae:	4413      	add	r3, r2
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	69b8      	ldr	r0, [r7, #24]
 800d0b4:	f7ff ff0c 	bl	800ced0 <move_window>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f040 80cf 	bne.w	800d25e <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	1c5a      	adds	r2, r3, #1
 800d0c4:	60fa      	str	r2, [r7, #12]
 800d0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ca:	69ba      	ldr	r2, [r7, #24]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d0d2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	0a5b      	lsrs	r3, r3, #9
 800d0dc:	4413      	add	r3, r2
 800d0de:	4619      	mov	r1, r3
 800d0e0:	69b8      	ldr	r0, [r7, #24]
 800d0e2:	f7ff fef5 	bl	800ced0 <move_window>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f040 80ba 	bne.w	800d262 <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0f4:	69ba      	ldr	r2, [r7, #24]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d0fc:	021b      	lsls	r3, r3, #8
 800d0fe:	68ba      	ldr	r2, [r7, #8]
 800d100:	4313      	orrs	r3, r2
 800d102:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	f003 0301 	and.w	r3, r3, #1
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d002      	beq.n	800d114 <get_fat+0xcc>
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	091b      	lsrs	r3, r3, #4
 800d112:	e002      	b.n	800d11a <get_fat+0xd2>
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d11a:	61fb      	str	r3, [r7, #28]
			break;
 800d11c:	e0a8      	b.n	800d270 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	0a1b      	lsrs	r3, r3, #8
 800d126:	4413      	add	r3, r2
 800d128:	4619      	mov	r1, r3
 800d12a:	69b8      	ldr	r0, [r7, #24]
 800d12c:	f7ff fed0 	bl	800ced0 <move_window>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	f040 8097 	bne.w	800d266 <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d138:	69bb      	ldr	r3, [r7, #24]
 800d13a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	005b      	lsls	r3, r3, #1
 800d142:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d146:	4413      	add	r3, r2
 800d148:	4618      	mov	r0, r3
 800d14a:	f7ff fa7b 	bl	800c644 <ld_word>
 800d14e:	4603      	mov	r3, r0
 800d150:	61fb      	str	r3, [r7, #28]
			break;
 800d152:	e08d      	b.n	800d270 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	09db      	lsrs	r3, r3, #7
 800d15c:	4413      	add	r3, r2
 800d15e:	4619      	mov	r1, r3
 800d160:	69b8      	ldr	r0, [r7, #24]
 800d162:	f7ff feb5 	bl	800ced0 <move_window>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d17e      	bne.n	800d26a <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d17a:	4413      	add	r3, r2
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7ff fa7a 	bl	800c676 <ld_dword>
 800d182:	4603      	mov	r3, r0
 800d184:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d188:	61fb      	str	r3, [r7, #28]
			break;
 800d18a:	e071      	b.n	800d270 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800d18c:	6879      	ldr	r1, [r7, #4]
 800d18e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800d192:	4301      	orrs	r1, r0
 800d194:	d060      	beq.n	800d258 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800d196:	6879      	ldr	r1, [r7, #4]
 800d198:	6889      	ldr	r1, [r1, #8]
 800d19a:	6838      	ldr	r0, [r7, #0]
 800d19c:	1a41      	subs	r1, r0, r1
 800d19e:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800d1a0:	6879      	ldr	r1, [r7, #4]
 800d1a2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800d1a6:	1e42      	subs	r2, r0, #1
 800d1a8:	f141 33ff 	adc.w	r3, r1, #4294967295
 800d1ac:	f04f 0000 	mov.w	r0, #0
 800d1b0:	f04f 0100 	mov.w	r1, #0
 800d1b4:	0a50      	lsrs	r0, r2, #9
 800d1b6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800d1ba:	0a59      	lsrs	r1, r3, #9
 800d1bc:	4602      	mov	r2, r0
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	895b      	ldrh	r3, [r3, #10]
 800d1c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1c6:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	79db      	ldrb	r3, [r3, #7]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d10e      	bne.n	800d1ee <get_fat+0x1a6>
					if (cofs <= clen) {
 800d1d0:	697a      	ldr	r2, [r7, #20]
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d80a      	bhi.n	800d1ee <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800d1d8:	697a      	ldr	r2, [r7, #20]
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d002      	beq.n	800d1e6 <get_fat+0x19e>
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	e001      	b.n	800d1ea <get_fat+0x1a2>
 800d1e6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d1ea:	61fb      	str	r3, [r7, #28]
						break;
 800d1ec:	e040      	b.n	800d270 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	79db      	ldrb	r3, [r3, #7]
 800d1f2:	2b03      	cmp	r3, #3
 800d1f4:	d108      	bne.n	800d208 <get_fat+0x1c0>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	699b      	ldr	r3, [r3, #24]
 800d1fa:	697a      	ldr	r2, [r7, #20]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d203      	bcs.n	800d208 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	3301      	adds	r3, #1
 800d204:	61fb      	str	r3, [r7, #28]
					break;
 800d206:	e033      	b.n	800d270 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	79db      	ldrb	r3, [r3, #7]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d023      	beq.n	800d258 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	69db      	ldr	r3, [r3, #28]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d003      	beq.n	800d220 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800d218:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d21c:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800d21e:	e027      	b.n	800d270 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	09db      	lsrs	r3, r3, #7
 800d228:	4413      	add	r3, r2
 800d22a:	4619      	mov	r1, r3
 800d22c:	69b8      	ldr	r0, [r7, #24]
 800d22e:	f7ff fe4f 	bl	800ced0 <move_window>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d11a      	bne.n	800d26e <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d246:	4413      	add	r3, r2
 800d248:	4618      	mov	r0, r3
 800d24a:	f7ff fa14 	bl	800c676 <ld_dword>
 800d24e:	4603      	mov	r3, r0
 800d250:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d254:	61fb      	str	r3, [r7, #28]
					break;
 800d256:	e00b      	b.n	800d270 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d258:	2301      	movs	r3, #1
 800d25a:	61fb      	str	r3, [r7, #28]
 800d25c:	e008      	b.n	800d270 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d25e:	bf00      	nop
 800d260:	e006      	b.n	800d270 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d262:	bf00      	nop
 800d264:	e004      	b.n	800d270 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d266:	bf00      	nop
 800d268:	e002      	b.n	800d270 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d26a:	bf00      	nop
 800d26c:	e000      	b.n	800d270 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d26e:	bf00      	nop
		}
	}

	return val;
 800d270:	69fb      	ldr	r3, [r7, #28]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3720      	adds	r7, #32
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop

0800d27c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d27c:	b590      	push	{r4, r7, lr}
 800d27e:	b089      	sub	sp, #36	@ 0x24
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d288:	2302      	movs	r3, #2
 800d28a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	2b01      	cmp	r3, #1
 800d290:	f240 80dd 	bls.w	800d44e <put_fat+0x1d2>
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6a1b      	ldr	r3, [r3, #32]
 800d298:	68ba      	ldr	r2, [r7, #8]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	f080 80d7 	bcs.w	800d44e <put_fat+0x1d2>
		switch (fs->fs_type) {
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	2b04      	cmp	r3, #4
 800d2a6:	f300 80d2 	bgt.w	800d44e <put_fat+0x1d2>
 800d2aa:	2b03      	cmp	r3, #3
 800d2ac:	f280 8093 	bge.w	800d3d6 <put_fat+0x15a>
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d002      	beq.n	800d2ba <put_fat+0x3e>
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d06e      	beq.n	800d396 <put_fat+0x11a>
 800d2b8:	e0c9      	b.n	800d44e <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	61bb      	str	r3, [r7, #24]
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	085b      	lsrs	r3, r3, #1
 800d2c2:	69ba      	ldr	r2, [r7, #24]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	0a5b      	lsrs	r3, r3, #9
 800d2d0:	4413      	add	r3, r2
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f7ff fdfb 	bl	800ced0 <move_window>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d2de:	7ffb      	ldrb	r3, [r7, #31]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f040 80ad 	bne.w	800d440 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	1c59      	adds	r1, r3, #1
 800d2f0:	61b9      	str	r1, [r7, #24]
 800d2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2f6:	4413      	add	r3, r2
 800d2f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	f003 0301 	and.w	r3, r3, #1
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00d      	beq.n	800d320 <put_fat+0xa4>
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	b25b      	sxtb	r3, r3
 800d30a:	f003 030f 	and.w	r3, r3, #15
 800d30e:	b25a      	sxtb	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	b25b      	sxtb	r3, r3
 800d314:	011b      	lsls	r3, r3, #4
 800d316:	b25b      	sxtb	r3, r3
 800d318:	4313      	orrs	r3, r2
 800d31a:	b25b      	sxtb	r3, r3
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	e001      	b.n	800d324 <put_fat+0xa8>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	b2db      	uxtb	r3, r3
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2201      	movs	r2, #1
 800d32c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	0a5b      	lsrs	r3, r3, #9
 800d336:	4413      	add	r3, r2
 800d338:	4619      	mov	r1, r3
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f7ff fdc8 	bl	800ced0 <move_window>
 800d340:	4603      	mov	r3, r0
 800d342:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d344:	7ffb      	ldrb	r3, [r7, #31]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d17c      	bne.n	800d444 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d356:	4413      	add	r3, r2
 800d358:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	f003 0301 	and.w	r3, r3, #1
 800d360:	2b00      	cmp	r3, #0
 800d362:	d003      	beq.n	800d36c <put_fat+0xf0>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	091b      	lsrs	r3, r3, #4
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	e00e      	b.n	800d38a <put_fat+0x10e>
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	b25b      	sxtb	r3, r3
 800d372:	f023 030f 	bic.w	r3, r3, #15
 800d376:	b25a      	sxtb	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	0a1b      	lsrs	r3, r3, #8
 800d37c:	b25b      	sxtb	r3, r3
 800d37e:	f003 030f 	and.w	r3, r3, #15
 800d382:	b25b      	sxtb	r3, r3
 800d384:	4313      	orrs	r3, r2
 800d386:	b25b      	sxtb	r3, r3
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	697a      	ldr	r2, [r7, #20]
 800d38c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2201      	movs	r2, #1
 800d392:	70da      	strb	r2, [r3, #3]
			break;
 800d394:	e05b      	b.n	800d44e <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	0a1b      	lsrs	r3, r3, #8
 800d39e:	4413      	add	r3, r2
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f7ff fd94 	bl	800ced0 <move_window>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3ac:	7ffb      	ldrb	r3, [r7, #31]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d14a      	bne.n	800d448 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	005b      	lsls	r3, r3, #1
 800d3bc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d3c0:	4413      	add	r3, r2
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	b292      	uxth	r2, r2
 800d3c6:	4611      	mov	r1, r2
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7ff fa52 	bl	800c872 <st_word>
			fs->wflag = 1;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	70da      	strb	r2, [r3, #3]
			break;
 800d3d4:	e03b      	b.n	800d44e <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	09db      	lsrs	r3, r3, #7
 800d3de:	4413      	add	r3, r2
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f7ff fd74 	bl	800ced0 <move_window>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3ec:	7ffb      	ldrb	r3, [r7, #31]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d12c      	bne.n	800d44c <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	2b04      	cmp	r3, #4
 800d3f8:	d012      	beq.n	800d420 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d40e:	4413      	add	r3, r2
 800d410:	4618      	mov	r0, r3
 800d412:	f7ff f930 	bl	800c676 <ld_dword>
 800d416:	4603      	mov	r3, r0
 800d418:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d41c:	4323      	orrs	r3, r4
 800d41e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d42e:	4413      	add	r3, r2
 800d430:	6879      	ldr	r1, [r7, #4]
 800d432:	4618      	mov	r0, r3
 800d434:	f7ff fa38 	bl	800c8a8 <st_dword>
			fs->wflag = 1;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2201      	movs	r2, #1
 800d43c:	70da      	strb	r2, [r3, #3]
			break;
 800d43e:	e006      	b.n	800d44e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800d440:	bf00      	nop
 800d442:	e004      	b.n	800d44e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800d444:	bf00      	nop
 800d446:	e002      	b.n	800d44e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800d448:	bf00      	nop
 800d44a:	e000      	b.n	800d44e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800d44c:	bf00      	nop
		}
	}
	return res;
 800d44e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3724      	adds	r7, #36	@ 0x24
 800d454:	46bd      	mov	sp, r7
 800d456:	bd90      	pop	{r4, r7, pc}

0800d458 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b08a      	sub	sp, #40	@ 0x28
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	3b02      	subs	r3, #2
 800d468:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	3b02      	subs	r3, #2
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	429a      	cmp	r2, r3
 800d474:	d301      	bcc.n	800d47a <find_bitmap+0x22>
 800d476:	2300      	movs	r3, #0
 800d478:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	61fb      	str	r3, [r7, #28]
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	61bb      	str	r3, [r7, #24]
 800d482:	2300      	movs	r3, #0
 800d484:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	0b1b      	lsrs	r3, r3, #12
 800d48e:	4413      	add	r3, r2
 800d490:	4619      	mov	r1, r3
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f7ff fd1c 	bl	800ced0 <move_window>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d002      	beq.n	800d4a4 <find_bitmap+0x4c>
 800d49e:	f04f 33ff 	mov.w	r3, #4294967295
 800d4a2:	e051      	b.n	800d548 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	08db      	lsrs	r3, r3, #3
 800d4a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ac:	623b      	str	r3, [r7, #32]
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	f003 0307 	and.w	r3, r3, #7
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	6a3b      	ldr	r3, [r7, #32]
 800d4c2:	4413      	add	r3, r2
 800d4c4:	333c      	adds	r3, #60	@ 0x3c
 800d4c6:	781a      	ldrb	r2, [r3, #0]
 800d4c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4cc:	4013      	ands	r3, r2
 800d4ce:	74fb      	strb	r3, [r7, #19]
 800d4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4d4:	005b      	lsls	r3, r3, #1
 800d4d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	61fb      	str	r3, [r7, #28]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6a1b      	ldr	r3, [r3, #32]
 800d4e4:	3b02      	subs	r3, #2
 800d4e6:	69fa      	ldr	r2, [r7, #28]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d307      	bcc.n	800d4fc <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	61fb      	str	r3, [r7, #28]
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d4f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4fa:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800d4fc:	7cfb      	ldrb	r3, [r7, #19]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d109      	bne.n	800d516 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	3301      	adds	r3, #1
 800d506:	617b      	str	r3, [r7, #20]
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d106      	bne.n	800d51e <find_bitmap+0xc6>
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	3302      	adds	r3, #2
 800d514:	e018      	b.n	800d548 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	61bb      	str	r3, [r7, #24]
 800d51a:	2300      	movs	r3, #0
 800d51c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800d51e:	69fa      	ldr	r2, [r7, #28]
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	429a      	cmp	r2, r3
 800d524:	d101      	bne.n	800d52a <find_bitmap+0xd2>
 800d526:	2300      	movs	r3, #0
 800d528:	e00e      	b.n	800d548 <find_bitmap+0xf0>
			} while (bm);
 800d52a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d1c5      	bne.n	800d4be <find_bitmap+0x66>
			bm = 1;
 800d532:	2301      	movs	r3, #1
 800d534:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800d538:	6a3b      	ldr	r3, [r7, #32]
 800d53a:	3301      	adds	r3, #1
 800d53c:	623b      	str	r3, [r7, #32]
 800d53e:	6a3b      	ldr	r3, [r7, #32]
 800d540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d544:	d3bb      	bcc.n	800d4be <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d546:	e79e      	b.n	800d486 <find_bitmap+0x2e>
	}
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3728      	adds	r7, #40	@ 0x28
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
 800d55c:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	3b02      	subs	r3, #2
 800d562:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	0b1b      	lsrs	r3, r3, #12
 800d56c:	4413      	add	r3, r2
 800d56e:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	08db      	lsrs	r3, r3, #3
 800d574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d578:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	f003 0307 	and.w	r3, r3, #7
 800d580:	2201      	movs	r2, #1
 800d582:	fa02 f303 	lsl.w	r3, r2, r3
 800d586:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	1c5a      	adds	r2, r3, #1
 800d58c:	617a      	str	r2, [r7, #20]
 800d58e:	4619      	mov	r1, r3
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f7ff fc9d 	bl	800ced0 <move_window>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d001      	beq.n	800d5a0 <change_bitmap+0x50>
 800d59c:	2301      	movs	r3, #1
 800d59e:	e03d      	b.n	800d61c <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	333c      	adds	r3, #60	@ 0x3c
 800d5a8:	781a      	ldrb	r2, [r3, #0]
 800d5aa:	7ffb      	ldrb	r3, [r7, #31]
 800d5ac:	4013      	ands	r3, r2
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	bf14      	ite	ne
 800d5b4:	2301      	movne	r3, #1
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d101      	bne.n	800d5c6 <change_bitmap+0x76>
 800d5c2:	2302      	movs	r3, #2
 800d5c4:	e02a      	b.n	800d61c <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	333c      	adds	r3, #60	@ 0x3c
 800d5ce:	781a      	ldrb	r2, [r3, #0]
 800d5d0:	7ffb      	ldrb	r3, [r7, #31]
 800d5d2:	4053      	eors	r3, r2
 800d5d4:	b2d9      	uxtb	r1, r3
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	69bb      	ldr	r3, [r7, #24]
 800d5da:	4413      	add	r3, r2
 800d5dc:	333c      	adds	r3, #60	@ 0x3c
 800d5de:	460a      	mov	r2, r1
 800d5e0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	607b      	str	r3, [r7, #4]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d101      	bne.n	800d5f8 <change_bitmap+0xa8>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	e011      	b.n	800d61c <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800d5f8:	7ffb      	ldrb	r3, [r7, #31]
 800d5fa:	005b      	lsls	r3, r3, #1
 800d5fc:	77fb      	strb	r3, [r7, #31]
 800d5fe:	7ffb      	ldrb	r3, [r7, #31]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1cd      	bne.n	800d5a0 <change_bitmap+0x50>
			bm = 1;
 800d604:	2301      	movs	r3, #1
 800d606:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	3301      	adds	r3, #1
 800d60c:	61bb      	str	r3, [r7, #24]
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d614:	d3c4      	bcc.n	800d5a0 <change_bitmap+0x50>
		i = 0;
 800d616:	2300      	movs	r3, #0
 800d618:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d61a:	e7b5      	b.n	800d588 <change_bitmap+0x38>
	}
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3720      	adds	r7, #32
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b086      	sub	sp, #24
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	79db      	ldrb	r3, [r3, #7]
 800d630:	2b03      	cmp	r3, #3
 800d632:	d121      	bne.n	800d678 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	689b      	ldr	r3, [r3, #8]
 800d638:	617b      	str	r3, [r7, #20]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	613b      	str	r3, [r7, #16]
 800d640:	e014      	b.n	800d66c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6818      	ldr	r0, [r3, #0]
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	3301      	adds	r3, #1
 800d64a:	461a      	mov	r2, r3
 800d64c:	6979      	ldr	r1, [r7, #20]
 800d64e:	f7ff fe15 	bl	800d27c <put_fat>
 800d652:	4603      	mov	r3, r0
 800d654:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800d656:	7bfb      	ldrb	r3, [r7, #15]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d001      	beq.n	800d660 <fill_first_frag+0x3c>
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
 800d65e:	e00c      	b.n	800d67a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	3301      	adds	r3, #1
 800d664:	617b      	str	r3, [r7, #20]
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	3b01      	subs	r3, #1
 800d66a:	613b      	str	r3, [r7, #16]
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d1e7      	bne.n	800d642 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3718      	adds	r7, #24
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b086      	sub	sp, #24
 800d686:	af00      	add	r7, sp, #0
 800d688:	60f8      	str	r0, [r7, #12]
 800d68a:	60b9      	str	r1, [r7, #8]
 800d68c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d68e:	e020      	b.n	800d6d2 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6818      	ldr	r0, [r3, #0]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	69db      	ldr	r3, [r3, #28]
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	1c59      	adds	r1, r3, #1
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	69db      	ldr	r3, [r3, #28]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d905      	bls.n	800d6b2 <fill_last_frag+0x30>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	69db      	ldr	r3, [r3, #28]
 800d6aa:	68ba      	ldr	r2, [r7, #8]
 800d6ac:	1ad3      	subs	r3, r2, r3
 800d6ae:	3302      	adds	r3, #2
 800d6b0:	e000      	b.n	800d6b4 <fill_last_frag+0x32>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	f7ff fde1 	bl	800d27c <put_fat>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800d6be:	7dfb      	ldrb	r3, [r7, #23]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d001      	beq.n	800d6c8 <fill_last_frag+0x46>
 800d6c4:	7dfb      	ldrb	r3, [r7, #23]
 800d6c6:	e009      	b.n	800d6dc <fill_last_frag+0x5a>
		obj->n_frag--;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	69db      	ldr	r3, [r3, #28]
 800d6cc:	1e5a      	subs	r2, r3, #1
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	69db      	ldr	r3, [r3, #28]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d1da      	bne.n	800d690 <fill_last_frag+0xe>
	}
	return FR_OK;
 800d6da:	2300      	movs	r3, #0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3718      	adds	r7, #24
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b08a      	sub	sp, #40	@ 0x28
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	2b01      	cmp	r3, #1
 800d706:	d904      	bls.n	800d712 <remove_chain+0x2e>
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	6a1b      	ldr	r3, [r3, #32]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d301      	bcc.n	800d716 <remove_chain+0x32>
 800d712:	2302      	movs	r3, #2
 800d714:	e096      	b.n	800d844 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d014      	beq.n	800d746 <remove_chain+0x62>
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	2b04      	cmp	r3, #4
 800d722:	d103      	bne.n	800d72c <remove_chain+0x48>
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	79db      	ldrb	r3, [r3, #7]
 800d728:	2b02      	cmp	r3, #2
 800d72a:	d00c      	beq.n	800d746 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d72c:	f04f 32ff 	mov.w	r2, #4294967295
 800d730:	6879      	ldr	r1, [r7, #4]
 800d732:	69b8      	ldr	r0, [r7, #24]
 800d734:	f7ff fda2 	bl	800d27c <put_fat>
 800d738:	4603      	mov	r3, r0
 800d73a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d73c:	7ffb      	ldrb	r3, [r7, #31]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <remove_chain+0x62>
 800d742:	7ffb      	ldrb	r3, [r7, #31]
 800d744:	e07e      	b.n	800d844 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d746:	68b9      	ldr	r1, [r7, #8]
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f7ff fc7d 	bl	800d048 <get_fat>
 800d74e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d055      	beq.n	800d802 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d101      	bne.n	800d760 <remove_chain+0x7c>
 800d75c:	2302      	movs	r3, #2
 800d75e:	e071      	b.n	800d844 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d766:	d101      	bne.n	800d76c <remove_chain+0x88>
 800d768:	2301      	movs	r3, #1
 800d76a:	e06b      	b.n	800d844 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	2b04      	cmp	r3, #4
 800d772:	d00b      	beq.n	800d78c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d774:	2200      	movs	r2, #0
 800d776:	68b9      	ldr	r1, [r7, #8]
 800d778:	69b8      	ldr	r0, [r7, #24]
 800d77a:	f7ff fd7f 	bl	800d27c <put_fat>
 800d77e:	4603      	mov	r3, r0
 800d780:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d782:	7ffb      	ldrb	r3, [r7, #31]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d001      	beq.n	800d78c <remove_chain+0xa8>
 800d788:	7ffb      	ldrb	r3, [r7, #31]
 800d78a:	e05b      	b.n	800d844 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	69da      	ldr	r2, [r3, #28]
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	6a1b      	ldr	r3, [r3, #32]
 800d794:	3b02      	subs	r3, #2
 800d796:	429a      	cmp	r2, r3
 800d798:	d20b      	bcs.n	800d7b2 <remove_chain+0xce>
			fs->free_clst++;
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	69db      	ldr	r3, [r3, #28]
 800d79e:	1c5a      	adds	r2, r3, #1
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	791b      	ldrb	r3, [r3, #4]
 800d7a8:	f043 0301 	orr.w	r3, r3, #1
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800d7b2:	6a3b      	ldr	r3, [r7, #32]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	697a      	ldr	r2, [r7, #20]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d102      	bne.n	800d7c2 <remove_chain+0xde>
			ecl = nxt;
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	623b      	str	r3, [r7, #32]
 800d7c0:	e017      	b.n	800d7f2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	2b04      	cmp	r3, #4
 800d7c8:	d10f      	bne.n	800d7ea <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800d7ca:	6a3a      	ldr	r2, [r7, #32]
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d7d6:	69b8      	ldr	r0, [r7, #24]
 800d7d8:	f7ff feba 	bl	800d550 <change_bitmap>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800d7e0:	7ffb      	ldrb	r3, [r7, #31]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d001      	beq.n	800d7ea <remove_chain+0x106>
 800d7e6:	7ffb      	ldrb	r3, [r7, #31]
 800d7e8:	e02c      	b.n	800d844 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	623b      	str	r3, [r7, #32]
 800d7ee:	6a3b      	ldr	r3, [r7, #32]
 800d7f0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	6a1b      	ldr	r3, [r3, #32]
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d3a2      	bcc.n	800d746 <remove_chain+0x62>
 800d800:	e000      	b.n	800d804 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800d802:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	2b04      	cmp	r3, #4
 800d80a:	d11a      	bne.n	800d842 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d103      	bne.n	800d81a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2200      	movs	r2, #0
 800d816:	71da      	strb	r2, [r3, #7]
 800d818:	e013      	b.n	800d842 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	79db      	ldrb	r3, [r3, #7]
 800d81e:	2b03      	cmp	r3, #3
 800d820:	d10f      	bne.n	800d842 <remove_chain+0x15e>
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d30a      	bcc.n	800d842 <remove_chain+0x15e>
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	689a      	ldr	r2, [r3, #8]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	699b      	ldr	r3, [r3, #24]
 800d834:	4413      	add	r3, r2
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d802      	bhi.n	800d842 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2202      	movs	r2, #2
 800d840:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800d842:	2300      	movs	r3, #0
}
 800d844:	4618      	mov	r0, r3
 800d846:	3728      	adds	r7, #40	@ 0x28
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b088      	sub	sp, #32
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
 800d854:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d10d      	bne.n	800d87e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	699b      	ldr	r3, [r3, #24]
 800d866:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d004      	beq.n	800d878 <create_chain+0x2c>
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	6a1b      	ldr	r3, [r3, #32]
 800d872:	69ba      	ldr	r2, [r7, #24]
 800d874:	429a      	cmp	r2, r3
 800d876:	d31b      	bcc.n	800d8b0 <create_chain+0x64>
 800d878:	2301      	movs	r3, #1
 800d87a:	61bb      	str	r3, [r7, #24]
 800d87c:	e018      	b.n	800d8b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d87e:	6839      	ldr	r1, [r7, #0]
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7ff fbe1 	bl	800d048 <get_fat>
 800d886:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d801      	bhi.n	800d892 <create_chain+0x46>
 800d88e:	2301      	movs	r3, #1
 800d890:	e0d9      	b.n	800da46 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d898:	d101      	bne.n	800d89e <create_chain+0x52>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	e0d3      	b.n	800da46 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	6a1b      	ldr	r3, [r3, #32]
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d201      	bcs.n	800d8ac <create_chain+0x60>
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	e0cc      	b.n	800da46 <create_chain+0x1fa>
		scl = clst;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	2b04      	cmp	r3, #4
 800d8b6:	d164      	bne.n	800d982 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	69b9      	ldr	r1, [r7, #24]
 800d8bc:	6938      	ldr	r0, [r7, #16]
 800d8be:	f7ff fdcb 	bl	800d458 <find_bitmap>
 800d8c2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d003      	beq.n	800d8d2 <create_chain+0x86>
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d0:	d101      	bne.n	800d8d6 <create_chain+0x8a>
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	e0b7      	b.n	800da46 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	2201      	movs	r2, #1
 800d8da:	69f9      	ldr	r1, [r7, #28]
 800d8dc:	6938      	ldr	r0, [r7, #16]
 800d8de:	f7ff fe37 	bl	800d550 <change_bitmap>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800d8e6:	7dfb      	ldrb	r3, [r7, #23]
 800d8e8:	2b02      	cmp	r3, #2
 800d8ea:	d101      	bne.n	800d8f0 <create_chain+0xa4>
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e0aa      	b.n	800da46 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800d8f0:	7dfb      	ldrb	r3, [r7, #23]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d102      	bne.n	800d8fc <create_chain+0xb0>
 800d8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fa:	e0a4      	b.n	800da46 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d103      	bne.n	800d90a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2202      	movs	r2, #2
 800d906:	71da      	strb	r2, [r3, #7]
 800d908:	e011      	b.n	800d92e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	79db      	ldrb	r3, [r3, #7]
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d10d      	bne.n	800d92e <create_chain+0xe2>
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	3301      	adds	r3, #1
 800d916:	69fa      	ldr	r2, [r7, #28]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d008      	beq.n	800d92e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	69ba      	ldr	r2, [r7, #24]
 800d922:	1ad2      	subs	r2, r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2203      	movs	r2, #3
 800d92c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	79db      	ldrb	r3, [r3, #7]
 800d932:	2b02      	cmp	r3, #2
 800d934:	d064      	beq.n	800da00 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	3301      	adds	r3, #1
 800d93a:	69fa      	ldr	r2, [r7, #28]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d10b      	bne.n	800d958 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	69db      	ldr	r3, [r3, #28]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d003      	beq.n	800d950 <create_chain+0x104>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	69db      	ldr	r3, [r3, #28]
 800d94c:	3301      	adds	r3, #1
 800d94e:	e000      	b.n	800d952 <create_chain+0x106>
 800d950:	2302      	movs	r3, #2
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	61d3      	str	r3, [r2, #28]
 800d956:	e053      	b.n	800da00 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	69db      	ldr	r3, [r3, #28]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d102      	bne.n	800d966 <create_chain+0x11a>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800d966:	69fa      	ldr	r2, [r7, #28]
 800d968:	6839      	ldr	r1, [r7, #0]
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f7ff fe89 	bl	800d682 <fill_last_frag>
 800d970:	4603      	mov	r3, r0
 800d972:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800d974:	7dfb      	ldrb	r3, [r7, #23]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d142      	bne.n	800da00 <create_chain+0x1b4>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2201      	movs	r2, #1
 800d97e:	61da      	str	r2, [r3, #28]
 800d980:	e03e      	b.n	800da00 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	3301      	adds	r3, #1
 800d98a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	6a1b      	ldr	r3, [r3, #32]
 800d990:	69fa      	ldr	r2, [r7, #28]
 800d992:	429a      	cmp	r2, r3
 800d994:	d307      	bcc.n	800d9a6 <create_chain+0x15a>
				ncl = 2;
 800d996:	2302      	movs	r3, #2
 800d998:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d99a:	69fa      	ldr	r2, [r7, #28]
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d901      	bls.n	800d9a6 <create_chain+0x15a>
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e04f      	b.n	800da46 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d9a6:	69f9      	ldr	r1, [r7, #28]
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7ff fb4d 	bl	800d048 <get_fat>
 800d9ae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00e      	beq.n	800d9d4 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d003      	beq.n	800d9c4 <create_chain+0x178>
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c2:	d101      	bne.n	800d9c8 <create_chain+0x17c>
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	e03e      	b.n	800da46 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800d9c8:	69fa      	ldr	r2, [r7, #28]
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d1da      	bne.n	800d986 <create_chain+0x13a>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	e038      	b.n	800da46 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800d9d4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d9da:	69f9      	ldr	r1, [r7, #28]
 800d9dc:	6938      	ldr	r0, [r7, #16]
 800d9de:	f7ff fc4d 	bl	800d27c <put_fat>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d9e6:	7dfb      	ldrb	r3, [r7, #23]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d109      	bne.n	800da00 <create_chain+0x1b4>
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d006      	beq.n	800da00 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d9f2:	69fa      	ldr	r2, [r7, #28]
 800d9f4:	6839      	ldr	r1, [r7, #0]
 800d9f6:	6938      	ldr	r0, [r7, #16]
 800d9f8:	f7ff fc40 	bl	800d27c <put_fat>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800da00:	7dfb      	ldrb	r3, [r7, #23]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d116      	bne.n	800da34 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	69fa      	ldr	r2, [r7, #28]
 800da0a:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	69da      	ldr	r2, [r3, #28]
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	6a1b      	ldr	r3, [r3, #32]
 800da14:	3b02      	subs	r3, #2
 800da16:	429a      	cmp	r2, r3
 800da18:	d804      	bhi.n	800da24 <create_chain+0x1d8>
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	69db      	ldr	r3, [r3, #28]
 800da1e:	1e5a      	subs	r2, r3, #1
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	791b      	ldrb	r3, [r3, #4]
 800da28:	f043 0301 	orr.w	r3, r3, #1
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	711a      	strb	r2, [r3, #4]
 800da32:	e007      	b.n	800da44 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800da34:	7dfb      	ldrb	r3, [r7, #23]
 800da36:	2b01      	cmp	r3, #1
 800da38:	d102      	bne.n	800da40 <create_chain+0x1f4>
 800da3a:	f04f 33ff 	mov.w	r3, #4294967295
 800da3e:	e000      	b.n	800da42 <create_chain+0x1f6>
 800da40:	2301      	movs	r3, #1
 800da42:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800da44:	69fb      	ldr	r3, [r7, #28]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3720      	adds	r7, #32
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800da4e:	b5b0      	push	{r4, r5, r7, lr}
 800da50:	b088      	sub	sp, #32
 800da52:	af00      	add	r7, sp, #0
 800da54:	60f8      	str	r0, [r7, #12]
 800da56:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da64:	3304      	adds	r3, #4
 800da66:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800da68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da6c:	f04f 0000 	mov.w	r0, #0
 800da70:	f04f 0100 	mov.w	r1, #0
 800da74:	0a50      	lsrs	r0, r2, #9
 800da76:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800da7a:	0a59      	lsrs	r1, r3, #9
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	895b      	ldrh	r3, [r3, #10]
 800da80:	b29b      	uxth	r3, r3
 800da82:	2200      	movs	r2, #0
 800da84:	461c      	mov	r4, r3
 800da86:	4615      	mov	r5, r2
 800da88:	4622      	mov	r2, r4
 800da8a:	462b      	mov	r3, r5
 800da8c:	f7f2 fc10 	bl	80002b0 <__aeabi_uldivmod>
 800da90:	4602      	mov	r2, r0
 800da92:	460b      	mov	r3, r1
 800da94:	4613      	mov	r3, r2
 800da96:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	1d1a      	adds	r2, r3, #4
 800da9c:	61ba      	str	r2, [r7, #24]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d101      	bne.n	800daac <clmt_clust+0x5e>
 800daa8:	2300      	movs	r3, #0
 800daaa:	e010      	b.n	800dace <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800daac:	69fa      	ldr	r2, [r7, #28]
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d307      	bcc.n	800dac4 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800dab4:	69fa      	ldr	r2, [r7, #28]
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	1ad3      	subs	r3, r2, r3
 800daba:	61fb      	str	r3, [r7, #28]
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	3304      	adds	r3, #4
 800dac0:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dac2:	e7e9      	b.n	800da98 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800dac4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	4413      	add	r3, r2
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3720      	adds	r7, #32
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bdb0      	pop	{r4, r5, r7, pc}

0800dad6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b086      	sub	sp, #24
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	2b04      	cmp	r3, #4
 800daec:	d102      	bne.n	800daf4 <dir_sdi+0x1e>
 800daee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf2:	e001      	b.n	800daf8 <dir_sdi+0x22>
 800daf4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d904      	bls.n	800db08 <dir_sdi+0x32>
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	f003 031f 	and.w	r3, r3, #31
 800db04:	2b00      	cmp	r3, #0
 800db06:	d001      	beq.n	800db0c <dir_sdi+0x36>
		return FR_INT_ERR;
 800db08:	2302      	movs	r3, #2
 800db0a:	e066      	b.n	800dbda <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d109      	bne.n	800db32 <dir_sdi+0x5c>
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	2b02      	cmp	r3, #2
 800db24:	d905      	bls.n	800db32 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db2a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d10c      	bne.n	800db52 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	095b      	lsrs	r3, r3, #5
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	8912      	ldrh	r2, [r2, #8]
 800db40:	4293      	cmp	r3, r2
 800db42:	d301      	bcc.n	800db48 <dir_sdi+0x72>
 800db44:	2302      	movs	r3, #2
 800db46:	e048      	b.n	800dbda <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	639a      	str	r2, [r3, #56]	@ 0x38
 800db50:	e029      	b.n	800dba6 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	895b      	ldrh	r3, [r3, #10]
 800db56:	025b      	lsls	r3, r3, #9
 800db58:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800db5a:	e019      	b.n	800db90 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6979      	ldr	r1, [r7, #20]
 800db60:	4618      	mov	r0, r3
 800db62:	f7ff fa71 	bl	800d048 <get_fat>
 800db66:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db6e:	d101      	bne.n	800db74 <dir_sdi+0x9e>
 800db70:	2301      	movs	r3, #1
 800db72:	e032      	b.n	800dbda <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	2b01      	cmp	r3, #1
 800db78:	d904      	bls.n	800db84 <dir_sdi+0xae>
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	697a      	ldr	r2, [r7, #20]
 800db80:	429a      	cmp	r2, r3
 800db82:	d301      	bcc.n	800db88 <dir_sdi+0xb2>
 800db84:	2302      	movs	r3, #2
 800db86:	e028      	b.n	800dbda <dir_sdi+0x104>
			ofs -= csz;
 800db88:	683a      	ldr	r2, [r7, #0]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800db90:	683a      	ldr	r2, [r7, #0]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	429a      	cmp	r2, r3
 800db96:	d2e1      	bcs.n	800db5c <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800db98:	6979      	ldr	r1, [r7, #20]
 800db9a:	6938      	ldr	r0, [r7, #16]
 800db9c:	f7ff fa34 	bl	800d008 <clust2sect>
 800dba0:	4602      	mov	r2, r0
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	697a      	ldr	r2, [r7, #20]
 800dbaa:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <dir_sdi+0xe2>
 800dbb4:	2302      	movs	r3, #2
 800dbb6:	e010      	b.n	800dbda <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	0a5b      	lsrs	r3, r3, #9
 800dbc0:	441a      	add	r2, r3
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbd2:	441a      	add	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800dbd8:	2300      	movs	r3, #0
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3718      	adds	r7, #24
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b086      	sub	sp, #24
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbf6:	3320      	adds	r3, #32
 800dbf8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00b      	beq.n	800dc1a <dir_next+0x38>
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	2b04      	cmp	r3, #4
 800dc08:	d102      	bne.n	800dc10 <dir_next+0x2e>
 800dc0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc0e:	e001      	b.n	800dc14 <dir_next+0x32>
 800dc10:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d801      	bhi.n	800dc1e <dir_next+0x3c>
 800dc1a:	2304      	movs	r3, #4
 800dc1c:	e0b2      	b.n	800dd84 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f040 80a0 	bne.w	800dd6a <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc2e:	1c5a      	adds	r2, r3, #1
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d10b      	bne.n	800dc54 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	095b      	lsrs	r3, r3, #5
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	8912      	ldrh	r2, [r2, #8]
 800dc44:	4293      	cmp	r3, r2
 800dc46:	f0c0 8090 	bcc.w	800dd6a <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	639a      	str	r2, [r3, #56]	@ 0x38
 800dc50:	2304      	movs	r3, #4
 800dc52:	e097      	b.n	800dd84 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	0a5b      	lsrs	r3, r3, #9
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	8952      	ldrh	r2, [r2, #10]
 800dc5c:	3a01      	subs	r2, #1
 800dc5e:	4013      	ands	r3, r2
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f040 8082 	bne.w	800dd6a <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	4610      	mov	r0, r2
 800dc70:	f7ff f9ea 	bl	800d048 <get_fat>
 800dc74:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d801      	bhi.n	800dc80 <dir_next+0x9e>
 800dc7c:	2302      	movs	r3, #2
 800dc7e:	e081      	b.n	800dd84 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc86:	d101      	bne.n	800dc8c <dir_next+0xaa>
 800dc88:	2301      	movs	r3, #1
 800dc8a:	e07b      	b.n	800dd84 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6a1b      	ldr	r3, [r3, #32]
 800dc90:	697a      	ldr	r2, [r7, #20]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d35f      	bcc.n	800dd56 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d104      	bne.n	800dca6 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	639a      	str	r2, [r3, #56]	@ 0x38
 800dca2:	2304      	movs	r3, #4
 800dca4:	e06e      	b.n	800dd84 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcac:	4619      	mov	r1, r3
 800dcae:	4610      	mov	r0, r2
 800dcb0:	f7ff fdcc 	bl	800d84c <create_chain>
 800dcb4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d101      	bne.n	800dcc0 <dir_next+0xde>
 800dcbc:	2307      	movs	r3, #7
 800dcbe:	e061      	b.n	800dd84 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d101      	bne.n	800dcca <dir_next+0xe8>
 800dcc6:	2302      	movs	r3, #2
 800dcc8:	e05c      	b.n	800dd84 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd0:	d101      	bne.n	800dcd6 <dir_next+0xf4>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e056      	b.n	800dd84 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	79db      	ldrb	r3, [r3, #7]
 800dcda:	f043 0304 	orr.w	r3, r3, #4
 800dcde:	b2da      	uxtb	r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f7ff f8af 	bl	800ce48 <sync_window>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d001      	beq.n	800dcf4 <dir_next+0x112>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e047      	b.n	800dd84 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	333c      	adds	r3, #60	@ 0x3c
 800dcf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fe fea7 	bl	800ca52 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dd04:	2300      	movs	r3, #0
 800dd06:	613b      	str	r3, [r7, #16]
 800dd08:	6979      	ldr	r1, [r7, #20]
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f7ff f97c 	bl	800d008 <clust2sect>
 800dd10:	4602      	mov	r2, r0
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd16:	e012      	b.n	800dd3e <dir_next+0x15c>
						fs->wflag = 1;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dd1e:	68f8      	ldr	r0, [r7, #12]
 800dd20:	f7ff f892 	bl	800ce48 <sync_window>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d001      	beq.n	800dd2e <dir_next+0x14c>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e02a      	b.n	800dd84 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	3301      	adds	r3, #1
 800dd32:	613b      	str	r3, [r7, #16]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd38:	1c5a      	adds	r2, r3, #1
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	895b      	ldrh	r3, [r3, #10]
 800dd42:	461a      	mov	r2, r3
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d3e6      	bcc.n	800dd18 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	1ad2      	subs	r2, r2, r3
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	697a      	ldr	r2, [r7, #20]
 800dd5a:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800dd5c:	6979      	ldr	r1, [r7, #20]
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	f7ff f952 	bl	800d008 <clust2sect>
 800dd64:	4602      	mov	r2, r0
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	68ba      	ldr	r2, [r7, #8]
 800dd6e:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd7c:	441a      	add	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3718      	adds	r7, #24
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7ff fe99 	bl	800dad6 <dir_sdi>
 800dda4:	4603      	mov	r3, r0
 800dda6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dda8:	7dfb      	ldrb	r3, [r7, #23]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d140      	bne.n	800de30 <dir_alloc+0xa4>
		n = 0;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f7ff f889 	bl	800ced0 <move_window>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d132      	bne.n	800de2e <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	2b04      	cmp	r3, #4
 800ddce:	d108      	bne.n	800dde2 <dir_alloc+0x56>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	b25b      	sxtb	r3, r3
 800ddd8:	43db      	mvns	r3, r3
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	09db      	lsrs	r3, r3, #7
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	e00f      	b.n	800de02 <dir_alloc+0x76>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	2be5      	cmp	r3, #229	@ 0xe5
 800ddea:	d004      	beq.n	800ddf6 <dir_alloc+0x6a>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d101      	bne.n	800ddfa <dir_alloc+0x6e>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e000      	b.n	800ddfc <dir_alloc+0x70>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f003 0301 	and.w	r3, r3, #1
 800de00:	b2db      	uxtb	r3, r3
 800de02:	2b00      	cmp	r3, #0
 800de04:	d007      	beq.n	800de16 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	3301      	adds	r3, #1
 800de0a:	613b      	str	r3, [r7, #16]
 800de0c:	693a      	ldr	r2, [r7, #16]
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	429a      	cmp	r2, r3
 800de12:	d102      	bne.n	800de1a <dir_alloc+0x8e>
 800de14:	e00c      	b.n	800de30 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800de16:	2300      	movs	r3, #0
 800de18:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800de1a:	2101      	movs	r1, #1
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f7ff fee0 	bl	800dbe2 <dir_next>
 800de22:	4603      	mov	r3, r0
 800de24:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800de26:	7dfb      	ldrb	r3, [r7, #23]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d0c2      	beq.n	800ddb2 <dir_alloc+0x26>
 800de2c:	e000      	b.n	800de30 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800de2e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800de30:	7dfb      	ldrb	r3, [r7, #23]
 800de32:	2b04      	cmp	r3, #4
 800de34:	d101      	bne.n	800de3a <dir_alloc+0xae>
 800de36:	2307      	movs	r3, #7
 800de38:	75fb      	strb	r3, [r7, #23]
	return res;
 800de3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3718      	adds	r7, #24
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	331a      	adds	r3, #26
 800de52:	4618      	mov	r0, r3
 800de54:	f7fe fbf6 	bl	800c644 <ld_word>
 800de58:	4603      	mov	r3, r0
 800de5a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	2b03      	cmp	r3, #3
 800de62:	d109      	bne.n	800de78 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	3314      	adds	r3, #20
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fe fbeb 	bl	800c644 <ld_word>
 800de6e:	4603      	mov	r3, r0
 800de70:	041b      	lsls	r3, r3, #16
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	4313      	orrs	r3, r2
 800de76:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800de78:	68fb      	ldr	r3, [r7, #12]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800de82:	b580      	push	{r7, lr}
 800de84:	b084      	sub	sp, #16
 800de86:	af00      	add	r7, sp, #0
 800de88:	60f8      	str	r0, [r7, #12]
 800de8a:	60b9      	str	r1, [r7, #8]
 800de8c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	331a      	adds	r3, #26
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	b292      	uxth	r2, r2
 800de96:	4611      	mov	r1, r2
 800de98:	4618      	mov	r0, r3
 800de9a:	f7fe fcea 	bl	800c872 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	2b03      	cmp	r3, #3
 800dea4:	d109      	bne.n	800deba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	f103 0214 	add.w	r2, r3, #20
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	0c1b      	lsrs	r3, r3, #16
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	4619      	mov	r1, r3
 800deb4:	4610      	mov	r0, r2
 800deb6:	f7fe fcdc 	bl	800c872 <st_word>
	}
}
 800deba:	bf00      	nop
 800debc:	3710      	adds	r7, #16
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
	...

0800dec4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dec4:	b590      	push	{r4, r7, lr}
 800dec6:	b087      	sub	sp, #28
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	331a      	adds	r3, #26
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fe fbb6 	bl	800c644 <ld_word>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d001      	beq.n	800dee2 <cmp_lfn+0x1e>
 800dede:	2300      	movs	r3, #0
 800dee0:	e059      	b.n	800df96 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800deea:	1e5a      	subs	r2, r3, #1
 800deec:	4613      	mov	r3, r2
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	4413      	add	r3, r2
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	4413      	add	r3, r2
 800def6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800def8:	2301      	movs	r3, #1
 800defa:	81fb      	strh	r3, [r7, #14]
 800defc:	2300      	movs	r3, #0
 800defe:	613b      	str	r3, [r7, #16]
 800df00:	e033      	b.n	800df6a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800df02:	4a27      	ldr	r2, [pc, #156]	@ (800dfa0 <cmp_lfn+0xdc>)
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	4413      	add	r3, r2
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	461a      	mov	r2, r3
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	4413      	add	r3, r2
 800df10:	4618      	mov	r0, r3
 800df12:	f7fe fb97 	bl	800c644 <ld_word>
 800df16:	4603      	mov	r3, r0
 800df18:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800df1a:	89fb      	ldrh	r3, [r7, #14]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d01a      	beq.n	800df56 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	2bfe      	cmp	r3, #254	@ 0xfe
 800df24:	d812      	bhi.n	800df4c <cmp_lfn+0x88>
 800df26:	89bb      	ldrh	r3, [r7, #12]
 800df28:	4618      	mov	r0, r3
 800df2a:	f003 ffe3 	bl	8011ef4 <ff_wtoupper>
 800df2e:	4603      	mov	r3, r0
 800df30:	461c      	mov	r4, r3
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	617a      	str	r2, [r7, #20]
 800df38:	005b      	lsls	r3, r3, #1
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	4413      	add	r3, r2
 800df3e:	881b      	ldrh	r3, [r3, #0]
 800df40:	4618      	mov	r0, r3
 800df42:	f003 ffd7 	bl	8011ef4 <ff_wtoupper>
 800df46:	4603      	mov	r3, r0
 800df48:	429c      	cmp	r4, r3
 800df4a:	d001      	beq.n	800df50 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800df4c:	2300      	movs	r3, #0
 800df4e:	e022      	b.n	800df96 <cmp_lfn+0xd2>
			}
			wc = uc;
 800df50:	89bb      	ldrh	r3, [r7, #12]
 800df52:	81fb      	strh	r3, [r7, #14]
 800df54:	e006      	b.n	800df64 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800df56:	89bb      	ldrh	r3, [r7, #12]
 800df58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d001      	beq.n	800df64 <cmp_lfn+0xa0>
 800df60:	2300      	movs	r3, #0
 800df62:	e018      	b.n	800df96 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	3301      	adds	r3, #1
 800df68:	613b      	str	r3, [r7, #16]
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2b0c      	cmp	r3, #12
 800df6e:	d9c8      	bls.n	800df02 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00b      	beq.n	800df94 <cmp_lfn+0xd0>
 800df7c:	89fb      	ldrh	r3, [r7, #14]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d008      	beq.n	800df94 <cmp_lfn+0xd0>
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	005b      	lsls	r3, r3, #1
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	4413      	add	r3, r2
 800df8a:	881b      	ldrh	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d001      	beq.n	800df94 <cmp_lfn+0xd0>
 800df90:	2300      	movs	r3, #0
 800df92:	e000      	b.n	800df96 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800df94:	2301      	movs	r3, #1
}
 800df96:	4618      	mov	r0, r3
 800df98:	371c      	adds	r7, #28
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd90      	pop	{r4, r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	08016608 	.word	0x08016608

0800dfa4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b086      	sub	sp, #24
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	331a      	adds	r3, #26
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7fe fb46 	bl	800c644 <ld_word>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d001      	beq.n	800dfc2 <pick_lfn+0x1e>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	e04d      	b.n	800e05e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfca:	1e5a      	subs	r2, r3, #1
 800dfcc:	4613      	mov	r3, r2
 800dfce:	005b      	lsls	r3, r3, #1
 800dfd0:	4413      	add	r3, r2
 800dfd2:	009b      	lsls	r3, r3, #2
 800dfd4:	4413      	add	r3, r2
 800dfd6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dfd8:	2301      	movs	r3, #1
 800dfda:	81fb      	strh	r3, [r7, #14]
 800dfdc:	2300      	movs	r3, #0
 800dfde:	613b      	str	r3, [r7, #16]
 800dfe0:	e028      	b.n	800e034 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dfe2:	4a21      	ldr	r2, [pc, #132]	@ (800e068 <pick_lfn+0xc4>)
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	461a      	mov	r2, r3
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	4413      	add	r3, r2
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7fe fb27 	bl	800c644 <ld_word>
 800dff6:	4603      	mov	r3, r0
 800dff8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dffa:	89fb      	ldrh	r3, [r7, #14]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00f      	beq.n	800e020 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	2bfe      	cmp	r3, #254	@ 0xfe
 800e004:	d901      	bls.n	800e00a <pick_lfn+0x66>
 800e006:	2300      	movs	r3, #0
 800e008:	e029      	b.n	800e05e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e00a:	89bb      	ldrh	r3, [r7, #12]
 800e00c:	81fb      	strh	r3, [r7, #14]
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	1c5a      	adds	r2, r3, #1
 800e012:	617a      	str	r2, [r7, #20]
 800e014:	005b      	lsls	r3, r3, #1
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	4413      	add	r3, r2
 800e01a:	89fa      	ldrh	r2, [r7, #14]
 800e01c:	801a      	strh	r2, [r3, #0]
 800e01e:	e006      	b.n	800e02e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e020:	89bb      	ldrh	r3, [r7, #12]
 800e022:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e026:	4293      	cmp	r3, r2
 800e028:	d001      	beq.n	800e02e <pick_lfn+0x8a>
 800e02a:	2300      	movs	r3, #0
 800e02c:	e017      	b.n	800e05e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	3301      	adds	r3, #1
 800e032:	613b      	str	r3, [r7, #16]
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	2b0c      	cmp	r3, #12
 800e038:	d9d3      	bls.n	800dfe2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00a      	beq.n	800e05c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2bfe      	cmp	r3, #254	@ 0xfe
 800e04a:	d901      	bls.n	800e050 <pick_lfn+0xac>
 800e04c:	2300      	movs	r3, #0
 800e04e:	e006      	b.n	800e05e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	005b      	lsls	r3, r3, #1
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	4413      	add	r3, r2
 800e058:	2200      	movs	r2, #0
 800e05a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e05c:	2301      	movs	r3, #1
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3718      	adds	r7, #24
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	08016608 	.word	0x08016608

0800e06c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b088      	sub	sp, #32
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	4611      	mov	r1, r2
 800e078:	461a      	mov	r2, r3
 800e07a:	460b      	mov	r3, r1
 800e07c:	71fb      	strb	r3, [r7, #7]
 800e07e:	4613      	mov	r3, r2
 800e080:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	330d      	adds	r3, #13
 800e086:	79ba      	ldrb	r2, [r7, #6]
 800e088:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	330b      	adds	r3, #11
 800e08e:	220f      	movs	r2, #15
 800e090:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	330c      	adds	r3, #12
 800e096:	2200      	movs	r2, #0
 800e098:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	331a      	adds	r3, #26
 800e09e:	2100      	movs	r1, #0
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7fe fbe6 	bl	800c872 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e0a6:	79fb      	ldrb	r3, [r7, #7]
 800e0a8:	1e5a      	subs	r2, r3, #1
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	005b      	lsls	r3, r3, #1
 800e0ae:	4413      	add	r3, r2
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	4413      	add	r3, r2
 800e0b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	82fb      	strh	r3, [r7, #22]
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e0be:	8afb      	ldrh	r3, [r7, #22]
 800e0c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d007      	beq.n	800e0d8 <put_lfn+0x6c>
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	1c5a      	adds	r2, r3, #1
 800e0cc:	61fa      	str	r2, [r7, #28]
 800e0ce:	005b      	lsls	r3, r3, #1
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e0d8:	4a17      	ldr	r2, [pc, #92]	@ (800e138 <put_lfn+0xcc>)
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	4413      	add	r3, r2
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	8afa      	ldrh	r2, [r7, #22]
 800e0e8:	4611      	mov	r1, r2
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fe fbc1 	bl	800c872 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e0f0:	8afb      	ldrh	r3, [r7, #22]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d102      	bne.n	800e0fc <put_lfn+0x90>
 800e0f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e0fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	3301      	adds	r3, #1
 800e100:	61bb      	str	r3, [r7, #24]
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	2b0c      	cmp	r3, #12
 800e106:	d9da      	bls.n	800e0be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e108:	8afb      	ldrh	r3, [r7, #22]
 800e10a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e10e:	4293      	cmp	r3, r2
 800e110:	d006      	beq.n	800e120 <put_lfn+0xb4>
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	005b      	lsls	r3, r3, #1
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	4413      	add	r3, r2
 800e11a:	881b      	ldrh	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d103      	bne.n	800e128 <put_lfn+0xbc>
 800e120:	79fb      	ldrb	r3, [r7, #7]
 800e122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e126:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	79fa      	ldrb	r2, [r7, #7]
 800e12c:	701a      	strb	r2, [r3, #0]
}
 800e12e:	bf00      	nop
 800e130:	3720      	adds	r7, #32
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	08016608 	.word	0x08016608

0800e13c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b08c      	sub	sp, #48	@ 0x30
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e14a:	220b      	movs	r2, #11
 800e14c:	68b9      	ldr	r1, [r7, #8]
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	f7fe fc5e 	bl	800ca10 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2b05      	cmp	r3, #5
 800e158:	d929      	bls.n	800e1ae <gen_numname+0x72>
		sr = seq;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e15e:	e020      	b.n	800e1a2 <gen_numname+0x66>
			wc = *lfn++;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	1c9a      	adds	r2, r3, #2
 800e164:	607a      	str	r2, [r7, #4]
 800e166:	881b      	ldrh	r3, [r3, #0]
 800e168:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e16a:	2300      	movs	r3, #0
 800e16c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e16e:	e015      	b.n	800e19c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	005a      	lsls	r2, r3, #1
 800e174:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e176:	f003 0301 	and.w	r3, r3, #1
 800e17a:	4413      	add	r3, r2
 800e17c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e17e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e180:	085b      	lsrs	r3, r3, #1
 800e182:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d003      	beq.n	800e196 <gen_numname+0x5a>
 800e18e:	69fa      	ldr	r2, [r7, #28]
 800e190:	4b30      	ldr	r3, [pc, #192]	@ (800e254 <gen_numname+0x118>)
 800e192:	4053      	eors	r3, r2
 800e194:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e198:	3301      	adds	r3, #1
 800e19a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e19e:	2b0f      	cmp	r3, #15
 800e1a0:	d9e6      	bls.n	800e170 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	881b      	ldrh	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d1da      	bne.n	800e160 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e1ae:	2307      	movs	r3, #7
 800e1b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	f003 030f 	and.w	r3, r3, #15
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	3330      	adds	r3, #48	@ 0x30
 800e1be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e1c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e1c6:	2b39      	cmp	r3, #57	@ 0x39
 800e1c8:	d904      	bls.n	800e1d4 <gen_numname+0x98>
 800e1ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e1ce:	3307      	adds	r3, #7
 800e1d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d6:	1e5a      	subs	r2, r3, #1
 800e1d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e1da:	3330      	adds	r3, #48	@ 0x30
 800e1dc:	443b      	add	r3, r7
 800e1de:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e1e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	091b      	lsrs	r3, r3, #4
 800e1ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d1df      	bne.n	800e1b2 <gen_numname+0x76>
	ns[i] = '~';
 800e1f2:	f107 0214 	add.w	r2, r7, #20
 800e1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1f8:	4413      	add	r3, r2
 800e1fa:	227e      	movs	r2, #126	@ 0x7e
 800e1fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e1fe:	2300      	movs	r3, #0
 800e200:	627b      	str	r3, [r7, #36]	@ 0x24
 800e202:	e002      	b.n	800e20a <gen_numname+0xce>
 800e204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e206:	3301      	adds	r3, #1
 800e208:	627b      	str	r3, [r7, #36]	@ 0x24
 800e20a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e20e:	429a      	cmp	r2, r3
 800e210:	d205      	bcs.n	800e21e <gen_numname+0xe2>
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e216:	4413      	add	r3, r2
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	2b20      	cmp	r3, #32
 800e21c:	d1f2      	bne.n	800e204 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e220:	2b07      	cmp	r3, #7
 800e222:	d807      	bhi.n	800e234 <gen_numname+0xf8>
 800e224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e226:	1c5a      	adds	r2, r3, #1
 800e228:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e22a:	3330      	adds	r3, #48	@ 0x30
 800e22c:	443b      	add	r3, r7
 800e22e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e232:	e000      	b.n	800e236 <gen_numname+0xfa>
 800e234:	2120      	movs	r1, #32
 800e236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	627a      	str	r2, [r7, #36]	@ 0x24
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	4413      	add	r3, r2
 800e240:	460a      	mov	r2, r1
 800e242:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e246:	2b07      	cmp	r3, #7
 800e248:	d9e9      	bls.n	800e21e <gen_numname+0xe2>
}
 800e24a:	bf00      	nop
 800e24c:	bf00      	nop
 800e24e:	3730      	adds	r7, #48	@ 0x30
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	00011021 	.word	0x00011021

0800e258 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e260:	2300      	movs	r3, #0
 800e262:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e264:	230b      	movs	r3, #11
 800e266:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e268:	7bfb      	ldrb	r3, [r7, #15]
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	0852      	lsrs	r2, r2, #1
 800e26e:	01db      	lsls	r3, r3, #7
 800e270:	4313      	orrs	r3, r2
 800e272:	b2da      	uxtb	r2, r3
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	1c59      	adds	r1, r3, #1
 800e278:	6079      	str	r1, [r7, #4]
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	4413      	add	r3, r2
 800e27e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	3b01      	subs	r3, #1
 800e284:	60bb      	str	r3, [r7, #8]
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d1ed      	bne.n	800e268 <sum_sfn+0x10>
	return sum;
 800e28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3714      	adds	r7, #20
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr

0800e29a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800e29a:	b480      	push	{r7}
 800e29c:	b087      	sub	sp, #28
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	015b      	lsls	r3, r3, #5
 800e2ac:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	827b      	strh	r3, [r7, #18]
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	617b      	str	r3, [r7, #20]
 800e2b6:	e015      	b.n	800e2e4 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	2b02      	cmp	r3, #2
 800e2bc:	d103      	bne.n	800e2c6 <xdir_sum+0x2c>
			i++;
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	617b      	str	r3, [r7, #20]
 800e2c4:	e00b      	b.n	800e2de <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800e2c6:	8a7b      	ldrh	r3, [r7, #18]
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	0852      	lsrs	r2, r2, #1
 800e2cc:	03db      	lsls	r3, r3, #15
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	6879      	ldr	r1, [r7, #4]
 800e2d4:	697a      	ldr	r2, [r7, #20]
 800e2d6:	440a      	add	r2, r1
 800e2d8:	7812      	ldrb	r2, [r2, #0]
 800e2da:	4413      	add	r3, r2
 800e2dc:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	617b      	str	r3, [r7, #20]
 800e2e4:	697a      	ldr	r2, [r7, #20]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d3e5      	bcc.n	800e2b8 <xdir_sum+0x1e>
		}
	}
	return sum;
 800e2ec:	8a7b      	ldrh	r3, [r7, #18]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	371c      	adds	r7, #28
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr

0800e2fa <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b084      	sub	sp, #16
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800e302:	2300      	movs	r3, #0
 800e304:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800e306:	e01b      	b.n	800e340 <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800e308:	89bb      	ldrh	r3, [r7, #12]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f003 fdf2 	bl	8011ef4 <ff_wtoupper>
 800e310:	4603      	mov	r3, r0
 800e312:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800e314:	89fb      	ldrh	r3, [r7, #14]
 800e316:	b29a      	uxth	r2, r3
 800e318:	0852      	lsrs	r2, r2, #1
 800e31a:	03db      	lsls	r3, r3, #15
 800e31c:	4313      	orrs	r3, r2
 800e31e:	b29a      	uxth	r2, r3
 800e320:	89bb      	ldrh	r3, [r7, #12]
 800e322:	b2db      	uxtb	r3, r3
 800e324:	b29b      	uxth	r3, r3
 800e326:	4413      	add	r3, r2
 800e328:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800e32a:	89fb      	ldrh	r3, [r7, #14]
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	0852      	lsrs	r2, r2, #1
 800e330:	03db      	lsls	r3, r3, #15
 800e332:	4313      	orrs	r3, r2
 800e334:	b29a      	uxth	r2, r3
 800e336:	89bb      	ldrh	r3, [r7, #12]
 800e338:	0a1b      	lsrs	r3, r3, #8
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	4413      	add	r3, r2
 800e33e:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	1c9a      	adds	r2, r3, #2
 800e344:	607a      	str	r2, [r7, #4]
 800e346:	881b      	ldrh	r3, [r3, #0]
 800e348:	81bb      	strh	r3, [r7, #12]
 800e34a:	89bb      	ldrh	r3, [r7, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1db      	bne.n	800e308 <xname_sum+0xe>
	}
	return sum;
 800e350:	89fb      	ldrh	r3, [r7, #14]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <xsum32>:
static
DWORD xsum32 (
	BYTE  dat,	/* Data to be sumed */
	DWORD sum	/* Previous value */
)
{
 800e35a:	b480      	push	{r7}
 800e35c:	b083      	sub	sp, #12
 800e35e:	af00      	add	r7, sp, #0
 800e360:	4603      	mov	r3, r0
 800e362:	6039      	str	r1, [r7, #0]
 800e364:	71fb      	strb	r3, [r7, #7]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	ea4f 0273 	mov.w	r2, r3, ror #1
 800e36c:	79fb      	ldrb	r3, [r7, #7]
 800e36e:	4413      	add	r3, r2
 800e370:	603b      	str	r3, [r7, #0]
	return sum;
 800e372:	683b      	ldr	r3, [r7, #0]
}
 800e374:	4618      	mov	r0, r3
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800e380:	b590      	push	{r4, r7, lr}
 800e382:	b087      	sub	sp, #28
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	691b      	ldr	r3, [r3, #16]
 800e38e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e398:	4619      	mov	r1, r3
 800e39a:	4610      	mov	r0, r2
 800e39c:	f7fe fd98 	bl	800ced0 <move_window>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d001      	beq.n	800e3ae <load_xdir+0x2e>
 800e3aa:	7bfb      	ldrb	r3, [r7, #15]
 800e3ac:	e09f      	b.n	800e4ee <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	2b85      	cmp	r3, #133	@ 0x85
 800e3b6:	d001      	beq.n	800e3bc <load_xdir+0x3c>
 800e3b8:	2302      	movs	r3, #2
 800e3ba:	e098      	b.n	800e4ee <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3c0:	2220      	movs	r2, #32
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	6938      	ldr	r0, [r7, #16]
 800e3c6:	f7fe fb23 	bl	800ca10 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	015b      	lsls	r3, r3, #5
 800e3d4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b5f      	cmp	r3, #95	@ 0x5f
 800e3da:	d903      	bls.n	800e3e4 <load_xdir+0x64>
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800e3e2:	d901      	bls.n	800e3e8 <load_xdir+0x68>
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	e082      	b.n	800e4ee <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f7ff fbf9 	bl	800dbe2 <dir_next>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e3f4:	7bfb      	ldrb	r3, [r7, #15]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d001      	beq.n	800e3fe <load_xdir+0x7e>
 800e3fa:	7bfb      	ldrb	r3, [r7, #15]
 800e3fc:	e077      	b.n	800e4ee <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e406:	4619      	mov	r1, r3
 800e408:	4610      	mov	r0, r2
 800e40a:	f7fe fd61 	bl	800ced0 <move_window>
 800e40e:	4603      	mov	r3, r0
 800e410:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e412:	7bfb      	ldrb	r3, [r7, #15]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d001      	beq.n	800e41c <load_xdir+0x9c>
 800e418:	7bfb      	ldrb	r3, [r7, #15]
 800e41a:	e068      	b.n	800e4ee <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	2bc0      	cmp	r3, #192	@ 0xc0
 800e424:	d001      	beq.n	800e42a <load_xdir+0xaa>
 800e426:	2302      	movs	r3, #2
 800e428:	e061      	b.n	800e4ee <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	f103 0020 	add.w	r0, r3, #32
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e434:	2220      	movs	r2, #32
 800e436:	4619      	mov	r1, r3
 800e438:	f7fe faea 	bl	800ca10 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	3323      	adds	r3, #35	@ 0x23
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	332c      	adds	r3, #44	@ 0x2c
 800e444:	4a2c      	ldr	r2, [pc, #176]	@ (800e4f8 <load_xdir+0x178>)
 800e446:	fba2 2303 	umull	r2, r3, r2, r3
 800e44a:	08db      	lsrs	r3, r3, #3
 800e44c:	015b      	lsls	r3, r3, #5
 800e44e:	68ba      	ldr	r2, [r7, #8]
 800e450:	429a      	cmp	r2, r3
 800e452:	d201      	bcs.n	800e458 <load_xdir+0xd8>
 800e454:	2302      	movs	r3, #2
 800e456:	e04a      	b.n	800e4ee <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800e458:	2340      	movs	r3, #64	@ 0x40
 800e45a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800e45c:	2100      	movs	r1, #0
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f7ff fbbf 	bl	800dbe2 <dir_next>
 800e464:	4603      	mov	r3, r0
 800e466:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e468:	7bfb      	ldrb	r3, [r7, #15]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <load_xdir+0xf2>
 800e46e:	7bfb      	ldrb	r3, [r7, #15]
 800e470:	e03d      	b.n	800e4ee <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e47a:	4619      	mov	r1, r3
 800e47c:	4610      	mov	r0, r2
 800e47e:	f7fe fd27 	bl	800ced0 <move_window>
 800e482:	4603      	mov	r3, r0
 800e484:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e486:	7bfb      	ldrb	r3, [r7, #15]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d001      	beq.n	800e490 <load_xdir+0x110>
 800e48c:	7bfb      	ldrb	r3, [r7, #15]
 800e48e:	e02e      	b.n	800e4ee <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	2bc1      	cmp	r3, #193	@ 0xc1
 800e498:	d001      	beq.n	800e49e <load_xdir+0x11e>
 800e49a:	2302      	movs	r3, #2
 800e49c:	e027      	b.n	800e4ee <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800e4a4:	d208      	bcs.n	800e4b8 <load_xdir+0x138>
 800e4a6:	693a      	ldr	r2, [r7, #16]
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	18d0      	adds	r0, r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4b0:	2220      	movs	r2, #32
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	f7fe faac 	bl	800ca10 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	3320      	adds	r3, #32
 800e4bc:	617b      	str	r3, [r7, #20]
 800e4be:	697a      	ldr	r2, [r7, #20]
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d3ca      	bcc.n	800e45c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800e4cc:	d80e      	bhi.n	800e4ec <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800e4ce:	6938      	ldr	r0, [r7, #16]
 800e4d0:	f7ff fee3 	bl	800e29a <xdir_sum>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	461c      	mov	r4, r3
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	3302      	adds	r3, #2
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fe f8b1 	bl	800c644 <ld_word>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	429c      	cmp	r4, r3
 800e4e6:	d001      	beq.n	800e4ec <load_xdir+0x16c>
 800e4e8:	2302      	movs	r3, #2
 800e4ea:	e000      	b.n	800e4ee <load_xdir+0x16e>
	}
	return FR_OK;
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	371c      	adds	r7, #28
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd90      	pop	{r4, r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	88888889 	.word	0x88888889

0800e4fc <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800e4fc:	b5b0      	push	{r4, r5, r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800e506:	6839      	ldr	r1, [r7, #0]
 800e508:	6808      	ldr	r0, [r1, #0]
 800e50a:	6879      	ldr	r1, [r7, #4]
 800e50c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800e50e:	6839      	ldr	r1, [r7, #0]
 800e510:	6a08      	ldr	r0, [r1, #32]
 800e512:	6879      	ldr	r1, [r7, #4]
 800e514:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800e516:	6839      	ldr	r1, [r7, #0]
 800e518:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800e51a:	b2c8      	uxtb	r0, r1
 800e51c:	6879      	ldr	r1, [r7, #4]
 800e51e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e520:	6839      	ldr	r1, [r7, #0]
 800e522:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800e524:	2000      	movs	r0, #0
 800e526:	460c      	mov	r4, r1
 800e528:	4605      	mov	r5, r0
 800e52a:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800e52e:	2300      	movs	r3, #0
 800e530:	6879      	ldr	r1, [r7, #4]
 800e532:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e542:	4619      	mov	r1, r3
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f7ff fac6 	bl	800dad6 <dir_sdi>
 800e54a:	4603      	mov	r3, r0
 800e54c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e54e:	7bfb      	ldrb	r3, [r7, #15]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d104      	bne.n	800e55e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f7ff ff13 	bl	800e380 <load_xdir>
 800e55a:	4603      	mov	r3, r0
 800e55c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800e55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bdb0      	pop	{r4, r5, r7, pc}

0800e568 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800e568:	b590      	push	{r4, r7, lr}
 800e56a:	b087      	sub	sp, #28
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	1c9c      	adds	r4, r3, #2
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	f7ff fe8c 	bl	800e29a <xdir_sum>
 800e582:	4603      	mov	r3, r0
 800e584:	4619      	mov	r1, r3
 800e586:	4620      	mov	r0, r4
 800e588:	f7fe f973 	bl	800c872 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	3301      	adds	r3, #1
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	3301      	adds	r3, #1
 800e594:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e59a:	4619      	mov	r1, r3
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7ff fa9a 	bl	800dad6 <dir_sdi>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e5a6:	e026      	b.n	800e5f6 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	4610      	mov	r0, r2
 800e5b4:	f7fe fc8c 	bl	800ced0 <move_window>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e5bc:	7dfb      	ldrb	r3, [r7, #23]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d11d      	bne.n	800e5fe <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5c6:	2220      	movs	r2, #32
 800e5c8:	68f9      	ldr	r1, [r7, #12]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fe fa20 	bl	800ca10 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	613b      	str	r3, [r7, #16]
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00e      	beq.n	800e602 <store_xdir+0x9a>
		dirb += SZDIRE;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	3320      	adds	r3, #32
 800e5e8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f7ff faf8 	bl	800dbe2 <dir_next>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e5f6:	7dfb      	ldrb	r3, [r7, #23]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d0d5      	beq.n	800e5a8 <store_xdir+0x40>
 800e5fc:	e002      	b.n	800e604 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800e5fe:	bf00      	nop
 800e600:	e000      	b.n	800e604 <store_xdir+0x9c>
		if (--nent == 0) break;
 800e602:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800e604:	7dfb      	ldrb	r3, [r7, #23]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d002      	beq.n	800e610 <store_xdir+0xa8>
 800e60a:	7dfb      	ldrb	r3, [r7, #23]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d101      	bne.n	800e614 <store_xdir+0xac>
 800e610:	7dfb      	ldrb	r3, [r7, #23]
 800e612:	e000      	b.n	800e616 <store_xdir+0xae>
 800e614:	2302      	movs	r3, #2
}
 800e616:	4618      	mov	r0, r3
 800e618:	371c      	adds	r7, #28
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd90      	pop	{r4, r7, pc}

0800e61e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800e61e:	b590      	push	{r4, r7, lr}
 800e620:	b085      	sub	sp, #20
 800e622:	af00      	add	r7, sp, #0
 800e624:	6078      	str	r0, [r7, #4]
 800e626:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800e628:	2240      	movs	r2, #64	@ 0x40
 800e62a:	2100      	movs	r1, #0
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f7fe fa10 	bl	800ca52 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2285      	movs	r2, #133	@ 0x85
 800e636:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	3320      	adds	r3, #32
 800e63c:	22c0      	movs	r2, #192	@ 0xc0
 800e63e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800e640:	2300      	movs	r3, #0
 800e642:	72bb      	strb	r3, [r7, #10]
 800e644:	2301      	movs	r3, #1
 800e646:	72fb      	strb	r3, [r7, #11]
 800e648:	2301      	movs	r3, #1
 800e64a:	813b      	strh	r3, [r7, #8]
 800e64c:	2340      	movs	r3, #64	@ 0x40
 800e64e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	60fa      	str	r2, [r7, #12]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	4413      	add	r3, r2
 800e65a:	22c1      	movs	r2, #193	@ 0xc1
 800e65c:	701a      	strb	r2, [r3, #0]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	60fa      	str	r2, [r7, #12]
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	4413      	add	r3, r2
 800e668:	2200      	movs	r2, #0
 800e66a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800e66c:	893b      	ldrh	r3, [r7, #8]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00b      	beq.n	800e68a <create_xdir+0x6c>
 800e672:	7abb      	ldrb	r3, [r7, #10]
 800e674:	005b      	lsls	r3, r3, #1
 800e676:	683a      	ldr	r2, [r7, #0]
 800e678:	4413      	add	r3, r2
 800e67a:	881b      	ldrh	r3, [r3, #0]
 800e67c:	813b      	strh	r3, [r7, #8]
 800e67e:	893b      	ldrh	r3, [r7, #8]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d002      	beq.n	800e68a <create_xdir+0x6c>
 800e684:	7abb      	ldrb	r3, [r7, #10]
 800e686:	3301      	adds	r3, #1
 800e688:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	4413      	add	r3, r2
 800e690:	893a      	ldrh	r2, [r7, #8]
 800e692:	4611      	mov	r1, r2
 800e694:	4618      	mov	r0, r3
 800e696:	f7fe f8ec 	bl	800c872 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	3302      	adds	r3, #2
 800e69e:	60fb      	str	r3, [r7, #12]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f003 031f 	and.w	r3, r3, #31
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d1e0      	bne.n	800e66c <create_xdir+0x4e>
		nb++;
 800e6aa:	7afb      	ldrb	r3, [r7, #11]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800e6b0:	7abb      	ldrb	r3, [r7, #10]
 800e6b2:	005b      	lsls	r3, r3, #1
 800e6b4:	683a      	ldr	r2, [r7, #0]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1c8      	bne.n	800e650 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	3323      	adds	r3, #35	@ 0x23
 800e6c2:	7aba      	ldrb	r2, [r7, #10]
 800e6c4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	7afa      	ldrb	r2, [r7, #11]
 800e6cc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800e6d4:	6838      	ldr	r0, [r7, #0]
 800e6d6:	f7ff fe10 	bl	800e2fa <xname_sum>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	4619      	mov	r1, r3
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f7fe f8c7 	bl	800c872 <st_word>
}
 800e6e4:	bf00      	nop
 800e6e6:	3714      	adds	r7, #20
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd90      	pop	{r4, r7, pc}

0800e6ec <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b086      	sub	sp, #24
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e6f6:	2304      	movs	r3, #4
 800e6f8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e700:	23ff      	movs	r3, #255	@ 0xff
 800e702:	757b      	strb	r3, [r7, #21]
 800e704:	23ff      	movs	r3, #255	@ 0xff
 800e706:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e708:	e09f      	b.n	800e84a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e70e:	4619      	mov	r1, r3
 800e710:	6938      	ldr	r0, [r7, #16]
 800e712:	f7fe fbdd 	bl	800ced0 <move_window>
 800e716:	4603      	mov	r3, r0
 800e718:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e71a:	7dfb      	ldrb	r3, [r7, #23]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	f040 809a 	bne.w	800e856 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e72a:	7dbb      	ldrb	r3, [r7, #22]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d102      	bne.n	800e736 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e730:	2304      	movs	r3, #4
 800e732:	75fb      	strb	r3, [r7, #23]
 800e734:	e096      	b.n	800e864 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	2b04      	cmp	r3, #4
 800e73c:	d118      	bne.n	800e770 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800e73e:	7dbb      	ldrb	r3, [r7, #22]
 800e740:	2b85      	cmp	r3, #133	@ 0x85
 800e742:	d179      	bne.n	800e838 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7ff fe17 	bl	800e380 <load_xdir>
 800e752:	4603      	mov	r3, r0
 800e754:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800e756:	7dfb      	ldrb	r3, [r7, #23]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d17e      	bne.n	800e85a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	691b      	ldr	r3, [r3, #16]
 800e760:	3304      	adds	r3, #4
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e768:	b2da      	uxtb	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800e76e:	e074      	b.n	800e85a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e774:	330b      	adds	r3, #11
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e77c:	73fb      	strb	r3, [r7, #15]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	7bfa      	ldrb	r2, [r7, #15]
 800e782:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e784:	7dbb      	ldrb	r3, [r7, #22]
 800e786:	2be5      	cmp	r3, #229	@ 0xe5
 800e788:	d00e      	beq.n	800e7a8 <dir_read+0xbc>
 800e78a:	7dbb      	ldrb	r3, [r7, #22]
 800e78c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e78e:	d00b      	beq.n	800e7a8 <dir_read+0xbc>
 800e790:	7bfb      	ldrb	r3, [r7, #15]
 800e792:	f023 0320 	bic.w	r3, r3, #32
 800e796:	2b08      	cmp	r3, #8
 800e798:	bf0c      	ite	eq
 800e79a:	2301      	moveq	r3, #1
 800e79c:	2300      	movne	r3, #0
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d002      	beq.n	800e7ae <dir_read+0xc2>
				ord = 0xFF;
 800e7a8:	23ff      	movs	r3, #255	@ 0xff
 800e7aa:	757b      	strb	r3, [r7, #21]
 800e7ac:	e044      	b.n	800e838 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e7ae:	7bfb      	ldrb	r3, [r7, #15]
 800e7b0:	2b0f      	cmp	r3, #15
 800e7b2:	d12f      	bne.n	800e814 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e7b4:	7dbb      	ldrb	r3, [r7, #22]
 800e7b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00d      	beq.n	800e7da <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7c2:	7b5b      	ldrb	r3, [r3, #13]
 800e7c4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e7c6:	7dbb      	ldrb	r3, [r7, #22]
 800e7c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7cc:	75bb      	strb	r3, [r7, #22]
 800e7ce:	7dbb      	ldrb	r3, [r7, #22]
 800e7d0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e7da:	7dba      	ldrb	r2, [r7, #22]
 800e7dc:	7d7b      	ldrb	r3, [r7, #21]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d115      	bne.n	800e80e <dir_read+0x122>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7e6:	330d      	adds	r3, #13
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	7d3a      	ldrb	r2, [r7, #20]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d10e      	bne.n	800e80e <dir_read+0x122>
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	68da      	ldr	r2, [r3, #12]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	f7ff fbd2 	bl	800dfa4 <pick_lfn>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d003      	beq.n	800e80e <dir_read+0x122>
 800e806:	7d7b      	ldrb	r3, [r7, #21]
 800e808:	3b01      	subs	r3, #1
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	e000      	b.n	800e810 <dir_read+0x124>
 800e80e:	23ff      	movs	r3, #255	@ 0xff
 800e810:	757b      	strb	r3, [r7, #21]
 800e812:	e011      	b.n	800e838 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e814:	7d7b      	ldrb	r3, [r7, #21]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d109      	bne.n	800e82e <dir_read+0x142>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e81e:	4618      	mov	r0, r3
 800e820:	f7ff fd1a 	bl	800e258 <sum_sfn>
 800e824:	4603      	mov	r3, r0
 800e826:	461a      	mov	r2, r3
 800e828:	7d3b      	ldrb	r3, [r7, #20]
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d017      	beq.n	800e85e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f04f 32ff 	mov.w	r2, #4294967295
 800e834:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800e836:	e012      	b.n	800e85e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e838:	2100      	movs	r1, #0
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7ff f9d1 	bl	800dbe2 <dir_next>
 800e840:	4603      	mov	r3, r0
 800e842:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e844:	7dfb      	ldrb	r3, [r7, #23]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10b      	bne.n	800e862 <dir_read+0x176>
	while (dp->sect) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e84e:	2b00      	cmp	r3, #0
 800e850:	f47f af5b 	bne.w	800e70a <dir_read+0x1e>
 800e854:	e006      	b.n	800e864 <dir_read+0x178>
		if (res != FR_OK) break;
 800e856:	bf00      	nop
 800e858:	e004      	b.n	800e864 <dir_read+0x178>
					break;
 800e85a:	bf00      	nop
 800e85c:	e002      	b.n	800e864 <dir_read+0x178>
					break;
 800e85e:	bf00      	nop
 800e860:	e000      	b.n	800e864 <dir_read+0x178>
		if (res != FR_OK) break;
 800e862:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e864:	7dfb      	ldrb	r3, [r7, #23]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d002      	beq.n	800e870 <dir_read+0x184>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800e870:	7dfb      	ldrb	r3, [r7, #23]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3718      	adds	r7, #24
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e87a:	b590      	push	{r4, r7, lr}
 800e87c:	b089      	sub	sp, #36	@ 0x24
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e888:	2100      	movs	r1, #0
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7ff f923 	bl	800dad6 <dir_sdi>
 800e890:	4603      	mov	r3, r0
 800e892:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800e894:	7ffb      	ldrb	r3, [r7, #31]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d001      	beq.n	800e89e <dir_find+0x24>
 800e89a:	7ffb      	ldrb	r3, [r7, #31]
 800e89c:	e113      	b.n	800eac6 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	2b04      	cmp	r3, #4
 800e8a4:	d165      	bne.n	800e972 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	68db      	ldr	r3, [r3, #12]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7ff fd25 	bl	800e2fa <xname_sum>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e8b4:	e050      	b.n	800e958 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	691b      	ldr	r3, [r3, #16]
 800e8ba:	3324      	adds	r3, #36	@ 0x24
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fd fec1 	bl	800c644 <ld_word>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	893b      	ldrh	r3, [r7, #8]
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d144      	bne.n	800e956 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	691b      	ldr	r3, [r3, #16]
 800e8d0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800e8d4:	76fb      	strb	r3, [r7, #27]
 800e8d6:	2340      	movs	r3, #64	@ 0x40
 800e8d8:	617b      	str	r3, [r7, #20]
 800e8da:	2300      	movs	r3, #0
 800e8dc:	613b      	str	r3, [r7, #16]
 800e8de:	e029      	b.n	800e934 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	f003 031f 	and.w	r3, r3, #31
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d102      	bne.n	800e8f0 <dir_find+0x76>
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	3302      	adds	r3, #2
 800e8ee:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	691a      	ldr	r2, [r3, #16]
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fd fea3 	bl	800c644 <ld_word>
 800e8fe:	4603      	mov	r3, r0
 800e900:	4618      	mov	r0, r3
 800e902:	f003 faf7 	bl	8011ef4 <ff_wtoupper>
 800e906:	4603      	mov	r3, r0
 800e908:	461c      	mov	r4, r3
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	68da      	ldr	r2, [r3, #12]
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	005b      	lsls	r3, r3, #1
 800e912:	4413      	add	r3, r2
 800e914:	881b      	ldrh	r3, [r3, #0]
 800e916:	4618      	mov	r0, r3
 800e918:	f003 faec 	bl	8011ef4 <ff_wtoupper>
 800e91c:	4603      	mov	r3, r0
 800e91e:	429c      	cmp	r4, r3
 800e920:	d10c      	bne.n	800e93c <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e922:	7efb      	ldrb	r3, [r7, #27]
 800e924:	3b01      	subs	r3, #1
 800e926:	76fb      	strb	r3, [r7, #27]
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	3302      	adds	r3, #2
 800e92c:	617b      	str	r3, [r7, #20]
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	3301      	adds	r3, #1
 800e932:	613b      	str	r3, [r7, #16]
 800e934:	7efb      	ldrb	r3, [r7, #27]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1d2      	bne.n	800e8e0 <dir_find+0x66>
 800e93a:	e000      	b.n	800e93e <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e93c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e93e:	7efb      	ldrb	r3, [r7, #27]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d109      	bne.n	800e958 <dir_find+0xde>
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	68da      	ldr	r2, [r3, #12]
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	005b      	lsls	r3, r3, #1
 800e94c:	4413      	add	r3, r2
 800e94e:	881b      	ldrh	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00b      	beq.n	800e96c <dir_find+0xf2>
 800e954:	e000      	b.n	800e958 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800e956:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e958:	2100      	movs	r1, #0
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f7ff fec6 	bl	800e6ec <dir_read>
 800e960:	4603      	mov	r3, r0
 800e962:	77fb      	strb	r3, [r7, #31]
 800e964:	7ffb      	ldrb	r3, [r7, #31]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d0a5      	beq.n	800e8b6 <dir_find+0x3c>
 800e96a:	e000      	b.n	800e96e <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e96c:	bf00      	nop
		}
		return res;
 800e96e:	7ffb      	ldrb	r3, [r7, #31]
 800e970:	e0a9      	b.n	800eac6 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e972:	23ff      	movs	r3, #255	@ 0xff
 800e974:	773b      	strb	r3, [r7, #28]
 800e976:	7f3b      	ldrb	r3, [r7, #28]
 800e978:	777b      	strb	r3, [r7, #29]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f04f 32ff 	mov.w	r2, #4294967295
 800e980:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e986:	4619      	mov	r1, r3
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f7fe faa1 	bl	800ced0 <move_window>
 800e98e:	4603      	mov	r3, r0
 800e990:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800e992:	7ffb      	ldrb	r3, [r7, #31]
 800e994:	2b00      	cmp	r3, #0
 800e996:	f040 8090 	bne.w	800eaba <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e9a2:	7fbb      	ldrb	r3, [r7, #30]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d102      	bne.n	800e9ae <dir_find+0x134>
 800e9a8:	2304      	movs	r3, #4
 800e9aa:	77fb      	strb	r3, [r7, #31]
 800e9ac:	e08a      	b.n	800eac4 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9b2:	330b      	adds	r3, #11
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e9ba:	72fb      	strb	r3, [r7, #11]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	7afa      	ldrb	r2, [r7, #11]
 800e9c0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e9c2:	7fbb      	ldrb	r3, [r7, #30]
 800e9c4:	2be5      	cmp	r3, #229	@ 0xe5
 800e9c6:	d007      	beq.n	800e9d8 <dir_find+0x15e>
 800e9c8:	7afb      	ldrb	r3, [r7, #11]
 800e9ca:	f003 0308 	and.w	r3, r3, #8
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d009      	beq.n	800e9e6 <dir_find+0x16c>
 800e9d2:	7afb      	ldrb	r3, [r7, #11]
 800e9d4:	2b0f      	cmp	r3, #15
 800e9d6:	d006      	beq.n	800e9e6 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e9d8:	23ff      	movs	r3, #255	@ 0xff
 800e9da:	777b      	strb	r3, [r7, #29]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f04f 32ff 	mov.w	r2, #4294967295
 800e9e2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e9e4:	e05e      	b.n	800eaa4 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e9e6:	7afb      	ldrb	r3, [r7, #11]
 800e9e8:	2b0f      	cmp	r3, #15
 800e9ea:	d136      	bne.n	800ea5a <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800e9f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d154      	bne.n	800eaa4 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e9fa:	7fbb      	ldrb	r3, [r7, #30]
 800e9fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00d      	beq.n	800ea20 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea08:	7b5b      	ldrb	r3, [r3, #13]
 800ea0a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ea0c:	7fbb      	ldrb	r3, [r7, #30]
 800ea0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea12:	77bb      	strb	r3, [r7, #30]
 800ea14:	7fbb      	ldrb	r3, [r7, #30]
 800ea16:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ea20:	7fba      	ldrb	r2, [r7, #30]
 800ea22:	7f7b      	ldrb	r3, [r7, #29]
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d115      	bne.n	800ea54 <dir_find+0x1da>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea2c:	330d      	adds	r3, #13
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	7f3a      	ldrb	r2, [r7, #28]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d10e      	bne.n	800ea54 <dir_find+0x1da>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	68da      	ldr	r2, [r3, #12]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea3e:	4619      	mov	r1, r3
 800ea40:	4610      	mov	r0, r2
 800ea42:	f7ff fa3f 	bl	800dec4 <cmp_lfn>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d003      	beq.n	800ea54 <dir_find+0x1da>
 800ea4c:	7f7b      	ldrb	r3, [r7, #29]
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	e000      	b.n	800ea56 <dir_find+0x1dc>
 800ea54:	23ff      	movs	r3, #255	@ 0xff
 800ea56:	777b      	strb	r3, [r7, #29]
 800ea58:	e024      	b.n	800eaa4 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ea5a:	7f7b      	ldrb	r3, [r7, #29]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d109      	bne.n	800ea74 <dir_find+0x1fa>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7ff fbf7 	bl	800e258 <sum_sfn>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	7f3b      	ldrb	r3, [r7, #28]
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d024      	beq.n	800eabe <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ea7a:	f003 0301 	and.w	r3, r3, #1
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d10a      	bne.n	800ea98 <dir_find+0x21e>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	3340      	adds	r3, #64	@ 0x40
 800ea8a:	220b      	movs	r2, #11
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	f7fd fffb 	bl	800ca88 <mem_cmp>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d014      	beq.n	800eac2 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ea98:	23ff      	movs	r3, #255	@ 0xff
 800ea9a:	777b      	strb	r3, [r7, #29]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa2:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800eaa4:	2100      	movs	r1, #0
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f7ff f89b 	bl	800dbe2 <dir_next>
 800eaac:	4603      	mov	r3, r0
 800eaae:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800eab0:	7ffb      	ldrb	r3, [r7, #31]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f43f af65 	beq.w	800e982 <dir_find+0x108>
 800eab8:	e004      	b.n	800eac4 <dir_find+0x24a>
		if (res != FR_OK) break;
 800eaba:	bf00      	nop
 800eabc:	e002      	b.n	800eac4 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800eabe:	bf00      	nop
 800eac0:	e000      	b.n	800eac4 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eac2:	bf00      	nop

	return res;
 800eac4:	7ffb      	ldrb	r3, [r7, #31]
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3724      	adds	r7, #36	@ 0x24
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd90      	pop	{r4, r7, pc}
	...

0800ead0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ead0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ead4:	b0a0      	sub	sp, #128	@ 0x80
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800eae6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d001      	beq.n	800eaf2 <dir_register+0x22>
 800eaee:	2306      	movs	r3, #6
 800eaf0:	e18e      	b.n	800ee10 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	677b      	str	r3, [r7, #116]	@ 0x74
 800eaf6:	e002      	b.n	800eafe <dir_register+0x2e>
 800eaf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eafa:	3301      	adds	r3, #1
 800eafc:	677b      	str	r3, [r7, #116]	@ 0x74
 800eafe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb00:	68da      	ldr	r2, [r3, #12]
 800eb02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb04:	005b      	lsls	r3, r3, #1
 800eb06:	4413      	add	r3, r2
 800eb08:	881b      	ldrh	r3, [r3, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d1f4      	bne.n	800eaf8 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800eb0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	2b04      	cmp	r3, #4
 800eb14:	f040 809f 	bne.w	800ec56 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800eb18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb1a:	330e      	adds	r3, #14
 800eb1c:	4aa2      	ldr	r2, [pc, #648]	@ (800eda8 <dir_register+0x2d8>)
 800eb1e:	fba2 2303 	umull	r2, r3, r2, r3
 800eb22:	08db      	lsrs	r3, r3, #3
 800eb24:	3302      	adds	r3, #2
 800eb26:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800eb28:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7ff f92e 	bl	800dd8c <dir_alloc>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800eb36:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d002      	beq.n	800eb44 <dir_register+0x74>
 800eb3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb42:	e165      	b.n	800ee10 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eb48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eb4a:	3b01      	subs	r3, #1
 800eb4c:	015b      	lsls	r3, r3, #5
 800eb4e:	1ad2      	subs	r2, r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d072      	beq.n	800ec42 <dir_register+0x172>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	79db      	ldrb	r3, [r3, #7]
 800eb60:	f003 0304 	and.w	r3, r3, #4
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d06c      	beq.n	800ec42 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eb6e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800eb70:	8949      	ldrh	r1, [r1, #10]
 800eb72:	0249      	lsls	r1, r1, #9
 800eb74:	2000      	movs	r0, #0
 800eb76:	460c      	mov	r4, r1
 800eb78:	4605      	mov	r5, r0
 800eb7a:	eb12 0804 	adds.w	r8, r2, r4
 800eb7e:	eb43 0905 	adc.w	r9, r3, r5
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7fe fd4a 	bl	800d624 <fill_first_frag>
 800eb90:	4603      	mov	r3, r0
 800eb92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800eb96:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d002      	beq.n	800eba4 <dir_register+0xd4>
 800eb9e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eba2:	e135      	b.n	800ee10 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ebae:	4619      	mov	r1, r3
 800ebb0:	f7fe fd67 	bl	800d682 <fill_last_frag>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800ebba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d002      	beq.n	800ebc8 <dir_register+0xf8>
 800ebc2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ebc6:	e123      	b.n	800ee10 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	f107 0308 	add.w	r3, r7, #8
 800ebce:	4611      	mov	r1, r2
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7ff fc93 	bl	800e4fc <load_obj_dir>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800ebdc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d002      	beq.n	800ebea <dir_register+0x11a>
 800ebe4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ebe8:	e112      	b.n	800ee10 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800ebea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ebec:	691b      	ldr	r3, [r3, #16]
 800ebee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ebf8:	4608      	mov	r0, r1
 800ebfa:	f7fd fe81 	bl	800c900 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800ebfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec00:	691b      	ldr	r3, [r3, #16]
 800ec02:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ec0c:	4608      	mov	r0, r1
 800ec0e:	f7fd fe77 	bl	800c900 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	79da      	ldrb	r2, [r3, #7]
 800ec16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	3321      	adds	r3, #33	@ 0x21
 800ec1c:	f042 0201 	orr.w	r2, r2, #1
 800ec20:	b2d2      	uxtb	r2, r2
 800ec22:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800ec24:	f107 0308 	add.w	r3, r7, #8
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7ff fc9d 	bl	800e568 <store_xdir>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800ec34:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d002      	beq.n	800ec42 <dir_register+0x172>
 800ec3c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ec40:	e0e6      	b.n	800ee10 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800ec42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec44:	691a      	ldr	r2, [r3, #16]
 800ec46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	4610      	mov	r0, r2
 800ec4e:	f7ff fce6 	bl	800e61e <create_xdir>
		return FR_OK;
 800ec52:	2300      	movs	r3, #0
 800ec54:	e0dc      	b.n	800ee10 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800ec5c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800ec60:	220c      	movs	r2, #12
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7fd fed4 	bl	800ca10 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ec68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ec6c:	f003 0301 	and.w	r3, r3, #1
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d033      	beq.n	800ecdc <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2240      	movs	r2, #64	@ 0x40
 800ec78:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ec80:	e016      	b.n	800ecb0 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800ec88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec8a:	68da      	ldr	r2, [r3, #12]
 800ec8c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800ec90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec92:	f7ff fa53 	bl	800e13c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff fdef 	bl	800e87a <dir_find>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800eca2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d106      	bne.n	800ecb8 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800ecaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ecac:	3301      	adds	r3, #1
 800ecae:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ecb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ecb2:	2b63      	cmp	r3, #99	@ 0x63
 800ecb4:	d9e5      	bls.n	800ec82 <dir_register+0x1b2>
 800ecb6:	e000      	b.n	800ecba <dir_register+0x1ea>
			if (res != FR_OK) break;
 800ecb8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ecba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ecbc:	2b64      	cmp	r3, #100	@ 0x64
 800ecbe:	d101      	bne.n	800ecc4 <dir_register+0x1f4>
 800ecc0:	2307      	movs	r3, #7
 800ecc2:	e0a5      	b.n	800ee10 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ecc4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ecc8:	2b04      	cmp	r3, #4
 800ecca:	d002      	beq.n	800ecd2 <dir_register+0x202>
 800eccc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ecd0:	e09e      	b.n	800ee10 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ecd2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ecdc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ece0:	f003 0302 	and.w	r3, r3, #2
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d007      	beq.n	800ecf8 <dir_register+0x228>
 800ece8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ecea:	330c      	adds	r3, #12
 800ecec:	4a2f      	ldr	r2, [pc, #188]	@ (800edac <dir_register+0x2dc>)
 800ecee:	fba2 2303 	umull	r2, r3, r2, r3
 800ecf2:	089b      	lsrs	r3, r3, #2
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	e000      	b.n	800ecfa <dir_register+0x22a>
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ecfc:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f7ff f844 	bl	800dd8c <dir_alloc>
 800ed04:	4603      	mov	r3, r0
 800ed06:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ed0a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d14f      	bne.n	800edb2 <dir_register+0x2e2>
 800ed12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ed14:	3b01      	subs	r3, #1
 800ed16:	673b      	str	r3, [r7, #112]	@ 0x70
 800ed18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d049      	beq.n	800edb2 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ed22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ed24:	015b      	lsls	r3, r3, #5
 800ed26:	1ad3      	subs	r3, r2, r3
 800ed28:	4619      	mov	r1, r3
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f7fe fed3 	bl	800dad6 <dir_sdi>
 800ed30:	4603      	mov	r3, r0
 800ed32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800ed36:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d139      	bne.n	800edb2 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	3340      	adds	r3, #64	@ 0x40
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7ff fa88 	bl	800e258 <sum_sfn>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed52:	4619      	mov	r1, r3
 800ed54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ed56:	f7fe f8bb 	bl	800ced0 <move_window>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800ed60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d123      	bne.n	800edb0 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ed68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed6a:	68d8      	ldr	r0, [r3, #12]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800ed70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ed72:	b2da      	uxtb	r2, r3
 800ed74:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ed78:	f7ff f978 	bl	800e06c <put_lfn>
				fs->wflag = 1;
 800ed7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed7e:	2201      	movs	r2, #1
 800ed80:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ed82:	2100      	movs	r1, #0
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7fe ff2c 	bl	800dbe2 <dir_next>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800ed90:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10c      	bne.n	800edb2 <dir_register+0x2e2>
 800ed98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ed9a:	3b01      	subs	r3, #1
 800ed9c:	673b      	str	r3, [r7, #112]	@ 0x70
 800ed9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d1d4      	bne.n	800ed4e <dir_register+0x27e>
 800eda4:	e005      	b.n	800edb2 <dir_register+0x2e2>
 800eda6:	bf00      	nop
 800eda8:	88888889 	.word	0x88888889
 800edac:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800edb0:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800edb2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d128      	bne.n	800ee0c <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edbe:	4619      	mov	r1, r3
 800edc0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800edc2:	f7fe f885 	bl	800ced0 <move_window>
 800edc6:	4603      	mov	r3, r0
 800edc8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800edcc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d11b      	bne.n	800ee0c <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edd8:	2220      	movs	r2, #32
 800edda:	2100      	movs	r1, #0
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fd fe38 	bl	800ca52 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	3340      	adds	r3, #64	@ 0x40
 800edea:	220b      	movs	r2, #11
 800edec:	4619      	mov	r1, r3
 800edee:	f7fd fe0f 	bl	800ca10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edfc:	330c      	adds	r3, #12
 800edfe:	f002 0218 	and.w	r2, r2, #24
 800ee02:	b2d2      	uxtb	r2, r2
 800ee04:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ee06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ee08:	2201      	movs	r2, #1
 800ee0a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ee0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3780      	adds	r7, #128	@ 0x80
 800ee14:	46bd      	mov	sp, r7
 800ee16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ee1a:	bf00      	nop

0800ee1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08a      	sub	sp, #40	@ 0x28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	613b      	str	r3, [r7, #16]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	60fb      	str	r3, [r7, #12]
 800ee34:	2300      	movs	r3, #0
 800ee36:	617b      	str	r3, [r7, #20]
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	1c5a      	adds	r2, r3, #1
 800ee40:	61ba      	str	r2, [r7, #24]
 800ee42:	693a      	ldr	r2, [r7, #16]
 800ee44:	4413      	add	r3, r2
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ee4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee4c:	2b1f      	cmp	r3, #31
 800ee4e:	d940      	bls.n	800eed2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ee50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee52:	2b2f      	cmp	r3, #47	@ 0x2f
 800ee54:	d006      	beq.n	800ee64 <create_name+0x48>
 800ee56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee58:	2b5c      	cmp	r3, #92	@ 0x5c
 800ee5a:	d110      	bne.n	800ee7e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ee5c:	e002      	b.n	800ee64 <create_name+0x48>
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	3301      	adds	r3, #1
 800ee62:	61bb      	str	r3, [r7, #24]
 800ee64:	693a      	ldr	r2, [r7, #16]
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	4413      	add	r3, r2
 800ee6a:	781b      	ldrb	r3, [r3, #0]
 800ee6c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ee6e:	d0f6      	beq.n	800ee5e <create_name+0x42>
 800ee70:	693a      	ldr	r2, [r7, #16]
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	4413      	add	r3, r2
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2b5c      	cmp	r3, #92	@ 0x5c
 800ee7a:	d0f0      	beq.n	800ee5e <create_name+0x42>
			break;
 800ee7c:	e02a      	b.n	800eed4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	2bfe      	cmp	r3, #254	@ 0xfe
 800ee82:	d901      	bls.n	800ee88 <create_name+0x6c>
 800ee84:	2306      	movs	r3, #6
 800ee86:	e17d      	b.n	800f184 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ee88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ee8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee90:	2101      	movs	r1, #1
 800ee92:	4618      	mov	r0, r3
 800ee94:	f002 fff2 	bl	8011e7c <ff_convert>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ee9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d101      	bne.n	800eea6 <create_name+0x8a>
 800eea2:	2306      	movs	r3, #6
 800eea4:	e16e      	b.n	800f184 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800eea6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eea8:	2b7f      	cmp	r3, #127	@ 0x7f
 800eeaa:	d809      	bhi.n	800eec0 <create_name+0xa4>
 800eeac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eeae:	4619      	mov	r1, r3
 800eeb0:	488d      	ldr	r0, [pc, #564]	@ (800f0e8 <create_name+0x2cc>)
 800eeb2:	f7fd fe10 	bl	800cad6 <chk_chr>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d001      	beq.n	800eec0 <create_name+0xa4>
 800eebc:	2306      	movs	r3, #6
 800eebe:	e161      	b.n	800f184 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	1c5a      	adds	r2, r3, #1
 800eec4:	617a      	str	r2, [r7, #20]
 800eec6:	005b      	lsls	r3, r3, #1
 800eec8:	68fa      	ldr	r2, [r7, #12]
 800eeca:	4413      	add	r3, r2
 800eecc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800eece:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800eed0:	e7b4      	b.n	800ee3c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800eed2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800eed4:	693a      	ldr	r2, [r7, #16]
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	441a      	add	r2, r3
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800eede:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eee0:	2b1f      	cmp	r3, #31
 800eee2:	d801      	bhi.n	800eee8 <create_name+0xcc>
 800eee4:	2304      	movs	r3, #4
 800eee6:	e000      	b.n	800eeea <create_name+0xce>
 800eee8:	2300      	movs	r3, #0
 800eeea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800eeee:	e011      	b.n	800ef14 <create_name+0xf8>
		w = lfn[di - 1];
 800eef0:	697a      	ldr	r2, [r7, #20]
 800eef2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800eef6:	4413      	add	r3, r2
 800eef8:	005b      	lsls	r3, r3, #1
 800eefa:	68fa      	ldr	r2, [r7, #12]
 800eefc:	4413      	add	r3, r2
 800eefe:	881b      	ldrh	r3, [r3, #0]
 800ef00:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ef02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef04:	2b20      	cmp	r3, #32
 800ef06:	d002      	beq.n	800ef0e <create_name+0xf2>
 800ef08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef0c:	d106      	bne.n	800ef1c <create_name+0x100>
		di--;
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	3b01      	subs	r3, #1
 800ef12:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d1ea      	bne.n	800eef0 <create_name+0xd4>
 800ef1a:	e000      	b.n	800ef1e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ef1c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	005b      	lsls	r3, r3, #1
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	4413      	add	r3, r2
 800ef26:	2200      	movs	r2, #0
 800ef28:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d101      	bne.n	800ef34 <create_name+0x118>
 800ef30:	2306      	movs	r3, #6
 800ef32:	e127      	b.n	800f184 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	3340      	adds	r3, #64	@ 0x40
 800ef38:	220b      	movs	r2, #11
 800ef3a:	2120      	movs	r1, #32
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7fd fd88 	bl	800ca52 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ef42:	2300      	movs	r3, #0
 800ef44:	61bb      	str	r3, [r7, #24]
 800ef46:	e002      	b.n	800ef4e <create_name+0x132>
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	61bb      	str	r3, [r7, #24]
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	005b      	lsls	r3, r3, #1
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	4413      	add	r3, r2
 800ef56:	881b      	ldrh	r3, [r3, #0]
 800ef58:	2b20      	cmp	r3, #32
 800ef5a:	d0f5      	beq.n	800ef48 <create_name+0x12c>
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	005b      	lsls	r3, r3, #1
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	4413      	add	r3, r2
 800ef64:	881b      	ldrh	r3, [r3, #0]
 800ef66:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef68:	d0ee      	beq.n	800ef48 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d009      	beq.n	800ef84 <create_name+0x168>
 800ef70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef74:	f043 0303 	orr.w	r3, r3, #3
 800ef78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ef7c:	e002      	b.n	800ef84 <create_name+0x168>
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	3b01      	subs	r3, #1
 800ef82:	617b      	str	r3, [r7, #20]
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d009      	beq.n	800ef9e <create_name+0x182>
 800ef8a:	697a      	ldr	r2, [r7, #20]
 800ef8c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ef90:	4413      	add	r3, r2
 800ef92:	005b      	lsls	r3, r3, #1
 800ef94:	68fa      	ldr	r2, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	881b      	ldrh	r3, [r3, #0]
 800ef9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef9c:	d1ef      	bne.n	800ef7e <create_name+0x162>

	i = b = 0; ni = 8;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800efa4:	2300      	movs	r3, #0
 800efa6:	623b      	str	r3, [r7, #32]
 800efa8:	2308      	movs	r3, #8
 800efaa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	1c5a      	adds	r2, r3, #1
 800efb0:	61ba      	str	r2, [r7, #24]
 800efb2:	005b      	lsls	r3, r3, #1
 800efb4:	68fa      	ldr	r2, [r7, #12]
 800efb6:	4413      	add	r3, r2
 800efb8:	881b      	ldrh	r3, [r3, #0]
 800efba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800efbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f000 8090 	beq.w	800f0e4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800efc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efc6:	2b20      	cmp	r3, #32
 800efc8:	d006      	beq.n	800efd8 <create_name+0x1bc>
 800efca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efcc:	2b2e      	cmp	r3, #46	@ 0x2e
 800efce:	d10a      	bne.n	800efe6 <create_name+0x1ca>
 800efd0:	69ba      	ldr	r2, [r7, #24]
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d006      	beq.n	800efe6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800efd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800efdc:	f043 0303 	orr.w	r3, r3, #3
 800efe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800efe4:	e07d      	b.n	800f0e2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800efe6:	6a3a      	ldr	r2, [r7, #32]
 800efe8:	69fb      	ldr	r3, [r7, #28]
 800efea:	429a      	cmp	r2, r3
 800efec:	d203      	bcs.n	800eff6 <create_name+0x1da>
 800efee:	69ba      	ldr	r2, [r7, #24]
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d123      	bne.n	800f03e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800eff6:	69fb      	ldr	r3, [r7, #28]
 800eff8:	2b0b      	cmp	r3, #11
 800effa:	d106      	bne.n	800f00a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800effc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f000:	f043 0303 	orr.w	r3, r3, #3
 800f004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f008:	e075      	b.n	800f0f6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f00a:	69ba      	ldr	r2, [r7, #24]
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d005      	beq.n	800f01e <create_name+0x202>
 800f012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f016:	f043 0303 	orr.w	r3, r3, #3
 800f01a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800f01e:	69ba      	ldr	r2, [r7, #24]
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	429a      	cmp	r2, r3
 800f024:	d866      	bhi.n	800f0f4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	61bb      	str	r3, [r7, #24]
 800f02a:	2308      	movs	r3, #8
 800f02c:	623b      	str	r3, [r7, #32]
 800f02e:	230b      	movs	r3, #11
 800f030:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f032:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f03c:	e051      	b.n	800f0e2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f03e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f040:	2b7f      	cmp	r3, #127	@ 0x7f
 800f042:	d914      	bls.n	800f06e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f044:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f046:	2100      	movs	r1, #0
 800f048:	4618      	mov	r0, r3
 800f04a:	f002 ff17 	bl	8011e7c <ff_convert>
 800f04e:	4603      	mov	r3, r0
 800f050:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f054:	2b00      	cmp	r3, #0
 800f056:	d004      	beq.n	800f062 <create_name+0x246>
 800f058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f05a:	3b80      	subs	r3, #128	@ 0x80
 800f05c:	4a23      	ldr	r2, [pc, #140]	@ (800f0ec <create_name+0x2d0>)
 800f05e:	5cd3      	ldrb	r3, [r2, r3]
 800f060:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f062:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f066:	f043 0302 	orr.w	r3, r3, #2
 800f06a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f06e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f070:	2b00      	cmp	r3, #0
 800f072:	d007      	beq.n	800f084 <create_name+0x268>
 800f074:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f076:	4619      	mov	r1, r3
 800f078:	481d      	ldr	r0, [pc, #116]	@ (800f0f0 <create_name+0x2d4>)
 800f07a:	f7fd fd2c 	bl	800cad6 <chk_chr>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d008      	beq.n	800f096 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f084:	235f      	movs	r3, #95	@ 0x5f
 800f086:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800f088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f08c:	f043 0303 	orr.w	r3, r3, #3
 800f090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f094:	e01b      	b.n	800f0ce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f098:	2b40      	cmp	r3, #64	@ 0x40
 800f09a:	d909      	bls.n	800f0b0 <create_name+0x294>
 800f09c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f09e:	2b5a      	cmp	r3, #90	@ 0x5a
 800f0a0:	d806      	bhi.n	800f0b0 <create_name+0x294>
					b |= 2;
 800f0a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f0a6:	f043 0302 	orr.w	r3, r3, #2
 800f0aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f0ae:	e00e      	b.n	800f0ce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f0b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0b2:	2b60      	cmp	r3, #96	@ 0x60
 800f0b4:	d90b      	bls.n	800f0ce <create_name+0x2b2>
 800f0b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0b8:	2b7a      	cmp	r3, #122	@ 0x7a
 800f0ba:	d808      	bhi.n	800f0ce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f0bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f0c0:	f043 0301 	orr.w	r3, r3, #1
 800f0c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f0c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0ca:	3b20      	subs	r3, #32
 800f0cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f0ce:	6a3b      	ldr	r3, [r7, #32]
 800f0d0:	1c5a      	adds	r2, r3, #1
 800f0d2:	623a      	str	r2, [r7, #32]
 800f0d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f0d6:	b2d1      	uxtb	r1, r2
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	4413      	add	r3, r2
 800f0dc:	460a      	mov	r2, r1
 800f0de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800f0e2:	e763      	b.n	800efac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f0e4:	bf00      	nop
 800f0e6:	e006      	b.n	800f0f6 <create_name+0x2da>
 800f0e8:	080164f8 	.word	0x080164f8
 800f0ec:	08016588 	.word	0x08016588
 800f0f0:	08016504 	.word	0x08016504
			if (si > di) break;			/* No extension */
 800f0f4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f0fc:	2be5      	cmp	r3, #229	@ 0xe5
 800f0fe:	d103      	bne.n	800f108 <create_name+0x2ec>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2205      	movs	r2, #5
 800f104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	2b08      	cmp	r3, #8
 800f10c:	d104      	bne.n	800f118 <create_name+0x2fc>
 800f10e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f112:	009b      	lsls	r3, r3, #2
 800f114:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f118:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f11c:	f003 030c 	and.w	r3, r3, #12
 800f120:	2b0c      	cmp	r3, #12
 800f122:	d005      	beq.n	800f130 <create_name+0x314>
 800f124:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f128:	f003 0303 	and.w	r3, r3, #3
 800f12c:	2b03      	cmp	r3, #3
 800f12e:	d105      	bne.n	800f13c <create_name+0x320>
 800f130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f134:	f043 0302 	orr.w	r3, r3, #2
 800f138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f13c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f140:	f003 0302 	and.w	r3, r3, #2
 800f144:	2b00      	cmp	r3, #0
 800f146:	d117      	bne.n	800f178 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f148:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f14c:	f003 0303 	and.w	r3, r3, #3
 800f150:	2b01      	cmp	r3, #1
 800f152:	d105      	bne.n	800f160 <create_name+0x344>
 800f154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f158:	f043 0310 	orr.w	r3, r3, #16
 800f15c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f160:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f164:	f003 030c 	and.w	r3, r3, #12
 800f168:	2b04      	cmp	r3, #4
 800f16a:	d105      	bne.n	800f178 <create_name+0x35c>
 800f16c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f170:	f043 0308 	orr.w	r3, r3, #8
 800f174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f17e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800f182:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f184:	4618      	mov	r0, r3
 800f186:	3728      	adds	r7, #40	@ 0x28
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b086      	sub	sp, #24
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f1a0:	e002      	b.n	800f1a8 <follow_path+0x1c>
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	603b      	str	r3, [r7, #0]
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	2b2f      	cmp	r3, #47	@ 0x2f
 800f1ae:	d0f8      	beq.n	800f1a2 <follow_path+0x16>
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800f1b6:	d0f4      	beq.n	800f1a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	2b1f      	cmp	r3, #31
 800f1ca:	d80a      	bhi.n	800f1e2 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2280      	movs	r2, #128	@ 0x80
 800f1d0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7fe fc7d 	bl	800dad6 <dir_sdi>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	75fb      	strb	r3, [r7, #23]
 800f1e0:	e078      	b.n	800f2d4 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f1e2:	463b      	mov	r3, r7
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7ff fe18 	bl	800ee1c <create_name>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f1f0:	7dfb      	ldrb	r3, [r7, #23]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d169      	bne.n	800f2ca <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7ff fb3f 	bl	800e87a <dir_find>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800f206:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f208:	7dfb      	ldrb	r3, [r7, #23]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00a      	beq.n	800f224 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f20e:	7dfb      	ldrb	r3, [r7, #23]
 800f210:	2b04      	cmp	r3, #4
 800f212:	d15c      	bne.n	800f2ce <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f214:	7afb      	ldrb	r3, [r7, #11]
 800f216:	f003 0304 	and.w	r3, r3, #4
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d157      	bne.n	800f2ce <follow_path+0x142>
 800f21e:	2305      	movs	r3, #5
 800f220:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f222:	e054      	b.n	800f2ce <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f224:	7afb      	ldrb	r3, [r7, #11]
 800f226:	f003 0304 	and.w	r3, r3, #4
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d151      	bne.n	800f2d2 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	799b      	ldrb	r3, [r3, #6]
 800f232:	f003 0310 	and.w	r3, r3, #16
 800f236:	2b00      	cmp	r3, #0
 800f238:	d102      	bne.n	800f240 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800f23a:	2305      	movs	r3, #5
 800f23c:	75fb      	strb	r3, [r7, #23]
 800f23e:	e049      	b.n	800f2d4 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	2b04      	cmp	r3, #4
 800f246:	d130      	bne.n	800f2aa <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	689a      	ldr	r2, [r3, #8]
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f256:	4613      	mov	r3, r2
 800f258:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f25c:	693a      	ldr	r2, [r7, #16]
 800f25e:	79d2      	ldrb	r2, [r2, #7]
 800f260:	431a      	orrs	r2, r3
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	691b      	ldr	r3, [r3, #16]
 800f272:	3334      	adds	r3, #52	@ 0x34
 800f274:	4618      	mov	r0, r3
 800f276:	f7fd f9fe 	bl	800c676 <ld_dword>
 800f27a:	4602      	mov	r2, r0
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	691b      	ldr	r3, [r3, #16]
 800f284:	3321      	adds	r3, #33	@ 0x21
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	f003 0302 	and.w	r3, r3, #2
 800f28c:	b2da      	uxtb	r2, r3
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	691b      	ldr	r3, [r3, #16]
 800f296:	3338      	adds	r3, #56	@ 0x38
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fd fa0f 	bl	800c6bc <ld_qword>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	6939      	ldr	r1, [r7, #16]
 800f2a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f2a8:	e79b      	b.n	800f1e2 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2b8:	4413      	add	r3, r2
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f7fe fdc1 	bl	800de44 <ld_clust>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f2c8:	e78b      	b.n	800f1e2 <follow_path+0x56>
			if (res != FR_OK) break;
 800f2ca:	bf00      	nop
 800f2cc:	e002      	b.n	800f2d4 <follow_path+0x148>
				break;
 800f2ce:	bf00      	nop
 800f2d0:	e000      	b.n	800f2d4 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2d2:	bf00      	nop
			}
		}
	}

	return res;
 800f2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3718      	adds	r7, #24
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f2de:	b480      	push	{r7}
 800f2e0:	b087      	sub	sp, #28
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d031      	beq.n	800f358 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	617b      	str	r3, [r7, #20]
 800f2fa:	e002      	b.n	800f302 <get_ldnumber+0x24>
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	3301      	adds	r3, #1
 800f300:	617b      	str	r3, [r7, #20]
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	2b1f      	cmp	r3, #31
 800f308:	d903      	bls.n	800f312 <get_ldnumber+0x34>
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	2b3a      	cmp	r3, #58	@ 0x3a
 800f310:	d1f4      	bne.n	800f2fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	2b3a      	cmp	r3, #58	@ 0x3a
 800f318:	d11c      	bne.n	800f354 <get_ldnumber+0x76>
			tp = *path;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	1c5a      	adds	r2, r3, #1
 800f324:	60fa      	str	r2, [r7, #12]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	3b30      	subs	r3, #48	@ 0x30
 800f32a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2b09      	cmp	r3, #9
 800f330:	d80e      	bhi.n	800f350 <get_ldnumber+0x72>
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	429a      	cmp	r2, r3
 800f338:	d10a      	bne.n	800f350 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d107      	bne.n	800f350 <get_ldnumber+0x72>
					vol = (int)i;
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	3301      	adds	r3, #1
 800f348:	617b      	str	r3, [r7, #20]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	697a      	ldr	r2, [r7, #20]
 800f34e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	e002      	b.n	800f35a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f354:	2300      	movs	r3, #0
 800f356:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f358:	693b      	ldr	r3, [r7, #16]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	371c      	adds	r7, #28
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
	...

0800f368 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2200      	movs	r2, #0
 800f376:	70da      	strb	r2, [r3, #3]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f04f 32ff 	mov.w	r2, #4294967295
 800f37e:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f380:	6839      	ldr	r1, [r7, #0]
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f7fd fda4 	bl	800ced0 <move_window>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d001      	beq.n	800f392 <check_fs+0x2a>
 800f38e:	2304      	movs	r3, #4
 800f390:	e044      	b.n	800f41c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	333c      	adds	r3, #60	@ 0x3c
 800f396:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fd f952 	bl	800c644 <ld_word>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d001      	beq.n	800f3b0 <check_fs+0x48>
 800f3ac:	2303      	movs	r3, #3
 800f3ae:	e035      	b.n	800f41c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3b6:	2be9      	cmp	r3, #233	@ 0xe9
 800f3b8:	d009      	beq.n	800f3ce <check_fs+0x66>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3c0:	2beb      	cmp	r3, #235	@ 0xeb
 800f3c2:	d11e      	bne.n	800f402 <check_fs+0x9a>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f3ca:	2b90      	cmp	r3, #144	@ 0x90
 800f3cc:	d119      	bne.n	800f402 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	333c      	adds	r3, #60	@ 0x3c
 800f3d2:	3336      	adds	r3, #54	@ 0x36
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fd f94e 	bl	800c676 <ld_dword>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f3e0:	4a10      	ldr	r2, [pc, #64]	@ (800f424 <check_fs+0xbc>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d101      	bne.n	800f3ea <check_fs+0x82>
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	e018      	b.n	800f41c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	333c      	adds	r3, #60	@ 0x3c
 800f3ee:	3352      	adds	r3, #82	@ 0x52
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7fd f940 	bl	800c676 <ld_dword>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	4a0b      	ldr	r2, [pc, #44]	@ (800f428 <check_fs+0xc0>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d101      	bne.n	800f402 <check_fs+0x9a>
 800f3fe:	2300      	movs	r3, #0
 800f400:	e00c      	b.n	800f41c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	333c      	adds	r3, #60	@ 0x3c
 800f406:	220b      	movs	r2, #11
 800f408:	4908      	ldr	r1, [pc, #32]	@ (800f42c <check_fs+0xc4>)
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7fd fb3c 	bl	800ca88 <mem_cmp>
 800f410:	4603      	mov	r3, r0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d101      	bne.n	800f41a <check_fs+0xb2>
 800f416:	2301      	movs	r3, #1
 800f418:	e000      	b.n	800f41c <check_fs+0xb4>
#endif
	return 2;
 800f41a:	2302      	movs	r3, #2
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3708      	adds	r7, #8
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}
 800f424:	00544146 	.word	0x00544146
 800f428:	33544146 	.word	0x33544146
 800f42c:	0801650c 	.word	0x0801650c

0800f430 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f434:	b09c      	sub	sp, #112	@ 0x70
 800f436:	af00      	add	r7, sp, #0
 800f438:	61f8      	str	r0, [r7, #28]
 800f43a:	61b9      	str	r1, [r7, #24]
 800f43c:	4613      	mov	r3, r2
 800f43e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	2200      	movs	r2, #0
 800f444:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f446:	69f8      	ldr	r0, [r7, #28]
 800f448:	f7ff ff49 	bl	800f2de <get_ldnumber>
 800f44c:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800f44e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f450:	2b00      	cmp	r3, #0
 800f452:	da01      	bge.n	800f458 <find_volume+0x28>
 800f454:	230b      	movs	r3, #11
 800f456:	e339      	b.n	800facc <find_volume+0x69c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f458:	4a9d      	ldr	r2, [pc, #628]	@ (800f6d0 <find_volume+0x2a0>)
 800f45a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f460:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f464:	2b00      	cmp	r3, #0
 800f466:	d101      	bne.n	800f46c <find_volume+0x3c>
 800f468:	230c      	movs	r3, #12
 800f46a:	e32f      	b.n	800facc <find_volume+0x69c>

	ENTER_FF(fs);						/* Lock the volume */
 800f46c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f46e:	f7fd fb4d 	bl	800cb0c <lock_fs>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d101      	bne.n	800f47c <find_volume+0x4c>
 800f478:	230f      	movs	r3, #15
 800f47a:	e327      	b.n	800facc <find_volume+0x69c>
	*rfs = fs;							/* Return pointer to the file system object */
 800f47c:	69bb      	ldr	r3, [r7, #24]
 800f47e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f480:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f482:	7dfb      	ldrb	r3, [r7, #23]
 800f484:	f023 0301 	bic.w	r3, r3, #1
 800f488:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f48a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d01a      	beq.n	800f4c8 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800f492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f494:	785b      	ldrb	r3, [r3, #1]
 800f496:	4618      	mov	r0, r3
 800f498:	f7fd f836 	bl	800c508 <disk_status>
 800f49c:	4603      	mov	r3, r0
 800f49e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f4a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f4a6:	f003 0301 	and.w	r3, r3, #1
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d10c      	bne.n	800f4c8 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f4ae:	7dfb      	ldrb	r3, [r7, #23]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d007      	beq.n	800f4c4 <find_volume+0x94>
 800f4b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f4b8:	f003 0304 	and.w	r3, r3, #4
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d001      	beq.n	800f4c4 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800f4c0:	230a      	movs	r3, #10
 800f4c2:	e303      	b.n	800facc <find_volume+0x69c>
			}
			return FR_OK;				/* The file system object is valid */
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	e301      	b.n	800facc <find_volume+0x69c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f4c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f4ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4d0:	b2da      	uxtb	r2, r3
 800f4d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4d4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f4d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4d8:	785b      	ldrb	r3, [r3, #1]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fd f82e 	bl	800c53c <disk_initialize>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f4e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f4ea:	f003 0301 	and.w	r3, r3, #1
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d001      	beq.n	800f4f6 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f4f2:	2303      	movs	r3, #3
 800f4f4:	e2ea      	b.n	800facc <find_volume+0x69c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f4f6:	7dfb      	ldrb	r3, [r7, #23]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d007      	beq.n	800f50c <find_volume+0xdc>
 800f4fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f500:	f003 0304 	and.w	r3, r3, #4
 800f504:	2b00      	cmp	r3, #0
 800f506:	d001      	beq.n	800f50c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800f508:	230a      	movs	r3, #10
 800f50a:	e2df      	b.n	800facc <find_volume+0x69c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f50c:	2300      	movs	r3, #0
 800f50e:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f510:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f512:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f514:	f7ff ff28 	bl	800f368 <check_fs>
 800f518:	4603      	mov	r3, r0
 800f51a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f51e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800f522:	2b02      	cmp	r3, #2
 800f524:	d14d      	bne.n	800f5c2 <find_volume+0x192>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f526:	2300      	movs	r3, #0
 800f528:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f52a:	e020      	b.n	800f56e <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f52c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f52e:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800f532:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f534:	011b      	lsls	r3, r3, #4
 800f536:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f53a:	4413      	add	r3, r2
 800f53c:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f53e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f540:	3304      	adds	r3, #4
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d006      	beq.n	800f556 <find_volume+0x126>
 800f548:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f54a:	3308      	adds	r3, #8
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7fd f892 	bl	800c676 <ld_dword>
 800f552:	4602      	mov	r2, r0
 800f554:	e000      	b.n	800f558 <find_volume+0x128>
 800f556:	2200      	movs	r2, #0
 800f558:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f55a:	009b      	lsls	r3, r3, #2
 800f55c:	3360      	adds	r3, #96	@ 0x60
 800f55e:	f107 0110 	add.w	r1, r7, #16
 800f562:	440b      	add	r3, r1
 800f564:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f568:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f56a:	3301      	adds	r3, #1
 800f56c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f56e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f570:	2b03      	cmp	r3, #3
 800f572:	d9db      	bls.n	800f52c <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f574:	2300      	movs	r3, #0
 800f576:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800f578:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d002      	beq.n	800f584 <find_volume+0x154>
 800f57e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f580:	3b01      	subs	r3, #1
 800f582:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f584:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f586:	009b      	lsls	r3, r3, #2
 800f588:	3360      	adds	r3, #96	@ 0x60
 800f58a:	f107 0210 	add.w	r2, r7, #16
 800f58e:	4413      	add	r3, r2
 800f590:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f594:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f596:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d005      	beq.n	800f5a8 <find_volume+0x178>
 800f59c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f59e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f5a0:	f7ff fee2 	bl	800f368 <check_fs>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	e000      	b.n	800f5aa <find_volume+0x17a>
 800f5a8:	2303      	movs	r3, #3
 800f5aa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f5ae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d905      	bls.n	800f5c2 <find_volume+0x192>
 800f5b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f5bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5be:	2b03      	cmp	r3, #3
 800f5c0:	d9e0      	bls.n	800f584 <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f5c2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800f5c6:	2b04      	cmp	r3, #4
 800f5c8:	d101      	bne.n	800f5ce <find_volume+0x19e>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	e27e      	b.n	800facc <find_volume+0x69c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f5ce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800f5d2:	2b01      	cmp	r3, #1
 800f5d4:	d901      	bls.n	800f5da <find_volume+0x1aa>
 800f5d6:	230d      	movs	r3, #13
 800f5d8:	e278      	b.n	800facc <find_volume+0x69c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800f5da:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	f040 80fa 	bne.w	800f7d8 <find_volume+0x3a8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800f5e4:	230b      	movs	r3, #11
 800f5e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f5e8:	e002      	b.n	800f5f0 <find_volume+0x1c0>
 800f5ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f5f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5f2:	2b3f      	cmp	r3, #63	@ 0x3f
 800f5f4:	d806      	bhi.n	800f604 <find_volume+0x1d4>
 800f5f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f5f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5fa:	4413      	add	r3, r2
 800f5fc:	333c      	adds	r3, #60	@ 0x3c
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d0f2      	beq.n	800f5ea <find_volume+0x1ba>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800f604:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f606:	2b3f      	cmp	r3, #63	@ 0x3f
 800f608:	d801      	bhi.n	800f60e <find_volume+0x1de>
 800f60a:	230d      	movs	r3, #13
 800f60c:	e25e      	b.n	800facc <find_volume+0x69c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800f60e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f610:	333c      	adds	r3, #60	@ 0x3c
 800f612:	3368      	adds	r3, #104	@ 0x68
 800f614:	4618      	mov	r0, r3
 800f616:	f7fd f815 	bl	800c644 <ld_word>
 800f61a:	4603      	mov	r3, r0
 800f61c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f620:	d001      	beq.n	800f626 <find_volume+0x1f6>
 800f622:	230d      	movs	r3, #13
 800f624:	e252      	b.n	800facc <find_volume+0x69c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800f626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f628:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800f62c:	2b09      	cmp	r3, #9
 800f62e:	d001      	beq.n	800f634 <find_volume+0x204>
			return FR_NO_FILESYSTEM;
 800f630:	230d      	movs	r3, #13
 800f632:	e24b      	b.n	800facc <find_volume+0x69c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800f634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f636:	333c      	adds	r3, #60	@ 0x3c
 800f638:	3348      	adds	r3, #72	@ 0x48
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fd f83e 	bl	800c6bc <ld_qword>
 800f640:	4602      	mov	r2, r0
 800f642:	460b      	mov	r3, r1
 800f644:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f646:	2000      	movs	r0, #0
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	68b9      	ldr	r1, [r7, #8]
 800f64e:	1851      	adds	r1, r2, r1
 800f650:	6039      	str	r1, [r7, #0]
 800f652:	68f9      	ldr	r1, [r7, #12]
 800f654:	eb43 0101 	adc.w	r1, r3, r1
 800f658:	6079      	str	r1, [r7, #4]
 800f65a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f65e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800f662:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800f666:	2b01      	cmp	r3, #1
 800f668:	d301      	bcc.n	800f66e <find_volume+0x23e>
 800f66a:	230d      	movs	r3, #13
 800f66c:	e22e      	b.n	800facc <find_volume+0x69c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800f66e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f670:	333c      	adds	r3, #60	@ 0x3c
 800f672:	3354      	adds	r3, #84	@ 0x54
 800f674:	4618      	mov	r0, r3
 800f676:	f7fc fffe 	bl	800c676 <ld_dword>
 800f67a:	4602      	mov	r2, r0
 800f67c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f67e:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800f680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f682:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800f686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f688:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800f68a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f68c:	789b      	ldrb	r3, [r3, #2]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d001      	beq.n	800f696 <find_volume+0x266>
 800f692:	230d      	movs	r3, #13
 800f694:	e21a      	b.n	800facc <find_volume+0x69c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800f696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f698:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800f69c:	461a      	mov	r2, r3
 800f69e:	2301      	movs	r3, #1
 800f6a0:	4093      	lsls	r3, r2
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6a6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800f6a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6aa:	895b      	ldrh	r3, [r3, #10]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d101      	bne.n	800f6b4 <find_volume+0x284>
 800f6b0:	230d      	movs	r3, #13
 800f6b2:	e20b      	b.n	800facc <find_volume+0x69c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800f6b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6b6:	333c      	adds	r3, #60	@ 0x3c
 800f6b8:	335c      	adds	r3, #92	@ 0x5c
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fc ffdb 	bl	800c676 <ld_dword>
 800f6c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800f6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6c4:	4a03      	ldr	r2, [pc, #12]	@ (800f6d4 <find_volume+0x2a4>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d906      	bls.n	800f6d8 <find_volume+0x2a8>
 800f6ca:	230d      	movs	r3, #13
 800f6cc:	e1fe      	b.n	800facc <find_volume+0x69c>
 800f6ce:	bf00      	nop
 800f6d0:	200054a4 	.word	0x200054a4
 800f6d4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800f6d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6da:	1c9a      	adds	r2, r3, #2
 800f6dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6de:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800f6e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f6e4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800f6e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6e8:	333c      	adds	r3, #60	@ 0x3c
 800f6ea:	3358      	adds	r3, #88	@ 0x58
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fc ffc2 	bl	800c676 <ld_dword>
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f6f6:	441a      	add	r2, r3
 800f6f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6fa:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800f6fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6fe:	333c      	adds	r3, #60	@ 0x3c
 800f700:	3350      	adds	r3, #80	@ 0x50
 800f702:	4618      	mov	r0, r3
 800f704:	f7fc ffb7 	bl	800c676 <ld_dword>
 800f708:	4602      	mov	r2, r0
 800f70a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f70c:	441a      	add	r2, r3
 800f70e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f710:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800f712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f716:	2200      	movs	r2, #0
 800f718:	469a      	mov	sl, r3
 800f71a:	4693      	mov	fp, r2
 800f71c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f71e:	895b      	ldrh	r3, [r3, #10]
 800f720:	461a      	mov	r2, r3
 800f722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f724:	fb02 f303 	mul.w	r3, r2, r3
 800f728:	2200      	movs	r2, #0
 800f72a:	4698      	mov	r8, r3
 800f72c:	4691      	mov	r9, r2
 800f72e:	eb1a 0408 	adds.w	r4, sl, r8
 800f732:	eb4b 0509 	adc.w	r5, fp, r9
 800f736:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800f73a:	42a2      	cmp	r2, r4
 800f73c:	41ab      	sbcs	r3, r5
 800f73e:	d201      	bcs.n	800f744 <find_volume+0x314>
 800f740:	230d      	movs	r3, #13
 800f742:	e1c3      	b.n	800facc <find_volume+0x69c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800f744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f746:	333c      	adds	r3, #60	@ 0x3c
 800f748:	3360      	adds	r3, #96	@ 0x60
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7fc ff93 	bl	800c676 <ld_dword>
 800f750:	4602      	mov	r2, r0
 800f752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f754:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800f756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f75a:	4619      	mov	r1, r3
 800f75c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f75e:	f7fd fc53 	bl	800d008 <clust2sect>
 800f762:	4603      	mov	r3, r0
 800f764:	4619      	mov	r1, r3
 800f766:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800f768:	f7fd fbb2 	bl	800ced0 <move_window>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d001      	beq.n	800f776 <find_volume+0x346>
 800f772:	2301      	movs	r3, #1
 800f774:	e1aa      	b.n	800facc <find_volume+0x69c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f776:	2300      	movs	r3, #0
 800f778:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f77a:	e015      	b.n	800f7a8 <find_volume+0x378>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f77c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f77e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f780:	4413      	add	r3, r2
 800f782:	333c      	adds	r3, #60	@ 0x3c
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	2b81      	cmp	r3, #129	@ 0x81
 800f788:	d10b      	bne.n	800f7a2 <find_volume+0x372>
 800f78a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f78c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800f790:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f792:	3314      	adds	r3, #20
 800f794:	4413      	add	r3, r2
 800f796:	4618      	mov	r0, r3
 800f798:	f7fc ff6d 	bl	800c676 <ld_dword>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b02      	cmp	r3, #2
 800f7a0:	d007      	beq.n	800f7b2 <find_volume+0x382>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f7a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7a4:	3320      	adds	r3, #32
 800f7a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f7a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f7ae:	d3e5      	bcc.n	800f77c <find_volume+0x34c>
 800f7b0:	e000      	b.n	800f7b4 <find_volume+0x384>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f7b2:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800f7b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f7b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f7ba:	d101      	bne.n	800f7c0 <find_volume+0x390>
 800f7bc:	230d      	movs	r3, #13
 800f7be:	e185      	b.n	800facc <find_volume+0x69c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f7c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c6:	61da      	str	r2, [r3, #28]
 800f7c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f7ca:	69da      	ldr	r2, [r3, #28]
 800f7cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f7ce:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800f7d0:	2304      	movs	r3, #4
 800f7d2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800f7d6:	e167      	b.n	800faa8 <find_volume+0x678>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f7d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f7da:	333c      	adds	r3, #60	@ 0x3c
 800f7dc:	330b      	adds	r3, #11
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fc ff30 	bl	800c644 <ld_word>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f7ea:	d001      	beq.n	800f7f0 <find_volume+0x3c0>
 800f7ec:	230d      	movs	r3, #13
 800f7ee:	e16d      	b.n	800facc <find_volume+0x69c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f7f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f7f2:	333c      	adds	r3, #60	@ 0x3c
 800f7f4:	3316      	adds	r3, #22
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fc ff24 	bl	800c644 <ld_word>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f802:	2b00      	cmp	r3, #0
 800f804:	d106      	bne.n	800f814 <find_volume+0x3e4>
 800f806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f808:	333c      	adds	r3, #60	@ 0x3c
 800f80a:	3324      	adds	r3, #36	@ 0x24
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fc ff32 	bl	800c676 <ld_dword>
 800f812:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800f814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f816:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f818:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f81a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f81c:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800f820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f822:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f826:	789b      	ldrb	r3, [r3, #2]
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d005      	beq.n	800f838 <find_volume+0x408>
 800f82c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f82e:	789b      	ldrb	r3, [r3, #2]
 800f830:	2b02      	cmp	r3, #2
 800f832:	d001      	beq.n	800f838 <find_volume+0x408>
 800f834:	230d      	movs	r3, #13
 800f836:	e149      	b.n	800facc <find_volume+0x69c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f83a:	789b      	ldrb	r3, [r3, #2]
 800f83c:	461a      	mov	r2, r3
 800f83e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f840:	fb02 f303 	mul.w	r3, r2, r3
 800f844:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f848:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800f84c:	461a      	mov	r2, r3
 800f84e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f850:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f854:	895b      	ldrh	r3, [r3, #10]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d008      	beq.n	800f86c <find_volume+0x43c>
 800f85a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f85c:	895b      	ldrh	r3, [r3, #10]
 800f85e:	461a      	mov	r2, r3
 800f860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f862:	895b      	ldrh	r3, [r3, #10]
 800f864:	3b01      	subs	r3, #1
 800f866:	4013      	ands	r3, r2
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <find_volume+0x440>
 800f86c:	230d      	movs	r3, #13
 800f86e:	e12d      	b.n	800facc <find_volume+0x69c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f872:	333c      	adds	r3, #60	@ 0x3c
 800f874:	3311      	adds	r3, #17
 800f876:	4618      	mov	r0, r3
 800f878:	f7fc fee4 	bl	800c644 <ld_word>
 800f87c:	4603      	mov	r3, r0
 800f87e:	461a      	mov	r2, r3
 800f880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f882:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f884:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f886:	891b      	ldrh	r3, [r3, #8]
 800f888:	f003 030f 	and.w	r3, r3, #15
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <find_volume+0x466>
 800f892:	230d      	movs	r3, #13
 800f894:	e11a      	b.n	800facc <find_volume+0x69c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f898:	333c      	adds	r3, #60	@ 0x3c
 800f89a:	3313      	adds	r3, #19
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fc fed1 	bl	800c644 <ld_word>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f8a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d106      	bne.n	800f8ba <find_volume+0x48a>
 800f8ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8ae:	333c      	adds	r3, #60	@ 0x3c
 800f8b0:	3320      	adds	r3, #32
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7fc fedf 	bl	800c676 <ld_dword>
 800f8b8:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f8ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8bc:	333c      	adds	r3, #60	@ 0x3c
 800f8be:	330e      	adds	r3, #14
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7fc febf 	bl	800c644 <ld_word>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f8cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d101      	bne.n	800f8d8 <find_volume+0x4a8>
 800f8d4:	230d      	movs	r3, #13
 800f8d6:	e0f9      	b.n	800facc <find_volume+0x69c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f8d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800f8dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f8de:	4413      	add	r3, r2
 800f8e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f8e2:	8912      	ldrh	r2, [r2, #8]
 800f8e4:	0912      	lsrs	r2, r2, #4
 800f8e6:	b292      	uxth	r2, r2
 800f8e8:	4413      	add	r3, r2
 800f8ea:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f8ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f8ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d201      	bcs.n	800f8f8 <find_volume+0x4c8>
 800f8f4:	230d      	movs	r3, #13
 800f8f6:	e0e9      	b.n	800facc <find_volume+0x69c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f8f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f8fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8fc:	1ad3      	subs	r3, r2, r3
 800f8fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f900:	8952      	ldrh	r2, [r2, #10]
 800f902:	fbb3 f3f2 	udiv	r3, r3, r2
 800f906:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d101      	bne.n	800f912 <find_volume+0x4e2>
 800f90e:	230d      	movs	r3, #13
 800f910:	e0dc      	b.n	800facc <find_volume+0x69c>
		fmt = FS_FAT32;
 800f912:	2303      	movs	r3, #3
 800f914:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f91a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f91e:	4293      	cmp	r3, r2
 800f920:	d802      	bhi.n	800f928 <find_volume+0x4f8>
 800f922:	2302      	movs	r3, #2
 800f924:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f92a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f92e:	4293      	cmp	r3, r2
 800f930:	d802      	bhi.n	800f938 <find_volume+0x508>
 800f932:	2301      	movs	r3, #1
 800f934:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f93a:	1c9a      	adds	r2, r3, #2
 800f93c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f93e:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f942:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f944:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f946:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800f94a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f94c:	441a      	add	r2, r3
 800f94e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f950:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f952:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f956:	441a      	add	r2, r3
 800f958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f95a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800f95c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800f960:	2b03      	cmp	r3, #3
 800f962:	d11e      	bne.n	800f9a2 <find_volume+0x572>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f966:	333c      	adds	r3, #60	@ 0x3c
 800f968:	332a      	adds	r3, #42	@ 0x2a
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7fc fe6a 	bl	800c644 <ld_word>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <find_volume+0x54a>
 800f976:	230d      	movs	r3, #13
 800f978:	e0a8      	b.n	800facc <find_volume+0x69c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f97a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f97c:	891b      	ldrh	r3, [r3, #8]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d001      	beq.n	800f986 <find_volume+0x556>
 800f982:	230d      	movs	r3, #13
 800f984:	e0a2      	b.n	800facc <find_volume+0x69c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f988:	333c      	adds	r3, #60	@ 0x3c
 800f98a:	332c      	adds	r3, #44	@ 0x2c
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7fc fe72 	bl	800c676 <ld_dword>
 800f992:	4602      	mov	r2, r0
 800f994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f996:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f99a:	6a1b      	ldr	r3, [r3, #32]
 800f99c:	009b      	lsls	r3, r3, #2
 800f99e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f9a0:	e01f      	b.n	800f9e2 <find_volume+0x5b2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f9a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9a4:	891b      	ldrh	r3, [r3, #8]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d101      	bne.n	800f9ae <find_volume+0x57e>
 800f9aa:	230d      	movs	r3, #13
 800f9ac:	e08e      	b.n	800facc <find_volume+0x69c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f9ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f9b4:	441a      	add	r2, r3
 800f9b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9b8:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f9ba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800f9be:	2b02      	cmp	r3, #2
 800f9c0:	d103      	bne.n	800f9ca <find_volume+0x59a>
 800f9c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9c4:	6a1b      	ldr	r3, [r3, #32]
 800f9c6:	005b      	lsls	r3, r3, #1
 800f9c8:	e00a      	b.n	800f9e0 <find_volume+0x5b0>
 800f9ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9cc:	6a1a      	ldr	r2, [r3, #32]
 800f9ce:	4613      	mov	r3, r2
 800f9d0:	005b      	lsls	r3, r3, #1
 800f9d2:	4413      	add	r3, r2
 800f9d4:	085a      	lsrs	r2, r3, #1
 800f9d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9d8:	6a1b      	ldr	r3, [r3, #32]
 800f9da:	f003 0301 	and.w	r3, r3, #1
 800f9de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f9e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f9e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9e8:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f9ec:	0a5b      	lsrs	r3, r3, #9
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d201      	bcs.n	800f9f6 <find_volume+0x5c6>
 800f9f2:	230d      	movs	r3, #13
 800f9f4:	e06a      	b.n	800facc <find_volume+0x69c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f9f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f9fc:	61da      	str	r2, [r3, #28]
 800f9fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa00:	69da      	ldr	r2, [r3, #28]
 800fa02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa04:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800fa06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa08:	2280      	movs	r2, #128	@ 0x80
 800fa0a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fa0c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800fa10:	2b03      	cmp	r3, #3
 800fa12:	d149      	bne.n	800faa8 <find_volume+0x678>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fa14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa16:	333c      	adds	r3, #60	@ 0x3c
 800fa18:	3330      	adds	r3, #48	@ 0x30
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fc fe12 	bl	800c644 <ld_word>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d140      	bne.n	800faa8 <find_volume+0x678>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fa26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fa28:	3301      	adds	r3, #1
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800fa2e:	f7fd fa4f 	bl	800ced0 <move_window>
 800fa32:	4603      	mov	r3, r0
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d137      	bne.n	800faa8 <find_volume+0x678>
		{
			fs->fsi_flag = 0;
 800fa38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fa3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa40:	333c      	adds	r3, #60	@ 0x3c
 800fa42:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fc fdfc 	bl	800c644 <ld_word>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	461a      	mov	r2, r3
 800fa50:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d127      	bne.n	800faa8 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fa58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa5a:	333c      	adds	r3, #60	@ 0x3c
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fc fe0a 	bl	800c676 <ld_dword>
 800fa62:	4603      	mov	r3, r0
 800fa64:	4a1c      	ldr	r2, [pc, #112]	@ (800fad8 <find_volume+0x6a8>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d11e      	bne.n	800faa8 <find_volume+0x678>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fa6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa6c:	333c      	adds	r3, #60	@ 0x3c
 800fa6e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fc fdff 	bl	800c676 <ld_dword>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	4a18      	ldr	r2, [pc, #96]	@ (800fadc <find_volume+0x6ac>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d113      	bne.n	800faa8 <find_volume+0x678>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fa80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa82:	333c      	adds	r3, #60	@ 0x3c
 800fa84:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fc fdf4 	bl	800c676 <ld_dword>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa92:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fa94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa96:	333c      	adds	r3, #60	@ 0x3c
 800fa98:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7fc fdea 	bl	800c676 <ld_dword>
 800faa2:	4602      	mov	r2, r0
 800faa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800faa6:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800faa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800faaa:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800faae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fab0:	4b0b      	ldr	r3, [pc, #44]	@ (800fae0 <find_volume+0x6b0>)
 800fab2:	881b      	ldrh	r3, [r3, #0]
 800fab4:	3301      	adds	r3, #1
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	4b09      	ldr	r3, [pc, #36]	@ (800fae0 <find_volume+0x6b0>)
 800faba:	801a      	strh	r2, [r3, #0]
 800fabc:	4b08      	ldr	r3, [pc, #32]	@ (800fae0 <find_volume+0x6b0>)
 800fabe:	881a      	ldrh	r2, [r3, #0]
 800fac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fac2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fac4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800fac6:	f7fd f99b 	bl	800ce00 <clear_lock>
#endif
	return FR_OK;
 800faca:	2300      	movs	r3, #0
}
 800facc:	4618      	mov	r0, r3
 800face:	3770      	adds	r7, #112	@ 0x70
 800fad0:	46bd      	mov	sp, r7
 800fad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fad6:	bf00      	nop
 800fad8:	41615252 	.word	0x41615252
 800fadc:	61417272 	.word	0x61417272
 800fae0:	200054a8 	.word	0x200054a8

0800fae4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800faee:	2309      	movs	r3, #9
 800faf0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d02e      	beq.n	800fb56 <validate+0x72>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d02a      	beq.n	800fb56 <validate+0x72>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d025      	beq.n	800fb56 <validate+0x72>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	889a      	ldrh	r2, [r3, #4]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	88db      	ldrh	r3, [r3, #6]
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d11e      	bne.n	800fb56 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fc fff5 	bl	800cb0c <lock_fs>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d014      	beq.n	800fb52 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	785b      	ldrb	r3, [r3, #1]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fc fcea 	bl	800c508 <disk_status>
 800fb34:	4603      	mov	r3, r0
 800fb36:	f003 0301 	and.w	r3, r3, #1
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d102      	bne.n	800fb44 <validate+0x60>
				res = FR_OK;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	73fb      	strb	r3, [r7, #15]
 800fb42:	e008      	b.n	800fb56 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2100      	movs	r1, #0
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7fc fff4 	bl	800cb38 <unlock_fs>
 800fb50:	e001      	b.n	800fb56 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800fb52:	230f      	movs	r3, #15
 800fb54:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fb56:	7bfb      	ldrb	r3, [r7, #15]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d102      	bne.n	800fb62 <validate+0x7e>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	e000      	b.n	800fb64 <validate+0x80>
 800fb62:	2300      	movs	r3, #0
 800fb64:	683a      	ldr	r2, [r7, #0]
 800fb66:	6013      	str	r3, [r2, #0]
	return res;
 800fb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3710      	adds	r7, #16
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}
	...

0800fb74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b088      	sub	sp, #32
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	4613      	mov	r3, r2
 800fb80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fb86:	f107 0310 	add.w	r3, r7, #16
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7ff fba7 	bl	800f2de <get_ldnumber>
 800fb90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	da01      	bge.n	800fb9c <f_mount+0x28>
 800fb98:	230b      	movs	r3, #11
 800fb9a:	e048      	b.n	800fc2e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fb9c:	4a26      	ldr	r2, [pc, #152]	@ (800fc38 <f_mount+0xc4>)
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fba4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fba6:	69bb      	ldr	r3, [r7, #24]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d00f      	beq.n	800fbcc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fbac:	69b8      	ldr	r0, [r7, #24]
 800fbae:	f7fd f927 	bl	800ce00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800fbb2:	69bb      	ldr	r3, [r7, #24]
 800fbb4:	695b      	ldr	r3, [r3, #20]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f002 fa46 	bl	8012048 <ff_del_syncobj>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d101      	bne.n	800fbc6 <f_mount+0x52>
 800fbc2:	2302      	movs	r3, #2
 800fbc4:	e033      	b.n	800fc2e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d00f      	beq.n	800fbf2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	b2da      	uxtb	r2, r3
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	3314      	adds	r3, #20
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	4610      	mov	r0, r2
 800fbe4:	f002 fa10 	bl	8012008 <ff_cre_syncobj>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d101      	bne.n	800fbf2 <f_mount+0x7e>
 800fbee:	2302      	movs	r3, #2
 800fbf0:	e01d      	b.n	800fc2e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fbf2:	68fa      	ldr	r2, [r7, #12]
 800fbf4:	4910      	ldr	r1, [pc, #64]	@ (800fc38 <f_mount+0xc4>)
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d002      	beq.n	800fc08 <f_mount+0x94>
 800fc02:	79fb      	ldrb	r3, [r7, #7]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d001      	beq.n	800fc0c <f_mount+0x98>
 800fc08:	2300      	movs	r3, #0
 800fc0a:	e010      	b.n	800fc2e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fc0c:	f107 010c 	add.w	r1, r7, #12
 800fc10:	f107 0308 	add.w	r3, r7, #8
 800fc14:	2200      	movs	r2, #0
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff fc0a 	bl	800f430 <find_volume>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	7dfa      	ldrb	r2, [r7, #23]
 800fc24:	4611      	mov	r1, r2
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fc ff86 	bl	800cb38 <unlock_fs>
 800fc2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3720      	adds	r7, #32
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	200054a4 	.word	0x200054a4

0800fc3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fc3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fc40:	b0a8      	sub	sp, #160	@ 0xa0
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	61f8      	str	r0, [r7, #28]
 800fc46:	61b9      	str	r1, [r7, #24]
 800fc48:	4613      	mov	r3, r2
 800fc4a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d101      	bne.n	800fc56 <f_open+0x1a>
 800fc52:	2309      	movs	r3, #9
 800fc54:	e2d3      	b.n	80101fe <f_open+0x5c2>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fc56:	7dfb      	ldrb	r3, [r7, #23]
 800fc58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc5c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800fc5e:	7dfa      	ldrb	r2, [r7, #23]
 800fc60:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800fc64:	f107 0318 	add.w	r3, r7, #24
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7ff fbe1 	bl	800f430 <find_volume>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 800fc74:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f040 82b0 	bne.w	80101de <f_open+0x5a2>
		dj.obj.fs = fs;
 800fc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc80:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
 800fc82:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800fc86:	f002 fa0b 	bl	80120a0 <ff_memalloc>
 800fc8a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800fc8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d106      	bne.n	800fca4 <f_open+0x68>
 800fc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc98:	2111      	movs	r1, #17
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7fc ff4c 	bl	800cb38 <unlock_fs>
 800fca0:	2311      	movs	r3, #17
 800fca2:	e2ac      	b.n	80101fe <f_open+0x5c2>
 800fca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fcaa:	60da      	str	r2, [r3, #12]
 800fcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcae:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fcb2:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800fcb6:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800fcb8:	69ba      	ldr	r2, [r7, #24]
 800fcba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fcbe:	4611      	mov	r1, r2
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7ff fa63 	bl	800f18c <follow_path>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fccc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d118      	bne.n	800fd06 <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fcd4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800fcd8:	b25b      	sxtb	r3, r3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	da03      	bge.n	800fce6 <f_open+0xaa>
				res = FR_INVALID_NAME;
 800fcde:	2306      	movs	r3, #6
 800fce0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800fce4:	e00f      	b.n	800fd06 <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fce6:	7dfb      	ldrb	r3, [r7, #23]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	bf8c      	ite	hi
 800fcec:	2301      	movhi	r3, #1
 800fcee:	2300      	movls	r3, #0
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fc ff38 	bl	800cb70 <chk_lock>
 800fd00:	4603      	mov	r3, r0
 800fd02:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fd06:	7dfb      	ldrb	r3, [r7, #23]
 800fd08:	f003 031c 	and.w	r3, r3, #28
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f000 8115 	beq.w	800ff3c <f_open+0x300>
			if (res != FR_OK) {					/* No file, create new */
 800fd12:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d017      	beq.n	800fd4a <f_open+0x10e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fd1a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fd1e:	2b04      	cmp	r3, #4
 800fd20:	d10e      	bne.n	800fd40 <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fd22:	f7fc ff81 	bl	800cc28 <enq_lock>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d006      	beq.n	800fd3a <f_open+0xfe>
 800fd2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fe fecd 	bl	800ead0 <dir_register>
 800fd36:	4603      	mov	r3, r0
 800fd38:	e000      	b.n	800fd3c <f_open+0x100>
 800fd3a:	2312      	movs	r3, #18
 800fd3c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fd40:	7dfb      	ldrb	r3, [r7, #23]
 800fd42:	f043 0308 	orr.w	r3, r3, #8
 800fd46:	75fb      	strb	r3, [r7, #23]
 800fd48:	e011      	b.n	800fd6e <f_open+0x132>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fd4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fd4e:	f003 0311 	and.w	r3, r3, #17
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d003      	beq.n	800fd5e <f_open+0x122>
					res = FR_DENIED;
 800fd56:	2307      	movs	r3, #7
 800fd58:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800fd5c:	e007      	b.n	800fd6e <f_open+0x132>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fd5e:	7dfb      	ldrb	r3, [r7, #23]
 800fd60:	f003 0304 	and.w	r3, r3, #4
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <f_open+0x132>
 800fd68:	2308      	movs	r3, #8
 800fd6a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fd6e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	f040 80fe 	bne.w	800ff74 <f_open+0x338>
 800fd78:	7dfb      	ldrb	r3, [r7, #23]
 800fd7a:	f003 0308 	and.w	r3, r3, #8
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	f000 80f8 	beq.w	800ff74 <f_open+0x338>
				dw = GET_FATTIME();
 800fd84:	f7fc fbb8 	bl	800c4f8 <get_fattime>
 800fd88:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800fd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	2b04      	cmp	r3, #4
 800fd92:	f040 8084 	bne.w	800fe9e <f_open+0x262>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800fd96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800fd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	3334      	adds	r3, #52	@ 0x34
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7fc fc67 	bl	800c676 <ld_dword>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdb0:	691b      	ldr	r3, [r3, #16]
 800fdb2:	3338      	adds	r3, #56	@ 0x38
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7fc fc81 	bl	800c6bc <ld_qword>
 800fdba:	4602      	mov	r2, r0
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	69f9      	ldr	r1, [r7, #28]
 800fdc0:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc6:	691b      	ldr	r3, [r3, #16]
 800fdc8:	3321      	adds	r3, #33	@ 0x21
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	f003 0302 	and.w	r3, r3, #2
 800fdd0:	b2da      	uxtb	r2, r3
 800fdd2:	69fb      	ldr	r3, [r7, #28]
 800fdd4:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800fddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdde:	691b      	ldr	r3, [r3, #16]
 800fde0:	3308      	adds	r3, #8
 800fde2:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fc fd5e 	bl	800c8a8 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800fdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdee:	691b      	ldr	r3, [r3, #16]
 800fdf0:	3314      	adds	r3, #20
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdf8:	691b      	ldr	r3, [r3, #16]
 800fdfa:	330c      	adds	r3, #12
 800fdfc:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fc fd51 	bl	800c8a8 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800fe06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe08:	691b      	ldr	r3, [r3, #16]
 800fe0a:	3315      	adds	r3, #21
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800fe10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	3304      	adds	r3, #4
 800fe16:	2220      	movs	r2, #32
 800fe18:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800fe1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe1c:	691b      	ldr	r3, [r3, #16]
 800fe1e:	3334      	adds	r3, #52	@ 0x34
 800fe20:	2100      	movs	r1, #0
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fc fd40 	bl	800c8a8 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800fe28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2a:	691b      	ldr	r3, [r3, #16]
 800fe2c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800fe30:	f04f 0200 	mov.w	r2, #0
 800fe34:	f04f 0300 	mov.w	r3, #0
 800fe38:	4608      	mov	r0, r1
 800fe3a:	f7fc fd61 	bl	800c900 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800fe3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe40:	691b      	ldr	r3, [r3, #16]
 800fe42:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800fe46:	f04f 0200 	mov.w	r2, #0
 800fe4a:	f04f 0300 	mov.w	r3, #0
 800fe4e:	4608      	mov	r0, r1
 800fe50:	f7fc fd56 	bl	800c900 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800fe54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe56:	691b      	ldr	r3, [r3, #16]
 800fe58:	3321      	adds	r3, #33	@ 0x21
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800fe5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7fe fb80 	bl	800e568 <store_xdir>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800fe6e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d17e      	bne.n	800ff74 <f_open+0x338>
 800fe76:	69fb      	ldr	r3, [r7, #28]
 800fe78:	689b      	ldr	r3, [r3, #8]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d07a      	beq.n	800ff74 <f_open+0x338>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800fe7e:	69f8      	ldr	r0, [r7, #28]
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	689b      	ldr	r3, [r3, #8]
 800fe84:	2200      	movs	r2, #0
 800fe86:	4619      	mov	r1, r3
 800fe88:	f7fd fc2c 	bl	800d6e4 <remove_chain>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	689a      	ldr	r2, [r3, #8]
 800fe96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe98:	3a01      	subs	r2, #1
 800fe9a:	619a      	str	r2, [r3, #24]
 800fe9c:	e06a      	b.n	800ff74 <f_open+0x338>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fe9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fea0:	330e      	adds	r3, #14
 800fea2:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fc fcfe 	bl	800c8a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800feac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800feae:	3316      	adds	r3, #22
 800feb0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7fc fcf7 	bl	800c8a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800feba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800febc:	330b      	adds	r3, #11
 800febe:	2220      	movs	r2, #32
 800fec0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fec6:	4611      	mov	r1, r2
 800fec8:	4618      	mov	r0, r3
 800feca:	f7fd ffbb 	bl	800de44 <ld_clust>
 800fece:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800fed6:	2200      	movs	r2, #0
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fd ffd2 	bl	800de82 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fede:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fee0:	331c      	adds	r3, #28
 800fee2:	2100      	movs	r1, #0
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fc fcdf 	bl	800c8a8 <st_dword>
					fs->wflag = 1;
 800feea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feec:	2201      	movs	r2, #1
 800feee:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d03d      	beq.n	800ff74 <f_open+0x338>
						dw = fs->winsect;
 800fef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fefc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						res = remove_chain(&dj.obj, cl, 0);
 800ff00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff04:	2200      	movs	r2, #0
 800ff06:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7fd fbea 	bl	800d6e4 <remove_chain>
 800ff10:	4603      	mov	r3, r0
 800ff12:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 800ff16:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d12a      	bne.n	800ff74 <f_open+0x338>
							res = move_window(fs, dw);
 800ff1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff20:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7fc ffd3 	bl	800ced0 <move_window>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ff30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff32:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ff36:	3a01      	subs	r2, #1
 800ff38:	619a      	str	r2, [r3, #24]
 800ff3a:	e01b      	b.n	800ff74 <f_open+0x338>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ff3c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d117      	bne.n	800ff74 <f_open+0x338>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ff44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ff48:	f003 0310 	and.w	r3, r3, #16
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d003      	beq.n	800ff58 <f_open+0x31c>
					res = FR_NO_FILE;
 800ff50:	2304      	movs	r3, #4
 800ff52:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800ff56:	e00d      	b.n	800ff74 <f_open+0x338>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ff58:	7dfb      	ldrb	r3, [r7, #23]
 800ff5a:	f003 0302 	and.w	r3, r3, #2
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d008      	beq.n	800ff74 <f_open+0x338>
 800ff62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ff66:	f003 0301 	and.w	r3, r3, #1
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d002      	beq.n	800ff74 <f_open+0x338>
						res = FR_DENIED;
 800ff6e:	2307      	movs	r3, #7
 800ff70:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ff74:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d126      	bne.n	800ffca <f_open+0x38e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ff7c:	7dfb      	ldrb	r3, [r7, #23]
 800ff7e:	f003 0308 	and.w	r3, r3, #8
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d003      	beq.n	800ff8e <f_open+0x352>
				mode |= FA_MODIFIED;
 800ff86:	7dfb      	ldrb	r3, [r7, #23]
 800ff88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff8c:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ff8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff92:	69fb      	ldr	r3, [r7, #28]
 800ff94:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800ff96:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ff98:	69fb      	ldr	r3, [r7, #28]
 800ff9a:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ff9c:	7dfb      	ldrb	r3, [r7, #23]
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	bf8c      	ite	hi
 800ffa2:	2301      	movhi	r3, #1
 800ffa4:	2300      	movls	r3, #0
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ffae:	4611      	mov	r1, r2
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fc fe5b 	bl	800cc6c <inc_lock>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ffbc:	69fb      	ldr	r3, [r7, #28]
 800ffbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d102      	bne.n	800ffca <f_open+0x38e>
 800ffc4:	2302      	movs	r3, #2
 800ffc6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ffca:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	f040 8101 	bne.w	80101d6 <f_open+0x59a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ffd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	2b04      	cmp	r3, #4
 800ffda:	d12d      	bne.n	8010038 <f_open+0x3fc>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800ffdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffde:	69fb      	ldr	r3, [r7, #28]
 800ffe0:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800ffe2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ffec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fff0:	431a      	orrs	r2, r3
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800fff6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800fffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffe:	691b      	ldr	r3, [r3, #16]
 8010000:	3334      	adds	r3, #52	@ 0x34
 8010002:	4618      	mov	r0, r3
 8010004:	f7fc fb37 	bl	800c676 <ld_dword>
 8010008:	4602      	mov	r2, r0
 801000a:	69fb      	ldr	r3, [r7, #28]
 801000c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801000e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010010:	691b      	ldr	r3, [r3, #16]
 8010012:	3338      	adds	r3, #56	@ 0x38
 8010014:	4618      	mov	r0, r3
 8010016:	f7fc fb51 	bl	800c6bc <ld_qword>
 801001a:	4602      	mov	r2, r0
 801001c:	460b      	mov	r3, r1
 801001e:	69f9      	ldr	r1, [r7, #28]
 8010020:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010026:	691b      	ldr	r3, [r3, #16]
 8010028:	3321      	adds	r3, #33	@ 0x21
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	f003 0302 	and.w	r3, r3, #2
 8010030:	b2da      	uxtb	r2, r3
 8010032:	69fb      	ldr	r3, [r7, #28]
 8010034:	71da      	strb	r2, [r3, #7]
 8010036:	e016      	b.n	8010066 <f_open+0x42a>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801003c:	4611      	mov	r1, r2
 801003e:	4618      	mov	r0, r3
 8010040:	f7fd ff00 	bl	800de44 <ld_clust>
 8010044:	4602      	mov	r2, r0
 8010046:	69fb      	ldr	r3, [r7, #28]
 8010048:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801004a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801004c:	331c      	adds	r3, #28
 801004e:	4618      	mov	r0, r3
 8010050:	f7fc fb11 	bl	800c676 <ld_dword>
 8010054:	4603      	mov	r3, r0
 8010056:	2200      	movs	r2, #0
 8010058:	60bb      	str	r3, [r7, #8]
 801005a:	60fa      	str	r2, [r7, #12]
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010062:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010066:	69fb      	ldr	r3, [r7, #28]
 8010068:	2200      	movs	r2, #0
 801006a:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801006c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010074:	88da      	ldrh	r2, [r3, #6]
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	7dfa      	ldrb	r2, [r7, #23]
 801007e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 8010082:	69fb      	ldr	r3, [r7, #28]
 8010084:	2200      	movs	r2, #0
 8010086:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 801008a:	69fb      	ldr	r3, [r7, #28]
 801008c:	2200      	movs	r2, #0
 801008e:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010090:	69f9      	ldr	r1, [r7, #28]
 8010092:	f04f 0200 	mov.w	r2, #0
 8010096:	f04f 0300 	mov.w	r3, #0
 801009a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801009e:	69fb      	ldr	r3, [r7, #28]
 80100a0:	3354      	adds	r3, #84	@ 0x54
 80100a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80100a6:	2100      	movs	r1, #0
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7fc fcd2 	bl	800ca52 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80100ae:	7dfb      	ldrb	r3, [r7, #23]
 80100b0:	f003 0320 	and.w	r3, r3, #32
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f000 808e 	beq.w	80101d6 <f_open+0x59a>
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80100c0:	4313      	orrs	r3, r2
 80100c2:	f000 8088 	beq.w	80101d6 <f_open+0x59a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80100cc:	69f9      	ldr	r1, [r7, #28]
 80100ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80100d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d4:	895b      	ldrh	r3, [r3, #10]
 80100d6:	025b      	lsls	r3, r3, #9
 80100d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	689b      	ldr	r3, [r3, #8]
 80100e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80100e4:	69fb      	ldr	r3, [r7, #28]
 80100e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80100ea:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 80100ee:	e027      	b.n	8010140 <f_open+0x504>
					clst = get_fat(&fp->obj, clst);
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7fc ffa6 	bl	800d048 <get_fat>
 80100fc:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 8010100:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010104:	2b01      	cmp	r3, #1
 8010106:	d802      	bhi.n	801010e <f_open+0x4d2>
 8010108:	2302      	movs	r3, #2
 801010a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801010e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010116:	d102      	bne.n	801011e <f_open+0x4e2>
 8010118:	2301      	movs	r3, #1
 801011a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801011e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010122:	2200      	movs	r2, #0
 8010124:	469a      	mov	sl, r3
 8010126:	4693      	mov	fp, r2
 8010128:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 801012c:	ebb2 010a 	subs.w	r1, r2, sl
 8010130:	6039      	str	r1, [r7, #0]
 8010132:	eb63 030b 	sbc.w	r3, r3, fp
 8010136:	607b      	str	r3, [r7, #4]
 8010138:	e9d7 2300 	ldrd	r2, r3, [r7]
 801013c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 8010140:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8010144:	2b00      	cmp	r3, #0
 8010146:	d10a      	bne.n	801015e <f_open+0x522>
 8010148:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801014c:	2200      	movs	r2, #0
 801014e:	4698      	mov	r8, r3
 8010150:	4691      	mov	r9, r2
 8010152:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8010156:	4590      	cmp	r8, r2
 8010158:	eb79 0303 	sbcs.w	r3, r9, r3
 801015c:	d3c8      	bcc.n	80100f0 <f_open+0x4b4>
				}
				fp->clust = clst;
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010164:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010166:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801016a:	2b00      	cmp	r3, #0
 801016c:	d133      	bne.n	80101d6 <f_open+0x59a>
 801016e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8010172:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8010176:	2500      	movs	r5, #0
 8010178:	ea54 0305 	orrs.w	r3, r4, r5
 801017c:	d02b      	beq.n	80101d6 <f_open+0x59a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801017e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010180:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8010184:	4618      	mov	r0, r3
 8010186:	f7fc ff3f 	bl	800d008 <clust2sect>
 801018a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801018c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801018e:	2b00      	cmp	r3, #0
 8010190:	d103      	bne.n	801019a <f_open+0x55e>
						res = FR_INT_ERR;
 8010192:	2302      	movs	r3, #2
 8010194:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8010198:	e01d      	b.n	80101d6 <f_open+0x59a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801019a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 801019e:	f04f 0200 	mov.w	r2, #0
 80101a2:	f04f 0300 	mov.w	r3, #0
 80101a6:	0a42      	lsrs	r2, r0, #9
 80101a8:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80101ac:	0a4b      	lsrs	r3, r1, #9
 80101ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80101b0:	441a      	add	r2, r3
 80101b2:	69fb      	ldr	r3, [r7, #28]
 80101b4:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80101b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b8:	7858      	ldrb	r0, [r3, #1]
 80101ba:	69fb      	ldr	r3, [r7, #28]
 80101bc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80101c4:	2301      	movs	r3, #1
 80101c6:	f7fc f9df 	bl	800c588 <disk_read>
 80101ca:	4603      	mov	r3, r0
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d002      	beq.n	80101d6 <f_open+0x59a>
 80101d0:	2301      	movs	r3, #1
 80101d2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
#endif
		}

		FREE_NAMBUF();
 80101d6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80101da:	f001 ff6d 	bl	80120b8 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80101de:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d002      	beq.n	80101ec <f_open+0x5b0>
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	2200      	movs	r2, #0
 80101ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80101ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ee:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80101f2:	4611      	mov	r1, r2
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fc fc9f 	bl	800cb38 <unlock_fs>
 80101fa:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 80101fe:	4618      	mov	r0, r3
 8010200:	37a0      	adds	r7, #160	@ 0xa0
 8010202:	46bd      	mov	sp, r7
 8010204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010208 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801020c:	b095      	sub	sp, #84	@ 0x54
 801020e:	af00      	add	r7, sp, #0
 8010210:	61f8      	str	r0, [r7, #28]
 8010212:	61b9      	str	r1, [r7, #24]
 8010214:	617a      	str	r2, [r7, #20]
 8010216:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	2200      	movs	r2, #0
 8010220:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8010228:	4611      	mov	r1, r2
 801022a:	4618      	mov	r0, r3
 801022c:	f7ff fc5a 	bl	800fae4 <validate>
 8010230:	4603      	mov	r3, r0
 8010232:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010236:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801023a:	2b00      	cmp	r3, #0
 801023c:	d108      	bne.n	8010250 <f_read+0x48>
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010244:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010248:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801024c:	2b00      	cmp	r3, #0
 801024e:	d009      	beq.n	8010264 <f_read+0x5c>
 8010250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010252:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8010256:	4611      	mov	r1, r2
 8010258:	4618      	mov	r0, r3
 801025a:	f7fc fc6d 	bl	800cb38 <unlock_fs>
 801025e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010262:	e173      	b.n	801054c <f_read+0x344>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801026a:	f003 0301 	and.w	r3, r3, #1
 801026e:	2b00      	cmp	r3, #0
 8010270:	d106      	bne.n	8010280 <f_read+0x78>
 8010272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010274:	2107      	movs	r1, #7
 8010276:	4618      	mov	r0, r3
 8010278:	f7fc fc5e 	bl	800cb38 <unlock_fs>
 801027c:	2307      	movs	r3, #7
 801027e:	e165      	b.n	801054c <f_read+0x344>
	remain = fp->obj.objsize - fp->fptr;
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010286:	69fb      	ldr	r3, [r7, #28]
 8010288:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801028c:	1a86      	subs	r6, r0, r2
 801028e:	603e      	str	r6, [r7, #0]
 8010290:	eb61 0303 	sbc.w	r3, r1, r3
 8010294:	607b      	str	r3, [r7, #4]
 8010296:	e9d7 2300 	ldrd	r2, r3, [r7]
 801029a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	2200      	movs	r2, #0
 80102a2:	469a      	mov	sl, r3
 80102a4:	4693      	mov	fp, r2
 80102a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80102aa:	4552      	cmp	r2, sl
 80102ac:	eb73 030b 	sbcs.w	r3, r3, fp
 80102b0:	f080 8142 	bcs.w	8010538 <f_read+0x330>
 80102b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102b6:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 80102b8:	e13e      	b.n	8010538 <f_read+0x330>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80102c0:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80102c4:	2500      	movs	r5, #0
 80102c6:	ea54 0305 	orrs.w	r3, r4, r5
 80102ca:	f040 80f7 	bne.w	80104bc <f_read+0x2b4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80102d4:	f04f 0200 	mov.w	r2, #0
 80102d8:	f04f 0300 	mov.w	r3, #0
 80102dc:	0a42      	lsrs	r2, r0, #9
 80102de:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80102e2:	0a4b      	lsrs	r3, r1, #9
 80102e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e6:	895b      	ldrh	r3, [r3, #10]
 80102e8:	3b01      	subs	r3, #1
 80102ea:	4013      	ands	r3, r2
 80102ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 80102ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d13c      	bne.n	801036e <f_read+0x166>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80102fa:	4313      	orrs	r3, r2
 80102fc:	d103      	bne.n	8010306 <f_read+0xfe>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80102fe:	69fb      	ldr	r3, [r7, #28]
 8010300:	689b      	ldr	r3, [r3, #8]
 8010302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010304:	e013      	b.n	801032e <f_read+0x126>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801030a:	2b00      	cmp	r3, #0
 801030c:	d007      	beq.n	801031e <f_read+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010314:	69f8      	ldr	r0, [r7, #28]
 8010316:	f7fd fb9a 	bl	800da4e <clmt_clust>
 801031a:	64b8      	str	r0, [r7, #72]	@ 0x48
 801031c:	e007      	b.n	801032e <f_read+0x126>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801031e:	69fa      	ldr	r2, [r7, #28]
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010324:	4619      	mov	r1, r3
 8010326:	4610      	mov	r0, r2
 8010328:	f7fc fe8e 	bl	800d048 <get_fat>
 801032c:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801032e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010330:	2b01      	cmp	r3, #1
 8010332:	d80a      	bhi.n	801034a <f_read+0x142>
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	2202      	movs	r2, #2
 8010338:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801033c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801033e:	2102      	movs	r1, #2
 8010340:	4618      	mov	r0, r3
 8010342:	f7fc fbf9 	bl	800cb38 <unlock_fs>
 8010346:	2302      	movs	r3, #2
 8010348:	e100      	b.n	801054c <f_read+0x344>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801034a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801034c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010350:	d10a      	bne.n	8010368 <f_read+0x160>
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	2201      	movs	r2, #1
 8010356:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801035a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801035c:	2101      	movs	r1, #1
 801035e:	4618      	mov	r0, r3
 8010360:	f7fc fbea 	bl	800cb38 <unlock_fs>
 8010364:	2301      	movs	r3, #1
 8010366:	e0f1      	b.n	801054c <f_read+0x344>
				fp->clust = clst;				/* Update current cluster */
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801036c:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801036e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010374:	4619      	mov	r1, r3
 8010376:	4610      	mov	r0, r2
 8010378:	f7fc fe46 	bl	800d008 <clust2sect>
 801037c:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 801037e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010380:	2b00      	cmp	r3, #0
 8010382:	d10a      	bne.n	801039a <f_read+0x192>
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	2202      	movs	r2, #2
 8010388:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801038c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801038e:	2102      	movs	r1, #2
 8010390:	4618      	mov	r0, r3
 8010392:	f7fc fbd1 	bl	800cb38 <unlock_fs>
 8010396:	2302      	movs	r3, #2
 8010398:	e0d8      	b.n	801054c <f_read+0x344>
			sect += csect;
 801039a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801039c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039e:	4413      	add	r3, r2
 80103a0:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	0a5b      	lsrs	r3, r3, #9
 80103a6:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 80103a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d040      	beq.n	8010430 <f_read+0x228>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80103ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80103b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103b2:	4413      	add	r3, r2
 80103b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80103b6:	8952      	ldrh	r2, [r2, #10]
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d905      	bls.n	80103c8 <f_read+0x1c0>
					cc = fs->csize - csect;
 80103bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103be:	895b      	ldrh	r3, [r3, #10]
 80103c0:	461a      	mov	r2, r3
 80103c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103c4:	1ad3      	subs	r3, r2, r3
 80103c6:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80103c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ca:	7858      	ldrb	r0, [r3, #1]
 80103cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80103d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80103d2:	f7fc f8d9 	bl	800c588 <disk_read>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d00a      	beq.n	80103f2 <f_read+0x1ea>
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	2201      	movs	r2, #1
 80103e0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80103e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e6:	2101      	movs	r1, #1
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fc fba5 	bl	800cb38 <unlock_fs>
 80103ee:	2301      	movs	r3, #1
 80103f0:	e0ac      	b.n	801054c <f_read+0x344>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80103f8:	b25b      	sxtb	r3, r3
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	da14      	bge.n	8010428 <f_read+0x220>
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010404:	1ad3      	subs	r3, r2, r3
 8010406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010408:	429a      	cmp	r2, r3
 801040a:	d90d      	bls.n	8010428 <f_read+0x220>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801040c:	69fb      	ldr	r3, [r7, #28]
 801040e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	025b      	lsls	r3, r3, #9
 8010416:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010418:	18d0      	adds	r0, r2, r3
 801041a:	69fb      	ldr	r3, [r7, #28]
 801041c:	3354      	adds	r3, #84	@ 0x54
 801041e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010422:	4619      	mov	r1, r3
 8010424:	f7fc faf4 	bl	800ca10 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801042a:	025b      	lsls	r3, r3, #9
 801042c:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 801042e:	e063      	b.n	80104f8 <f_read+0x2f0>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010430:	69fb      	ldr	r3, [r7, #28]
 8010432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010436:	429a      	cmp	r2, r3
 8010438:	d03d      	beq.n	80104b6 <f_read+0x2ae>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010440:	b25b      	sxtb	r3, r3
 8010442:	2b00      	cmp	r3, #0
 8010444:	da20      	bge.n	8010488 <f_read+0x280>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010448:	7858      	ldrb	r0, [r3, #1]
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010454:	2301      	movs	r3, #1
 8010456:	f7fc f8b7 	bl	800c5c8 <disk_write>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d00a      	beq.n	8010476 <f_read+0x26e>
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	2201      	movs	r2, #1
 8010464:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8010468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801046a:	2101      	movs	r1, #1
 801046c:	4618      	mov	r0, r3
 801046e:	f7fc fb63 	bl	800cb38 <unlock_fs>
 8010472:	2301      	movs	r3, #1
 8010474:	e06a      	b.n	801054c <f_read+0x344>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801047c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010480:	b2da      	uxtb	r2, r3
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801048a:	7858      	ldrb	r0, [r3, #1]
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8010492:	2301      	movs	r3, #1
 8010494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010496:	f7fc f877 	bl	800c588 <disk_read>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d00a      	beq.n	80104b6 <f_read+0x2ae>
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	2201      	movs	r2, #1
 80104a4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80104a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104aa:	2101      	movs	r1, #1
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7fc fb43 	bl	800cb38 <unlock_fs>
 80104b2:	2301      	movs	r3, #1
 80104b4:	e04a      	b.n	801054c <f_read+0x344>
			}
#endif
			fp->sect = sect;
 80104b6:	69fb      	ldr	r3, [r7, #28]
 80104b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80104ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80104c2:	4613      	mov	r3, r2
 80104c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104c8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80104cc:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80104ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d901      	bls.n	80104da <f_read+0x2d2>
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	647b      	str	r3, [r7, #68]	@ 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80104e0:	69fb      	ldr	r3, [r7, #28]
 80104e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80104e6:	4613      	mov	r3, r2
 80104e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104ec:	440b      	add	r3, r1
 80104ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104f0:	4619      	mov	r1, r3
 80104f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80104f4:	f7fc fa8c 	bl	800ca10 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80104f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80104fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104fc:	4413      	add	r3, r2
 80104fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010506:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010508:	2000      	movs	r0, #0
 801050a:	4688      	mov	r8, r1
 801050c:	4681      	mov	r9, r0
 801050e:	eb12 0108 	adds.w	r1, r2, r8
 8010512:	60b9      	str	r1, [r7, #8]
 8010514:	eb43 0309 	adc.w	r3, r3, r9
 8010518:	60fb      	str	r3, [r7, #12]
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010520:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	681a      	ldr	r2, [r3, #0]
 8010528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801052a:	441a      	add	r2, r3
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	601a      	str	r2, [r3, #0]
 8010530:	697a      	ldr	r2, [r7, #20]
 8010532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010534:	1ad3      	subs	r3, r2, r3
 8010536:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	2b00      	cmp	r3, #0
 801053c:	f47f aebd 	bne.w	80102ba <f_read+0xb2>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010542:	2100      	movs	r1, #0
 8010544:	4618      	mov	r0, r3
 8010546:	f7fc faf7 	bl	800cb38 <unlock_fs>
 801054a:	2300      	movs	r3, #0
}
 801054c:	4618      	mov	r0, r3
 801054e:	3754      	adds	r7, #84	@ 0x54
 8010550:	46bd      	mov	sp, r7
 8010552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010556 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801055a:	b08d      	sub	sp, #52	@ 0x34
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
 8010564:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	2200      	movs	r2, #0
 801056e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f107 0210 	add.w	r2, r7, #16
 8010576:	4611      	mov	r1, r2
 8010578:	4618      	mov	r0, r3
 801057a:	f7ff fab3 	bl	800fae4 <validate>
 801057e:	4603      	mov	r3, r0
 8010580:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010584:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010588:	2b00      	cmp	r3, #0
 801058a:	d108      	bne.n	801059e <f_write+0x48>
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010592:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010596:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801059a:	2b00      	cmp	r3, #0
 801059c:	d009      	beq.n	80105b2 <f_write+0x5c>
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80105a4:	4611      	mov	r1, r2
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fc fac6 	bl	800cb38 <unlock_fs>
 80105ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80105b0:	e1af      	b.n	8010912 <f_write+0x3bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80105b8:	f003 0302 	and.w	r3, r3, #2
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d106      	bne.n	80105ce <f_write+0x78>
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	2107      	movs	r1, #7
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7fc fab7 	bl	800cb38 <unlock_fs>
 80105ca:	2307      	movs	r3, #7
 80105cc:	e1a1      	b.n	8010912 <f_write+0x3bc>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	2b04      	cmp	r3, #4
 80105d4:	f000 8188 	beq.w	80108e8 <f_write+0x392>
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	18d1      	adds	r1, r2, r3
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80105e8:	4613      	mov	r3, r2
 80105ea:	4299      	cmp	r1, r3
 80105ec:	f080 817c 	bcs.w	80108e8 <f_write+0x392>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80105f6:	4613      	mov	r3, r2
 80105f8:	43db      	mvns	r3, r3
 80105fa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80105fc:	e174      	b.n	80108e8 <f_write+0x392>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010604:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8010608:	2500      	movs	r5, #0
 801060a:	ea54 0305 	orrs.w	r3, r4, r5
 801060e:	f040 8119 	bne.w	8010844 <f_write+0x2ee>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8010618:	f04f 0200 	mov.w	r2, #0
 801061c:	f04f 0300 	mov.w	r3, #0
 8010620:	0a42      	lsrs	r2, r0, #9
 8010622:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010626:	0a4b      	lsrs	r3, r1, #9
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	895b      	ldrh	r3, [r3, #10]
 801062c:	3b01      	subs	r3, #1
 801062e:	4013      	ands	r3, r2
 8010630:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d150      	bne.n	80106da <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801063e:	4313      	orrs	r3, r2
 8010640:	d10c      	bne.n	801065c <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	689b      	ldr	r3, [r3, #8]
 8010646:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801064a:	2b00      	cmp	r3, #0
 801064c:	d11a      	bne.n	8010684 <f_write+0x12e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2100      	movs	r1, #0
 8010652:	4618      	mov	r0, r3
 8010654:	f7fd f8fa 	bl	800d84c <create_chain>
 8010658:	62b8      	str	r0, [r7, #40]	@ 0x28
 801065a:	e013      	b.n	8010684 <f_write+0x12e>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010660:	2b00      	cmp	r3, #0
 8010662:	d007      	beq.n	8010674 <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f7fd f9ef 	bl	800da4e <clmt_clust>
 8010670:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010672:	e007      	b.n	8010684 <f_write+0x12e>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010674:	68fa      	ldr	r2, [r7, #12]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801067a:	4619      	mov	r1, r3
 801067c:	4610      	mov	r0, r2
 801067e:	f7fd f8e5 	bl	800d84c <create_chain>
 8010682:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010686:	2b00      	cmp	r3, #0
 8010688:	f000 8133 	beq.w	80108f2 <f_write+0x39c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801068c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801068e:	2b01      	cmp	r3, #1
 8010690:	d10a      	bne.n	80106a8 <f_write+0x152>
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2202      	movs	r2, #2
 8010696:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	2102      	movs	r1, #2
 801069e:	4618      	mov	r0, r3
 80106a0:	f7fc fa4a 	bl	800cb38 <unlock_fs>
 80106a4:	2302      	movs	r3, #2
 80106a6:	e134      	b.n	8010912 <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80106a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ae:	d10a      	bne.n	80106c6 <f_write+0x170>
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2201      	movs	r2, #1
 80106b4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	2101      	movs	r1, #1
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fc fa3b 	bl	800cb38 <unlock_fs>
 80106c2:	2301      	movs	r3, #1
 80106c4:	e125      	b.n	8010912 <f_write+0x3bc>
				fp->clust = clst;			/* Update current cluster */
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106ca:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	689b      	ldr	r3, [r3, #8]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d102      	bne.n	80106da <f_write+0x184>
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106d8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80106e0:	b25b      	sxtb	r3, r3
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	da20      	bge.n	8010728 <f_write+0x1d2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	7858      	ldrb	r0, [r3, #1]
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80106f4:	2301      	movs	r3, #1
 80106f6:	f7fb ff67 	bl	800c5c8 <disk_write>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00a      	beq.n	8010716 <f_write+0x1c0>
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2201      	movs	r2, #1
 8010704:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	2101      	movs	r1, #1
 801070c:	4618      	mov	r0, r3
 801070e:	f7fc fa13 	bl	800cb38 <unlock_fs>
 8010712:	2301      	movs	r3, #1
 8010714:	e0fd      	b.n	8010912 <f_write+0x3bc>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801071c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010720:	b2da      	uxtb	r2, r3
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010728:	693a      	ldr	r2, [r7, #16]
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801072e:	4619      	mov	r1, r3
 8010730:	4610      	mov	r0, r2
 8010732:	f7fc fc69 	bl	800d008 <clust2sect>
 8010736:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d10a      	bne.n	8010754 <f_write+0x1fe>
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2202      	movs	r2, #2
 8010742:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	2102      	movs	r1, #2
 801074a:	4618      	mov	r0, r3
 801074c:	f7fc f9f4 	bl	800cb38 <unlock_fs>
 8010750:	2302      	movs	r3, #2
 8010752:	e0de      	b.n	8010912 <f_write+0x3bc>
			sect += csect;
 8010754:	697a      	ldr	r2, [r7, #20]
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	4413      	add	r3, r2
 801075a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	0a5b      	lsrs	r3, r3, #9
 8010760:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d044      	beq.n	80107f2 <f_write+0x29c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010768:	69ba      	ldr	r2, [r7, #24]
 801076a:	6a3b      	ldr	r3, [r7, #32]
 801076c:	4413      	add	r3, r2
 801076e:	693a      	ldr	r2, [r7, #16]
 8010770:	8952      	ldrh	r2, [r2, #10]
 8010772:	4293      	cmp	r3, r2
 8010774:	d905      	bls.n	8010782 <f_write+0x22c>
					cc = fs->csize - csect;
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	895b      	ldrh	r3, [r3, #10]
 801077a:	461a      	mov	r2, r3
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	1ad3      	subs	r3, r2, r3
 8010780:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	7858      	ldrb	r0, [r3, #1]
 8010786:	6a3b      	ldr	r3, [r7, #32]
 8010788:	697a      	ldr	r2, [r7, #20]
 801078a:	69f9      	ldr	r1, [r7, #28]
 801078c:	f7fb ff1c 	bl	800c5c8 <disk_write>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d00a      	beq.n	80107ac <f_write+0x256>
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2201      	movs	r2, #1
 801079a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	2101      	movs	r1, #1
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fc f9c8 	bl	800cb38 <unlock_fs>
 80107a8:	2301      	movs	r3, #1
 80107aa:	e0b2      	b.n	8010912 <f_write+0x3bc>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	6a3a      	ldr	r2, [r7, #32]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d917      	bls.n	80107ea <f_write+0x294>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	1ad3      	subs	r3, r2, r3
 80107c8:	025b      	lsls	r3, r3, #9
 80107ca:	69fa      	ldr	r2, [r7, #28]
 80107cc:	4413      	add	r3, r2
 80107ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80107d2:	4619      	mov	r1, r3
 80107d4:	f7fc f91c 	bl	800ca10 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80107de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80107e2:	b2da      	uxtb	r2, r3
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80107ea:	6a3b      	ldr	r3, [r7, #32]
 80107ec:	025b      	lsls	r3, r3, #9
 80107ee:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80107f0:	e04f      	b.n	8010892 <f_write+0x33c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107f6:	697a      	ldr	r2, [r7, #20]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d020      	beq.n	801083e <f_write+0x2e8>
				fp->fptr < fp->obj.objsize &&
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010808:	4290      	cmp	r0, r2
 801080a:	eb71 0303 	sbcs.w	r3, r1, r3
 801080e:	d216      	bcs.n	801083e <f_write+0x2e8>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	7858      	ldrb	r0, [r3, #1]
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 801081a:	2301      	movs	r3, #1
 801081c:	697a      	ldr	r2, [r7, #20]
 801081e:	f7fb feb3 	bl	800c588 <disk_read>
 8010822:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010824:	2b00      	cmp	r3, #0
 8010826:	d00a      	beq.n	801083e <f_write+0x2e8>
					ABORT(fs, FR_DISK_ERR);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2201      	movs	r2, #1
 801082c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	2101      	movs	r1, #1
 8010834:	4618      	mov	r0, r3
 8010836:	f7fc f97f 	bl	800cb38 <unlock_fs>
 801083a:	2301      	movs	r3, #1
 801083c:	e069      	b.n	8010912 <f_write+0x3bc>
			}
#endif
			fp->sect = sect;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	697a      	ldr	r2, [r7, #20]
 8010842:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801084a:	4613      	mov	r3, r2
 801084c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010850:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010854:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	429a      	cmp	r2, r3
 801085c:	d901      	bls.n	8010862 <f_write+0x30c>
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801086e:	4613      	mov	r3, r2
 8010870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010874:	440b      	add	r3, r1
 8010876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010878:	69f9      	ldr	r1, [r7, #28]
 801087a:	4618      	mov	r0, r3
 801087c:	f7fc f8c8 	bl	800ca10 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010886:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801088a:	b2da      	uxtb	r2, r3
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010892:	69fa      	ldr	r2, [r7, #28]
 8010894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010896:	4413      	add	r3, r2
 8010898:	61fb      	str	r3, [r7, #28]
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80108a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80108a2:	2000      	movs	r0, #0
 80108a4:	4688      	mov	r8, r1
 80108a6:	4681      	mov	r9, r0
 80108a8:	eb12 0a08 	adds.w	sl, r2, r8
 80108ac:	eb43 0b09 	adc.w	fp, r3, r9
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80108bc:	68f9      	ldr	r1, [r7, #12]
 80108be:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 80108c2:	4282      	cmp	r2, r0
 80108c4:	eb73 0601 	sbcs.w	r6, r3, r1
 80108c8:	d201      	bcs.n	80108ce <f_write+0x378>
 80108ca:	4602      	mov	r2, r0
 80108cc:	460b      	mov	r3, r1
 80108ce:	68f9      	ldr	r1, [r7, #12]
 80108d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108da:	441a      	add	r2, r3
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	601a      	str	r2, [r3, #0]
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108e4:	1ad3      	subs	r3, r2, r3
 80108e6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f47f ae87 	bne.w	80105fe <f_write+0xa8>
 80108f0:	e000      	b.n	80108f4 <f_write+0x39e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80108f2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80108fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108fe:	b2da      	uxtb	r2, r3
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	2100      	movs	r1, #0
 801090a:	4618      	mov	r0, r3
 801090c:	f7fc f914 	bl	800cb38 <unlock_fs>
 8010910:	2300      	movs	r3, #0
}
 8010912:	4618      	mov	r0, r3
 8010914:	3734      	adds	r7, #52	@ 0x34
 8010916:	46bd      	mov	sp, r7
 8010918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801091c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b09c      	sub	sp, #112	@ 0x70
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801092a:	4611      	mov	r1, r2
 801092c:	4618      	mov	r0, r3
 801092e:	f7ff f8d9 	bl	800fae4 <validate>
 8010932:	4603      	mov	r3, r0
 8010934:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 8010938:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801093c:	2b00      	cmp	r3, #0
 801093e:	f040 8123 	bne.w	8010b88 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801094c:	2b00      	cmp	r3, #0
 801094e:	f000 811b 	beq.w	8010b88 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010958:	b25b      	sxtb	r3, r3
 801095a:	2b00      	cmp	r3, #0
 801095c:	da1c      	bge.n	8010998 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801095e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010960:	7858      	ldrb	r0, [r3, #1]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801096c:	2301      	movs	r3, #1
 801096e:	f7fb fe2b 	bl	800c5c8 <disk_write>
 8010972:	4603      	mov	r3, r0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d006      	beq.n	8010986 <f_sync+0x6a>
 8010978:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801097a:	2101      	movs	r1, #1
 801097c:	4618      	mov	r0, r3
 801097e:	f7fc f8db 	bl	800cb38 <unlock_fs>
 8010982:	2301      	movs	r3, #1
 8010984:	e109      	b.n	8010b9a <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801098c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010990:	b2da      	uxtb	r2, r3
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010998:	f7fb fdae 	bl	800c4f8 <get_fattime>
 801099c:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801099e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	2b04      	cmp	r3, #4
 80109a4:	f040 80a5 	bne.w	8010af2 <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7fc fe3a 	bl	800d624 <fill_first_frag>
 80109b0:	4603      	mov	r3, r0
 80109b2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 80109b6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d10a      	bne.n	80109d4 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109c4:	f04f 32ff 	mov.w	r2, #4294967295
 80109c8:	4619      	mov	r1, r3
 80109ca:	f7fc fe5a 	bl	800d682 <fill_last_frag>
 80109ce:	4603      	mov	r3, r0
 80109d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 80109d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80109d8:	2b00      	cmp	r3, #0
 80109da:	f040 80d5 	bne.w	8010b88 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 80109de:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 80109e2:	f001 fb5d 	bl	80120a0 <ff_memalloc>
 80109e6:	6638      	str	r0, [r7, #96]	@ 0x60
 80109e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d106      	bne.n	80109fc <f_sync+0xe0>
 80109ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109f0:	2111      	movs	r1, #17
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fc f8a0 	bl	800cb38 <unlock_fs>
 80109f8:	2311      	movs	r3, #17
 80109fa:	e0ce      	b.n	8010b9a <f_sync+0x27e>
 80109fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010a00:	60da      	str	r2, [r3, #12]
 8010a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010a06:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8010a0a:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	f107 0308 	add.w	r3, r7, #8
 8010a12:	4611      	mov	r1, r2
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7fd fd71 	bl	800e4fc <load_obj_dir>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 8010a20:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d160      	bne.n	8010aea <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8010a28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a2a:	691b      	ldr	r3, [r3, #16]
 8010a2c:	3304      	adds	r3, #4
 8010a2e:	781a      	ldrb	r2, [r3, #0]
 8010a30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a32:	691b      	ldr	r3, [r3, #16]
 8010a34:	3304      	adds	r3, #4
 8010a36:	f042 0220 	orr.w	r2, r2, #32
 8010a3a:	b2d2      	uxtb	r2, r2
 8010a3c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	79da      	ldrb	r2, [r3, #7]
 8010a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a44:	691b      	ldr	r3, [r3, #16]
 8010a46:	3321      	adds	r3, #33	@ 0x21
 8010a48:	f042 0201 	orr.w	r2, r2, #1
 8010a4c:	b2d2      	uxtb	r2, r2
 8010a4e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8010a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a52:	691b      	ldr	r3, [r3, #16]
 8010a54:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	689b      	ldr	r3, [r3, #8]
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	4610      	mov	r0, r2
 8010a60:	f7fb ff22 	bl	800c8a8 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8010a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a66:	691b      	ldr	r3, [r3, #16]
 8010a68:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010a72:	4608      	mov	r0, r1
 8010a74:	f7fb ff44 	bl	800c900 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8010a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a7a:	691b      	ldr	r3, [r3, #16]
 8010a7c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010a86:	4608      	mov	r0, r1
 8010a88:	f7fb ff3a 	bl	800c900 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8010a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a8e:	691b      	ldr	r3, [r3, #16]
 8010a90:	330c      	adds	r3, #12
 8010a92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7fb ff07 	bl	800c8a8 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8010a9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a9c:	691b      	ldr	r3, [r3, #16]
 8010a9e:	3315      	adds	r3, #21
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8010aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010aa6:	691b      	ldr	r3, [r3, #16]
 8010aa8:	3310      	adds	r3, #16
 8010aaa:	2100      	movs	r1, #0
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fb fefb 	bl	800c8a8 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8010ab2:	f107 0308 	add.w	r3, r7, #8
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7fd fd56 	bl	800e568 <store_xdir>
 8010abc:	4603      	mov	r3, r0
 8010abe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 8010ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d10f      	bne.n	8010aea <f_sync+0x1ce>
							res = sync_fs(fs);
 8010aca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7fc fa2d 	bl	800cf2c <sync_fs>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ae2:	b2da      	uxtb	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 8010aea:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8010aec:	f001 fae4 	bl	80120b8 <ff_memfree>
 8010af0:	e04a      	b.n	8010b88 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010af2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010af8:	4619      	mov	r1, r3
 8010afa:	4610      	mov	r0, r2
 8010afc:	f7fc f9e8 	bl	800ced0 <move_window>
 8010b00:	4603      	mov	r3, r0
 8010b02:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 8010b06:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d13c      	bne.n	8010b88 <f_sync+0x26c>
					dir = fp->dir_ptr;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b12:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b16:	330b      	adds	r3, #11
 8010b18:	781a      	ldrb	r2, [r3, #0]
 8010b1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b1c:	330b      	adds	r3, #11
 8010b1e:	f042 0220 	orr.w	r2, r2, #32
 8010b22:	b2d2      	uxtb	r2, r2
 8010b24:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6818      	ldr	r0, [r3, #0]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	689b      	ldr	r3, [r3, #8]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8010b32:	f7fd f9a6 	bl	800de82 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010b36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b38:	f103 001c 	add.w	r0, r3, #28
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010b42:	4613      	mov	r3, r2
 8010b44:	4619      	mov	r1, r3
 8010b46:	f7fb feaf 	bl	800c8a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010b4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b4c:	3316      	adds	r3, #22
 8010b4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7fb fea9 	bl	800c8a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b58:	3312      	adds	r3, #18
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7fb fe88 	bl	800c872 <st_word>
					fs->wflag = 1;
 8010b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010b64:	2201      	movs	r2, #1
 8010b66:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010b68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fc f9de 	bl	800cf2c <sync_fs>
 8010b70:	4603      	mov	r3, r0
 8010b72:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010b7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b80:	b2da      	uxtb	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010b88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010b8a:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8010b8e:	4611      	mov	r1, r2
 8010b90:	4618      	mov	r0, r3
 8010b92:	f7fb ffd1 	bl	800cb38 <unlock_fs>
 8010b96:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3770      	adds	r7, #112	@ 0x70
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010ba2:	b580      	push	{r7, lr}
 8010ba4:	b084      	sub	sp, #16
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f7ff feb6 	bl	801091c <f_sync>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010bb4:	7bfb      	ldrb	r3, [r7, #15]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d11d      	bne.n	8010bf6 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f107 0208 	add.w	r2, r7, #8
 8010bc0:	4611      	mov	r1, r2
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fe ff8e 	bl	800fae4 <validate>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010bcc:	7bfb      	ldrb	r3, [r7, #15]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d111      	bne.n	8010bf6 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fc f8d6 	bl	800cd88 <dec_lock>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010be0:	7bfb      	ldrb	r3, [r7, #15]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d102      	bne.n	8010bec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2200      	movs	r2, #0
 8010bea:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	2100      	movs	r1, #0
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fb ffa1 	bl	800cb38 <unlock_fs>
#endif
		}
	}
	return res;
 8010bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3710      	adds	r7, #16
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8010c00:	b590      	push	{r4, r7, lr}
 8010c02:	b0a9      	sub	sp, #164	@ 0xa4
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	607a      	str	r2, [r7, #4]
 8010c0a:	603b      	str	r3, [r7, #0]
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8010c10:	2301      	movs	r3, #1
 8010c12:	657b      	str	r3, [r7, #84]	@ 0x54
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8010c14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010c18:	653b      	str	r3, [r7, #80]	@ 0x50
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8010c1a:	f107 030c 	add.w	r3, r7, #12
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fe fb5d 	bl	800f2de <get_ldnumber>
 8010c24:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	da02      	bge.n	8010c32 <f_mkfs+0x32>
 8010c2c:	230b      	movs	r3, #11
 8010c2e:	f001 b8c3 	b.w	8011db8 <f_mkfs+0x11b8>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8010c32:	4a9b      	ldr	r2, [pc, #620]	@ (8010ea0 <f_mkfs+0x2a0>)
 8010c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d005      	beq.n	8010c4a <f_mkfs+0x4a>
 8010c3e:	4a98      	ldr	r2, [pc, #608]	@ (8010ea0 <f_mkfs+0x2a0>)
 8010c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c46:	2200      	movs	r2, #0
 8010c48:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8010c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c4c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8010c50:	2300      	movs	r3, #0
 8010c52:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8010c56:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fb fc6e 	bl	800c53c <disk_initialize>
 8010c60:	4603      	mov	r3, r0
 8010c62:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8010c66:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8010c6a:	f003 0301 	and.w	r3, r3, #1
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d002      	beq.n	8010c78 <f_mkfs+0x78>
 8010c72:	2303      	movs	r3, #3
 8010c74:	f001 b8a0 	b.w	8011db8 <f_mkfs+0x11b8>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8010c78:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8010c7c:	f003 0304 	and.w	r3, r3, #4
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d002      	beq.n	8010c8a <f_mkfs+0x8a>
 8010c84:	230a      	movs	r3, #10
 8010c86:	f001 b897 	b.w	8011db8 <f_mkfs+0x11b8>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8010c8a:	f107 0220 	add.w	r2, r7, #32
 8010c8e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8010c92:	2103      	movs	r1, #3
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fb fcb7 	bl	800c608 <disk_ioctl>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d10c      	bne.n	8010cba <f_mkfs+0xba>
 8010ca0:	6a3b      	ldr	r3, [r7, #32]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d009      	beq.n	8010cba <f_mkfs+0xba>
 8010ca6:	6a3b      	ldr	r3, [r7, #32]
 8010ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010cac:	d805      	bhi.n	8010cba <f_mkfs+0xba>
 8010cae:	6a3b      	ldr	r3, [r7, #32]
 8010cb0:	1e5a      	subs	r2, r3, #1
 8010cb2:	6a3b      	ldr	r3, [r7, #32]
 8010cb4:	4013      	ands	r3, r2
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d001      	beq.n	8010cbe <f_mkfs+0xbe>
 8010cba:	2301      	movs	r3, #1
 8010cbc:	623b      	str	r3, [r7, #32]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8010cbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010cc2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d004      	beq.n	8010cd6 <f_mkfs+0xd6>
 8010ccc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d309      	bcc.n	8010cea <f_mkfs+0xea>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010cdc:	d805      	bhi.n	8010cea <f_mkfs+0xea>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	1e5a      	subs	r2, r3, #1
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	4013      	ands	r3, r2
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d002      	beq.n	8010cf0 <f_mkfs+0xf0>
 8010cea:	2313      	movs	r3, #19
 8010cec:	f001 b864 	b.w	8011db8 <f_mkfs+0x11b8>
	au /= ss;	/* Cluster size in unit of sector */
 8010cf0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010cf4:	687a      	ldr	r2, [r7, #4]
 8010cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cfa:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	643b      	str	r3, [r7, #64]	@ 0x40
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8010d00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010d04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8010d0e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d14:	fb02 f303 	mul.w	r3, r2, r3
 8010d18:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!szb_buf) return FR_MKFS_ABORTED;
 8010d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d102      	bne.n	8010d26 <f_mkfs+0x126>
 8010d20:	230e      	movs	r3, #14
 8010d22:	f001 b849 	b.w	8011db8 <f_mkfs+0x11b8>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8010d26:	f107 021c 	add.w	r2, r7, #28
 8010d2a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8010d2e:	2101      	movs	r1, #1
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7fb fc69 	bl	800c608 <disk_ioctl>
 8010d36:	4603      	mov	r3, r0
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d002      	beq.n	8010d42 <f_mkfs+0x142>
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	f001 b83b 	b.w	8011db8 <f_mkfs+0x11b8>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8010d42:	7afb      	ldrb	r3, [r7, #11]
 8010d44:	f003 0308 	and.w	r3, r3, #8
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d001      	beq.n	8010d50 <f_mkfs+0x150>
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	e000      	b.n	8010d52 <f_mkfs+0x152>
 8010d50:	233f      	movs	r3, #63	@ 0x3f
 8010d52:	637b      	str	r3, [r7, #52]	@ 0x34
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8010d54:	69fb      	ldr	r3, [r7, #28]
 8010d56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d902      	bls.n	8010d62 <f_mkfs+0x162>
 8010d5c:	230e      	movs	r3, #14
 8010d5e:	f001 b82b 	b.w	8011db8 <f_mkfs+0x11b8>
		sz_vol -= b_vol;						/* Volume size */
 8010d62:	69fa      	ldr	r2, [r7, #28]
 8010d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d66:	1ad3      	subs	r3, r2, r3
 8010d68:	61fb      	str	r3, [r7, #28]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8010d6a:	69fb      	ldr	r3, [r7, #28]
 8010d6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d6e:	d802      	bhi.n	8010d76 <f_mkfs+0x176>
 8010d70:	230e      	movs	r3, #14
 8010d72:	f001 b821 	b.w	8011db8 <f_mkfs+0x11b8>

	/* Pre-determine the FAT type */
	do {
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
 8010d76:	7afb      	ldrb	r3, [r7, #11]
 8010d78:	f003 0304 	and.w	r3, r3, #4
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d00f      	beq.n	8010da0 <f_mkfs+0x1a0>
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
 8010d80:	7afb      	ldrb	r3, [r7, #11]
 8010d82:	f003 0307 	and.w	r3, r3, #7
 8010d86:	2b04      	cmp	r3, #4
 8010d88:	d006      	beq.n	8010d98 <f_mkfs+0x198>
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010d90:	d202      	bcs.n	8010d98 <f_mkfs+0x198>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2b80      	cmp	r3, #128	@ 0x80
 8010d96:	d903      	bls.n	8010da0 <f_mkfs+0x1a0>
				fmt = FS_EXFAT; break;
 8010d98:	2304      	movs	r3, #4
 8010d9a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8010d9e:	e023      	b.n	8010de8 <f_mkfs+0x1e8>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2b80      	cmp	r3, #128	@ 0x80
 8010da4:	d902      	bls.n	8010dac <f_mkfs+0x1ac>
 8010da6:	2313      	movs	r3, #19
 8010da8:	f001 b806 	b.w	8011db8 <f_mkfs+0x11b8>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8010dac:	7afb      	ldrb	r3, [r7, #11]
 8010dae:	f003 0302 	and.w	r3, r3, #2
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d00d      	beq.n	8010dd2 <f_mkfs+0x1d2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8010db6:	7afb      	ldrb	r3, [r7, #11]
 8010db8:	f003 0307 	and.w	r3, r3, #7
 8010dbc:	2b02      	cmp	r3, #2
 8010dbe:	d004      	beq.n	8010dca <f_mkfs+0x1ca>
 8010dc0:	7afb      	ldrb	r3, [r7, #11]
 8010dc2:	f003 0301 	and.w	r3, r3, #1
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d103      	bne.n	8010dd2 <f_mkfs+0x1d2>
				fmt = FS_FAT32; break;
 8010dca:	2303      	movs	r3, #3
 8010dcc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8010dd0:	e00a      	b.n	8010de8 <f_mkfs+0x1e8>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8010dd2:	7afb      	ldrb	r3, [r7, #11]
 8010dd4:	f003 0301 	and.w	r3, r3, #1
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d102      	bne.n	8010de2 <f_mkfs+0x1e2>
 8010ddc:	2313      	movs	r3, #19
 8010dde:	f000 bfeb 	b.w	8011db8 <f_mkfs+0x11b8>
		fmt = FS_FAT16;
 8010de2:	2302      	movs	r3, #2
 8010de4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	} while (0);

#if _FS_EXFAT
	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
 8010de8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8010dec:	2b04      	cmp	r3, #4
 8010dee:	f040 842b 	bne.w	8011648 <f_mkfs+0xa48>
		DWORD szb_bit, szb_case, sum, nb, cl;
		WCHAR ch, si;
		UINT j, st;
		BYTE b;

		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
 8010df2:	69fb      	ldr	r3, [r7, #28]
 8010df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010df8:	d202      	bcs.n	8010e00 <f_mkfs+0x200>
 8010dfa:	230e      	movs	r3, #14
 8010dfc:	f000 bfdc 	b.w	8011db8 <f_mkfs+0x11b8>
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Determine FAT location, data location and number of clusters */
		if (!au) {	/* au auto-selection */
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d10e      	bne.n	8010e24 <f_mkfs+0x224>
			au = 8;
 8010e06:	2308      	movs	r3, #8
 8010e08:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8010e10:	d301      	bcc.n	8010e16 <f_mkfs+0x216>
 8010e12:	2340      	movs	r3, #64	@ 0x40
 8010e14:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
 8010e16:	69fb      	ldr	r3, [r7, #28]
 8010e18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010e1c:	d302      	bcc.n	8010e24 <f_mkfs+0x224>
 8010e1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e22:	607b      	str	r3, [r7, #4]
		}
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 8010e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e26:	3320      	adds	r3, #32
 8010e28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
 8010e2c:	69fa      	ldr	r2, [r7, #28]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e34:	3302      	adds	r3, #2
 8010e36:	009a      	lsls	r2, r3, #2
 8010e38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010e3c:	4413      	add	r3, r2
 8010e3e:	1e5a      	subs	r2, r3, #1
 8010e40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block boundary */
 8010e4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010e54:	441a      	add	r2, r3
 8010e56:	6a3b      	ldr	r3, [r7, #32]
 8010e58:	4413      	add	r3, r2
 8010e5a:	1e5a      	subs	r2, r3, #1
 8010e5c:	6a3b      	ldr	r3, [r7, #32]
 8010e5e:	425b      	negs	r3, r3
 8010e60:	4013      	ands	r3, r2
 8010e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	085b      	lsrs	r3, r3, #1
 8010e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d302      	bcc.n	8010e74 <f_mkfs+0x274>
 8010e6e:	230e      	movs	r3, #14
 8010e70:	f000 bfa2 	b.w	8011db8 <f_mkfs+0x11b8>
		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
 8010e74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e78:	1ad2      	subs	r2, r2, r3
 8010e7a:	69fb      	ldr	r3, [r7, #28]
 8010e7c:	441a      	add	r2, r3
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e84:	633b      	str	r3, [r7, #48]	@ 0x30
		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
 8010e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e88:	2b0f      	cmp	r3, #15
 8010e8a:	d802      	bhi.n	8010e92 <f_mkfs+0x292>
 8010e8c:	230e      	movs	r3, #14
 8010e8e:	f000 bf93 	b.w	8011db8 <f_mkfs+0x11b8>
		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
 8010e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e94:	4a03      	ldr	r2, [pc, #12]	@ (8010ea4 <f_mkfs+0x2a4>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d906      	bls.n	8010ea8 <f_mkfs+0x2a8>
 8010e9a:	230e      	movs	r3, #14
 8010e9c:	f000 bf8c 	b.w	8011db8 <f_mkfs+0x11b8>
 8010ea0:	200054a4 	.word	0x200054a4
 8010ea4:	7ffffffd 	.word	0x7ffffffd

		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
 8010ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eaa:	3307      	adds	r3, #7
 8010eac:	08db      	lsrs	r3, r3, #3
 8010eae:	62bb      	str	r3, [r7, #40]	@ 0x28
		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
 8010eb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	fb03 f202 	mul.w	r2, r3, r2
 8010eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ebc:	4413      	add	r3, r2
 8010ebe:	1e5a      	subs	r2, r3, #1
 8010ec0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010ec4:	6879      	ldr	r1, [r7, #4]
 8010ec6:	fb01 f303 	mul.w	r3, r1, r3
 8010eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ece:	613b      	str	r3, [r7, #16]

		/* Create a compressed up-case table */
		sect = b_data + au * tbl[0];	/* Table start sector */
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	fb02 f303 	mul.w	r3, r2, r3
 8010ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010eda:	4413      	add	r3, r2
 8010edc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		sum = 0;						/* Table checksum to be stored in the 82 entry */
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	673b      	str	r3, [r7, #112]	@ 0x70
		st = si = i = j = szb_case = 0;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	677b      	str	r3, [r7, #116]	@ 0x74
 8010ee8:	2300      	movs	r3, #0
 8010eea:	663b      	str	r3, [r7, #96]	@ 0x60
 8010eec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010eee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010ef2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010ef6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010efa:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			switch (st) {
 8010efc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d003      	beq.n	8010f0a <f_mkfs+0x30a>
 8010f02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	d040      	beq.n	8010f8a <f_mkfs+0x38a>
 8010f08:	e04f      	b.n	8010faa <f_mkfs+0x3aa>
			case 0:
				ch = ff_wtoupper(si);	/* Get an up-case char */
 8010f0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f000 fff0 	bl	8011ef4 <ff_wtoupper>
 8010f14:	4603      	mov	r3, r0
 8010f16:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (ch != si) {
 8010f1a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8010f1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d005      	beq.n	8010f32 <f_mkfs+0x332>
					si++; break;		/* Store the up-case char if exist */
 8010f26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010f30:	e049      	b.n	8010fc6 <f_mkfs+0x3c6>
				}
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 8010f32:	2301      	movs	r3, #1
 8010f34:	663b      	str	r3, [r7, #96]	@ 0x60
 8010f36:	e002      	b.n	8010f3e <f_mkfs+0x33e>
 8010f38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8010f3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f40:	b29a      	uxth	r2, r3
 8010f42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010f46:	4413      	add	r3, r2
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d011      	beq.n	8010f72 <f_mkfs+0x372>
 8010f4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f50:	b29a      	uxth	r2, r3
 8010f52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010f56:	4413      	add	r3, r2
 8010f58:	b29c      	uxth	r4, r3
 8010f5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f5c:	b29a      	uxth	r2, r3
 8010f5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010f62:	4413      	add	r3, r2
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	4618      	mov	r0, r3
 8010f68:	f000 ffc4 	bl	8011ef4 <ff_wtoupper>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	429c      	cmp	r4, r3
 8010f70:	d0e2      	beq.n	8010f38 <f_mkfs+0x338>
				if (j >= 128) {
 8010f72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f74:	2b7f      	cmp	r3, #127	@ 0x7f
 8010f76:	d906      	bls.n	8010f86 <f_mkfs+0x386>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
 8010f78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010f7c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8010f80:	2302      	movs	r3, #2
 8010f82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010f84:	e01f      	b.n	8010fc6 <f_mkfs+0x3c6>
				}
				st = 1;			/* Do not compress short run */
 8010f86:	2301      	movs	r3, #1
 8010f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
				/* go to next case */
			case 1:
				ch = si++;		/* Fill the short run */
 8010f8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010f8e:	1c5a      	adds	r2, r3, #1
 8010f90:	f8a7 2064 	strh.w	r2, [r7, #100]	@ 0x64
 8010f94:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
				if (--j == 0) st = 0;
 8010f98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f9a:	3b01      	subs	r3, #1
 8010f9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8010f9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d10f      	bne.n	8010fc4 <f_mkfs+0x3c4>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
				break;
 8010fa8:	e00c      	b.n	8010fc4 <f_mkfs+0x3c4>

			default:
				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
 8010faa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010fac:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8010fb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010fb2:	b29a      	uxth	r2, r3
 8010fb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010fb8:	4413      	add	r3, r2
 8010fba:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				st = 0;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010fc2:	e000      	b.n	8010fc6 <f_mkfs+0x3c6>
				break;
 8010fc4:	bf00      	nop
			}
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
 8010fc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010fc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010fca:	4413      	add	r3, r2
 8010fcc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8010fd0:	b2d2      	uxtb	r2, r2
 8010fd2:	701a      	strb	r2, [r3, #0]
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7fd f9be 	bl	800e35a <xsum32>
 8010fde:	6738      	str	r0, [r7, #112]	@ 0x70
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 8010fe0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8010fe4:	0a1b      	lsrs	r3, r3, #8
 8010fe6:	b299      	uxth	r1, r3
 8010fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010fea:	3301      	adds	r3, #1
 8010fec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010fee:	4413      	add	r3, r2
 8010ff0:	b2ca      	uxtb	r2, r1
 8010ff2:	701a      	strb	r2, [r3, #0]
 8010ff4:	781b      	ldrb	r3, [r3, #0]
 8010ff6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7fd f9ae 	bl	800e35a <xsum32>
 8010ffe:	6738      	str	r0, [r7, #112]	@ 0x70
			i += 2; szb_case += 2;
 8011000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011002:	3302      	adds	r3, #2
 8011004:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011008:	3302      	adds	r3, #2
 801100a:	677b      	str	r3, [r7, #116]	@ 0x74
			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
 801100c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011010:	2b00      	cmp	r3, #0
 8011012:	d003      	beq.n	801101c <f_mkfs+0x41c>
 8011014:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011018:	429a      	cmp	r2, r3
 801101a:	d122      	bne.n	8011062 <f_mkfs+0x462>
				n = (i + ss - 1) / ss;
 801101c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011022:	4413      	add	r3, r2
 8011024:	1e5a      	subs	r2, r3, #1
 8011026:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801102a:	fbb2 f3f3 	udiv	r3, r2, r3
 801102e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 8011032:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8011036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801103a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801103e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011040:	f7fb fac2 	bl	800c5c8 <disk_write>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d002      	beq.n	8011050 <f_mkfs+0x450>
 801104a:	2301      	movs	r3, #1
 801104c:	f000 beb4 	b.w	8011db8 <f_mkfs+0x11b8>
				sect += n; i = 0;
 8011050:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011058:	4413      	add	r3, r2
 801105a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801105e:	2300      	movs	r3, #0
 8011060:	67bb      	str	r3, [r7, #120]	@ 0x78
			}
		} while (si);
 8011062:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011066:	2b00      	cmp	r3, #0
 8011068:	f47f af48 	bne.w	8010efc <f_mkfs+0x2fc>
		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
 801106c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011070:	687a      	ldr	r2, [r7, #4]
 8011072:	fb03 f202 	mul.w	r2, r3, r2
 8011076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011078:	4413      	add	r3, r2
 801107a:	1e5a      	subs	r2, r3, #1
 801107c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011080:	6879      	ldr	r1, [r7, #4]
 8011082:	fb01 f303 	mul.w	r3, r1, r3
 8011086:	fbb2 f3f3 	udiv	r3, r2, r3
 801108a:	617b      	str	r3, [r7, #20]
		tbl[2] = 1;										/* Number of root dir clusters */
 801108c:	2301      	movs	r3, #1
 801108e:	61bb      	str	r3, [r7, #24]

		/* Initialize the allocation bitmap */
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
 8011090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011092:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011096:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801109a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801109c:	4413      	add	r3, r2
 801109e:	1e5a      	subs	r2, r3, #1
 80110a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80110a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80110a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
 80110ac:	693a      	ldr	r2, [r7, #16]
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	441a      	add	r2, r3
 80110b2:	69bb      	ldr	r3, [r7, #24]
 80110b4:	4413      	add	r3, r2
 80110b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		do {
			mem_set(buf, 0, szb_buf);
 80110b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80110ba:	2100      	movs	r1, #0
 80110bc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80110be:	f7fb fcc8 	bl	800ca52 <mem_set>
			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
 80110c2:	2300      	movs	r3, #0
 80110c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80110c6:	e009      	b.n	80110dc <f_mkfs+0x4dc>
 80110c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80110ca:	1c5a      	adds	r2, r3, #1
 80110cc:	67ba      	str	r2, [r7, #120]	@ 0x78
 80110ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80110d0:	4413      	add	r3, r2
 80110d2:	22ff      	movs	r2, #255	@ 0xff
 80110d4:	701a      	strb	r2, [r3, #0]
 80110d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110d8:	3b08      	subs	r3, #8
 80110da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80110dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110de:	2b07      	cmp	r3, #7
 80110e0:	d903      	bls.n	80110ea <f_mkfs+0x4ea>
 80110e2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80110e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d3ee      	bcc.n	80110c8 <f_mkfs+0x4c8>
			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
 80110ea:	2301      	movs	r3, #1
 80110ec:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80110f0:	e013      	b.n	801111a <f_mkfs+0x51a>
 80110f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80110f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80110f6:	4413      	add	r3, r2
 80110f8:	7819      	ldrb	r1, [r3, #0]
 80110fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80110fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80110fe:	4413      	add	r3, r2
 8011100:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8011104:	430a      	orrs	r2, r1
 8011106:	b2d2      	uxtb	r2, r2
 8011108:	701a      	strb	r2, [r3, #0]
 801110a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801110e:	005b      	lsls	r3, r3, #1
 8011110:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8011114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011116:	3b01      	subs	r3, #1
 8011118:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801111a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801111c:	2b00      	cmp	r3, #0
 801111e:	d003      	beq.n	8011128 <f_mkfs+0x528>
 8011120:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011124:	429a      	cmp	r2, r3
 8011126:	d3e4      	bcc.n	80110f2 <f_mkfs+0x4f2>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 8011128:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801112c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801112e:	4293      	cmp	r3, r2
 8011130:	bf28      	it	cs
 8011132:	4613      	movcs	r3, r2
 8011134:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 8011138:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 801113c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011140:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011144:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011146:	f7fb fa3f 	bl	800c5c8 <disk_write>
 801114a:	4603      	mov	r3, r0
 801114c:	2b00      	cmp	r3, #0
 801114e:	d002      	beq.n	8011156 <f_mkfs+0x556>
 8011150:	2301      	movs	r3, #1
 8011152:	f000 be31 	b.w	8011db8 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 8011156:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801115a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801115e:	4413      	add	r3, r2
 8011160:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011164:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011168:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801116c:	1ad3      	subs	r3, r2, r3
 801116e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 8011172:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011176:	2b00      	cmp	r3, #0
 8011178:	d19e      	bne.n	80110b8 <f_mkfs+0x4b8>

		/* Initialize the FAT */
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
 801117a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801117e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011182:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		j = nb = cl = 0;
 801118a:	2300      	movs	r3, #0
 801118c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801118e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011190:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011194:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
 8011196:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011198:	2100      	movs	r1, #0
 801119a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801119c:	f7fb fc59 	bl	800ca52 <mem_set>
 80111a0:	2300      	movs	r3, #0
 80111a2:	67bb      	str	r3, [r7, #120]	@ 0x78
			if (cl == 0) {	/* Set entry 0 and 1 */
 80111a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d134      	bne.n	8011214 <f_mkfs+0x614>
				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
 80111aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80111ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111ae:	4413      	add	r3, r2
 80111b0:	f06f 0107 	mvn.w	r1, #7
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fb fb77 	bl	800c8a8 <st_dword>
 80111ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111bc:	3304      	adds	r3, #4
 80111be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80111c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80111c2:	3301      	adds	r3, #1
 80111c4:	66bb      	str	r3, [r7, #104]	@ 0x68
				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
 80111c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80111c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111ca:	4413      	add	r3, r2
 80111cc:	f04f 31ff 	mov.w	r1, #4294967295
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7fb fb69 	bl	800c8a8 <st_dword>
 80111d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111d8:	3304      	adds	r3, #4
 80111da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80111dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80111de:	3301      	adds	r3, #1
 80111e0:	66bb      	str	r3, [r7, #104]	@ 0x68
			}
			do {			/* Create chains of bitmap, up-case and root dir */
				while (nb && i < szb_buf) {			/* Create a chain */
 80111e2:	e017      	b.n	8011214 <f_mkfs+0x614>
					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
 80111e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80111e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111e8:	441a      	add	r2, r3
 80111ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d902      	bls.n	80111f6 <f_mkfs+0x5f6>
 80111f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80111f2:	3301      	adds	r3, #1
 80111f4:	e001      	b.n	80111fa <f_mkfs+0x5fa>
 80111f6:	f04f 33ff 	mov.w	r3, #4294967295
 80111fa:	4619      	mov	r1, r3
 80111fc:	4610      	mov	r0, r2
 80111fe:	f7fb fb53 	bl	800c8a8 <st_dword>
					i += 4; cl++; nb--;
 8011202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011204:	3304      	adds	r3, #4
 8011206:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011208:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801120a:	3301      	adds	r3, #1
 801120c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801120e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011210:	3b01      	subs	r3, #1
 8011212:	66fb      	str	r3, [r7, #108]	@ 0x6c
				while (nb && i < szb_buf) {			/* Create a chain */
 8011214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011216:	2b00      	cmp	r3, #0
 8011218:	d003      	beq.n	8011222 <f_mkfs+0x622>
 801121a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801121c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801121e:	429a      	cmp	r2, r3
 8011220:	d3e0      	bcc.n	80111e4 <f_mkfs+0x5e4>
				}
				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
 8011222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011224:	2b00      	cmp	r3, #0
 8011226:	d10b      	bne.n	8011240 <f_mkfs+0x640>
 8011228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801122a:	2b02      	cmp	r3, #2
 801122c:	d808      	bhi.n	8011240 <f_mkfs+0x640>
 801122e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011230:	1c5a      	adds	r2, r3, #1
 8011232:	663a      	str	r2, [r7, #96]	@ 0x60
 8011234:	009b      	lsls	r3, r3, #2
 8011236:	33a0      	adds	r3, #160	@ 0xa0
 8011238:	443b      	add	r3, r7
 801123a:	f853 3c90 	ldr.w	r3, [r3, #-144]
 801123e:	66fb      	str	r3, [r7, #108]	@ 0x6c
			} while (nb && i < szb_buf);
 8011240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011242:	2b00      	cmp	r3, #0
 8011244:	d003      	beq.n	801124e <f_mkfs+0x64e>
 8011246:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801124a:	429a      	cmp	r2, r3
 801124c:	d3e2      	bcc.n	8011214 <f_mkfs+0x614>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 801124e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011254:	4293      	cmp	r3, r2
 8011256:	bf28      	it	cs
 8011258:	4613      	movcs	r3, r2
 801125a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 801125e:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8011262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011266:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801126a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801126c:	f7fb f9ac 	bl	800c5c8 <disk_write>
 8011270:	4603      	mov	r3, r0
 8011272:	2b00      	cmp	r3, #0
 8011274:	d002      	beq.n	801127c <f_mkfs+0x67c>
 8011276:	2301      	movs	r3, #1
 8011278:	f000 bd9e 	b.w	8011db8 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 801127c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011280:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011284:	4413      	add	r3, r2
 8011286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801128a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801128e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 8011298:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801129c:	2b00      	cmp	r3, #0
 801129e:	f47f af7a 	bne.w	8011196 <f_mkfs+0x596>

		/* Initialize the root directory */
		mem_set(buf, 0, szb_buf);
 80112a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112a4:	2100      	movs	r1, #0
 80112a6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80112a8:	f7fb fbd3 	bl	800ca52 <mem_set>
		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
 80112ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112ae:	2283      	movs	r2, #131	@ 0x83
 80112b0:	701a      	strb	r2, [r3, #0]
		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
 80112b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112b4:	3320      	adds	r3, #32
 80112b6:	2281      	movs	r2, #129	@ 0x81
 80112b8:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 1 + 20, 2);
 80112ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112bc:	3334      	adds	r3, #52	@ 0x34
 80112be:	2102      	movs	r1, #2
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7fb faf1 	bl	800c8a8 <st_dword>
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
 80112c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112c8:	3338      	adds	r3, #56	@ 0x38
 80112ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7fb faeb 	bl	800c8a8 <st_dword>
		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
 80112d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112d4:	3340      	adds	r3, #64	@ 0x40
 80112d6:	2282      	movs	r2, #130	@ 0x82
 80112d8:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 2 + 4, sum);
 80112da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112dc:	3344      	adds	r3, #68	@ 0x44
 80112de:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7fb fae1 	bl	800c8a8 <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
 80112e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112e8:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	3302      	adds	r3, #2
 80112f0:	4619      	mov	r1, r3
 80112f2:	4610      	mov	r0, r2
 80112f4:	f7fb fad8 	bl	800c8a8 <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);
 80112f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112fa:	3358      	adds	r3, #88	@ 0x58
 80112fc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fb fad2 	bl	800c8a8 <st_dword>
		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of sectors */
 8011304:	693a      	ldr	r2, [r7, #16]
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	4413      	add	r3, r2
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	fb02 f303 	mul.w	r3, r2, r3
 8011310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011312:	4413      	add	r3, r2
 8011314:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {	/* Fill root directory sectors */
			n = (nsect > sz_buf) ? sz_buf : nsect;
 801131e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011324:	4293      	cmp	r3, r2
 8011326:	bf28      	it	cs
 8011328:	4613      	movcs	r3, r2
 801132a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 801132e:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8011332:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011336:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801133a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801133c:	f7fb f944 	bl	800c5c8 <disk_write>
 8011340:	4603      	mov	r3, r0
 8011342:	2b00      	cmp	r3, #0
 8011344:	d002      	beq.n	801134c <f_mkfs+0x74c>
 8011346:	2301      	movs	r3, #1
 8011348:	f000 bd36 	b.w	8011db8 <f_mkfs+0x11b8>
			mem_set(buf, 0, ss);
 801134c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011350:	461a      	mov	r2, r3
 8011352:	2100      	movs	r1, #0
 8011354:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011356:	f7fb fb7c 	bl	800ca52 <mem_set>
			sect += n; nsect -= n;
 801135a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801135e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011362:	4413      	add	r3, r2
 8011364:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011368:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801136c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011370:	1ad3      	subs	r3, r2, r3
 8011372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 8011376:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801137a:	2b00      	cmp	r3, #0
 801137c:	d1cf      	bne.n	801131e <f_mkfs+0x71e>

		/* Create two set of the exFAT VBR blocks */
		sect = b_vol;
 801137e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (n = 0; n < 2; n++) {
 8011384:	2300      	movs	r3, #0
 8011386:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801138a:	e157      	b.n	801163c <f_mkfs+0xa3c>
			/* Main record (+0) */
			mem_set(buf, 0, ss);
 801138c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011390:	461a      	mov	r2, r3
 8011392:	2100      	movs	r1, #0
 8011394:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011396:	f7fb fb5c 	bl	800ca52 <mem_set>
			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 801139a:	220b      	movs	r2, #11
 801139c:	49b5      	ldr	r1, [pc, #724]	@ (8011674 <f_mkfs+0xa74>)
 801139e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80113a0:	f7fb fb36 	bl	800ca10 <mem_cpy>
			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 80113a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113a6:	3340      	adds	r3, #64	@ 0x40
 80113a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fb fa7c 	bl	800c8a8 <st_dword>
			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
 80113b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113b2:	3348      	adds	r3, #72	@ 0x48
 80113b4:	69fa      	ldr	r2, [r7, #28]
 80113b6:	4611      	mov	r1, r2
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7fb fa75 	bl	800c8a8 <st_dword>
			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
 80113be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113c0:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80113c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80113c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113ca:	1ad3      	subs	r3, r2, r3
 80113cc:	4619      	mov	r1, r3
 80113ce:	f7fb fa6b 	bl	800c8a8 <st_dword>
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
 80113d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113d4:	3354      	adds	r3, #84	@ 0x54
 80113d6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80113da:	4618      	mov	r0, r3
 80113dc:	f7fb fa64 	bl	800c8a8 <st_dword>
			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
 80113e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113e2:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80113e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113ea:	1ad3      	subs	r3, r2, r3
 80113ec:	4619      	mov	r1, r3
 80113ee:	f7fb fa5b 	bl	800c8a8 <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
 80113f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113f4:	335c      	adds	r3, #92	@ 0x5c
 80113f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fb fa55 	bl	800c8a8 <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
 80113fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011400:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8011404:	693a      	ldr	r2, [r7, #16]
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	4413      	add	r3, r2
 801140a:	3302      	adds	r3, #2
 801140c:	4619      	mov	r1, r3
 801140e:	f7fb fa4b 	bl	800c8a8 <st_dword>
			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
 8011412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011414:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 8011418:	f7fb f86e 	bl	800c4f8 <get_fattime>
 801141c:	4603      	mov	r3, r0
 801141e:	4619      	mov	r1, r3
 8011420:	4620      	mov	r0, r4
 8011422:	f7fb fa41 	bl	800c8a8 <st_dword>
			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
 8011426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011428:	3368      	adds	r3, #104	@ 0x68
 801142a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801142e:	4618      	mov	r0, r3
 8011430:	f7fb fa1f 	bl	800c872 <st_word>
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
 8011434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011436:	336c      	adds	r3, #108	@ 0x6c
 8011438:	2200      	movs	r2, #0
 801143a:	701a      	strb	r2, [r3, #0]
 801143c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011440:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011442:	e005      	b.n	8011450 <f_mkfs+0x850>
 8011444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011446:	336c      	adds	r3, #108	@ 0x6c
 8011448:	781a      	ldrb	r2, [r3, #0]
 801144a:	3201      	adds	r2, #1
 801144c:	b2d2      	uxtb	r2, r2
 801144e:	701a      	strb	r2, [r3, #0]
 8011450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011452:	085b      	lsrs	r3, r3, #1
 8011454:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011456:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011458:	2b00      	cmp	r3, #0
 801145a:	d1f3      	bne.n	8011444 <f_mkfs+0x844>
			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 801145c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801145e:	336d      	adds	r3, #109	@ 0x6d
 8011460:	2200      	movs	r2, #0
 8011462:	701a      	strb	r2, [r3, #0]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011468:	e005      	b.n	8011476 <f_mkfs+0x876>
 801146a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801146c:	336d      	adds	r3, #109	@ 0x6d
 801146e:	781a      	ldrb	r2, [r3, #0]
 8011470:	3201      	adds	r2, #1
 8011472:	b2d2      	uxtb	r2, r2
 8011474:	701a      	strb	r2, [r3, #0]
 8011476:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011478:	085b      	lsrs	r3, r3, #1
 801147a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801147c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1f3      	bne.n	801146a <f_mkfs+0x86a>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 8011482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011484:	336e      	adds	r3, #110	@ 0x6e
 8011486:	2201      	movs	r2, #1
 8011488:	701a      	strb	r2, [r3, #0]
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
 801148a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801148c:	336f      	adds	r3, #111	@ 0x6f
 801148e:	2280      	movs	r2, #128	@ 0x80
 8011490:	701a      	strb	r2, [r3, #0]
			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
 8011492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011494:	3378      	adds	r3, #120	@ 0x78
 8011496:	f64f 61eb 	movw	r1, #65259	@ 0xfeeb
 801149a:	4618      	mov	r0, r3
 801149c:	f7fb f9e9 	bl	800c872 <st_word>
			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
 80114a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80114a6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fb f9e1 	bl	800c872 <st_word>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 80114b0:	2300      	movs	r3, #0
 80114b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80114b4:	2300      	movs	r3, #0
 80114b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80114b8:	e014      	b.n	80114e4 <f_mkfs+0x8e4>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 80114ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80114bc:	2b6a      	cmp	r3, #106	@ 0x6a
 80114be:	d00e      	beq.n	80114de <f_mkfs+0x8de>
 80114c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80114c2:	2b6b      	cmp	r3, #107	@ 0x6b
 80114c4:	d00b      	beq.n	80114de <f_mkfs+0x8de>
 80114c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80114c8:	2b70      	cmp	r3, #112	@ 0x70
 80114ca:	d008      	beq.n	80114de <f_mkfs+0x8de>
 80114cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80114ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80114d0:	4413      	add	r3, r2
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7fc ff3f 	bl	800e35a <xsum32>
 80114dc:	6738      	str	r0, [r7, #112]	@ 0x70
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 80114de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80114e0:	3301      	adds	r3, #1
 80114e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80114e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80114e8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d3e5      	bcc.n	80114ba <f_mkfs+0x8ba>
			}
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 80114ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80114f2:	1c53      	adds	r3, r2, #1
 80114f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80114f8:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80114fc:	2301      	movs	r3, #1
 80114fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011500:	f7fb f862 	bl	800c5c8 <disk_write>
 8011504:	4603      	mov	r3, r0
 8011506:	2b00      	cmp	r3, #0
 8011508:	d002      	beq.n	8011510 <f_mkfs+0x910>
 801150a:	2301      	movs	r3, #1
 801150c:	f000 bc54 	b.w	8011db8 <f_mkfs+0x11b8>
			/* Extended bootstrap record (+1..+8) */
			mem_set(buf, 0, ss);
 8011510:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011514:	461a      	mov	r2, r3
 8011516:	2100      	movs	r1, #0
 8011518:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801151a:	f7fb fa9a 	bl	800ca52 <mem_set>
			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
 801151e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011522:	3b02      	subs	r3, #2
 8011524:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011526:	4413      	add	r3, r2
 8011528:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801152c:	4618      	mov	r0, r3
 801152e:	f7fb f9a0 	bl	800c872 <st_word>
			for (j = 1; j < 9; j++) {
 8011532:	2301      	movs	r3, #1
 8011534:	663b      	str	r3, [r7, #96]	@ 0x60
 8011536:	e026      	b.n	8011586 <f_mkfs+0x986>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 8011538:	2300      	movs	r3, #0
 801153a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801153c:	e00a      	b.n	8011554 <f_mkfs+0x954>
 801153e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011540:	1c5a      	adds	r2, r3, #1
 8011542:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011544:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011546:	4413      	add	r3, r2
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801154c:	4618      	mov	r0, r3
 801154e:	f7fc ff04 	bl	800e35a <xsum32>
 8011552:	6738      	str	r0, [r7, #112]	@ 0x70
 8011554:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011558:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801155a:	429a      	cmp	r2, r3
 801155c:	d3ef      	bcc.n	801153e <f_mkfs+0x93e>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 801155e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011562:	1c53      	adds	r3, r2, #1
 8011564:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011568:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 801156c:	2301      	movs	r3, #1
 801156e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011570:	f7fb f82a 	bl	800c5c8 <disk_write>
 8011574:	4603      	mov	r3, r0
 8011576:	2b00      	cmp	r3, #0
 8011578:	d002      	beq.n	8011580 <f_mkfs+0x980>
 801157a:	2301      	movs	r3, #1
 801157c:	f000 bc1c 	b.w	8011db8 <f_mkfs+0x11b8>
			for (j = 1; j < 9; j++) {
 8011580:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011582:	3301      	adds	r3, #1
 8011584:	663b      	str	r3, [r7, #96]	@ 0x60
 8011586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011588:	2b08      	cmp	r3, #8
 801158a:	d9d5      	bls.n	8011538 <f_mkfs+0x938>
			}
			/* OEM/Reserved record (+9..+10) */
			mem_set(buf, 0, ss);
 801158c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011590:	461a      	mov	r2, r3
 8011592:	2100      	movs	r1, #0
 8011594:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011596:	f7fb fa5c 	bl	800ca52 <mem_set>
			for ( ; j < 11; j++) {
 801159a:	e025      	b.n	80115e8 <f_mkfs+0x9e8>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 801159c:	2300      	movs	r3, #0
 801159e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80115a0:	e00a      	b.n	80115b8 <f_mkfs+0x9b8>
 80115a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80115a4:	1c5a      	adds	r2, r3, #1
 80115a6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80115a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80115aa:	4413      	add	r3, r2
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7fc fed2 	bl	800e35a <xsum32>
 80115b6:	6738      	str	r0, [r7, #112]	@ 0x70
 80115b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80115bc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80115be:	429a      	cmp	r2, r3
 80115c0:	d3ef      	bcc.n	80115a2 <f_mkfs+0x9a2>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 80115c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80115c6:	1c53      	adds	r3, r2, #1
 80115c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80115cc:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 80115d0:	2301      	movs	r3, #1
 80115d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80115d4:	f7fa fff8 	bl	800c5c8 <disk_write>
 80115d8:	4603      	mov	r3, r0
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d001      	beq.n	80115e2 <f_mkfs+0x9e2>
 80115de:	2301      	movs	r3, #1
 80115e0:	e3ea      	b.n	8011db8 <f_mkfs+0x11b8>
			for ( ; j < 11; j++) {
 80115e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80115e4:	3301      	adds	r3, #1
 80115e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80115e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80115ea:	2b0a      	cmp	r3, #10
 80115ec:	d9d6      	bls.n	801159c <f_mkfs+0x99c>
			}
			/* Sum record (+11) */
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
 80115ee:	2300      	movs	r3, #0
 80115f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80115f2:	e009      	b.n	8011608 <f_mkfs+0xa08>
 80115f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80115f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80115f8:	4413      	add	r3, r2
 80115fa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fb f953 	bl	800c8a8 <st_dword>
 8011602:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011604:	3304      	adds	r3, #4
 8011606:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011608:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801160c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801160e:	429a      	cmp	r2, r3
 8011610:	d3f0      	bcc.n	80115f4 <f_mkfs+0x9f4>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 8011612:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011616:	1c53      	adds	r3, r2, #1
 8011618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801161c:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8011620:	2301      	movs	r3, #1
 8011622:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011624:	f7fa ffd0 	bl	800c5c8 <disk_write>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d001      	beq.n	8011632 <f_mkfs+0xa32>
 801162e:	2301      	movs	r3, #1
 8011630:	e3c2      	b.n	8011db8 <f_mkfs+0x11b8>
		for (n = 0; n < 2; n++) {
 8011632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011636:	3301      	adds	r3, #1
 8011638:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801163c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011640:	2b01      	cmp	r3, #1
 8011642:	f67f aea3 	bls.w	801138c <f_mkfs+0x78c>
 8011646:	e324      	b.n	8011c92 <f_mkfs+0x1092>

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801164e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011652:	2b03      	cmp	r3, #3
 8011654:	d14a      	bne.n	80116ec <f_mkfs+0xaec>
				if (!pau) {	/* au auto-selection */
 8011656:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801165a:	2b00      	cmp	r3, #0
 801165c:	d123      	bne.n	80116a6 <f_mkfs+0xaa6>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	0c5b      	lsrs	r3, r3, #17
 8011662:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8011666:	2300      	movs	r3, #0
 8011668:	67bb      	str	r3, [r7, #120]	@ 0x78
 801166a:	2301      	movs	r3, #1
 801166c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011670:	e00a      	b.n	8011688 <f_mkfs+0xa88>
 8011672:	bf00      	nop
 8011674:	0801650c 	.word	0x0801650c
 8011678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801167a:	3301      	adds	r3, #1
 801167c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801167e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011682:	005b      	lsls	r3, r3, #1
 8011684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011688:	4aa0      	ldr	r2, [pc, #640]	@ (801190c <f_mkfs+0xd0c>)
 801168a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801168c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d008      	beq.n	80116a6 <f_mkfs+0xaa6>
 8011694:	4a9d      	ldr	r2, [pc, #628]	@ (801190c <f_mkfs+0xd0c>)
 8011696:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801169c:	461a      	mov	r2, r3
 801169e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d2e8      	bcs.n	8011678 <f_mkfs+0xa78>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80116a6:	69fa      	ldr	r2, [r7, #28]
 80116a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80116ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80116b0:	633b      	str	r3, [r7, #48]	@ 0x30
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80116b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116b4:	3302      	adds	r3, #2
 80116b6:	009a      	lsls	r2, r3, #2
 80116b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80116bc:	4413      	add	r3, r2
 80116be:	1e5a      	subs	r2, r3, #1
 80116c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80116c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80116c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 32;	/* Number of reserved sectors */
 80116cc:	2320      	movs	r3, #32
 80116ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = 0;		/* No static directory */
 80116d2:	2300      	movs	r3, #0
 80116d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80116d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116d8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80116dc:	4293      	cmp	r3, r2
 80116de:	d903      	bls.n	80116e8 <f_mkfs+0xae8>
 80116e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116e2:	4a8b      	ldr	r2, [pc, #556]	@ (8011910 <f_mkfs+0xd10>)
 80116e4:	4293      	cmp	r3, r2
 80116e6:	d959      	bls.n	801179c <f_mkfs+0xb9c>
 80116e8:	230e      	movs	r3, #14
 80116ea:	e365      	b.n	8011db8 <f_mkfs+0x11b8>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80116ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d120      	bne.n	8011736 <f_mkfs+0xb36>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	0b1b      	lsrs	r3, r3, #12
 80116f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80116fc:	2300      	movs	r3, #0
 80116fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011700:	2301      	movs	r3, #1
 8011702:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011706:	e007      	b.n	8011718 <f_mkfs+0xb18>
 8011708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801170a:	3301      	adds	r3, #1
 801170c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801170e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011712:	005b      	lsls	r3, r3, #1
 8011714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011718:	4a7e      	ldr	r2, [pc, #504]	@ (8011914 <f_mkfs+0xd14>)
 801171a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801171c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d008      	beq.n	8011736 <f_mkfs+0xb36>
 8011724:	4a7b      	ldr	r2, [pc, #492]	@ (8011914 <f_mkfs+0xd14>)
 8011726:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801172c:	461a      	mov	r2, r3
 801172e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011732:	4293      	cmp	r3, r2
 8011734:	d2e8      	bcs.n	8011708 <f_mkfs+0xb08>
				}
				n_clst = sz_vol / pau;
 8011736:	69fa      	ldr	r2, [r7, #28]
 8011738:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801173c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011740:	633b      	str	r3, [r7, #48]	@ 0x30
				if (n_clst > MAX_FAT12) {
 8011742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011744:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011748:	4293      	cmp	r3, r2
 801174a:	d905      	bls.n	8011758 <f_mkfs+0xb58>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 801174c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801174e:	3302      	adds	r3, #2
 8011750:	005b      	lsls	r3, r3, #1
 8011752:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011756:	e00b      	b.n	8011770 <f_mkfs+0xb70>
				} else {
					fmt = FS_FAT12;
 8011758:	2301      	movs	r3, #1
 801175a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 801175e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011760:	4613      	mov	r3, r2
 8011762:	005b      	lsls	r3, r3, #1
 8011764:	4413      	add	r3, r2
 8011766:	3301      	adds	r3, #1
 8011768:	085b      	lsrs	r3, r3, #1
 801176a:	3303      	adds	r3, #3
 801176c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8011770:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011774:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011778:	4413      	add	r3, r2
 801177a:	1e5a      	subs	r2, r3, #1
 801177c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011780:	fbb2 f3f3 	udiv	r3, r2, r3
 8011784:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				sz_rsv = 1;						/* Number of reserved sectors */
 8011788:	2301      	movs	r3, #1
 801178a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801178e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011790:	015a      	lsls	r2, r3, #5
 8011792:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011796:	fbb2 f3f3 	udiv	r3, r2, r3
 801179a:	67fb      	str	r3, [r7, #124]	@ 0x7c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801179c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801179e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80117a2:	4413      	add	r3, r2
 80117a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80117a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80117ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80117ae:	fb03 f202 	mul.w	r2, r3, r2
 80117b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80117b6:	4413      	add	r3, r2
 80117b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80117ba:	4413      	add	r3, r2
 80117bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80117be:	6a3a      	ldr	r2, [r7, #32]
 80117c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117c2:	4413      	add	r3, r2
 80117c4:	1e5a      	subs	r2, r3, #1
 80117c6:	6a3b      	ldr	r3, [r7, #32]
 80117c8:	425b      	negs	r3, r3
 80117ca:	401a      	ands	r2, r3
 80117cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ce:	1ad3      	subs	r3, r2, r3
 80117d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80117d4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80117d8:	2b03      	cmp	r3, #3
 80117da:	d10e      	bne.n	80117fa <f_mkfs+0xbfa>
				sz_rsv += n; b_fat += n;
 80117dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80117e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80117e4:	4413      	add	r3, r2
 80117e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80117ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80117ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80117f2:	4413      	add	r3, r2
 80117f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80117f8:	e009      	b.n	801180e <f_mkfs+0xc0e>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80117fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80117fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011800:	fbb2 f3f3 	udiv	r3, r2, r3
 8011804:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011808:	4413      	add	r3, r2
 801180a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 801180e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011812:	011a      	lsls	r2, r3, #4
 8011814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011816:	441a      	add	r2, r3
 8011818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801181a:	1ad2      	subs	r2, r2, r3
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	429a      	cmp	r2, r3
 8011820:	d901      	bls.n	8011826 <f_mkfs+0xc26>
 8011822:	230e      	movs	r3, #14
 8011824:	e2c8      	b.n	8011db8 <f_mkfs+0x11b8>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8011826:	69fa      	ldr	r2, [r7, #28]
 8011828:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801182c:	1ad2      	subs	r2, r2, r3
 801182e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011832:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011834:	fb01 f303 	mul.w	r3, r1, r3
 8011838:	1ad2      	subs	r2, r2, r3
 801183a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801183c:	1ad2      	subs	r2, r2, r3
 801183e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011842:	fbb2 f3f3 	udiv	r3, r2, r3
 8011846:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fmt == FS_FAT32) {
 8011848:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801184c:	2b03      	cmp	r3, #3
 801184e:	d110      	bne.n	8011872 <f_mkfs+0xc72>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8011850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011852:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011856:	4293      	cmp	r3, r2
 8011858:	d80b      	bhi.n	8011872 <f_mkfs+0xc72>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d106      	bne.n	801186e <f_mkfs+0xc6e>
 8011860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011864:	085b      	lsrs	r3, r3, #1
 8011866:	607b      	str	r3, [r7, #4]
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d148      	bne.n	8011900 <f_mkfs+0xd00>
					return FR_MKFS_ABORTED;
 801186e:	230e      	movs	r3, #14
 8011870:	e2a2      	b.n	8011db8 <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT16) {
 8011872:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011876:	2b02      	cmp	r3, #2
 8011878:	d137      	bne.n	80118ea <f_mkfs+0xcea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801187a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801187c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011880:	4293      	cmp	r3, r2
 8011882:	d921      	bls.n	80118c8 <f_mkfs+0xcc8>
					if (!au && (pau * 2) <= 64) {
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d109      	bne.n	801189e <f_mkfs+0xc9e>
 801188a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801188e:	005b      	lsls	r3, r3, #1
 8011890:	2b40      	cmp	r3, #64	@ 0x40
 8011892:	d804      	bhi.n	801189e <f_mkfs+0xc9e>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8011894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011898:	005b      	lsls	r3, r3, #1
 801189a:	607b      	str	r3, [r7, #4]
 801189c:	e035      	b.n	801190a <f_mkfs+0xd0a>
					}
					if ((opt & FM_FAT32)) {
 801189e:	7afb      	ldrb	r3, [r7, #11]
 80118a0:	f003 0302 	and.w	r3, r3, #2
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d003      	beq.n	80118b0 <f_mkfs+0xcb0>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80118a8:	2303      	movs	r3, #3
 80118aa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80118ae:	e02c      	b.n	801190a <f_mkfs+0xd0a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d106      	bne.n	80118c4 <f_mkfs+0xcc4>
 80118b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80118ba:	005b      	lsls	r3, r3, #1
 80118bc:	607b      	str	r3, [r7, #4]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2b80      	cmp	r3, #128	@ 0x80
 80118c2:	d91f      	bls.n	8011904 <f_mkfs+0xd04>
					return FR_MKFS_ABORTED;
 80118c4:	230e      	movs	r3, #14
 80118c6:	e277      	b.n	8011db8 <f_mkfs+0x11b8>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80118c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118ca:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d80b      	bhi.n	80118ea <f_mkfs+0xcea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d106      	bne.n	80118e6 <f_mkfs+0xce6>
 80118d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80118dc:	005b      	lsls	r3, r3, #1
 80118de:	607b      	str	r3, [r7, #4]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2b80      	cmp	r3, #128	@ 0x80
 80118e4:	d910      	bls.n	8011908 <f_mkfs+0xd08>
					return FR_MKFS_ABORTED;
 80118e6:	230e      	movs	r3, #14
 80118e8:	e266      	b.n	8011db8 <f_mkfs+0x11b8>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80118ea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	d112      	bne.n	8011918 <f_mkfs+0xd18>
 80118f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118f4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d90d      	bls.n	8011918 <f_mkfs+0xd18>
 80118fc:	230e      	movs	r3, #14
 80118fe:	e25b      	b.n	8011db8 <f_mkfs+0x11b8>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8011900:	bf00      	nop
 8011902:	e6a1      	b.n	8011648 <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011904:	bf00      	nop
 8011906:	e69f      	b.n	8011648 <f_mkfs+0xa48>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011908:	bf00      	nop
			pau = au;
 801190a:	e69d      	b.n	8011648 <f_mkfs+0xa48>
 801190c:	08016618 	.word	0x08016618
 8011910:	0ffffff5 	.word	0x0ffffff5
 8011914:	08016628 	.word	0x08016628

			/* Ok, it is the valid cluster configuration */
			break;
 8011918:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801191a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801191e:	461a      	mov	r2, r3
 8011920:	2100      	movs	r1, #0
 8011922:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011924:	f7fb f895 	bl	800ca52 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8011928:	220b      	movs	r2, #11
 801192a:	49be      	ldr	r1, [pc, #760]	@ (8011c24 <f_mkfs+0x1024>)
 801192c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801192e:	f7fb f86f 	bl	800ca10 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8011932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011934:	330b      	adds	r3, #11
 8011936:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801193a:	4611      	mov	r1, r2
 801193c:	4618      	mov	r0, r3
 801193e:	f7fa ff98 	bl	800c872 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8011942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011944:	330d      	adds	r3, #13
 8011946:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801194a:	b2d2      	uxtb	r2, r2
 801194c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 801194e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011950:	330e      	adds	r3, #14
 8011952:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011956:	b292      	uxth	r2, r2
 8011958:	4611      	mov	r1, r2
 801195a:	4618      	mov	r0, r3
 801195c:	f7fa ff89 	bl	800c872 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8011960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011962:	3310      	adds	r3, #16
 8011964:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011966:	b2d2      	uxtb	r2, r2
 8011968:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 801196a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801196c:	f103 0211 	add.w	r2, r3, #17
 8011970:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011974:	2b03      	cmp	r3, #3
 8011976:	d002      	beq.n	801197e <f_mkfs+0xd7e>
 8011978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801197a:	b29b      	uxth	r3, r3
 801197c:	e000      	b.n	8011980 <f_mkfs+0xd80>
 801197e:	2300      	movs	r3, #0
 8011980:	4619      	mov	r1, r3
 8011982:	4610      	mov	r0, r2
 8011984:	f7fa ff75 	bl	800c872 <st_word>
		if (sz_vol < 0x10000) {
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801198e:	d208      	bcs.n	80119a2 <f_mkfs+0xda2>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8011990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011992:	3313      	adds	r3, #19
 8011994:	69fa      	ldr	r2, [r7, #28]
 8011996:	b292      	uxth	r2, r2
 8011998:	4611      	mov	r1, r2
 801199a:	4618      	mov	r0, r3
 801199c:	f7fa ff69 	bl	800c872 <st_word>
 80119a0:	e006      	b.n	80119b0 <f_mkfs+0xdb0>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80119a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119a4:	3320      	adds	r3, #32
 80119a6:	69fa      	ldr	r2, [r7, #28]
 80119a8:	4611      	mov	r1, r2
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7fa ff7c 	bl	800c8a8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80119b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119b2:	3315      	adds	r3, #21
 80119b4:	22f8      	movs	r2, #248	@ 0xf8
 80119b6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80119b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119ba:	3318      	adds	r3, #24
 80119bc:	213f      	movs	r1, #63	@ 0x3f
 80119be:	4618      	mov	r0, r3
 80119c0:	f7fa ff57 	bl	800c872 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80119c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119c6:	331a      	adds	r3, #26
 80119c8:	21ff      	movs	r1, #255	@ 0xff
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7fa ff51 	bl	800c872 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80119d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119d2:	331c      	adds	r3, #28
 80119d4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fa ff66 	bl	800c8a8 <st_dword>
		if (fmt == FS_FAT32) {
 80119dc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80119e0:	2b03      	cmp	r3, #3
 80119e2:	d132      	bne.n	8011a4a <f_mkfs+0xe4a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80119e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119e6:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 80119ea:	f7fa fd85 	bl	800c4f8 <get_fattime>
 80119ee:	4603      	mov	r3, r0
 80119f0:	4619      	mov	r1, r3
 80119f2:	4620      	mov	r0, r4
 80119f4:	f7fa ff58 	bl	800c8a8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80119f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119fa:	3324      	adds	r3, #36	@ 0x24
 80119fc:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7fa ff51 	bl	800c8a8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8011a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a08:	332c      	adds	r3, #44	@ 0x2c
 8011a0a:	2102      	movs	r1, #2
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fa ff4b 	bl	800c8a8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8011a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a14:	3330      	adds	r3, #48	@ 0x30
 8011a16:	2101      	movs	r1, #1
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f7fa ff2a 	bl	800c872 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8011a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a20:	3332      	adds	r3, #50	@ 0x32
 8011a22:	2106      	movs	r1, #6
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7fa ff24 	bl	800c872 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8011a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a2c:	3340      	adds	r3, #64	@ 0x40
 8011a2e:	2280      	movs	r2, #128	@ 0x80
 8011a30:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8011a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a34:	3342      	adds	r3, #66	@ 0x42
 8011a36:	2229      	movs	r2, #41	@ 0x29
 8011a38:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8011a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a3c:	3347      	adds	r3, #71	@ 0x47
 8011a3e:	2213      	movs	r2, #19
 8011a40:	4979      	ldr	r1, [pc, #484]	@ (8011c28 <f_mkfs+0x1028>)
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fa ffe4 	bl	800ca10 <mem_cpy>
 8011a48:	e021      	b.n	8011a8e <f_mkfs+0xe8e>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8011a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a4c:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8011a50:	f7fa fd52 	bl	800c4f8 <get_fattime>
 8011a54:	4603      	mov	r3, r0
 8011a56:	4619      	mov	r1, r3
 8011a58:	4620      	mov	r0, r4
 8011a5a:	f7fa ff25 	bl	800c8a8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8011a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a60:	3316      	adds	r3, #22
 8011a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011a66:	b292      	uxth	r2, r2
 8011a68:	4611      	mov	r1, r2
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fa ff01 	bl	800c872 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8011a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a72:	3324      	adds	r3, #36	@ 0x24
 8011a74:	2280      	movs	r2, #128	@ 0x80
 8011a76:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8011a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a7a:	3326      	adds	r3, #38	@ 0x26
 8011a7c:	2229      	movs	r2, #41	@ 0x29
 8011a7e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8011a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a82:	332b      	adds	r3, #43	@ 0x2b
 8011a84:	2213      	movs	r2, #19
 8011a86:	4969      	ldr	r1, [pc, #420]	@ (8011c2c <f_mkfs+0x102c>)
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f7fa ffc1 	bl	800ca10 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8011a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a90:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011a94:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fa feea 	bl	800c872 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8011a9e:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011aa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011aa8:	f7fa fd8e 	bl	800c5c8 <disk_write>
 8011aac:	4603      	mov	r3, r0
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d001      	beq.n	8011ab6 <f_mkfs+0xeb6>
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e180      	b.n	8011db8 <f_mkfs+0x11b8>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8011ab6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011aba:	2b03      	cmp	r3, #3
 8011abc:	d141      	bne.n	8011b42 <f_mkfs+0xf42>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8011abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ac0:	1d9a      	adds	r2, r3, #6
 8011ac2:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011aca:	f7fa fd7d 	bl	800c5c8 <disk_write>
			mem_set(buf, 0, ss);
 8011ace:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011ad8:	f7fa ffbb 	bl	800ca52 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8011adc:	4954      	ldr	r1, [pc, #336]	@ (8011c30 <f_mkfs+0x1030>)
 8011ade:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011ae0:	f7fa fee2 	bl	800c8a8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8011ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ae6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011aea:	4952      	ldr	r1, [pc, #328]	@ (8011c34 <f_mkfs+0x1034>)
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fa fedb 	bl	800c8a8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8011af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011af4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011afa:	3b01      	subs	r3, #1
 8011afc:	4619      	mov	r1, r3
 8011afe:	4610      	mov	r0, r2
 8011b00:	f7fa fed2 	bl	800c8a8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8011b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b06:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011b0a:	2102      	movs	r1, #2
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7fa fecb 	bl	800c8a8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8011b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b14:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011b18:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fa fea8 	bl	800c872 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8011b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b24:	1dda      	adds	r2, r3, #7
 8011b26:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011b2e:	f7fa fd4b 	bl	800c5c8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8011b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b34:	1c5a      	adds	r2, r3, #1
 8011b36:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011b3e:	f7fa fd43 	bl	800c5c8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8011b42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b44:	2100      	movs	r1, #0
 8011b46:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011b48:	f7fa ff83 	bl	800ca52 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8011b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011b50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8011b54:	2300      	movs	r3, #0
 8011b56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011b58:	e059      	b.n	8011c0e <f_mkfs+0x100e>
			if (fmt == FS_FAT32) {
 8011b5a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011b5e:	2b03      	cmp	r3, #3
 8011b60:	d113      	bne.n	8011b8a <f_mkfs+0xf8a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8011b62:	f06f 0107 	mvn.w	r1, #7
 8011b66:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011b68:	f7fa fe9e 	bl	800c8a8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8011b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b6e:	3304      	adds	r3, #4
 8011b70:	f04f 31ff 	mov.w	r1, #4294967295
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7fa fe97 	bl	800c8a8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8011b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b7c:	3308      	adds	r3, #8
 8011b7e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7fa fe90 	bl	800c8a8 <st_dword>
 8011b88:	e00b      	b.n	8011ba2 <f_mkfs+0xfa2>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8011b8a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011b8e:	2b01      	cmp	r3, #1
 8011b90:	d101      	bne.n	8011b96 <f_mkfs+0xf96>
 8011b92:	4b29      	ldr	r3, [pc, #164]	@ (8011c38 <f_mkfs+0x1038>)
 8011b94:	e001      	b.n	8011b9a <f_mkfs+0xf9a>
 8011b96:	f06f 0307 	mvn.w	r3, #7
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011b9e:	f7fa fe83 	bl	800c8a8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8011ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8011baa:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	bf28      	it	cs
 8011bb4:	4613      	movcs	r3, r2
 8011bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011bba:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8011bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011bc2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011bc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011bc8:	f7fa fcfe 	bl	800c5c8 <disk_write>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d001      	beq.n	8011bd6 <f_mkfs+0xfd6>
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	e0f0      	b.n	8011db8 <f_mkfs+0x11b8>
				mem_set(buf, 0, ss);
 8011bd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011bda:	461a      	mov	r2, r3
 8011bdc:	2100      	movs	r1, #0
 8011bde:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011be0:	f7fa ff37 	bl	800ca52 <mem_set>
				sect += n; nsect -= n;
 8011be4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011bec:	4413      	add	r3, r2
 8011bee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011bf2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011bfa:	1ad3      	subs	r3, r2, r3
 8011bfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			} while (nsect);
 8011c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d1d0      	bne.n	8011baa <f_mkfs+0xfaa>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8011c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011c0a:	3301      	adds	r3, #1
 8011c0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011c0e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d3a1      	bcc.n	8011b5a <f_mkfs+0xf5a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8011c16:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011c1a:	2b03      	cmp	r3, #3
 8011c1c:	d10e      	bne.n	8011c3c <f_mkfs+0x103c>
 8011c1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011c22:	e00c      	b.n	8011c3e <f_mkfs+0x103e>
 8011c24:	08016518 	.word	0x08016518
 8011c28:	08016524 	.word	0x08016524
 8011c2c:	08016538 	.word	0x08016538
 8011c30:	41615252 	.word	0x41615252
 8011c34:	61417272 	.word	0x61417272
 8011c38:	00fffff8 	.word	0x00fffff8
 8011c3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011c3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8011c42:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	bf28      	it	cs
 8011c4c:	4613      	movcs	r3, r2
 8011c4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011c52:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8011c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011c5a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011c5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011c60:	f7fa fcb2 	bl	800c5c8 <disk_write>
 8011c64:	4603      	mov	r3, r0
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d001      	beq.n	8011c6e <f_mkfs+0x106e>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	e0a4      	b.n	8011db8 <f_mkfs+0x11b8>
			sect += n; nsect -= n;
 8011c6e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011c76:	4413      	add	r3, r2
 8011c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011c7c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011c84:	1ad3      	subs	r3, r2, r3
 8011c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		} while (nsect);
 8011c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d1d7      	bne.n	8011c42 <f_mkfs+0x1042>
	}

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
 8011c92:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011c96:	2b04      	cmp	r3, #4
 8011c98:	d103      	bne.n	8011ca2 <f_mkfs+0x10a2>
		sys = 0x07;			/* HPFS/NTFS/exFAT */
 8011c9a:	2307      	movs	r3, #7
 8011c9c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011ca0:	e018      	b.n	8011cd4 <f_mkfs+0x10d4>
	} else {
		if (fmt == FS_FAT32) {
 8011ca2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011ca6:	2b03      	cmp	r3, #3
 8011ca8:	d103      	bne.n	8011cb2 <f_mkfs+0x10b2>
			sys = 0x0C;		/* FAT32X */
 8011caa:	230c      	movs	r3, #12
 8011cac:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011cb0:	e010      	b.n	8011cd4 <f_mkfs+0x10d4>
		} else {
			if (sz_vol >= 0x10000) {
 8011cb2:	69fb      	ldr	r3, [r7, #28]
 8011cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011cb8:	d303      	bcc.n	8011cc2 <f_mkfs+0x10c2>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8011cba:	2306      	movs	r3, #6
 8011cbc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011cc0:	e008      	b.n	8011cd4 <f_mkfs+0x10d4>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8011cc2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011cc6:	2b02      	cmp	r3, #2
 8011cc8:	d101      	bne.n	8011cce <f_mkfs+0x10ce>
 8011cca:	2304      	movs	r3, #4
 8011ccc:	e000      	b.n	8011cd0 <f_mkfs+0x10d0>
 8011cce:	2301      	movs	r3, #1
 8011cd0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8011cd4:	7afb      	ldrb	r3, [r7, #11]
 8011cd6:	f003 0308 	and.w	r3, r3, #8
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d15f      	bne.n	8011d9e <f_mkfs+0x119e>
			mem_set(buf, 0, ss);
 8011cde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011ce8:	f7fa feb3 	bl	800ca52 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8011cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011cee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011cf2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7fa fdbb 	bl	800c872 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8011cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011cfe:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011d02:	627b      	str	r3, [r7, #36]	@ 0x24
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8011d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d06:	2200      	movs	r2, #0
 8011d08:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8011d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	2201      	movs	r2, #1
 8011d10:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8011d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d14:	3302      	adds	r3, #2
 8011d16:	2201      	movs	r2, #1
 8011d18:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8011d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d1c:	3303      	adds	r3, #3
 8011d1e:	2200      	movs	r2, #0
 8011d20:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8011d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d24:	3304      	adds	r3, #4
 8011d26:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8011d2a:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8011d2c:	69fa      	ldr	r2, [r7, #28]
 8011d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d30:	441a      	add	r2, r3
 8011d32:	4b23      	ldr	r3, [pc, #140]	@ (8011dc0 <f_mkfs+0x11c0>)
 8011d34:	fba3 1302 	umull	r1, r3, r3, r2
 8011d38:	1ad2      	subs	r2, r2, r3
 8011d3a:	0852      	lsrs	r2, r2, #1
 8011d3c:	4413      	add	r3, r2
 8011d3e:	0b5b      	lsrs	r3, r3, #13
 8011d40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			pte[PTE_EdHead] = 254;				/* End head */
 8011d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d46:	3305      	adds	r3, #5
 8011d48:	22fe      	movs	r2, #254	@ 0xfe
 8011d4a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8011d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011d50:	089b      	lsrs	r3, r3, #2
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d56:	3306      	adds	r3, #6
 8011d58:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8011d5c:	b2d2      	uxtb	r2, r2
 8011d5e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8011d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d62:	3307      	adds	r3, #7
 8011d64:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011d68:	b2d2      	uxtb	r2, r2
 8011d6a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8011d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d6e:	3308      	adds	r3, #8
 8011d70:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7fa fd98 	bl	800c8a8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8011d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d7a:	330c      	adds	r3, #12
 8011d7c:	69fa      	ldr	r2, [r7, #28]
 8011d7e:	4611      	mov	r1, r2
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7fa fd91 	bl	800c8a8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8011d86:	f897 004b 	ldrb.w	r0, [r7, #75]	@ 0x4b
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011d90:	f7fa fc1a 	bl	800c5c8 <disk_write>
 8011d94:	4603      	mov	r3, r0
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d001      	beq.n	8011d9e <f_mkfs+0x119e>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e00c      	b.n	8011db8 <f_mkfs+0x11b8>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8011d9e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8011da2:	2200      	movs	r2, #0
 8011da4:	2100      	movs	r1, #0
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7fa fc2e 	bl	800c608 <disk_ioctl>
 8011dac:	4603      	mov	r3, r0
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d001      	beq.n	8011db6 <f_mkfs+0x11b6>
 8011db2:	2301      	movs	r3, #1
 8011db4:	e000      	b.n	8011db8 <f_mkfs+0x11b8>

	return FR_OK;
 8011db6:	2300      	movs	r3, #0
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	37a4      	adds	r7, #164	@ 0xa4
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd90      	pop	{r4, r7, pc}
 8011dc0:	0515565b 	.word	0x0515565b

08011dc4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b087      	sub	sp, #28
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	60f8      	str	r0, [r7, #12]
 8011dcc:	60b9      	str	r1, [r7, #8]
 8011dce:	4613      	mov	r3, r2
 8011dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011dda:	4b1f      	ldr	r3, [pc, #124]	@ (8011e58 <FATFS_LinkDriverEx+0x94>)
 8011ddc:	7a5b      	ldrb	r3, [r3, #9]
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d131      	bne.n	8011e48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011de4:	4b1c      	ldr	r3, [pc, #112]	@ (8011e58 <FATFS_LinkDriverEx+0x94>)
 8011de6:	7a5b      	ldrb	r3, [r3, #9]
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	461a      	mov	r2, r3
 8011dec:	4b1a      	ldr	r3, [pc, #104]	@ (8011e58 <FATFS_LinkDriverEx+0x94>)
 8011dee:	2100      	movs	r1, #0
 8011df0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011df2:	4b19      	ldr	r3, [pc, #100]	@ (8011e58 <FATFS_LinkDriverEx+0x94>)
 8011df4:	7a5b      	ldrb	r3, [r3, #9]
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	4a17      	ldr	r2, [pc, #92]	@ (8011e58 <FATFS_LinkDriverEx+0x94>)
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	4413      	add	r3, r2
 8011dfe:	68fa      	ldr	r2, [r7, #12]
 8011e00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011e02:	4b15      	ldr	r3, [pc, #84]	@ (8011e58 <FATFS_LinkDriverEx+0x94>)
 8011e04:	7a5b      	ldrb	r3, [r3, #9]
 8011e06:	b2db      	uxtb	r3, r3
 8011e08:	461a      	mov	r2, r3
 8011e0a:	4b13      	ldr	r3, [pc, #76]	@ (8011e58 <FATFS_LinkDriverEx+0x94>)
 8011e0c:	4413      	add	r3, r2
 8011e0e:	79fa      	ldrb	r2, [r7, #7]
 8011e10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011e12:	4b11      	ldr	r3, [pc, #68]	@ (8011e58 <FATFS_LinkDriverEx+0x94>)
 8011e14:	7a5b      	ldrb	r3, [r3, #9]
 8011e16:	b2db      	uxtb	r3, r3
 8011e18:	1c5a      	adds	r2, r3, #1
 8011e1a:	b2d1      	uxtb	r1, r2
 8011e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8011e58 <FATFS_LinkDriverEx+0x94>)
 8011e1e:	7251      	strb	r1, [r2, #9]
 8011e20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011e22:	7dbb      	ldrb	r3, [r7, #22]
 8011e24:	3330      	adds	r3, #48	@ 0x30
 8011e26:	b2da      	uxtb	r2, r3
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	3301      	adds	r3, #1
 8011e30:	223a      	movs	r2, #58	@ 0x3a
 8011e32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	3302      	adds	r3, #2
 8011e38:	222f      	movs	r2, #47	@ 0x2f
 8011e3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	3303      	adds	r3, #3
 8011e40:	2200      	movs	r2, #0
 8011e42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011e44:	2300      	movs	r3, #0
 8011e46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	371c      	adds	r7, #28
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr
 8011e56:	bf00      	nop
 8011e58:	200054cc 	.word	0x200054cc

08011e5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b082      	sub	sp, #8
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011e66:	2200      	movs	r2, #0
 8011e68:	6839      	ldr	r1, [r7, #0]
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f7ff ffaa 	bl	8011dc4 <FATFS_LinkDriverEx>
 8011e70:	4603      	mov	r3, r0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
	...

08011e7c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b085      	sub	sp, #20
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	4603      	mov	r3, r0
 8011e84:	6039      	str	r1, [r7, #0]
 8011e86:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011e88:	88fb      	ldrh	r3, [r7, #6]
 8011e8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8011e8c:	d802      	bhi.n	8011e94 <ff_convert+0x18>
		c = chr;
 8011e8e:	88fb      	ldrh	r3, [r7, #6]
 8011e90:	81fb      	strh	r3, [r7, #14]
 8011e92:	e025      	b.n	8011ee0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d00b      	beq.n	8011eb2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011e9a:	88fb      	ldrh	r3, [r7, #6]
 8011e9c:	2bff      	cmp	r3, #255	@ 0xff
 8011e9e:	d805      	bhi.n	8011eac <ff_convert+0x30>
 8011ea0:	88fb      	ldrh	r3, [r7, #6]
 8011ea2:	3b80      	subs	r3, #128	@ 0x80
 8011ea4:	4a12      	ldr	r2, [pc, #72]	@ (8011ef0 <ff_convert+0x74>)
 8011ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011eaa:	e000      	b.n	8011eae <ff_convert+0x32>
 8011eac:	2300      	movs	r3, #0
 8011eae:	81fb      	strh	r3, [r7, #14]
 8011eb0:	e016      	b.n	8011ee0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	81fb      	strh	r3, [r7, #14]
 8011eb6:	e009      	b.n	8011ecc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011eb8:	89fb      	ldrh	r3, [r7, #14]
 8011eba:	4a0d      	ldr	r2, [pc, #52]	@ (8011ef0 <ff_convert+0x74>)
 8011ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ec0:	88fa      	ldrh	r2, [r7, #6]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d006      	beq.n	8011ed4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011ec6:	89fb      	ldrh	r3, [r7, #14]
 8011ec8:	3301      	adds	r3, #1
 8011eca:	81fb      	strh	r3, [r7, #14]
 8011ecc:	89fb      	ldrh	r3, [r7, #14]
 8011ece:	2b7f      	cmp	r3, #127	@ 0x7f
 8011ed0:	d9f2      	bls.n	8011eb8 <ff_convert+0x3c>
 8011ed2:	e000      	b.n	8011ed6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011ed4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011ed6:	89fb      	ldrh	r3, [r7, #14]
 8011ed8:	3380      	adds	r3, #128	@ 0x80
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011ee0:	89fb      	ldrh	r3, [r7, #14]
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3714      	adds	r7, #20
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop
 8011ef0:	08016638 	.word	0x08016638

08011ef4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b087      	sub	sp, #28
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	4603      	mov	r3, r0
 8011efc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011efe:	88fb      	ldrh	r3, [r7, #6]
 8011f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011f04:	d201      	bcs.n	8011f0a <ff_wtoupper+0x16>
 8011f06:	4b3e      	ldr	r3, [pc, #248]	@ (8012000 <ff_wtoupper+0x10c>)
 8011f08:	e000      	b.n	8011f0c <ff_wtoupper+0x18>
 8011f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8012004 <ff_wtoupper+0x110>)
 8011f0c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	1c9a      	adds	r2, r3, #2
 8011f12:	617a      	str	r2, [r7, #20]
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011f18:	8a7b      	ldrh	r3, [r7, #18]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d068      	beq.n	8011ff0 <ff_wtoupper+0xfc>
 8011f1e:	88fa      	ldrh	r2, [r7, #6]
 8011f20:	8a7b      	ldrh	r3, [r7, #18]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d364      	bcc.n	8011ff0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	1c9a      	adds	r2, r3, #2
 8011f2a:	617a      	str	r2, [r7, #20]
 8011f2c:	881b      	ldrh	r3, [r3, #0]
 8011f2e:	823b      	strh	r3, [r7, #16]
 8011f30:	8a3b      	ldrh	r3, [r7, #16]
 8011f32:	0a1b      	lsrs	r3, r3, #8
 8011f34:	81fb      	strh	r3, [r7, #14]
 8011f36:	8a3b      	ldrh	r3, [r7, #16]
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011f3c:	88fa      	ldrh	r2, [r7, #6]
 8011f3e:	8a79      	ldrh	r1, [r7, #18]
 8011f40:	8a3b      	ldrh	r3, [r7, #16]
 8011f42:	440b      	add	r3, r1
 8011f44:	429a      	cmp	r2, r3
 8011f46:	da49      	bge.n	8011fdc <ff_wtoupper+0xe8>
			switch (cmd) {
 8011f48:	89fb      	ldrh	r3, [r7, #14]
 8011f4a:	2b08      	cmp	r3, #8
 8011f4c:	d84f      	bhi.n	8011fee <ff_wtoupper+0xfa>
 8011f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8011f54 <ff_wtoupper+0x60>)
 8011f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f54:	08011f79 	.word	0x08011f79
 8011f58:	08011f8b 	.word	0x08011f8b
 8011f5c:	08011fa1 	.word	0x08011fa1
 8011f60:	08011fa9 	.word	0x08011fa9
 8011f64:	08011fb1 	.word	0x08011fb1
 8011f68:	08011fb9 	.word	0x08011fb9
 8011f6c:	08011fc1 	.word	0x08011fc1
 8011f70:	08011fc9 	.word	0x08011fc9
 8011f74:	08011fd1 	.word	0x08011fd1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011f78:	88fa      	ldrh	r2, [r7, #6]
 8011f7a:	8a7b      	ldrh	r3, [r7, #18]
 8011f7c:	1ad3      	subs	r3, r2, r3
 8011f7e:	005b      	lsls	r3, r3, #1
 8011f80:	697a      	ldr	r2, [r7, #20]
 8011f82:	4413      	add	r3, r2
 8011f84:	881b      	ldrh	r3, [r3, #0]
 8011f86:	80fb      	strh	r3, [r7, #6]
 8011f88:	e027      	b.n	8011fda <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011f8a:	88fa      	ldrh	r2, [r7, #6]
 8011f8c:	8a7b      	ldrh	r3, [r7, #18]
 8011f8e:	1ad3      	subs	r3, r2, r3
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	f003 0301 	and.w	r3, r3, #1
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	88fa      	ldrh	r2, [r7, #6]
 8011f9a:	1ad3      	subs	r3, r2, r3
 8011f9c:	80fb      	strh	r3, [r7, #6]
 8011f9e:	e01c      	b.n	8011fda <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011fa0:	88fb      	ldrh	r3, [r7, #6]
 8011fa2:	3b10      	subs	r3, #16
 8011fa4:	80fb      	strh	r3, [r7, #6]
 8011fa6:	e018      	b.n	8011fda <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011fa8:	88fb      	ldrh	r3, [r7, #6]
 8011faa:	3b20      	subs	r3, #32
 8011fac:	80fb      	strh	r3, [r7, #6]
 8011fae:	e014      	b.n	8011fda <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011fb0:	88fb      	ldrh	r3, [r7, #6]
 8011fb2:	3b30      	subs	r3, #48	@ 0x30
 8011fb4:	80fb      	strh	r3, [r7, #6]
 8011fb6:	e010      	b.n	8011fda <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011fb8:	88fb      	ldrh	r3, [r7, #6]
 8011fba:	3b1a      	subs	r3, #26
 8011fbc:	80fb      	strh	r3, [r7, #6]
 8011fbe:	e00c      	b.n	8011fda <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011fc0:	88fb      	ldrh	r3, [r7, #6]
 8011fc2:	3308      	adds	r3, #8
 8011fc4:	80fb      	strh	r3, [r7, #6]
 8011fc6:	e008      	b.n	8011fda <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011fc8:	88fb      	ldrh	r3, [r7, #6]
 8011fca:	3b50      	subs	r3, #80	@ 0x50
 8011fcc:	80fb      	strh	r3, [r7, #6]
 8011fce:	e004      	b.n	8011fda <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011fd0:	88fb      	ldrh	r3, [r7, #6]
 8011fd2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8011fd6:	80fb      	strh	r3, [r7, #6]
 8011fd8:	bf00      	nop
			}
			break;
 8011fda:	e008      	b.n	8011fee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011fdc:	89fb      	ldrh	r3, [r7, #14]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d195      	bne.n	8011f0e <ff_wtoupper+0x1a>
 8011fe2:	8a3b      	ldrh	r3, [r7, #16]
 8011fe4:	005b      	lsls	r3, r3, #1
 8011fe6:	697a      	ldr	r2, [r7, #20]
 8011fe8:	4413      	add	r3, r2
 8011fea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011fec:	e78f      	b.n	8011f0e <ff_wtoupper+0x1a>
			break;
 8011fee:	bf00      	nop
	}

	return chr;
 8011ff0:	88fb      	ldrh	r3, [r7, #6]
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	371c      	adds	r7, #28
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr
 8011ffe:	bf00      	nop
 8012000:	08016738 	.word	0x08016738
 8012004:	0801692c 	.word	0x0801692c

08012008 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b086      	sub	sp, #24
 801200c:	af00      	add	r7, sp, #0
 801200e:	4603      	mov	r3, r0
 8012010:	6039      	str	r1, [r7, #0]
 8012012:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8012014:	2300      	movs	r3, #0
 8012016:	60fb      	str	r3, [r7, #12]
 8012018:	2300      	movs	r3, #0
 801201a:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801201c:	f107 030c 	add.w	r3, r7, #12
 8012020:	2101      	movs	r1, #1
 8012022:	4618      	mov	r0, r3
 8012024:	f000 f900 	bl	8012228 <osSemaphoreCreate>
 8012028:	4602      	mov	r2, r0
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	bf14      	ite	ne
 8012036:	2301      	movne	r3, #1
 8012038:	2300      	moveq	r3, #0
 801203a:	b2db      	uxtb	r3, r3
 801203c:	617b      	str	r3, [r7, #20]

    return ret;
 801203e:	697b      	ldr	r3, [r7, #20]
}
 8012040:	4618      	mov	r0, r3
 8012042:	3718      	adds	r7, #24
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f000 f9ad 	bl	80123b0 <osSemaphoreDelete>
#endif
    return 1;
 8012056:	2301      	movs	r3, #1
}
 8012058:	4618      	mov	r0, r3
 801205a:	3708      	adds	r7, #8
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012068:	2300      	movs	r3, #0
 801206a:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801206c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 f919 	bl	80122a8 <osSemaphoreWait>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d101      	bne.n	8012080 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801207c:	2301      	movs	r3, #1
 801207e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012080:	68fb      	ldr	r3, [r7, #12]
}
 8012082:	4618      	mov	r0, r3
 8012084:	3710      	adds	r7, #16
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}

0801208a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801208a:	b580      	push	{r7, lr}
 801208c:	b082      	sub	sp, #8
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f000 f956 	bl	8012344 <osSemaphoreRelease>
#endif
}
 8012098:	bf00      	nop
 801209a:	3708      	adds	r7, #8
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}

080120a0 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f002 fe2d 	bl	8014d08 <pvPortMalloc>
 80120ae:	4603      	mov	r3, r0
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3708      	adds	r7, #8
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f002 fef3 	bl	8014eac <vPortFree>
}
 80120c6:	bf00      	nop
 80120c8:	3708      	adds	r7, #8
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}

080120ce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80120ce:	b480      	push	{r7}
 80120d0:	b085      	sub	sp, #20
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	4603      	mov	r3, r0
 80120d6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80120d8:	2300      	movs	r3, #0
 80120da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80120dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120e0:	2b84      	cmp	r3, #132	@ 0x84
 80120e2:	d005      	beq.n	80120f0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80120e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	4413      	add	r3, r2
 80120ec:	3303      	adds	r3, #3
 80120ee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80120f0:	68fb      	ldr	r3, [r7, #12]
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	3714      	adds	r7, #20
 80120f6:	46bd      	mov	sp, r7
 80120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fc:	4770      	bx	lr

080120fe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80120fe:	b480      	push	{r7}
 8012100:	b083      	sub	sp, #12
 8012102:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012104:	f3ef 8305 	mrs	r3, IPSR
 8012108:	607b      	str	r3, [r7, #4]
  return(result);
 801210a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801210c:	2b00      	cmp	r3, #0
 801210e:	bf14      	ite	ne
 8012110:	2301      	movne	r3, #1
 8012112:	2300      	moveq	r3, #0
 8012114:	b2db      	uxtb	r3, r3
}
 8012116:	4618      	mov	r0, r3
 8012118:	370c      	adds	r7, #12
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr

08012122 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012122:	b580      	push	{r7, lr}
 8012124:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012126:	f001 fcf3 	bl	8013b10 <vTaskStartScheduler>
  
  return osOK;
 801212a:	2300      	movs	r3, #0
}
 801212c:	4618      	mov	r0, r3
 801212e:	bd80      	pop	{r7, pc}

08012130 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8012134:	f002 f968 	bl	8014408 <xTaskGetSchedulerState>
 8012138:	4603      	mov	r3, r0
 801213a:	2b01      	cmp	r3, #1
 801213c:	d101      	bne.n	8012142 <osKernelRunning+0x12>
    return 0;
 801213e:	2300      	movs	r3, #0
 8012140:	e000      	b.n	8012144 <osKernelRunning+0x14>
  else
    return 1;
 8012142:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8012144:	4618      	mov	r0, r3
 8012146:	bd80      	pop	{r7, pc}

08012148 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801214c:	f7ff ffd7 	bl	80120fe <inHandlerMode>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d003      	beq.n	801215e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8012156:	f001 fe07 	bl	8013d68 <xTaskGetTickCountFromISR>
 801215a:	4603      	mov	r3, r0
 801215c:	e002      	b.n	8012164 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801215e:	f001 fdf3 	bl	8013d48 <xTaskGetTickCount>
 8012162:	4603      	mov	r3, r0
  }
}
 8012164:	4618      	mov	r0, r3
 8012166:	bd80      	pop	{r7, pc}

08012168 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801216a:	b089      	sub	sp, #36	@ 0x24
 801216c:	af04      	add	r7, sp, #16
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	695b      	ldr	r3, [r3, #20]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d020      	beq.n	80121bc <osThreadCreate+0x54>
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	699b      	ldr	r3, [r3, #24]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d01c      	beq.n	80121bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	685c      	ldr	r4, [r3, #4]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	691e      	ldr	r6, [r3, #16]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012194:	4618      	mov	r0, r3
 8012196:	f7ff ff9a 	bl	80120ce <makeFreeRtosPriority>
 801219a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	695b      	ldr	r3, [r3, #20]
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80121a4:	9202      	str	r2, [sp, #8]
 80121a6:	9301      	str	r3, [sp, #4]
 80121a8:	9100      	str	r1, [sp, #0]
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	4632      	mov	r2, r6
 80121ae:	4629      	mov	r1, r5
 80121b0:	4620      	mov	r0, r4
 80121b2:	f001 fab3 	bl	801371c <xTaskCreateStatic>
 80121b6:	4603      	mov	r3, r0
 80121b8:	60fb      	str	r3, [r7, #12]
 80121ba:	e01c      	b.n	80121f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	685c      	ldr	r4, [r3, #4]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80121c8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7ff ff7c 	bl	80120ce <makeFreeRtosPriority>
 80121d6:	4602      	mov	r2, r0
 80121d8:	f107 030c 	add.w	r3, r7, #12
 80121dc:	9301      	str	r3, [sp, #4]
 80121de:	9200      	str	r2, [sp, #0]
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	4632      	mov	r2, r6
 80121e4:	4629      	mov	r1, r5
 80121e6:	4620      	mov	r0, r4
 80121e8:	f001 fafe 	bl	80137e8 <xTaskCreate>
 80121ec:	4603      	mov	r3, r0
 80121ee:	2b01      	cmp	r3, #1
 80121f0:	d001      	beq.n	80121f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80121f2:	2300      	movs	r3, #0
 80121f4:	e000      	b.n	80121f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80121f6:	68fb      	ldr	r3, [r7, #12]
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3714      	adds	r7, #20
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012200 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d001      	beq.n	8012216 <osDelay+0x16>
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	e000      	b.n	8012218 <osDelay+0x18>
 8012216:	2301      	movs	r3, #1
 8012218:	4618      	mov	r0, r3
 801221a:	f001 fc41 	bl	8013aa0 <vTaskDelay>
  
  return osOK;
 801221e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012220:	4618      	mov	r0, r3
 8012222:	3710      	adds	r7, #16
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012228:	b580      	push	{r7, lr}
 801222a:	b086      	sub	sp, #24
 801222c:	af02      	add	r7, sp, #8
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d016      	beq.n	8012268 <osSemaphoreCreate+0x40>
    if (count == 1) {
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	2b01      	cmp	r3, #1
 801223e:	d10a      	bne.n	8012256 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	2203      	movs	r2, #3
 8012246:	9200      	str	r2, [sp, #0]
 8012248:	2200      	movs	r2, #0
 801224a:	2100      	movs	r1, #0
 801224c:	2001      	movs	r0, #1
 801224e:	f000 fabf 	bl	80127d0 <xQueueGenericCreateStatic>
 8012252:	4603      	mov	r3, r0
 8012254:	e023      	b.n	801229e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8012256:	6838      	ldr	r0, [r7, #0]
 8012258:	6839      	ldr	r1, [r7, #0]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	461a      	mov	r2, r3
 8012260:	f000 fb9f 	bl	80129a2 <xQueueCreateCountingSemaphoreStatic>
 8012264:	4603      	mov	r3, r0
 8012266:	e01a      	b.n	801229e <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	2b01      	cmp	r3, #1
 801226c:	d110      	bne.n	8012290 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 801226e:	2203      	movs	r2, #3
 8012270:	2100      	movs	r1, #0
 8012272:	2001      	movs	r0, #1
 8012274:	f000 fb33 	bl	80128de <xQueueGenericCreate>
 8012278:	60f8      	str	r0, [r7, #12]
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d005      	beq.n	801228c <osSemaphoreCreate+0x64>
 8012280:	2300      	movs	r3, #0
 8012282:	2200      	movs	r2, #0
 8012284:	2100      	movs	r1, #0
 8012286:	68f8      	ldr	r0, [r7, #12]
 8012288:	f000 fc02 	bl	8012a90 <xQueueGenericSend>
      return sema;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	e006      	b.n	801229e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	683a      	ldr	r2, [r7, #0]
 8012294:	4611      	mov	r1, r2
 8012296:	4618      	mov	r0, r3
 8012298:	f000 fbc0 	bl	8012a1c <xQueueCreateCountingSemaphore>
 801229c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3710      	adds	r7, #16
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}
	...

080122a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80122b2:	2300      	movs	r3, #0
 80122b4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d101      	bne.n	80122c0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80122bc:	2380      	movs	r3, #128	@ 0x80
 80122be:	e03a      	b.n	8012336 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80122c0:	2300      	movs	r3, #0
 80122c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ca:	d103      	bne.n	80122d4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80122cc:	f04f 33ff 	mov.w	r3, #4294967295
 80122d0:	60fb      	str	r3, [r7, #12]
 80122d2:	e009      	b.n	80122e8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d006      	beq.n	80122e8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d101      	bne.n	80122e8 <osSemaphoreWait+0x40>
      ticks = 1;
 80122e4:	2301      	movs	r3, #1
 80122e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80122e8:	f7ff ff09 	bl	80120fe <inHandlerMode>
 80122ec:	4603      	mov	r3, r0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d017      	beq.n	8012322 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80122f2:	f107 0308 	add.w	r3, r7, #8
 80122f6:	461a      	mov	r2, r3
 80122f8:	2100      	movs	r1, #0
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f001 f80e 	bl	801331c <xQueueReceiveFromISR>
 8012300:	4603      	mov	r3, r0
 8012302:	2b01      	cmp	r3, #1
 8012304:	d001      	beq.n	801230a <osSemaphoreWait+0x62>
      return osErrorOS;
 8012306:	23ff      	movs	r3, #255	@ 0xff
 8012308:	e015      	b.n	8012336 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d011      	beq.n	8012334 <osSemaphoreWait+0x8c>
 8012310:	4b0b      	ldr	r3, [pc, #44]	@ (8012340 <osSemaphoreWait+0x98>)
 8012312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012316:	601a      	str	r2, [r3, #0]
 8012318:	f3bf 8f4f 	dsb	sy
 801231c:	f3bf 8f6f 	isb	sy
 8012320:	e008      	b.n	8012334 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012322:	68f9      	ldr	r1, [r7, #12]
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f000 fee1 	bl	80130ec <xQueueSemaphoreTake>
 801232a:	4603      	mov	r3, r0
 801232c:	2b01      	cmp	r3, #1
 801232e:	d001      	beq.n	8012334 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012330:	23ff      	movs	r3, #255	@ 0xff
 8012332:	e000      	b.n	8012336 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012334:	2300      	movs	r3, #0
}
 8012336:	4618      	mov	r0, r3
 8012338:	3710      	adds	r7, #16
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	e000ed04 	.word	0xe000ed04

08012344 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b084      	sub	sp, #16
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801234c:	2300      	movs	r3, #0
 801234e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012350:	2300      	movs	r3, #0
 8012352:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012354:	f7ff fed3 	bl	80120fe <inHandlerMode>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d016      	beq.n	801238c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801235e:	f107 0308 	add.w	r3, r7, #8
 8012362:	4619      	mov	r1, r3
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f000 fd40 	bl	8012dea <xQueueGiveFromISR>
 801236a:	4603      	mov	r3, r0
 801236c:	2b01      	cmp	r3, #1
 801236e:	d001      	beq.n	8012374 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012370:	23ff      	movs	r3, #255	@ 0xff
 8012372:	e017      	b.n	80123a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d013      	beq.n	80123a2 <osSemaphoreRelease+0x5e>
 801237a:	4b0c      	ldr	r3, [pc, #48]	@ (80123ac <osSemaphoreRelease+0x68>)
 801237c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012380:	601a      	str	r2, [r3, #0]
 8012382:	f3bf 8f4f 	dsb	sy
 8012386:	f3bf 8f6f 	isb	sy
 801238a:	e00a      	b.n	80123a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801238c:	2300      	movs	r3, #0
 801238e:	2200      	movs	r2, #0
 8012390:	2100      	movs	r1, #0
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f000 fb7c 	bl	8012a90 <xQueueGenericSend>
 8012398:	4603      	mov	r3, r0
 801239a:	2b01      	cmp	r3, #1
 801239c:	d001      	beq.n	80123a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801239e:	23ff      	movs	r3, #255	@ 0xff
 80123a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80123a2:	68fb      	ldr	r3, [r7, #12]
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	3710      	adds	r7, #16
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}
 80123ac:	e000ed04 	.word	0xe000ed04

080123b0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b082      	sub	sp, #8
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80123b8:	f7ff fea1 	bl	80120fe <inHandlerMode>
 80123bc:	4603      	mov	r3, r0
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d001      	beq.n	80123c6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80123c2:	2382      	movs	r3, #130	@ 0x82
 80123c4:	e003      	b.n	80123ce <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f001 f830 	bl	801342c <vQueueDelete>

  return osOK; 
 80123cc:	2300      	movs	r3, #0
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3708      	adds	r7, #8
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}

080123d6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80123d6:	b590      	push	{r4, r7, lr}
 80123d8:	b085      	sub	sp, #20
 80123da:	af02      	add	r7, sp, #8
 80123dc:	6078      	str	r0, [r7, #4]
 80123de:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	689b      	ldr	r3, [r3, #8]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d011      	beq.n	801240c <osMessageCreate+0x36>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d00d      	beq.n	801240c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	6818      	ldr	r0, [r3, #0]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6859      	ldr	r1, [r3, #4]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	689a      	ldr	r2, [r3, #8]
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	68db      	ldr	r3, [r3, #12]
 8012400:	2400      	movs	r4, #0
 8012402:	9400      	str	r4, [sp, #0]
 8012404:	f000 f9e4 	bl	80127d0 <xQueueGenericCreateStatic>
 8012408:	4603      	mov	r3, r0
 801240a:	e008      	b.n	801241e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6818      	ldr	r0, [r3, #0]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	2200      	movs	r2, #0
 8012416:	4619      	mov	r1, r3
 8012418:	f000 fa61 	bl	80128de <xQueueGenericCreate>
 801241c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801241e:	4618      	mov	r0, r3
 8012420:	370c      	adds	r7, #12
 8012422:	46bd      	mov	sp, r7
 8012424:	bd90      	pop	{r4, r7, pc}
	...

08012428 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b086      	sub	sp, #24
 801242c:	af00      	add	r7, sp, #0
 801242e:	60f8      	str	r0, [r7, #12]
 8012430:	60b9      	str	r1, [r7, #8]
 8012432:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012434:	2300      	movs	r3, #0
 8012436:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d101      	bne.n	8012446 <osMessagePut+0x1e>
    ticks = 1;
 8012442:	2301      	movs	r3, #1
 8012444:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012446:	f7ff fe5a 	bl	80120fe <inHandlerMode>
 801244a:	4603      	mov	r3, r0
 801244c:	2b00      	cmp	r3, #0
 801244e:	d018      	beq.n	8012482 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8012450:	f107 0210 	add.w	r2, r7, #16
 8012454:	f107 0108 	add.w	r1, r7, #8
 8012458:	2300      	movs	r3, #0
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f000 fc22 	bl	8012ca4 <xQueueGenericSendFromISR>
 8012460:	4603      	mov	r3, r0
 8012462:	2b01      	cmp	r3, #1
 8012464:	d001      	beq.n	801246a <osMessagePut+0x42>
      return osErrorOS;
 8012466:	23ff      	movs	r3, #255	@ 0xff
 8012468:	e018      	b.n	801249c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d014      	beq.n	801249a <osMessagePut+0x72>
 8012470:	4b0c      	ldr	r3, [pc, #48]	@ (80124a4 <osMessagePut+0x7c>)
 8012472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012476:	601a      	str	r2, [r3, #0]
 8012478:	f3bf 8f4f 	dsb	sy
 801247c:	f3bf 8f6f 	isb	sy
 8012480:	e00b      	b.n	801249a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8012482:	f107 0108 	add.w	r1, r7, #8
 8012486:	2300      	movs	r3, #0
 8012488:	697a      	ldr	r2, [r7, #20]
 801248a:	68f8      	ldr	r0, [r7, #12]
 801248c:	f000 fb00 	bl	8012a90 <xQueueGenericSend>
 8012490:	4603      	mov	r3, r0
 8012492:	2b01      	cmp	r3, #1
 8012494:	d001      	beq.n	801249a <osMessagePut+0x72>
      return osErrorOS;
 8012496:	23ff      	movs	r3, #255	@ 0xff
 8012498:	e000      	b.n	801249c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801249a:	2300      	movs	r3, #0
}
 801249c:	4618      	mov	r0, r3
 801249e:	3718      	adds	r7, #24
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	e000ed04 	.word	0xe000ed04

080124a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80124a8:	b590      	push	{r4, r7, lr}
 80124aa:	b08b      	sub	sp, #44	@ 0x2c
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80124b8:	2300      	movs	r3, #0
 80124ba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d10a      	bne.n	80124d8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80124c2:	2380      	movs	r3, #128	@ 0x80
 80124c4:	617b      	str	r3, [r7, #20]
    return event;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	461c      	mov	r4, r3
 80124ca:	f107 0314 	add.w	r3, r7, #20
 80124ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80124d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80124d6:	e054      	b.n	8012582 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80124d8:	2300      	movs	r3, #0
 80124da:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80124dc:	2300      	movs	r3, #0
 80124de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124e6:	d103      	bne.n	80124f0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80124e8:	f04f 33ff 	mov.w	r3, #4294967295
 80124ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80124ee:	e009      	b.n	8012504 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d006      	beq.n	8012504 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80124fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d101      	bne.n	8012504 <osMessageGet+0x5c>
      ticks = 1;
 8012500:	2301      	movs	r3, #1
 8012502:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012504:	f7ff fdfb 	bl	80120fe <inHandlerMode>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d01c      	beq.n	8012548 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801250e:	f107 0220 	add.w	r2, r7, #32
 8012512:	f107 0314 	add.w	r3, r7, #20
 8012516:	3304      	adds	r3, #4
 8012518:	4619      	mov	r1, r3
 801251a:	68b8      	ldr	r0, [r7, #8]
 801251c:	f000 fefe 	bl	801331c <xQueueReceiveFromISR>
 8012520:	4603      	mov	r3, r0
 8012522:	2b01      	cmp	r3, #1
 8012524:	d102      	bne.n	801252c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012526:	2310      	movs	r3, #16
 8012528:	617b      	str	r3, [r7, #20]
 801252a:	e001      	b.n	8012530 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801252c:	2300      	movs	r3, #0
 801252e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012530:	6a3b      	ldr	r3, [r7, #32]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d01d      	beq.n	8012572 <osMessageGet+0xca>
 8012536:	4b15      	ldr	r3, [pc, #84]	@ (801258c <osMessageGet+0xe4>)
 8012538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801253c:	601a      	str	r2, [r3, #0]
 801253e:	f3bf 8f4f 	dsb	sy
 8012542:	f3bf 8f6f 	isb	sy
 8012546:	e014      	b.n	8012572 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012548:	f107 0314 	add.w	r3, r7, #20
 801254c:	3304      	adds	r3, #4
 801254e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012550:	4619      	mov	r1, r3
 8012552:	68b8      	ldr	r0, [r7, #8]
 8012554:	f000 fce2 	bl	8012f1c <xQueueReceive>
 8012558:	4603      	mov	r3, r0
 801255a:	2b01      	cmp	r3, #1
 801255c:	d102      	bne.n	8012564 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801255e:	2310      	movs	r3, #16
 8012560:	617b      	str	r3, [r7, #20]
 8012562:	e006      	b.n	8012572 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012566:	2b00      	cmp	r3, #0
 8012568:	d101      	bne.n	801256e <osMessageGet+0xc6>
 801256a:	2300      	movs	r3, #0
 801256c:	e000      	b.n	8012570 <osMessageGet+0xc8>
 801256e:	2340      	movs	r3, #64	@ 0x40
 8012570:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	461c      	mov	r4, r3
 8012576:	f107 0314 	add.w	r3, r7, #20
 801257a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801257e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8012582:	68f8      	ldr	r0, [r7, #12]
 8012584:	372c      	adds	r7, #44	@ 0x2c
 8012586:	46bd      	mov	sp, r7
 8012588:	bd90      	pop	{r4, r7, pc}
 801258a:	bf00      	nop
 801258c:	e000ed04 	.word	0xe000ed04

08012590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f103 0208 	add.w	r2, r3, #8
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f04f 32ff 	mov.w	r2, #4294967295
 80125a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f103 0208 	add.w	r2, r3, #8
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f103 0208 	add.w	r2, r3, #8
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2200      	movs	r2, #0
 80125c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80125c4:	bf00      	nop
 80125c6:	370c      	adds	r7, #12
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr

080125d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80125d0:	b480      	push	{r7}
 80125d2:	b083      	sub	sp, #12
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2200      	movs	r2, #0
 80125dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80125de:	bf00      	nop
 80125e0:	370c      	adds	r7, #12
 80125e2:	46bd      	mov	sp, r7
 80125e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e8:	4770      	bx	lr

080125ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80125ea:	b480      	push	{r7}
 80125ec:	b085      	sub	sp, #20
 80125ee:	af00      	add	r7, sp, #0
 80125f0:	6078      	str	r0, [r7, #4]
 80125f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	68fa      	ldr	r2, [r7, #12]
 80125fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	689a      	ldr	r2, [r3, #8]
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	689b      	ldr	r3, [r3, #8]
 801260c:	683a      	ldr	r2, [r7, #0]
 801260e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	683a      	ldr	r2, [r7, #0]
 8012614:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	1c5a      	adds	r2, r3, #1
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	601a      	str	r2, [r3, #0]
}
 8012626:	bf00      	nop
 8012628:	3714      	adds	r7, #20
 801262a:	46bd      	mov	sp, r7
 801262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012630:	4770      	bx	lr

08012632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012632:	b480      	push	{r7}
 8012634:	b085      	sub	sp, #20
 8012636:	af00      	add	r7, sp, #0
 8012638:	6078      	str	r0, [r7, #4]
 801263a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012648:	d103      	bne.n	8012652 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	691b      	ldr	r3, [r3, #16]
 801264e:	60fb      	str	r3, [r7, #12]
 8012650:	e00c      	b.n	801266c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	3308      	adds	r3, #8
 8012656:	60fb      	str	r3, [r7, #12]
 8012658:	e002      	b.n	8012660 <vListInsert+0x2e>
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	60fb      	str	r3, [r7, #12]
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	68ba      	ldr	r2, [r7, #8]
 8012668:	429a      	cmp	r2, r3
 801266a:	d2f6      	bcs.n	801265a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	685a      	ldr	r2, [r3, #4]
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	683a      	ldr	r2, [r7, #0]
 801267a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801267c:	683b      	ldr	r3, [r7, #0]
 801267e:	68fa      	ldr	r2, [r7, #12]
 8012680:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	683a      	ldr	r2, [r7, #0]
 8012686:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	687a      	ldr	r2, [r7, #4]
 801268c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	1c5a      	adds	r2, r3, #1
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	601a      	str	r2, [r3, #0]
}
 8012698:	bf00      	nop
 801269a:	3714      	adds	r7, #20
 801269c:	46bd      	mov	sp, r7
 801269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a2:	4770      	bx	lr

080126a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80126a4:	b480      	push	{r7}
 80126a6:	b085      	sub	sp, #20
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	691b      	ldr	r3, [r3, #16]
 80126b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	685b      	ldr	r3, [r3, #4]
 80126b6:	687a      	ldr	r2, [r7, #4]
 80126b8:	6892      	ldr	r2, [r2, #8]
 80126ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	689b      	ldr	r3, [r3, #8]
 80126c0:	687a      	ldr	r2, [r7, #4]
 80126c2:	6852      	ldr	r2, [r2, #4]
 80126c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	687a      	ldr	r2, [r7, #4]
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d103      	bne.n	80126d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	689a      	ldr	r2, [r3, #8]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2200      	movs	r2, #0
 80126dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	1e5a      	subs	r2, r3, #1
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	681b      	ldr	r3, [r3, #0]
}
 80126ec:	4618      	mov	r0, r3
 80126ee:	3714      	adds	r7, #20
 80126f0:	46bd      	mov	sp, r7
 80126f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f6:	4770      	bx	lr

080126f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d10d      	bne.n	8012728 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801270c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012710:	b672      	cpsid	i
 8012712:	f383 8811 	msr	BASEPRI, r3
 8012716:	f3bf 8f6f 	isb	sy
 801271a:	f3bf 8f4f 	dsb	sy
 801271e:	b662      	cpsie	i
 8012720:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012722:	bf00      	nop
 8012724:	bf00      	nop
 8012726:	e7fd      	b.n	8012724 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8012728:	f002 f9c0 	bl	8014aac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	681a      	ldr	r2, [r3, #0]
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012734:	68f9      	ldr	r1, [r7, #12]
 8012736:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012738:	fb01 f303 	mul.w	r3, r1, r3
 801273c:	441a      	add	r2, r3
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	2200      	movs	r2, #0
 8012746:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681a      	ldr	r2, [r3, #0]
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012758:	3b01      	subs	r3, #1
 801275a:	68f9      	ldr	r1, [r7, #12]
 801275c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801275e:	fb01 f303 	mul.w	r3, r1, r3
 8012762:	441a      	add	r2, r3
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	22ff      	movs	r2, #255	@ 0xff
 801276c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	22ff      	movs	r2, #255	@ 0xff
 8012774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d114      	bne.n	80127a8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	691b      	ldr	r3, [r3, #16]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d01a      	beq.n	80127bc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	3310      	adds	r3, #16
 801278a:	4618      	mov	r0, r3
 801278c:	f001 fc6c 	bl	8014068 <xTaskRemoveFromEventList>
 8012790:	4603      	mov	r3, r0
 8012792:	2b00      	cmp	r3, #0
 8012794:	d012      	beq.n	80127bc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012796:	4b0d      	ldr	r3, [pc, #52]	@ (80127cc <xQueueGenericReset+0xd4>)
 8012798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801279c:	601a      	str	r2, [r3, #0]
 801279e:	f3bf 8f4f 	dsb	sy
 80127a2:	f3bf 8f6f 	isb	sy
 80127a6:	e009      	b.n	80127bc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	3310      	adds	r3, #16
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7ff feef 	bl	8012590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	3324      	adds	r3, #36	@ 0x24
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7ff feea 	bl	8012590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80127bc:	f002 f9ac 	bl	8014b18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80127c0:	2301      	movs	r3, #1
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3710      	adds	r7, #16
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	e000ed04 	.word	0xe000ed04

080127d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b08e      	sub	sp, #56	@ 0x38
 80127d4:	af02      	add	r7, sp, #8
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	607a      	str	r2, [r7, #4]
 80127dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d10d      	bne.n	8012800 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80127e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127e8:	b672      	cpsid	i
 80127ea:	f383 8811 	msr	BASEPRI, r3
 80127ee:	f3bf 8f6f 	isb	sy
 80127f2:	f3bf 8f4f 	dsb	sy
 80127f6:	b662      	cpsie	i
 80127f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80127fa:	bf00      	nop
 80127fc:	bf00      	nop
 80127fe:	e7fd      	b.n	80127fc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d10d      	bne.n	8012822 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8012806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801280a:	b672      	cpsid	i
 801280c:	f383 8811 	msr	BASEPRI, r3
 8012810:	f3bf 8f6f 	isb	sy
 8012814:	f3bf 8f4f 	dsb	sy
 8012818:	b662      	cpsie	i
 801281a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801281c:	bf00      	nop
 801281e:	bf00      	nop
 8012820:	e7fd      	b.n	801281e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d002      	beq.n	801282e <xQueueGenericCreateStatic+0x5e>
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d001      	beq.n	8012832 <xQueueGenericCreateStatic+0x62>
 801282e:	2301      	movs	r3, #1
 8012830:	e000      	b.n	8012834 <xQueueGenericCreateStatic+0x64>
 8012832:	2300      	movs	r3, #0
 8012834:	2b00      	cmp	r3, #0
 8012836:	d10d      	bne.n	8012854 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8012838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801283c:	b672      	cpsid	i
 801283e:	f383 8811 	msr	BASEPRI, r3
 8012842:	f3bf 8f6f 	isb	sy
 8012846:	f3bf 8f4f 	dsb	sy
 801284a:	b662      	cpsie	i
 801284c:	623b      	str	r3, [r7, #32]
}
 801284e:	bf00      	nop
 8012850:	bf00      	nop
 8012852:	e7fd      	b.n	8012850 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d102      	bne.n	8012860 <xQueueGenericCreateStatic+0x90>
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d101      	bne.n	8012864 <xQueueGenericCreateStatic+0x94>
 8012860:	2301      	movs	r3, #1
 8012862:	e000      	b.n	8012866 <xQueueGenericCreateStatic+0x96>
 8012864:	2300      	movs	r3, #0
 8012866:	2b00      	cmp	r3, #0
 8012868:	d10d      	bne.n	8012886 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 801286a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801286e:	b672      	cpsid	i
 8012870:	f383 8811 	msr	BASEPRI, r3
 8012874:	f3bf 8f6f 	isb	sy
 8012878:	f3bf 8f4f 	dsb	sy
 801287c:	b662      	cpsie	i
 801287e:	61fb      	str	r3, [r7, #28]
}
 8012880:	bf00      	nop
 8012882:	bf00      	nop
 8012884:	e7fd      	b.n	8012882 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012886:	2348      	movs	r3, #72	@ 0x48
 8012888:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	2b48      	cmp	r3, #72	@ 0x48
 801288e:	d00d      	beq.n	80128ac <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8012890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012894:	b672      	cpsid	i
 8012896:	f383 8811 	msr	BASEPRI, r3
 801289a:	f3bf 8f6f 	isb	sy
 801289e:	f3bf 8f4f 	dsb	sy
 80128a2:	b662      	cpsie	i
 80128a4:	61bb      	str	r3, [r7, #24]
}
 80128a6:	bf00      	nop
 80128a8:	bf00      	nop
 80128aa:	e7fd      	b.n	80128a8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80128ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80128b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d00d      	beq.n	80128d4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80128b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ba:	2201      	movs	r2, #1
 80128bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80128c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80128c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128c6:	9300      	str	r3, [sp, #0]
 80128c8:	4613      	mov	r3, r2
 80128ca:	687a      	ldr	r2, [r7, #4]
 80128cc:	68b9      	ldr	r1, [r7, #8]
 80128ce:	68f8      	ldr	r0, [r7, #12]
 80128d0:	f000 f848 	bl	8012964 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80128d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80128d6:	4618      	mov	r0, r3
 80128d8:	3730      	adds	r7, #48	@ 0x30
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}

080128de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80128de:	b580      	push	{r7, lr}
 80128e0:	b08a      	sub	sp, #40	@ 0x28
 80128e2:	af02      	add	r7, sp, #8
 80128e4:	60f8      	str	r0, [r7, #12]
 80128e6:	60b9      	str	r1, [r7, #8]
 80128e8:	4613      	mov	r3, r2
 80128ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d10d      	bne.n	801290e <xQueueGenericCreate+0x30>
	__asm volatile
 80128f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128f6:	b672      	cpsid	i
 80128f8:	f383 8811 	msr	BASEPRI, r3
 80128fc:	f3bf 8f6f 	isb	sy
 8012900:	f3bf 8f4f 	dsb	sy
 8012904:	b662      	cpsie	i
 8012906:	613b      	str	r3, [r7, #16]
}
 8012908:	bf00      	nop
 801290a:	bf00      	nop
 801290c:	e7fd      	b.n	801290a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d102      	bne.n	801291a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012914:	2300      	movs	r3, #0
 8012916:	61fb      	str	r3, [r7, #28]
 8012918:	e004      	b.n	8012924 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	68ba      	ldr	r2, [r7, #8]
 801291e:	fb02 f303 	mul.w	r3, r2, r3
 8012922:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	3348      	adds	r3, #72	@ 0x48
 8012928:	4618      	mov	r0, r3
 801292a:	f002 f9ed 	bl	8014d08 <pvPortMalloc>
 801292e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d011      	beq.n	801295a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012936:	69bb      	ldr	r3, [r7, #24]
 8012938:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	3348      	adds	r3, #72	@ 0x48
 801293e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012940:	69bb      	ldr	r3, [r7, #24]
 8012942:	2200      	movs	r2, #0
 8012944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012948:	79fa      	ldrb	r2, [r7, #7]
 801294a:	69bb      	ldr	r3, [r7, #24]
 801294c:	9300      	str	r3, [sp, #0]
 801294e:	4613      	mov	r3, r2
 8012950:	697a      	ldr	r2, [r7, #20]
 8012952:	68b9      	ldr	r1, [r7, #8]
 8012954:	68f8      	ldr	r0, [r7, #12]
 8012956:	f000 f805 	bl	8012964 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801295a:	69bb      	ldr	r3, [r7, #24]
	}
 801295c:	4618      	mov	r0, r3
 801295e:	3720      	adds	r7, #32
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}

08012964 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b084      	sub	sp, #16
 8012968:	af00      	add	r7, sp, #0
 801296a:	60f8      	str	r0, [r7, #12]
 801296c:	60b9      	str	r1, [r7, #8]
 801296e:	607a      	str	r2, [r7, #4]
 8012970:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d103      	bne.n	8012980 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012978:	69bb      	ldr	r3, [r7, #24]
 801297a:	69ba      	ldr	r2, [r7, #24]
 801297c:	601a      	str	r2, [r3, #0]
 801297e:	e002      	b.n	8012986 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012980:	69bb      	ldr	r3, [r7, #24]
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012986:	69bb      	ldr	r3, [r7, #24]
 8012988:	68fa      	ldr	r2, [r7, #12]
 801298a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801298c:	69bb      	ldr	r3, [r7, #24]
 801298e:	68ba      	ldr	r2, [r7, #8]
 8012990:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012992:	2101      	movs	r1, #1
 8012994:	69b8      	ldr	r0, [r7, #24]
 8012996:	f7ff feaf 	bl	80126f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801299a:	bf00      	nop
 801299c:	3710      	adds	r7, #16
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80129a2:	b580      	push	{r7, lr}
 80129a4:	b08a      	sub	sp, #40	@ 0x28
 80129a6:	af02      	add	r7, sp, #8
 80129a8:	60f8      	str	r0, [r7, #12]
 80129aa:	60b9      	str	r1, [r7, #8]
 80129ac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d10d      	bne.n	80129d0 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 80129b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129b8:	b672      	cpsid	i
 80129ba:	f383 8811 	msr	BASEPRI, r3
 80129be:	f3bf 8f6f 	isb	sy
 80129c2:	f3bf 8f4f 	dsb	sy
 80129c6:	b662      	cpsie	i
 80129c8:	61bb      	str	r3, [r7, #24]
}
 80129ca:	bf00      	nop
 80129cc:	bf00      	nop
 80129ce:	e7fd      	b.n	80129cc <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80129d0:	68ba      	ldr	r2, [r7, #8]
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d90d      	bls.n	80129f4 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 80129d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129dc:	b672      	cpsid	i
 80129de:	f383 8811 	msr	BASEPRI, r3
 80129e2:	f3bf 8f6f 	isb	sy
 80129e6:	f3bf 8f4f 	dsb	sy
 80129ea:	b662      	cpsie	i
 80129ec:	617b      	str	r3, [r7, #20]
}
 80129ee:	bf00      	nop
 80129f0:	bf00      	nop
 80129f2:	e7fd      	b.n	80129f0 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80129f4:	2302      	movs	r3, #2
 80129f6:	9300      	str	r3, [sp, #0]
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	2100      	movs	r1, #0
 80129fe:	68f8      	ldr	r0, [r7, #12]
 8012a00:	f7ff fee6 	bl	80127d0 <xQueueGenericCreateStatic>
 8012a04:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8012a06:	69fb      	ldr	r3, [r7, #28]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d002      	beq.n	8012a12 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012a0c:	69fb      	ldr	r3, [r7, #28]
 8012a0e:	68ba      	ldr	r2, [r7, #8]
 8012a10:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012a12:	69fb      	ldr	r3, [r7, #28]
	}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3720      	adds	r7, #32
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}

08012a1c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b086      	sub	sp, #24
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d10d      	bne.n	8012a48 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8012a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a30:	b672      	cpsid	i
 8012a32:	f383 8811 	msr	BASEPRI, r3
 8012a36:	f3bf 8f6f 	isb	sy
 8012a3a:	f3bf 8f4f 	dsb	sy
 8012a3e:	b662      	cpsie	i
 8012a40:	613b      	str	r3, [r7, #16]
}
 8012a42:	bf00      	nop
 8012a44:	bf00      	nop
 8012a46:	e7fd      	b.n	8012a44 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012a48:	683a      	ldr	r2, [r7, #0]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d90d      	bls.n	8012a6c <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8012a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a54:	b672      	cpsid	i
 8012a56:	f383 8811 	msr	BASEPRI, r3
 8012a5a:	f3bf 8f6f 	isb	sy
 8012a5e:	f3bf 8f4f 	dsb	sy
 8012a62:	b662      	cpsie	i
 8012a64:	60fb      	str	r3, [r7, #12]
}
 8012a66:	bf00      	nop
 8012a68:	bf00      	nop
 8012a6a:	e7fd      	b.n	8012a68 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012a6c:	2202      	movs	r2, #2
 8012a6e:	2100      	movs	r1, #0
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f7ff ff34 	bl	80128de <xQueueGenericCreate>
 8012a76:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d002      	beq.n	8012a84 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	683a      	ldr	r2, [r7, #0]
 8012a82:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012a84:	697b      	ldr	r3, [r7, #20]
	}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3718      	adds	r7, #24
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
	...

08012a90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b08e      	sub	sp, #56	@ 0x38
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	60f8      	str	r0, [r7, #12]
 8012a98:	60b9      	str	r1, [r7, #8]
 8012a9a:	607a      	str	r2, [r7, #4]
 8012a9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d10d      	bne.n	8012ac8 <xQueueGenericSend+0x38>
	__asm volatile
 8012aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ab0:	b672      	cpsid	i
 8012ab2:	f383 8811 	msr	BASEPRI, r3
 8012ab6:	f3bf 8f6f 	isb	sy
 8012aba:	f3bf 8f4f 	dsb	sy
 8012abe:	b662      	cpsie	i
 8012ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012ac2:	bf00      	nop
 8012ac4:	bf00      	nop
 8012ac6:	e7fd      	b.n	8012ac4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d103      	bne.n	8012ad6 <xQueueGenericSend+0x46>
 8012ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d101      	bne.n	8012ada <xQueueGenericSend+0x4a>
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	e000      	b.n	8012adc <xQueueGenericSend+0x4c>
 8012ada:	2300      	movs	r3, #0
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d10d      	bne.n	8012afc <xQueueGenericSend+0x6c>
	__asm volatile
 8012ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ae4:	b672      	cpsid	i
 8012ae6:	f383 8811 	msr	BASEPRI, r3
 8012aea:	f3bf 8f6f 	isb	sy
 8012aee:	f3bf 8f4f 	dsb	sy
 8012af2:	b662      	cpsie	i
 8012af4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012af6:	bf00      	nop
 8012af8:	bf00      	nop
 8012afa:	e7fd      	b.n	8012af8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	2b02      	cmp	r3, #2
 8012b00:	d103      	bne.n	8012b0a <xQueueGenericSend+0x7a>
 8012b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b06:	2b01      	cmp	r3, #1
 8012b08:	d101      	bne.n	8012b0e <xQueueGenericSend+0x7e>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	e000      	b.n	8012b10 <xQueueGenericSend+0x80>
 8012b0e:	2300      	movs	r3, #0
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d10d      	bne.n	8012b30 <xQueueGenericSend+0xa0>
	__asm volatile
 8012b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b18:	b672      	cpsid	i
 8012b1a:	f383 8811 	msr	BASEPRI, r3
 8012b1e:	f3bf 8f6f 	isb	sy
 8012b22:	f3bf 8f4f 	dsb	sy
 8012b26:	b662      	cpsie	i
 8012b28:	623b      	str	r3, [r7, #32]
}
 8012b2a:	bf00      	nop
 8012b2c:	bf00      	nop
 8012b2e:	e7fd      	b.n	8012b2c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b30:	f001 fc6a 	bl	8014408 <xTaskGetSchedulerState>
 8012b34:	4603      	mov	r3, r0
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d102      	bne.n	8012b40 <xQueueGenericSend+0xb0>
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d101      	bne.n	8012b44 <xQueueGenericSend+0xb4>
 8012b40:	2301      	movs	r3, #1
 8012b42:	e000      	b.n	8012b46 <xQueueGenericSend+0xb6>
 8012b44:	2300      	movs	r3, #0
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d10d      	bne.n	8012b66 <xQueueGenericSend+0xd6>
	__asm volatile
 8012b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b4e:	b672      	cpsid	i
 8012b50:	f383 8811 	msr	BASEPRI, r3
 8012b54:	f3bf 8f6f 	isb	sy
 8012b58:	f3bf 8f4f 	dsb	sy
 8012b5c:	b662      	cpsie	i
 8012b5e:	61fb      	str	r3, [r7, #28]
}
 8012b60:	bf00      	nop
 8012b62:	bf00      	nop
 8012b64:	e7fd      	b.n	8012b62 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b66:	f001 ffa1 	bl	8014aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d302      	bcc.n	8012b7c <xQueueGenericSend+0xec>
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	2b02      	cmp	r3, #2
 8012b7a:	d129      	bne.n	8012bd0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b7c:	683a      	ldr	r2, [r7, #0]
 8012b7e:	68b9      	ldr	r1, [r7, #8]
 8012b80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012b82:	f000 fc91 	bl	80134a8 <prvCopyDataToQueue>
 8012b86:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d010      	beq.n	8012bb2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b92:	3324      	adds	r3, #36	@ 0x24
 8012b94:	4618      	mov	r0, r3
 8012b96:	f001 fa67 	bl	8014068 <xTaskRemoveFromEventList>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d013      	beq.n	8012bc8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8012ca0 <xQueueGenericSend+0x210>)
 8012ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ba6:	601a      	str	r2, [r3, #0]
 8012ba8:	f3bf 8f4f 	dsb	sy
 8012bac:	f3bf 8f6f 	isb	sy
 8012bb0:	e00a      	b.n	8012bc8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d007      	beq.n	8012bc8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012bb8:	4b39      	ldr	r3, [pc, #228]	@ (8012ca0 <xQueueGenericSend+0x210>)
 8012bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012bbe:	601a      	str	r2, [r3, #0]
 8012bc0:	f3bf 8f4f 	dsb	sy
 8012bc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012bc8:	f001 ffa6 	bl	8014b18 <vPortExitCritical>
				return pdPASS;
 8012bcc:	2301      	movs	r3, #1
 8012bce:	e063      	b.n	8012c98 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d103      	bne.n	8012bde <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012bd6:	f001 ff9f 	bl	8014b18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	e05c      	b.n	8012c98 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d106      	bne.n	8012bf2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012be4:	f107 0314 	add.w	r3, r7, #20
 8012be8:	4618      	mov	r0, r3
 8012bea:	f001 faa3 	bl	8014134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012bee:	2301      	movs	r3, #1
 8012bf0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012bf2:	f001 ff91 	bl	8014b18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012bf6:	f000 fff9 	bl	8013bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012bfa:	f001 ff57 	bl	8014aac <vPortEnterCritical>
 8012bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012c04:	b25b      	sxtb	r3, r3
 8012c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c0a:	d103      	bne.n	8012c14 <xQueueGenericSend+0x184>
 8012c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c0e:	2200      	movs	r2, #0
 8012c10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012c1a:	b25b      	sxtb	r3, r3
 8012c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c20:	d103      	bne.n	8012c2a <xQueueGenericSend+0x19a>
 8012c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c24:	2200      	movs	r2, #0
 8012c26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012c2a:	f001 ff75 	bl	8014b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c2e:	1d3a      	adds	r2, r7, #4
 8012c30:	f107 0314 	add.w	r3, r7, #20
 8012c34:	4611      	mov	r1, r2
 8012c36:	4618      	mov	r0, r3
 8012c38:	f001 fa92 	bl	8014160 <xTaskCheckForTimeOut>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d124      	bne.n	8012c8c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012c42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012c44:	f000 fd28 	bl	8013698 <prvIsQueueFull>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d018      	beq.n	8012c80 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c50:	3310      	adds	r3, #16
 8012c52:	687a      	ldr	r2, [r7, #4]
 8012c54:	4611      	mov	r1, r2
 8012c56:	4618      	mov	r0, r3
 8012c58:	f001 f9de 	bl	8014018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012c5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012c5e:	f000 fcb3 	bl	80135c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012c62:	f000 ffd1 	bl	8013c08 <xTaskResumeAll>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	f47f af7c 	bne.w	8012b66 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8012c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8012ca0 <xQueueGenericSend+0x210>)
 8012c70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c74:	601a      	str	r2, [r3, #0]
 8012c76:	f3bf 8f4f 	dsb	sy
 8012c7a:	f3bf 8f6f 	isb	sy
 8012c7e:	e772      	b.n	8012b66 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012c80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012c82:	f000 fca1 	bl	80135c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c86:	f000 ffbf 	bl	8013c08 <xTaskResumeAll>
 8012c8a:	e76c      	b.n	8012b66 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012c8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012c8e:	f000 fc9b 	bl	80135c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c92:	f000 ffb9 	bl	8013c08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012c96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3738      	adds	r7, #56	@ 0x38
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	e000ed04 	.word	0xe000ed04

08012ca4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b08e      	sub	sp, #56	@ 0x38
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	60b9      	str	r1, [r7, #8]
 8012cae:	607a      	str	r2, [r7, #4]
 8012cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d10d      	bne.n	8012cd8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8012cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cc0:	b672      	cpsid	i
 8012cc2:	f383 8811 	msr	BASEPRI, r3
 8012cc6:	f3bf 8f6f 	isb	sy
 8012cca:	f3bf 8f4f 	dsb	sy
 8012cce:	b662      	cpsie	i
 8012cd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012cd2:	bf00      	nop
 8012cd4:	bf00      	nop
 8012cd6:	e7fd      	b.n	8012cd4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d103      	bne.n	8012ce6 <xQueueGenericSendFromISR+0x42>
 8012cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d101      	bne.n	8012cea <xQueueGenericSendFromISR+0x46>
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	e000      	b.n	8012cec <xQueueGenericSendFromISR+0x48>
 8012cea:	2300      	movs	r3, #0
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d10d      	bne.n	8012d0c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8012cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cf4:	b672      	cpsid	i
 8012cf6:	f383 8811 	msr	BASEPRI, r3
 8012cfa:	f3bf 8f6f 	isb	sy
 8012cfe:	f3bf 8f4f 	dsb	sy
 8012d02:	b662      	cpsie	i
 8012d04:	623b      	str	r3, [r7, #32]
}
 8012d06:	bf00      	nop
 8012d08:	bf00      	nop
 8012d0a:	e7fd      	b.n	8012d08 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	2b02      	cmp	r3, #2
 8012d10:	d103      	bne.n	8012d1a <xQueueGenericSendFromISR+0x76>
 8012d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d16:	2b01      	cmp	r3, #1
 8012d18:	d101      	bne.n	8012d1e <xQueueGenericSendFromISR+0x7a>
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	e000      	b.n	8012d20 <xQueueGenericSendFromISR+0x7c>
 8012d1e:	2300      	movs	r3, #0
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d10d      	bne.n	8012d40 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8012d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d28:	b672      	cpsid	i
 8012d2a:	f383 8811 	msr	BASEPRI, r3
 8012d2e:	f3bf 8f6f 	isb	sy
 8012d32:	f3bf 8f4f 	dsb	sy
 8012d36:	b662      	cpsie	i
 8012d38:	61fb      	str	r3, [r7, #28]
}
 8012d3a:	bf00      	nop
 8012d3c:	bf00      	nop
 8012d3e:	e7fd      	b.n	8012d3c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d40:	f001 ff9c 	bl	8014c7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012d44:	f3ef 8211 	mrs	r2, BASEPRI
 8012d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d4c:	b672      	cpsid	i
 8012d4e:	f383 8811 	msr	BASEPRI, r3
 8012d52:	f3bf 8f6f 	isb	sy
 8012d56:	f3bf 8f4f 	dsb	sy
 8012d5a:	b662      	cpsie	i
 8012d5c:	61ba      	str	r2, [r7, #24]
 8012d5e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012d60:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d302      	bcc.n	8012d76 <xQueueGenericSendFromISR+0xd2>
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	2b02      	cmp	r3, #2
 8012d74:	d12c      	bne.n	8012dd0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012d7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012d80:	683a      	ldr	r2, [r7, #0]
 8012d82:	68b9      	ldr	r1, [r7, #8]
 8012d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012d86:	f000 fb8f 	bl	80134a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012d8a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d92:	d112      	bne.n	8012dba <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d016      	beq.n	8012dca <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d9e:	3324      	adds	r3, #36	@ 0x24
 8012da0:	4618      	mov	r0, r3
 8012da2:	f001 f961 	bl	8014068 <xTaskRemoveFromEventList>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d00e      	beq.n	8012dca <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d00b      	beq.n	8012dca <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2201      	movs	r2, #1
 8012db6:	601a      	str	r2, [r3, #0]
 8012db8:	e007      	b.n	8012dca <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012dba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012dbe:	3301      	adds	r3, #1
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	b25a      	sxtb	r2, r3
 8012dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012dca:	2301      	movs	r3, #1
 8012dcc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8012dce:	e001      	b.n	8012dd4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8012dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dd6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012dde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	3738      	adds	r7, #56	@ 0x38
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}

08012dea <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012dea:	b580      	push	{r7, lr}
 8012dec:	b08e      	sub	sp, #56	@ 0x38
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	6078      	str	r0, [r7, #4]
 8012df2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d10d      	bne.n	8012e1a <xQueueGiveFromISR+0x30>
	__asm volatile
 8012dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e02:	b672      	cpsid	i
 8012e04:	f383 8811 	msr	BASEPRI, r3
 8012e08:	f3bf 8f6f 	isb	sy
 8012e0c:	f3bf 8f4f 	dsb	sy
 8012e10:	b662      	cpsie	i
 8012e12:	623b      	str	r3, [r7, #32]
}
 8012e14:	bf00      	nop
 8012e16:	bf00      	nop
 8012e18:	e7fd      	b.n	8012e16 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d00d      	beq.n	8012e3e <xQueueGiveFromISR+0x54>
	__asm volatile
 8012e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e26:	b672      	cpsid	i
 8012e28:	f383 8811 	msr	BASEPRI, r3
 8012e2c:	f3bf 8f6f 	isb	sy
 8012e30:	f3bf 8f4f 	dsb	sy
 8012e34:	b662      	cpsie	i
 8012e36:	61fb      	str	r3, [r7, #28]
}
 8012e38:	bf00      	nop
 8012e3a:	bf00      	nop
 8012e3c:	e7fd      	b.n	8012e3a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d103      	bne.n	8012e4e <xQueueGiveFromISR+0x64>
 8012e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e48:	689b      	ldr	r3, [r3, #8]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d101      	bne.n	8012e52 <xQueueGiveFromISR+0x68>
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e000      	b.n	8012e54 <xQueueGiveFromISR+0x6a>
 8012e52:	2300      	movs	r3, #0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d10d      	bne.n	8012e74 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8012e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e5c:	b672      	cpsid	i
 8012e5e:	f383 8811 	msr	BASEPRI, r3
 8012e62:	f3bf 8f6f 	isb	sy
 8012e66:	f3bf 8f4f 	dsb	sy
 8012e6a:	b662      	cpsie	i
 8012e6c:	61bb      	str	r3, [r7, #24]
}
 8012e6e:	bf00      	nop
 8012e70:	bf00      	nop
 8012e72:	e7fd      	b.n	8012e70 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012e74:	f001 ff02 	bl	8014c7c <vPortValidateInterruptPriority>
	__asm volatile
 8012e78:	f3ef 8211 	mrs	r2, BASEPRI
 8012e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e80:	b672      	cpsid	i
 8012e82:	f383 8811 	msr	BASEPRI, r3
 8012e86:	f3bf 8f6f 	isb	sy
 8012e8a:	f3bf 8f4f 	dsb	sy
 8012e8e:	b662      	cpsie	i
 8012e90:	617a      	str	r2, [r7, #20]
 8012e92:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012e94:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e9c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	d22b      	bcs.n	8012f00 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eb4:	1c5a      	adds	r2, r3, #1
 8012eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eb8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012eba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ec2:	d112      	bne.n	8012eea <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d016      	beq.n	8012efa <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ece:	3324      	adds	r3, #36	@ 0x24
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f001 f8c9 	bl	8014068 <xTaskRemoveFromEventList>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d00e      	beq.n	8012efa <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d00b      	beq.n	8012efa <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	2201      	movs	r2, #1
 8012ee6:	601a      	str	r2, [r3, #0]
 8012ee8:	e007      	b.n	8012efa <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012eea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012eee:	3301      	adds	r3, #1
 8012ef0:	b2db      	uxtb	r3, r3
 8012ef2:	b25a      	sxtb	r2, r3
 8012ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012efa:	2301      	movs	r3, #1
 8012efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8012efe:	e001      	b.n	8012f04 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012f00:	2300      	movs	r3, #0
 8012f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f06:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	f383 8811 	msr	BASEPRI, r3
}
 8012f0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3738      	adds	r7, #56	@ 0x38
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
	...

08012f1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b08c      	sub	sp, #48	@ 0x30
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	60b9      	str	r1, [r7, #8]
 8012f26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012f28:	2300      	movs	r3, #0
 8012f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d10d      	bne.n	8012f52 <xQueueReceive+0x36>
	__asm volatile
 8012f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f3a:	b672      	cpsid	i
 8012f3c:	f383 8811 	msr	BASEPRI, r3
 8012f40:	f3bf 8f6f 	isb	sy
 8012f44:	f3bf 8f4f 	dsb	sy
 8012f48:	b662      	cpsie	i
 8012f4a:	623b      	str	r3, [r7, #32]
}
 8012f4c:	bf00      	nop
 8012f4e:	bf00      	nop
 8012f50:	e7fd      	b.n	8012f4e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d103      	bne.n	8012f60 <xQueueReceive+0x44>
 8012f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d101      	bne.n	8012f64 <xQueueReceive+0x48>
 8012f60:	2301      	movs	r3, #1
 8012f62:	e000      	b.n	8012f66 <xQueueReceive+0x4a>
 8012f64:	2300      	movs	r3, #0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d10d      	bne.n	8012f86 <xQueueReceive+0x6a>
	__asm volatile
 8012f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f6e:	b672      	cpsid	i
 8012f70:	f383 8811 	msr	BASEPRI, r3
 8012f74:	f3bf 8f6f 	isb	sy
 8012f78:	f3bf 8f4f 	dsb	sy
 8012f7c:	b662      	cpsie	i
 8012f7e:	61fb      	str	r3, [r7, #28]
}
 8012f80:	bf00      	nop
 8012f82:	bf00      	nop
 8012f84:	e7fd      	b.n	8012f82 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f86:	f001 fa3f 	bl	8014408 <xTaskGetSchedulerState>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d102      	bne.n	8012f96 <xQueueReceive+0x7a>
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d101      	bne.n	8012f9a <xQueueReceive+0x7e>
 8012f96:	2301      	movs	r3, #1
 8012f98:	e000      	b.n	8012f9c <xQueueReceive+0x80>
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d10d      	bne.n	8012fbc <xQueueReceive+0xa0>
	__asm volatile
 8012fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fa4:	b672      	cpsid	i
 8012fa6:	f383 8811 	msr	BASEPRI, r3
 8012faa:	f3bf 8f6f 	isb	sy
 8012fae:	f3bf 8f4f 	dsb	sy
 8012fb2:	b662      	cpsie	i
 8012fb4:	61bb      	str	r3, [r7, #24]
}
 8012fb6:	bf00      	nop
 8012fb8:	bf00      	nop
 8012fba:	e7fd      	b.n	8012fb8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012fbc:	f001 fd76 	bl	8014aac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fc4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d01f      	beq.n	801300c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012fcc:	68b9      	ldr	r1, [r7, #8]
 8012fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012fd0:	f000 fad4 	bl	801357c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fd6:	1e5a      	subs	r2, r3, #1
 8012fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fda:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fde:	691b      	ldr	r3, [r3, #16]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d00f      	beq.n	8013004 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fe6:	3310      	adds	r3, #16
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f001 f83d 	bl	8014068 <xTaskRemoveFromEventList>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d007      	beq.n	8013004 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012ff4:	4b3c      	ldr	r3, [pc, #240]	@ (80130e8 <xQueueReceive+0x1cc>)
 8012ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ffa:	601a      	str	r2, [r3, #0]
 8012ffc:	f3bf 8f4f 	dsb	sy
 8013000:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013004:	f001 fd88 	bl	8014b18 <vPortExitCritical>
				return pdPASS;
 8013008:	2301      	movs	r3, #1
 801300a:	e069      	b.n	80130e0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d103      	bne.n	801301a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013012:	f001 fd81 	bl	8014b18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013016:	2300      	movs	r3, #0
 8013018:	e062      	b.n	80130e0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801301c:	2b00      	cmp	r3, #0
 801301e:	d106      	bne.n	801302e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013020:	f107 0310 	add.w	r3, r7, #16
 8013024:	4618      	mov	r0, r3
 8013026:	f001 f885 	bl	8014134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801302a:	2301      	movs	r3, #1
 801302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801302e:	f001 fd73 	bl	8014b18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013032:	f000 fddb 	bl	8013bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013036:	f001 fd39 	bl	8014aac <vPortEnterCritical>
 801303a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801303c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013040:	b25b      	sxtb	r3, r3
 8013042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013046:	d103      	bne.n	8013050 <xQueueReceive+0x134>
 8013048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801304a:	2200      	movs	r2, #0
 801304c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013052:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013056:	b25b      	sxtb	r3, r3
 8013058:	f1b3 3fff 	cmp.w	r3, #4294967295
 801305c:	d103      	bne.n	8013066 <xQueueReceive+0x14a>
 801305e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013060:	2200      	movs	r2, #0
 8013062:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013066:	f001 fd57 	bl	8014b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801306a:	1d3a      	adds	r2, r7, #4
 801306c:	f107 0310 	add.w	r3, r7, #16
 8013070:	4611      	mov	r1, r2
 8013072:	4618      	mov	r0, r3
 8013074:	f001 f874 	bl	8014160 <xTaskCheckForTimeOut>
 8013078:	4603      	mov	r3, r0
 801307a:	2b00      	cmp	r3, #0
 801307c:	d123      	bne.n	80130c6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801307e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013080:	f000 faf4 	bl	801366c <prvIsQueueEmpty>
 8013084:	4603      	mov	r3, r0
 8013086:	2b00      	cmp	r3, #0
 8013088:	d017      	beq.n	80130ba <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801308a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801308c:	3324      	adds	r3, #36	@ 0x24
 801308e:	687a      	ldr	r2, [r7, #4]
 8013090:	4611      	mov	r1, r2
 8013092:	4618      	mov	r0, r3
 8013094:	f000 ffc0 	bl	8014018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013098:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801309a:	f000 fa95 	bl	80135c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801309e:	f000 fdb3 	bl	8013c08 <xTaskResumeAll>
 80130a2:	4603      	mov	r3, r0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d189      	bne.n	8012fbc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80130a8:	4b0f      	ldr	r3, [pc, #60]	@ (80130e8 <xQueueReceive+0x1cc>)
 80130aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80130ae:	601a      	str	r2, [r3, #0]
 80130b0:	f3bf 8f4f 	dsb	sy
 80130b4:	f3bf 8f6f 	isb	sy
 80130b8:	e780      	b.n	8012fbc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80130ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80130bc:	f000 fa84 	bl	80135c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80130c0:	f000 fda2 	bl	8013c08 <xTaskResumeAll>
 80130c4:	e77a      	b.n	8012fbc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80130c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80130c8:	f000 fa7e 	bl	80135c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80130cc:	f000 fd9c 	bl	8013c08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80130d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80130d2:	f000 facb 	bl	801366c <prvIsQueueEmpty>
 80130d6:	4603      	mov	r3, r0
 80130d8:	2b00      	cmp	r3, #0
 80130da:	f43f af6f 	beq.w	8012fbc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80130de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	3730      	adds	r7, #48	@ 0x30
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}
 80130e8:	e000ed04 	.word	0xe000ed04

080130ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b08e      	sub	sp, #56	@ 0x38
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80130f6:	2300      	movs	r3, #0
 80130f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80130fe:	2300      	movs	r3, #0
 8013100:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013104:	2b00      	cmp	r3, #0
 8013106:	d10d      	bne.n	8013124 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8013108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801310c:	b672      	cpsid	i
 801310e:	f383 8811 	msr	BASEPRI, r3
 8013112:	f3bf 8f6f 	isb	sy
 8013116:	f3bf 8f4f 	dsb	sy
 801311a:	b662      	cpsie	i
 801311c:	623b      	str	r3, [r7, #32]
}
 801311e:	bf00      	nop
 8013120:	bf00      	nop
 8013122:	e7fd      	b.n	8013120 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013128:	2b00      	cmp	r3, #0
 801312a:	d00d      	beq.n	8013148 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 801312c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013130:	b672      	cpsid	i
 8013132:	f383 8811 	msr	BASEPRI, r3
 8013136:	f3bf 8f6f 	isb	sy
 801313a:	f3bf 8f4f 	dsb	sy
 801313e:	b662      	cpsie	i
 8013140:	61fb      	str	r3, [r7, #28]
}
 8013142:	bf00      	nop
 8013144:	bf00      	nop
 8013146:	e7fd      	b.n	8013144 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013148:	f001 f95e 	bl	8014408 <xTaskGetSchedulerState>
 801314c:	4603      	mov	r3, r0
 801314e:	2b00      	cmp	r3, #0
 8013150:	d102      	bne.n	8013158 <xQueueSemaphoreTake+0x6c>
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d101      	bne.n	801315c <xQueueSemaphoreTake+0x70>
 8013158:	2301      	movs	r3, #1
 801315a:	e000      	b.n	801315e <xQueueSemaphoreTake+0x72>
 801315c:	2300      	movs	r3, #0
 801315e:	2b00      	cmp	r3, #0
 8013160:	d10d      	bne.n	801317e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8013162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013166:	b672      	cpsid	i
 8013168:	f383 8811 	msr	BASEPRI, r3
 801316c:	f3bf 8f6f 	isb	sy
 8013170:	f3bf 8f4f 	dsb	sy
 8013174:	b662      	cpsie	i
 8013176:	61bb      	str	r3, [r7, #24]
}
 8013178:	bf00      	nop
 801317a:	bf00      	nop
 801317c:	e7fd      	b.n	801317a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801317e:	f001 fc95 	bl	8014aac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013186:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801318a:	2b00      	cmp	r3, #0
 801318c:	d024      	beq.n	80131d8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801318e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013190:	1e5a      	subs	r2, r3, #1
 8013192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013194:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d104      	bne.n	80131a8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801319e:	f001 fafd 	bl	801479c <pvTaskIncrementMutexHeldCount>
 80131a2:	4602      	mov	r2, r0
 80131a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80131a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131aa:	691b      	ldr	r3, [r3, #16]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d00f      	beq.n	80131d0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131b2:	3310      	adds	r3, #16
 80131b4:	4618      	mov	r0, r3
 80131b6:	f000 ff57 	bl	8014068 <xTaskRemoveFromEventList>
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d007      	beq.n	80131d0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80131c0:	4b55      	ldr	r3, [pc, #340]	@ (8013318 <xQueueSemaphoreTake+0x22c>)
 80131c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131c6:	601a      	str	r2, [r3, #0]
 80131c8:	f3bf 8f4f 	dsb	sy
 80131cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80131d0:	f001 fca2 	bl	8014b18 <vPortExitCritical>
				return pdPASS;
 80131d4:	2301      	movs	r3, #1
 80131d6:	e09a      	b.n	801330e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80131d8:	683b      	ldr	r3, [r7, #0]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d114      	bne.n	8013208 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80131de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d00d      	beq.n	8013200 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80131e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131e8:	b672      	cpsid	i
 80131ea:	f383 8811 	msr	BASEPRI, r3
 80131ee:	f3bf 8f6f 	isb	sy
 80131f2:	f3bf 8f4f 	dsb	sy
 80131f6:	b662      	cpsie	i
 80131f8:	617b      	str	r3, [r7, #20]
}
 80131fa:	bf00      	nop
 80131fc:	bf00      	nop
 80131fe:	e7fd      	b.n	80131fc <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013200:	f001 fc8a 	bl	8014b18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013204:	2300      	movs	r3, #0
 8013206:	e082      	b.n	801330e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801320a:	2b00      	cmp	r3, #0
 801320c:	d106      	bne.n	801321c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801320e:	f107 030c 	add.w	r3, r7, #12
 8013212:	4618      	mov	r0, r3
 8013214:	f000 ff8e 	bl	8014134 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013218:	2301      	movs	r3, #1
 801321a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801321c:	f001 fc7c 	bl	8014b18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013220:	f000 fce4 	bl	8013bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013224:	f001 fc42 	bl	8014aac <vPortEnterCritical>
 8013228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801322a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801322e:	b25b      	sxtb	r3, r3
 8013230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013234:	d103      	bne.n	801323e <xQueueSemaphoreTake+0x152>
 8013236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013238:	2200      	movs	r2, #0
 801323a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801323e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013240:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013244:	b25b      	sxtb	r3, r3
 8013246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801324a:	d103      	bne.n	8013254 <xQueueSemaphoreTake+0x168>
 801324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801324e:	2200      	movs	r2, #0
 8013250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013254:	f001 fc60 	bl	8014b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013258:	463a      	mov	r2, r7
 801325a:	f107 030c 	add.w	r3, r7, #12
 801325e:	4611      	mov	r1, r2
 8013260:	4618      	mov	r0, r3
 8013262:	f000 ff7d 	bl	8014160 <xTaskCheckForTimeOut>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	d132      	bne.n	80132d2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801326c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801326e:	f000 f9fd 	bl	801366c <prvIsQueueEmpty>
 8013272:	4603      	mov	r3, r0
 8013274:	2b00      	cmp	r3, #0
 8013276:	d026      	beq.n	80132c6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d109      	bne.n	8013294 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8013280:	f001 fc14 	bl	8014aac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013286:	689b      	ldr	r3, [r3, #8]
 8013288:	4618      	mov	r0, r3
 801328a:	f001 f8db 	bl	8014444 <xTaskPriorityInherit>
 801328e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013290:	f001 fc42 	bl	8014b18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013296:	3324      	adds	r3, #36	@ 0x24
 8013298:	683a      	ldr	r2, [r7, #0]
 801329a:	4611      	mov	r1, r2
 801329c:	4618      	mov	r0, r3
 801329e:	f000 febb 	bl	8014018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80132a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80132a4:	f000 f990 	bl	80135c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80132a8:	f000 fcae 	bl	8013c08 <xTaskResumeAll>
 80132ac:	4603      	mov	r3, r0
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	f47f af65 	bne.w	801317e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80132b4:	4b18      	ldr	r3, [pc, #96]	@ (8013318 <xQueueSemaphoreTake+0x22c>)
 80132b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80132ba:	601a      	str	r2, [r3, #0]
 80132bc:	f3bf 8f4f 	dsb	sy
 80132c0:	f3bf 8f6f 	isb	sy
 80132c4:	e75b      	b.n	801317e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80132c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80132c8:	f000 f97e 	bl	80135c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80132cc:	f000 fc9c 	bl	8013c08 <xTaskResumeAll>
 80132d0:	e755      	b.n	801317e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80132d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80132d4:	f000 f978 	bl	80135c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80132d8:	f000 fc96 	bl	8013c08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80132dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80132de:	f000 f9c5 	bl	801366c <prvIsQueueEmpty>
 80132e2:	4603      	mov	r3, r0
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	f43f af4a 	beq.w	801317e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80132ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d00d      	beq.n	801330c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80132f0:	f001 fbdc 	bl	8014aac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80132f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80132f6:	f000 f8bf 	bl	8013478 <prvGetDisinheritPriorityAfterTimeout>
 80132fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80132fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132fe:	689b      	ldr	r3, [r3, #8]
 8013300:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013302:	4618      	mov	r0, r3
 8013304:	f001 f9aa 	bl	801465c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013308:	f001 fc06 	bl	8014b18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801330c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801330e:	4618      	mov	r0, r3
 8013310:	3738      	adds	r7, #56	@ 0x38
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	e000ed04 	.word	0xe000ed04

0801331c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b08e      	sub	sp, #56	@ 0x38
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801332c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801332e:	2b00      	cmp	r3, #0
 8013330:	d10d      	bne.n	801334e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8013332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013336:	b672      	cpsid	i
 8013338:	f383 8811 	msr	BASEPRI, r3
 801333c:	f3bf 8f6f 	isb	sy
 8013340:	f3bf 8f4f 	dsb	sy
 8013344:	b662      	cpsie	i
 8013346:	623b      	str	r3, [r7, #32]
}
 8013348:	bf00      	nop
 801334a:	bf00      	nop
 801334c:	e7fd      	b.n	801334a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d103      	bne.n	801335c <xQueueReceiveFromISR+0x40>
 8013354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013358:	2b00      	cmp	r3, #0
 801335a:	d101      	bne.n	8013360 <xQueueReceiveFromISR+0x44>
 801335c:	2301      	movs	r3, #1
 801335e:	e000      	b.n	8013362 <xQueueReceiveFromISR+0x46>
 8013360:	2300      	movs	r3, #0
 8013362:	2b00      	cmp	r3, #0
 8013364:	d10d      	bne.n	8013382 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8013366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801336a:	b672      	cpsid	i
 801336c:	f383 8811 	msr	BASEPRI, r3
 8013370:	f3bf 8f6f 	isb	sy
 8013374:	f3bf 8f4f 	dsb	sy
 8013378:	b662      	cpsie	i
 801337a:	61fb      	str	r3, [r7, #28]
}
 801337c:	bf00      	nop
 801337e:	bf00      	nop
 8013380:	e7fd      	b.n	801337e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013382:	f001 fc7b 	bl	8014c7c <vPortValidateInterruptPriority>
	__asm volatile
 8013386:	f3ef 8211 	mrs	r2, BASEPRI
 801338a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801338e:	b672      	cpsid	i
 8013390:	f383 8811 	msr	BASEPRI, r3
 8013394:	f3bf 8f6f 	isb	sy
 8013398:	f3bf 8f4f 	dsb	sy
 801339c:	b662      	cpsie	i
 801339e:	61ba      	str	r2, [r7, #24]
 80133a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80133a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d02f      	beq.n	8013412 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80133b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80133b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133bc:	68b9      	ldr	r1, [r7, #8]
 80133be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80133c0:	f000 f8dc 	bl	801357c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133c6:	1e5a      	subs	r2, r3, #1
 80133c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80133cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80133d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133d4:	d112      	bne.n	80133fc <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d8:	691b      	ldr	r3, [r3, #16]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d016      	beq.n	801340c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133e0:	3310      	adds	r3, #16
 80133e2:	4618      	mov	r0, r3
 80133e4:	f000 fe40 	bl	8014068 <xTaskRemoveFromEventList>
 80133e8:	4603      	mov	r3, r0
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d00e      	beq.n	801340c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d00b      	beq.n	801340c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2201      	movs	r2, #1
 80133f8:	601a      	str	r2, [r3, #0]
 80133fa:	e007      	b.n	801340c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80133fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013400:	3301      	adds	r3, #1
 8013402:	b2db      	uxtb	r3, r3
 8013404:	b25a      	sxtb	r2, r3
 8013406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801340c:	2301      	movs	r3, #1
 801340e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013410:	e001      	b.n	8013416 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8013412:	2300      	movs	r3, #0
 8013414:	637b      	str	r3, [r7, #52]	@ 0x34
 8013416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013418:	613b      	str	r3, [r7, #16]
	__asm volatile
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	f383 8811 	msr	BASEPRI, r3
}
 8013420:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013424:	4618      	mov	r0, r3
 8013426:	3738      	adds	r7, #56	@ 0x38
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}

0801342c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b084      	sub	sp, #16
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d10d      	bne.n	801345a <vQueueDelete+0x2e>
	__asm volatile
 801343e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013442:	b672      	cpsid	i
 8013444:	f383 8811 	msr	BASEPRI, r3
 8013448:	f3bf 8f6f 	isb	sy
 801344c:	f3bf 8f4f 	dsb	sy
 8013450:	b662      	cpsie	i
 8013452:	60bb      	str	r3, [r7, #8]
}
 8013454:	bf00      	nop
 8013456:	bf00      	nop
 8013458:	e7fd      	b.n	8013456 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801345a:	68f8      	ldr	r0, [r7, #12]
 801345c:	f000 f934 	bl	80136c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013466:	2b00      	cmp	r3, #0
 8013468:	d102      	bne.n	8013470 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 801346a:	68f8      	ldr	r0, [r7, #12]
 801346c:	f001 fd1e 	bl	8014eac <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013470:	bf00      	nop
 8013472:	3710      	adds	r7, #16
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}

08013478 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013478:	b480      	push	{r7}
 801347a:	b085      	sub	sp, #20
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013484:	2b00      	cmp	r3, #0
 8013486:	d006      	beq.n	8013496 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	f1c3 0307 	rsb	r3, r3, #7
 8013492:	60fb      	str	r3, [r7, #12]
 8013494:	e001      	b.n	801349a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013496:	2300      	movs	r3, #0
 8013498:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801349a:	68fb      	ldr	r3, [r7, #12]
	}
 801349c:	4618      	mov	r0, r3
 801349e:	3714      	adds	r7, #20
 80134a0:	46bd      	mov	sp, r7
 80134a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a6:	4770      	bx	lr

080134a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b086      	sub	sp, #24
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80134b4:	2300      	movs	r3, #0
 80134b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d10d      	bne.n	80134e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d14d      	bne.n	801356a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	689b      	ldr	r3, [r3, #8]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f001 f836 	bl	8014544 <xTaskPriorityDisinherit>
 80134d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2200      	movs	r2, #0
 80134de:	609a      	str	r2, [r3, #8]
 80134e0:	e043      	b.n	801356a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d119      	bne.n	801351c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	6858      	ldr	r0, [r3, #4]
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134f0:	461a      	mov	r2, r3
 80134f2:	68b9      	ldr	r1, [r7, #8]
 80134f4:	f002 f8d9 	bl	80156aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	685a      	ldr	r2, [r3, #4]
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013500:	441a      	add	r2, r3
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	685a      	ldr	r2, [r3, #4]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	689b      	ldr	r3, [r3, #8]
 801350e:	429a      	cmp	r2, r3
 8013510:	d32b      	bcc.n	801356a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	681a      	ldr	r2, [r3, #0]
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	605a      	str	r2, [r3, #4]
 801351a:	e026      	b.n	801356a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	68d8      	ldr	r0, [r3, #12]
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013524:	461a      	mov	r2, r3
 8013526:	68b9      	ldr	r1, [r7, #8]
 8013528:	f002 f8bf 	bl	80156aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	68da      	ldr	r2, [r3, #12]
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013534:	425b      	negs	r3, r3
 8013536:	441a      	add	r2, r3
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	68da      	ldr	r2, [r3, #12]
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	429a      	cmp	r2, r3
 8013546:	d207      	bcs.n	8013558 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	689a      	ldr	r2, [r3, #8]
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013550:	425b      	negs	r3, r3
 8013552:	441a      	add	r2, r3
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2b02      	cmp	r3, #2
 801355c:	d105      	bne.n	801356a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d002      	beq.n	801356a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	3b01      	subs	r3, #1
 8013568:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	1c5a      	adds	r2, r3, #1
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013572:	697b      	ldr	r3, [r7, #20]
}
 8013574:	4618      	mov	r0, r3
 8013576:	3718      	adds	r7, #24
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801358a:	2b00      	cmp	r3, #0
 801358c:	d018      	beq.n	80135c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	68da      	ldr	r2, [r3, #12]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013596:	441a      	add	r2, r3
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	68da      	ldr	r2, [r3, #12]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	689b      	ldr	r3, [r3, #8]
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d303      	bcc.n	80135b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681a      	ldr	r2, [r3, #0]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	68d9      	ldr	r1, [r3, #12]
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135b8:	461a      	mov	r2, r3
 80135ba:	6838      	ldr	r0, [r7, #0]
 80135bc:	f002 f875 	bl	80156aa <memcpy>
	}
}
 80135c0:	bf00      	nop
 80135c2:	3708      	adds	r7, #8
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b084      	sub	sp, #16
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80135d0:	f001 fa6c 	bl	8014aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80135da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80135dc:	e011      	b.n	8013602 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d012      	beq.n	801360c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	3324      	adds	r3, #36	@ 0x24
 80135ea:	4618      	mov	r0, r3
 80135ec:	f000 fd3c 	bl	8014068 <xTaskRemoveFromEventList>
 80135f0:	4603      	mov	r3, r0
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d001      	beq.n	80135fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80135f6:	f000 fe1b 	bl	8014230 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80135fa:	7bfb      	ldrb	r3, [r7, #15]
 80135fc:	3b01      	subs	r3, #1
 80135fe:	b2db      	uxtb	r3, r3
 8013600:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013606:	2b00      	cmp	r3, #0
 8013608:	dce9      	bgt.n	80135de <prvUnlockQueue+0x16>
 801360a:	e000      	b.n	801360e <prvUnlockQueue+0x46>
					break;
 801360c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	22ff      	movs	r2, #255	@ 0xff
 8013612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013616:	f001 fa7f 	bl	8014b18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801361a:	f001 fa47 	bl	8014aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013624:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013626:	e011      	b.n	801364c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	691b      	ldr	r3, [r3, #16]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d012      	beq.n	8013656 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	3310      	adds	r3, #16
 8013634:	4618      	mov	r0, r3
 8013636:	f000 fd17 	bl	8014068 <xTaskRemoveFromEventList>
 801363a:	4603      	mov	r3, r0
 801363c:	2b00      	cmp	r3, #0
 801363e:	d001      	beq.n	8013644 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013640:	f000 fdf6 	bl	8014230 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013644:	7bbb      	ldrb	r3, [r7, #14]
 8013646:	3b01      	subs	r3, #1
 8013648:	b2db      	uxtb	r3, r3
 801364a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801364c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013650:	2b00      	cmp	r3, #0
 8013652:	dce9      	bgt.n	8013628 <prvUnlockQueue+0x60>
 8013654:	e000      	b.n	8013658 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013656:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	22ff      	movs	r2, #255	@ 0xff
 801365c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013660:	f001 fa5a 	bl	8014b18 <vPortExitCritical>
}
 8013664:	bf00      	nop
 8013666:	3710      	adds	r7, #16
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}

0801366c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b084      	sub	sp, #16
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013674:	f001 fa1a 	bl	8014aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801367c:	2b00      	cmp	r3, #0
 801367e:	d102      	bne.n	8013686 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013680:	2301      	movs	r3, #1
 8013682:	60fb      	str	r3, [r7, #12]
 8013684:	e001      	b.n	801368a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013686:	2300      	movs	r3, #0
 8013688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801368a:	f001 fa45 	bl	8014b18 <vPortExitCritical>

	return xReturn;
 801368e:	68fb      	ldr	r3, [r7, #12]
}
 8013690:	4618      	mov	r0, r3
 8013692:	3710      	adds	r7, #16
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}

08013698 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b084      	sub	sp, #16
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136a0:	f001 fa04 	bl	8014aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80136ac:	429a      	cmp	r2, r3
 80136ae:	d102      	bne.n	80136b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80136b0:	2301      	movs	r3, #1
 80136b2:	60fb      	str	r3, [r7, #12]
 80136b4:	e001      	b.n	80136ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80136b6:	2300      	movs	r3, #0
 80136b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136ba:	f001 fa2d 	bl	8014b18 <vPortExitCritical>

	return xReturn;
 80136be:	68fb      	ldr	r3, [r7, #12]
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3710      	adds	r7, #16
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}

080136c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80136c8:	b480      	push	{r7}
 80136ca:	b085      	sub	sp, #20
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80136d0:	2300      	movs	r3, #0
 80136d2:	60fb      	str	r3, [r7, #12]
 80136d4:	e016      	b.n	8013704 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80136d6:	4a10      	ldr	r2, [pc, #64]	@ (8013718 <vQueueUnregisterQueue+0x50>)
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	00db      	lsls	r3, r3, #3
 80136dc:	4413      	add	r3, r2
 80136de:	685b      	ldr	r3, [r3, #4]
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	429a      	cmp	r2, r3
 80136e4:	d10b      	bne.n	80136fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80136e6:	4a0c      	ldr	r2, [pc, #48]	@ (8013718 <vQueueUnregisterQueue+0x50>)
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2100      	movs	r1, #0
 80136ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80136f0:	4a09      	ldr	r2, [pc, #36]	@ (8013718 <vQueueUnregisterQueue+0x50>)
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	00db      	lsls	r3, r3, #3
 80136f6:	4413      	add	r3, r2
 80136f8:	2200      	movs	r2, #0
 80136fa:	605a      	str	r2, [r3, #4]
				break;
 80136fc:	e006      	b.n	801370c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	3301      	adds	r3, #1
 8013702:	60fb      	str	r3, [r7, #12]
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2b07      	cmp	r3, #7
 8013708:	d9e5      	bls.n	80136d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801370a:	bf00      	nop
 801370c:	bf00      	nop
 801370e:	3714      	adds	r7, #20
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr
 8013718:	200054d8 	.word	0x200054d8

0801371c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801371c:	b580      	push	{r7, lr}
 801371e:	b08e      	sub	sp, #56	@ 0x38
 8013720:	af04      	add	r7, sp, #16
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	607a      	str	r2, [r7, #4]
 8013728:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801372a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801372c:	2b00      	cmp	r3, #0
 801372e:	d10d      	bne.n	801374c <xTaskCreateStatic+0x30>
	__asm volatile
 8013730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013734:	b672      	cpsid	i
 8013736:	f383 8811 	msr	BASEPRI, r3
 801373a:	f3bf 8f6f 	isb	sy
 801373e:	f3bf 8f4f 	dsb	sy
 8013742:	b662      	cpsie	i
 8013744:	623b      	str	r3, [r7, #32]
}
 8013746:	bf00      	nop
 8013748:	bf00      	nop
 801374a:	e7fd      	b.n	8013748 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801374c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801374e:	2b00      	cmp	r3, #0
 8013750:	d10d      	bne.n	801376e <xTaskCreateStatic+0x52>
	__asm volatile
 8013752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013756:	b672      	cpsid	i
 8013758:	f383 8811 	msr	BASEPRI, r3
 801375c:	f3bf 8f6f 	isb	sy
 8013760:	f3bf 8f4f 	dsb	sy
 8013764:	b662      	cpsie	i
 8013766:	61fb      	str	r3, [r7, #28]
}
 8013768:	bf00      	nop
 801376a:	bf00      	nop
 801376c:	e7fd      	b.n	801376a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801376e:	23a4      	movs	r3, #164	@ 0xa4
 8013770:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	2ba4      	cmp	r3, #164	@ 0xa4
 8013776:	d00d      	beq.n	8013794 <xTaskCreateStatic+0x78>
	__asm volatile
 8013778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801377c:	b672      	cpsid	i
 801377e:	f383 8811 	msr	BASEPRI, r3
 8013782:	f3bf 8f6f 	isb	sy
 8013786:	f3bf 8f4f 	dsb	sy
 801378a:	b662      	cpsie	i
 801378c:	61bb      	str	r3, [r7, #24]
}
 801378e:	bf00      	nop
 8013790:	bf00      	nop
 8013792:	e7fd      	b.n	8013790 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013794:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013798:	2b00      	cmp	r3, #0
 801379a:	d01e      	beq.n	80137da <xTaskCreateStatic+0xbe>
 801379c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d01b      	beq.n	80137da <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80137a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80137a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80137aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80137ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ae:	2202      	movs	r2, #2
 80137b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80137b4:	2300      	movs	r3, #0
 80137b6:	9303      	str	r3, [sp, #12]
 80137b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ba:	9302      	str	r3, [sp, #8]
 80137bc:	f107 0314 	add.w	r3, r7, #20
 80137c0:	9301      	str	r3, [sp, #4]
 80137c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137c4:	9300      	str	r3, [sp, #0]
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	687a      	ldr	r2, [r7, #4]
 80137ca:	68b9      	ldr	r1, [r7, #8]
 80137cc:	68f8      	ldr	r0, [r7, #12]
 80137ce:	f000 f851 	bl	8013874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80137d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80137d4:	f000 f8fa 	bl	80139cc <prvAddNewTaskToReadyList>
 80137d8:	e001      	b.n	80137de <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80137da:	2300      	movs	r3, #0
 80137dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80137de:	697b      	ldr	r3, [r7, #20]
	}
 80137e0:	4618      	mov	r0, r3
 80137e2:	3728      	adds	r7, #40	@ 0x28
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b08c      	sub	sp, #48	@ 0x30
 80137ec:	af04      	add	r7, sp, #16
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	603b      	str	r3, [r7, #0]
 80137f4:	4613      	mov	r3, r2
 80137f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80137f8:	88fb      	ldrh	r3, [r7, #6]
 80137fa:	009b      	lsls	r3, r3, #2
 80137fc:	4618      	mov	r0, r3
 80137fe:	f001 fa83 	bl	8014d08 <pvPortMalloc>
 8013802:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d00e      	beq.n	8013828 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801380a:	20a4      	movs	r0, #164	@ 0xa4
 801380c:	f001 fa7c 	bl	8014d08 <pvPortMalloc>
 8013810:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013812:	69fb      	ldr	r3, [r7, #28]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d003      	beq.n	8013820 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013818:	69fb      	ldr	r3, [r7, #28]
 801381a:	697a      	ldr	r2, [r7, #20]
 801381c:	631a      	str	r2, [r3, #48]	@ 0x30
 801381e:	e005      	b.n	801382c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013820:	6978      	ldr	r0, [r7, #20]
 8013822:	f001 fb43 	bl	8014eac <vPortFree>
 8013826:	e001      	b.n	801382c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013828:	2300      	movs	r3, #0
 801382a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801382c:	69fb      	ldr	r3, [r7, #28]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d017      	beq.n	8013862 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013832:	69fb      	ldr	r3, [r7, #28]
 8013834:	2200      	movs	r2, #0
 8013836:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801383a:	88fa      	ldrh	r2, [r7, #6]
 801383c:	2300      	movs	r3, #0
 801383e:	9303      	str	r3, [sp, #12]
 8013840:	69fb      	ldr	r3, [r7, #28]
 8013842:	9302      	str	r3, [sp, #8]
 8013844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013846:	9301      	str	r3, [sp, #4]
 8013848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801384a:	9300      	str	r3, [sp, #0]
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	68b9      	ldr	r1, [r7, #8]
 8013850:	68f8      	ldr	r0, [r7, #12]
 8013852:	f000 f80f 	bl	8013874 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013856:	69f8      	ldr	r0, [r7, #28]
 8013858:	f000 f8b8 	bl	80139cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801385c:	2301      	movs	r3, #1
 801385e:	61bb      	str	r3, [r7, #24]
 8013860:	e002      	b.n	8013868 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013862:	f04f 33ff 	mov.w	r3, #4294967295
 8013866:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013868:	69bb      	ldr	r3, [r7, #24]
	}
 801386a:	4618      	mov	r0, r3
 801386c:	3720      	adds	r7, #32
 801386e:	46bd      	mov	sp, r7
 8013870:	bd80      	pop	{r7, pc}
	...

08013874 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b088      	sub	sp, #32
 8013878:	af00      	add	r7, sp, #0
 801387a:	60f8      	str	r0, [r7, #12]
 801387c:	60b9      	str	r1, [r7, #8]
 801387e:	607a      	str	r2, [r7, #4]
 8013880:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013884:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	009b      	lsls	r3, r3, #2
 801388a:	461a      	mov	r2, r3
 801388c:	21a5      	movs	r1, #165	@ 0xa5
 801388e:	f001 fe33 	bl	80154f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013896:	6879      	ldr	r1, [r7, #4]
 8013898:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801389c:	440b      	add	r3, r1
 801389e:	009b      	lsls	r3, r3, #2
 80138a0:	4413      	add	r3, r2
 80138a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	f023 0307 	bic.w	r3, r3, #7
 80138aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80138ac:	69bb      	ldr	r3, [r7, #24]
 80138ae:	f003 0307 	and.w	r3, r3, #7
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d00d      	beq.n	80138d2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80138b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138ba:	b672      	cpsid	i
 80138bc:	f383 8811 	msr	BASEPRI, r3
 80138c0:	f3bf 8f6f 	isb	sy
 80138c4:	f3bf 8f4f 	dsb	sy
 80138c8:	b662      	cpsie	i
 80138ca:	617b      	str	r3, [r7, #20]
}
 80138cc:	bf00      	nop
 80138ce:	bf00      	nop
 80138d0:	e7fd      	b.n	80138ce <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d01f      	beq.n	8013918 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80138d8:	2300      	movs	r3, #0
 80138da:	61fb      	str	r3, [r7, #28]
 80138dc:	e012      	b.n	8013904 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80138de:	68ba      	ldr	r2, [r7, #8]
 80138e0:	69fb      	ldr	r3, [r7, #28]
 80138e2:	4413      	add	r3, r2
 80138e4:	7819      	ldrb	r1, [r3, #0]
 80138e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	4413      	add	r3, r2
 80138ec:	3334      	adds	r3, #52	@ 0x34
 80138ee:	460a      	mov	r2, r1
 80138f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80138f2:	68ba      	ldr	r2, [r7, #8]
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	4413      	add	r3, r2
 80138f8:	781b      	ldrb	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d006      	beq.n	801390c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80138fe:	69fb      	ldr	r3, [r7, #28]
 8013900:	3301      	adds	r3, #1
 8013902:	61fb      	str	r3, [r7, #28]
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	2b0f      	cmp	r3, #15
 8013908:	d9e9      	bls.n	80138de <prvInitialiseNewTask+0x6a>
 801390a:	e000      	b.n	801390e <prvInitialiseNewTask+0x9a>
			{
				break;
 801390c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801390e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013910:	2200      	movs	r2, #0
 8013912:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013916:	e003      	b.n	8013920 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801391a:	2200      	movs	r2, #0
 801391c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013922:	2b06      	cmp	r3, #6
 8013924:	d901      	bls.n	801392a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013926:	2306      	movs	r3, #6
 8013928:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801392c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801392e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013934:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013938:	2200      	movs	r2, #0
 801393a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801393c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801393e:	3304      	adds	r3, #4
 8013940:	4618      	mov	r0, r3
 8013942:	f7fe fe45 	bl	80125d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013948:	3318      	adds	r3, #24
 801394a:	4618      	mov	r0, r3
 801394c:	f7fe fe40 	bl	80125d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013954:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013958:	f1c3 0207 	rsb	r2, r3, #7
 801395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801395e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013964:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8013966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013968:	2200      	movs	r2, #0
 801396a:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801396e:	2200      	movs	r2, #0
 8013970:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013976:	2200      	movs	r2, #0
 8013978:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801397e:	3350      	adds	r3, #80	@ 0x50
 8013980:	224c      	movs	r2, #76	@ 0x4c
 8013982:	2100      	movs	r1, #0
 8013984:	4618      	mov	r0, r3
 8013986:	f001 fdb7 	bl	80154f8 <memset>
 801398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801398c:	4a0c      	ldr	r2, [pc, #48]	@ (80139c0 <prvInitialiseNewTask+0x14c>)
 801398e:	655a      	str	r2, [r3, #84]	@ 0x54
 8013990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013992:	4a0c      	ldr	r2, [pc, #48]	@ (80139c4 <prvInitialiseNewTask+0x150>)
 8013994:	659a      	str	r2, [r3, #88]	@ 0x58
 8013996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013998:	4a0b      	ldr	r2, [pc, #44]	@ (80139c8 <prvInitialiseNewTask+0x154>)
 801399a:	65da      	str	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801399c:	683a      	ldr	r2, [r7, #0]
 801399e:	68f9      	ldr	r1, [r7, #12]
 80139a0:	69b8      	ldr	r0, [r7, #24]
 80139a2:	f000 ff75 	bl	8014890 <pxPortInitialiseStack>
 80139a6:	4602      	mov	r2, r0
 80139a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80139ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d002      	beq.n	80139b8 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80139b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80139b8:	bf00      	nop
 80139ba:	3720      	adds	r7, #32
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}
 80139c0:	2000d664 	.word	0x2000d664
 80139c4:	2000d6cc 	.word	0x2000d6cc
 80139c8:	2000d734 	.word	0x2000d734

080139cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80139d4:	f001 f86a 	bl	8014aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80139d8:	4b2a      	ldr	r3, [pc, #168]	@ (8013a84 <prvAddNewTaskToReadyList+0xb8>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	3301      	adds	r3, #1
 80139de:	4a29      	ldr	r2, [pc, #164]	@ (8013a84 <prvAddNewTaskToReadyList+0xb8>)
 80139e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80139e2:	4b29      	ldr	r3, [pc, #164]	@ (8013a88 <prvAddNewTaskToReadyList+0xbc>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d109      	bne.n	80139fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80139ea:	4a27      	ldr	r2, [pc, #156]	@ (8013a88 <prvAddNewTaskToReadyList+0xbc>)
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80139f0:	4b24      	ldr	r3, [pc, #144]	@ (8013a84 <prvAddNewTaskToReadyList+0xb8>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	d110      	bne.n	8013a1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80139f8:	f000 fc40 	bl	801427c <prvInitialiseTaskLists>
 80139fc:	e00d      	b.n	8013a1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80139fe:	4b23      	ldr	r3, [pc, #140]	@ (8013a8c <prvAddNewTaskToReadyList+0xc0>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d109      	bne.n	8013a1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013a06:	4b20      	ldr	r3, [pc, #128]	@ (8013a88 <prvAddNewTaskToReadyList+0xbc>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d802      	bhi.n	8013a1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013a14:	4a1c      	ldr	r2, [pc, #112]	@ (8013a88 <prvAddNewTaskToReadyList+0xbc>)
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8013a90 <prvAddNewTaskToReadyList+0xc4>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	3301      	adds	r3, #1
 8013a20:	4a1b      	ldr	r2, [pc, #108]	@ (8013a90 <prvAddNewTaskToReadyList+0xc4>)
 8013a22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a28:	2201      	movs	r2, #1
 8013a2a:	409a      	lsls	r2, r3
 8013a2c:	4b19      	ldr	r3, [pc, #100]	@ (8013a94 <prvAddNewTaskToReadyList+0xc8>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	4313      	orrs	r3, r2
 8013a32:	4a18      	ldr	r2, [pc, #96]	@ (8013a94 <prvAddNewTaskToReadyList+0xc8>)
 8013a34:	6013      	str	r3, [r2, #0]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a3a:	4613      	mov	r3, r2
 8013a3c:	009b      	lsls	r3, r3, #2
 8013a3e:	4413      	add	r3, r2
 8013a40:	009b      	lsls	r3, r3, #2
 8013a42:	4a15      	ldr	r2, [pc, #84]	@ (8013a98 <prvAddNewTaskToReadyList+0xcc>)
 8013a44:	441a      	add	r2, r3
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	3304      	adds	r3, #4
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	4610      	mov	r0, r2
 8013a4e:	f7fe fdcc 	bl	80125ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013a52:	f001 f861 	bl	8014b18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013a56:	4b0d      	ldr	r3, [pc, #52]	@ (8013a8c <prvAddNewTaskToReadyList+0xc0>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d00e      	beq.n	8013a7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8013a88 <prvAddNewTaskToReadyList+0xbc>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d207      	bcs.n	8013a7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8013a9c <prvAddNewTaskToReadyList+0xd0>)
 8013a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a72:	601a      	str	r2, [r3, #0]
 8013a74:	f3bf 8f4f 	dsb	sy
 8013a78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a7c:	bf00      	nop
 8013a7e:	3708      	adds	r7, #8
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	20005618 	.word	0x20005618
 8013a88:	20005518 	.word	0x20005518
 8013a8c:	20005624 	.word	0x20005624
 8013a90:	20005634 	.word	0x20005634
 8013a94:	20005620 	.word	0x20005620
 8013a98:	2000551c 	.word	0x2000551c
 8013a9c:	e000ed04 	.word	0xe000ed04

08013aa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d01a      	beq.n	8013ae8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013ab2:	4b15      	ldr	r3, [pc, #84]	@ (8013b08 <vTaskDelay+0x68>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d00d      	beq.n	8013ad6 <vTaskDelay+0x36>
	__asm volatile
 8013aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013abe:	b672      	cpsid	i
 8013ac0:	f383 8811 	msr	BASEPRI, r3
 8013ac4:	f3bf 8f6f 	isb	sy
 8013ac8:	f3bf 8f4f 	dsb	sy
 8013acc:	b662      	cpsie	i
 8013ace:	60bb      	str	r3, [r7, #8]
}
 8013ad0:	bf00      	nop
 8013ad2:	bf00      	nop
 8013ad4:	e7fd      	b.n	8013ad2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013ad6:	f000 f889 	bl	8013bec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013ada:	2100      	movs	r1, #0
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f000 fe71 	bl	80147c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013ae2:	f000 f891 	bl	8013c08 <xTaskResumeAll>
 8013ae6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d107      	bne.n	8013afe <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8013aee:	4b07      	ldr	r3, [pc, #28]	@ (8013b0c <vTaskDelay+0x6c>)
 8013af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013af4:	601a      	str	r2, [r3, #0]
 8013af6:	f3bf 8f4f 	dsb	sy
 8013afa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013afe:	bf00      	nop
 8013b00:	3710      	adds	r7, #16
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}
 8013b06:	bf00      	nop
 8013b08:	20005640 	.word	0x20005640
 8013b0c:	e000ed04 	.word	0xe000ed04

08013b10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b08a      	sub	sp, #40	@ 0x28
 8013b14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013b16:	2300      	movs	r3, #0
 8013b18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013b1e:	463a      	mov	r2, r7
 8013b20:	1d39      	adds	r1, r7, #4
 8013b22:	f107 0308 	add.w	r3, r7, #8
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7ed f9e8 	bl	8000efc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013b2c:	6839      	ldr	r1, [r7, #0]
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	68ba      	ldr	r2, [r7, #8]
 8013b32:	9202      	str	r2, [sp, #8]
 8013b34:	9301      	str	r3, [sp, #4]
 8013b36:	2300      	movs	r3, #0
 8013b38:	9300      	str	r3, [sp, #0]
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	460a      	mov	r2, r1
 8013b3e:	4923      	ldr	r1, [pc, #140]	@ (8013bcc <vTaskStartScheduler+0xbc>)
 8013b40:	4823      	ldr	r0, [pc, #140]	@ (8013bd0 <vTaskStartScheduler+0xc0>)
 8013b42:	f7ff fdeb 	bl	801371c <xTaskCreateStatic>
 8013b46:	4603      	mov	r3, r0
 8013b48:	4a22      	ldr	r2, [pc, #136]	@ (8013bd4 <vTaskStartScheduler+0xc4>)
 8013b4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013b4c:	4b21      	ldr	r3, [pc, #132]	@ (8013bd4 <vTaskStartScheduler+0xc4>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d002      	beq.n	8013b5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013b54:	2301      	movs	r3, #1
 8013b56:	617b      	str	r3, [r7, #20]
 8013b58:	e001      	b.n	8013b5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	2b01      	cmp	r3, #1
 8013b62:	d11d      	bne.n	8013ba0 <vTaskStartScheduler+0x90>
	__asm volatile
 8013b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b68:	b672      	cpsid	i
 8013b6a:	f383 8811 	msr	BASEPRI, r3
 8013b6e:	f3bf 8f6f 	isb	sy
 8013b72:	f3bf 8f4f 	dsb	sy
 8013b76:	b662      	cpsie	i
 8013b78:	613b      	str	r3, [r7, #16]
}
 8013b7a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013b7c:	4b16      	ldr	r3, [pc, #88]	@ (8013bd8 <vTaskStartScheduler+0xc8>)
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	3350      	adds	r3, #80	@ 0x50
 8013b82:	4a16      	ldr	r2, [pc, #88]	@ (8013bdc <vTaskStartScheduler+0xcc>)
 8013b84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013b86:	4b16      	ldr	r3, [pc, #88]	@ (8013be0 <vTaskStartScheduler+0xd0>)
 8013b88:	f04f 32ff 	mov.w	r2, #4294967295
 8013b8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013b8e:	4b15      	ldr	r3, [pc, #84]	@ (8013be4 <vTaskStartScheduler+0xd4>)
 8013b90:	2201      	movs	r2, #1
 8013b92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013b94:	4b14      	ldr	r3, [pc, #80]	@ (8013be8 <vTaskStartScheduler+0xd8>)
 8013b96:	2200      	movs	r2, #0
 8013b98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013b9a:	f000 ff09 	bl	80149b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013b9e:	e011      	b.n	8013bc4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ba6:	d10d      	bne.n	8013bc4 <vTaskStartScheduler+0xb4>
	__asm volatile
 8013ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bac:	b672      	cpsid	i
 8013bae:	f383 8811 	msr	BASEPRI, r3
 8013bb2:	f3bf 8f6f 	isb	sy
 8013bb6:	f3bf 8f4f 	dsb	sy
 8013bba:	b662      	cpsie	i
 8013bbc:	60fb      	str	r3, [r7, #12]
}
 8013bbe:	bf00      	nop
 8013bc0:	bf00      	nop
 8013bc2:	e7fd      	b.n	8013bc0 <vTaskStartScheduler+0xb0>
}
 8013bc4:	bf00      	nop
 8013bc6:	3718      	adds	r7, #24
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}
 8013bcc:	0801654c 	.word	0x0801654c
 8013bd0:	08014249 	.word	0x08014249
 8013bd4:	2000563c 	.word	0x2000563c
 8013bd8:	20005518 	.word	0x20005518
 8013bdc:	20000020 	.word	0x20000020
 8013be0:	20005638 	.word	0x20005638
 8013be4:	20005624 	.word	0x20005624
 8013be8:	2000561c 	.word	0x2000561c

08013bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013bec:	b480      	push	{r7}
 8013bee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013bf0:	4b04      	ldr	r3, [pc, #16]	@ (8013c04 <vTaskSuspendAll+0x18>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	3301      	adds	r3, #1
 8013bf6:	4a03      	ldr	r2, [pc, #12]	@ (8013c04 <vTaskSuspendAll+0x18>)
 8013bf8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013bfa:	bf00      	nop
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr
 8013c04:	20005640 	.word	0x20005640

08013c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b084      	sub	sp, #16
 8013c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013c12:	2300      	movs	r3, #0
 8013c14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013c16:	4b43      	ldr	r3, [pc, #268]	@ (8013d24 <xTaskResumeAll+0x11c>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d10d      	bne.n	8013c3a <xTaskResumeAll+0x32>
	__asm volatile
 8013c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c22:	b672      	cpsid	i
 8013c24:	f383 8811 	msr	BASEPRI, r3
 8013c28:	f3bf 8f6f 	isb	sy
 8013c2c:	f3bf 8f4f 	dsb	sy
 8013c30:	b662      	cpsie	i
 8013c32:	603b      	str	r3, [r7, #0]
}
 8013c34:	bf00      	nop
 8013c36:	bf00      	nop
 8013c38:	e7fd      	b.n	8013c36 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013c3a:	f000 ff37 	bl	8014aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013c3e:	4b39      	ldr	r3, [pc, #228]	@ (8013d24 <xTaskResumeAll+0x11c>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	3b01      	subs	r3, #1
 8013c44:	4a37      	ldr	r2, [pc, #220]	@ (8013d24 <xTaskResumeAll+0x11c>)
 8013c46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c48:	4b36      	ldr	r3, [pc, #216]	@ (8013d24 <xTaskResumeAll+0x11c>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d161      	bne.n	8013d14 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013c50:	4b35      	ldr	r3, [pc, #212]	@ (8013d28 <xTaskResumeAll+0x120>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d05d      	beq.n	8013d14 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c58:	e02e      	b.n	8013cb8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c5a:	4b34      	ldr	r3, [pc, #208]	@ (8013d2c <xTaskResumeAll+0x124>)
 8013c5c:	68db      	ldr	r3, [r3, #12]
 8013c5e:	68db      	ldr	r3, [r3, #12]
 8013c60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	3318      	adds	r3, #24
 8013c66:	4618      	mov	r0, r3
 8013c68:	f7fe fd1c 	bl	80126a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	3304      	adds	r3, #4
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fe fd17 	bl	80126a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	409a      	lsls	r2, r3
 8013c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8013d30 <xTaskResumeAll+0x128>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	4313      	orrs	r3, r2
 8013c84:	4a2a      	ldr	r2, [pc, #168]	@ (8013d30 <xTaskResumeAll+0x128>)
 8013c86:	6013      	str	r3, [r2, #0]
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c8c:	4613      	mov	r3, r2
 8013c8e:	009b      	lsls	r3, r3, #2
 8013c90:	4413      	add	r3, r2
 8013c92:	009b      	lsls	r3, r3, #2
 8013c94:	4a27      	ldr	r2, [pc, #156]	@ (8013d34 <xTaskResumeAll+0x12c>)
 8013c96:	441a      	add	r2, r3
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	3304      	adds	r3, #4
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	4610      	mov	r0, r2
 8013ca0:	f7fe fca3 	bl	80125ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ca8:	4b23      	ldr	r3, [pc, #140]	@ (8013d38 <xTaskResumeAll+0x130>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d302      	bcc.n	8013cb8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8013cb2:	4b22      	ldr	r3, [pc, #136]	@ (8013d3c <xTaskResumeAll+0x134>)
 8013cb4:	2201      	movs	r2, #1
 8013cb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8013d2c <xTaskResumeAll+0x124>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d1cc      	bne.n	8013c5a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d001      	beq.n	8013cca <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013cc6:	f000 fb7f 	bl	80143c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013cca:	4b1d      	ldr	r3, [pc, #116]	@ (8013d40 <xTaskResumeAll+0x138>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d010      	beq.n	8013cf8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013cd6:	f000 f859 	bl	8013d8c <xTaskIncrementTick>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d002      	beq.n	8013ce6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8013ce0:	4b16      	ldr	r3, [pc, #88]	@ (8013d3c <xTaskResumeAll+0x134>)
 8013ce2:	2201      	movs	r2, #1
 8013ce4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	3b01      	subs	r3, #1
 8013cea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d1f1      	bne.n	8013cd6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8013cf2:	4b13      	ldr	r3, [pc, #76]	@ (8013d40 <xTaskResumeAll+0x138>)
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013cf8:	4b10      	ldr	r3, [pc, #64]	@ (8013d3c <xTaskResumeAll+0x134>)
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d009      	beq.n	8013d14 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013d00:	2301      	movs	r3, #1
 8013d02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013d04:	4b0f      	ldr	r3, [pc, #60]	@ (8013d44 <xTaskResumeAll+0x13c>)
 8013d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d0a:	601a      	str	r2, [r3, #0]
 8013d0c:	f3bf 8f4f 	dsb	sy
 8013d10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013d14:	f000 ff00 	bl	8014b18 <vPortExitCritical>

	return xAlreadyYielded;
 8013d18:	68bb      	ldr	r3, [r7, #8]
}
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	3710      	adds	r7, #16
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}
 8013d22:	bf00      	nop
 8013d24:	20005640 	.word	0x20005640
 8013d28:	20005618 	.word	0x20005618
 8013d2c:	200055d8 	.word	0x200055d8
 8013d30:	20005620 	.word	0x20005620
 8013d34:	2000551c 	.word	0x2000551c
 8013d38:	20005518 	.word	0x20005518
 8013d3c:	2000562c 	.word	0x2000562c
 8013d40:	20005628 	.word	0x20005628
 8013d44:	e000ed04 	.word	0xe000ed04

08013d48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013d48:	b480      	push	{r7}
 8013d4a:	b083      	sub	sp, #12
 8013d4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013d4e:	4b05      	ldr	r3, [pc, #20]	@ (8013d64 <xTaskGetTickCount+0x1c>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013d54:	687b      	ldr	r3, [r7, #4]
}
 8013d56:	4618      	mov	r0, r3
 8013d58:	370c      	adds	r7, #12
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d60:	4770      	bx	lr
 8013d62:	bf00      	nop
 8013d64:	2000561c 	.word	0x2000561c

08013d68 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b082      	sub	sp, #8
 8013d6c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d6e:	f000 ff85 	bl	8014c7c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013d72:	2300      	movs	r3, #0
 8013d74:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013d76:	4b04      	ldr	r3, [pc, #16]	@ (8013d88 <xTaskGetTickCountFromISR+0x20>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d7c:	683b      	ldr	r3, [r7, #0]
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3708      	adds	r7, #8
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}
 8013d86:	bf00      	nop
 8013d88:	2000561c 	.word	0x2000561c

08013d8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b086      	sub	sp, #24
 8013d90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013d92:	2300      	movs	r3, #0
 8013d94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d96:	4b50      	ldr	r3, [pc, #320]	@ (8013ed8 <xTaskIncrementTick+0x14c>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	f040 808b 	bne.w	8013eb6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013da0:	4b4e      	ldr	r3, [pc, #312]	@ (8013edc <xTaskIncrementTick+0x150>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	3301      	adds	r3, #1
 8013da6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013da8:	4a4c      	ldr	r2, [pc, #304]	@ (8013edc <xTaskIncrementTick+0x150>)
 8013daa:	693b      	ldr	r3, [r7, #16]
 8013dac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013dae:	693b      	ldr	r3, [r7, #16]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d123      	bne.n	8013dfc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8013db4:	4b4a      	ldr	r3, [pc, #296]	@ (8013ee0 <xTaskIncrementTick+0x154>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d00d      	beq.n	8013dda <xTaskIncrementTick+0x4e>
	__asm volatile
 8013dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dc2:	b672      	cpsid	i
 8013dc4:	f383 8811 	msr	BASEPRI, r3
 8013dc8:	f3bf 8f6f 	isb	sy
 8013dcc:	f3bf 8f4f 	dsb	sy
 8013dd0:	b662      	cpsie	i
 8013dd2:	603b      	str	r3, [r7, #0]
}
 8013dd4:	bf00      	nop
 8013dd6:	bf00      	nop
 8013dd8:	e7fd      	b.n	8013dd6 <xTaskIncrementTick+0x4a>
 8013dda:	4b41      	ldr	r3, [pc, #260]	@ (8013ee0 <xTaskIncrementTick+0x154>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	60fb      	str	r3, [r7, #12]
 8013de0:	4b40      	ldr	r3, [pc, #256]	@ (8013ee4 <xTaskIncrementTick+0x158>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	4a3e      	ldr	r2, [pc, #248]	@ (8013ee0 <xTaskIncrementTick+0x154>)
 8013de6:	6013      	str	r3, [r2, #0]
 8013de8:	4a3e      	ldr	r2, [pc, #248]	@ (8013ee4 <xTaskIncrementTick+0x158>)
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	6013      	str	r3, [r2, #0]
 8013dee:	4b3e      	ldr	r3, [pc, #248]	@ (8013ee8 <xTaskIncrementTick+0x15c>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	3301      	adds	r3, #1
 8013df4:	4a3c      	ldr	r2, [pc, #240]	@ (8013ee8 <xTaskIncrementTick+0x15c>)
 8013df6:	6013      	str	r3, [r2, #0]
 8013df8:	f000 fae6 	bl	80143c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8013eec <xTaskIncrementTick+0x160>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	693a      	ldr	r2, [r7, #16]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d348      	bcc.n	8013e98 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e06:	4b36      	ldr	r3, [pc, #216]	@ (8013ee0 <xTaskIncrementTick+0x154>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d104      	bne.n	8013e1a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e10:	4b36      	ldr	r3, [pc, #216]	@ (8013eec <xTaskIncrementTick+0x160>)
 8013e12:	f04f 32ff 	mov.w	r2, #4294967295
 8013e16:	601a      	str	r2, [r3, #0]
					break;
 8013e18:	e03e      	b.n	8013e98 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e1a:	4b31      	ldr	r3, [pc, #196]	@ (8013ee0 <xTaskIncrementTick+0x154>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	68db      	ldr	r3, [r3, #12]
 8013e20:	68db      	ldr	r3, [r3, #12]
 8013e22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013e2a:	693a      	ldr	r2, [r7, #16]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d203      	bcs.n	8013e3a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013e32:	4a2e      	ldr	r2, [pc, #184]	@ (8013eec <xTaskIncrementTick+0x160>)
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013e38:	e02e      	b.n	8013e98 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	3304      	adds	r3, #4
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7fe fc30 	bl	80126a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013e44:	68bb      	ldr	r3, [r7, #8]
 8013e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d004      	beq.n	8013e56 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	3318      	adds	r3, #24
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7fe fc27 	bl	80126a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013e56:	68bb      	ldr	r3, [r7, #8]
 8013e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e5a:	2201      	movs	r2, #1
 8013e5c:	409a      	lsls	r2, r3
 8013e5e:	4b24      	ldr	r3, [pc, #144]	@ (8013ef0 <xTaskIncrementTick+0x164>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	4313      	orrs	r3, r2
 8013e64:	4a22      	ldr	r2, [pc, #136]	@ (8013ef0 <xTaskIncrementTick+0x164>)
 8013e66:	6013      	str	r3, [r2, #0]
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e6c:	4613      	mov	r3, r2
 8013e6e:	009b      	lsls	r3, r3, #2
 8013e70:	4413      	add	r3, r2
 8013e72:	009b      	lsls	r3, r3, #2
 8013e74:	4a1f      	ldr	r2, [pc, #124]	@ (8013ef4 <xTaskIncrementTick+0x168>)
 8013e76:	441a      	add	r2, r3
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	3304      	adds	r3, #4
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	4610      	mov	r0, r2
 8013e80:	f7fe fbb3 	bl	80125ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e88:	4b1b      	ldr	r3, [pc, #108]	@ (8013ef8 <xTaskIncrementTick+0x16c>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d3b9      	bcc.n	8013e06 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8013e92:	2301      	movs	r3, #1
 8013e94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e96:	e7b6      	b.n	8013e06 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013e98:	4b17      	ldr	r3, [pc, #92]	@ (8013ef8 <xTaskIncrementTick+0x16c>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e9e:	4915      	ldr	r1, [pc, #84]	@ (8013ef4 <xTaskIncrementTick+0x168>)
 8013ea0:	4613      	mov	r3, r2
 8013ea2:	009b      	lsls	r3, r3, #2
 8013ea4:	4413      	add	r3, r2
 8013ea6:	009b      	lsls	r3, r3, #2
 8013ea8:	440b      	add	r3, r1
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	d907      	bls.n	8013ec0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	617b      	str	r3, [r7, #20]
 8013eb4:	e004      	b.n	8013ec0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013eb6:	4b11      	ldr	r3, [pc, #68]	@ (8013efc <xTaskIncrementTick+0x170>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	3301      	adds	r3, #1
 8013ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8013efc <xTaskIncrementTick+0x170>)
 8013ebe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8013f00 <xTaskIncrementTick+0x174>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d001      	beq.n	8013ecc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8013ec8:	2301      	movs	r3, #1
 8013eca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013ecc:	697b      	ldr	r3, [r7, #20]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3718      	adds	r7, #24
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	20005640 	.word	0x20005640
 8013edc:	2000561c 	.word	0x2000561c
 8013ee0:	200055d0 	.word	0x200055d0
 8013ee4:	200055d4 	.word	0x200055d4
 8013ee8:	20005630 	.word	0x20005630
 8013eec:	20005638 	.word	0x20005638
 8013ef0:	20005620 	.word	0x20005620
 8013ef4:	2000551c 	.word	0x2000551c
 8013ef8:	20005518 	.word	0x20005518
 8013efc:	20005628 	.word	0x20005628
 8013f00:	2000562c 	.word	0x2000562c

08013f04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b088      	sub	sp, #32
 8013f08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013f0a:	4b3d      	ldr	r3, [pc, #244]	@ (8014000 <vTaskSwitchContext+0xfc>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d003      	beq.n	8013f1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013f12:	4b3c      	ldr	r3, [pc, #240]	@ (8014004 <vTaskSwitchContext+0x100>)
 8013f14:	2201      	movs	r2, #1
 8013f16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013f18:	e06e      	b.n	8013ff8 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8013f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8014004 <vTaskSwitchContext+0x100>)
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8013f20:	4b39      	ldr	r3, [pc, #228]	@ (8014008 <vTaskSwitchContext+0x104>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f26:	61fb      	str	r3, [r7, #28]
 8013f28:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8013f2c:	61bb      	str	r3, [r7, #24]
 8013f2e:	69fb      	ldr	r3, [r7, #28]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	69ba      	ldr	r2, [r7, #24]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d111      	bne.n	8013f5c <vTaskSwitchContext+0x58>
 8013f38:	69fb      	ldr	r3, [r7, #28]
 8013f3a:	3304      	adds	r3, #4
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	69ba      	ldr	r2, [r7, #24]
 8013f40:	429a      	cmp	r2, r3
 8013f42:	d10b      	bne.n	8013f5c <vTaskSwitchContext+0x58>
 8013f44:	69fb      	ldr	r3, [r7, #28]
 8013f46:	3308      	adds	r3, #8
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	69ba      	ldr	r2, [r7, #24]
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	d105      	bne.n	8013f5c <vTaskSwitchContext+0x58>
 8013f50:	69fb      	ldr	r3, [r7, #28]
 8013f52:	330c      	adds	r3, #12
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	69ba      	ldr	r2, [r7, #24]
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d008      	beq.n	8013f6e <vTaskSwitchContext+0x6a>
 8013f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8014008 <vTaskSwitchContext+0x104>)
 8013f5e:	681a      	ldr	r2, [r3, #0]
 8013f60:	4b29      	ldr	r3, [pc, #164]	@ (8014008 <vTaskSwitchContext+0x104>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	3334      	adds	r3, #52	@ 0x34
 8013f66:	4619      	mov	r1, r3
 8013f68:	4610      	mov	r0, r2
 8013f6a:	f7ec ffb4 	bl	8000ed6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f6e:	4b27      	ldr	r3, [pc, #156]	@ (801400c <vTaskSwitchContext+0x108>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	fab3 f383 	clz	r3, r3
 8013f7a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013f7c:	7afb      	ldrb	r3, [r7, #11]
 8013f7e:	f1c3 031f 	rsb	r3, r3, #31
 8013f82:	617b      	str	r3, [r7, #20]
 8013f84:	4922      	ldr	r1, [pc, #136]	@ (8014010 <vTaskSwitchContext+0x10c>)
 8013f86:	697a      	ldr	r2, [r7, #20]
 8013f88:	4613      	mov	r3, r2
 8013f8a:	009b      	lsls	r3, r3, #2
 8013f8c:	4413      	add	r3, r2
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	440b      	add	r3, r1
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d10d      	bne.n	8013fb4 <vTaskSwitchContext+0xb0>
	__asm volatile
 8013f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f9c:	b672      	cpsid	i
 8013f9e:	f383 8811 	msr	BASEPRI, r3
 8013fa2:	f3bf 8f6f 	isb	sy
 8013fa6:	f3bf 8f4f 	dsb	sy
 8013faa:	b662      	cpsie	i
 8013fac:	607b      	str	r3, [r7, #4]
}
 8013fae:	bf00      	nop
 8013fb0:	bf00      	nop
 8013fb2:	e7fd      	b.n	8013fb0 <vTaskSwitchContext+0xac>
 8013fb4:	697a      	ldr	r2, [r7, #20]
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	009b      	lsls	r3, r3, #2
 8013fba:	4413      	add	r3, r2
 8013fbc:	009b      	lsls	r3, r3, #2
 8013fbe:	4a14      	ldr	r2, [pc, #80]	@ (8014010 <vTaskSwitchContext+0x10c>)
 8013fc0:	4413      	add	r3, r2
 8013fc2:	613b      	str	r3, [r7, #16]
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	685b      	ldr	r3, [r3, #4]
 8013fc8:	685a      	ldr	r2, [r3, #4]
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	605a      	str	r2, [r3, #4]
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	685a      	ldr	r2, [r3, #4]
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	3308      	adds	r3, #8
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d104      	bne.n	8013fe4 <vTaskSwitchContext+0xe0>
 8013fda:	693b      	ldr	r3, [r7, #16]
 8013fdc:	685b      	ldr	r3, [r3, #4]
 8013fde:	685a      	ldr	r2, [r3, #4]
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	605a      	str	r2, [r3, #4]
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	685b      	ldr	r3, [r3, #4]
 8013fe8:	68db      	ldr	r3, [r3, #12]
 8013fea:	4a07      	ldr	r2, [pc, #28]	@ (8014008 <vTaskSwitchContext+0x104>)
 8013fec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013fee:	4b06      	ldr	r3, [pc, #24]	@ (8014008 <vTaskSwitchContext+0x104>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	3350      	adds	r3, #80	@ 0x50
 8013ff4:	4a07      	ldr	r2, [pc, #28]	@ (8014014 <vTaskSwitchContext+0x110>)
 8013ff6:	6013      	str	r3, [r2, #0]
}
 8013ff8:	bf00      	nop
 8013ffa:	3720      	adds	r7, #32
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}
 8014000:	20005640 	.word	0x20005640
 8014004:	2000562c 	.word	0x2000562c
 8014008:	20005518 	.word	0x20005518
 801400c:	20005620 	.word	0x20005620
 8014010:	2000551c 	.word	0x2000551c
 8014014:	20000020 	.word	0x20000020

08014018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b084      	sub	sp, #16
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d10d      	bne.n	8014044 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8014028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801402c:	b672      	cpsid	i
 801402e:	f383 8811 	msr	BASEPRI, r3
 8014032:	f3bf 8f6f 	isb	sy
 8014036:	f3bf 8f4f 	dsb	sy
 801403a:	b662      	cpsie	i
 801403c:	60fb      	str	r3, [r7, #12]
}
 801403e:	bf00      	nop
 8014040:	bf00      	nop
 8014042:	e7fd      	b.n	8014040 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014044:	4b07      	ldr	r3, [pc, #28]	@ (8014064 <vTaskPlaceOnEventList+0x4c>)
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	3318      	adds	r3, #24
 801404a:	4619      	mov	r1, r3
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f7fe faf0 	bl	8012632 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014052:	2101      	movs	r1, #1
 8014054:	6838      	ldr	r0, [r7, #0]
 8014056:	f000 fbb5 	bl	80147c4 <prvAddCurrentTaskToDelayedList>
}
 801405a:	bf00      	nop
 801405c:	3710      	adds	r7, #16
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	20005518 	.word	0x20005518

08014068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b086      	sub	sp, #24
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	68db      	ldr	r3, [r3, #12]
 8014074:	68db      	ldr	r3, [r3, #12]
 8014076:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d10d      	bne.n	801409a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801407e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014082:	b672      	cpsid	i
 8014084:	f383 8811 	msr	BASEPRI, r3
 8014088:	f3bf 8f6f 	isb	sy
 801408c:	f3bf 8f4f 	dsb	sy
 8014090:	b662      	cpsie	i
 8014092:	60fb      	str	r3, [r7, #12]
}
 8014094:	bf00      	nop
 8014096:	bf00      	nop
 8014098:	e7fd      	b.n	8014096 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	3318      	adds	r3, #24
 801409e:	4618      	mov	r0, r3
 80140a0:	f7fe fb00 	bl	80126a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80140a4:	4b1d      	ldr	r3, [pc, #116]	@ (801411c <xTaskRemoveFromEventList+0xb4>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d11c      	bne.n	80140e6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	3304      	adds	r3, #4
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7fe faf7 	bl	80126a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140ba:	2201      	movs	r2, #1
 80140bc:	409a      	lsls	r2, r3
 80140be:	4b18      	ldr	r3, [pc, #96]	@ (8014120 <xTaskRemoveFromEventList+0xb8>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	4313      	orrs	r3, r2
 80140c4:	4a16      	ldr	r2, [pc, #88]	@ (8014120 <xTaskRemoveFromEventList+0xb8>)
 80140c6:	6013      	str	r3, [r2, #0]
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140cc:	4613      	mov	r3, r2
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	4413      	add	r3, r2
 80140d2:	009b      	lsls	r3, r3, #2
 80140d4:	4a13      	ldr	r2, [pc, #76]	@ (8014124 <xTaskRemoveFromEventList+0xbc>)
 80140d6:	441a      	add	r2, r3
 80140d8:	693b      	ldr	r3, [r7, #16]
 80140da:	3304      	adds	r3, #4
 80140dc:	4619      	mov	r1, r3
 80140de:	4610      	mov	r0, r2
 80140e0:	f7fe fa83 	bl	80125ea <vListInsertEnd>
 80140e4:	e005      	b.n	80140f2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	3318      	adds	r3, #24
 80140ea:	4619      	mov	r1, r3
 80140ec:	480e      	ldr	r0, [pc, #56]	@ (8014128 <xTaskRemoveFromEventList+0xc0>)
 80140ee:	f7fe fa7c 	bl	80125ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140f6:	4b0d      	ldr	r3, [pc, #52]	@ (801412c <xTaskRemoveFromEventList+0xc4>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d905      	bls.n	801410c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014100:	2301      	movs	r3, #1
 8014102:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014104:	4b0a      	ldr	r3, [pc, #40]	@ (8014130 <xTaskRemoveFromEventList+0xc8>)
 8014106:	2201      	movs	r2, #1
 8014108:	601a      	str	r2, [r3, #0]
 801410a:	e001      	b.n	8014110 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 801410c:	2300      	movs	r3, #0
 801410e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014110:	697b      	ldr	r3, [r7, #20]
}
 8014112:	4618      	mov	r0, r3
 8014114:	3718      	adds	r7, #24
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}
 801411a:	bf00      	nop
 801411c:	20005640 	.word	0x20005640
 8014120:	20005620 	.word	0x20005620
 8014124:	2000551c 	.word	0x2000551c
 8014128:	200055d8 	.word	0x200055d8
 801412c:	20005518 	.word	0x20005518
 8014130:	2000562c 	.word	0x2000562c

08014134 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801413c:	4b06      	ldr	r3, [pc, #24]	@ (8014158 <vTaskInternalSetTimeOutState+0x24>)
 801413e:	681a      	ldr	r2, [r3, #0]
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014144:	4b05      	ldr	r3, [pc, #20]	@ (801415c <vTaskInternalSetTimeOutState+0x28>)
 8014146:	681a      	ldr	r2, [r3, #0]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	605a      	str	r2, [r3, #4]
}
 801414c:	bf00      	nop
 801414e:	370c      	adds	r7, #12
 8014150:	46bd      	mov	sp, r7
 8014152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014156:	4770      	bx	lr
 8014158:	20005630 	.word	0x20005630
 801415c:	2000561c 	.word	0x2000561c

08014160 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b088      	sub	sp, #32
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
 8014168:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d10d      	bne.n	801418c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8014170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014174:	b672      	cpsid	i
 8014176:	f383 8811 	msr	BASEPRI, r3
 801417a:	f3bf 8f6f 	isb	sy
 801417e:	f3bf 8f4f 	dsb	sy
 8014182:	b662      	cpsie	i
 8014184:	613b      	str	r3, [r7, #16]
}
 8014186:	bf00      	nop
 8014188:	bf00      	nop
 801418a:	e7fd      	b.n	8014188 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d10d      	bne.n	80141ae <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8014192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014196:	b672      	cpsid	i
 8014198:	f383 8811 	msr	BASEPRI, r3
 801419c:	f3bf 8f6f 	isb	sy
 80141a0:	f3bf 8f4f 	dsb	sy
 80141a4:	b662      	cpsie	i
 80141a6:	60fb      	str	r3, [r7, #12]
}
 80141a8:	bf00      	nop
 80141aa:	bf00      	nop
 80141ac:	e7fd      	b.n	80141aa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80141ae:	f000 fc7d 	bl	8014aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80141b2:	4b1d      	ldr	r3, [pc, #116]	@ (8014228 <xTaskCheckForTimeOut+0xc8>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	685b      	ldr	r3, [r3, #4]
 80141bc:	69ba      	ldr	r2, [r7, #24]
 80141be:	1ad3      	subs	r3, r2, r3
 80141c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ca:	d102      	bne.n	80141d2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80141cc:	2300      	movs	r3, #0
 80141ce:	61fb      	str	r3, [r7, #28]
 80141d0:	e023      	b.n	801421a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681a      	ldr	r2, [r3, #0]
 80141d6:	4b15      	ldr	r3, [pc, #84]	@ (801422c <xTaskCheckForTimeOut+0xcc>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d007      	beq.n	80141ee <xTaskCheckForTimeOut+0x8e>
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	685b      	ldr	r3, [r3, #4]
 80141e2:	69ba      	ldr	r2, [r7, #24]
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d302      	bcc.n	80141ee <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80141e8:	2301      	movs	r3, #1
 80141ea:	61fb      	str	r3, [r7, #28]
 80141ec:	e015      	b.n	801421a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	697a      	ldr	r2, [r7, #20]
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d20b      	bcs.n	8014210 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	681a      	ldr	r2, [r3, #0]
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	1ad2      	subs	r2, r2, r3
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f7ff ff95 	bl	8014134 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801420a:	2300      	movs	r3, #0
 801420c:	61fb      	str	r3, [r7, #28]
 801420e:	e004      	b.n	801421a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	2200      	movs	r2, #0
 8014214:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014216:	2301      	movs	r3, #1
 8014218:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801421a:	f000 fc7d 	bl	8014b18 <vPortExitCritical>

	return xReturn;
 801421e:	69fb      	ldr	r3, [r7, #28]
}
 8014220:	4618      	mov	r0, r3
 8014222:	3720      	adds	r7, #32
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}
 8014228:	2000561c 	.word	0x2000561c
 801422c:	20005630 	.word	0x20005630

08014230 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014230:	b480      	push	{r7}
 8014232:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014234:	4b03      	ldr	r3, [pc, #12]	@ (8014244 <vTaskMissedYield+0x14>)
 8014236:	2201      	movs	r2, #1
 8014238:	601a      	str	r2, [r3, #0]
}
 801423a:	bf00      	nop
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr
 8014244:	2000562c 	.word	0x2000562c

08014248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014250:	f000 f854 	bl	80142fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014254:	4b07      	ldr	r3, [pc, #28]	@ (8014274 <prvIdleTask+0x2c>)
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	2b01      	cmp	r3, #1
 801425a:	d907      	bls.n	801426c <prvIdleTask+0x24>
			{
				taskYIELD();
 801425c:	4b06      	ldr	r3, [pc, #24]	@ (8014278 <prvIdleTask+0x30>)
 801425e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014262:	601a      	str	r2, [r3, #0]
 8014264:	f3bf 8f4f 	dsb	sy
 8014268:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801426c:	f7ec fe2c 	bl	8000ec8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8014270:	e7ee      	b.n	8014250 <prvIdleTask+0x8>
 8014272:	bf00      	nop
 8014274:	2000551c 	.word	0x2000551c
 8014278:	e000ed04 	.word	0xe000ed04

0801427c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014282:	2300      	movs	r3, #0
 8014284:	607b      	str	r3, [r7, #4]
 8014286:	e00c      	b.n	80142a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014288:	687a      	ldr	r2, [r7, #4]
 801428a:	4613      	mov	r3, r2
 801428c:	009b      	lsls	r3, r3, #2
 801428e:	4413      	add	r3, r2
 8014290:	009b      	lsls	r3, r3, #2
 8014292:	4a12      	ldr	r2, [pc, #72]	@ (80142dc <prvInitialiseTaskLists+0x60>)
 8014294:	4413      	add	r3, r2
 8014296:	4618      	mov	r0, r3
 8014298:	f7fe f97a 	bl	8012590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	3301      	adds	r3, #1
 80142a0:	607b      	str	r3, [r7, #4]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2b06      	cmp	r3, #6
 80142a6:	d9ef      	bls.n	8014288 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80142a8:	480d      	ldr	r0, [pc, #52]	@ (80142e0 <prvInitialiseTaskLists+0x64>)
 80142aa:	f7fe f971 	bl	8012590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80142ae:	480d      	ldr	r0, [pc, #52]	@ (80142e4 <prvInitialiseTaskLists+0x68>)
 80142b0:	f7fe f96e 	bl	8012590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80142b4:	480c      	ldr	r0, [pc, #48]	@ (80142e8 <prvInitialiseTaskLists+0x6c>)
 80142b6:	f7fe f96b 	bl	8012590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80142ba:	480c      	ldr	r0, [pc, #48]	@ (80142ec <prvInitialiseTaskLists+0x70>)
 80142bc:	f7fe f968 	bl	8012590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80142c0:	480b      	ldr	r0, [pc, #44]	@ (80142f0 <prvInitialiseTaskLists+0x74>)
 80142c2:	f7fe f965 	bl	8012590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80142c6:	4b0b      	ldr	r3, [pc, #44]	@ (80142f4 <prvInitialiseTaskLists+0x78>)
 80142c8:	4a05      	ldr	r2, [pc, #20]	@ (80142e0 <prvInitialiseTaskLists+0x64>)
 80142ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80142cc:	4b0a      	ldr	r3, [pc, #40]	@ (80142f8 <prvInitialiseTaskLists+0x7c>)
 80142ce:	4a05      	ldr	r2, [pc, #20]	@ (80142e4 <prvInitialiseTaskLists+0x68>)
 80142d0:	601a      	str	r2, [r3, #0]
}
 80142d2:	bf00      	nop
 80142d4:	3708      	adds	r7, #8
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}
 80142da:	bf00      	nop
 80142dc:	2000551c 	.word	0x2000551c
 80142e0:	200055a8 	.word	0x200055a8
 80142e4:	200055bc 	.word	0x200055bc
 80142e8:	200055d8 	.word	0x200055d8
 80142ec:	200055ec 	.word	0x200055ec
 80142f0:	20005604 	.word	0x20005604
 80142f4:	200055d0 	.word	0x200055d0
 80142f8:	200055d4 	.word	0x200055d4

080142fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b082      	sub	sp, #8
 8014300:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014302:	e019      	b.n	8014338 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014304:	f000 fbd2 	bl	8014aac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014308:	4b10      	ldr	r3, [pc, #64]	@ (801434c <prvCheckTasksWaitingTermination+0x50>)
 801430a:	68db      	ldr	r3, [r3, #12]
 801430c:	68db      	ldr	r3, [r3, #12]
 801430e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	3304      	adds	r3, #4
 8014314:	4618      	mov	r0, r3
 8014316:	f7fe f9c5 	bl	80126a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801431a:	4b0d      	ldr	r3, [pc, #52]	@ (8014350 <prvCheckTasksWaitingTermination+0x54>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	3b01      	subs	r3, #1
 8014320:	4a0b      	ldr	r2, [pc, #44]	@ (8014350 <prvCheckTasksWaitingTermination+0x54>)
 8014322:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014324:	4b0b      	ldr	r3, [pc, #44]	@ (8014354 <prvCheckTasksWaitingTermination+0x58>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	3b01      	subs	r3, #1
 801432a:	4a0a      	ldr	r2, [pc, #40]	@ (8014354 <prvCheckTasksWaitingTermination+0x58>)
 801432c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801432e:	f000 fbf3 	bl	8014b18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f000 f810 	bl	8014358 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014338:	4b06      	ldr	r3, [pc, #24]	@ (8014354 <prvCheckTasksWaitingTermination+0x58>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d1e1      	bne.n	8014304 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014340:	bf00      	nop
 8014342:	bf00      	nop
 8014344:	3708      	adds	r7, #8
 8014346:	46bd      	mov	sp, r7
 8014348:	bd80      	pop	{r7, pc}
 801434a:	bf00      	nop
 801434c:	200055ec 	.word	0x200055ec
 8014350:	20005618 	.word	0x20005618
 8014354:	20005600 	.word	0x20005600

08014358 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014358:	b580      	push	{r7, lr}
 801435a:	b084      	sub	sp, #16
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	3350      	adds	r3, #80	@ 0x50
 8014364:	4618      	mov	r0, r3
 8014366:	f001 f8df 	bl	8015528 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8014370:	2b00      	cmp	r3, #0
 8014372:	d108      	bne.n	8014386 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014378:	4618      	mov	r0, r3
 801437a:	f000 fd97 	bl	8014eac <vPortFree>
				vPortFree( pxTCB );
 801437e:	6878      	ldr	r0, [r7, #4]
 8014380:	f000 fd94 	bl	8014eac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014384:	e01b      	b.n	80143be <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 801438c:	2b01      	cmp	r3, #1
 801438e:	d103      	bne.n	8014398 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014390:	6878      	ldr	r0, [r7, #4]
 8014392:	f000 fd8b 	bl	8014eac <vPortFree>
	}
 8014396:	e012      	b.n	80143be <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 801439e:	2b02      	cmp	r3, #2
 80143a0:	d00d      	beq.n	80143be <prvDeleteTCB+0x66>
	__asm volatile
 80143a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143a6:	b672      	cpsid	i
 80143a8:	f383 8811 	msr	BASEPRI, r3
 80143ac:	f3bf 8f6f 	isb	sy
 80143b0:	f3bf 8f4f 	dsb	sy
 80143b4:	b662      	cpsie	i
 80143b6:	60fb      	str	r3, [r7, #12]
}
 80143b8:	bf00      	nop
 80143ba:	bf00      	nop
 80143bc:	e7fd      	b.n	80143ba <prvDeleteTCB+0x62>
	}
 80143be:	bf00      	nop
 80143c0:	3710      	adds	r7, #16
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
	...

080143c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80143c8:	b480      	push	{r7}
 80143ca:	b083      	sub	sp, #12
 80143cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80143ce:	4b0c      	ldr	r3, [pc, #48]	@ (8014400 <prvResetNextTaskUnblockTime+0x38>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d104      	bne.n	80143e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80143d8:	4b0a      	ldr	r3, [pc, #40]	@ (8014404 <prvResetNextTaskUnblockTime+0x3c>)
 80143da:	f04f 32ff 	mov.w	r2, #4294967295
 80143de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80143e0:	e008      	b.n	80143f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143e2:	4b07      	ldr	r3, [pc, #28]	@ (8014400 <prvResetNextTaskUnblockTime+0x38>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	68db      	ldr	r3, [r3, #12]
 80143e8:	68db      	ldr	r3, [r3, #12]
 80143ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	4a04      	ldr	r2, [pc, #16]	@ (8014404 <prvResetNextTaskUnblockTime+0x3c>)
 80143f2:	6013      	str	r3, [r2, #0]
}
 80143f4:	bf00      	nop
 80143f6:	370c      	adds	r7, #12
 80143f8:	46bd      	mov	sp, r7
 80143fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fe:	4770      	bx	lr
 8014400:	200055d0 	.word	0x200055d0
 8014404:	20005638 	.word	0x20005638

08014408 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014408:	b480      	push	{r7}
 801440a:	b083      	sub	sp, #12
 801440c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801440e:	4b0b      	ldr	r3, [pc, #44]	@ (801443c <xTaskGetSchedulerState+0x34>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d102      	bne.n	801441c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014416:	2301      	movs	r3, #1
 8014418:	607b      	str	r3, [r7, #4]
 801441a:	e008      	b.n	801442e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801441c:	4b08      	ldr	r3, [pc, #32]	@ (8014440 <xTaskGetSchedulerState+0x38>)
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d102      	bne.n	801442a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014424:	2302      	movs	r3, #2
 8014426:	607b      	str	r3, [r7, #4]
 8014428:	e001      	b.n	801442e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801442a:	2300      	movs	r3, #0
 801442c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801442e:	687b      	ldr	r3, [r7, #4]
	}
 8014430:	4618      	mov	r0, r3
 8014432:	370c      	adds	r7, #12
 8014434:	46bd      	mov	sp, r7
 8014436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443a:	4770      	bx	lr
 801443c:	20005624 	.word	0x20005624
 8014440:	20005640 	.word	0x20005640

08014444 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014450:	2300      	movs	r3, #0
 8014452:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d069      	beq.n	801452e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801445e:	4b36      	ldr	r3, [pc, #216]	@ (8014538 <xTaskPriorityInherit+0xf4>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014464:	429a      	cmp	r2, r3
 8014466:	d259      	bcs.n	801451c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	699b      	ldr	r3, [r3, #24]
 801446c:	2b00      	cmp	r3, #0
 801446e:	db06      	blt.n	801447e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014470:	4b31      	ldr	r3, [pc, #196]	@ (8014538 <xTaskPriorityInherit+0xf4>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014476:	f1c3 0207 	rsb	r2, r3, #7
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	6959      	ldr	r1, [r3, #20]
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014486:	4613      	mov	r3, r2
 8014488:	009b      	lsls	r3, r3, #2
 801448a:	4413      	add	r3, r2
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	4a2b      	ldr	r2, [pc, #172]	@ (801453c <xTaskPriorityInherit+0xf8>)
 8014490:	4413      	add	r3, r2
 8014492:	4299      	cmp	r1, r3
 8014494:	d13a      	bne.n	801450c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	3304      	adds	r3, #4
 801449a:	4618      	mov	r0, r3
 801449c:	f7fe f902 	bl	80126a4 <uxListRemove>
 80144a0:	4603      	mov	r3, r0
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d115      	bne.n	80144d2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144aa:	4924      	ldr	r1, [pc, #144]	@ (801453c <xTaskPriorityInherit+0xf8>)
 80144ac:	4613      	mov	r3, r2
 80144ae:	009b      	lsls	r3, r3, #2
 80144b0:	4413      	add	r3, r2
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	440b      	add	r3, r1
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d10a      	bne.n	80144d2 <xTaskPriorityInherit+0x8e>
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144c0:	2201      	movs	r2, #1
 80144c2:	fa02 f303 	lsl.w	r3, r2, r3
 80144c6:	43da      	mvns	r2, r3
 80144c8:	4b1d      	ldr	r3, [pc, #116]	@ (8014540 <xTaskPriorityInherit+0xfc>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	4013      	ands	r3, r2
 80144ce:	4a1c      	ldr	r2, [pc, #112]	@ (8014540 <xTaskPriorityInherit+0xfc>)
 80144d0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80144d2:	4b19      	ldr	r3, [pc, #100]	@ (8014538 <xTaskPriorityInherit+0xf4>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144e0:	2201      	movs	r2, #1
 80144e2:	409a      	lsls	r2, r3
 80144e4:	4b16      	ldr	r3, [pc, #88]	@ (8014540 <xTaskPriorityInherit+0xfc>)
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	4313      	orrs	r3, r2
 80144ea:	4a15      	ldr	r2, [pc, #84]	@ (8014540 <xTaskPriorityInherit+0xfc>)
 80144ec:	6013      	str	r3, [r2, #0]
 80144ee:	68bb      	ldr	r3, [r7, #8]
 80144f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80144f2:	4613      	mov	r3, r2
 80144f4:	009b      	lsls	r3, r3, #2
 80144f6:	4413      	add	r3, r2
 80144f8:	009b      	lsls	r3, r3, #2
 80144fa:	4a10      	ldr	r2, [pc, #64]	@ (801453c <xTaskPriorityInherit+0xf8>)
 80144fc:	441a      	add	r2, r3
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	3304      	adds	r3, #4
 8014502:	4619      	mov	r1, r3
 8014504:	4610      	mov	r0, r2
 8014506:	f7fe f870 	bl	80125ea <vListInsertEnd>
 801450a:	e004      	b.n	8014516 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801450c:	4b0a      	ldr	r3, [pc, #40]	@ (8014538 <xTaskPriorityInherit+0xf4>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014512:	68bb      	ldr	r3, [r7, #8]
 8014514:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014516:	2301      	movs	r3, #1
 8014518:	60fb      	str	r3, [r7, #12]
 801451a:	e008      	b.n	801452e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014520:	4b05      	ldr	r3, [pc, #20]	@ (8014538 <xTaskPriorityInherit+0xf4>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014526:	429a      	cmp	r2, r3
 8014528:	d201      	bcs.n	801452e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801452a:	2301      	movs	r3, #1
 801452c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801452e:	68fb      	ldr	r3, [r7, #12]
	}
 8014530:	4618      	mov	r0, r3
 8014532:	3710      	adds	r7, #16
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	20005518 	.word	0x20005518
 801453c:	2000551c 	.word	0x2000551c
 8014540:	20005620 	.word	0x20005620

08014544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014544:	b580      	push	{r7, lr}
 8014546:	b086      	sub	sp, #24
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014550:	2300      	movs	r3, #0
 8014552:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d074      	beq.n	8014644 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801455a:	4b3d      	ldr	r3, [pc, #244]	@ (8014650 <xTaskPriorityDisinherit+0x10c>)
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	693a      	ldr	r2, [r7, #16]
 8014560:	429a      	cmp	r2, r3
 8014562:	d00d      	beq.n	8014580 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8014564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014568:	b672      	cpsid	i
 801456a:	f383 8811 	msr	BASEPRI, r3
 801456e:	f3bf 8f6f 	isb	sy
 8014572:	f3bf 8f4f 	dsb	sy
 8014576:	b662      	cpsie	i
 8014578:	60fb      	str	r3, [r7, #12]
}
 801457a:	bf00      	nop
 801457c:	bf00      	nop
 801457e:	e7fd      	b.n	801457c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014584:	2b00      	cmp	r3, #0
 8014586:	d10d      	bne.n	80145a4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8014588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801458c:	b672      	cpsid	i
 801458e:	f383 8811 	msr	BASEPRI, r3
 8014592:	f3bf 8f6f 	isb	sy
 8014596:	f3bf 8f4f 	dsb	sy
 801459a:	b662      	cpsie	i
 801459c:	60bb      	str	r3, [r7, #8]
}
 801459e:	bf00      	nop
 80145a0:	bf00      	nop
 80145a2:	e7fd      	b.n	80145a0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80145a8:	1e5a      	subs	r2, r3, #1
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145b2:	693b      	ldr	r3, [r7, #16]
 80145b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145b6:	429a      	cmp	r2, r3
 80145b8:	d044      	beq.n	8014644 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80145ba:	693b      	ldr	r3, [r7, #16]
 80145bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d140      	bne.n	8014644 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	3304      	adds	r3, #4
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7fe f86c 	bl	80126a4 <uxListRemove>
 80145cc:	4603      	mov	r3, r0
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d115      	bne.n	80145fe <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80145d2:	693b      	ldr	r3, [r7, #16]
 80145d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145d6:	491f      	ldr	r1, [pc, #124]	@ (8014654 <xTaskPriorityDisinherit+0x110>)
 80145d8:	4613      	mov	r3, r2
 80145da:	009b      	lsls	r3, r3, #2
 80145dc:	4413      	add	r3, r2
 80145de:	009b      	lsls	r3, r3, #2
 80145e0:	440b      	add	r3, r1
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d10a      	bne.n	80145fe <xTaskPriorityDisinherit+0xba>
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ec:	2201      	movs	r2, #1
 80145ee:	fa02 f303 	lsl.w	r3, r2, r3
 80145f2:	43da      	mvns	r2, r3
 80145f4:	4b18      	ldr	r3, [pc, #96]	@ (8014658 <xTaskPriorityDisinherit+0x114>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	4013      	ands	r3, r2
 80145fa:	4a17      	ldr	r2, [pc, #92]	@ (8014658 <xTaskPriorityDisinherit+0x114>)
 80145fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801460a:	f1c3 0207 	rsb	r2, r3, #7
 801460e:	693b      	ldr	r3, [r7, #16]
 8014610:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014616:	2201      	movs	r2, #1
 8014618:	409a      	lsls	r2, r3
 801461a:	4b0f      	ldr	r3, [pc, #60]	@ (8014658 <xTaskPriorityDisinherit+0x114>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	4313      	orrs	r3, r2
 8014620:	4a0d      	ldr	r2, [pc, #52]	@ (8014658 <xTaskPriorityDisinherit+0x114>)
 8014622:	6013      	str	r3, [r2, #0]
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014628:	4613      	mov	r3, r2
 801462a:	009b      	lsls	r3, r3, #2
 801462c:	4413      	add	r3, r2
 801462e:	009b      	lsls	r3, r3, #2
 8014630:	4a08      	ldr	r2, [pc, #32]	@ (8014654 <xTaskPriorityDisinherit+0x110>)
 8014632:	441a      	add	r2, r3
 8014634:	693b      	ldr	r3, [r7, #16]
 8014636:	3304      	adds	r3, #4
 8014638:	4619      	mov	r1, r3
 801463a:	4610      	mov	r0, r2
 801463c:	f7fd ffd5 	bl	80125ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014640:	2301      	movs	r3, #1
 8014642:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014644:	697b      	ldr	r3, [r7, #20]
	}
 8014646:	4618      	mov	r0, r3
 8014648:	3718      	adds	r7, #24
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
 801464e:	bf00      	nop
 8014650:	20005518 	.word	0x20005518
 8014654:	2000551c 	.word	0x2000551c
 8014658:	20005620 	.word	0x20005620

0801465c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801465c:	b580      	push	{r7, lr}
 801465e:	b088      	sub	sp, #32
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801466a:	2301      	movs	r3, #1
 801466c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	2b00      	cmp	r3, #0
 8014672:	f000 8089 	beq.w	8014788 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014676:	69bb      	ldr	r3, [r7, #24]
 8014678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801467a:	2b00      	cmp	r3, #0
 801467c:	d10d      	bne.n	801469a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 801467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014682:	b672      	cpsid	i
 8014684:	f383 8811 	msr	BASEPRI, r3
 8014688:	f3bf 8f6f 	isb	sy
 801468c:	f3bf 8f4f 	dsb	sy
 8014690:	b662      	cpsie	i
 8014692:	60fb      	str	r3, [r7, #12]
}
 8014694:	bf00      	nop
 8014696:	bf00      	nop
 8014698:	e7fd      	b.n	8014696 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801469a:	69bb      	ldr	r3, [r7, #24]
 801469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801469e:	683a      	ldr	r2, [r7, #0]
 80146a0:	429a      	cmp	r2, r3
 80146a2:	d902      	bls.n	80146aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	61fb      	str	r3, [r7, #28]
 80146a8:	e002      	b.n	80146b0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80146aa:	69bb      	ldr	r3, [r7, #24]
 80146ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80146ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80146b0:	69bb      	ldr	r3, [r7, #24]
 80146b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146b4:	69fa      	ldr	r2, [r7, #28]
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d066      	beq.n	8014788 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80146ba:	69bb      	ldr	r3, [r7, #24]
 80146bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80146be:	697a      	ldr	r2, [r7, #20]
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d161      	bne.n	8014788 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80146c4:	4b32      	ldr	r3, [pc, #200]	@ (8014790 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	69ba      	ldr	r2, [r7, #24]
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d10d      	bne.n	80146ea <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80146ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146d2:	b672      	cpsid	i
 80146d4:	f383 8811 	msr	BASEPRI, r3
 80146d8:	f3bf 8f6f 	isb	sy
 80146dc:	f3bf 8f4f 	dsb	sy
 80146e0:	b662      	cpsie	i
 80146e2:	60bb      	str	r3, [r7, #8]
}
 80146e4:	bf00      	nop
 80146e6:	bf00      	nop
 80146e8:	e7fd      	b.n	80146e6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80146ea:	69bb      	ldr	r3, [r7, #24]
 80146ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146ee:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80146f0:	69bb      	ldr	r3, [r7, #24]
 80146f2:	69fa      	ldr	r2, [r7, #28]
 80146f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80146f6:	69bb      	ldr	r3, [r7, #24]
 80146f8:	699b      	ldr	r3, [r3, #24]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	db04      	blt.n	8014708 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146fe:	69fb      	ldr	r3, [r7, #28]
 8014700:	f1c3 0207 	rsb	r2, r3, #7
 8014704:	69bb      	ldr	r3, [r7, #24]
 8014706:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	6959      	ldr	r1, [r3, #20]
 801470c:	693a      	ldr	r2, [r7, #16]
 801470e:	4613      	mov	r3, r2
 8014710:	009b      	lsls	r3, r3, #2
 8014712:	4413      	add	r3, r2
 8014714:	009b      	lsls	r3, r3, #2
 8014716:	4a1f      	ldr	r2, [pc, #124]	@ (8014794 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014718:	4413      	add	r3, r2
 801471a:	4299      	cmp	r1, r3
 801471c:	d134      	bne.n	8014788 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801471e:	69bb      	ldr	r3, [r7, #24]
 8014720:	3304      	adds	r3, #4
 8014722:	4618      	mov	r0, r3
 8014724:	f7fd ffbe 	bl	80126a4 <uxListRemove>
 8014728:	4603      	mov	r3, r0
 801472a:	2b00      	cmp	r3, #0
 801472c:	d115      	bne.n	801475a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801472e:	69bb      	ldr	r3, [r7, #24]
 8014730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014732:	4918      	ldr	r1, [pc, #96]	@ (8014794 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014734:	4613      	mov	r3, r2
 8014736:	009b      	lsls	r3, r3, #2
 8014738:	4413      	add	r3, r2
 801473a:	009b      	lsls	r3, r3, #2
 801473c:	440b      	add	r3, r1
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d10a      	bne.n	801475a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8014744:	69bb      	ldr	r3, [r7, #24]
 8014746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014748:	2201      	movs	r2, #1
 801474a:	fa02 f303 	lsl.w	r3, r2, r3
 801474e:	43da      	mvns	r2, r3
 8014750:	4b11      	ldr	r3, [pc, #68]	@ (8014798 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	4013      	ands	r3, r2
 8014756:	4a10      	ldr	r2, [pc, #64]	@ (8014798 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014758:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801475a:	69bb      	ldr	r3, [r7, #24]
 801475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801475e:	2201      	movs	r2, #1
 8014760:	409a      	lsls	r2, r3
 8014762:	4b0d      	ldr	r3, [pc, #52]	@ (8014798 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	4313      	orrs	r3, r2
 8014768:	4a0b      	ldr	r2, [pc, #44]	@ (8014798 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801476a:	6013      	str	r3, [r2, #0]
 801476c:	69bb      	ldr	r3, [r7, #24]
 801476e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014770:	4613      	mov	r3, r2
 8014772:	009b      	lsls	r3, r3, #2
 8014774:	4413      	add	r3, r2
 8014776:	009b      	lsls	r3, r3, #2
 8014778:	4a06      	ldr	r2, [pc, #24]	@ (8014794 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801477a:	441a      	add	r2, r3
 801477c:	69bb      	ldr	r3, [r7, #24]
 801477e:	3304      	adds	r3, #4
 8014780:	4619      	mov	r1, r3
 8014782:	4610      	mov	r0, r2
 8014784:	f7fd ff31 	bl	80125ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014788:	bf00      	nop
 801478a:	3720      	adds	r7, #32
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}
 8014790:	20005518 	.word	0x20005518
 8014794:	2000551c 	.word	0x2000551c
 8014798:	20005620 	.word	0x20005620

0801479c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801479c:	b480      	push	{r7}
 801479e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80147a0:	4b07      	ldr	r3, [pc, #28]	@ (80147c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d004      	beq.n	80147b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80147a8:	4b05      	ldr	r3, [pc, #20]	@ (80147c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80147ae:	3201      	adds	r2, #1
 80147b0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80147b2:	4b03      	ldr	r3, [pc, #12]	@ (80147c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80147b4:	681b      	ldr	r3, [r3, #0]
	}
 80147b6:	4618      	mov	r0, r3
 80147b8:	46bd      	mov	sp, r7
 80147ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147be:	4770      	bx	lr
 80147c0:	20005518 	.word	0x20005518

080147c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b084      	sub	sp, #16
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80147ce:	4b29      	ldr	r3, [pc, #164]	@ (8014874 <prvAddCurrentTaskToDelayedList+0xb0>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80147d4:	4b28      	ldr	r3, [pc, #160]	@ (8014878 <prvAddCurrentTaskToDelayedList+0xb4>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	3304      	adds	r3, #4
 80147da:	4618      	mov	r0, r3
 80147dc:	f7fd ff62 	bl	80126a4 <uxListRemove>
 80147e0:	4603      	mov	r3, r0
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d10b      	bne.n	80147fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80147e6:	4b24      	ldr	r3, [pc, #144]	@ (8014878 <prvAddCurrentTaskToDelayedList+0xb4>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147ec:	2201      	movs	r2, #1
 80147ee:	fa02 f303 	lsl.w	r3, r2, r3
 80147f2:	43da      	mvns	r2, r3
 80147f4:	4b21      	ldr	r3, [pc, #132]	@ (801487c <prvAddCurrentTaskToDelayedList+0xb8>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	4013      	ands	r3, r2
 80147fa:	4a20      	ldr	r2, [pc, #128]	@ (801487c <prvAddCurrentTaskToDelayedList+0xb8>)
 80147fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014804:	d10a      	bne.n	801481c <prvAddCurrentTaskToDelayedList+0x58>
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d007      	beq.n	801481c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801480c:	4b1a      	ldr	r3, [pc, #104]	@ (8014878 <prvAddCurrentTaskToDelayedList+0xb4>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	3304      	adds	r3, #4
 8014812:	4619      	mov	r1, r3
 8014814:	481a      	ldr	r0, [pc, #104]	@ (8014880 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014816:	f7fd fee8 	bl	80125ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801481a:	e026      	b.n	801486a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801481c:	68fa      	ldr	r2, [r7, #12]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	4413      	add	r3, r2
 8014822:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014824:	4b14      	ldr	r3, [pc, #80]	@ (8014878 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	68ba      	ldr	r2, [r7, #8]
 801482a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801482c:	68ba      	ldr	r2, [r7, #8]
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	429a      	cmp	r2, r3
 8014832:	d209      	bcs.n	8014848 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014834:	4b13      	ldr	r3, [pc, #76]	@ (8014884 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014836:	681a      	ldr	r2, [r3, #0]
 8014838:	4b0f      	ldr	r3, [pc, #60]	@ (8014878 <prvAddCurrentTaskToDelayedList+0xb4>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	3304      	adds	r3, #4
 801483e:	4619      	mov	r1, r3
 8014840:	4610      	mov	r0, r2
 8014842:	f7fd fef6 	bl	8012632 <vListInsert>
}
 8014846:	e010      	b.n	801486a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014848:	4b0f      	ldr	r3, [pc, #60]	@ (8014888 <prvAddCurrentTaskToDelayedList+0xc4>)
 801484a:	681a      	ldr	r2, [r3, #0]
 801484c:	4b0a      	ldr	r3, [pc, #40]	@ (8014878 <prvAddCurrentTaskToDelayedList+0xb4>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	3304      	adds	r3, #4
 8014852:	4619      	mov	r1, r3
 8014854:	4610      	mov	r0, r2
 8014856:	f7fd feec 	bl	8012632 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801485a:	4b0c      	ldr	r3, [pc, #48]	@ (801488c <prvAddCurrentTaskToDelayedList+0xc8>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	68ba      	ldr	r2, [r7, #8]
 8014860:	429a      	cmp	r2, r3
 8014862:	d202      	bcs.n	801486a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014864:	4a09      	ldr	r2, [pc, #36]	@ (801488c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014866:	68bb      	ldr	r3, [r7, #8]
 8014868:	6013      	str	r3, [r2, #0]
}
 801486a:	bf00      	nop
 801486c:	3710      	adds	r7, #16
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	2000561c 	.word	0x2000561c
 8014878:	20005518 	.word	0x20005518
 801487c:	20005620 	.word	0x20005620
 8014880:	20005604 	.word	0x20005604
 8014884:	200055d4 	.word	0x200055d4
 8014888:	200055d0 	.word	0x200055d0
 801488c:	20005638 	.word	0x20005638

08014890 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014890:	b480      	push	{r7}
 8014892:	b085      	sub	sp, #20
 8014894:	af00      	add	r7, sp, #0
 8014896:	60f8      	str	r0, [r7, #12]
 8014898:	60b9      	str	r1, [r7, #8]
 801489a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	3b04      	subs	r3, #4
 80148a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80148a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	3b04      	subs	r3, #4
 80148ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	f023 0201 	bic.w	r2, r3, #1
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	3b04      	subs	r3, #4
 80148be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80148c0:	4a0c      	ldr	r2, [pc, #48]	@ (80148f4 <pxPortInitialiseStack+0x64>)
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	3b14      	subs	r3, #20
 80148ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80148cc:	687a      	ldr	r2, [r7, #4]
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	3b04      	subs	r3, #4
 80148d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	f06f 0202 	mvn.w	r2, #2
 80148de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	3b20      	subs	r3, #32
 80148e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80148e6:	68fb      	ldr	r3, [r7, #12]
}
 80148e8:	4618      	mov	r0, r3
 80148ea:	3714      	adds	r7, #20
 80148ec:	46bd      	mov	sp, r7
 80148ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f2:	4770      	bx	lr
 80148f4:	080148f9 	.word	0x080148f9

080148f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80148f8:	b480      	push	{r7}
 80148fa:	b085      	sub	sp, #20
 80148fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80148fe:	2300      	movs	r3, #0
 8014900:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014902:	4b15      	ldr	r3, [pc, #84]	@ (8014958 <prvTaskExitError+0x60>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801490a:	d00d      	beq.n	8014928 <prvTaskExitError+0x30>
	__asm volatile
 801490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014910:	b672      	cpsid	i
 8014912:	f383 8811 	msr	BASEPRI, r3
 8014916:	f3bf 8f6f 	isb	sy
 801491a:	f3bf 8f4f 	dsb	sy
 801491e:	b662      	cpsie	i
 8014920:	60fb      	str	r3, [r7, #12]
}
 8014922:	bf00      	nop
 8014924:	bf00      	nop
 8014926:	e7fd      	b.n	8014924 <prvTaskExitError+0x2c>
	__asm volatile
 8014928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801492c:	b672      	cpsid	i
 801492e:	f383 8811 	msr	BASEPRI, r3
 8014932:	f3bf 8f6f 	isb	sy
 8014936:	f3bf 8f4f 	dsb	sy
 801493a:	b662      	cpsie	i
 801493c:	60bb      	str	r3, [r7, #8]
}
 801493e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014940:	bf00      	nop
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d0fc      	beq.n	8014942 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014948:	bf00      	nop
 801494a:	bf00      	nop
 801494c:	3714      	adds	r7, #20
 801494e:	46bd      	mov	sp, r7
 8014950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014954:	4770      	bx	lr
 8014956:	bf00      	nop
 8014958:	20000010 	.word	0x20000010
 801495c:	00000000 	.word	0x00000000

08014960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014960:	4b07      	ldr	r3, [pc, #28]	@ (8014980 <pxCurrentTCBConst2>)
 8014962:	6819      	ldr	r1, [r3, #0]
 8014964:	6808      	ldr	r0, [r1, #0]
 8014966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801496a:	f380 8809 	msr	PSP, r0
 801496e:	f3bf 8f6f 	isb	sy
 8014972:	f04f 0000 	mov.w	r0, #0
 8014976:	f380 8811 	msr	BASEPRI, r0
 801497a:	4770      	bx	lr
 801497c:	f3af 8000 	nop.w

08014980 <pxCurrentTCBConst2>:
 8014980:	20005518 	.word	0x20005518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014984:	bf00      	nop
 8014986:	bf00      	nop

08014988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014988:	4808      	ldr	r0, [pc, #32]	@ (80149ac <prvPortStartFirstTask+0x24>)
 801498a:	6800      	ldr	r0, [r0, #0]
 801498c:	6800      	ldr	r0, [r0, #0]
 801498e:	f380 8808 	msr	MSP, r0
 8014992:	f04f 0000 	mov.w	r0, #0
 8014996:	f380 8814 	msr	CONTROL, r0
 801499a:	b662      	cpsie	i
 801499c:	b661      	cpsie	f
 801499e:	f3bf 8f4f 	dsb	sy
 80149a2:	f3bf 8f6f 	isb	sy
 80149a6:	df00      	svc	0
 80149a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80149aa:	bf00      	nop
 80149ac:	e000ed08 	.word	0xe000ed08

080149b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b084      	sub	sp, #16
 80149b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80149b6:	4b37      	ldr	r3, [pc, #220]	@ (8014a94 <xPortStartScheduler+0xe4>)
 80149b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	22ff      	movs	r2, #255	@ 0xff
 80149c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	781b      	ldrb	r3, [r3, #0]
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80149d0:	78fb      	ldrb	r3, [r7, #3]
 80149d2:	b2db      	uxtb	r3, r3
 80149d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80149d8:	b2da      	uxtb	r2, r3
 80149da:	4b2f      	ldr	r3, [pc, #188]	@ (8014a98 <xPortStartScheduler+0xe8>)
 80149dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80149de:	4b2f      	ldr	r3, [pc, #188]	@ (8014a9c <xPortStartScheduler+0xec>)
 80149e0:	2207      	movs	r2, #7
 80149e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80149e4:	e009      	b.n	80149fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80149e6:	4b2d      	ldr	r3, [pc, #180]	@ (8014a9c <xPortStartScheduler+0xec>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	3b01      	subs	r3, #1
 80149ec:	4a2b      	ldr	r2, [pc, #172]	@ (8014a9c <xPortStartScheduler+0xec>)
 80149ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80149f0:	78fb      	ldrb	r3, [r7, #3]
 80149f2:	b2db      	uxtb	r3, r3
 80149f4:	005b      	lsls	r3, r3, #1
 80149f6:	b2db      	uxtb	r3, r3
 80149f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80149fa:	78fb      	ldrb	r3, [r7, #3]
 80149fc:	b2db      	uxtb	r3, r3
 80149fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014a02:	2b80      	cmp	r3, #128	@ 0x80
 8014a04:	d0ef      	beq.n	80149e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014a06:	4b25      	ldr	r3, [pc, #148]	@ (8014a9c <xPortStartScheduler+0xec>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	f1c3 0307 	rsb	r3, r3, #7
 8014a0e:	2b04      	cmp	r3, #4
 8014a10:	d00d      	beq.n	8014a2e <xPortStartScheduler+0x7e>
	__asm volatile
 8014a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a16:	b672      	cpsid	i
 8014a18:	f383 8811 	msr	BASEPRI, r3
 8014a1c:	f3bf 8f6f 	isb	sy
 8014a20:	f3bf 8f4f 	dsb	sy
 8014a24:	b662      	cpsie	i
 8014a26:	60bb      	str	r3, [r7, #8]
}
 8014a28:	bf00      	nop
 8014a2a:	bf00      	nop
 8014a2c:	e7fd      	b.n	8014a2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8014a9c <xPortStartScheduler+0xec>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	021b      	lsls	r3, r3, #8
 8014a34:	4a19      	ldr	r2, [pc, #100]	@ (8014a9c <xPortStartScheduler+0xec>)
 8014a36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014a38:	4b18      	ldr	r3, [pc, #96]	@ (8014a9c <xPortStartScheduler+0xec>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014a40:	4a16      	ldr	r2, [pc, #88]	@ (8014a9c <xPortStartScheduler+0xec>)
 8014a42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	b2da      	uxtb	r2, r3
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014a4c:	4b14      	ldr	r3, [pc, #80]	@ (8014aa0 <xPortStartScheduler+0xf0>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	4a13      	ldr	r2, [pc, #76]	@ (8014aa0 <xPortStartScheduler+0xf0>)
 8014a52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014a56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014a58:	4b11      	ldr	r3, [pc, #68]	@ (8014aa0 <xPortStartScheduler+0xf0>)
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	4a10      	ldr	r2, [pc, #64]	@ (8014aa0 <xPortStartScheduler+0xf0>)
 8014a5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014a62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014a64:	f000 f8dc 	bl	8014c20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014a68:	4b0e      	ldr	r3, [pc, #56]	@ (8014aa4 <xPortStartScheduler+0xf4>)
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014a6e:	f000 f8fb 	bl	8014c68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014a72:	4b0d      	ldr	r3, [pc, #52]	@ (8014aa8 <xPortStartScheduler+0xf8>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	4a0c      	ldr	r2, [pc, #48]	@ (8014aa8 <xPortStartScheduler+0xf8>)
 8014a78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014a7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014a7e:	f7ff ff83 	bl	8014988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014a82:	f7ff fa3f 	bl	8013f04 <vTaskSwitchContext>
	prvTaskExitError();
 8014a86:	f7ff ff37 	bl	80148f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014a8a:	2300      	movs	r3, #0
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3710      	adds	r7, #16
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	e000e400 	.word	0xe000e400
 8014a98:	20005644 	.word	0x20005644
 8014a9c:	20005648 	.word	0x20005648
 8014aa0:	e000ed20 	.word	0xe000ed20
 8014aa4:	20000010 	.word	0x20000010
 8014aa8:	e000ef34 	.word	0xe000ef34

08014aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014aac:	b480      	push	{r7}
 8014aae:	b083      	sub	sp, #12
 8014ab0:	af00      	add	r7, sp, #0
	__asm volatile
 8014ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ab6:	b672      	cpsid	i
 8014ab8:	f383 8811 	msr	BASEPRI, r3
 8014abc:	f3bf 8f6f 	isb	sy
 8014ac0:	f3bf 8f4f 	dsb	sy
 8014ac4:	b662      	cpsie	i
 8014ac6:	607b      	str	r3, [r7, #4]
}
 8014ac8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014aca:	4b11      	ldr	r3, [pc, #68]	@ (8014b10 <vPortEnterCritical+0x64>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	3301      	adds	r3, #1
 8014ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8014b10 <vPortEnterCritical+0x64>)
 8014ad2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8014b10 <vPortEnterCritical+0x64>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	2b01      	cmp	r3, #1
 8014ada:	d112      	bne.n	8014b02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014adc:	4b0d      	ldr	r3, [pc, #52]	@ (8014b14 <vPortEnterCritical+0x68>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	b2db      	uxtb	r3, r3
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d00d      	beq.n	8014b02 <vPortEnterCritical+0x56>
	__asm volatile
 8014ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aea:	b672      	cpsid	i
 8014aec:	f383 8811 	msr	BASEPRI, r3
 8014af0:	f3bf 8f6f 	isb	sy
 8014af4:	f3bf 8f4f 	dsb	sy
 8014af8:	b662      	cpsie	i
 8014afa:	603b      	str	r3, [r7, #0]
}
 8014afc:	bf00      	nop
 8014afe:	bf00      	nop
 8014b00:	e7fd      	b.n	8014afe <vPortEnterCritical+0x52>
	}
}
 8014b02:	bf00      	nop
 8014b04:	370c      	adds	r7, #12
 8014b06:	46bd      	mov	sp, r7
 8014b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0c:	4770      	bx	lr
 8014b0e:	bf00      	nop
 8014b10:	20000010 	.word	0x20000010
 8014b14:	e000ed04 	.word	0xe000ed04

08014b18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014b18:	b480      	push	{r7}
 8014b1a:	b083      	sub	sp, #12
 8014b1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014b1e:	4b13      	ldr	r3, [pc, #76]	@ (8014b6c <vPortExitCritical+0x54>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d10d      	bne.n	8014b42 <vPortExitCritical+0x2a>
	__asm volatile
 8014b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b2a:	b672      	cpsid	i
 8014b2c:	f383 8811 	msr	BASEPRI, r3
 8014b30:	f3bf 8f6f 	isb	sy
 8014b34:	f3bf 8f4f 	dsb	sy
 8014b38:	b662      	cpsie	i
 8014b3a:	607b      	str	r3, [r7, #4]
}
 8014b3c:	bf00      	nop
 8014b3e:	bf00      	nop
 8014b40:	e7fd      	b.n	8014b3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8014b42:	4b0a      	ldr	r3, [pc, #40]	@ (8014b6c <vPortExitCritical+0x54>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	3b01      	subs	r3, #1
 8014b48:	4a08      	ldr	r2, [pc, #32]	@ (8014b6c <vPortExitCritical+0x54>)
 8014b4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014b4c:	4b07      	ldr	r3, [pc, #28]	@ (8014b6c <vPortExitCritical+0x54>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d105      	bne.n	8014b60 <vPortExitCritical+0x48>
 8014b54:	2300      	movs	r3, #0
 8014b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	f383 8811 	msr	BASEPRI, r3
}
 8014b5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014b60:	bf00      	nop
 8014b62:	370c      	adds	r7, #12
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr
 8014b6c:	20000010 	.word	0x20000010

08014b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014b70:	f3ef 8009 	mrs	r0, PSP
 8014b74:	f3bf 8f6f 	isb	sy
 8014b78:	4b15      	ldr	r3, [pc, #84]	@ (8014bd0 <pxCurrentTCBConst>)
 8014b7a:	681a      	ldr	r2, [r3, #0]
 8014b7c:	f01e 0f10 	tst.w	lr, #16
 8014b80:	bf08      	it	eq
 8014b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b8a:	6010      	str	r0, [r2, #0]
 8014b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014b90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014b94:	b672      	cpsid	i
 8014b96:	f380 8811 	msr	BASEPRI, r0
 8014b9a:	f3bf 8f4f 	dsb	sy
 8014b9e:	f3bf 8f6f 	isb	sy
 8014ba2:	b662      	cpsie	i
 8014ba4:	f7ff f9ae 	bl	8013f04 <vTaskSwitchContext>
 8014ba8:	f04f 0000 	mov.w	r0, #0
 8014bac:	f380 8811 	msr	BASEPRI, r0
 8014bb0:	bc09      	pop	{r0, r3}
 8014bb2:	6819      	ldr	r1, [r3, #0]
 8014bb4:	6808      	ldr	r0, [r1, #0]
 8014bb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bba:	f01e 0f10 	tst.w	lr, #16
 8014bbe:	bf08      	it	eq
 8014bc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014bc4:	f380 8809 	msr	PSP, r0
 8014bc8:	f3bf 8f6f 	isb	sy
 8014bcc:	4770      	bx	lr
 8014bce:	bf00      	nop

08014bd0 <pxCurrentTCBConst>:
 8014bd0:	20005518 	.word	0x20005518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014bd4:	bf00      	nop
 8014bd6:	bf00      	nop

08014bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b082      	sub	sp, #8
 8014bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8014bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014be2:	b672      	cpsid	i
 8014be4:	f383 8811 	msr	BASEPRI, r3
 8014be8:	f3bf 8f6f 	isb	sy
 8014bec:	f3bf 8f4f 	dsb	sy
 8014bf0:	b662      	cpsie	i
 8014bf2:	607b      	str	r3, [r7, #4]
}
 8014bf4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014bf6:	f7ff f8c9 	bl	8013d8c <xTaskIncrementTick>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d003      	beq.n	8014c08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014c00:	4b06      	ldr	r3, [pc, #24]	@ (8014c1c <SysTick_Handler+0x44>)
 8014c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014c06:	601a      	str	r2, [r3, #0]
 8014c08:	2300      	movs	r3, #0
 8014c0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014c0c:	683b      	ldr	r3, [r7, #0]
 8014c0e:	f383 8811 	msr	BASEPRI, r3
}
 8014c12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014c14:	bf00      	nop
 8014c16:	3708      	adds	r7, #8
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}
 8014c1c:	e000ed04 	.word	0xe000ed04

08014c20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014c20:	b480      	push	{r7}
 8014c22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014c24:	4b0b      	ldr	r3, [pc, #44]	@ (8014c54 <vPortSetupTimerInterrupt+0x34>)
 8014c26:	2200      	movs	r2, #0
 8014c28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8014c58 <vPortSetupTimerInterrupt+0x38>)
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014c30:	4b0a      	ldr	r3, [pc, #40]	@ (8014c5c <vPortSetupTimerInterrupt+0x3c>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	4a0a      	ldr	r2, [pc, #40]	@ (8014c60 <vPortSetupTimerInterrupt+0x40>)
 8014c36:	fba2 2303 	umull	r2, r3, r2, r3
 8014c3a:	099b      	lsrs	r3, r3, #6
 8014c3c:	4a09      	ldr	r2, [pc, #36]	@ (8014c64 <vPortSetupTimerInterrupt+0x44>)
 8014c3e:	3b01      	subs	r3, #1
 8014c40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014c42:	4b04      	ldr	r3, [pc, #16]	@ (8014c54 <vPortSetupTimerInterrupt+0x34>)
 8014c44:	2207      	movs	r2, #7
 8014c46:	601a      	str	r2, [r3, #0]
}
 8014c48:	bf00      	nop
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c50:	4770      	bx	lr
 8014c52:	bf00      	nop
 8014c54:	e000e010 	.word	0xe000e010
 8014c58:	e000e018 	.word	0xe000e018
 8014c5c:	20000004 	.word	0x20000004
 8014c60:	10624dd3 	.word	0x10624dd3
 8014c64:	e000e014 	.word	0xe000e014

08014c68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014c68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014c78 <vPortEnableVFP+0x10>
 8014c6c:	6801      	ldr	r1, [r0, #0]
 8014c6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014c72:	6001      	str	r1, [r0, #0]
 8014c74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014c76:	bf00      	nop
 8014c78:	e000ed88 	.word	0xe000ed88

08014c7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b085      	sub	sp, #20
 8014c80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014c82:	f3ef 8305 	mrs	r3, IPSR
 8014c86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	2b0f      	cmp	r3, #15
 8014c8c:	d917      	bls.n	8014cbe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8014cf8 <vPortValidateInterruptPriority+0x7c>)
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	4413      	add	r3, r2
 8014c94:	781b      	ldrb	r3, [r3, #0]
 8014c96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014c98:	4b18      	ldr	r3, [pc, #96]	@ (8014cfc <vPortValidateInterruptPriority+0x80>)
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	7afa      	ldrb	r2, [r7, #11]
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	d20d      	bcs.n	8014cbe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8014ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ca6:	b672      	cpsid	i
 8014ca8:	f383 8811 	msr	BASEPRI, r3
 8014cac:	f3bf 8f6f 	isb	sy
 8014cb0:	f3bf 8f4f 	dsb	sy
 8014cb4:	b662      	cpsie	i
 8014cb6:	607b      	str	r3, [r7, #4]
}
 8014cb8:	bf00      	nop
 8014cba:	bf00      	nop
 8014cbc:	e7fd      	b.n	8014cba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014cbe:	4b10      	ldr	r3, [pc, #64]	@ (8014d00 <vPortValidateInterruptPriority+0x84>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8014d04 <vPortValidateInterruptPriority+0x88>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d90d      	bls.n	8014cea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8014cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cd2:	b672      	cpsid	i
 8014cd4:	f383 8811 	msr	BASEPRI, r3
 8014cd8:	f3bf 8f6f 	isb	sy
 8014cdc:	f3bf 8f4f 	dsb	sy
 8014ce0:	b662      	cpsie	i
 8014ce2:	603b      	str	r3, [r7, #0]
}
 8014ce4:	bf00      	nop
 8014ce6:	bf00      	nop
 8014ce8:	e7fd      	b.n	8014ce6 <vPortValidateInterruptPriority+0x6a>
	}
 8014cea:	bf00      	nop
 8014cec:	3714      	adds	r7, #20
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf4:	4770      	bx	lr
 8014cf6:	bf00      	nop
 8014cf8:	e000e3f0 	.word	0xe000e3f0
 8014cfc:	20005644 	.word	0x20005644
 8014d00:	e000ed0c 	.word	0xe000ed0c
 8014d04:	20005648 	.word	0x20005648

08014d08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b08a      	sub	sp, #40	@ 0x28
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014d10:	2300      	movs	r3, #0
 8014d12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014d14:	f7fe ff6a 	bl	8013bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014d18:	4b5f      	ldr	r3, [pc, #380]	@ (8014e98 <pvPortMalloc+0x190>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d101      	bne.n	8014d24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014d20:	f000 f924 	bl	8014f6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014d24:	4b5d      	ldr	r3, [pc, #372]	@ (8014e9c <pvPortMalloc+0x194>)
 8014d26:	681a      	ldr	r2, [r3, #0]
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	4013      	ands	r3, r2
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	f040 8094 	bne.w	8014e5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d020      	beq.n	8014d7a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8014d38:	2208      	movs	r2, #8
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	4413      	add	r3, r2
 8014d3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	f003 0307 	and.w	r3, r3, #7
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d017      	beq.n	8014d7a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f023 0307 	bic.w	r3, r3, #7
 8014d50:	3308      	adds	r3, #8
 8014d52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f003 0307 	and.w	r3, r3, #7
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d00d      	beq.n	8014d7a <pvPortMalloc+0x72>
	__asm volatile
 8014d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d62:	b672      	cpsid	i
 8014d64:	f383 8811 	msr	BASEPRI, r3
 8014d68:	f3bf 8f6f 	isb	sy
 8014d6c:	f3bf 8f4f 	dsb	sy
 8014d70:	b662      	cpsie	i
 8014d72:	617b      	str	r3, [r7, #20]
}
 8014d74:	bf00      	nop
 8014d76:	bf00      	nop
 8014d78:	e7fd      	b.n	8014d76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d06c      	beq.n	8014e5a <pvPortMalloc+0x152>
 8014d80:	4b47      	ldr	r3, [pc, #284]	@ (8014ea0 <pvPortMalloc+0x198>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	687a      	ldr	r2, [r7, #4]
 8014d86:	429a      	cmp	r2, r3
 8014d88:	d867      	bhi.n	8014e5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014d8a:	4b46      	ldr	r3, [pc, #280]	@ (8014ea4 <pvPortMalloc+0x19c>)
 8014d8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014d8e:	4b45      	ldr	r3, [pc, #276]	@ (8014ea4 <pvPortMalloc+0x19c>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014d94:	e004      	b.n	8014da0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8014d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	687a      	ldr	r2, [r7, #4]
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d903      	bls.n	8014db2 <pvPortMalloc+0xaa>
 8014daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d1f1      	bne.n	8014d96 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014db2:	4b39      	ldr	r3, [pc, #228]	@ (8014e98 <pvPortMalloc+0x190>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014db8:	429a      	cmp	r2, r3
 8014dba:	d04e      	beq.n	8014e5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014dbc:	6a3b      	ldr	r3, [r7, #32]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	2208      	movs	r2, #8
 8014dc2:	4413      	add	r3, r2
 8014dc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dc8:	681a      	ldr	r2, [r3, #0]
 8014dca:	6a3b      	ldr	r3, [r7, #32]
 8014dcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dd0:	685a      	ldr	r2, [r3, #4]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	1ad2      	subs	r2, r2, r3
 8014dd6:	2308      	movs	r3, #8
 8014dd8:	005b      	lsls	r3, r3, #1
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d922      	bls.n	8014e24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	4413      	add	r3, r2
 8014de4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014de6:	69bb      	ldr	r3, [r7, #24]
 8014de8:	f003 0307 	and.w	r3, r3, #7
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d00d      	beq.n	8014e0c <pvPortMalloc+0x104>
	__asm volatile
 8014df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014df4:	b672      	cpsid	i
 8014df6:	f383 8811 	msr	BASEPRI, r3
 8014dfa:	f3bf 8f6f 	isb	sy
 8014dfe:	f3bf 8f4f 	dsb	sy
 8014e02:	b662      	cpsie	i
 8014e04:	613b      	str	r3, [r7, #16]
}
 8014e06:	bf00      	nop
 8014e08:	bf00      	nop
 8014e0a:	e7fd      	b.n	8014e08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e0e:	685a      	ldr	r2, [r3, #4]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	1ad2      	subs	r2, r2, r3
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e1a:	687a      	ldr	r2, [r7, #4]
 8014e1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014e1e:	69b8      	ldr	r0, [r7, #24]
 8014e20:	f000 f906 	bl	8015030 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014e24:	4b1e      	ldr	r3, [pc, #120]	@ (8014ea0 <pvPortMalloc+0x198>)
 8014e26:	681a      	ldr	r2, [r3, #0]
 8014e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e2a:	685b      	ldr	r3, [r3, #4]
 8014e2c:	1ad3      	subs	r3, r2, r3
 8014e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8014ea0 <pvPortMalloc+0x198>)
 8014e30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014e32:	4b1b      	ldr	r3, [pc, #108]	@ (8014ea0 <pvPortMalloc+0x198>)
 8014e34:	681a      	ldr	r2, [r3, #0]
 8014e36:	4b1c      	ldr	r3, [pc, #112]	@ (8014ea8 <pvPortMalloc+0x1a0>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d203      	bcs.n	8014e46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014e3e:	4b18      	ldr	r3, [pc, #96]	@ (8014ea0 <pvPortMalloc+0x198>)
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	4a19      	ldr	r2, [pc, #100]	@ (8014ea8 <pvPortMalloc+0x1a0>)
 8014e44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e48:	685a      	ldr	r2, [r3, #4]
 8014e4a:	4b14      	ldr	r3, [pc, #80]	@ (8014e9c <pvPortMalloc+0x194>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	431a      	orrs	r2, r3
 8014e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e56:	2200      	movs	r2, #0
 8014e58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014e5a:	f7fe fed5 	bl	8013c08 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8014e5e:	69fb      	ldr	r3, [r7, #28]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d101      	bne.n	8014e68 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8014e64:	f7ec f842 	bl	8000eec <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e68:	69fb      	ldr	r3, [r7, #28]
 8014e6a:	f003 0307 	and.w	r3, r3, #7
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d00d      	beq.n	8014e8e <pvPortMalloc+0x186>
	__asm volatile
 8014e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e76:	b672      	cpsid	i
 8014e78:	f383 8811 	msr	BASEPRI, r3
 8014e7c:	f3bf 8f6f 	isb	sy
 8014e80:	f3bf 8f4f 	dsb	sy
 8014e84:	b662      	cpsie	i
 8014e86:	60fb      	str	r3, [r7, #12]
}
 8014e88:	bf00      	nop
 8014e8a:	bf00      	nop
 8014e8c:	e7fd      	b.n	8014e8a <pvPortMalloc+0x182>
	return pvReturn;
 8014e8e:	69fb      	ldr	r3, [r7, #28]
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	3728      	adds	r7, #40	@ 0x28
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}
 8014e98:	2000d654 	.word	0x2000d654
 8014e9c:	2000d660 	.word	0x2000d660
 8014ea0:	2000d658 	.word	0x2000d658
 8014ea4:	2000d64c 	.word	0x2000d64c
 8014ea8:	2000d65c 	.word	0x2000d65c

08014eac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b086      	sub	sp, #24
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d04e      	beq.n	8014f5c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014ebe:	2308      	movs	r3, #8
 8014ec0:	425b      	negs	r3, r3
 8014ec2:	697a      	ldr	r2, [r7, #20]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	685a      	ldr	r2, [r3, #4]
 8014ed0:	4b24      	ldr	r3, [pc, #144]	@ (8014f64 <vPortFree+0xb8>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	4013      	ands	r3, r2
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d10d      	bne.n	8014ef6 <vPortFree+0x4a>
	__asm volatile
 8014eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ede:	b672      	cpsid	i
 8014ee0:	f383 8811 	msr	BASEPRI, r3
 8014ee4:	f3bf 8f6f 	isb	sy
 8014ee8:	f3bf 8f4f 	dsb	sy
 8014eec:	b662      	cpsie	i
 8014eee:	60fb      	str	r3, [r7, #12]
}
 8014ef0:	bf00      	nop
 8014ef2:	bf00      	nop
 8014ef4:	e7fd      	b.n	8014ef2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d00d      	beq.n	8014f1a <vPortFree+0x6e>
	__asm volatile
 8014efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f02:	b672      	cpsid	i
 8014f04:	f383 8811 	msr	BASEPRI, r3
 8014f08:	f3bf 8f6f 	isb	sy
 8014f0c:	f3bf 8f4f 	dsb	sy
 8014f10:	b662      	cpsie	i
 8014f12:	60bb      	str	r3, [r7, #8]
}
 8014f14:	bf00      	nop
 8014f16:	bf00      	nop
 8014f18:	e7fd      	b.n	8014f16 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014f1a:	693b      	ldr	r3, [r7, #16]
 8014f1c:	685a      	ldr	r2, [r3, #4]
 8014f1e:	4b11      	ldr	r3, [pc, #68]	@ (8014f64 <vPortFree+0xb8>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	4013      	ands	r3, r2
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d019      	beq.n	8014f5c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d115      	bne.n	8014f5c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	685a      	ldr	r2, [r3, #4]
 8014f34:	4b0b      	ldr	r3, [pc, #44]	@ (8014f64 <vPortFree+0xb8>)
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	43db      	mvns	r3, r3
 8014f3a:	401a      	ands	r2, r3
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014f40:	f7fe fe54 	bl	8013bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	685a      	ldr	r2, [r3, #4]
 8014f48:	4b07      	ldr	r3, [pc, #28]	@ (8014f68 <vPortFree+0xbc>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	4413      	add	r3, r2
 8014f4e:	4a06      	ldr	r2, [pc, #24]	@ (8014f68 <vPortFree+0xbc>)
 8014f50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014f52:	6938      	ldr	r0, [r7, #16]
 8014f54:	f000 f86c 	bl	8015030 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014f58:	f7fe fe56 	bl	8013c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014f5c:	bf00      	nop
 8014f5e:	3718      	adds	r7, #24
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	2000d660 	.word	0x2000d660
 8014f68:	2000d658 	.word	0x2000d658

08014f6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014f6c:	b480      	push	{r7}
 8014f6e:	b085      	sub	sp, #20
 8014f70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014f76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014f78:	4b27      	ldr	r3, [pc, #156]	@ (8015018 <prvHeapInit+0xac>)
 8014f7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	f003 0307 	and.w	r3, r3, #7
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d00c      	beq.n	8014fa0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	3307      	adds	r3, #7
 8014f8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f023 0307 	bic.w	r3, r3, #7
 8014f92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014f94:	68ba      	ldr	r2, [r7, #8]
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	1ad3      	subs	r3, r2, r3
 8014f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8015018 <prvHeapInit+0xac>)
 8014f9c:	4413      	add	r3, r2
 8014f9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014fa4:	4a1d      	ldr	r2, [pc, #116]	@ (801501c <prvHeapInit+0xb0>)
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014faa:	4b1c      	ldr	r3, [pc, #112]	@ (801501c <prvHeapInit+0xb0>)
 8014fac:	2200      	movs	r2, #0
 8014fae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	68ba      	ldr	r2, [r7, #8]
 8014fb4:	4413      	add	r3, r2
 8014fb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014fb8:	2208      	movs	r2, #8
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	1a9b      	subs	r3, r3, r2
 8014fbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	f023 0307 	bic.w	r3, r3, #7
 8014fc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	4a15      	ldr	r2, [pc, #84]	@ (8015020 <prvHeapInit+0xb4>)
 8014fcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014fce:	4b14      	ldr	r3, [pc, #80]	@ (8015020 <prvHeapInit+0xb4>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014fd6:	4b12      	ldr	r3, [pc, #72]	@ (8015020 <prvHeapInit+0xb4>)
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	2200      	movs	r2, #0
 8014fdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	68fa      	ldr	r2, [r7, #12]
 8014fe6:	1ad2      	subs	r2, r2, r3
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014fec:	4b0c      	ldr	r3, [pc, #48]	@ (8015020 <prvHeapInit+0xb4>)
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	685b      	ldr	r3, [r3, #4]
 8014ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8015024 <prvHeapInit+0xb8>)
 8014ffa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	685b      	ldr	r3, [r3, #4]
 8015000:	4a09      	ldr	r2, [pc, #36]	@ (8015028 <prvHeapInit+0xbc>)
 8015002:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015004:	4b09      	ldr	r3, [pc, #36]	@ (801502c <prvHeapInit+0xc0>)
 8015006:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801500a:	601a      	str	r2, [r3, #0]
}
 801500c:	bf00      	nop
 801500e:	3714      	adds	r7, #20
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr
 8015018:	2000564c 	.word	0x2000564c
 801501c:	2000d64c 	.word	0x2000d64c
 8015020:	2000d654 	.word	0x2000d654
 8015024:	2000d65c 	.word	0x2000d65c
 8015028:	2000d658 	.word	0x2000d658
 801502c:	2000d660 	.word	0x2000d660

08015030 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015030:	b480      	push	{r7}
 8015032:	b085      	sub	sp, #20
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015038:	4b28      	ldr	r3, [pc, #160]	@ (80150dc <prvInsertBlockIntoFreeList+0xac>)
 801503a:	60fb      	str	r3, [r7, #12]
 801503c:	e002      	b.n	8015044 <prvInsertBlockIntoFreeList+0x14>
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	60fb      	str	r3, [r7, #12]
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	687a      	ldr	r2, [r7, #4]
 801504a:	429a      	cmp	r2, r3
 801504c:	d8f7      	bhi.n	801503e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	685b      	ldr	r3, [r3, #4]
 8015056:	68ba      	ldr	r2, [r7, #8]
 8015058:	4413      	add	r3, r2
 801505a:	687a      	ldr	r2, [r7, #4]
 801505c:	429a      	cmp	r2, r3
 801505e:	d108      	bne.n	8015072 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	685a      	ldr	r2, [r3, #4]
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	441a      	add	r2, r3
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	685b      	ldr	r3, [r3, #4]
 801507a:	68ba      	ldr	r2, [r7, #8]
 801507c:	441a      	add	r2, r3
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	429a      	cmp	r2, r3
 8015084:	d118      	bne.n	80150b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	681a      	ldr	r2, [r3, #0]
 801508a:	4b15      	ldr	r3, [pc, #84]	@ (80150e0 <prvInsertBlockIntoFreeList+0xb0>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	429a      	cmp	r2, r3
 8015090:	d00d      	beq.n	80150ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	685a      	ldr	r2, [r3, #4]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	685b      	ldr	r3, [r3, #4]
 801509c:	441a      	add	r2, r3
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	681a      	ldr	r2, [r3, #0]
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	601a      	str	r2, [r3, #0]
 80150ac:	e008      	b.n	80150c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80150ae:	4b0c      	ldr	r3, [pc, #48]	@ (80150e0 <prvInsertBlockIntoFreeList+0xb0>)
 80150b0:	681a      	ldr	r2, [r3, #0]
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	601a      	str	r2, [r3, #0]
 80150b6:	e003      	b.n	80150c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80150c0:	68fa      	ldr	r2, [r7, #12]
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d002      	beq.n	80150ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	687a      	ldr	r2, [r7, #4]
 80150cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80150ce:	bf00      	nop
 80150d0:	3714      	adds	r7, #20
 80150d2:	46bd      	mov	sp, r7
 80150d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d8:	4770      	bx	lr
 80150da:	bf00      	nop
 80150dc:	2000d64c 	.word	0x2000d64c
 80150e0:	2000d654 	.word	0x2000d654

080150e4 <std>:
 80150e4:	2300      	movs	r3, #0
 80150e6:	b510      	push	{r4, lr}
 80150e8:	4604      	mov	r4, r0
 80150ea:	e9c0 3300 	strd	r3, r3, [r0]
 80150ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150f2:	6083      	str	r3, [r0, #8]
 80150f4:	8181      	strh	r1, [r0, #12]
 80150f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80150f8:	81c2      	strh	r2, [r0, #14]
 80150fa:	6183      	str	r3, [r0, #24]
 80150fc:	4619      	mov	r1, r3
 80150fe:	2208      	movs	r2, #8
 8015100:	305c      	adds	r0, #92	@ 0x5c
 8015102:	f000 f9f9 	bl	80154f8 <memset>
 8015106:	4b0d      	ldr	r3, [pc, #52]	@ (801513c <std+0x58>)
 8015108:	6263      	str	r3, [r4, #36]	@ 0x24
 801510a:	4b0d      	ldr	r3, [pc, #52]	@ (8015140 <std+0x5c>)
 801510c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801510e:	4b0d      	ldr	r3, [pc, #52]	@ (8015144 <std+0x60>)
 8015110:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015112:	4b0d      	ldr	r3, [pc, #52]	@ (8015148 <std+0x64>)
 8015114:	6323      	str	r3, [r4, #48]	@ 0x30
 8015116:	4b0d      	ldr	r3, [pc, #52]	@ (801514c <std+0x68>)
 8015118:	6224      	str	r4, [r4, #32]
 801511a:	429c      	cmp	r4, r3
 801511c:	d006      	beq.n	801512c <std+0x48>
 801511e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015122:	4294      	cmp	r4, r2
 8015124:	d002      	beq.n	801512c <std+0x48>
 8015126:	33d0      	adds	r3, #208	@ 0xd0
 8015128:	429c      	cmp	r4, r3
 801512a:	d105      	bne.n	8015138 <std+0x54>
 801512c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015134:	f000 bab6 	b.w	80156a4 <__retarget_lock_init_recursive>
 8015138:	bd10      	pop	{r4, pc}
 801513a:	bf00      	nop
 801513c:	08015349 	.word	0x08015349
 8015140:	0801536b 	.word	0x0801536b
 8015144:	080153a3 	.word	0x080153a3
 8015148:	080153c7 	.word	0x080153c7
 801514c:	2000d664 	.word	0x2000d664

08015150 <stdio_exit_handler>:
 8015150:	4a02      	ldr	r2, [pc, #8]	@ (801515c <stdio_exit_handler+0xc>)
 8015152:	4903      	ldr	r1, [pc, #12]	@ (8015160 <stdio_exit_handler+0x10>)
 8015154:	4803      	ldr	r0, [pc, #12]	@ (8015164 <stdio_exit_handler+0x14>)
 8015156:	f000 b869 	b.w	801522c <_fwalk_sglue>
 801515a:	bf00      	nop
 801515c:	20000014 	.word	0x20000014
 8015160:	08015f5d 	.word	0x08015f5d
 8015164:	20000024 	.word	0x20000024

08015168 <cleanup_stdio>:
 8015168:	6841      	ldr	r1, [r0, #4]
 801516a:	4b0c      	ldr	r3, [pc, #48]	@ (801519c <cleanup_stdio+0x34>)
 801516c:	4299      	cmp	r1, r3
 801516e:	b510      	push	{r4, lr}
 8015170:	4604      	mov	r4, r0
 8015172:	d001      	beq.n	8015178 <cleanup_stdio+0x10>
 8015174:	f000 fef2 	bl	8015f5c <_fflush_r>
 8015178:	68a1      	ldr	r1, [r4, #8]
 801517a:	4b09      	ldr	r3, [pc, #36]	@ (80151a0 <cleanup_stdio+0x38>)
 801517c:	4299      	cmp	r1, r3
 801517e:	d002      	beq.n	8015186 <cleanup_stdio+0x1e>
 8015180:	4620      	mov	r0, r4
 8015182:	f000 feeb 	bl	8015f5c <_fflush_r>
 8015186:	68e1      	ldr	r1, [r4, #12]
 8015188:	4b06      	ldr	r3, [pc, #24]	@ (80151a4 <cleanup_stdio+0x3c>)
 801518a:	4299      	cmp	r1, r3
 801518c:	d004      	beq.n	8015198 <cleanup_stdio+0x30>
 801518e:	4620      	mov	r0, r4
 8015190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015194:	f000 bee2 	b.w	8015f5c <_fflush_r>
 8015198:	bd10      	pop	{r4, pc}
 801519a:	bf00      	nop
 801519c:	2000d664 	.word	0x2000d664
 80151a0:	2000d6cc 	.word	0x2000d6cc
 80151a4:	2000d734 	.word	0x2000d734

080151a8 <global_stdio_init.part.0>:
 80151a8:	b510      	push	{r4, lr}
 80151aa:	4b0b      	ldr	r3, [pc, #44]	@ (80151d8 <global_stdio_init.part.0+0x30>)
 80151ac:	4c0b      	ldr	r4, [pc, #44]	@ (80151dc <global_stdio_init.part.0+0x34>)
 80151ae:	4a0c      	ldr	r2, [pc, #48]	@ (80151e0 <global_stdio_init.part.0+0x38>)
 80151b0:	601a      	str	r2, [r3, #0]
 80151b2:	4620      	mov	r0, r4
 80151b4:	2200      	movs	r2, #0
 80151b6:	2104      	movs	r1, #4
 80151b8:	f7ff ff94 	bl	80150e4 <std>
 80151bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80151c0:	2201      	movs	r2, #1
 80151c2:	2109      	movs	r1, #9
 80151c4:	f7ff ff8e 	bl	80150e4 <std>
 80151c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80151cc:	2202      	movs	r2, #2
 80151ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151d2:	2112      	movs	r1, #18
 80151d4:	f7ff bf86 	b.w	80150e4 <std>
 80151d8:	2000d79c 	.word	0x2000d79c
 80151dc:	2000d664 	.word	0x2000d664
 80151e0:	08015151 	.word	0x08015151

080151e4 <__sfp_lock_acquire>:
 80151e4:	4801      	ldr	r0, [pc, #4]	@ (80151ec <__sfp_lock_acquire+0x8>)
 80151e6:	f000 ba5e 	b.w	80156a6 <__retarget_lock_acquire_recursive>
 80151ea:	bf00      	nop
 80151ec:	2000d7a5 	.word	0x2000d7a5

080151f0 <__sfp_lock_release>:
 80151f0:	4801      	ldr	r0, [pc, #4]	@ (80151f8 <__sfp_lock_release+0x8>)
 80151f2:	f000 ba59 	b.w	80156a8 <__retarget_lock_release_recursive>
 80151f6:	bf00      	nop
 80151f8:	2000d7a5 	.word	0x2000d7a5

080151fc <__sinit>:
 80151fc:	b510      	push	{r4, lr}
 80151fe:	4604      	mov	r4, r0
 8015200:	f7ff fff0 	bl	80151e4 <__sfp_lock_acquire>
 8015204:	6a23      	ldr	r3, [r4, #32]
 8015206:	b11b      	cbz	r3, 8015210 <__sinit+0x14>
 8015208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801520c:	f7ff bff0 	b.w	80151f0 <__sfp_lock_release>
 8015210:	4b04      	ldr	r3, [pc, #16]	@ (8015224 <__sinit+0x28>)
 8015212:	6223      	str	r3, [r4, #32]
 8015214:	4b04      	ldr	r3, [pc, #16]	@ (8015228 <__sinit+0x2c>)
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d1f5      	bne.n	8015208 <__sinit+0xc>
 801521c:	f7ff ffc4 	bl	80151a8 <global_stdio_init.part.0>
 8015220:	e7f2      	b.n	8015208 <__sinit+0xc>
 8015222:	bf00      	nop
 8015224:	08015169 	.word	0x08015169
 8015228:	2000d79c 	.word	0x2000d79c

0801522c <_fwalk_sglue>:
 801522c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015230:	4607      	mov	r7, r0
 8015232:	4688      	mov	r8, r1
 8015234:	4614      	mov	r4, r2
 8015236:	2600      	movs	r6, #0
 8015238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801523c:	f1b9 0901 	subs.w	r9, r9, #1
 8015240:	d505      	bpl.n	801524e <_fwalk_sglue+0x22>
 8015242:	6824      	ldr	r4, [r4, #0]
 8015244:	2c00      	cmp	r4, #0
 8015246:	d1f7      	bne.n	8015238 <_fwalk_sglue+0xc>
 8015248:	4630      	mov	r0, r6
 801524a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801524e:	89ab      	ldrh	r3, [r5, #12]
 8015250:	2b01      	cmp	r3, #1
 8015252:	d907      	bls.n	8015264 <_fwalk_sglue+0x38>
 8015254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015258:	3301      	adds	r3, #1
 801525a:	d003      	beq.n	8015264 <_fwalk_sglue+0x38>
 801525c:	4629      	mov	r1, r5
 801525e:	4638      	mov	r0, r7
 8015260:	47c0      	blx	r8
 8015262:	4306      	orrs	r6, r0
 8015264:	3568      	adds	r5, #104	@ 0x68
 8015266:	e7e9      	b.n	801523c <_fwalk_sglue+0x10>

08015268 <iprintf>:
 8015268:	b40f      	push	{r0, r1, r2, r3}
 801526a:	b507      	push	{r0, r1, r2, lr}
 801526c:	4906      	ldr	r1, [pc, #24]	@ (8015288 <iprintf+0x20>)
 801526e:	ab04      	add	r3, sp, #16
 8015270:	6808      	ldr	r0, [r1, #0]
 8015272:	f853 2b04 	ldr.w	r2, [r3], #4
 8015276:	6881      	ldr	r1, [r0, #8]
 8015278:	9301      	str	r3, [sp, #4]
 801527a:	f000 fb47 	bl	801590c <_vfiprintf_r>
 801527e:	b003      	add	sp, #12
 8015280:	f85d eb04 	ldr.w	lr, [sp], #4
 8015284:	b004      	add	sp, #16
 8015286:	4770      	bx	lr
 8015288:	20000020 	.word	0x20000020

0801528c <_puts_r>:
 801528c:	6a03      	ldr	r3, [r0, #32]
 801528e:	b570      	push	{r4, r5, r6, lr}
 8015290:	6884      	ldr	r4, [r0, #8]
 8015292:	4605      	mov	r5, r0
 8015294:	460e      	mov	r6, r1
 8015296:	b90b      	cbnz	r3, 801529c <_puts_r+0x10>
 8015298:	f7ff ffb0 	bl	80151fc <__sinit>
 801529c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801529e:	07db      	lsls	r3, r3, #31
 80152a0:	d405      	bmi.n	80152ae <_puts_r+0x22>
 80152a2:	89a3      	ldrh	r3, [r4, #12]
 80152a4:	0598      	lsls	r0, r3, #22
 80152a6:	d402      	bmi.n	80152ae <_puts_r+0x22>
 80152a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80152aa:	f000 f9fc 	bl	80156a6 <__retarget_lock_acquire_recursive>
 80152ae:	89a3      	ldrh	r3, [r4, #12]
 80152b0:	0719      	lsls	r1, r3, #28
 80152b2:	d502      	bpl.n	80152ba <_puts_r+0x2e>
 80152b4:	6923      	ldr	r3, [r4, #16]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d135      	bne.n	8015326 <_puts_r+0x9a>
 80152ba:	4621      	mov	r1, r4
 80152bc:	4628      	mov	r0, r5
 80152be:	f000 f8c5 	bl	801544c <__swsetup_r>
 80152c2:	b380      	cbz	r0, 8015326 <_puts_r+0x9a>
 80152c4:	f04f 35ff 	mov.w	r5, #4294967295
 80152c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80152ca:	07da      	lsls	r2, r3, #31
 80152cc:	d405      	bmi.n	80152da <_puts_r+0x4e>
 80152ce:	89a3      	ldrh	r3, [r4, #12]
 80152d0:	059b      	lsls	r3, r3, #22
 80152d2:	d402      	bmi.n	80152da <_puts_r+0x4e>
 80152d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80152d6:	f000 f9e7 	bl	80156a8 <__retarget_lock_release_recursive>
 80152da:	4628      	mov	r0, r5
 80152dc:	bd70      	pop	{r4, r5, r6, pc}
 80152de:	2b00      	cmp	r3, #0
 80152e0:	da04      	bge.n	80152ec <_puts_r+0x60>
 80152e2:	69a2      	ldr	r2, [r4, #24]
 80152e4:	429a      	cmp	r2, r3
 80152e6:	dc17      	bgt.n	8015318 <_puts_r+0x8c>
 80152e8:	290a      	cmp	r1, #10
 80152ea:	d015      	beq.n	8015318 <_puts_r+0x8c>
 80152ec:	6823      	ldr	r3, [r4, #0]
 80152ee:	1c5a      	adds	r2, r3, #1
 80152f0:	6022      	str	r2, [r4, #0]
 80152f2:	7019      	strb	r1, [r3, #0]
 80152f4:	68a3      	ldr	r3, [r4, #8]
 80152f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80152fa:	3b01      	subs	r3, #1
 80152fc:	60a3      	str	r3, [r4, #8]
 80152fe:	2900      	cmp	r1, #0
 8015300:	d1ed      	bne.n	80152de <_puts_r+0x52>
 8015302:	2b00      	cmp	r3, #0
 8015304:	da11      	bge.n	801532a <_puts_r+0x9e>
 8015306:	4622      	mov	r2, r4
 8015308:	210a      	movs	r1, #10
 801530a:	4628      	mov	r0, r5
 801530c:	f000 f85f 	bl	80153ce <__swbuf_r>
 8015310:	3001      	adds	r0, #1
 8015312:	d0d7      	beq.n	80152c4 <_puts_r+0x38>
 8015314:	250a      	movs	r5, #10
 8015316:	e7d7      	b.n	80152c8 <_puts_r+0x3c>
 8015318:	4622      	mov	r2, r4
 801531a:	4628      	mov	r0, r5
 801531c:	f000 f857 	bl	80153ce <__swbuf_r>
 8015320:	3001      	adds	r0, #1
 8015322:	d1e7      	bne.n	80152f4 <_puts_r+0x68>
 8015324:	e7ce      	b.n	80152c4 <_puts_r+0x38>
 8015326:	3e01      	subs	r6, #1
 8015328:	e7e4      	b.n	80152f4 <_puts_r+0x68>
 801532a:	6823      	ldr	r3, [r4, #0]
 801532c:	1c5a      	adds	r2, r3, #1
 801532e:	6022      	str	r2, [r4, #0]
 8015330:	220a      	movs	r2, #10
 8015332:	701a      	strb	r2, [r3, #0]
 8015334:	e7ee      	b.n	8015314 <_puts_r+0x88>
	...

08015338 <puts>:
 8015338:	4b02      	ldr	r3, [pc, #8]	@ (8015344 <puts+0xc>)
 801533a:	4601      	mov	r1, r0
 801533c:	6818      	ldr	r0, [r3, #0]
 801533e:	f7ff bfa5 	b.w	801528c <_puts_r>
 8015342:	bf00      	nop
 8015344:	20000020 	.word	0x20000020

08015348 <__sread>:
 8015348:	b510      	push	{r4, lr}
 801534a:	460c      	mov	r4, r1
 801534c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015350:	f000 f95a 	bl	8015608 <_read_r>
 8015354:	2800      	cmp	r0, #0
 8015356:	bfab      	itete	ge
 8015358:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801535a:	89a3      	ldrhlt	r3, [r4, #12]
 801535c:	181b      	addge	r3, r3, r0
 801535e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015362:	bfac      	ite	ge
 8015364:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015366:	81a3      	strhlt	r3, [r4, #12]
 8015368:	bd10      	pop	{r4, pc}

0801536a <__swrite>:
 801536a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801536e:	461f      	mov	r7, r3
 8015370:	898b      	ldrh	r3, [r1, #12]
 8015372:	05db      	lsls	r3, r3, #23
 8015374:	4605      	mov	r5, r0
 8015376:	460c      	mov	r4, r1
 8015378:	4616      	mov	r6, r2
 801537a:	d505      	bpl.n	8015388 <__swrite+0x1e>
 801537c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015380:	2302      	movs	r3, #2
 8015382:	2200      	movs	r2, #0
 8015384:	f000 f92e 	bl	80155e4 <_lseek_r>
 8015388:	89a3      	ldrh	r3, [r4, #12]
 801538a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801538e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015392:	81a3      	strh	r3, [r4, #12]
 8015394:	4632      	mov	r2, r6
 8015396:	463b      	mov	r3, r7
 8015398:	4628      	mov	r0, r5
 801539a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801539e:	f000 b945 	b.w	801562c <_write_r>

080153a2 <__sseek>:
 80153a2:	b510      	push	{r4, lr}
 80153a4:	460c      	mov	r4, r1
 80153a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153aa:	f000 f91b 	bl	80155e4 <_lseek_r>
 80153ae:	1c43      	adds	r3, r0, #1
 80153b0:	89a3      	ldrh	r3, [r4, #12]
 80153b2:	bf15      	itete	ne
 80153b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80153b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80153ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80153be:	81a3      	strheq	r3, [r4, #12]
 80153c0:	bf18      	it	ne
 80153c2:	81a3      	strhne	r3, [r4, #12]
 80153c4:	bd10      	pop	{r4, pc}

080153c6 <__sclose>:
 80153c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153ca:	f000 b89d 	b.w	8015508 <_close_r>

080153ce <__swbuf_r>:
 80153ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153d0:	460e      	mov	r6, r1
 80153d2:	4614      	mov	r4, r2
 80153d4:	4605      	mov	r5, r0
 80153d6:	b118      	cbz	r0, 80153e0 <__swbuf_r+0x12>
 80153d8:	6a03      	ldr	r3, [r0, #32]
 80153da:	b90b      	cbnz	r3, 80153e0 <__swbuf_r+0x12>
 80153dc:	f7ff ff0e 	bl	80151fc <__sinit>
 80153e0:	69a3      	ldr	r3, [r4, #24]
 80153e2:	60a3      	str	r3, [r4, #8]
 80153e4:	89a3      	ldrh	r3, [r4, #12]
 80153e6:	071a      	lsls	r2, r3, #28
 80153e8:	d501      	bpl.n	80153ee <__swbuf_r+0x20>
 80153ea:	6923      	ldr	r3, [r4, #16]
 80153ec:	b943      	cbnz	r3, 8015400 <__swbuf_r+0x32>
 80153ee:	4621      	mov	r1, r4
 80153f0:	4628      	mov	r0, r5
 80153f2:	f000 f82b 	bl	801544c <__swsetup_r>
 80153f6:	b118      	cbz	r0, 8015400 <__swbuf_r+0x32>
 80153f8:	f04f 37ff 	mov.w	r7, #4294967295
 80153fc:	4638      	mov	r0, r7
 80153fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015400:	6823      	ldr	r3, [r4, #0]
 8015402:	6922      	ldr	r2, [r4, #16]
 8015404:	1a98      	subs	r0, r3, r2
 8015406:	6963      	ldr	r3, [r4, #20]
 8015408:	b2f6      	uxtb	r6, r6
 801540a:	4283      	cmp	r3, r0
 801540c:	4637      	mov	r7, r6
 801540e:	dc05      	bgt.n	801541c <__swbuf_r+0x4e>
 8015410:	4621      	mov	r1, r4
 8015412:	4628      	mov	r0, r5
 8015414:	f000 fda2 	bl	8015f5c <_fflush_r>
 8015418:	2800      	cmp	r0, #0
 801541a:	d1ed      	bne.n	80153f8 <__swbuf_r+0x2a>
 801541c:	68a3      	ldr	r3, [r4, #8]
 801541e:	3b01      	subs	r3, #1
 8015420:	60a3      	str	r3, [r4, #8]
 8015422:	6823      	ldr	r3, [r4, #0]
 8015424:	1c5a      	adds	r2, r3, #1
 8015426:	6022      	str	r2, [r4, #0]
 8015428:	701e      	strb	r6, [r3, #0]
 801542a:	6962      	ldr	r2, [r4, #20]
 801542c:	1c43      	adds	r3, r0, #1
 801542e:	429a      	cmp	r2, r3
 8015430:	d004      	beq.n	801543c <__swbuf_r+0x6e>
 8015432:	89a3      	ldrh	r3, [r4, #12]
 8015434:	07db      	lsls	r3, r3, #31
 8015436:	d5e1      	bpl.n	80153fc <__swbuf_r+0x2e>
 8015438:	2e0a      	cmp	r6, #10
 801543a:	d1df      	bne.n	80153fc <__swbuf_r+0x2e>
 801543c:	4621      	mov	r1, r4
 801543e:	4628      	mov	r0, r5
 8015440:	f000 fd8c 	bl	8015f5c <_fflush_r>
 8015444:	2800      	cmp	r0, #0
 8015446:	d0d9      	beq.n	80153fc <__swbuf_r+0x2e>
 8015448:	e7d6      	b.n	80153f8 <__swbuf_r+0x2a>
	...

0801544c <__swsetup_r>:
 801544c:	b538      	push	{r3, r4, r5, lr}
 801544e:	4b29      	ldr	r3, [pc, #164]	@ (80154f4 <__swsetup_r+0xa8>)
 8015450:	4605      	mov	r5, r0
 8015452:	6818      	ldr	r0, [r3, #0]
 8015454:	460c      	mov	r4, r1
 8015456:	b118      	cbz	r0, 8015460 <__swsetup_r+0x14>
 8015458:	6a03      	ldr	r3, [r0, #32]
 801545a:	b90b      	cbnz	r3, 8015460 <__swsetup_r+0x14>
 801545c:	f7ff fece 	bl	80151fc <__sinit>
 8015460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015464:	0719      	lsls	r1, r3, #28
 8015466:	d422      	bmi.n	80154ae <__swsetup_r+0x62>
 8015468:	06da      	lsls	r2, r3, #27
 801546a:	d407      	bmi.n	801547c <__swsetup_r+0x30>
 801546c:	2209      	movs	r2, #9
 801546e:	602a      	str	r2, [r5, #0]
 8015470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015474:	81a3      	strh	r3, [r4, #12]
 8015476:	f04f 30ff 	mov.w	r0, #4294967295
 801547a:	e033      	b.n	80154e4 <__swsetup_r+0x98>
 801547c:	0758      	lsls	r0, r3, #29
 801547e:	d512      	bpl.n	80154a6 <__swsetup_r+0x5a>
 8015480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015482:	b141      	cbz	r1, 8015496 <__swsetup_r+0x4a>
 8015484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015488:	4299      	cmp	r1, r3
 801548a:	d002      	beq.n	8015492 <__swsetup_r+0x46>
 801548c:	4628      	mov	r0, r5
 801548e:	f000 f91b 	bl	80156c8 <_free_r>
 8015492:	2300      	movs	r3, #0
 8015494:	6363      	str	r3, [r4, #52]	@ 0x34
 8015496:	89a3      	ldrh	r3, [r4, #12]
 8015498:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801549c:	81a3      	strh	r3, [r4, #12]
 801549e:	2300      	movs	r3, #0
 80154a0:	6063      	str	r3, [r4, #4]
 80154a2:	6923      	ldr	r3, [r4, #16]
 80154a4:	6023      	str	r3, [r4, #0]
 80154a6:	89a3      	ldrh	r3, [r4, #12]
 80154a8:	f043 0308 	orr.w	r3, r3, #8
 80154ac:	81a3      	strh	r3, [r4, #12]
 80154ae:	6923      	ldr	r3, [r4, #16]
 80154b0:	b94b      	cbnz	r3, 80154c6 <__swsetup_r+0x7a>
 80154b2:	89a3      	ldrh	r3, [r4, #12]
 80154b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80154b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80154bc:	d003      	beq.n	80154c6 <__swsetup_r+0x7a>
 80154be:	4621      	mov	r1, r4
 80154c0:	4628      	mov	r0, r5
 80154c2:	f000 fd99 	bl	8015ff8 <__smakebuf_r>
 80154c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154ca:	f013 0201 	ands.w	r2, r3, #1
 80154ce:	d00a      	beq.n	80154e6 <__swsetup_r+0x9a>
 80154d0:	2200      	movs	r2, #0
 80154d2:	60a2      	str	r2, [r4, #8]
 80154d4:	6962      	ldr	r2, [r4, #20]
 80154d6:	4252      	negs	r2, r2
 80154d8:	61a2      	str	r2, [r4, #24]
 80154da:	6922      	ldr	r2, [r4, #16]
 80154dc:	b942      	cbnz	r2, 80154f0 <__swsetup_r+0xa4>
 80154de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80154e2:	d1c5      	bne.n	8015470 <__swsetup_r+0x24>
 80154e4:	bd38      	pop	{r3, r4, r5, pc}
 80154e6:	0799      	lsls	r1, r3, #30
 80154e8:	bf58      	it	pl
 80154ea:	6962      	ldrpl	r2, [r4, #20]
 80154ec:	60a2      	str	r2, [r4, #8]
 80154ee:	e7f4      	b.n	80154da <__swsetup_r+0x8e>
 80154f0:	2000      	movs	r0, #0
 80154f2:	e7f7      	b.n	80154e4 <__swsetup_r+0x98>
 80154f4:	20000020 	.word	0x20000020

080154f8 <memset>:
 80154f8:	4402      	add	r2, r0
 80154fa:	4603      	mov	r3, r0
 80154fc:	4293      	cmp	r3, r2
 80154fe:	d100      	bne.n	8015502 <memset+0xa>
 8015500:	4770      	bx	lr
 8015502:	f803 1b01 	strb.w	r1, [r3], #1
 8015506:	e7f9      	b.n	80154fc <memset+0x4>

08015508 <_close_r>:
 8015508:	b538      	push	{r3, r4, r5, lr}
 801550a:	4d06      	ldr	r5, [pc, #24]	@ (8015524 <_close_r+0x1c>)
 801550c:	2300      	movs	r3, #0
 801550e:	4604      	mov	r4, r0
 8015510:	4608      	mov	r0, r1
 8015512:	602b      	str	r3, [r5, #0]
 8015514:	f7ed fc6d 	bl	8002df2 <_close>
 8015518:	1c43      	adds	r3, r0, #1
 801551a:	d102      	bne.n	8015522 <_close_r+0x1a>
 801551c:	682b      	ldr	r3, [r5, #0]
 801551e:	b103      	cbz	r3, 8015522 <_close_r+0x1a>
 8015520:	6023      	str	r3, [r4, #0]
 8015522:	bd38      	pop	{r3, r4, r5, pc}
 8015524:	2000d7a0 	.word	0x2000d7a0

08015528 <_reclaim_reent>:
 8015528:	4b2d      	ldr	r3, [pc, #180]	@ (80155e0 <_reclaim_reent+0xb8>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	4283      	cmp	r3, r0
 801552e:	b570      	push	{r4, r5, r6, lr}
 8015530:	4604      	mov	r4, r0
 8015532:	d053      	beq.n	80155dc <_reclaim_reent+0xb4>
 8015534:	69c3      	ldr	r3, [r0, #28]
 8015536:	b31b      	cbz	r3, 8015580 <_reclaim_reent+0x58>
 8015538:	68db      	ldr	r3, [r3, #12]
 801553a:	b163      	cbz	r3, 8015556 <_reclaim_reent+0x2e>
 801553c:	2500      	movs	r5, #0
 801553e:	69e3      	ldr	r3, [r4, #28]
 8015540:	68db      	ldr	r3, [r3, #12]
 8015542:	5959      	ldr	r1, [r3, r5]
 8015544:	b9b1      	cbnz	r1, 8015574 <_reclaim_reent+0x4c>
 8015546:	3504      	adds	r5, #4
 8015548:	2d80      	cmp	r5, #128	@ 0x80
 801554a:	d1f8      	bne.n	801553e <_reclaim_reent+0x16>
 801554c:	69e3      	ldr	r3, [r4, #28]
 801554e:	4620      	mov	r0, r4
 8015550:	68d9      	ldr	r1, [r3, #12]
 8015552:	f000 f8b9 	bl	80156c8 <_free_r>
 8015556:	69e3      	ldr	r3, [r4, #28]
 8015558:	6819      	ldr	r1, [r3, #0]
 801555a:	b111      	cbz	r1, 8015562 <_reclaim_reent+0x3a>
 801555c:	4620      	mov	r0, r4
 801555e:	f000 f8b3 	bl	80156c8 <_free_r>
 8015562:	69e3      	ldr	r3, [r4, #28]
 8015564:	689d      	ldr	r5, [r3, #8]
 8015566:	b15d      	cbz	r5, 8015580 <_reclaim_reent+0x58>
 8015568:	4629      	mov	r1, r5
 801556a:	4620      	mov	r0, r4
 801556c:	682d      	ldr	r5, [r5, #0]
 801556e:	f000 f8ab 	bl	80156c8 <_free_r>
 8015572:	e7f8      	b.n	8015566 <_reclaim_reent+0x3e>
 8015574:	680e      	ldr	r6, [r1, #0]
 8015576:	4620      	mov	r0, r4
 8015578:	f000 f8a6 	bl	80156c8 <_free_r>
 801557c:	4631      	mov	r1, r6
 801557e:	e7e1      	b.n	8015544 <_reclaim_reent+0x1c>
 8015580:	6961      	ldr	r1, [r4, #20]
 8015582:	b111      	cbz	r1, 801558a <_reclaim_reent+0x62>
 8015584:	4620      	mov	r0, r4
 8015586:	f000 f89f 	bl	80156c8 <_free_r>
 801558a:	69e1      	ldr	r1, [r4, #28]
 801558c:	b111      	cbz	r1, 8015594 <_reclaim_reent+0x6c>
 801558e:	4620      	mov	r0, r4
 8015590:	f000 f89a 	bl	80156c8 <_free_r>
 8015594:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015596:	b111      	cbz	r1, 801559e <_reclaim_reent+0x76>
 8015598:	4620      	mov	r0, r4
 801559a:	f000 f895 	bl	80156c8 <_free_r>
 801559e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80155a0:	b111      	cbz	r1, 80155a8 <_reclaim_reent+0x80>
 80155a2:	4620      	mov	r0, r4
 80155a4:	f000 f890 	bl	80156c8 <_free_r>
 80155a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80155aa:	b111      	cbz	r1, 80155b2 <_reclaim_reent+0x8a>
 80155ac:	4620      	mov	r0, r4
 80155ae:	f000 f88b 	bl	80156c8 <_free_r>
 80155b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80155b4:	b111      	cbz	r1, 80155bc <_reclaim_reent+0x94>
 80155b6:	4620      	mov	r0, r4
 80155b8:	f000 f886 	bl	80156c8 <_free_r>
 80155bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80155be:	b111      	cbz	r1, 80155c6 <_reclaim_reent+0x9e>
 80155c0:	4620      	mov	r0, r4
 80155c2:	f000 f881 	bl	80156c8 <_free_r>
 80155c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80155c8:	b111      	cbz	r1, 80155d0 <_reclaim_reent+0xa8>
 80155ca:	4620      	mov	r0, r4
 80155cc:	f000 f87c 	bl	80156c8 <_free_r>
 80155d0:	6a23      	ldr	r3, [r4, #32]
 80155d2:	b11b      	cbz	r3, 80155dc <_reclaim_reent+0xb4>
 80155d4:	4620      	mov	r0, r4
 80155d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155da:	4718      	bx	r3
 80155dc:	bd70      	pop	{r4, r5, r6, pc}
 80155de:	bf00      	nop
 80155e0:	20000020 	.word	0x20000020

080155e4 <_lseek_r>:
 80155e4:	b538      	push	{r3, r4, r5, lr}
 80155e6:	4d07      	ldr	r5, [pc, #28]	@ (8015604 <_lseek_r+0x20>)
 80155e8:	4604      	mov	r4, r0
 80155ea:	4608      	mov	r0, r1
 80155ec:	4611      	mov	r1, r2
 80155ee:	2200      	movs	r2, #0
 80155f0:	602a      	str	r2, [r5, #0]
 80155f2:	461a      	mov	r2, r3
 80155f4:	f7ed fc24 	bl	8002e40 <_lseek>
 80155f8:	1c43      	adds	r3, r0, #1
 80155fa:	d102      	bne.n	8015602 <_lseek_r+0x1e>
 80155fc:	682b      	ldr	r3, [r5, #0]
 80155fe:	b103      	cbz	r3, 8015602 <_lseek_r+0x1e>
 8015600:	6023      	str	r3, [r4, #0]
 8015602:	bd38      	pop	{r3, r4, r5, pc}
 8015604:	2000d7a0 	.word	0x2000d7a0

08015608 <_read_r>:
 8015608:	b538      	push	{r3, r4, r5, lr}
 801560a:	4d07      	ldr	r5, [pc, #28]	@ (8015628 <_read_r+0x20>)
 801560c:	4604      	mov	r4, r0
 801560e:	4608      	mov	r0, r1
 8015610:	4611      	mov	r1, r2
 8015612:	2200      	movs	r2, #0
 8015614:	602a      	str	r2, [r5, #0]
 8015616:	461a      	mov	r2, r3
 8015618:	f7ed fbce 	bl	8002db8 <_read>
 801561c:	1c43      	adds	r3, r0, #1
 801561e:	d102      	bne.n	8015626 <_read_r+0x1e>
 8015620:	682b      	ldr	r3, [r5, #0]
 8015622:	b103      	cbz	r3, 8015626 <_read_r+0x1e>
 8015624:	6023      	str	r3, [r4, #0]
 8015626:	bd38      	pop	{r3, r4, r5, pc}
 8015628:	2000d7a0 	.word	0x2000d7a0

0801562c <_write_r>:
 801562c:	b538      	push	{r3, r4, r5, lr}
 801562e:	4d07      	ldr	r5, [pc, #28]	@ (801564c <_write_r+0x20>)
 8015630:	4604      	mov	r4, r0
 8015632:	4608      	mov	r0, r1
 8015634:	4611      	mov	r1, r2
 8015636:	2200      	movs	r2, #0
 8015638:	602a      	str	r2, [r5, #0]
 801563a:	461a      	mov	r2, r3
 801563c:	f7ee f986 	bl	800394c <_write>
 8015640:	1c43      	adds	r3, r0, #1
 8015642:	d102      	bne.n	801564a <_write_r+0x1e>
 8015644:	682b      	ldr	r3, [r5, #0]
 8015646:	b103      	cbz	r3, 801564a <_write_r+0x1e>
 8015648:	6023      	str	r3, [r4, #0]
 801564a:	bd38      	pop	{r3, r4, r5, pc}
 801564c:	2000d7a0 	.word	0x2000d7a0

08015650 <__errno>:
 8015650:	4b01      	ldr	r3, [pc, #4]	@ (8015658 <__errno+0x8>)
 8015652:	6818      	ldr	r0, [r3, #0]
 8015654:	4770      	bx	lr
 8015656:	bf00      	nop
 8015658:	20000020 	.word	0x20000020

0801565c <__libc_init_array>:
 801565c:	b570      	push	{r4, r5, r6, lr}
 801565e:	4d0d      	ldr	r5, [pc, #52]	@ (8015694 <__libc_init_array+0x38>)
 8015660:	4c0d      	ldr	r4, [pc, #52]	@ (8015698 <__libc_init_array+0x3c>)
 8015662:	1b64      	subs	r4, r4, r5
 8015664:	10a4      	asrs	r4, r4, #2
 8015666:	2600      	movs	r6, #0
 8015668:	42a6      	cmp	r6, r4
 801566a:	d109      	bne.n	8015680 <__libc_init_array+0x24>
 801566c:	4d0b      	ldr	r5, [pc, #44]	@ (801569c <__libc_init_array+0x40>)
 801566e:	4c0c      	ldr	r4, [pc, #48]	@ (80156a0 <__libc_init_array+0x44>)
 8015670:	f000 fd30 	bl	80160d4 <_init>
 8015674:	1b64      	subs	r4, r4, r5
 8015676:	10a4      	asrs	r4, r4, #2
 8015678:	2600      	movs	r6, #0
 801567a:	42a6      	cmp	r6, r4
 801567c:	d105      	bne.n	801568a <__libc_init_array+0x2e>
 801567e:	bd70      	pop	{r4, r5, r6, pc}
 8015680:	f855 3b04 	ldr.w	r3, [r5], #4
 8015684:	4798      	blx	r3
 8015686:	3601      	adds	r6, #1
 8015688:	e7ee      	b.n	8015668 <__libc_init_array+0xc>
 801568a:	f855 3b04 	ldr.w	r3, [r5], #4
 801568e:	4798      	blx	r3
 8015690:	3601      	adds	r6, #1
 8015692:	e7f2      	b.n	801567a <__libc_init_array+0x1e>
 8015694:	08016a24 	.word	0x08016a24
 8015698:	08016a24 	.word	0x08016a24
 801569c:	08016a24 	.word	0x08016a24
 80156a0:	08016a28 	.word	0x08016a28

080156a4 <__retarget_lock_init_recursive>:
 80156a4:	4770      	bx	lr

080156a6 <__retarget_lock_acquire_recursive>:
 80156a6:	4770      	bx	lr

080156a8 <__retarget_lock_release_recursive>:
 80156a8:	4770      	bx	lr

080156aa <memcpy>:
 80156aa:	440a      	add	r2, r1
 80156ac:	4291      	cmp	r1, r2
 80156ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80156b2:	d100      	bne.n	80156b6 <memcpy+0xc>
 80156b4:	4770      	bx	lr
 80156b6:	b510      	push	{r4, lr}
 80156b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156c0:	4291      	cmp	r1, r2
 80156c2:	d1f9      	bne.n	80156b8 <memcpy+0xe>
 80156c4:	bd10      	pop	{r4, pc}
	...

080156c8 <_free_r>:
 80156c8:	b538      	push	{r3, r4, r5, lr}
 80156ca:	4605      	mov	r5, r0
 80156cc:	2900      	cmp	r1, #0
 80156ce:	d041      	beq.n	8015754 <_free_r+0x8c>
 80156d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156d4:	1f0c      	subs	r4, r1, #4
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	bfb8      	it	lt
 80156da:	18e4      	addlt	r4, r4, r3
 80156dc:	f000 f8e0 	bl	80158a0 <__malloc_lock>
 80156e0:	4a1d      	ldr	r2, [pc, #116]	@ (8015758 <_free_r+0x90>)
 80156e2:	6813      	ldr	r3, [r2, #0]
 80156e4:	b933      	cbnz	r3, 80156f4 <_free_r+0x2c>
 80156e6:	6063      	str	r3, [r4, #4]
 80156e8:	6014      	str	r4, [r2, #0]
 80156ea:	4628      	mov	r0, r5
 80156ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156f0:	f000 b8dc 	b.w	80158ac <__malloc_unlock>
 80156f4:	42a3      	cmp	r3, r4
 80156f6:	d908      	bls.n	801570a <_free_r+0x42>
 80156f8:	6820      	ldr	r0, [r4, #0]
 80156fa:	1821      	adds	r1, r4, r0
 80156fc:	428b      	cmp	r3, r1
 80156fe:	bf01      	itttt	eq
 8015700:	6819      	ldreq	r1, [r3, #0]
 8015702:	685b      	ldreq	r3, [r3, #4]
 8015704:	1809      	addeq	r1, r1, r0
 8015706:	6021      	streq	r1, [r4, #0]
 8015708:	e7ed      	b.n	80156e6 <_free_r+0x1e>
 801570a:	461a      	mov	r2, r3
 801570c:	685b      	ldr	r3, [r3, #4]
 801570e:	b10b      	cbz	r3, 8015714 <_free_r+0x4c>
 8015710:	42a3      	cmp	r3, r4
 8015712:	d9fa      	bls.n	801570a <_free_r+0x42>
 8015714:	6811      	ldr	r1, [r2, #0]
 8015716:	1850      	adds	r0, r2, r1
 8015718:	42a0      	cmp	r0, r4
 801571a:	d10b      	bne.n	8015734 <_free_r+0x6c>
 801571c:	6820      	ldr	r0, [r4, #0]
 801571e:	4401      	add	r1, r0
 8015720:	1850      	adds	r0, r2, r1
 8015722:	4283      	cmp	r3, r0
 8015724:	6011      	str	r1, [r2, #0]
 8015726:	d1e0      	bne.n	80156ea <_free_r+0x22>
 8015728:	6818      	ldr	r0, [r3, #0]
 801572a:	685b      	ldr	r3, [r3, #4]
 801572c:	6053      	str	r3, [r2, #4]
 801572e:	4408      	add	r0, r1
 8015730:	6010      	str	r0, [r2, #0]
 8015732:	e7da      	b.n	80156ea <_free_r+0x22>
 8015734:	d902      	bls.n	801573c <_free_r+0x74>
 8015736:	230c      	movs	r3, #12
 8015738:	602b      	str	r3, [r5, #0]
 801573a:	e7d6      	b.n	80156ea <_free_r+0x22>
 801573c:	6820      	ldr	r0, [r4, #0]
 801573e:	1821      	adds	r1, r4, r0
 8015740:	428b      	cmp	r3, r1
 8015742:	bf04      	itt	eq
 8015744:	6819      	ldreq	r1, [r3, #0]
 8015746:	685b      	ldreq	r3, [r3, #4]
 8015748:	6063      	str	r3, [r4, #4]
 801574a:	bf04      	itt	eq
 801574c:	1809      	addeq	r1, r1, r0
 801574e:	6021      	streq	r1, [r4, #0]
 8015750:	6054      	str	r4, [r2, #4]
 8015752:	e7ca      	b.n	80156ea <_free_r+0x22>
 8015754:	bd38      	pop	{r3, r4, r5, pc}
 8015756:	bf00      	nop
 8015758:	2000d7ac 	.word	0x2000d7ac

0801575c <sbrk_aligned>:
 801575c:	b570      	push	{r4, r5, r6, lr}
 801575e:	4e0f      	ldr	r6, [pc, #60]	@ (801579c <sbrk_aligned+0x40>)
 8015760:	460c      	mov	r4, r1
 8015762:	6831      	ldr	r1, [r6, #0]
 8015764:	4605      	mov	r5, r0
 8015766:	b911      	cbnz	r1, 801576e <sbrk_aligned+0x12>
 8015768:	f000 fca4 	bl	80160b4 <_sbrk_r>
 801576c:	6030      	str	r0, [r6, #0]
 801576e:	4621      	mov	r1, r4
 8015770:	4628      	mov	r0, r5
 8015772:	f000 fc9f 	bl	80160b4 <_sbrk_r>
 8015776:	1c43      	adds	r3, r0, #1
 8015778:	d103      	bne.n	8015782 <sbrk_aligned+0x26>
 801577a:	f04f 34ff 	mov.w	r4, #4294967295
 801577e:	4620      	mov	r0, r4
 8015780:	bd70      	pop	{r4, r5, r6, pc}
 8015782:	1cc4      	adds	r4, r0, #3
 8015784:	f024 0403 	bic.w	r4, r4, #3
 8015788:	42a0      	cmp	r0, r4
 801578a:	d0f8      	beq.n	801577e <sbrk_aligned+0x22>
 801578c:	1a21      	subs	r1, r4, r0
 801578e:	4628      	mov	r0, r5
 8015790:	f000 fc90 	bl	80160b4 <_sbrk_r>
 8015794:	3001      	adds	r0, #1
 8015796:	d1f2      	bne.n	801577e <sbrk_aligned+0x22>
 8015798:	e7ef      	b.n	801577a <sbrk_aligned+0x1e>
 801579a:	bf00      	nop
 801579c:	2000d7a8 	.word	0x2000d7a8

080157a0 <_malloc_r>:
 80157a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157a4:	1ccd      	adds	r5, r1, #3
 80157a6:	f025 0503 	bic.w	r5, r5, #3
 80157aa:	3508      	adds	r5, #8
 80157ac:	2d0c      	cmp	r5, #12
 80157ae:	bf38      	it	cc
 80157b0:	250c      	movcc	r5, #12
 80157b2:	2d00      	cmp	r5, #0
 80157b4:	4606      	mov	r6, r0
 80157b6:	db01      	blt.n	80157bc <_malloc_r+0x1c>
 80157b8:	42a9      	cmp	r1, r5
 80157ba:	d904      	bls.n	80157c6 <_malloc_r+0x26>
 80157bc:	230c      	movs	r3, #12
 80157be:	6033      	str	r3, [r6, #0]
 80157c0:	2000      	movs	r0, #0
 80157c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801589c <_malloc_r+0xfc>
 80157ca:	f000 f869 	bl	80158a0 <__malloc_lock>
 80157ce:	f8d8 3000 	ldr.w	r3, [r8]
 80157d2:	461c      	mov	r4, r3
 80157d4:	bb44      	cbnz	r4, 8015828 <_malloc_r+0x88>
 80157d6:	4629      	mov	r1, r5
 80157d8:	4630      	mov	r0, r6
 80157da:	f7ff ffbf 	bl	801575c <sbrk_aligned>
 80157de:	1c43      	adds	r3, r0, #1
 80157e0:	4604      	mov	r4, r0
 80157e2:	d158      	bne.n	8015896 <_malloc_r+0xf6>
 80157e4:	f8d8 4000 	ldr.w	r4, [r8]
 80157e8:	4627      	mov	r7, r4
 80157ea:	2f00      	cmp	r7, #0
 80157ec:	d143      	bne.n	8015876 <_malloc_r+0xd6>
 80157ee:	2c00      	cmp	r4, #0
 80157f0:	d04b      	beq.n	801588a <_malloc_r+0xea>
 80157f2:	6823      	ldr	r3, [r4, #0]
 80157f4:	4639      	mov	r1, r7
 80157f6:	4630      	mov	r0, r6
 80157f8:	eb04 0903 	add.w	r9, r4, r3
 80157fc:	f000 fc5a 	bl	80160b4 <_sbrk_r>
 8015800:	4581      	cmp	r9, r0
 8015802:	d142      	bne.n	801588a <_malloc_r+0xea>
 8015804:	6821      	ldr	r1, [r4, #0]
 8015806:	1a6d      	subs	r5, r5, r1
 8015808:	4629      	mov	r1, r5
 801580a:	4630      	mov	r0, r6
 801580c:	f7ff ffa6 	bl	801575c <sbrk_aligned>
 8015810:	3001      	adds	r0, #1
 8015812:	d03a      	beq.n	801588a <_malloc_r+0xea>
 8015814:	6823      	ldr	r3, [r4, #0]
 8015816:	442b      	add	r3, r5
 8015818:	6023      	str	r3, [r4, #0]
 801581a:	f8d8 3000 	ldr.w	r3, [r8]
 801581e:	685a      	ldr	r2, [r3, #4]
 8015820:	bb62      	cbnz	r2, 801587c <_malloc_r+0xdc>
 8015822:	f8c8 7000 	str.w	r7, [r8]
 8015826:	e00f      	b.n	8015848 <_malloc_r+0xa8>
 8015828:	6822      	ldr	r2, [r4, #0]
 801582a:	1b52      	subs	r2, r2, r5
 801582c:	d420      	bmi.n	8015870 <_malloc_r+0xd0>
 801582e:	2a0b      	cmp	r2, #11
 8015830:	d917      	bls.n	8015862 <_malloc_r+0xc2>
 8015832:	1961      	adds	r1, r4, r5
 8015834:	42a3      	cmp	r3, r4
 8015836:	6025      	str	r5, [r4, #0]
 8015838:	bf18      	it	ne
 801583a:	6059      	strne	r1, [r3, #4]
 801583c:	6863      	ldr	r3, [r4, #4]
 801583e:	bf08      	it	eq
 8015840:	f8c8 1000 	streq.w	r1, [r8]
 8015844:	5162      	str	r2, [r4, r5]
 8015846:	604b      	str	r3, [r1, #4]
 8015848:	4630      	mov	r0, r6
 801584a:	f000 f82f 	bl	80158ac <__malloc_unlock>
 801584e:	f104 000b 	add.w	r0, r4, #11
 8015852:	1d23      	adds	r3, r4, #4
 8015854:	f020 0007 	bic.w	r0, r0, #7
 8015858:	1ac2      	subs	r2, r0, r3
 801585a:	bf1c      	itt	ne
 801585c:	1a1b      	subne	r3, r3, r0
 801585e:	50a3      	strne	r3, [r4, r2]
 8015860:	e7af      	b.n	80157c2 <_malloc_r+0x22>
 8015862:	6862      	ldr	r2, [r4, #4]
 8015864:	42a3      	cmp	r3, r4
 8015866:	bf0c      	ite	eq
 8015868:	f8c8 2000 	streq.w	r2, [r8]
 801586c:	605a      	strne	r2, [r3, #4]
 801586e:	e7eb      	b.n	8015848 <_malloc_r+0xa8>
 8015870:	4623      	mov	r3, r4
 8015872:	6864      	ldr	r4, [r4, #4]
 8015874:	e7ae      	b.n	80157d4 <_malloc_r+0x34>
 8015876:	463c      	mov	r4, r7
 8015878:	687f      	ldr	r7, [r7, #4]
 801587a:	e7b6      	b.n	80157ea <_malloc_r+0x4a>
 801587c:	461a      	mov	r2, r3
 801587e:	685b      	ldr	r3, [r3, #4]
 8015880:	42a3      	cmp	r3, r4
 8015882:	d1fb      	bne.n	801587c <_malloc_r+0xdc>
 8015884:	2300      	movs	r3, #0
 8015886:	6053      	str	r3, [r2, #4]
 8015888:	e7de      	b.n	8015848 <_malloc_r+0xa8>
 801588a:	230c      	movs	r3, #12
 801588c:	6033      	str	r3, [r6, #0]
 801588e:	4630      	mov	r0, r6
 8015890:	f000 f80c 	bl	80158ac <__malloc_unlock>
 8015894:	e794      	b.n	80157c0 <_malloc_r+0x20>
 8015896:	6005      	str	r5, [r0, #0]
 8015898:	e7d6      	b.n	8015848 <_malloc_r+0xa8>
 801589a:	bf00      	nop
 801589c:	2000d7ac 	.word	0x2000d7ac

080158a0 <__malloc_lock>:
 80158a0:	4801      	ldr	r0, [pc, #4]	@ (80158a8 <__malloc_lock+0x8>)
 80158a2:	f7ff bf00 	b.w	80156a6 <__retarget_lock_acquire_recursive>
 80158a6:	bf00      	nop
 80158a8:	2000d7a4 	.word	0x2000d7a4

080158ac <__malloc_unlock>:
 80158ac:	4801      	ldr	r0, [pc, #4]	@ (80158b4 <__malloc_unlock+0x8>)
 80158ae:	f7ff befb 	b.w	80156a8 <__retarget_lock_release_recursive>
 80158b2:	bf00      	nop
 80158b4:	2000d7a4 	.word	0x2000d7a4

080158b8 <__sfputc_r>:
 80158b8:	6893      	ldr	r3, [r2, #8]
 80158ba:	3b01      	subs	r3, #1
 80158bc:	2b00      	cmp	r3, #0
 80158be:	b410      	push	{r4}
 80158c0:	6093      	str	r3, [r2, #8]
 80158c2:	da08      	bge.n	80158d6 <__sfputc_r+0x1e>
 80158c4:	6994      	ldr	r4, [r2, #24]
 80158c6:	42a3      	cmp	r3, r4
 80158c8:	db01      	blt.n	80158ce <__sfputc_r+0x16>
 80158ca:	290a      	cmp	r1, #10
 80158cc:	d103      	bne.n	80158d6 <__sfputc_r+0x1e>
 80158ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158d2:	f7ff bd7c 	b.w	80153ce <__swbuf_r>
 80158d6:	6813      	ldr	r3, [r2, #0]
 80158d8:	1c58      	adds	r0, r3, #1
 80158da:	6010      	str	r0, [r2, #0]
 80158dc:	7019      	strb	r1, [r3, #0]
 80158de:	4608      	mov	r0, r1
 80158e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158e4:	4770      	bx	lr

080158e6 <__sfputs_r>:
 80158e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158e8:	4606      	mov	r6, r0
 80158ea:	460f      	mov	r7, r1
 80158ec:	4614      	mov	r4, r2
 80158ee:	18d5      	adds	r5, r2, r3
 80158f0:	42ac      	cmp	r4, r5
 80158f2:	d101      	bne.n	80158f8 <__sfputs_r+0x12>
 80158f4:	2000      	movs	r0, #0
 80158f6:	e007      	b.n	8015908 <__sfputs_r+0x22>
 80158f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158fc:	463a      	mov	r2, r7
 80158fe:	4630      	mov	r0, r6
 8015900:	f7ff ffda 	bl	80158b8 <__sfputc_r>
 8015904:	1c43      	adds	r3, r0, #1
 8015906:	d1f3      	bne.n	80158f0 <__sfputs_r+0xa>
 8015908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801590c <_vfiprintf_r>:
 801590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015910:	460d      	mov	r5, r1
 8015912:	b09d      	sub	sp, #116	@ 0x74
 8015914:	4614      	mov	r4, r2
 8015916:	4698      	mov	r8, r3
 8015918:	4606      	mov	r6, r0
 801591a:	b118      	cbz	r0, 8015924 <_vfiprintf_r+0x18>
 801591c:	6a03      	ldr	r3, [r0, #32]
 801591e:	b90b      	cbnz	r3, 8015924 <_vfiprintf_r+0x18>
 8015920:	f7ff fc6c 	bl	80151fc <__sinit>
 8015924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015926:	07d9      	lsls	r1, r3, #31
 8015928:	d405      	bmi.n	8015936 <_vfiprintf_r+0x2a>
 801592a:	89ab      	ldrh	r3, [r5, #12]
 801592c:	059a      	lsls	r2, r3, #22
 801592e:	d402      	bmi.n	8015936 <_vfiprintf_r+0x2a>
 8015930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015932:	f7ff feb8 	bl	80156a6 <__retarget_lock_acquire_recursive>
 8015936:	89ab      	ldrh	r3, [r5, #12]
 8015938:	071b      	lsls	r3, r3, #28
 801593a:	d501      	bpl.n	8015940 <_vfiprintf_r+0x34>
 801593c:	692b      	ldr	r3, [r5, #16]
 801593e:	b99b      	cbnz	r3, 8015968 <_vfiprintf_r+0x5c>
 8015940:	4629      	mov	r1, r5
 8015942:	4630      	mov	r0, r6
 8015944:	f7ff fd82 	bl	801544c <__swsetup_r>
 8015948:	b170      	cbz	r0, 8015968 <_vfiprintf_r+0x5c>
 801594a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801594c:	07dc      	lsls	r4, r3, #31
 801594e:	d504      	bpl.n	801595a <_vfiprintf_r+0x4e>
 8015950:	f04f 30ff 	mov.w	r0, #4294967295
 8015954:	b01d      	add	sp, #116	@ 0x74
 8015956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801595a:	89ab      	ldrh	r3, [r5, #12]
 801595c:	0598      	lsls	r0, r3, #22
 801595e:	d4f7      	bmi.n	8015950 <_vfiprintf_r+0x44>
 8015960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015962:	f7ff fea1 	bl	80156a8 <__retarget_lock_release_recursive>
 8015966:	e7f3      	b.n	8015950 <_vfiprintf_r+0x44>
 8015968:	2300      	movs	r3, #0
 801596a:	9309      	str	r3, [sp, #36]	@ 0x24
 801596c:	2320      	movs	r3, #32
 801596e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015972:	f8cd 800c 	str.w	r8, [sp, #12]
 8015976:	2330      	movs	r3, #48	@ 0x30
 8015978:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015b28 <_vfiprintf_r+0x21c>
 801597c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015980:	f04f 0901 	mov.w	r9, #1
 8015984:	4623      	mov	r3, r4
 8015986:	469a      	mov	sl, r3
 8015988:	f813 2b01 	ldrb.w	r2, [r3], #1
 801598c:	b10a      	cbz	r2, 8015992 <_vfiprintf_r+0x86>
 801598e:	2a25      	cmp	r2, #37	@ 0x25
 8015990:	d1f9      	bne.n	8015986 <_vfiprintf_r+0x7a>
 8015992:	ebba 0b04 	subs.w	fp, sl, r4
 8015996:	d00b      	beq.n	80159b0 <_vfiprintf_r+0xa4>
 8015998:	465b      	mov	r3, fp
 801599a:	4622      	mov	r2, r4
 801599c:	4629      	mov	r1, r5
 801599e:	4630      	mov	r0, r6
 80159a0:	f7ff ffa1 	bl	80158e6 <__sfputs_r>
 80159a4:	3001      	adds	r0, #1
 80159a6:	f000 80a7 	beq.w	8015af8 <_vfiprintf_r+0x1ec>
 80159aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159ac:	445a      	add	r2, fp
 80159ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80159b0:	f89a 3000 	ldrb.w	r3, [sl]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	f000 809f 	beq.w	8015af8 <_vfiprintf_r+0x1ec>
 80159ba:	2300      	movs	r3, #0
 80159bc:	f04f 32ff 	mov.w	r2, #4294967295
 80159c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159c4:	f10a 0a01 	add.w	sl, sl, #1
 80159c8:	9304      	str	r3, [sp, #16]
 80159ca:	9307      	str	r3, [sp, #28]
 80159cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80159d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80159d2:	4654      	mov	r4, sl
 80159d4:	2205      	movs	r2, #5
 80159d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159da:	4853      	ldr	r0, [pc, #332]	@ (8015b28 <_vfiprintf_r+0x21c>)
 80159dc:	f7ea fc18 	bl	8000210 <memchr>
 80159e0:	9a04      	ldr	r2, [sp, #16]
 80159e2:	b9d8      	cbnz	r0, 8015a1c <_vfiprintf_r+0x110>
 80159e4:	06d1      	lsls	r1, r2, #27
 80159e6:	bf44      	itt	mi
 80159e8:	2320      	movmi	r3, #32
 80159ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80159ee:	0713      	lsls	r3, r2, #28
 80159f0:	bf44      	itt	mi
 80159f2:	232b      	movmi	r3, #43	@ 0x2b
 80159f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80159f8:	f89a 3000 	ldrb.w	r3, [sl]
 80159fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80159fe:	d015      	beq.n	8015a2c <_vfiprintf_r+0x120>
 8015a00:	9a07      	ldr	r2, [sp, #28]
 8015a02:	4654      	mov	r4, sl
 8015a04:	2000      	movs	r0, #0
 8015a06:	f04f 0c0a 	mov.w	ip, #10
 8015a0a:	4621      	mov	r1, r4
 8015a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a10:	3b30      	subs	r3, #48	@ 0x30
 8015a12:	2b09      	cmp	r3, #9
 8015a14:	d94b      	bls.n	8015aae <_vfiprintf_r+0x1a2>
 8015a16:	b1b0      	cbz	r0, 8015a46 <_vfiprintf_r+0x13a>
 8015a18:	9207      	str	r2, [sp, #28]
 8015a1a:	e014      	b.n	8015a46 <_vfiprintf_r+0x13a>
 8015a1c:	eba0 0308 	sub.w	r3, r0, r8
 8015a20:	fa09 f303 	lsl.w	r3, r9, r3
 8015a24:	4313      	orrs	r3, r2
 8015a26:	9304      	str	r3, [sp, #16]
 8015a28:	46a2      	mov	sl, r4
 8015a2a:	e7d2      	b.n	80159d2 <_vfiprintf_r+0xc6>
 8015a2c:	9b03      	ldr	r3, [sp, #12]
 8015a2e:	1d19      	adds	r1, r3, #4
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	9103      	str	r1, [sp, #12]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	bfbb      	ittet	lt
 8015a38:	425b      	neglt	r3, r3
 8015a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8015a3e:	9307      	strge	r3, [sp, #28]
 8015a40:	9307      	strlt	r3, [sp, #28]
 8015a42:	bfb8      	it	lt
 8015a44:	9204      	strlt	r2, [sp, #16]
 8015a46:	7823      	ldrb	r3, [r4, #0]
 8015a48:	2b2e      	cmp	r3, #46	@ 0x2e
 8015a4a:	d10a      	bne.n	8015a62 <_vfiprintf_r+0x156>
 8015a4c:	7863      	ldrb	r3, [r4, #1]
 8015a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a50:	d132      	bne.n	8015ab8 <_vfiprintf_r+0x1ac>
 8015a52:	9b03      	ldr	r3, [sp, #12]
 8015a54:	1d1a      	adds	r2, r3, #4
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	9203      	str	r2, [sp, #12]
 8015a5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015a5e:	3402      	adds	r4, #2
 8015a60:	9305      	str	r3, [sp, #20]
 8015a62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015b38 <_vfiprintf_r+0x22c>
 8015a66:	7821      	ldrb	r1, [r4, #0]
 8015a68:	2203      	movs	r2, #3
 8015a6a:	4650      	mov	r0, sl
 8015a6c:	f7ea fbd0 	bl	8000210 <memchr>
 8015a70:	b138      	cbz	r0, 8015a82 <_vfiprintf_r+0x176>
 8015a72:	9b04      	ldr	r3, [sp, #16]
 8015a74:	eba0 000a 	sub.w	r0, r0, sl
 8015a78:	2240      	movs	r2, #64	@ 0x40
 8015a7a:	4082      	lsls	r2, r0
 8015a7c:	4313      	orrs	r3, r2
 8015a7e:	3401      	adds	r4, #1
 8015a80:	9304      	str	r3, [sp, #16]
 8015a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a86:	4829      	ldr	r0, [pc, #164]	@ (8015b2c <_vfiprintf_r+0x220>)
 8015a88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015a8c:	2206      	movs	r2, #6
 8015a8e:	f7ea fbbf 	bl	8000210 <memchr>
 8015a92:	2800      	cmp	r0, #0
 8015a94:	d03f      	beq.n	8015b16 <_vfiprintf_r+0x20a>
 8015a96:	4b26      	ldr	r3, [pc, #152]	@ (8015b30 <_vfiprintf_r+0x224>)
 8015a98:	bb1b      	cbnz	r3, 8015ae2 <_vfiprintf_r+0x1d6>
 8015a9a:	9b03      	ldr	r3, [sp, #12]
 8015a9c:	3307      	adds	r3, #7
 8015a9e:	f023 0307 	bic.w	r3, r3, #7
 8015aa2:	3308      	adds	r3, #8
 8015aa4:	9303      	str	r3, [sp, #12]
 8015aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015aa8:	443b      	add	r3, r7
 8015aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8015aac:	e76a      	b.n	8015984 <_vfiprintf_r+0x78>
 8015aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ab2:	460c      	mov	r4, r1
 8015ab4:	2001      	movs	r0, #1
 8015ab6:	e7a8      	b.n	8015a0a <_vfiprintf_r+0xfe>
 8015ab8:	2300      	movs	r3, #0
 8015aba:	3401      	adds	r4, #1
 8015abc:	9305      	str	r3, [sp, #20]
 8015abe:	4619      	mov	r1, r3
 8015ac0:	f04f 0c0a 	mov.w	ip, #10
 8015ac4:	4620      	mov	r0, r4
 8015ac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015aca:	3a30      	subs	r2, #48	@ 0x30
 8015acc:	2a09      	cmp	r2, #9
 8015ace:	d903      	bls.n	8015ad8 <_vfiprintf_r+0x1cc>
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d0c6      	beq.n	8015a62 <_vfiprintf_r+0x156>
 8015ad4:	9105      	str	r1, [sp, #20]
 8015ad6:	e7c4      	b.n	8015a62 <_vfiprintf_r+0x156>
 8015ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8015adc:	4604      	mov	r4, r0
 8015ade:	2301      	movs	r3, #1
 8015ae0:	e7f0      	b.n	8015ac4 <_vfiprintf_r+0x1b8>
 8015ae2:	ab03      	add	r3, sp, #12
 8015ae4:	9300      	str	r3, [sp, #0]
 8015ae6:	462a      	mov	r2, r5
 8015ae8:	4b12      	ldr	r3, [pc, #72]	@ (8015b34 <_vfiprintf_r+0x228>)
 8015aea:	a904      	add	r1, sp, #16
 8015aec:	4630      	mov	r0, r6
 8015aee:	f3af 8000 	nop.w
 8015af2:	4607      	mov	r7, r0
 8015af4:	1c78      	adds	r0, r7, #1
 8015af6:	d1d6      	bne.n	8015aa6 <_vfiprintf_r+0x19a>
 8015af8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015afa:	07d9      	lsls	r1, r3, #31
 8015afc:	d405      	bmi.n	8015b0a <_vfiprintf_r+0x1fe>
 8015afe:	89ab      	ldrh	r3, [r5, #12]
 8015b00:	059a      	lsls	r2, r3, #22
 8015b02:	d402      	bmi.n	8015b0a <_vfiprintf_r+0x1fe>
 8015b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015b06:	f7ff fdcf 	bl	80156a8 <__retarget_lock_release_recursive>
 8015b0a:	89ab      	ldrh	r3, [r5, #12]
 8015b0c:	065b      	lsls	r3, r3, #25
 8015b0e:	f53f af1f 	bmi.w	8015950 <_vfiprintf_r+0x44>
 8015b12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015b14:	e71e      	b.n	8015954 <_vfiprintf_r+0x48>
 8015b16:	ab03      	add	r3, sp, #12
 8015b18:	9300      	str	r3, [sp, #0]
 8015b1a:	462a      	mov	r2, r5
 8015b1c:	4b05      	ldr	r3, [pc, #20]	@ (8015b34 <_vfiprintf_r+0x228>)
 8015b1e:	a904      	add	r1, sp, #16
 8015b20:	4630      	mov	r0, r6
 8015b22:	f000 f879 	bl	8015c18 <_printf_i>
 8015b26:	e7e4      	b.n	8015af2 <_vfiprintf_r+0x1e6>
 8015b28:	080169e8 	.word	0x080169e8
 8015b2c:	080169f2 	.word	0x080169f2
 8015b30:	00000000 	.word	0x00000000
 8015b34:	080158e7 	.word	0x080158e7
 8015b38:	080169ee 	.word	0x080169ee

08015b3c <_printf_common>:
 8015b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b40:	4616      	mov	r6, r2
 8015b42:	4698      	mov	r8, r3
 8015b44:	688a      	ldr	r2, [r1, #8]
 8015b46:	690b      	ldr	r3, [r1, #16]
 8015b48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015b4c:	4293      	cmp	r3, r2
 8015b4e:	bfb8      	it	lt
 8015b50:	4613      	movlt	r3, r2
 8015b52:	6033      	str	r3, [r6, #0]
 8015b54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015b58:	4607      	mov	r7, r0
 8015b5a:	460c      	mov	r4, r1
 8015b5c:	b10a      	cbz	r2, 8015b62 <_printf_common+0x26>
 8015b5e:	3301      	adds	r3, #1
 8015b60:	6033      	str	r3, [r6, #0]
 8015b62:	6823      	ldr	r3, [r4, #0]
 8015b64:	0699      	lsls	r1, r3, #26
 8015b66:	bf42      	ittt	mi
 8015b68:	6833      	ldrmi	r3, [r6, #0]
 8015b6a:	3302      	addmi	r3, #2
 8015b6c:	6033      	strmi	r3, [r6, #0]
 8015b6e:	6825      	ldr	r5, [r4, #0]
 8015b70:	f015 0506 	ands.w	r5, r5, #6
 8015b74:	d106      	bne.n	8015b84 <_printf_common+0x48>
 8015b76:	f104 0a19 	add.w	sl, r4, #25
 8015b7a:	68e3      	ldr	r3, [r4, #12]
 8015b7c:	6832      	ldr	r2, [r6, #0]
 8015b7e:	1a9b      	subs	r3, r3, r2
 8015b80:	42ab      	cmp	r3, r5
 8015b82:	dc26      	bgt.n	8015bd2 <_printf_common+0x96>
 8015b84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015b88:	6822      	ldr	r2, [r4, #0]
 8015b8a:	3b00      	subs	r3, #0
 8015b8c:	bf18      	it	ne
 8015b8e:	2301      	movne	r3, #1
 8015b90:	0692      	lsls	r2, r2, #26
 8015b92:	d42b      	bmi.n	8015bec <_printf_common+0xb0>
 8015b94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015b98:	4641      	mov	r1, r8
 8015b9a:	4638      	mov	r0, r7
 8015b9c:	47c8      	blx	r9
 8015b9e:	3001      	adds	r0, #1
 8015ba0:	d01e      	beq.n	8015be0 <_printf_common+0xa4>
 8015ba2:	6823      	ldr	r3, [r4, #0]
 8015ba4:	6922      	ldr	r2, [r4, #16]
 8015ba6:	f003 0306 	and.w	r3, r3, #6
 8015baa:	2b04      	cmp	r3, #4
 8015bac:	bf02      	ittt	eq
 8015bae:	68e5      	ldreq	r5, [r4, #12]
 8015bb0:	6833      	ldreq	r3, [r6, #0]
 8015bb2:	1aed      	subeq	r5, r5, r3
 8015bb4:	68a3      	ldr	r3, [r4, #8]
 8015bb6:	bf0c      	ite	eq
 8015bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015bbc:	2500      	movne	r5, #0
 8015bbe:	4293      	cmp	r3, r2
 8015bc0:	bfc4      	itt	gt
 8015bc2:	1a9b      	subgt	r3, r3, r2
 8015bc4:	18ed      	addgt	r5, r5, r3
 8015bc6:	2600      	movs	r6, #0
 8015bc8:	341a      	adds	r4, #26
 8015bca:	42b5      	cmp	r5, r6
 8015bcc:	d11a      	bne.n	8015c04 <_printf_common+0xc8>
 8015bce:	2000      	movs	r0, #0
 8015bd0:	e008      	b.n	8015be4 <_printf_common+0xa8>
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	4652      	mov	r2, sl
 8015bd6:	4641      	mov	r1, r8
 8015bd8:	4638      	mov	r0, r7
 8015bda:	47c8      	blx	r9
 8015bdc:	3001      	adds	r0, #1
 8015bde:	d103      	bne.n	8015be8 <_printf_common+0xac>
 8015be0:	f04f 30ff 	mov.w	r0, #4294967295
 8015be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015be8:	3501      	adds	r5, #1
 8015bea:	e7c6      	b.n	8015b7a <_printf_common+0x3e>
 8015bec:	18e1      	adds	r1, r4, r3
 8015bee:	1c5a      	adds	r2, r3, #1
 8015bf0:	2030      	movs	r0, #48	@ 0x30
 8015bf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015bf6:	4422      	add	r2, r4
 8015bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015bfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015c00:	3302      	adds	r3, #2
 8015c02:	e7c7      	b.n	8015b94 <_printf_common+0x58>
 8015c04:	2301      	movs	r3, #1
 8015c06:	4622      	mov	r2, r4
 8015c08:	4641      	mov	r1, r8
 8015c0a:	4638      	mov	r0, r7
 8015c0c:	47c8      	blx	r9
 8015c0e:	3001      	adds	r0, #1
 8015c10:	d0e6      	beq.n	8015be0 <_printf_common+0xa4>
 8015c12:	3601      	adds	r6, #1
 8015c14:	e7d9      	b.n	8015bca <_printf_common+0x8e>
	...

08015c18 <_printf_i>:
 8015c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c1c:	7e0f      	ldrb	r7, [r1, #24]
 8015c1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015c20:	2f78      	cmp	r7, #120	@ 0x78
 8015c22:	4691      	mov	r9, r2
 8015c24:	4680      	mov	r8, r0
 8015c26:	460c      	mov	r4, r1
 8015c28:	469a      	mov	sl, r3
 8015c2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015c2e:	d807      	bhi.n	8015c40 <_printf_i+0x28>
 8015c30:	2f62      	cmp	r7, #98	@ 0x62
 8015c32:	d80a      	bhi.n	8015c4a <_printf_i+0x32>
 8015c34:	2f00      	cmp	r7, #0
 8015c36:	f000 80d1 	beq.w	8015ddc <_printf_i+0x1c4>
 8015c3a:	2f58      	cmp	r7, #88	@ 0x58
 8015c3c:	f000 80b8 	beq.w	8015db0 <_printf_i+0x198>
 8015c40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015c44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015c48:	e03a      	b.n	8015cc0 <_printf_i+0xa8>
 8015c4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015c4e:	2b15      	cmp	r3, #21
 8015c50:	d8f6      	bhi.n	8015c40 <_printf_i+0x28>
 8015c52:	a101      	add	r1, pc, #4	@ (adr r1, 8015c58 <_printf_i+0x40>)
 8015c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015c58:	08015cb1 	.word	0x08015cb1
 8015c5c:	08015cc5 	.word	0x08015cc5
 8015c60:	08015c41 	.word	0x08015c41
 8015c64:	08015c41 	.word	0x08015c41
 8015c68:	08015c41 	.word	0x08015c41
 8015c6c:	08015c41 	.word	0x08015c41
 8015c70:	08015cc5 	.word	0x08015cc5
 8015c74:	08015c41 	.word	0x08015c41
 8015c78:	08015c41 	.word	0x08015c41
 8015c7c:	08015c41 	.word	0x08015c41
 8015c80:	08015c41 	.word	0x08015c41
 8015c84:	08015dc3 	.word	0x08015dc3
 8015c88:	08015cef 	.word	0x08015cef
 8015c8c:	08015d7d 	.word	0x08015d7d
 8015c90:	08015c41 	.word	0x08015c41
 8015c94:	08015c41 	.word	0x08015c41
 8015c98:	08015de5 	.word	0x08015de5
 8015c9c:	08015c41 	.word	0x08015c41
 8015ca0:	08015cef 	.word	0x08015cef
 8015ca4:	08015c41 	.word	0x08015c41
 8015ca8:	08015c41 	.word	0x08015c41
 8015cac:	08015d85 	.word	0x08015d85
 8015cb0:	6833      	ldr	r3, [r6, #0]
 8015cb2:	1d1a      	adds	r2, r3, #4
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	6032      	str	r2, [r6, #0]
 8015cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015cbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015cc0:	2301      	movs	r3, #1
 8015cc2:	e09c      	b.n	8015dfe <_printf_i+0x1e6>
 8015cc4:	6833      	ldr	r3, [r6, #0]
 8015cc6:	6820      	ldr	r0, [r4, #0]
 8015cc8:	1d19      	adds	r1, r3, #4
 8015cca:	6031      	str	r1, [r6, #0]
 8015ccc:	0606      	lsls	r6, r0, #24
 8015cce:	d501      	bpl.n	8015cd4 <_printf_i+0xbc>
 8015cd0:	681d      	ldr	r5, [r3, #0]
 8015cd2:	e003      	b.n	8015cdc <_printf_i+0xc4>
 8015cd4:	0645      	lsls	r5, r0, #25
 8015cd6:	d5fb      	bpl.n	8015cd0 <_printf_i+0xb8>
 8015cd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015cdc:	2d00      	cmp	r5, #0
 8015cde:	da03      	bge.n	8015ce8 <_printf_i+0xd0>
 8015ce0:	232d      	movs	r3, #45	@ 0x2d
 8015ce2:	426d      	negs	r5, r5
 8015ce4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015ce8:	4858      	ldr	r0, [pc, #352]	@ (8015e4c <_printf_i+0x234>)
 8015cea:	230a      	movs	r3, #10
 8015cec:	e011      	b.n	8015d12 <_printf_i+0xfa>
 8015cee:	6821      	ldr	r1, [r4, #0]
 8015cf0:	6833      	ldr	r3, [r6, #0]
 8015cf2:	0608      	lsls	r0, r1, #24
 8015cf4:	f853 5b04 	ldr.w	r5, [r3], #4
 8015cf8:	d402      	bmi.n	8015d00 <_printf_i+0xe8>
 8015cfa:	0649      	lsls	r1, r1, #25
 8015cfc:	bf48      	it	mi
 8015cfe:	b2ad      	uxthmi	r5, r5
 8015d00:	2f6f      	cmp	r7, #111	@ 0x6f
 8015d02:	4852      	ldr	r0, [pc, #328]	@ (8015e4c <_printf_i+0x234>)
 8015d04:	6033      	str	r3, [r6, #0]
 8015d06:	bf14      	ite	ne
 8015d08:	230a      	movne	r3, #10
 8015d0a:	2308      	moveq	r3, #8
 8015d0c:	2100      	movs	r1, #0
 8015d0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015d12:	6866      	ldr	r6, [r4, #4]
 8015d14:	60a6      	str	r6, [r4, #8]
 8015d16:	2e00      	cmp	r6, #0
 8015d18:	db05      	blt.n	8015d26 <_printf_i+0x10e>
 8015d1a:	6821      	ldr	r1, [r4, #0]
 8015d1c:	432e      	orrs	r6, r5
 8015d1e:	f021 0104 	bic.w	r1, r1, #4
 8015d22:	6021      	str	r1, [r4, #0]
 8015d24:	d04b      	beq.n	8015dbe <_printf_i+0x1a6>
 8015d26:	4616      	mov	r6, r2
 8015d28:	fbb5 f1f3 	udiv	r1, r5, r3
 8015d2c:	fb03 5711 	mls	r7, r3, r1, r5
 8015d30:	5dc7      	ldrb	r7, [r0, r7]
 8015d32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015d36:	462f      	mov	r7, r5
 8015d38:	42bb      	cmp	r3, r7
 8015d3a:	460d      	mov	r5, r1
 8015d3c:	d9f4      	bls.n	8015d28 <_printf_i+0x110>
 8015d3e:	2b08      	cmp	r3, #8
 8015d40:	d10b      	bne.n	8015d5a <_printf_i+0x142>
 8015d42:	6823      	ldr	r3, [r4, #0]
 8015d44:	07df      	lsls	r7, r3, #31
 8015d46:	d508      	bpl.n	8015d5a <_printf_i+0x142>
 8015d48:	6923      	ldr	r3, [r4, #16]
 8015d4a:	6861      	ldr	r1, [r4, #4]
 8015d4c:	4299      	cmp	r1, r3
 8015d4e:	bfde      	ittt	le
 8015d50:	2330      	movle	r3, #48	@ 0x30
 8015d52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015d56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015d5a:	1b92      	subs	r2, r2, r6
 8015d5c:	6122      	str	r2, [r4, #16]
 8015d5e:	f8cd a000 	str.w	sl, [sp]
 8015d62:	464b      	mov	r3, r9
 8015d64:	aa03      	add	r2, sp, #12
 8015d66:	4621      	mov	r1, r4
 8015d68:	4640      	mov	r0, r8
 8015d6a:	f7ff fee7 	bl	8015b3c <_printf_common>
 8015d6e:	3001      	adds	r0, #1
 8015d70:	d14a      	bne.n	8015e08 <_printf_i+0x1f0>
 8015d72:	f04f 30ff 	mov.w	r0, #4294967295
 8015d76:	b004      	add	sp, #16
 8015d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d7c:	6823      	ldr	r3, [r4, #0]
 8015d7e:	f043 0320 	orr.w	r3, r3, #32
 8015d82:	6023      	str	r3, [r4, #0]
 8015d84:	4832      	ldr	r0, [pc, #200]	@ (8015e50 <_printf_i+0x238>)
 8015d86:	2778      	movs	r7, #120	@ 0x78
 8015d88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015d8c:	6823      	ldr	r3, [r4, #0]
 8015d8e:	6831      	ldr	r1, [r6, #0]
 8015d90:	061f      	lsls	r7, r3, #24
 8015d92:	f851 5b04 	ldr.w	r5, [r1], #4
 8015d96:	d402      	bmi.n	8015d9e <_printf_i+0x186>
 8015d98:	065f      	lsls	r7, r3, #25
 8015d9a:	bf48      	it	mi
 8015d9c:	b2ad      	uxthmi	r5, r5
 8015d9e:	6031      	str	r1, [r6, #0]
 8015da0:	07d9      	lsls	r1, r3, #31
 8015da2:	bf44      	itt	mi
 8015da4:	f043 0320 	orrmi.w	r3, r3, #32
 8015da8:	6023      	strmi	r3, [r4, #0]
 8015daa:	b11d      	cbz	r5, 8015db4 <_printf_i+0x19c>
 8015dac:	2310      	movs	r3, #16
 8015dae:	e7ad      	b.n	8015d0c <_printf_i+0xf4>
 8015db0:	4826      	ldr	r0, [pc, #152]	@ (8015e4c <_printf_i+0x234>)
 8015db2:	e7e9      	b.n	8015d88 <_printf_i+0x170>
 8015db4:	6823      	ldr	r3, [r4, #0]
 8015db6:	f023 0320 	bic.w	r3, r3, #32
 8015dba:	6023      	str	r3, [r4, #0]
 8015dbc:	e7f6      	b.n	8015dac <_printf_i+0x194>
 8015dbe:	4616      	mov	r6, r2
 8015dc0:	e7bd      	b.n	8015d3e <_printf_i+0x126>
 8015dc2:	6833      	ldr	r3, [r6, #0]
 8015dc4:	6825      	ldr	r5, [r4, #0]
 8015dc6:	6961      	ldr	r1, [r4, #20]
 8015dc8:	1d18      	adds	r0, r3, #4
 8015dca:	6030      	str	r0, [r6, #0]
 8015dcc:	062e      	lsls	r6, r5, #24
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	d501      	bpl.n	8015dd6 <_printf_i+0x1be>
 8015dd2:	6019      	str	r1, [r3, #0]
 8015dd4:	e002      	b.n	8015ddc <_printf_i+0x1c4>
 8015dd6:	0668      	lsls	r0, r5, #25
 8015dd8:	d5fb      	bpl.n	8015dd2 <_printf_i+0x1ba>
 8015dda:	8019      	strh	r1, [r3, #0]
 8015ddc:	2300      	movs	r3, #0
 8015dde:	6123      	str	r3, [r4, #16]
 8015de0:	4616      	mov	r6, r2
 8015de2:	e7bc      	b.n	8015d5e <_printf_i+0x146>
 8015de4:	6833      	ldr	r3, [r6, #0]
 8015de6:	1d1a      	adds	r2, r3, #4
 8015de8:	6032      	str	r2, [r6, #0]
 8015dea:	681e      	ldr	r6, [r3, #0]
 8015dec:	6862      	ldr	r2, [r4, #4]
 8015dee:	2100      	movs	r1, #0
 8015df0:	4630      	mov	r0, r6
 8015df2:	f7ea fa0d 	bl	8000210 <memchr>
 8015df6:	b108      	cbz	r0, 8015dfc <_printf_i+0x1e4>
 8015df8:	1b80      	subs	r0, r0, r6
 8015dfa:	6060      	str	r0, [r4, #4]
 8015dfc:	6863      	ldr	r3, [r4, #4]
 8015dfe:	6123      	str	r3, [r4, #16]
 8015e00:	2300      	movs	r3, #0
 8015e02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015e06:	e7aa      	b.n	8015d5e <_printf_i+0x146>
 8015e08:	6923      	ldr	r3, [r4, #16]
 8015e0a:	4632      	mov	r2, r6
 8015e0c:	4649      	mov	r1, r9
 8015e0e:	4640      	mov	r0, r8
 8015e10:	47d0      	blx	sl
 8015e12:	3001      	adds	r0, #1
 8015e14:	d0ad      	beq.n	8015d72 <_printf_i+0x15a>
 8015e16:	6823      	ldr	r3, [r4, #0]
 8015e18:	079b      	lsls	r3, r3, #30
 8015e1a:	d413      	bmi.n	8015e44 <_printf_i+0x22c>
 8015e1c:	68e0      	ldr	r0, [r4, #12]
 8015e1e:	9b03      	ldr	r3, [sp, #12]
 8015e20:	4298      	cmp	r0, r3
 8015e22:	bfb8      	it	lt
 8015e24:	4618      	movlt	r0, r3
 8015e26:	e7a6      	b.n	8015d76 <_printf_i+0x15e>
 8015e28:	2301      	movs	r3, #1
 8015e2a:	4632      	mov	r2, r6
 8015e2c:	4649      	mov	r1, r9
 8015e2e:	4640      	mov	r0, r8
 8015e30:	47d0      	blx	sl
 8015e32:	3001      	adds	r0, #1
 8015e34:	d09d      	beq.n	8015d72 <_printf_i+0x15a>
 8015e36:	3501      	adds	r5, #1
 8015e38:	68e3      	ldr	r3, [r4, #12]
 8015e3a:	9903      	ldr	r1, [sp, #12]
 8015e3c:	1a5b      	subs	r3, r3, r1
 8015e3e:	42ab      	cmp	r3, r5
 8015e40:	dcf2      	bgt.n	8015e28 <_printf_i+0x210>
 8015e42:	e7eb      	b.n	8015e1c <_printf_i+0x204>
 8015e44:	2500      	movs	r5, #0
 8015e46:	f104 0619 	add.w	r6, r4, #25
 8015e4a:	e7f5      	b.n	8015e38 <_printf_i+0x220>
 8015e4c:	080169f9 	.word	0x080169f9
 8015e50:	08016a0a 	.word	0x08016a0a

08015e54 <__sflush_r>:
 8015e54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e5c:	0716      	lsls	r6, r2, #28
 8015e5e:	4605      	mov	r5, r0
 8015e60:	460c      	mov	r4, r1
 8015e62:	d454      	bmi.n	8015f0e <__sflush_r+0xba>
 8015e64:	684b      	ldr	r3, [r1, #4]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	dc02      	bgt.n	8015e70 <__sflush_r+0x1c>
 8015e6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	dd48      	ble.n	8015f02 <__sflush_r+0xae>
 8015e70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015e72:	2e00      	cmp	r6, #0
 8015e74:	d045      	beq.n	8015f02 <__sflush_r+0xae>
 8015e76:	2300      	movs	r3, #0
 8015e78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015e7c:	682f      	ldr	r7, [r5, #0]
 8015e7e:	6a21      	ldr	r1, [r4, #32]
 8015e80:	602b      	str	r3, [r5, #0]
 8015e82:	d030      	beq.n	8015ee6 <__sflush_r+0x92>
 8015e84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015e86:	89a3      	ldrh	r3, [r4, #12]
 8015e88:	0759      	lsls	r1, r3, #29
 8015e8a:	d505      	bpl.n	8015e98 <__sflush_r+0x44>
 8015e8c:	6863      	ldr	r3, [r4, #4]
 8015e8e:	1ad2      	subs	r2, r2, r3
 8015e90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015e92:	b10b      	cbz	r3, 8015e98 <__sflush_r+0x44>
 8015e94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015e96:	1ad2      	subs	r2, r2, r3
 8015e98:	2300      	movs	r3, #0
 8015e9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015e9c:	6a21      	ldr	r1, [r4, #32]
 8015e9e:	4628      	mov	r0, r5
 8015ea0:	47b0      	blx	r6
 8015ea2:	1c43      	adds	r3, r0, #1
 8015ea4:	89a3      	ldrh	r3, [r4, #12]
 8015ea6:	d106      	bne.n	8015eb6 <__sflush_r+0x62>
 8015ea8:	6829      	ldr	r1, [r5, #0]
 8015eaa:	291d      	cmp	r1, #29
 8015eac:	d82b      	bhi.n	8015f06 <__sflush_r+0xb2>
 8015eae:	4a2a      	ldr	r2, [pc, #168]	@ (8015f58 <__sflush_r+0x104>)
 8015eb0:	40ca      	lsrs	r2, r1
 8015eb2:	07d6      	lsls	r6, r2, #31
 8015eb4:	d527      	bpl.n	8015f06 <__sflush_r+0xb2>
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	6062      	str	r2, [r4, #4]
 8015eba:	04d9      	lsls	r1, r3, #19
 8015ebc:	6922      	ldr	r2, [r4, #16]
 8015ebe:	6022      	str	r2, [r4, #0]
 8015ec0:	d504      	bpl.n	8015ecc <__sflush_r+0x78>
 8015ec2:	1c42      	adds	r2, r0, #1
 8015ec4:	d101      	bne.n	8015eca <__sflush_r+0x76>
 8015ec6:	682b      	ldr	r3, [r5, #0]
 8015ec8:	b903      	cbnz	r3, 8015ecc <__sflush_r+0x78>
 8015eca:	6560      	str	r0, [r4, #84]	@ 0x54
 8015ecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015ece:	602f      	str	r7, [r5, #0]
 8015ed0:	b1b9      	cbz	r1, 8015f02 <__sflush_r+0xae>
 8015ed2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015ed6:	4299      	cmp	r1, r3
 8015ed8:	d002      	beq.n	8015ee0 <__sflush_r+0x8c>
 8015eda:	4628      	mov	r0, r5
 8015edc:	f7ff fbf4 	bl	80156c8 <_free_r>
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	6363      	str	r3, [r4, #52]	@ 0x34
 8015ee4:	e00d      	b.n	8015f02 <__sflush_r+0xae>
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	4628      	mov	r0, r5
 8015eea:	47b0      	blx	r6
 8015eec:	4602      	mov	r2, r0
 8015eee:	1c50      	adds	r0, r2, #1
 8015ef0:	d1c9      	bne.n	8015e86 <__sflush_r+0x32>
 8015ef2:	682b      	ldr	r3, [r5, #0]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d0c6      	beq.n	8015e86 <__sflush_r+0x32>
 8015ef8:	2b1d      	cmp	r3, #29
 8015efa:	d001      	beq.n	8015f00 <__sflush_r+0xac>
 8015efc:	2b16      	cmp	r3, #22
 8015efe:	d11e      	bne.n	8015f3e <__sflush_r+0xea>
 8015f00:	602f      	str	r7, [r5, #0]
 8015f02:	2000      	movs	r0, #0
 8015f04:	e022      	b.n	8015f4c <__sflush_r+0xf8>
 8015f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f0a:	b21b      	sxth	r3, r3
 8015f0c:	e01b      	b.n	8015f46 <__sflush_r+0xf2>
 8015f0e:	690f      	ldr	r7, [r1, #16]
 8015f10:	2f00      	cmp	r7, #0
 8015f12:	d0f6      	beq.n	8015f02 <__sflush_r+0xae>
 8015f14:	0793      	lsls	r3, r2, #30
 8015f16:	680e      	ldr	r6, [r1, #0]
 8015f18:	bf08      	it	eq
 8015f1a:	694b      	ldreq	r3, [r1, #20]
 8015f1c:	600f      	str	r7, [r1, #0]
 8015f1e:	bf18      	it	ne
 8015f20:	2300      	movne	r3, #0
 8015f22:	eba6 0807 	sub.w	r8, r6, r7
 8015f26:	608b      	str	r3, [r1, #8]
 8015f28:	f1b8 0f00 	cmp.w	r8, #0
 8015f2c:	dde9      	ble.n	8015f02 <__sflush_r+0xae>
 8015f2e:	6a21      	ldr	r1, [r4, #32]
 8015f30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015f32:	4643      	mov	r3, r8
 8015f34:	463a      	mov	r2, r7
 8015f36:	4628      	mov	r0, r5
 8015f38:	47b0      	blx	r6
 8015f3a:	2800      	cmp	r0, #0
 8015f3c:	dc08      	bgt.n	8015f50 <__sflush_r+0xfc>
 8015f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f46:	81a3      	strh	r3, [r4, #12]
 8015f48:	f04f 30ff 	mov.w	r0, #4294967295
 8015f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f50:	4407      	add	r7, r0
 8015f52:	eba8 0800 	sub.w	r8, r8, r0
 8015f56:	e7e7      	b.n	8015f28 <__sflush_r+0xd4>
 8015f58:	20400001 	.word	0x20400001

08015f5c <_fflush_r>:
 8015f5c:	b538      	push	{r3, r4, r5, lr}
 8015f5e:	690b      	ldr	r3, [r1, #16]
 8015f60:	4605      	mov	r5, r0
 8015f62:	460c      	mov	r4, r1
 8015f64:	b913      	cbnz	r3, 8015f6c <_fflush_r+0x10>
 8015f66:	2500      	movs	r5, #0
 8015f68:	4628      	mov	r0, r5
 8015f6a:	bd38      	pop	{r3, r4, r5, pc}
 8015f6c:	b118      	cbz	r0, 8015f76 <_fflush_r+0x1a>
 8015f6e:	6a03      	ldr	r3, [r0, #32]
 8015f70:	b90b      	cbnz	r3, 8015f76 <_fflush_r+0x1a>
 8015f72:	f7ff f943 	bl	80151fc <__sinit>
 8015f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d0f3      	beq.n	8015f66 <_fflush_r+0xa>
 8015f7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015f80:	07d0      	lsls	r0, r2, #31
 8015f82:	d404      	bmi.n	8015f8e <_fflush_r+0x32>
 8015f84:	0599      	lsls	r1, r3, #22
 8015f86:	d402      	bmi.n	8015f8e <_fflush_r+0x32>
 8015f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015f8a:	f7ff fb8c 	bl	80156a6 <__retarget_lock_acquire_recursive>
 8015f8e:	4628      	mov	r0, r5
 8015f90:	4621      	mov	r1, r4
 8015f92:	f7ff ff5f 	bl	8015e54 <__sflush_r>
 8015f96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015f98:	07da      	lsls	r2, r3, #31
 8015f9a:	4605      	mov	r5, r0
 8015f9c:	d4e4      	bmi.n	8015f68 <_fflush_r+0xc>
 8015f9e:	89a3      	ldrh	r3, [r4, #12]
 8015fa0:	059b      	lsls	r3, r3, #22
 8015fa2:	d4e1      	bmi.n	8015f68 <_fflush_r+0xc>
 8015fa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015fa6:	f7ff fb7f 	bl	80156a8 <__retarget_lock_release_recursive>
 8015faa:	e7dd      	b.n	8015f68 <_fflush_r+0xc>

08015fac <__swhatbuf_r>:
 8015fac:	b570      	push	{r4, r5, r6, lr}
 8015fae:	460c      	mov	r4, r1
 8015fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fb4:	2900      	cmp	r1, #0
 8015fb6:	b096      	sub	sp, #88	@ 0x58
 8015fb8:	4615      	mov	r5, r2
 8015fba:	461e      	mov	r6, r3
 8015fbc:	da0d      	bge.n	8015fda <__swhatbuf_r+0x2e>
 8015fbe:	89a3      	ldrh	r3, [r4, #12]
 8015fc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015fc4:	f04f 0100 	mov.w	r1, #0
 8015fc8:	bf14      	ite	ne
 8015fca:	2340      	movne	r3, #64	@ 0x40
 8015fcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015fd0:	2000      	movs	r0, #0
 8015fd2:	6031      	str	r1, [r6, #0]
 8015fd4:	602b      	str	r3, [r5, #0]
 8015fd6:	b016      	add	sp, #88	@ 0x58
 8015fd8:	bd70      	pop	{r4, r5, r6, pc}
 8015fda:	466a      	mov	r2, sp
 8015fdc:	f000 f848 	bl	8016070 <_fstat_r>
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	dbec      	blt.n	8015fbe <__swhatbuf_r+0x12>
 8015fe4:	9901      	ldr	r1, [sp, #4]
 8015fe6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015fea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015fee:	4259      	negs	r1, r3
 8015ff0:	4159      	adcs	r1, r3
 8015ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015ff6:	e7eb      	b.n	8015fd0 <__swhatbuf_r+0x24>

08015ff8 <__smakebuf_r>:
 8015ff8:	898b      	ldrh	r3, [r1, #12]
 8015ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ffc:	079d      	lsls	r5, r3, #30
 8015ffe:	4606      	mov	r6, r0
 8016000:	460c      	mov	r4, r1
 8016002:	d507      	bpl.n	8016014 <__smakebuf_r+0x1c>
 8016004:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016008:	6023      	str	r3, [r4, #0]
 801600a:	6123      	str	r3, [r4, #16]
 801600c:	2301      	movs	r3, #1
 801600e:	6163      	str	r3, [r4, #20]
 8016010:	b003      	add	sp, #12
 8016012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016014:	ab01      	add	r3, sp, #4
 8016016:	466a      	mov	r2, sp
 8016018:	f7ff ffc8 	bl	8015fac <__swhatbuf_r>
 801601c:	9f00      	ldr	r7, [sp, #0]
 801601e:	4605      	mov	r5, r0
 8016020:	4639      	mov	r1, r7
 8016022:	4630      	mov	r0, r6
 8016024:	f7ff fbbc 	bl	80157a0 <_malloc_r>
 8016028:	b948      	cbnz	r0, 801603e <__smakebuf_r+0x46>
 801602a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801602e:	059a      	lsls	r2, r3, #22
 8016030:	d4ee      	bmi.n	8016010 <__smakebuf_r+0x18>
 8016032:	f023 0303 	bic.w	r3, r3, #3
 8016036:	f043 0302 	orr.w	r3, r3, #2
 801603a:	81a3      	strh	r3, [r4, #12]
 801603c:	e7e2      	b.n	8016004 <__smakebuf_r+0xc>
 801603e:	89a3      	ldrh	r3, [r4, #12]
 8016040:	6020      	str	r0, [r4, #0]
 8016042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016046:	81a3      	strh	r3, [r4, #12]
 8016048:	9b01      	ldr	r3, [sp, #4]
 801604a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801604e:	b15b      	cbz	r3, 8016068 <__smakebuf_r+0x70>
 8016050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016054:	4630      	mov	r0, r6
 8016056:	f000 f81d 	bl	8016094 <_isatty_r>
 801605a:	b128      	cbz	r0, 8016068 <__smakebuf_r+0x70>
 801605c:	89a3      	ldrh	r3, [r4, #12]
 801605e:	f023 0303 	bic.w	r3, r3, #3
 8016062:	f043 0301 	orr.w	r3, r3, #1
 8016066:	81a3      	strh	r3, [r4, #12]
 8016068:	89a3      	ldrh	r3, [r4, #12]
 801606a:	431d      	orrs	r5, r3
 801606c:	81a5      	strh	r5, [r4, #12]
 801606e:	e7cf      	b.n	8016010 <__smakebuf_r+0x18>

08016070 <_fstat_r>:
 8016070:	b538      	push	{r3, r4, r5, lr}
 8016072:	4d07      	ldr	r5, [pc, #28]	@ (8016090 <_fstat_r+0x20>)
 8016074:	2300      	movs	r3, #0
 8016076:	4604      	mov	r4, r0
 8016078:	4608      	mov	r0, r1
 801607a:	4611      	mov	r1, r2
 801607c:	602b      	str	r3, [r5, #0]
 801607e:	f7ec fec4 	bl	8002e0a <_fstat>
 8016082:	1c43      	adds	r3, r0, #1
 8016084:	d102      	bne.n	801608c <_fstat_r+0x1c>
 8016086:	682b      	ldr	r3, [r5, #0]
 8016088:	b103      	cbz	r3, 801608c <_fstat_r+0x1c>
 801608a:	6023      	str	r3, [r4, #0]
 801608c:	bd38      	pop	{r3, r4, r5, pc}
 801608e:	bf00      	nop
 8016090:	2000d7a0 	.word	0x2000d7a0

08016094 <_isatty_r>:
 8016094:	b538      	push	{r3, r4, r5, lr}
 8016096:	4d06      	ldr	r5, [pc, #24]	@ (80160b0 <_isatty_r+0x1c>)
 8016098:	2300      	movs	r3, #0
 801609a:	4604      	mov	r4, r0
 801609c:	4608      	mov	r0, r1
 801609e:	602b      	str	r3, [r5, #0]
 80160a0:	f7ec fec3 	bl	8002e2a <_isatty>
 80160a4:	1c43      	adds	r3, r0, #1
 80160a6:	d102      	bne.n	80160ae <_isatty_r+0x1a>
 80160a8:	682b      	ldr	r3, [r5, #0]
 80160aa:	b103      	cbz	r3, 80160ae <_isatty_r+0x1a>
 80160ac:	6023      	str	r3, [r4, #0]
 80160ae:	bd38      	pop	{r3, r4, r5, pc}
 80160b0:	2000d7a0 	.word	0x2000d7a0

080160b4 <_sbrk_r>:
 80160b4:	b538      	push	{r3, r4, r5, lr}
 80160b6:	4d06      	ldr	r5, [pc, #24]	@ (80160d0 <_sbrk_r+0x1c>)
 80160b8:	2300      	movs	r3, #0
 80160ba:	4604      	mov	r4, r0
 80160bc:	4608      	mov	r0, r1
 80160be:	602b      	str	r3, [r5, #0]
 80160c0:	f7ec fecc 	bl	8002e5c <_sbrk>
 80160c4:	1c43      	adds	r3, r0, #1
 80160c6:	d102      	bne.n	80160ce <_sbrk_r+0x1a>
 80160c8:	682b      	ldr	r3, [r5, #0]
 80160ca:	b103      	cbz	r3, 80160ce <_sbrk_r+0x1a>
 80160cc:	6023      	str	r3, [r4, #0]
 80160ce:	bd38      	pop	{r3, r4, r5, pc}
 80160d0:	2000d7a0 	.word	0x2000d7a0

080160d4 <_init>:
 80160d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160d6:	bf00      	nop
 80160d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160da:	bc08      	pop	{r3}
 80160dc:	469e      	mov	lr, r3
 80160de:	4770      	bx	lr

080160e0 <_fini>:
 80160e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160e2:	bf00      	nop
 80160e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160e6:	bc08      	pop	{r3}
 80160e8:	469e      	mov	lr, r3
 80160ea:	4770      	bx	lr
